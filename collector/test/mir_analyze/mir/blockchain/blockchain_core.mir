// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: &std::vec::Vec<std::string::String>;
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &std::string::String;
    let mut _14: &std::vec::Vec<std::string::String>;
    let _15: !;
    let mut _16: bool;
    let _17: &std::string::String;
    let mut _18: &std::vec::Vec<std::string::String>;
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &&std::string::String;
    let _27: &std::string::String;
    let _28: std::string::String;
    let _29: &str;
    let mut _30: std::option::Option<&str>;
    let _31: &str;
    let _32: &std::string::String;
    let mut _33: &std::vec::Vec<std::string::String>;
    let _34: &str;
    let mut _35: std::option::Option<&str>;
    let _36: &str;
    let _37: !;
    let mut _38: bool;
    let _39: &std::string::String;
    let mut _40: &std::vec::Vec<std::string::String>;
    let mut _41: bool;
    let mut _42: usize;
    let mut _43: &std::vec::Vec<std::string::String>;
    let _44: ();
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let mut _47: &[core::fmt::rt::Argument<'_>];
    let _48: &[core::fmt::rt::Argument<'_>; 1];
    let _49: [core::fmt::rt::Argument<'_>; 1];
    let mut _50: core::fmt::rt::Argument<'_>;
    let _51: &std::string::String;
    let mut _52: &std::vec::Vec<std::string::String>;
    let _53: !;
    let mut _57: std::ops::Range<usize>;
    let mut _58: std::ops::Range<usize>;
    let mut _59: usize;
    let mut _60: &std::vec::Vec<std::string::String>;
    let mut _62: std::option::Option<usize>;
    let mut _63: &mut std::ops::Range<usize>;
    let mut _64: isize;
    let mut _66: bool;
    let _67: &std::string::String;
    let mut _68: &std::vec::Vec<std::string::String>;
    let mut _69: bool;
    let _70: &std::string::String;
    let mut _71: &std::vec::Vec<std::string::String>;
    let mut _72: bool;
    let mut _73: bool;
    let _74: ();
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: [core::fmt::rt::Argument<'_>; 1];
    let mut _80: core::fmt::rt::Argument<'_>;
    let _81: &std::string::String;
    let mut _82: &std::vec::Vec<std::string::String>;
    let _83: !;
    let mut _84: bool;
    let mut _85: usize;
    let _86: std::string::String;
    let mut _87: &mut std::vec::Vec<std::string::String>;
    let mut _88: usize;
    let mut _90: bool;
    let mut _91: bool;
    let mut _93: std::result::Result<u64, std::num::ParseIntError>;
    let _94: &str;
    let _95: &std::string::String;
    let mut _96: &std::vec::Vec<std::string::String>;
    let _97: &str;
    let _98: &std::string::String;
    let mut _99: &std::vec::Vec<std::string::String>;
    let mut _101: std::result::Result<blockstack_lib::burnchains::bitcoin::spv::SpvClient, blockstack_lib::burnchains::bitcoin::Error>;
    let _102: &str;
    let mut _103: std::option::Option<u64>;
    let mut _104: blockstack_lib::burnchains::bitcoin::BitcoinNetworkType;
    let _105: &str;
    let mut _106: std::option::Option<blockstack_lib::deps::bitcoin::blockdata::block::LoneBlockHeader>;
    let mut _107: std::result::Result<std::option::Option<blockstack_lib::deps::bitcoin::blockdata::block::LoneBlockHeader>, blockstack_lib::burnchains::bitcoin::Error>;
    let mut _108: &blockstack_lib::burnchains::bitcoin::spv::SpvClient;
    let _109: &str;
    let mut _110: isize;
    let _112: ();
    let mut _113: std::fmt::Arguments<'_>;
    let mut _114: &[&str];
    let mut _115: &[core::fmt::rt::Argument<'_>];
    let _116: &[core::fmt::rt::Argument<'_>; 1];
    let _117: [core::fmt::rt::Argument<'_>; 1];
    let mut _118: core::fmt::rt::Argument<'_>;
    let _119: &blockstack_lib::deps::bitcoin::blockdata::block::LoneBlockHeader;
    let mut _120: &[core::fmt::rt::Placeholder];
    let _121: &[core::fmt::rt::Placeholder; 1];
    let _122: [core::fmt::rt::Placeholder; 1];
    let mut _123: core::fmt::rt::Placeholder;
    let mut _124: core::fmt::rt::Alignment;
    let mut _125: core::fmt::rt::Count;
    let mut _126: core::fmt::rt::Count;
    let mut _127: core::fmt::rt::UnsafeArg;
    let _128: !;
    let _129: ();
    let mut _130: std::fmt::Arguments<'_>;
    let mut _131: &[&str];
    let _132: !;
    let mut _133: bool;
    let _134: &std::string::String;
    let mut _135: &std::vec::Vec<std::string::String>;
    let mut _136: bool;
    let mut _137: usize;
    let mut _138: &std::vec::Vec<std::string::String>;
    let _139: ();
    let mut _140: std::fmt::Arguments<'_>;
    let mut _141: &[&str];
    let mut _142: &[core::fmt::rt::Argument<'_>];
    let _143: &[core::fmt::rt::Argument<'_>; 1];
    let _144: [core::fmt::rt::Argument<'_>; 1];
    let mut _145: core::fmt::rt::Argument<'_>;
    let _146: &std::string::String;
    let mut _147: &std::vec::Vec<std::string::String>;
    let _148: !;
    let _149: &std::string::String;
    let mut _150: &std::vec::Vec<std::string::String>;
    let mut _152: std::result::Result<std::vec::Vec<u8>, ()>;
    let mut _153: std::result::Result<std::vec::Vec<u8>, blockstack_lib::util::HexError>;
    let _154: &str;
    let mut _156: &std::vec::Vec<u8>;
    let mut _158: &mut std::io::Cursor<&std::vec::Vec<u8>>;
    let mut _160: std::result::Result<blockstack_lib::chainstate::stacks::StacksTransaction, ()>;
    let mut _161: std::result::Result<blockstack_lib::chainstate::stacks::StacksTransaction, blockstack_lib::codec::Error>;
    let mut _162: &mut blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>;
    let mut _163: {closure@src/main.rs:169:22: 169:25};
    let mut _164: &blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>;
    let _165: ();
    let mut _166: std::fmt::Arguments<'_>;
    let mut _167: &[&str];
    let mut _168: &[core::fmt::rt::Argument<'_>];
    let _169: &[core::fmt::rt::Argument<'_>; 1];
    let _170: [core::fmt::rt::Argument<'_>; 1];
    let mut _171: core::fmt::rt::Argument<'_>;
    let _172: &std::result::Result<(), blockstack_lib::net::Error>;
    let _173: std::result::Result<(), blockstack_lib::net::Error>;
    let mut _174: &blockstack_lib::chainstate::stacks::StacksTransaction;
    let mut _175: &[core::fmt::rt::Placeholder];
    let _176: &[core::fmt::rt::Placeholder; 1];
    let _177: [core::fmt::rt::Placeholder; 1];
    let mut _178: core::fmt::rt::Placeholder;
    let mut _179: core::fmt::rt::Alignment;
    let mut _180: core::fmt::rt::Count;
    let mut _181: core::fmt::rt::Count;
    let mut _182: core::fmt::rt::UnsafeArg;
    let _183: ();
    let mut _184: std::fmt::Arguments<'_>;
    let mut _185: &[&str];
    let mut _186: &[core::fmt::rt::Argument<'_>];
    let _187: &[core::fmt::rt::Argument<'_>; 1];
    let _188: [core::fmt::rt::Argument<'_>; 1];
    let mut _189: core::fmt::rt::Argument<'_>;
    let _190: &blockstack_lib::types::chainstate::StacksAddress;
    let _191: blockstack_lib::types::chainstate::StacksAddress;
    let _192: &blockstack_lib::chainstate::stacks::TransactionSpendingCondition;
    let mut _193: &blockstack_lib::chainstate::stacks::TransactionAuth;
    let _194: ();
    let mut _195: std::fmt::Arguments<'_>;
    let mut _196: &[&str];
    let mut _197: &[core::fmt::rt::Argument<'_>];
    let _198: &[core::fmt::rt::Argument<'_>; 1];
    let _199: [core::fmt::rt::Argument<'_>; 1];
    let mut _200: core::fmt::rt::Argument<'_>;
    let _201: &&blockstack_lib::chainstate::stacks::StacksTransaction;
    let _202: &blockstack_lib::chainstate::stacks::StacksTransaction;
    let mut _203: &[core::fmt::rt::Placeholder];
    let _204: &[core::fmt::rt::Placeholder; 1];
    let _205: [core::fmt::rt::Placeholder; 1];
    let mut _206: core::fmt::rt::Placeholder;
    let mut _207: core::fmt::rt::Alignment;
    let mut _208: core::fmt::rt::Count;
    let mut _209: core::fmt::rt::Count;
    let mut _210: core::fmt::rt::UnsafeArg;
    let _211: !;
    let mut _212: bool;
    let _213: &std::string::String;
    let mut _214: &std::vec::Vec<std::string::String>;
    let mut _215: bool;
    let mut _216: usize;
    let mut _217: &std::vec::Vec<std::string::String>;
    let _218: ();
    let mut _219: std::fmt::Arguments<'_>;
    let mut _220: &[&str];
    let mut _221: &[core::fmt::rt::Argument<'_>];
    let _222: &[core::fmt::rt::Argument<'_>; 1];
    let _223: [core::fmt::rt::Argument<'_>; 1];
    let mut _224: core::fmt::rt::Argument<'_>;
    let _225: &std::string::String;
    let mut _226: &std::vec::Vec<std::string::String>;
    let _227: !;
    let _229: &std::string::String;
    let mut _230: &std::vec::Vec<std::string::String>;
    let mut _232: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _233: &std::string::String;
    let _234: &str;
    let _235: &std::string::String;
    let _236: std::string::String;
    let mut _238: std::fmt::Arguments<'_>;
    let mut _239: &[&str];
    let mut _240: &[core::fmt::rt::Argument<'_>];
    let _241: &[core::fmt::rt::Argument<'_>; 1];
    let _242: [core::fmt::rt::Argument<'_>; 1];
    let mut _243: core::fmt::rt::Argument<'_>;
    let _244: &&std::string::String;
    let mut _246: std::result::Result<blockstack_lib::chainstate::stacks::StacksBlock, ()>;
    let mut _247: std::result::Result<blockstack_lib::chainstate::stacks::StacksBlock, blockstack_lib::codec::Error>;
    let mut _248: &mut std::io::Cursor<&std::vec::Vec<u8>>;
    let mut _249: std::io::Cursor<&std::vec::Vec<u8>>;
    let mut _250: &std::vec::Vec<u8>;
    let _251: ();
    let mut _252: std::fmt::Arguments<'_>;
    let mut _253: &[&str];
    let mut _254: &[core::fmt::rt::Argument<'_>];
    let _255: &[core::fmt::rt::Argument<'_>; 1];
    let _256: [core::fmt::rt::Argument<'_>; 1];
    let mut _257: core::fmt::rt::Argument<'_>;
    let _258: &&blockstack_lib::chainstate::stacks::StacksBlock;
    let _259: &blockstack_lib::chainstate::stacks::StacksBlock;
    let mut _260: &[core::fmt::rt::Placeholder];
    let _261: &[core::fmt::rt::Placeholder; 1];
    let _262: [core::fmt::rt::Placeholder; 1];
    let mut _263: core::fmt::rt::Placeholder;
    let mut _264: core::fmt::rt::Alignment;
    let mut _265: core::fmt::rt::Count;
    let mut _266: core::fmt::rt::Count;
    let mut _267: core::fmt::rt::UnsafeArg;
    let _268: !;
    let mut _269: bool;
    let _270: &std::string::String;
    let mut _271: &std::vec::Vec<std::string::String>;
    let mut _272: bool;
    let mut _273: usize;
    let mut _274: &std::vec::Vec<std::string::String>;
    let _275: ();
    let mut _276: std::fmt::Arguments<'_>;
    let mut _277: &[&str];
    let mut _278: &[core::fmt::rt::Argument<'_>];
    let _279: &[core::fmt::rt::Argument<'_>; 1];
    let _280: [core::fmt::rt::Argument<'_>; 1];
    let mut _281: core::fmt::rt::Argument<'_>;
    let _282: &std::string::String;
    let mut _283: &std::vec::Vec<std::string::String>;
    let _284: !;
    let mut _287: std::fmt::Arguments<'_>;
    let mut _288: &[&str];
    let mut _289: &[core::fmt::rt::Argument<'_>];
    let _290: &[core::fmt::rt::Argument<'_>; 1];
    let _291: [core::fmt::rt::Argument<'_>; 1];
    let mut _292: core::fmt::rt::Argument<'_>;
    let _293: &&std::string::String;
    let _294: &std::string::String;
    let _295: &std::string::String;
    let mut _296: &std::vec::Vec<std::string::String>;
    let mut _299: std::fmt::Arguments<'_>;
    let mut _300: &[&str];
    let mut _301: &[core::fmt::rt::Argument<'_>];
    let _302: &[core::fmt::rt::Argument<'_>; 1];
    let _303: [core::fmt::rt::Argument<'_>; 1];
    let mut _304: core::fmt::rt::Argument<'_>;
    let _305: &&std::string::String;
    let _306: &std::string::String;
    let _307: &std::string::String;
    let mut _308: &std::vec::Vec<std::string::String>;
    let mut _310: std::result::Result<blockstack_lib::chainstate::burn::db::sortdb::SortitionDB, blockstack_lib::util::db::Error>;
    let _311: &str;
    let _312: &std::string::String;
    let _313: &str;
    let _314: &std::string::String;
    let _315: std::string::String;
    let mut _317: std::fmt::Arguments<'_>;
    let mut _318: &[&str];
    let mut _319: &[core::fmt::rt::Argument<'_>];
    let _320: &[core::fmt::rt::Argument<'_>; 1];
    let _321: [core::fmt::rt::Argument<'_>; 1];
    let mut _322: core::fmt::rt::Argument<'_>;
    let _323: &&std::string::String;
    let _324: &std::string::String;
    let mut _327: (blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>);
    let mut _328: std::result::Result<(blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>;
    let _329: &str;
    let _330: &std::string::String;
    let _331: &str;
    let mut _333: std::result::Result<blockstack_lib::chainstate::burn::BlockSnapshot, blockstack_lib::util::db::Error>;
    let _334: &rusqlite::Connection;
    let mut _335: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let _336: &str;
    let mut _340: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let mut _341: std::result::Result<std::vec::Vec<(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)>, blockstack_lib::util::db::Error>;
    let mut _342: &blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionDBTxContext, blockstack_lib::types::chainstate::SortitionId>;
    let _343: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _344: &std::collections::HashMap<blockstack_lib::chainstate::burn::ConsensusHash, (std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>, blockstack_lib::chainstate::burn::ConsensusHash)>;
    let _345: std::collections::HashMap<blockstack_lib::chainstate::burn::ConsensusHash, (std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>, blockstack_lib::chainstate::burn::ConsensusHash)>;
    let _346: ();
    let mut _347: std::fmt::Arguments<'_>;
    let mut _348: &[&str];
    let mut _349: &[core::fmt::rt::Argument<'_>];
    let _350: &[core::fmt::rt::Argument<'_>; 1];
    let _351: [core::fmt::rt::Argument<'_>; 1];
    let mut _352: core::fmt::rt::Argument<'_>;
    let _353: &f32;
    let _354: f32;
    let mut _355: time::Duration;
    let mut _358: std::result::Result<blockstack_lib::net::BlocksInvData, blockstack_lib::chainstate::stacks::Error>;
    let mut _359: &blockstack_lib::chainstate::stacks::db::StacksChainState;
    let _360: &[(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)];
    let _361: &std::vec::Vec<(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)>;
    let _362: ();
    let mut _363: std::fmt::Arguments<'_>;
    let mut _364: &[&str];
    let mut _365: &[core::fmt::rt::Argument<'_>];
    let _366: &[core::fmt::rt::Argument<'_>; 1];
    let _367: [core::fmt::rt::Argument<'_>; 1];
    let mut _368: core::fmt::rt::Argument<'_>;
    let _369: &f32;
    let _370: f32;
    let mut _371: time::Duration;
    let _372: ();
    let mut _373: std::fmt::Arguments<'_>;
    let mut _374: &[&str];
    let mut _375: &[core::fmt::rt::Argument<'_>];
    let _376: &[core::fmt::rt::Argument<'_>; 1];
    let _377: [core::fmt::rt::Argument<'_>; 1];
    let mut _378: core::fmt::rt::Argument<'_>;
    let _379: &&blockstack_lib::net::BlocksInvData;
    let _380: &blockstack_lib::net::BlocksInvData;
    let _381: ();
    let mut _382: std::fmt::Arguments<'_>;
    let mut _383: &[&str];
    let _384: !;
    let mut _385: bool;
    let _386: &std::string::String;
    let mut _387: &std::vec::Vec<std::string::String>;
    let mut _388: bool;
    let mut _389: usize;
    let mut _390: &std::vec::Vec<std::string::String>;
    let _391: ();
    let mut _392: std::fmt::Arguments<'_>;
    let mut _393: &[&str];
    let mut _394: &[core::fmt::rt::Argument<'_>];
    let _395: &[core::fmt::rt::Argument<'_>; 1];
    let _396: [core::fmt::rt::Argument<'_>; 1];
    let mut _397: core::fmt::rt::Argument<'_>;
    let _398: &std::string::String;
    let mut _399: &std::vec::Vec<std::string::String>;
    let _400: !;
    let mut _403: std::fmt::Arguments<'_>;
    let mut _404: &[&str];
    let mut _405: &[core::fmt::rt::Argument<'_>];
    let _406: &[core::fmt::rt::Argument<'_>; 1];
    let _407: [core::fmt::rt::Argument<'_>; 1];
    let mut _408: core::fmt::rt::Argument<'_>;
    let _409: &&std::string::String;
    let _410: &std::string::String;
    let _411: &std::string::String;
    let mut _412: &std::vec::Vec<std::string::String>;
    let mut _415: std::fmt::Arguments<'_>;
    let mut _416: &[&str];
    let mut _417: &[core::fmt::rt::Argument<'_>];
    let _418: &[core::fmt::rt::Argument<'_>; 1];
    let _419: [core::fmt::rt::Argument<'_>; 1];
    let mut _420: core::fmt::rt::Argument<'_>;
    let _421: &&std::string::String;
    let _422: &std::string::String;
    let _423: &std::string::String;
    let mut _424: &std::vec::Vec<std::string::String>;
    let mut _426: std::result::Result<blockstack_lib::chainstate::burn::db::sortdb::SortitionDB, blockstack_lib::util::db::Error>;
    let _427: &str;
    let _428: &std::string::String;
    let _429: &str;
    let _430: &std::string::String;
    let _431: std::string::String;
    let mut _433: std::fmt::Arguments<'_>;
    let mut _434: &[&str];
    let mut _435: &[core::fmt::rt::Argument<'_>];
    let _436: &[core::fmt::rt::Argument<'_>; 1];
    let _437: [core::fmt::rt::Argument<'_>; 1];
    let mut _438: core::fmt::rt::Argument<'_>;
    let _439: &&std::string::String;
    let _440: &std::string::String;
    let mut _443: (blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>);
    let mut _444: std::result::Result<(blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>;
    let _445: &str;
    let _446: &std::string::String;
    let _447: &str;
    let mut _449: std::result::Result<blockstack_lib::chainstate::burn::BlockSnapshot, blockstack_lib::util::db::Error>;
    let _450: &rusqlite::Connection;
    let mut _451: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let _452: &str;
    let mut _455: blockstack_lib::net::PeerAddress;
    let mut _456: std::option::Option<blockstack_lib::util::secp256k1::Secp256k1PrivateKey>;
    let mut _457: blockstack_lib::util::strings::UrlString;
    let mut _458: std::result::Result<blockstack_lib::util::strings::UrlString, std::convert::Infallible>;
    let mut _461: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let mut _462: std::result::Result<std::vec::Vec<(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)>, blockstack_lib::util::db::Error>;
    let mut _463: &blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionDBTxContext, blockstack_lib::types::chainstate::SortitionId>;
    let _464: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _465: &std::collections::HashMap<blockstack_lib::chainstate::burn::ConsensusHash, (std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>, blockstack_lib::chainstate::burn::ConsensusHash)>;
    let _466: std::collections::HashMap<blockstack_lib::chainstate::burn::ConsensusHash, (std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>, blockstack_lib::chainstate::burn::ConsensusHash)>;
    let _467: ();
    let mut _468: std::fmt::Arguments<'_>;
    let mut _469: &[&str];
    let mut _470: &[core::fmt::rt::Argument<'_>];
    let _471: &[core::fmt::rt::Argument<'_>; 1];
    let _472: [core::fmt::rt::Argument<'_>; 1];
    let mut _473: core::fmt::rt::Argument<'_>;
    let _474: &f32;
    let _475: f32;
    let mut _476: time::Duration;
    let mut _479: std::slice::Iter<'_, (blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)>;
    let mut _480: std::slice::Iter<'_, (blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)>;
    let _481: &[(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)];
    let mut _482: &std::vec::Vec<(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)>;
    let mut _484: std::option::Option<&(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)>;
    let mut _485: &mut std::slice::Iter<'_, (blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)>;
    let mut _486: isize;
    let mut _490: isize;
    let _493: &&blockstack_lib::chainstate::burn::ConsensusHash;
    let _494: &&blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _498: std::result::Result<std::option::Option<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>, blockstack_lib::chainstate::stacks::Error>;
    let _499: &&rusqlite::Connection;
    let _500: &rusqlite::Connection;
    let mut _501: &blockstack_lib::chainstate::stacks::db::StacksChainState;
    let _502: &blockstack_lib::types::chainstate::StacksBlockId;
    let mut _503: isize;
    let mut _504: isize;
    let _506: ();
    let mut _508: bool;
    let mut _509: bool;
    let mut _510: usize;
    let mut _511: usize;
    let mut _512: &slog::FilterLevel;
    let _513: slog::FilterLevel;
    let _514: &slog::Logger<std::sync::Arc<dyn slog::SendSyncRefUnwindSafeDrain<Err = slog::private::NeverStruct, Ok = ()>>>;
    let _515: &blockstack_lib::util::log::LOGGER;
    let _516: &slog::Record<'_>;
    let _517: slog::Record<'_>;
    let _518: &slog::RecordStatic<'_>;
    let _519: &std::fmt::Arguments<'_>;
    let _520: std::fmt::Arguments<'_>;
    let mut _521: &[&str];
    let mut _522: &[core::fmt::rt::Argument<'_>];
    let _523: &[core::fmt::rt::Argument<'_>; 1];
    let _524: [core::fmt::rt::Argument<'_>; 1];
    let mut _525: core::fmt::rt::Argument<'_>;
    let _526: &&blockstack_lib::types::chainstate::StacksBlockId;
    let _527: &blockstack_lib::types::chainstate::StacksBlockId;
    let mut _528: slog::BorrowedKV<'_>;
    let mut _529: &dyn slog::KV;
    let mut _530: std::result::Result<std::option::Option<blockstack_lib::types::chainstate::StacksBlockHeader>, blockstack_lib::chainstate::stacks::Error>;
    let _531: &std::string::String;
    let _532: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _533: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _534: isize;
    let mut _536: {closure@src/main.rs:329:40: 329:45};
    let mut _537: &blockstack_lib::chainstate::stacks::db::blocks::StagingBlock;
    let _538: ();
    let mut _540: bool;
    let mut _541: bool;
    let mut _542: usize;
    let mut _543: usize;
    let mut _544: &slog::FilterLevel;
    let _545: slog::FilterLevel;
    let _546: &slog::Logger<std::sync::Arc<dyn slog::SendSyncRefUnwindSafeDrain<Err = slog::private::NeverStruct, Ok = ()>>>;
    let _547: &blockstack_lib::util::log::LOGGER;
    let _548: &slog::Record<'_>;
    let _549: slog::Record<'_>;
    let _550: &slog::RecordStatic<'_>;
    let _551: &std::fmt::Arguments<'_>;
    let _552: std::fmt::Arguments<'_>;
    let mut _553: &[&str];
    let mut _554: &[core::fmt::rt::Argument<'_>];
    let _555: &[core::fmt::rt::Argument<'_>; 3];
    let _556: [core::fmt::rt::Argument<'_>; 3];
    let mut _557: core::fmt::rt::Argument<'_>;
    let _558: &&blockstack_lib::net::db::LocalPeer;
    let _559: &blockstack_lib::net::db::LocalPeer;
    let mut _560: core::fmt::rt::Argument<'_>;
    let _561: &&&blockstack_lib::chainstate::burn::ConsensusHash;
    let _562: &&blockstack_lib::chainstate::burn::ConsensusHash;
    let mut _563: core::fmt::rt::Argument<'_>;
    let _564: &&&blockstack_lib::types::chainstate::BlockHeaderHash;
    let _565: &&blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _566: slog::BorrowedKV<'_>;
    let mut _567: &dyn slog::KV;
    let mut _569: u128;
    let mut _570: (u128, bool);
    let mut _571: isize;
    let _574: bool;
    let mut _575: std::result::Result<bool, blockstack_lib::net::Error>;
    let _576: &blockstack_lib::net::db::LocalPeer;
    let _577: &blockstack_lib::chainstate::stacks::db::StacksChainState;
    let _578: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _579: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let _580: blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _581: &blockstack_lib::types::chainstate::StacksBlockHeader;
    let _582: &&blockstack_lib::chainstate::burn::ConsensusHash;
    let _583: &&blockstack_lib::types::chainstate::BlockHeaderHash;
    let _584: ();
    let mut _585: std::fmt::Arguments<'_>;
    let mut _586: &[&str];
    let mut _587: &[core::fmt::rt::Argument<'_>];
    let _588: &[core::fmt::rt::Argument<'_>; 2];
    let _589: [core::fmt::rt::Argument<'_>; 2];
    let mut _590: core::fmt::rt::Argument<'_>;
    let _591: &f32;
    let _592: f32;
    let mut _593: time::Duration;
    let mut _594: core::fmt::rt::Argument<'_>;
    let _595: &u128;
    let _596: ();
    let mut _597: std::fmt::Arguments<'_>;
    let mut _598: &[&str];
    let _599: !;
    let mut _600: bool;
    let _601: &std::string::String;
    let mut _602: &std::vec::Vec<std::string::String>;
    let mut _603: bool;
    let mut _604: usize;
    let mut _605: &std::vec::Vec<std::string::String>;
    let _606: ();
    let mut _607: std::fmt::Arguments<'_>;
    let mut _608: &[&str];
    let mut _609: &[core::fmt::rt::Argument<'_>];
    let _610: &[core::fmt::rt::Argument<'_>; 1];
    let _611: [core::fmt::rt::Argument<'_>; 1];
    let mut _612: core::fmt::rt::Argument<'_>;
    let _613: &std::string::String;
    let mut _614: &std::vec::Vec<std::string::String>;
    let _615: !;
    let mut _617: std::result::Result<u64, std::num::ParseIntError>;
    let _618: &str;
    let _619: &std::string::String;
    let mut _620: &std::vec::Vec<std::string::String>;
    let _621: &str;
    let mut _623: std::option::Option<u64>;
    let mut _624: std::option::Option<&std::string::String>;
    let _625: &[std::string::String];
    let mut _626: &std::vec::Vec<std::string::String>;
    let mut _628: std::result::Result<blockstack_lib::chainstate::burn::db::sortdb::SortitionDB, blockstack_lib::util::db::Error>;
    let _629: &str;
    let _630: &std::string::String;
    let mut _631: &std::vec::Vec<std::string::String>;
    let _632: &str;
    let _633: &std::string::String;
    let _634: std::string::String;
    let mut _636: std::fmt::Arguments<'_>;
    let mut _637: &[&str];
    let mut _638: &[core::fmt::rt::Argument<'_>];
    let _639: &[core::fmt::rt::Argument<'_>; 1];
    let _640: [core::fmt::rt::Argument<'_>; 1];
    let mut _641: core::fmt::rt::Argument<'_>;
    let _642: &std::string::String;
    let mut _643: &std::vec::Vec<std::string::String>;
    let mut _645: std::result::Result<blockstack_lib::types::chainstate::SortitionId, blockstack_lib::util::db::Error>;
    let _646: &rusqlite::Connection;
    let mut _647: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let _648: &str;
    let mut _650: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let _651: &blockstack_lib::types::chainstate::SortitionId;
    let mut _653: std::ops::Range<u64>;
    let mut _654: std::ops::Range<u64>;
    let mut _655: u64;
    let mut _656: (u64, bool);
    let mut _658: std::option::Option<u64>;
    let mut _659: &mut std::ops::Range<u64>;
    let mut _660: isize;
    let mut _662: bool;
    let mut _663: u64;
    let mut _664: u64;
    let mut _665: (u64, bool);
    let _666: ();
    let mut _667: std::fmt::Arguments<'_>;
    let mut _668: &[&str];
    let _669: !;
    let mut _671: std::option::Option<blockstack_lib::chainstate::burn::BlockSnapshot>;
    let mut _672: std::result::Result<std::option::Option<blockstack_lib::chainstate::burn::BlockSnapshot>, blockstack_lib::util::db::Error>;
    let _673: &blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionHandleContext, blockstack_lib::types::chainstate::SortitionId>;
    let _674: &blockstack_lib::types::chainstate::SortitionId;
    let _675: &str;
    let _676: &str;
    let mut _679: std::result::Result<std::result::Result<(blockstack_lib::chainstate::burn::ConsensusHash, blockstack_lib::types::chainstate::BlockHeaderHash, u32), u32>, blockstack_lib::chainstate::coordinator::Error>;
    let mut _680: &blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionHandleContext, blockstack_lib::types::chainstate::SortitionId>;
    let _681: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let _682: &blockstack_lib::burnchains::PoxConstants;
    let _683: &str;
    let _684: ();
    let mut _685: isize;
    let mut _687: &mut std::vec::Vec<(u64, bool, u32)>;
    let mut _688: (u64, bool, u32);
    let mut _690: &mut std::vec::Vec<(u64, bool, u32)>;
    let mut _691: (u64, bool, u32);
    let _692: ();
    let mut _693: std::fmt::Arguments<'_>;
    let mut _694: &[&str];
    let mut _695: std::slice::Iter<'_, (u64, bool, u32)>;
    let mut _696: std::slice::Iter<'_, (u64, bool, u32)>;
    let _697: &[(u64, bool, u32)];
    let mut _698: &std::vec::Vec<(u64, bool, u32)>;
    let mut _700: std::option::Option<&(u64, bool, u32)>;
    let mut _701: &mut std::slice::Iter<'_, (u64, bool, u32)>;
    let mut _702: isize;
    let _704: ();
    let mut _705: std::fmt::Arguments<'_>;
    let mut _706: &[&str];
    let mut _707: &[core::fmt::rt::Argument<'_>];
    let _708: &[core::fmt::rt::Argument<'_>; 3];
    let _709: [core::fmt::rt::Argument<'_>; 3];
    let mut _710: core::fmt::rt::Argument<'_>;
    let _711: &&u64;
    let _712: &u64;
    let mut _713: core::fmt::rt::Argument<'_>;
    let _714: &&bool;
    let _715: &bool;
    let mut _716: core::fmt::rt::Argument<'_>;
    let _717: &&u32;
    let _718: &u32;
    let _719: !;
    let mut _720: bool;
    let _721: &std::string::String;
    let mut _722: &std::vec::Vec<std::string::String>;
    let mut _723: bool;
    let mut _724: usize;
    let mut _725: &std::vec::Vec<std::string::String>;
    let _726: ();
    let mut _727: std::fmt::Arguments<'_>;
    let mut _728: &[&str];
    let mut _729: &[core::fmt::rt::Argument<'_>];
    let _730: &[core::fmt::rt::Argument<'_>; 1];
    let _731: [core::fmt::rt::Argument<'_>; 1];
    let mut _732: core::fmt::rt::Argument<'_>;
    let _733: &std::string::String;
    let mut _734: &std::vec::Vec<std::string::String>;
    let _735: !;
    let mut _739: std::fmt::Arguments<'_>;
    let mut _740: &[&str];
    let mut _741: &[core::fmt::rt::Argument<'_>];
    let _742: &[core::fmt::rt::Argument<'_>; 1];
    let _743: [core::fmt::rt::Argument<'_>; 1];
    let mut _744: core::fmt::rt::Argument<'_>;
    let _745: &&std::string::String;
    let _746: &std::string::String;
    let _747: &std::string::String;
    let mut _748: &std::vec::Vec<std::string::String>;
    let mut _751: std::fmt::Arguments<'_>;
    let mut _752: &[&str];
    let mut _753: &[core::fmt::rt::Argument<'_>];
    let _754: &[core::fmt::rt::Argument<'_>; 1];
    let _755: [core::fmt::rt::Argument<'_>; 1];
    let mut _756: core::fmt::rt::Argument<'_>;
    let _757: &&std::string::String;
    let _758: &std::string::String;
    let _759: &std::string::String;
    let mut _760: &std::vec::Vec<std::string::String>;
    let mut _763: bool;
    let mut _764: usize;
    let mut _765: &std::vec::Vec<std::string::String>;
    let mut _766: u64;
    let mut _767: std::result::Result<u64, std::num::ParseIntError>;
    let _768: &str;
    let _769: &std::string::String;
    let mut _770: &std::vec::Vec<std::string::String>;
    let _771: &str;
    let mut _772: bool;
    let mut _773: usize;
    let mut _774: &std::vec::Vec<std::string::String>;
    let mut _775: u64;
    let mut _776: std::result::Result<u64, std::num::ParseIntError>;
    let _777: &str;
    let _778: &std::string::String;
    let mut _779: &std::vec::Vec<std::string::String>;
    let _780: &str;
    let mut _782: std::result::Result<blockstack_lib::chainstate::burn::db::sortdb::SortitionDB, blockstack_lib::util::db::Error>;
    let _783: &str;
    let _784: &std::string::String;
    let _785: &str;
    let _786: &std::string::String;
    let _787: std::string::String;
    let mut _789: std::fmt::Arguments<'_>;
    let mut _790: &[&str];
    let mut _791: &[core::fmt::rt::Argument<'_>];
    let _792: &[core::fmt::rt::Argument<'_>; 1];
    let _793: [core::fmt::rt::Argument<'_>; 1];
    let mut _794: core::fmt::rt::Argument<'_>;
    let _795: &&std::string::String;
    let _796: &std::string::String;
    let mut _799: (blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>);
    let mut _800: std::result::Result<(blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>;
    let _801: &str;
    let _802: &std::string::String;
    let _803: &str;
    let mut _805: std::result::Result<blockstack_lib::chainstate::burn::BlockSnapshot, blockstack_lib::util::db::Error>;
    let _806: &rusqlite::Connection;
    let mut _807: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let _808: &str;
    let mut _810: std::result::Result<blockstack_lib::core::MemPoolDB, blockstack_lib::util::db::Error>;
    let _811: &str;
    let _812: &std::string::String;
    let _813: &str;
    let mut _815: std::option::Option<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let mut _816: std::result::Result<std::option::Option<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>, blockstack_lib::chainstate::stacks::Error>;
    let mut _817: &blockstack_lib::chainstate::stacks::db::StacksChainState;
    let _818: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let mut _820: std::option::Option<blockstack_lib::chainstate::stacks::db::StacksHeaderInfo>;
    let mut _821: std::result::Result<std::option::Option<blockstack_lib::chainstate::stacks::db::StacksHeaderInfo>, blockstack_lib::chainstate::stacks::Error>;
    let _822: &rusqlite::Connection;
    let mut _823: &blockstack_lib::chainstate::stacks::db::StacksChainState;
    let _824: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _825: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let _826: &str;
    let _827: &str;
    let mut _830: std::option::Option<blockstack_lib::chainstate::stacks::TransactionAuth>;
    let _831: &blockstack_lib::util::secp256k1::Secp256k1PrivateKey;
    let _832: ();
    let mut _833: &mut blockstack_lib::chainstate::stacks::TransactionAuth;
    let mut _835: blockstack_lib::chainstate::stacks::TransactionVersion;
    let mut _836: blockstack_lib::chainstate::stacks::TransactionAuth;
    let mut _837: blockstack_lib::chainstate::stacks::TransactionPayload;
    let mut _838: blockstack_lib::chainstate::stacks::CoinbasePayload;
    let mut _839: [u8; 32];
    let mut _840: blockstack_lib::chainstate::stacks::TransactionAnchorMode;
    let _842: &blockstack_lib::chainstate::stacks::StacksTransaction;
    let _843: ();
    let mut _844: std::result::Result<(), blockstack_lib::net::Error>;
    let mut _845: &mut blockstack_lib::chainstate::stacks::StacksTransactionSigner;
    let _846: &blockstack_lib::util::secp256k1::Secp256k1PrivateKey;
    let mut _848: std::option::Option<blockstack_lib::chainstate::stacks::StacksTransaction>;
    let mut _849: &blockstack_lib::chainstate::stacks::StacksTransactionSigner;
    let mut _851: blockstack_lib::vm::costs::ExecutionCost;
    let mut _852: u64;
    let mut _853: u64;
    let _855: &blockstack_lib::chainstate::stacks::db::StacksChainState;
    let _856: &blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionDBTxContext, blockstack_lib::types::chainstate::SortitionId>;
    let _857: blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionDBTxContext, blockstack_lib::types::chainstate::SortitionId>;
    let mut _858: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let mut _859: &mut blockstack_lib::core::MemPoolDB;
    let _860: &blockstack_lib::chainstate::stacks::db::StacksHeaderInfo;
    let mut _861: u64;
    let mut _862: blockstack_lib::util::vrf::VRFProof;
    let mut _863: blockstack_lib::util::hash::Hash160;
    let mut _864: [u8; 20];
    let _865: &blockstack_lib::chainstate::stacks::StacksTransaction;
    let mut _866: blockstack_lib::chainstate::stacks::miner::BlockBuilderSettings;
    let mut _867: std::option::Option<&dyn blockstack_lib::core::mempool::MemPoolEventDispatcher>;
    let _869: ();
    let mut _870: std::fmt::Arguments<'_>;
    let mut _871: &[&str];
    let mut _872: &[core::fmt::rt::Argument<'_>];
    let _873: &[core::fmt::rt::Argument<'_>; 8];
    let _874: [core::fmt::rt::Argument<'_>; 8];
    let mut _875: core::fmt::rt::Argument<'_>;
    let _876: &&str;
    let _877: &str;
    let mut _878: bool;
    let mut _879: &std::result::Result<(blockstack_lib::chainstate::stacks::StacksBlock, blockstack_lib::vm::costs::ExecutionCost, u64), blockstack_lib::chainstate::stacks::Error>;
    let _880: &str;
    let mut _881: core::fmt::rt::Argument<'_>;
    let _882: &u64;
    let _883: u64;
    let mut _884: u64;
    let mut _885: (u64, bool);
    let mut _886: core::fmt::rt::Argument<'_>;
    let _887: &blockstack_lib::types::chainstate::StacksBlockId;
    let _888: blockstack_lib::types::chainstate::StacksBlockId;
    let _889: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _890: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let _891: blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _892: &blockstack_lib::types::chainstate::StacksBlockHeader;
    let mut _893: core::fmt::rt::Argument<'_>;
    let _894: &&blockstack_lib::chainstate::burn::ConsensusHash;
    let _895: &blockstack_lib::chainstate::burn::ConsensusHash;
    let mut _896: core::fmt::rt::Argument<'_>;
    let _897: &&blockstack_lib::types::chainstate::BlockHeaderHash;
    let _898: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let _899: blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _900: &blockstack_lib::types::chainstate::StacksBlockHeader;
    let mut _901: core::fmt::rt::Argument<'_>;
    let _902: &u128;
    let _903: u128;
    let mut _904: core::fmt::rt::Argument<'_>;
    let _905: &u64;
    let mut _906: core::fmt::rt::Argument<'_>;
    let _907: &u64;
    let mut _908: isize;
    let mut _913: std::slice::Iter<'_, blockstack_lib::chainstate::stacks::StacksTransaction>;
    let mut _914: std::slice::Iter<'_, blockstack_lib::chainstate::stacks::StacksTransaction>;
    let _915: &[blockstack_lib::chainstate::stacks::StacksTransaction];
    let mut _916: &std::vec::Vec<blockstack_lib::chainstate::stacks::StacksTransaction>;
    let mut _918: std::option::Option<&blockstack_lib::chainstate::stacks::StacksTransaction>;
    let mut _919: &mut std::slice::Iter<'_, blockstack_lib::chainstate::stacks::StacksTransaction>;
    let mut _920: isize;
    let mut _922: u64;
    let mut _923: (u64, bool);
    let _924: ();
    let mut _925: std::fmt::Arguments<'_>;
    let mut _926: &[&str];
    let mut _927: &[core::fmt::rt::Argument<'_>];
    let _928: &[core::fmt::rt::Argument<'_>; 4];
    let _929: [core::fmt::rt::Argument<'_>; 4];
    let mut _930: core::fmt::rt::Argument<'_>;
    let _931: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let _932: blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _933: &blockstack_lib::chainstate::stacks::StacksBlock;
    let mut _934: core::fmt::rt::Argument<'_>;
    let _935: &u64;
    let mut _936: core::fmt::rt::Argument<'_>;
    let _937: &u64;
    let mut _938: core::fmt::rt::Argument<'_>;
    let _939: &&blockstack_lib::vm::costs::ExecutionCost;
    let _940: &blockstack_lib::vm::costs::ExecutionCost;
    let _941: !;
    let mut _942: bool;
    let _943: &std::string::String;
    let mut _944: &std::vec::Vec<std::string::String>;
    let mut _945: bool;
    let mut _946: usize;
    let mut _947: &std::vec::Vec<std::string::String>;
    let _948: ();
    let mut _949: std::fmt::Arguments<'_>;
    let mut _950: &[&str];
    let mut _951: &[core::fmt::rt::Argument<'_>];
    let _952: &[core::fmt::rt::Argument<'_>; 1];
    let _953: [core::fmt::rt::Argument<'_>; 1];
    let mut _954: core::fmt::rt::Argument<'_>;
    let _955: &std::string::String;
    let mut _956: &std::vec::Vec<std::string::String>;
    let _957: !;
    let _959: &std::string::String;
    let mut _960: &std::vec::Vec<std::string::String>;
    let mut _962: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _963: &std::string::String;
    let _964: &str;
    let _965: &std::string::String;
    let _966: std::string::String;
    let mut _968: std::fmt::Arguments<'_>;
    let mut _969: &[&str];
    let mut _970: &[core::fmt::rt::Argument<'_>];
    let _971: &[core::fmt::rt::Argument<'_>; 1];
    let _972: [core::fmt::rt::Argument<'_>; 1];
    let mut _973: core::fmt::rt::Argument<'_>;
    let _974: &&std::string::String;
    let mut _976: &std::vec::Vec<u8>;
    let mut _978: &mut std::io::Cursor<&std::vec::Vec<u8>>;
    let mut _980: std::result::Result<std::vec::Vec<blockstack_lib::chainstate::stacks::StacksMicroblock>, ()>;
    let mut _981: std::result::Result<std::vec::Vec<blockstack_lib::chainstate::stacks::StacksMicroblock>, blockstack_lib::codec::Error>;
    let mut _982: &mut blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>;
    let mut _983: {closure@src/main.rs:555:22: 555:25};
    let mut _984: &blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>;
    let _985: ();
    let mut _986: std::fmt::Arguments<'_>;
    let mut _987: &[&str];
    let mut _988: &[core::fmt::rt::Argument<'_>];
    let _989: &[core::fmt::rt::Argument<'_>; 1];
    let _990: [core::fmt::rt::Argument<'_>; 1];
    let mut _991: core::fmt::rt::Argument<'_>;
    let _992: &&std::vec::Vec<blockstack_lib::chainstate::stacks::StacksMicroblock>;
    let _993: &std::vec::Vec<blockstack_lib::chainstate::stacks::StacksMicroblock>;
    let mut _994: &[core::fmt::rt::Placeholder];
    let _995: &[core::fmt::rt::Placeholder; 1];
    let _996: [core::fmt::rt::Placeholder; 1];
    let mut _997: core::fmt::rt::Placeholder;
    let mut _998: core::fmt::rt::Alignment;
    let mut _999: core::fmt::rt::Count;
    let mut _1000: core::fmt::rt::Count;
    let mut _1001: core::fmt::rt::UnsafeArg;
    let _1002: !;
    let mut _1003: bool;
    let _1004: &std::string::String;
    let mut _1005: &std::vec::Vec<std::string::String>;
    let mut _1006: bool;
    let mut _1007: usize;
    let mut _1008: &std::vec::Vec<std::string::String>;
    let _1009: ();
    let mut _1010: std::fmt::Arguments<'_>;
    let mut _1011: &[&str];
    let mut _1012: &[core::fmt::rt::Argument<'_>];
    let _1013: &[core::fmt::rt::Argument<'_>; 1];
    let _1014: [core::fmt::rt::Argument<'_>; 1];
    let mut _1015: core::fmt::rt::Argument<'_>;
    let _1016: &std::string::String;
    let mut _1017: &std::vec::Vec<std::string::String>;
    let _1018: ();
    let mut _1019: std::fmt::Arguments<'_>;
    let mut _1020: &[&str];
    let _1021: !;
    let mut _1025: (std::string::String, std::string::String, usize);
    let mut _1026: usize;
    let mut _1027: &std::vec::Vec<std::string::String>;
    let _1029: &std::string::String;
    let mut _1030: &std::vec::Vec<std::string::String>;
    let mut _1031: std::string::String;
    let mut _1033: std::fmt::Arguments<'_>;
    let mut _1034: &[&str];
    let mut _1035: &[core::fmt::rt::Argument<'_>];
    let _1036: &[core::fmt::rt::Argument<'_>; 1];
    let _1037: [core::fmt::rt::Argument<'_>; 1];
    let mut _1038: core::fmt::rt::Argument<'_>;
    let _1039: &&&std::string::String;
    let _1040: &&std::string::String;
    let mut _1042: std::fmt::Arguments<'_>;
    let mut _1043: &[&str];
    let mut _1044: &[core::fmt::rt::Argument<'_>];
    let _1045: &[core::fmt::rt::Argument<'_>; 1];
    let _1046: [core::fmt::rt::Argument<'_>; 1];
    let mut _1047: core::fmt::rt::Argument<'_>;
    let _1048: &&&std::string::String;
    let _1049: &&std::string::String;
    let mut _1050: std::string::String;
    let _1051: &std::string::String;
    let mut _1052: &std::vec::Vec<std::string::String>;
    let mut _1053: std::string::String;
    let _1054: &std::string::String;
    let mut _1055: &std::vec::Vec<std::string::String>;
    let _1056: &std::string::String;
    let mut _1057: &std::vec::Vec<std::string::String>;
    let _1058: &std::string::String;
    let mut _1059: &std::vec::Vec<std::string::String>;
    let mut _1060: usize;
    let mut _1061: (usize, bool);
    let mut _1062: bool;
    let mut _1063: &std::result::Result<std::fs::Metadata, std::io::Error>;
    let _1064: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _1065: &std::string::String;
    let _1066: ();
    let mut _1067: std::fmt::Arguments<'_>;
    let mut _1068: &[&str];
    let mut _1069: &[core::fmt::rt::Argument<'_>];
    let _1070: &[core::fmt::rt::Argument<'_>; 1];
    let _1071: [core::fmt::rt::Argument<'_>; 1];
    let mut _1072: core::fmt::rt::Argument<'_>;
    let _1073: &&std::string::String;
    let _1074: &std::string::String;
    let _1075: !;
    let mut _1076: bool;
    let mut _1077: &std::result::Result<std::fs::Metadata, std::io::Error>;
    let _1078: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _1079: &std::string::String;
    let _1080: ();
    let mut _1081: std::fmt::Arguments<'_>;
    let mut _1082: &[&str];
    let mut _1083: &[core::fmt::rt::Argument<'_>];
    let _1084: &[core::fmt::rt::Argument<'_>; 1];
    let _1085: [core::fmt::rt::Argument<'_>; 1];
    let mut _1086: core::fmt::rt::Argument<'_>;
    let _1087: &&std::string::String;
    let _1088: &std::string::String;
    let _1089: !;
    let mut _1091: std::result::Result<blockstack_lib::types::chainstate::StacksBlockId, blockstack_lib::util::HexError>;
    let _1092: &str;
    let _1093: &str;
    let mut _1095: std::result::Result<blockstack_lib::chainstate::stacks::index::marf::MARF<blockstack_lib::types::chainstate::StacksBlockId>, blockstack_lib::chainstate::stacks::index::Error>;
    let _1096: &str;
    let _1097: &std::string::String;
    let _1098: &str;
    let mut _1100: std::result::Result<std::option::Option<blockstack_lib::types::chainstate::MARFValue>, blockstack_lib::chainstate::stacks::index::Error>;
    let mut _1101: &mut blockstack_lib::chainstate::stacks::index::marf::MARF<blockstack_lib::types::chainstate::StacksBlockId>;
    let _1102: &blockstack_lib::types::chainstate::StacksBlockId;
    let _1103: &str;
    let _1104: &str;
    let mut _1105: isize;
    let mut _1108: std::result::Result<rusqlite::Connection, rusqlite::Error>;
    let mut _1109: &std::string::String;
    let _1110: &str;
    let _1112: &[&dyn rusqlite::ToSql; 1];
    let _1113: [&dyn rusqlite::ToSql; 1];
    let mut _1114: &dyn rusqlite::ToSql;
    let _1115: &std::string::String;
    let _1116: std::string::String;
    let mut _1117: &blockstack_lib::types::chainstate::MARFValue;
    let mut _1119: &rusqlite::Connection;
    let _1120: &str;
    let mut _1122: std::result::Result<std::string::String, rusqlite::Error>;
    let _1123: &str;
    let _1124: &std::string::String;
    let _1125: std::string::String;
    let mut _1127: std::fmt::Arguments<'_>;
    let mut _1128: &[&str];
    let mut _1129: &[core::fmt::rt::Argument<'_>];
    let _1130: &[core::fmt::rt::Argument<'_>; 1];
    let _1131: [core::fmt::rt::Argument<'_>; 1];
    let mut _1132: core::fmt::rt::Argument<'_>;
    let _1133: &&blockstack_lib::types::chainstate::MARFValue;
    let _1134: &blockstack_lib::types::chainstate::MARFValue;
    let _1135: ();
    let mut _1136: std::fmt::Arguments<'_>;
    let mut _1137: &[&str];
    let mut _1138: &[core::fmt::rt::Argument<'_>];
    let _1139: &[core::fmt::rt::Argument<'_>; 1];
    let _1140: [core::fmt::rt::Argument<'_>; 1];
    let mut _1141: core::fmt::rt::Argument<'_>;
    let _1142: &std::string::String;
    let _1143: ();
    let mut _1144: std::fmt::Arguments<'_>;
    let mut _1145: &[&str];
    let _1146: !;
    let mut _1147: bool;
    let _1148: &std::string::String;
    let mut _1149: &std::vec::Vec<std::string::String>;
    let mut _1150: bool;
    let mut _1151: usize;
    let mut _1152: &std::vec::Vec<std::string::String>;
    let _1153: ();
    let mut _1154: std::fmt::Arguments<'_>;
    let mut _1155: &[&str];
    let mut _1156: &[core::fmt::rt::Argument<'_>];
    let _1157: &[core::fmt::rt::Argument<'_>; 1];
    let _1158: [core::fmt::rt::Argument<'_>; 1];
    let mut _1159: core::fmt::rt::Argument<'_>;
    let _1160: &std::string::String;
    let mut _1161: &std::vec::Vec<std::string::String>;
    let _1162: !;
    let mut _1164: std::result::Result<std::string::String, std::io::Error>;
    let _1165: &std::string::String;
    let mut _1166: &std::vec::Vec<std::string::String>;
    let _1167: &str;
    let _1168: &std::string::String;
    let _1169: std::string::String;
    let mut _1171: std::fmt::Arguments<'_>;
    let mut _1172: &[&str];
    let mut _1173: &[core::fmt::rt::Argument<'_>];
    let _1174: &[core::fmt::rt::Argument<'_>; 1];
    let _1175: [core::fmt::rt::Argument<'_>; 1];
    let mut _1176: core::fmt::rt::Argument<'_>;
    let _1177: &std::string::String;
    let mut _1178: &std::vec::Vec<std::string::String>;
    let mut _1179: std::result::Result<std::option::Option<blockstack_lib::vm::Value>, blockstack_lib::vm::errors::Error>;
    let _1180: &str;
    let _1181: &std::string::String;
    let mut _1182: isize;
    let mut _1183: isize;
    let _1185: ();
    let mut _1186: std::fmt::Arguments<'_>;
    let mut _1187: &[&str];
    let mut _1188: &[core::fmt::rt::Argument<'_>];
    let _1189: &[core::fmt::rt::Argument<'_>; 1];
    let _1190: [core::fmt::rt::Argument<'_>; 1];
    let mut _1191: core::fmt::rt::Argument<'_>;
    let _1192: &blockstack_lib::vm::Value;
    let _1193: ();
    let mut _1194: std::fmt::Arguments<'_>;
    let mut _1195: &[&str];
    let _1197: !;
    let mut _1198: std::fmt::Arguments<'_>;
    let mut _1199: &[&str];
    let mut _1200: &[core::fmt::rt::Argument<'_>];
    let _1201: &[core::fmt::rt::Argument<'_>; 1];
    let _1202: [core::fmt::rt::Argument<'_>; 1];
    let mut _1203: core::fmt::rt::Argument<'_>;
    let _1204: &blockstack_lib::vm::errors::Error;
    let mut _1205: bool;
    let _1206: &std::string::String;
    let mut _1207: &std::vec::Vec<std::string::String>;
    let _1208: &std::string::String;
    let mut _1209: &std::vec::Vec<std::string::String>;
    let mut _1211: std::result::Result<blockstack_lib::types::chainstate::BlockHeaderHash, blockstack_lib::util::HexError>;
    let _1212: &str;
    let _1213: &std::string::String;
    let mut _1214: &std::vec::Vec<std::string::String>;
    let mut _1216: std::result::Result<blockstack_lib::chainstate::burn::ConsensusHash, blockstack_lib::util::HexError>;
    let _1217: &str;
    let _1218: &std::string::String;
    let mut _1219: &std::vec::Vec<std::string::String>;
    let _1221: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _1222: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let _1223: &std::string::String;
    let mut _1224: &std::vec::Vec<std::string::String>;
    let mut _1226: std::result::Result<blockstack_lib::chainstate::stacks::index::marf::MARF<blockstack_lib::types::chainstate::StacksBlockId>, blockstack_lib::chainstate::stacks::index::Error>;
    let _1227: &str;
    let mut _1229: std::result::Result<std::option::Option<blockstack_lib::types::chainstate::MARFValue>, blockstack_lib::chainstate::stacks::index::Error>;
    let mut _1230: &mut blockstack_lib::chainstate::stacks::index::marf::MARF<blockstack_lib::types::chainstate::StacksBlockId>;
    let _1231: &blockstack_lib::types::chainstate::StacksBlockId;
    let _1232: &str;
    let _1233: &str;
    let mut _1234: isize;
    let _1236: ();
    let mut _1237: std::fmt::Arguments<'_>;
    let mut _1238: &[&str];
    let mut _1239: &[core::fmt::rt::Argument<'_>];
    let _1240: &[core::fmt::rt::Argument<'_>; 1];
    let _1241: [core::fmt::rt::Argument<'_>; 1];
    let mut _1242: core::fmt::rt::Argument<'_>;
    let _1243: &blockstack_lib::types::chainstate::MARFValue;
    let _1244: ();
    let mut _1245: std::fmt::Arguments<'_>;
    let mut _1246: &[&str];
    let mut _1247: bool;
    let _1248: &std::string::String;
    let mut _1249: &std::vec::Vec<std::string::String>;
    let _1250: &std::string::String;
    let mut _1251: &std::vec::Vec<std::string::String>;
    let mut _1253: std::result::Result<blockstack_lib::types::chainstate::BlockHeaderHash, blockstack_lib::util::HexError>;
    let _1254: &str;
    let _1255: &std::string::String;
    let mut _1256: &std::vec::Vec<std::string::String>;
    let mut _1258: std::result::Result<blockstack_lib::types::chainstate::BurnchainHeaderHash, blockstack_lib::util::HexError>;
    let _1259: &str;
    let _1260: &std::string::String;
    let mut _1261: &std::vec::Vec<std::string::String>;
    let mut _1263: std::result::Result<rusqlite::Connection, rusqlite::Error>;
    let mut _1265: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1267: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let _1268: ();
    let mut _1269: std::fmt::Arguments<'_>;
    let mut _1270: &[&str];
    let mut _1271: &[core::fmt::rt::Argument<'_>];
    let _1272: &[core::fmt::rt::Argument<'_>; 2];
    let _1273: [core::fmt::rt::Argument<'_>; 2];
    let mut _1274: core::fmt::rt::Argument<'_>;
    let _1275: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1276: core::fmt::rt::Argument<'_>;
    let _1277: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _1280: std::result::Result<(blockstack_lib::types::chainstate::BurnchainHeaderHash, blockstack_lib::types::chainstate::BlockHeaderHash), rusqlite::Error>;
    let mut _1281: &rusqlite::Connection;
    let _1282: &str;
    let mut _1283: &[&dyn rusqlite::ToSql; 2];
    let _1284: [&dyn rusqlite::ToSql; 2];
    let mut _1285: &dyn rusqlite::ToSql;
    let _1286: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _1287: &dyn rusqlite::ToSql;
    let _1288: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1289: isize;
    let mut _1292: isize;
    let _1294: ();
    let mut _1295: std::fmt::Arguments<'_>;
    let mut _1296: &[&str];
    let mut _1297: &[core::fmt::rt::Argument<'_>];
    let _1298: &[core::fmt::rt::Argument<'_>; 1];
    let _1299: [core::fmt::rt::Argument<'_>; 1];
    let mut _1300: core::fmt::rt::Argument<'_>;
    let _1301: &rusqlite::Error;
    let mut _1302: bool;
    let _1303: &std::string::String;
    let mut _1304: &std::vec::Vec<std::string::String>;
    let _1305: ();
    let mut _1306: std::fmt::Arguments<'_>;
    let mut _1307: &[&str];
    let mut _1308: &[core::fmt::rt::Argument<'_>];
    let _1309: &[core::fmt::rt::Argument<'_>; 1];
    let _1310: [core::fmt::rt::Argument<'_>; 1];
    let mut _1311: core::fmt::rt::Argument<'_>;
    let _1312: &std::string::String;
    let _1313: std::string::String;
    let mut _1314: bool;
    let _1315: &std::string::String;
    let mut _1316: &std::vec::Vec<std::string::String>;
    let _1317: ();
    let mut _1318: std::fmt::Arguments<'_>;
    let mut _1319: &[&str];
    let mut _1320: &[core::fmt::rt::Argument<'_>];
    let _1321: &[core::fmt::rt::Argument<'_>; 1];
    let _1322: [core::fmt::rt::Argument<'_>; 1];
    let mut _1323: core::fmt::rt::Argument<'_>;
    let _1324: &std::string::String;
    let _1325: std::string::String;
    let mut _1326: bool;
    let _1327: &std::string::String;
    let mut _1328: &std::vec::Vec<std::string::String>;
    let _1329: (i32, std::option::Option<serde_json::value::Value>);
    let _1330: &str;
    let _1331: &std::string::String;
    let _1332: std::string::String;
    let mut _1334: std::fmt::Arguments<'_>;
    let mut _1335: &[&str];
    let mut _1336: &[core::fmt::rt::Argument<'_>];
    let _1337: &[core::fmt::rt::Argument<'_>; 2];
    let _1338: [core::fmt::rt::Argument<'_>; 2];
    let mut _1339: core::fmt::rt::Argument<'_>;
    let _1340: &std::string::String;
    let mut _1341: &std::vec::Vec<std::string::String>;
    let mut _1342: core::fmt::rt::Argument<'_>;
    let _1343: &std::string::String;
    let mut _1344: &std::vec::Vec<std::string::String>;
    let _1345: &[std::string::String];
    let mut _1346: &std::vec::Vec<std::string::String>;
    let mut _1347: std::ops::RangeFrom<usize>;
    let mut _1348: bool;
    let _1349: &std::string::String;
    let mut _1350: &std::vec::Vec<std::string::String>;
    let _1351: &std::string::String;
    let mut _1352: &std::vec::Vec<std::string::String>;
    let _1353: &std::string::String;
    let mut _1354: &std::vec::Vec<std::string::String>;
    let mut _1356: (blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>);
    let mut _1357: std::result::Result<(blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>;
    let _1358: &str;
    let mut _1360: std::result::Result<blockstack_lib::chainstate::burn::db::sortdb::SortitionDB, blockstack_lib::util::db::Error>;
    let _1361: &str;
    let mut _1363: blockstack_lib::chainstate::burn::BlockSnapshot;
    let mut _1364: std::result::Result<blockstack_lib::chainstate::burn::BlockSnapshot, blockstack_lib::util::db::Error>;
    let _1365: &rusqlite::Connection;
    let mut _1366: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let mut _1368: std::result::Result<blockstack_lib::util::db::IndexDBTx<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionHandleContext, blockstack_lib::types::chainstate::SortitionId>, blockstack_lib::util::db::Error>;
    let mut _1369: &mut blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let _1370: &blockstack_lib::types::chainstate::SortitionId;
    let _1371: (std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>);
    let mut _1372: std::result::Result<(std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>), blockstack_lib::chainstate::stacks::Error>;
    let mut _1373: &mut blockstack_lib::chainstate::stacks::db::StacksChainState;
    let mut _1374: &mut blockstack_lib::util::db::IndexDBTx<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionHandleContext, blockstack_lib::types::chainstate::SortitionId>;
    let mut _1375: bool;
    let _1376: &std::string::String;
    let mut _1377: &std::vec::Vec<std::string::String>;
    let mut _1378: bool;
    let mut _1379: usize;
    let mut _1380: &std::vec::Vec<std::string::String>;
    let _1381: ();
    let mut _1382: std::fmt::Arguments<'_>;
    let mut _1383: &[&str];
    let mut _1384: &[core::fmt::rt::Argument<'_>];
    let _1385: &[core::fmt::rt::Argument<'_>; 1];
    let _1386: [core::fmt::rt::Argument<'_>; 1];
    let mut _1387: core::fmt::rt::Argument<'_>;
    let _1388: &&std::string::String;
    let _1389: &std::string::String;
    let _1390: &std::string::String;
    let mut _1391: &std::vec::Vec<std::string::String>;
    let _1392: !;
    let _1393: &std::string::String;
    let mut _1394: &std::vec::Vec<std::string::String>;
    let _1395: &std::string::String;
    let mut _1396: &std::vec::Vec<std::string::String>;
    let _1398: &std::string::String;
    let mut _1399: &std::vec::Vec<std::string::String>;
    let _1400: &std::string::String;
    let mut _1401: &std::vec::Vec<std::string::String>;
    let _1403: &std::string::String;
    let mut _1404: &std::vec::Vec<std::string::String>;
    let mut _1406: (blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>);
    let mut _1407: std::result::Result<(blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>;
    let _1408: &str;
    let mut _1410: std::result::Result<blockstack_lib::chainstate::burn::db::sortdb::SortitionDB, blockstack_lib::util::db::Error>;
    let _1411: &str;
    let mut _1413: std::boxed::Box<[(blockstack_lib::vm::types::PrincipalData, u64)]>;
    let mut _1414: std::boxed::Box<[(blockstack_lib::vm::types::PrincipalData, u64); 4]>;
    let mut _1415: usize;
    let mut _1416: usize;
    let mut _1417: *mut u8;
    let mut _1418: std::boxed::Box<[(blockstack_lib::vm::types::PrincipalData, u64); 4]>;
    let mut _1419: (blockstack_lib::vm::types::PrincipalData, u64);
    let mut _1420: blockstack_lib::vm::types::PrincipalData;
    let mut _1421: &blockstack_lib::types::chainstate::StacksAddress;
    let _1422: blockstack_lib::types::chainstate::StacksAddress;
    let mut _1423: std::option::Option<blockstack_lib::types::chainstate::StacksAddress>;
    let _1424: &str;
    let mut _1425: (blockstack_lib::vm::types::PrincipalData, u64);
    let mut _1426: blockstack_lib::vm::types::PrincipalData;
    let mut _1427: &blockstack_lib::types::chainstate::StacksAddress;
    let _1428: blockstack_lib::types::chainstate::StacksAddress;
    let mut _1429: std::option::Option<blockstack_lib::types::chainstate::StacksAddress>;
    let _1430: &str;
    let mut _1431: (blockstack_lib::vm::types::PrincipalData, u64);
    let mut _1432: blockstack_lib::vm::types::PrincipalData;
    let mut _1433: &blockstack_lib::types::chainstate::StacksAddress;
    let _1434: blockstack_lib::types::chainstate::StacksAddress;
    let mut _1435: std::option::Option<blockstack_lib::types::chainstate::StacksAddress>;
    let _1436: &str;
    let mut _1437: (blockstack_lib::vm::types::PrincipalData, u64);
    let mut _1438: blockstack_lib::vm::types::PrincipalData;
    let mut _1439: &blockstack_lib::types::chainstate::StacksAddress;
    let _1440: blockstack_lib::types::chainstate::StacksAddress;
    let mut _1441: std::option::Option<blockstack_lib::types::chainstate::StacksAddress>;
    let _1442: &str;
    let _1445: &str;
    let _1446: &&std::string::String;
    let mut _1450: (blockstack_lib::chainstate::burn::db::sortdb::SortitionDB, blockstack_lib::burnchains::db::BurnchainDB);
    let mut _1451: std::result::Result<(blockstack_lib::chainstate::burn::db::sortdb::SortitionDB, blockstack_lib::burnchains::db::BurnchainDB), blockstack_lib::burnchains::Error>;
    let mut _1452: &blockstack_lib::burnchains::Burnchain;
    let mut _1453: blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1454: u64;
    let mut _1456: std::result::Result<blockstack_lib::burnchains::db::BurnchainDB, blockstack_lib::burnchains::Error>;
    let _1457: &str;
    let _1458: &&std::string::String;
    let _1459: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1460: u64;
    let mut _1462: std::vec::Vec<(blockstack_lib::vm::types::PrincipalData, u64)>;
     let mut _1463: std::option::Option<std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(&'a mut blockstack_lib::chainstate::stacks::db::ClarityTx<'b>)>>; 
    let mut _1464: blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1465: u32;
    let mut _1466: blockstack_lib::burnchains::PoxConstants;
    let mut _1467: std::option::Option<std::boxed::Box<dyn std::ops::FnOnce() -> std::boxed::Box<dyn std::iter::Iterator<Item = blockstack_lib::chainstate::stacks::db::ChainstateAccountLockup>>>>;
    let mut _1468: std::option::Option<std::boxed::Box<dyn std::ops::FnOnce() -> std::boxed::Box<dyn std::iter::Iterator<Item = blockstack_lib::chainstate::stacks::db::ChainstateAccountBalance>>>>;
    let mut _1469: std::option::Option<std::boxed::Box<dyn std::ops::FnOnce() -> std::boxed::Box<dyn std::iter::Iterator<Item = blockstack_lib::chainstate::stacks::db::ChainstateBNSNamespace>>>>;
    let mut _1470: std::option::Option<std::boxed::Box<dyn std::ops::FnOnce() -> std::boxed::Box<dyn std::iter::Iterator<Item = blockstack_lib::chainstate::stacks::db::ChainstateBNSName>>>>;
    let mut _1472: (blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>);
    let mut _1473: std::result::Result<(blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>;
    let _1474: &str;
    let mut _1475: std::option::Option<&mut blockstack_lib::chainstate::stacks::db::ChainStateBootData>;
    let mut _1476: &mut blockstack_lib::chainstate::stacks::db::ChainStateBootData;
    let mut _1478: std::result::Result<std::vec::Vec<blockstack_lib::chainstate::burn::BlockSnapshot>, blockstack_lib::util::db::Error>;
    let mut _1479: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let mut _1481: std::result::Result<std::vec::Vec<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>, blockstack_lib::chainstate::stacks::Error>;
    let _1482: &&rusqlite::Connection;
    let _1483: &rusqlite::Connection;
    let mut _1484: &blockstack_lib::chainstate::stacks::db::StacksChainState;
    let mut _1486: std::slice::Iter<'_, blockstack_lib::chainstate::burn::BlockSnapshot>;
    let mut _1487: std::slice::Iter<'_, blockstack_lib::chainstate::burn::BlockSnapshot>;
    let _1488: &[blockstack_lib::chainstate::burn::BlockSnapshot];
    let mut _1489: &std::vec::Vec<blockstack_lib::chainstate::burn::BlockSnapshot>;
    let mut _1491: std::option::Option<&blockstack_lib::chainstate::burn::BlockSnapshot>;
    let mut _1492: &mut std::slice::Iter<'_, blockstack_lib::chainstate::burn::BlockSnapshot>;
    let mut _1493: isize;
    let mut _1495: bool;
    let mut _1496: u64;
    let _1498: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _1499: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let _1500: ();
    let mut _1501: &mut std::vec::Vec<(blockstack_lib::types::chainstate::StacksBlockId, u64)>;
    let mut _1502: (blockstack_lib::types::chainstate::StacksBlockId, u64);
    let mut _1503: u64;
    let _1504: ();
    let mut _1505: &mut [(blockstack_lib::types::chainstate::StacksBlockId, u64)];
    let mut _1506: &mut std::vec::Vec<(blockstack_lib::types::chainstate::StacksBlockId, u64)>;
    let mut _1508: std::iter::Map<std::vec::IntoIter<(blockstack_lib::types::chainstate::StacksBlockId, u64)>, {closure@src/main.rs:861:18: 861:26}>;
    let mut _1509: std::vec::IntoIter<(blockstack_lib::types::chainstate::StacksBlockId, u64)>;
    let mut _1510: std::vec::Vec<(blockstack_lib::types::chainstate::StacksBlockId, u64)>;
    let mut _1513: &std::vec::Vec<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let mut _1514: std::vec::IntoIter<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let mut _1515: std::vec::IntoIter<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let mut _1516: std::vec::Vec<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let mut _1518: std::option::Option<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let mut _1519: &mut std::vec::IntoIter<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let mut _1520: isize;
    let mut _1522: bool;
    let _1524: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _1525: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let _1526: ();
    let mut _1527: std::fmt::Arguments<'_>;
    let mut _1528: &[&str];
    let mut _1529: &[core::fmt::rt::Argument<'_>];
    let _1530: &[core::fmt::rt::Argument<'_>; 2];
    let _1531: [core::fmt::rt::Argument<'_>; 2];
    let mut _1532: core::fmt::rt::Argument<'_>;
    let _1533: &&blockstack_lib::chainstate::burn::ConsensusHash;
    let _1534: &blockstack_lib::chainstate::burn::ConsensusHash;
    let mut _1535: core::fmt::rt::Argument<'_>;
    let _1536: &&blockstack_lib::types::chainstate::BlockHeaderHash;
    let _1537: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let _1538: std::option::Option<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let mut _1539: &mut std::collections::HashMap<blockstack_lib::types::chainstate::StacksBlockId, blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let mut _1540: blockstack_lib::chainstate::stacks::db::blocks::StagingBlock;
    let _1541: ();
    let mut _1542: std::fmt::Arguments<'_>;
    let mut _1543: &[&str];
    let mut _1544: &[core::fmt::rt::Argument<'_>];
    let _1545: &[core::fmt::rt::Argument<'_>; 2];
    let _1546: [core::fmt::rt::Argument<'_>; 2];
    let mut _1547: core::fmt::rt::Argument<'_>;
    let _1548: &&usize;
    let _1549: &usize;
    let _1550: usize;
    let mut _1551: &std::collections::HashMap<blockstack_lib::types::chainstate::StacksBlockId, blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let mut _1552: core::fmt::rt::Argument<'_>;
    let _1553: &usize;
    let mut _1557: (blockstack_lib::chainstate::burn::db::sortdb::SortitionDB, blockstack_lib::burnchains::db::BurnchainDB);
    let mut _1558: std::result::Result<(blockstack_lib::chainstate::burn::db::sortdb::SortitionDB, blockstack_lib::burnchains::db::BurnchainDB), blockstack_lib::burnchains::Error>;
    let mut _1559: &blockstack_lib::burnchains::Burnchain;
    let mut _1560: blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1561: u64;
    let mut _1563: (blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>);
    let mut _1564: std::result::Result<(blockstack_lib::chainstate::stacks::db::StacksChainState, std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>;
    let _1565: &str;
    let mut _1566: blockstack_lib::vm::costs::ExecutionCost;
    let mut _1567: std::thread::JoinHandle<()>;
    let mut _1568: {closure@src/main.rs:904:31: 904:38};
    let mut _1569: std::vec::IntoIter<blockstack_lib::chainstate::burn::BlockSnapshot>;
    let mut _1570: std::vec::IntoIter<blockstack_lib::chainstate::burn::BlockSnapshot>;
    let mut _1571: std::vec::Vec<blockstack_lib::chainstate::burn::BlockSnapshot>;
    let mut _1573: std::option::Option<blockstack_lib::chainstate::burn::BlockSnapshot>;
    let mut _1574: &mut std::vec::IntoIter<blockstack_lib::chainstate::burn::BlockSnapshot>;
    let mut _1575: isize;
    let mut _1579: blockstack_lib::burnchains::db::BurnchainBlockData;
    let mut _1580: std::result::Result<blockstack_lib::burnchains::db::BurnchainBlockData, blockstack_lib::burnchains::Error>;
    let mut _1581: &blockstack_lib::burnchains::db::BurnchainDB;
    let _1582: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1583: bool;
    let mut _1584: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1585: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let _1586: blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1588: (blockstack_lib::chainstate::burn::BlockSnapshot, blockstack_lib::burnchains::BurnchainStateTransition, std::option::Option<blockstack_lib::chainstate::burn::operations::leader_block_commit::RewardSetInfo>);
    let mut _1590: std::result::Result<blockstack_lib::chainstate::burn::BlockSnapshot, blockstack_lib::util::db::Error>;
    let _1591: &rusqlite::Connection;
    let mut _1592: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let mut _1593: std::result::Result<(blockstack_lib::chainstate::burn::BlockSnapshot, blockstack_lib::burnchains::BurnchainStateTransition, std::option::Option<blockstack_lib::chainstate::burn::operations::leader_block_commit::RewardSetInfo>), blockstack_lib::burnchains::Error>;
    let mut _1594: &mut blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let _1595: &blockstack_lib::burnchains::BurnchainBlockHeader;
    let mut _1596: std::vec::Vec<blockstack_lib::chainstate::burn::operations::BlockstackOperationType>;
    let _1597: &blockstack_lib::burnchains::Burnchain;
    let _1598: &blockstack_lib::types::chainstate::SortitionId;
    let mut _1599: std::option::Option<blockstack_lib::chainstate::coordinator::RewardCycleInfo>;
    let mut _1600: (&blockstack_lib::types::chainstate::BurnchainHeaderHash, &blockstack_lib::types::chainstate::BurnchainHeaderHash);
    let mut _1601: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1602: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1605: bool;
    let _1607: !;
    let mut _1608: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1609: (&blockstack_lib::types::chainstate::BurnchainHeaderHash, &blockstack_lib::types::chainstate::BurnchainHeaderHash);
    let mut _1610: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1611: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _1614: bool;
    let _1616: !;
    let mut _1617: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1618: (&bool, &bool);
    let mut _1619: &bool;
    let mut _1620: &bool;
    let mut _1623: bool;
    let mut _1624: bool;
    let mut _1625: bool;
    let _1627: !;
    let mut _1628: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1629: (&blockstack_lib::types::chainstate::BlockHeaderHash, &blockstack_lib::types::chainstate::BlockHeaderHash);
    let mut _1630: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _1631: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _1634: bool;
    let _1636: !;
    let mut _1637: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1638: (&blockstack_lib::chainstate::burn::ConsensusHash, &blockstack_lib::chainstate::burn::ConsensusHash);
    let mut _1639: &blockstack_lib::chainstate::burn::ConsensusHash;
    let mut _1640: &blockstack_lib::chainstate::burn::ConsensusHash;
    let mut _1643: bool;
    let _1645: !;
    let mut _1646: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1647: (&blockstack_lib::chainstate::burn::SortitionHash, &blockstack_lib::chainstate::burn::SortitionHash);
    let mut _1648: &blockstack_lib::chainstate::burn::SortitionHash;
    let mut _1649: &blockstack_lib::chainstate::burn::SortitionHash;
    let mut _1652: bool;
    let _1654: !;
    let mut _1655: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1656: (&u64, &u64);
    let mut _1657: &u64;
    let mut _1658: &u64;
    let mut _1661: bool;
    let mut _1662: u64;
    let mut _1663: u64;
    let _1665: !;
    let mut _1666: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1667: (&u64, &u64);
    let mut _1668: &u64;
    let mut _1669: &u64;
    let mut _1672: bool;
    let mut _1673: u64;
    let mut _1674: u64;
    let _1676: !;
    let mut _1677: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1678: (&blockstack_lib::chainstate::burn::OpsHash, &blockstack_lib::chainstate::burn::OpsHash);
    let mut _1679: &blockstack_lib::chainstate::burn::OpsHash;
    let mut _1680: &blockstack_lib::chainstate::burn::OpsHash;
    let mut _1683: bool;
    let _1685: !;
    let mut _1686: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1687: bool;
    let _1689: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _1690: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let _1691: bool;
    let mut _1692: &mut std::collections::HashSet<blockstack_lib::types::chainstate::StacksBlockId>;
    let mut _1693: blockstack_lib::types::chainstate::StacksBlockId;
    let mut _1694: &blockstack_lib::types::chainstate::StacksBlockId;
    let mut _1695: bool;
    let mut _1696: usize;
    let mut _1697: usize;
    let mut _1698: &std::vec::Vec<blockstack_lib::types::chainstate::StacksBlockId>;
    let mut _1699: bool;
    let mut _1700: &blockstack_lib::types::chainstate::StacksBlockId;
    let _1701: &blockstack_lib::types::chainstate::StacksBlockId;
    let mut _1702: &std::vec::Vec<blockstack_lib::types::chainstate::StacksBlockId>;
    let mut _1703: usize;
    let mut _1704: bool;
    let mut _1705: usize;
    let mut _1706: usize;
    let mut _1707: &std::vec::Vec<blockstack_lib::types::chainstate::StacksBlockId>;
    let mut _1708: bool;
    let mut _1709: &std::collections::HashSet<blockstack_lib::types::chainstate::StacksBlockId>;
    let _1710: &blockstack_lib::types::chainstate::StacksBlockId;
    let mut _1711: std::option::Option<&blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let mut _1712: &std::collections::HashMap<blockstack_lib::types::chainstate::StacksBlockId, blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
    let _1713: &blockstack_lib::types::chainstate::StacksBlockId;
    let mut _1714: isize;
    let mut _1716: std::result::Result<std::option::Option<blockstack_lib::chainstate::stacks::StacksBlock>, blockstack_lib::chainstate::stacks::Error>;
    let _1717: &std::string::String;
    let _1718: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _1719: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _1720: isize;
    let mut _1723: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let _1724: bool;
    let mut _1725: std::result::Result<bool, blockstack_lib::chainstate::stacks::Error>;
    let _1726: &blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionDBTxContext, blockstack_lib::types::chainstate::SortitionId>;
    let mut _1727: &mut blockstack_lib::chainstate::stacks::db::StacksChainState;
    let _1728: &blockstack_lib::chainstate::burn::ConsensusHash;
    let _1729: &blockstack_lib::chainstate::stacks::StacksBlock;
    let _1730: ();
    let mut _1732: bool;
    let mut _1733: bool;
    let mut _1734: usize;
    let mut _1735: usize;
    let mut _1736: &slog::FilterLevel;
    let _1737: slog::FilterLevel;
    let _1738: &slog::Logger<std::sync::Arc<dyn slog::SendSyncRefUnwindSafeDrain<Err = slog::private::NeverStruct, Ok = ()>>>;
    let _1739: &blockstack_lib::util::log::LOGGER;
    let _1740: &slog::Record<'_>;
    let _1741: slog::Record<'_>;
    let _1742: &slog::RecordStatic<'_>;
    let _1743: &std::fmt::Arguments<'_>;
    let _1744: std::fmt::Arguments<'_>;
    let mut _1745: &[&str];
    let mut _1746: &[core::fmt::rt::Argument<'_>];
    let _1747: &[core::fmt::rt::Argument<'_>; 2];
    let _1748: [core::fmt::rt::Argument<'_>; 2];
    let mut _1749: core::fmt::rt::Argument<'_>;
    let _1750: &&blockstack_lib::chainstate::burn::ConsensusHash;
    let _1751: &blockstack_lib::chainstate::burn::ConsensusHash;
    let mut _1752: core::fmt::rt::Argument<'_>;
    let _1753: &&blockstack_lib::types::chainstate::BlockHeaderHash;
    let _1754: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _1755: slog::BorrowedKV<'_>;
    let mut _1756: &dyn slog::KV;
    let _1757: ();
    let mut _1759: bool;
    let mut _1760: bool;
    let mut _1761: usize;
    let mut _1762: usize;
    let mut _1763: &slog::FilterLevel;
    let _1764: slog::FilterLevel;
    let _1765: &slog::Logger<std::sync::Arc<dyn slog::SendSyncRefUnwindSafeDrain<Err = slog::private::NeverStruct, Ok = ()>>>;
    let _1766: &blockstack_lib::util::log::LOGGER;
    let _1767: &slog::Record<'_>;
    let _1768: slog::Record<'_>;
    let _1769: &slog::RecordStatic<'_>;
    let _1770: &std::fmt::Arguments<'_>;
    let _1771: std::fmt::Arguments<'_>;
    let mut _1772: &[&str];
    let mut _1773: &[core::fmt::rt::Argument<'_>];
    let _1774: &[core::fmt::rt::Argument<'_>; 2];
    let _1775: [core::fmt::rt::Argument<'_>; 2];
    let mut _1776: core::fmt::rt::Argument<'_>;
    let _1777: &&blockstack_lib::chainstate::burn::ConsensusHash;
    let _1778: &blockstack_lib::chainstate::burn::ConsensusHash;
    let mut _1779: core::fmt::rt::Argument<'_>;
    let _1780: &&blockstack_lib::types::chainstate::BlockHeaderHash;
    let _1781: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _1782: slog::BorrowedKV<'_>;
    let mut _1783: &dyn slog::KV;
    let mut _1784: (usize, bool);
    let mut _1785: bool;
    let mut _1786: usize;
    let mut _1787: usize;
    let mut _1788: &std::vec::Vec<blockstack_lib::types::chainstate::StacksBlockId>;
    let mut _1789: blockstack_lib::types::chainstate::StacksBlockId;
    let _1790: &blockstack_lib::types::chainstate::StacksBlockId;
    let mut _1791: &std::vec::Vec<blockstack_lib::types::chainstate::StacksBlockId>;
    let mut _1792: usize;
    let mut _1795: blockstack_lib::chainstate::burn::BlockSnapshot;
    let mut _1796: std::result::Result<blockstack_lib::chainstate::burn::BlockSnapshot, blockstack_lib::util::db::Error>;
    let _1797: &rusqlite::Connection;
    let mut _1798: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let mut _1800: std::result::Result<blockstack_lib::util::db::IndexDBTx<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionHandleContext, blockstack_lib::types::chainstate::SortitionId>, blockstack_lib::util::db::Error>;
    let mut _1801: &mut blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let _1802: &blockstack_lib::types::chainstate::SortitionId;
    let mut _1804: std::result::Result<std::vec::Vec<(std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)>, blockstack_lib::chainstate::stacks::Error>;
    let mut _1805: &mut blockstack_lib::chainstate::stacks::db::StacksChainState;
    let mut _1806: usize;
    let mut _1807: &std::vec::Vec<(std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)>;
    let mut _1808: std::vec::IntoIter<(std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)>;
    let mut _1809: std::vec::IntoIter<(std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)>;
    let mut _1810: std::vec::Vec<(std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)>;
    let mut _1812: std::option::Option<(std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)>;
    let mut _1813: &mut std::vec::IntoIter<(std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)>;
    let mut _1814: isize;
    let mut _1816: isize;
    let _1818: ();
    let mut _1819: &mut std::vec::Vec<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>;
    let _1820: ();
    let mut _1821: std::fmt::Arguments<'_>;
    let mut _1822: &[&str];
    let mut _1823: &[core::fmt::rt::Argument<'_>];
    let _1824: &[core::fmt::rt::Argument<'_>; 2];
    let _1825: [core::fmt::rt::Argument<'_>; 2];
    let mut _1826: core::fmt::rt::Argument<'_>;
    let _1827: &usize;
    let mut _1828: core::fmt::rt::Argument<'_>;
    let _1829: &usize;
    let _1830: usize;
    let mut _1831: &std::vec::Vec<blockstack_lib::types::chainstate::StacksBlockId>;
    let mut _1832: bool;
    let mut _1833: usize;
    let mut _1834: &std::vec::Vec<std::string::String>;
    let _1835: ();
    let mut _1836: std::fmt::Arguments<'_>;
    let mut _1837: &[&str];
    let mut _1838: &[core::fmt::rt::Argument<'_>];
    let _1839: &[core::fmt::rt::Argument<'_>; 1];
    let _1840: [core::fmt::rt::Argument<'_>; 1];
    let mut _1841: core::fmt::rt::Argument<'_>;
    let _1842: &std::string::String;
    let mut _1843: &std::vec::Vec<std::string::String>;
    let _1844: !;
    let mut _1950: &(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>);
    let mut _1951: &(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>);
    let mut _1952: &blockstack_lib::chainstate::burn::ConsensusHash;
    let mut _1953: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _1954: &rusqlite::Connection;
    let mut _1955: &blockstack_lib::chainstate::burn::ConsensusHash;
    let mut _1956: &blockstack_lib::types::chainstate::BlockHeaderHash;
    let mut _1957: &std::string::String;
    let mut _1958: &std::string::String;
    let mut _1959: &rusqlite::Connection;
    let mut _1960: bool;
    let mut _1961: bool;
    let mut _1962: bool;
    let mut _1963: bool;
    let mut _1964: bool;
    let mut _1965: bool;
    let mut _1966: bool;
    let mut _1967: bool;
    let mut _1968: bool;
    let mut _1969: bool;
    let mut _1970: bool;
    let mut _1971: bool;
    let mut _1972: bool;
    let mut _1973: bool;
    let mut _1974: bool;
    let mut _1975: bool;
    let mut _1976: bool;
    let mut _1977: bool;
    let mut _1978: bool;
    let mut _1979: bool;
    let mut _1980: bool;
    let mut _1981: bool;
    let mut _1982: isize;
    let mut _1983: isize;
    let mut _1984: isize;
    let mut _1985: isize;
    let mut _1986: isize;
    let mut _1987: isize;
    let mut _1988: isize;
    let mut _1989: isize;
    let mut _1990: &mut std::boxed::Box<[(blockstack_lib::vm::types::PrincipalData, u64); 4]>;
    let mut _1991: ();
    let mut _1992: isize;
    let mut _1993: isize;
    let mut _1994: *const [(blockstack_lib::vm::types::PrincipalData, u64); 4];
    scope 1 {
        debug argv => _1;
        let mut _54: bool;
        let _228: &std::string::String;
        let _285: std::string::String;
        let _286: std::string::String;
        let _401: std::string::String;
        let _402: std::string::String;
        let _616: u64;
        let _736: u128;
        let _958: &std::string::String;
        let _1022: std::string::String;
        let _1023: std::string::String;
        let _1024: usize;
        let _1028: &std::string::String;
        let _1163: std::string::String;
        let _1170: std::string::String;
        let _1333: std::string::String;
        let mut _1845: &[&str; 2];
        let mut _1846: &[&str; 2];
        let mut _1847: &[&str; 2];
        let mut _1853: &[&str; 2];
        let mut _1857: &[&str; 2];
        let mut _1860: &[&str; 2];
        let mut _1867: &[&str; 2];
        let mut _1868: &[&str; 2];
        let mut _1882: &[&str; 2];
        let mut _1883: &[&str; 2];
        let mut _1888: &[&str; 2];
        let mut _1895: &[&str; 2];
        let mut _1898: &[&str; 1];
        let mut _1899: &[&str; 2];
        let mut _1907: &[&str; 2];
        let mut _1911: &[&str; 1];
        let mut _1916: &[&str; 2];
        let mut _1917: &[&str; 2];
        let mut _1918: &[&str; 2];
        let mut _1919: &[&str; 2];
        let mut _1931: &[&str; 2];
        let mut _1932: &&str;
        let mut _1933: &&str;
        let mut _1934: &&str;
        let mut _1935: &&str;
        let mut _1936: &&str;
        let mut _1937: &&str;
        let mut _1938: &&str;
        let mut _1939: &&str;
        let mut _1940: &&str;
        let mut _1941: &&str;
        let mut _1942: &&str;
        let mut _1943: &&str;
        let mut _1944: &&str;
        let mut _1945: &&str;
        let mut _1946: &&str;
        let mut _1947: &&str;
        let mut _1948: &&str;
        let mut _1949: &&str;
        scope 2 {
            debug testnet => _54;
            let mut _55: bool;
            scope 3 {
                debug regtest => _55;
                let mut _56: usize;
                scope 4 {
                    debug idx => _56;
                    let mut _61: std::ops::Range<usize>;
                    let _89: blockstack_lib::burnchains::bitcoin::BitcoinNetworkType;
                    let mut _1850: &[&str; 2];
                    scope 5 {
                        debug iter => _61;
                        let _65: usize;
                        scope 6 {
                            debug i => _65;
                            let mut _1848: &&str;
                            let mut _1849: &&str;
                        }
                    }
                    scope 7 {
                        debug mode => _89;
                        let _92: u64;
                        scope 8 {
                            debug height => _92;
                            scope 9 {
                                debug headers_path => _98;
                                let _100: blockstack_lib::burnchains::bitcoin::spv::SpvClient;
                                scope 10 {
                                    debug spv_client => _100;
                                    let _111: blockstack_lib::deps::bitcoin::blockdata::block::LoneBlockHeader;
                                    let mut _1851: &[&str; 1];
                                    scope 11 {
                                        debug header => _111;
                                        let mut _1852: &[&str; 2];
                                        scope 12 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 13 {
            debug tx_str => _149;
            let _151: std::vec::Vec<u8>;
            scope 14 {
                debug tx_bytes => _151;
                let mut _155: std::io::Cursor<&std::vec::Vec<u8>>;
                scope 15 {
                    debug cursor => _155;
                    let mut _157: blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>;
                    scope 16 {
                        debug debug_cursor => _157;
                        let _159: blockstack_lib::chainstate::stacks::StacksTransaction;
                        scope 17 {
                            debug tx => _159;
                            let mut _1854: &[&str; 2];
                            let mut _1855: &[&str; 2];
                            let mut _1856: &[&str; 2];
                            scope 18 {
                            }
                            scope 19 {
                            }
                        }
                    }
                }
            }
        }
        scope 20 {
            debug block_path => _228;
            let _231: std::vec::Vec<u8>;
            let _237: std::string::String;
            let mut _1859: &[&str; 1];
            scope 21 {
                debug block_data => _231;
                let _245: blockstack_lib::chainstate::stacks::StacksBlock;
                scope 23 {
                    debug block => _245;
                    let mut _1858: &[&str; 2];
                    scope 24 {
                    }
                }
            }
            scope 22 {
                debug res => _237;
            }
        }
        scope 25 {
            debug sort_db_path => _285;
            let _297: std::string::String;
            let _298: std::string::String;
            let mut _1866: &[&str; 2];
            scope 27 {
                debug chain_state_path => _297;
                let _309: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
                let _316: std::string::String;
                let mut _1865: &[&str; 1];
                scope 29 {
                    debug sort_db => _309;
                    let _325: u32;
                    scope 31 {
                        debug chain_id => const _;
                        let _326: blockstack_lib::chainstate::stacks::db::StacksChainState;
                        scope 32 {
                            debug chain_state => _326;
                            let _332: blockstack_lib::chainstate::burn::BlockSnapshot;
                            scope 33 {
                                debug chain_tip => _332;
                                let _337: time::Instant;
                                scope 34 {
                                    debug start => _337;
                                    let _338: std::vec::Vec<(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)>;
                                    let _339: blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionDBTxContext, blockstack_lib::types::chainstate::SortitionId>;
                                    scope 35 {
                                        debug header_hashes => _338;
                                        let _356: time::Instant;
                                        let mut _1864: &[&str; 2];
                                        scope 37 {
                                            debug start => _356;
                                            let _357: blockstack_lib::net::BlocksInvData;
                                            scope 38 {
                                                debug block_inv => _357;
                                                let mut _1861: &[&str; 1];
                                                let mut _1862: &[&str; 2];
                                                let mut _1863: &[&str; 2];
                                            }
                                        }
                                    }
                                    scope 36 {
                                        debug ic => _339;
                                    }
                                }
                            }
                        }
                    }
                }
                scope 30 {
                    debug res => _316;
                }
            }
            scope 28 {
                debug res => _298;
            }
        }
        scope 26 {
            debug res => _286;
        }
        scope 39 {
            debug sort_db_path => _401;
            let _413: std::string::String;
            let _414: std::string::String;
            let mut _1881: &[&str; 2];
            scope 41 {
                debug chain_state_path => _413;
                let _425: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
                let _432: std::string::String;
                let mut _1880: &[&str; 1];
                scope 43 {
                    debug sort_db => _425;
                    let _441: u32;
                    scope 45 {
                        debug chain_id => const _;
                        let _442: blockstack_lib::chainstate::stacks::db::StacksChainState;
                        scope 46 {
                            debug chain_state => _442;
                            let _448: blockstack_lib::chainstate::burn::BlockSnapshot;
                            scope 47 {
                                debug chain_tip => _448;
                                let _453: time::Instant;
                                scope 48 {
                                    debug start => _453;
                                    let _454: blockstack_lib::net::db::LocalPeer;
                                    scope 49 {
                                        debug local_peer => _454;
                                        let _459: std::vec::Vec<(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)>;
                                        let _460: blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionDBTxContext, blockstack_lib::types::chainstate::SortitionId>;
                                        scope 50 {
                                            debug header_hashes => _459;
                                            let _477: time::Instant;
                                            let mut _1879: &[&str; 2];
                                            scope 52 {
                                                debug start => _477;
                                                let mut _478: u128;
                                                scope 53 {
                                                    debug total_load_headers => _478;
                                                    let mut _483: std::slice::Iter<'_, (blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>)>;
                                                    let mut _1877: &[&str; 1];
                                                    let mut _1878: &[&str; 3];
                                                    scope 54 {
                                                        debug iter => _483;
                                                        let _487: &blockstack_lib::chainstate::burn::ConsensusHash;
                                                        let _488: &std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>;
                                                        scope 55 {
                                                            debug consensus_hash => _487;
                                                            debug block_hash_opt => _488;
                                                            let _489: &blockstack_lib::types::chainstate::BlockHeaderHash;
                                                            let _491: &blockstack_lib::types::chainstate::BlockHeaderHash;
                                                            scope 56 {
                                                                debug block_hash => _489;
                                                                let _492: blockstack_lib::types::chainstate::StacksBlockId;
                                                                scope 58 {
                                                                    debug index_block_hash => _492;
                                                                    let _495: u128;
                                                                    scope 59 {
                                                                        debug start_load_header => _495;
                                                                        let _496: std::option::Option<(blockstack_lib::types::chainstate::StacksBlockHeader, blockstack_lib::chainstate::burn::ConsensusHash)>;
                                                                        let _497: blockstack_lib::chainstate::stacks::db::blocks::StagingBlock;
                                                                        let _505: blockstack_lib::chainstate::stacks::db::blocks::StagingBlock;
                                                                        let _507: slog::Level;
                                                                        scope 60 {
                                                                            debug parent_header_opt => _496;
                                                                            let _568: u128;
                                                                            scope 66 {
                                                                                debug end_load_header => _568;
                                                                                scope 67 {
                                                                                    debug parent_header => _572;
                                                                                    debug parent_consensus_hash => _573;
                                                                                    let _572: blockstack_lib::types::chainstate::StacksBlockHeader;
                                                                                    let _573: blockstack_lib::chainstate::burn::ConsensusHash;
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 61 {
                                                                            debug child_block_info => _497;
                                                                            let _535: std::option::Option<blockstack_lib::types::chainstate::StacksBlockHeader>;
                                                                            let _539: slog::Level;
                                                                            scope 64 {
                                                                                debug header_opt => _535;
                                                                            }
                                                                            scope 65 {
                                                                                debug cur_level => _539;
                                                                                let mut _1873: &();
                                                                                let mut _1874: &[&str; 4];
                                                                                let mut _1875: &slog::Level;
                                                                                let mut _1876: &slog::Level;
                                                                            }
                                                                        }
                                                                        scope 62 {
                                                                            debug hdr => _505;
                                                                        }
                                                                        scope 63 {
                                                                            debug cur_level => _507;
                                                                            let mut _1869: &();
                                                                            let mut _1870: &[&str; 1];
                                                                            let mut _1871: &slog::Level;
                                                                            let mut _1872: &slog::Level;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 57 {
                                                                debug b => _491;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 51 {
                                            debug ic => _460;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                scope 44 {
                    debug res => _432;
                }
            }
            scope 42 {
                debug res => _414;
            }
        }
        scope 40 {
            debug res => _402;
        }
        scope 68 {
            debug start_height => _616;
            let _622: u64;
            scope 69 {
                debug end_height => _622;
                let _627: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
                let _635: std::string::String;
                let mut _1887: &[&str; 1];
                scope 70 {
                    debug sort_db => _627;
                    let _644: blockstack_lib::types::chainstate::SortitionId;
                    scope 72 {
                        debug chain_tip => _644;
                        let _649: blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionHandleContext, blockstack_lib::types::chainstate::SortitionId>;
                        scope 73 {
                            debug sort_conn => _649;
                            let mut _652: std::vec::Vec<(u64, bool, u32)>;
                            scope 74 {
                                debug results => _652;
                                let mut _657: std::ops::Range<u64>;
                                let mut _699: std::slice::Iter<'_, (u64, bool, u32)>;
                                let mut _1886: &[&str; 1];
                                scope 75 {
                                    debug iter => _657;
                                    let _661: u64;
                                    scope 76 {
                                        debug eval_height => _661;
                                        let _670: blockstack_lib::chainstate::burn::BlockSnapshot;
                                        let mut _1884: &[&str; 1];
                                        scope 77 {
                                            debug eval_tip => _670;
                                            let _677: blockstack_lib::burnchains::PoxConstants;
                                            scope 78 {
                                                debug pox_consts => _677;
                                                let _678: std::result::Result<(blockstack_lib::chainstate::burn::ConsensusHash, blockstack_lib::types::chainstate::BlockHeaderHash, u32), u32>;
                                                scope 79 {
                                                    debug result => _678;
                                                    let _686: u32;
                                                    let _689: u32;
                                                    scope 80 {
                                                        debug confirmed_by => _686;
                                                    }
                                                    scope 81 {
                                                        debug confirmed_by => _689;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 82 {
                                    debug iter => _699;
                                    let _703: &(u64, bool, u32);
                                    scope 83 {
                                        debug r => _703;
                                        let mut _1885: &[&str; 4];
                                    }
                                }
                            }
                        }
                    }
                }
                scope 71 {
                    debug res => _635;
                }
            }
        }
        scope 84 {
            debug start => _736;
            let _737: std::string::String;
            let _738: std::string::String;
            let mut _1894: &[&str; 2];
            scope 85 {
                debug sort_db_path => _737;
                let _749: std::string::String;
                let _750: std::string::String;
                let mut _1893: &[&str; 2];
                scope 87 {
                    debug chain_state_path => _749;
                    let mut _761: u64;
                    scope 89 {
                        debug min_fee => _761;
                        let mut _762: u64;
                        scope 90 {
                            debug max_time => _762;
                            let _781: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
                            let _788: std::string::String;
                            let mut _1892: &[&str; 1];
                            scope 91 {
                                debug sort_db => _781;
                                let _797: u32;
                                scope 93 {
                                    debug chain_id => const _;
                                    let _798: blockstack_lib::chainstate::stacks::db::StacksChainState;
                                    scope 94 {
                                        debug chain_state => _798;
                                        let _804: blockstack_lib::chainstate::burn::BlockSnapshot;
                                        scope 95 {
                                            debug chain_tip => _804;
                                            let mut _809: blockstack_lib::core::MemPoolDB;
                                            scope 96 {
                                                debug mempool_db => _809;
                                                let _814: blockstack_lib::chainstate::stacks::db::blocks::StagingBlock;
                                                scope 97 {
                                                    debug stacks_block => _814;
                                                    let _819: blockstack_lib::chainstate::stacks::db::StacksHeaderInfo;
                                                    scope 98 {
                                                        debug parent_header => _819;
                                                        let _828: blockstack_lib::util::secp256k1::Secp256k1PrivateKey;
                                                        scope 99 {
                                                            debug sk => _828;
                                                            let mut _829: blockstack_lib::chainstate::stacks::TransactionAuth;
                                                            scope 100 {
                                                                debug tx_auth => _829;
                                                                let mut _834: blockstack_lib::chainstate::stacks::StacksTransaction;
                                                                scope 101 {
                                                                    debug coinbase_tx => _834;
                                                                    let mut _841: blockstack_lib::chainstate::stacks::StacksTransactionSigner;
                                                                    scope 102 {
                                                                        debug tx_signer => _841;
                                                                        let _847: blockstack_lib::chainstate::stacks::StacksTransaction;
                                                                        scope 103 {
                                                                            debug coinbase_tx => _847;
                                                                            let mut _850: blockstack_lib::chainstate::stacks::miner::BlockBuilderSettings;
                                                                            let mut _1891: &blockstack_lib::vm::costs::ExecutionCost;
                                                                            scope 104 {
                                                                                debug settings => _850;
                                                                                let _854: std::result::Result<(blockstack_lib::chainstate::stacks::StacksBlock, blockstack_lib::vm::costs::ExecutionCost, u64), blockstack_lib::chainstate::stacks::Error>;
                                                                                scope 105 {
                                                                                    debug result => _854;
                                                                                    let _868: u128;
                                                                                    scope 106 {
                                                                                        debug stop => _868;
                                                                                        let mut _1890: &[&str; 9];
                                                                                        scope 107 {
                                                                                            debug block => _909;
                                                                                            debug execution_cost => _910;
                                                                                            debug size => _911;
                                                                                            let _909: blockstack_lib::chainstate::stacks::StacksBlock;
                                                                                            let _910: blockstack_lib::vm::costs::ExecutionCost;
                                                                                            let _911: u64;
                                                                                            let mut _912: u64;
                                                                                            scope 108 {
                                                                                                debug total_fees => _912;
                                                                                                let mut _917: std::slice::Iter<'_, blockstack_lib::chainstate::stacks::StacksTransaction>;
                                                                                                let mut _1889: &[&str; 5];
                                                                                                scope 109 {
                                                                                                    debug iter => _917;
                                                                                                    let _921: &blockstack_lib::chainstate::stacks::StacksTransaction;
                                                                                                    scope 110 {
                                                                                                        debug tx => _921;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 92 {
                                debug res => _788;
                            }
                        }
                    }
                }
                scope 88 {
                    debug res => _750;
                }
            }
            scope 86 {
                debug res => _738;
            }
        }
        scope 111 {
            debug mblock_path => _958;
            let _961: std::vec::Vec<u8>;
            let _967: std::string::String;
            let mut _1897: &[&str; 1];
            scope 112 {
                debug mblock_data => _961;
                let mut _975: std::io::Cursor<&std::vec::Vec<u8>>;
                scope 114 {
                    debug cursor => _975;
                    let mut _977: blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>;
                    scope 115 {
                        debug debug_cursor => _977;
                        let _979: std::vec::Vec<blockstack_lib::chainstate::stacks::StacksMicroblock>;
                        scope 116 {
                            debug mblocks => _979;
                            let mut _1896: &[&str; 2];
                            scope 117 {
                            }
                        }
                    }
                }
            }
            scope 113 {
                debug res => _967;
            }
        }
        scope 118 {
            debug marf_path => _1022;
            debug db_path => _1023;
            debug arg_next => _1024;
            scope 122 {
                debug marf_tip => _1056;
                scope 123 {
                    debug marf_key => _1058;
                    let _1090: blockstack_lib::types::chainstate::StacksBlockId;
                    let mut _1900: &[&str; 2];
                    let mut _1901: &[&str; 2];
                    scope 124 {
                        debug marf_bhh => _1090;
                        let mut _1094: blockstack_lib::chainstate::stacks::index::marf::MARF<blockstack_lib::types::chainstate::StacksBlockId>;
                        scope 125 {
                            debug marf => _1094;
                            let _1099: std::option::Option<blockstack_lib::types::chainstate::MARFValue>;
                            scope 126 {
                                debug value_opt => _1099;
                                let mut _1902: &[&str; 1];
                                scope 127 {
                                    debug value => _1106;
                                    let _1106: blockstack_lib::types::chainstate::MARFValue;
                                    let _1107: rusqlite::Connection;
                                    scope 128 {
                                        debug conn => _1107;
                                        let _1111: &[&dyn rusqlite::ToSql];
                                        scope 129 {
                                            debug args => _1111;
                                            let _1118: std::result::Result<std::string::String, rusqlite::Error>;
                                            scope 130 {
                                                debug res => _1118;
                                                let _1121: std::string::String;
                                                let _1126: std::string::String;
                                                let mut _1904: &[&str; 1];
                                                scope 131 {
                                                    debug row => _1121;
                                                    let mut _1903: &[&str; 2];
                                                }
                                                scope 132 {
                                                    debug res => _1126;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 119 {
            debug headers_dir => _1028;
            let _1032: std::string::String;
            let _1041: std::string::String;
            let mut _1905: &[&str; 2];
            let mut _1906: &[&str; 2];
            scope 120 {
                debug res => _1032;
            }
            scope 121 {
                debug res => _1041;
            }
        }
        scope 133 {
            debug program => _1163;
            let _1184: blockstack_lib::vm::Value;
            let _1196: blockstack_lib::vm::errors::Error;
            let mut _1909: &[&str; 1];
            scope 135 {
                debug result => _1184;
                let mut _1910: &[&str; 2];
            }
            scope 136 {
                debug error => _1196;
                let mut _1908: &[&str; 1];
            }
        }
        scope 134 {
            debug res => _1170;
        }
        scope 137 {
            debug path => _1208;
            let _1210: blockstack_lib::types::chainstate::BlockHeaderHash;
            scope 138 {
                debug tip => _1210;
                let _1215: blockstack_lib::chainstate::burn::ConsensusHash;
                scope 139 {
                    debug consensustip => _1215;
                    let _1220: blockstack_lib::types::chainstate::StacksBlockId;
                    scope 140 {
                        debug itip => _1220;
                        scope 141 {
                            debug key => _1223;
                            let mut _1225: blockstack_lib::chainstate::stacks::index::marf::MARF<blockstack_lib::types::chainstate::StacksBlockId>;
                            scope 142 {
                                debug marf => _1225;
                                let _1228: std::option::Option<blockstack_lib::types::chainstate::MARFValue>;
                                scope 143 {
                                    debug res => _1228;
                                    let _1235: blockstack_lib::types::chainstate::MARFValue;
                                    let mut _1912: &[&str; 1];
                                    scope 144 {
                                        debug x => _1235;
                                        let mut _1913: &[&str; 2];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 145 {
            debug path => _1250;
            let _1252: blockstack_lib::types::chainstate::BlockHeaderHash;
            scope 146 {
                debug tip => _1252;
                let _1257: blockstack_lib::types::chainstate::BurnchainHeaderHash;
                scope 147 {
                    debug burntip => _1257;
                    let _1262: rusqlite::Connection;
                    scope 148 {
                        debug conn => _1262;
                        let mut _1264: blockstack_lib::types::chainstate::BurnchainHeaderHash;
                        scope 149 {
                            debug cur_burn => _1264;
                            let mut _1266: blockstack_lib::types::chainstate::BlockHeaderHash;
                            scope 150 {
                                debug cur_tip => _1266;
                                let _1278: blockstack_lib::types::chainstate::BurnchainHeaderHash;
                                let _1279: blockstack_lib::types::chainstate::BlockHeaderHash;
                                let _1290: (blockstack_lib::types::chainstate::BurnchainHeaderHash, blockstack_lib::types::chainstate::BlockHeaderHash);
                                let _1291: rusqlite::Error;
                                let mut _1915: &[&str; 3];
                                scope 151 {
                                    debug next_burn => _1278;
                                    debug next_tip => _1279;
                                }
                                scope 152 {
                                    debug x => _1290;
                                }
                                scope 153 {
                                    debug e => _1291;
                                    let _1293: rusqlite::Error;
                                    scope 154 {
                                        debug e => _1293;
                                        let mut _1914: &[&str; 2];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 155 {
            debug res => _1333;
        }
        scope 156 {
            debug path => _1351;
            scope 157 {
                debug sort_path => _1353;
                let mut _1355: blockstack_lib::chainstate::stacks::db::StacksChainState;
                scope 158 {
                    debug chainstate => _1355;
                    let mut _1359: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
                    scope 159 {
                        debug sortition_db => _1359;
                        let _1362: blockstack_lib::types::chainstate::SortitionId;
                        scope 160 {
                            debug sortition_tip => _1362;
                            let mut _1367: blockstack_lib::util::db::IndexDBTx<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionHandleContext, blockstack_lib::types::chainstate::SortitionId>;
                            scope 161 {
                                debug tx => _1367;
                            }
                        }
                    }
                }
            }
        }
        scope 162 {
            debug old_chainstate_path => _1393;
            scope 163 {
                debug old_sort_path => _1395;
                let _1397: &std::string::String;
                scope 164 {
                    debug old_burnchaindb_path => _1397;
                    scope 165 {
                        debug new_chainstate_path => _1400;
                        let _1402: &std::string::String;
                        scope 166 {
                            debug burnchain_db_path => _1402;
                            let _1405: blockstack_lib::chainstate::stacks::db::StacksChainState;
                            scope 167 {
                                debug old_chainstate => _1405;
                                let _1409: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
                                scope 168 {
                                    debug old_sortition_db => _1409;
                                    let _1412: std::vec::Vec<(blockstack_lib::vm::types::PrincipalData, u64)>;
                                    let mut _1995: *const ();
                                    let mut _1996: usize;
                                    let mut _1997: usize;
                                    let mut _1998: usize;
                                    let mut _1999: usize;
                                    let mut _2000: bool;
                                    scope 169 {
                                        debug initial_balances => _1412;
                                        let _1443: blockstack_lib::vm::costs::ExecutionCost;
                                        scope 171 {
                                            debug argon_block_limit => _1443;
                                            let _1444: blockstack_lib::burnchains::Burnchain;
                                            scope 172 {
                                                debug burnchain => _1444;
                                                let _1447: u64;
                                                scope 173 {
                                                    debug first_burnchain_block_height => _1447;
                                                    let _1448: blockstack_lib::types::chainstate::BurnchainHeaderHash;
                                                    scope 174 {
                                                        debug first_burnchain_block_hash => _1448;
                                                        let mut _1449: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
                                                        scope 175 {
                                                            debug new_sortition_db => _1449;
                                                            let _1455: blockstack_lib::burnchains::db::BurnchainDB;
                                                            scope 176 {
                                                                debug old_burnchaindb => _1455;
                                                                let mut _1461: blockstack_lib::chainstate::stacks::db::ChainStateBootData;
                                                                scope 177 {
                                                                    debug boot_data => _1461;
                                                                    let mut _1471: blockstack_lib::chainstate::stacks::db::StacksChainState;
                                                                    scope 178 {
                                                                        debug new_chainstate => _1471;
                                                                        let _1477: std::vec::Vec<blockstack_lib::chainstate::burn::BlockSnapshot>;
                                                                        scope 179 {
                                                                            debug all_snapshots => _1477;
                                                                            let _1480: std::vec::Vec<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
                                                                            scope 180 {
                                                                                debug all_stacks_blocks => _1480;
                                                                                let mut _1485: std::vec::Vec<(blockstack_lib::types::chainstate::StacksBlockId, u64)>;
                                                                                scope 181 {
                                                                                    debug stacks_blocks_arrival_indexes => _1485;
                                                                                    let mut _1490: std::slice::Iter<'_, blockstack_lib::chainstate::burn::BlockSnapshot>;
                                                                                    let _1507: std::vec::Vec<blockstack_lib::types::chainstate::StacksBlockId>;
                                                                                    scope 182 {
                                                                                        debug iter => _1490;
                                                                                        let _1494: &blockstack_lib::chainstate::burn::BlockSnapshot;
                                                                                        scope 183 {
                                                                                            debug snapshot => _1494;
                                                                                            let _1497: blockstack_lib::types::chainstate::StacksBlockId;
                                                                                            scope 184 {
                                                                                                debug index_hash => _1497;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 185 {
                                                                                        debug stacks_blocks_arrival_order => _1507;
                                                                                        let mut _1511: std::collections::HashMap<blockstack_lib::types::chainstate::StacksBlockId, blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
                                                                                        scope 186 {
                                                                                            debug stacks_blocks_available => _1511;
                                                                                            let _1512: usize;
                                                                                            scope 187 {
                                                                                                debug num_staging_blocks => _1512;
                                                                                                let mut _1517: std::vec::IntoIter<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>;
                                                                                                let mut _1554: std::collections::HashSet<blockstack_lib::types::chainstate::StacksBlockId>;
                                                                                                let mut _1930: &[&str; 3];
                                                                                                scope 188 {
                                                                                                    debug iter => _1517;
                                                                                                    let _1521: blockstack_lib::chainstate::stacks::db::blocks::StagingBlock;
                                                                                                    scope 189 {
                                                                                                        debug staging_block => _1521;
                                                                                                        let _1523: blockstack_lib::types::chainstate::StacksBlockId;
                                                                                                        scope 190 {
                                                                                                            debug index_hash => _1523;
                                                                                                            let mut _1920: &[&str; 3];
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 191 {
                                                                                                    debug known_stacks_blocks => _1554;
                                                                                                    let mut _1555: usize;
                                                                                                    scope 192 {
                                                                                                        debug next_arrival => _1555;
                                                                                                        let _1556: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
                                                                                                        scope 193 {
                                                                                                            debug p2p_new_sortition_db => _1556;
                                                                                                            let mut _1562: blockstack_lib::chainstate::stacks::db::StacksChainState;
                                                                                                            scope 194 {
                                                                                                                debug p2p_chainstate => _1562;
                                                                                                                scope 195 {
                                                                                                                    let mut _1572: std::vec::IntoIter<blockstack_lib::chainstate::burn::BlockSnapshot>;
                                                                                                                    let mut _1929: &[&str; 3];
                                                                                                                    scope 196 {
                                                                                                                        debug iter => _1572;
                                                                                                                        let _1576: blockstack_lib::chainstate::burn::BlockSnapshot;
                                                                                                                        scope 197 {
                                                                                                                            debug old_snapshot => _1576;
                                                                                                                            let _1577: blockstack_lib::burnchains::BurnchainBlockHeader;
                                                                                                                            let _1578: std::vec::Vec<blockstack_lib::chainstate::burn::operations::BlockstackOperationType>;
                                                                                                                            scope 198 {
                                                                                                                                debug burn_block_header => _1577;
                                                                                                                                debug blockstack_txs => _1578;
                                                                                                                                let _1587: blockstack_lib::chainstate::burn::BlockSnapshot;
                                                                                                                                let _1589: blockstack_lib::chainstate::burn::BlockSnapshot;
                                                                                                                                scope 199 {
                                                                                                                                    debug new_snapshot => _1587;
                                                                                                                                    let _1603: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
                                                                                                                                    let _1604: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
                                                                                                                                    let _1612: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
                                                                                                                                    let _1613: &blockstack_lib::types::chainstate::BurnchainHeaderHash;
                                                                                                                                    let _1621: &bool;
                                                                                                                                    let _1622: &bool;
                                                                                                                                    let _1632: &blockstack_lib::types::chainstate::BlockHeaderHash;
                                                                                                                                    let _1633: &blockstack_lib::types::chainstate::BlockHeaderHash;
                                                                                                                                    let _1641: &blockstack_lib::chainstate::burn::ConsensusHash;
                                                                                                                                    let _1642: &blockstack_lib::chainstate::burn::ConsensusHash;
                                                                                                                                    let _1650: &blockstack_lib::chainstate::burn::SortitionHash;
                                                                                                                                    let _1651: &blockstack_lib::chainstate::burn::SortitionHash;
                                                                                                                                    let _1659: &u64;
                                                                                                                                    let _1660: &u64;
                                                                                                                                    let _1670: &u64;
                                                                                                                                    let _1671: &u64;
                                                                                                                                    let _1681: &blockstack_lib::chainstate::burn::OpsHash;
                                                                                                                                    let _1682: &blockstack_lib::chainstate::burn::OpsHash;
                                                                                                                                    let mut _1688: blockstack_lib::types::chainstate::StacksBlockId;
                                                                                                                                    let mut _1793: std::vec::Vec<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>;
                                                                                                                                    scope 201 {
                                                                                                                                        debug left_val => _1603;
                                                                                                                                        debug right_val => _1604;
                                                                                                                                        let _1606: core::panicking::AssertKind;
                                                                                                                                        scope 202 {
                                                                                                                                            debug kind => _1606;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 203 {
                                                                                                                                        debug left_val => _1612;
                                                                                                                                        debug right_val => _1613;
                                                                                                                                        let _1615: core::panicking::AssertKind;
                                                                                                                                        scope 204 {
                                                                                                                                            debug kind => _1615;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 205 {
                                                                                                                                        debug left_val => _1621;
                                                                                                                                        debug right_val => _1622;
                                                                                                                                        let _1626: core::panicking::AssertKind;
                                                                                                                                        scope 206 {
                                                                                                                                            debug kind => _1626;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 207 {
                                                                                                                                        debug left_val => _1632;
                                                                                                                                        debug right_val => _1633;
                                                                                                                                        let _1635: core::panicking::AssertKind;
                                                                                                                                        scope 208 {
                                                                                                                                            debug kind => _1635;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 209 {
                                                                                                                                        debug left_val => _1641;
                                                                                                                                        debug right_val => _1642;
                                                                                                                                        let _1644: core::panicking::AssertKind;
                                                                                                                                        scope 210 {
                                                                                                                                            debug kind => _1644;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 211 {
                                                                                                                                        debug left_val => _1650;
                                                                                                                                        debug right_val => _1651;
                                                                                                                                        let _1653: core::panicking::AssertKind;
                                                                                                                                        scope 212 {
                                                                                                                                            debug kind => _1653;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 213 {
                                                                                                                                        debug left_val => _1659;
                                                                                                                                        debug right_val => _1660;
                                                                                                                                        let _1664: core::panicking::AssertKind;
                                                                                                                                        scope 214 {
                                                                                                                                            debug kind => _1664;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 215 {
                                                                                                                                        debug left_val => _1670;
                                                                                                                                        debug right_val => _1671;
                                                                                                                                        let _1675: core::panicking::AssertKind;
                                                                                                                                        scope 216 {
                                                                                                                                            debug kind => _1675;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 217 {
                                                                                                                                        debug left_val => _1681;
                                                                                                                                        debug right_val => _1682;
                                                                                                                                        let _1684: core::panicking::AssertKind;
                                                                                                                                        scope 218 {
                                                                                                                                            debug kind => _1684;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 219 {
                                                                                                                                        debug stacks_block_id => _1688;
                                                                                                                                        let _1758: slog::Level;
                                                                                                                                        scope 220 {
                                                                                                                                            let _1715: std::option::Option<blockstack_lib::chainstate::stacks::StacksBlock>;
                                                                                                                                            scope 221 {
                                                                                                                                                debug stacks_block_opt => _1715;
                                                                                                                                                let _1731: slog::Level;
                                                                                                                                                scope 222 {
                                                                                                                                                    debug stacks_block => _1721;
                                                                                                                                                    let _1721: blockstack_lib::chainstate::stacks::StacksBlock;
                                                                                                                                                    let _1722: blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionDBTxContext, blockstack_lib::types::chainstate::SortitionId>;
                                                                                                                                                    scope 223 {
                                                                                                                                                        debug ic => _1722;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 224 {
                                                                                                                                                    debug cur_level => _1731;
                                                                                                                                                    let mut _1925: &();
                                                                                                                                                    let mut _1926: &[&str; 2];
                                                                                                                                                    let mut _1927: &slog::Level;
                                                                                                                                                    let mut _1928: &slog::Level;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 225 {
                                                                                                                                            debug cur_level => _1758;
                                                                                                                                            let mut _1921: &();
                                                                                                                                            let mut _1922: &[&str; 2];
                                                                                                                                            let mut _1923: &slog::Level;
                                                                                                                                            let mut _1924: &slog::Level;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 226 {
                                                                                                                                        debug epoch_receipts => _1793;
                                                                                                                                        let _1794: blockstack_lib::types::chainstate::SortitionId;
                                                                                                                                        scope 227 {
                                                                                                                                            debug sortition_tip => _1794;
                                                                                                                                            let _1799: blockstack_lib::util::db::IndexDBTx<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionHandleContext, blockstack_lib::types::chainstate::SortitionId>;
                                                                                                                                            scope 228 {
                                                                                                                                                debug sortition_tx => _1799;
                                                                                                                                                let _1803: std::vec::Vec<(std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)>;
                                                                                                                                                scope 229 {
                                                                                                                                                    debug receipts => _1803;
                                                                                                                                                    let mut _1811: std::vec::IntoIter<(std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)>;
                                                                                                                                                    scope 230 {
                                                                                                                                                        debug iter => _1811;
                                                                                                                                                        let _1815: std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>;
                                                                                                                                                        scope 231 {
                                                                                                                                                            debug epoch_receipt_opt => _1815;
                                                                                                                                                            scope 232 {
                                                                                                                                                                debug epoch_receipt => _1817;
                                                                                                                                                                let _1817: blockstack_lib::chainstate::stacks::db::StacksEpochReceipt;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 200 {
                                                                                                                                    debug sortition_tip => _1589;
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 170 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1981 = const false;
        _1980 = const false;
        _1979 = const false;
        _1978 = const false;
        _1977 = const false;
        _1976 = const false;
        _1974 = const false;
        _1973 = const false;
        _1972 = const false;
        _1960 = const false;
        _1971 = const false;
        _1970 = const false;
        _1969 = const false;
        _1968 = const false;
        _1961 = const false;
        _1967 = const false;
        _1966 = const false;
        _1964 = const false;
        _1965 = const false;
        _1975 = const false;
        _1962 = const false;
        _1963 = const false;
        _2 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<std::string::String>>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &_1;
        _4 = Vec::<std::string::String>::len(move _5) -> [return: bb3, unwind: bb1086];
    }

    bb3: {
        _3 = Lt(move _4, const 2_usize);
        switchInt(move _3) -> [0: bb9, otherwise: bb4];
    }

    bb4: {
        _1845 = const _;
        _8 = _1845 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = <Vec<std::string::String> as Index<usize>>::index(move _14, const 0_usize) -> [return: bb5, unwind: bb1086];
    }

    bb5: {
        _12 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_13) -> [return: bb6, unwind: bb1086];
    }

    bb6: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb7, unwind: bb1086];
    }

    bb7: {
        _6 = _eprint(move _7) -> [return: bb8, unwind: bb1086];
    }

    bb8: {
        _15 = exit(const 1_i32) -> bb1086;
    }

    bb9: {
        _18 = &_1;
        _17 = <Vec<std::string::String> as Index<usize>>::index(move _18, const 1_usize) -> [return: bb10, unwind: bb1086];
    }

    bb10: {
        _1949 = const _;
        _16 = <std::string::String as PartialEq<&str>>::eq(_17, _1949) -> [return: bb11, unwind: bb1086];
    }

    bb11: {
        switchInt(move _16) -> [0: bb22, otherwise: bb12];
    }

    bb12: {
        _1846 = const _;
        _21 = _1846 as &[&str] (PointerCoercion(Unsize));
        _30 = Option::<&str>::Some(const "blockstack-core");
        _33 = &_1;
        _32 = <Vec<std::string::String> as Index<usize>>::index(move _33, const 0_usize) -> [return: bb13, unwind: bb1086];
    }

    bb13: {
        _31 = <std::string::String as Deref>::deref(_32) -> [return: bb14, unwind: bb1086];
    }

    bb14: {
        _29 = Option::<&str>::unwrap_or(move _30, _31) -> [return: bb15, unwind: bb1086];
    }

    bb15: {
        _35 = Option::<&str>::Some(const "0.0.1");
        _36 = const "0.0.0.0";
        _34 = Option::<&str>::unwrap_or(move _35, _36) -> [return: bb16, unwind: bb1086];
    }

    bb16: {
        _28 = version_string(_29, _34) -> [return: bb17, unwind: bb1086];
    }

    bb17: {
        _27 = &_28;
        _26 = &_27;
        _25 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_26) -> [return: bb18, unwind: bb1085];
    }

    bb18: {
        _24 = [move _25];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb19, unwind: bb1085];
    }

    bb19: {
        _19 = _print(move _20) -> [return: bb20, unwind: bb1085];
    }

    bb20: {
        drop(_28) -> [return: bb21, unwind: bb1086];
    }

    bb21: {
        _37 = exit(const 0_i32) -> bb1086;
    }

    bb22: {
        _40 = &_1;
        _39 = <Vec<std::string::String> as Index<usize>>::index(move _40, const 1_usize) -> [return: bb23, unwind: bb1086];
    }

    bb23: {
        _1948 = const _;
        _38 = <std::string::String as PartialEq<&str>>::eq(_39, _1948) -> [return: bb24, unwind: bb1086];
    }

    bb24: {
        switchInt(move _38) -> [0: bb81, otherwise: bb25];
    }

    bb25: {
        _43 = &_1;
        _42 = Vec::<std::string::String>::len(move _43) -> [return: bb26, unwind: bb1086];
    }

    bb26: {
        _41 = Lt(move _42, const 4_usize);
        switchInt(move _41) -> [0: bb32, otherwise: bb27];
    }

    bb27: {
        _1847 = const _;
        _46 = _1847 as &[&str] (PointerCoercion(Unsize));
        _52 = &_1;
        _51 = <Vec<std::string::String> as Index<usize>>::index(move _52, const 0_usize) -> [return: bb28, unwind: bb1086];
    }

    bb28: {
        _50 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_51) -> [return: bb29, unwind: bb1086];
    }

    bb29: {
        _49 = [move _50];
        _48 = &_49;
        _47 = _48 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _45 = Arguments::<'_>::new_v1(move _46, move _47) -> [return: bb30, unwind: bb1086];
    }

    bb30: {
        _44 = _eprint(move _45) -> [return: bb31, unwind: bb1086];
    }

    bb31: {
        _53 = exit(const 1_i32) -> bb1086;
    }

    bb32: {
        _54 = const false;
        _55 = const false;
        _56 = const 0_usize;
        _60 = &_1;
        _59 = Vec::<std::string::String>::len(move _60) -> [return: bb33, unwind: bb1086];
    }

    bb33: {
        _58 = std::ops::Range::<usize> { start: const 0_usize, end: move _59 };
        _57 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _58) -> [return: bb34, unwind: bb1086];
    }

    bb34: {
        _61 = move _57;
        goto -> bb35;
    }

    bb35: {
        _63 = &mut _61;
        _62 = <std::ops::Range<usize> as Iterator>::next(_63) -> [return: bb36, unwind: bb1086];
    }

    bb36: {
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb39, 1: bb37, otherwise: bb38];
    }

    bb37: {
        _65 = ((_62 as Some).0: usize);
        _68 = &_1;
        _67 = <Vec<std::string::String> as Index<usize>>::index(move _68, _65) -> [return: bb40, unwind: bb1086];
    }

    bb38: {
        unreachable;
    }

    bb39: {
        _72 = _55;
        switchInt(move _72) -> [0: bb53, otherwise: bb47];
    }

    bb40: {
        _1849 = const _;
        _66 = <std::string::String as PartialEq<&str>>::eq(_67, _1849) -> [return: bb41, unwind: bb1086];
    }

    bb41: {
        switchInt(move _66) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _54 = const true;
        _56 = _65;
        goto -> bb35;
    }

    bb43: {
        _71 = &_1;
        _70 = <Vec<std::string::String> as Index<usize>>::index(move _71, _65) -> [return: bb44, unwind: bb1086];
    }

    bb44: {
        _1848 = const _;
        _69 = <std::string::String as PartialEq<&str>>::eq(_70, _1848) -> [return: bb45, unwind: bb1086];
    }

    bb45: {
        switchInt(move _69) -> [0: bb35, otherwise: bb46];
    }

    bb46: {
        _55 = const true;
        _56 = _65;
        goto -> bb35;
    }

    bb47: {
        _73 = _54;
        switchInt(move _73) -> [0: bb53, otherwise: bb48];
    }

    bb48: {
        _1850 = const _;
        _76 = _1850 as &[&str] (PointerCoercion(Unsize));
        _82 = &_1;
        _81 = <Vec<std::string::String> as Index<usize>>::index(move _82, const 0_usize) -> [return: bb49, unwind: bb1086];
    }

    bb49: {
        _80 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_81) -> [return: bb50, unwind: bb1086];
    }

    bb50: {
        _79 = [move _80];
        _78 = &_79;
        _77 = _78 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _75 = Arguments::<'_>::new_v1(move _76, move _77) -> [return: bb51, unwind: bb1086];
    }

    bb51: {
        _74 = _eprint(move _75) -> [return: bb52, unwind: bb1086];
    }

    bb52: {
        _83 = exit(const 1_i32) -> bb1086;
    }

    bb53: {
        _85 = _56;
        _84 = Gt(move _85, const 0_usize);
        switchInt(move _84) -> [0: bb56, otherwise: bb54];
    }

    bb54: {
        _87 = &mut _1;
        _88 = _56;
        _86 = Vec::<std::string::String>::remove(move _87, move _88) -> [return: bb55, unwind: bb1086];
    }

    bb55: {
        drop(_86) -> [return: bb56, unwind: bb1086];
    }

    bb56: {
        _90 = _54;
        switchInt(move _90) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _89 = blockstack_lib::burnchains::bitcoin::BitcoinNetworkType::Testnet;
        goto -> bb61;
    }

    bb58: {
        _91 = _55;
        switchInt(move _91) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _89 = blockstack_lib::burnchains::bitcoin::BitcoinNetworkType::Regtest;
        goto -> bb61;
    }

    bb60: {
        _89 = blockstack_lib::burnchains::bitcoin::BitcoinNetworkType::Mainnet;
        goto -> bb61;
    }

    bb61: {
        _96 = &_1;
        _95 = <Vec<std::string::String> as Index<usize>>::index(move _96, const 2_usize) -> [return: bb62, unwind: bb1086];
    }

    bb62: {
        _94 = <std::string::String as Deref>::deref(_95) -> [return: bb63, unwind: bb1086];
    }

    bb63: {
        _93 = core::str::<impl str>::parse::<u64>(_94) -> [return: bb64, unwind: bb1086];
    }

    bb64: {
        _97 = const "Invalid block height";
        _92 = Result::<u64, ParseIntError>::expect(move _93, _97) -> [return: bb65, unwind: bb1086];
    }

    bb65: {
        _99 = &_1;
        _98 = <Vec<std::string::String> as Index<usize>>::index(move _99, const 3_usize) -> [return: bb66, unwind: bb1086];
    }

    bb66: {
        _102 = <std::string::String as Deref>::deref(_98) -> [return: bb67, unwind: bb1086];
    }

    bb67: {
        _103 = Option::<u64>::Some(_92);
        _104 = _89;
        _101 = SpvClient::new(_102, const 0_u64, move _103, move _104, const false, const false) -> [return: bb68, unwind: bb1086];
    }

    bb68: {
        _105 = const "FATAL: could not instantiate SPV client";
        _100 = Result::<SpvClient, blockstack_lib::burnchains::bitcoin::Error>::expect(move _101, _105) -> [return: bb69, unwind: bb1086];
    }

    bb69: {
        _108 = &_100;
        _107 = SpvClient::read_block_header(move _108, _92) -> [return: bb70, unwind: bb1084];
    }

    bb70: {
        _109 = const "FATAL: could not read block header database";
        _106 = Result::<Option<LoneBlockHeader>, blockstack_lib::burnchains::bitcoin::Error>::expect(move _107, _109) -> [return: bb71, unwind: bb1084];
    }

    bb71: {
        _110 = discriminant(_106);
        switchInt(move _110) -> [0: bb72, 1: bb73, otherwise: bb38];
    }

    bb72: {
        _1851 = const _;
        _131 = _1851 as &[&str] (PointerCoercion(Unsize));
        _130 = Arguments::<'_>::new_const(move _131) -> [return: bb79, unwind: bb1084];
    }

    bb73: {
        _111 = move ((_106 as Some).0: blockstack_lib::deps::bitcoin::blockdata::block::LoneBlockHeader);
        _1852 = const _;
        _114 = _1852 as &[&str] (PointerCoercion(Unsize));
        _119 = &_111;
        _118 = core::fmt::rt::Argument::<'_>::new_debug::<LoneBlockHeader>(_119) -> [return: bb74, unwind: bb1084];
    }

    bb74: {
        _117 = [move _118];
        _116 = &_117;
        _115 = _116 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _124 = core::fmt::rt::Alignment::Unknown;
        _125 = core::fmt::rt::Count::Implied;
        _126 = core::fmt::rt::Count::Implied;
        _123 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _124, const 4_u32, move _125, move _126) -> [return: bb75, unwind: bb1084];
    }

    bb75: {
        _122 = [move _123];
        _121 = &_122;
        _120 = _121 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _127 = core::fmt::rt::UnsafeArg::new() -> [return: bb76, unwind: bb1084];
    }

    bb76: {
        _113 = Arguments::<'_>::new_v1_formatted(move _114, move _115, move _120, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb77, unwind: bb1084];
    }

    bb77: {
        _112 = _print(move _113) -> [return: bb78, unwind: bb1084];
    }

    bb78: {
        _128 = exit(const 0_i32) -> bb1084;
    }

    bb79: {
        _129 = _eprint(move _130) -> [return: bb80, unwind: bb1084];
    }

    bb80: {
        _132 = exit(const 1_i32) -> bb1084;
    }

    bb81: {
        _135 = &_1;
        _134 = <Vec<std::string::String> as Index<usize>>::index(move _135, const 1_usize) -> [return: bb82, unwind: bb1086];
    }

    bb82: {
        _1947 = const _;
        _133 = <std::string::String as PartialEq<&str>>::eq(_134, _1947) -> [return: bb83, unwind: bb1086];
    }

    bb83: {
        switchInt(move _133) -> [0: bb119, otherwise: bb84];
    }

    bb84: {
        _138 = &_1;
        _137 = Vec::<std::string::String>::len(move _138) -> [return: bb85, unwind: bb1086];
    }

    bb85: {
        _136 = Lt(move _137, const 3_usize);
        switchInt(move _136) -> [0: bb91, otherwise: bb86];
    }

    bb86: {
        _1853 = const _;
        _141 = _1853 as &[&str] (PointerCoercion(Unsize));
        _147 = &_1;
        _146 = <Vec<std::string::String> as Index<usize>>::index(move _147, const 0_usize) -> [return: bb87, unwind: bb1086];
    }

    bb87: {
        _145 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_146) -> [return: bb88, unwind: bb1086];
    }

    bb88: {
        _144 = [move _145];
        _143 = &_144;
        _142 = _143 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _140 = Arguments::<'_>::new_v1(move _141, move _142) -> [return: bb89, unwind: bb1086];
    }

    bb89: {
        _139 = _eprint(move _140) -> [return: bb90, unwind: bb1086];
    }

    bb90: {
        _148 = exit(const 1_i32) -> bb1086;
    }

    bb91: {
        _150 = &_1;
        _149 = <Vec<std::string::String> as Index<usize>>::index(move _150, const 2_usize) -> [return: bb92, unwind: bb1086];
    }

    bb92: {
        _154 = <std::string::String as Deref>::deref(_149) -> [return: bb93, unwind: bb1086];
    }

    bb93: {
        _153 = hex_bytes(_154) -> [return: bb94, unwind: bb1086];
    }

    bb94: {
        _152 = Result::<Vec<u8>, HexError>::map_err::<(), {closure@src/main.rs:159:22: 159:26}>(move _153, const ZeroSized: {closure@src/main.rs:159:22: 159:26}) -> [return: bb95, unwind: bb1086];
    }

    bb95: {
        _151 = Result::<Vec<u8>, ()>::unwrap(move _152) -> [return: bb96, unwind: bb1086];
    }

    bb96: {
        _156 = &_151;
        _155 = std::io::Cursor::<&Vec<u8>>::new(move _156) -> [return: bb97, unwind: bb1083];
    }

    bb97: {
        _158 = &mut _155;
        _157 = LogReader::<'_, std::io::Cursor<&Vec<u8>>>::from_reader(_158) -> [return: bb98, unwind: bb1083];
    }

    bb98: {
        _162 = &mut _157;
        _161 = <blockstack_lib::chainstate::stacks::StacksTransaction as StacksMessageCodec>::consensus_deserialize::<LogReader<'_, std::io::Cursor<&Vec<u8>>>>(_162) -> [return: bb99, unwind: bb1082];
    }

    bb99: {
        _164 = &_157;
        _163 = {closure@src/main.rs:169:22: 169:25} { debug_cursor: move _164 };
        _160 = Result::<blockstack_lib::chainstate::stacks::StacksTransaction, blockstack_lib::codec::Error>::map_err::<(), {closure@src/main.rs:169:22: 169:25}>(move _161, move _163) -> [return: bb100, unwind: bb1082];
    }

    bb100: {
        _159 = Result::<blockstack_lib::chainstate::stacks::StacksTransaction, ()>::unwrap(move _160) -> [return: bb101, unwind: bb1082];
    }

    bb101: {
        _1856 = const _;
        _167 = _1856 as &[&str] (PointerCoercion(Unsize));
        _174 = &_159;
        _173 = blockstack_lib::chainstate::stacks::transaction::<impl blockstack_lib::chainstate::stacks::StacksTransaction>::verify(move _174) -> [return: bb102, unwind: bb1081];
    }

    bb102: {
        _172 = &_173;
        _171 = core::fmt::rt::Argument::<'_>::new_debug::<Result<(), blockstack_lib::net::Error>>(_172) -> [return: bb103, unwind: bb1080];
    }

    bb103: {
        _170 = [move _171];
        _169 = &_170;
        _168 = _169 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _179 = core::fmt::rt::Alignment::Unknown;
        _180 = core::fmt::rt::Count::Implied;
        _181 = core::fmt::rt::Count::Implied;
        _178 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _179, const 4_u32, move _180, move _181) -> [return: bb104, unwind: bb1080];
    }

    bb104: {
        _177 = [move _178];
        _176 = &_177;
        _175 = _176 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _182 = core::fmt::rt::UnsafeArg::new() -> [return: bb105, unwind: bb1080];
    }

    bb105: {
        _166 = Arguments::<'_>::new_v1_formatted(move _167, move _168, move _175, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb106, unwind: bb1080];
    }

    bb106: {
        _165 = _print(move _166) -> [return: bb107, unwind: bb1080];
    }

    bb107: {
        drop(_173) -> [return: bb108, unwind: bb1081];
    }

    bb108: {
        _1855 = const _;
        _185 = _1855 as &[&str] (PointerCoercion(Unsize));
        _193 = &(_159.2: blockstack_lib::chainstate::stacks::TransactionAuth);
        _192 = auth::<impl blockstack_lib::chainstate::stacks::TransactionAuth>::origin(move _193) -> [return: bb109, unwind: bb1081];
    }

    bb109: {
        _191 = auth::<impl TransactionSpendingCondition>::address_mainnet(_192) -> [return: bb110, unwind: bb1081];
    }

    bb110: {
        _190 = &_191;
        _189 = core::fmt::rt::Argument::<'_>::new_display::<StacksAddress>(_190) -> [return: bb111, unwind: bb1081];
    }

    bb111: {
        _188 = [move _189];
        _187 = &_188;
        _186 = _187 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _184 = Arguments::<'_>::new_v1(move _185, move _186) -> [return: bb112, unwind: bb1081];
    }

    bb112: {
        _183 = _print(move _184) -> [return: bb113, unwind: bb1081];
    }

    bb113: {
        _1854 = const _;
        _196 = _1854 as &[&str] (PointerCoercion(Unsize));
        _202 = &_159;
        _201 = &_202;
        _200 = core::fmt::rt::Argument::<'_>::new_debug::<&blockstack_lib::chainstate::stacks::StacksTransaction>(_201) -> [return: bb114, unwind: bb1081];
    }

    bb114: {
        _199 = [move _200];
        _198 = &_199;
        _197 = _198 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _207 = core::fmt::rt::Alignment::Unknown;
        _208 = core::fmt::rt::Count::Implied;
        _209 = core::fmt::rt::Count::Implied;
        _206 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _207, const 4_u32, move _208, move _209) -> [return: bb115, unwind: bb1081];
    }

    bb115: {
        _205 = [move _206];
        _204 = &_205;
        _203 = _204 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _210 = core::fmt::rt::UnsafeArg::new() -> [return: bb116, unwind: bb1081];
    }

    bb116: {
        _195 = Arguments::<'_>::new_v1_formatted(move _196, move _197, move _203, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb117, unwind: bb1081];
    }

    bb117: {
        _194 = _print(move _195) -> [return: bb118, unwind: bb1081];
    }

    bb118: {
        _211 = exit(const 0_i32) -> bb1081;
    }

    bb119: {
        _214 = &_1;
        _213 = <Vec<std::string::String> as Index<usize>>::index(move _214, const 1_usize) -> [return: bb120, unwind: bb1086];
    }

    bb120: {
        _1946 = const _;
        _212 = <std::string::String as PartialEq<&str>>::eq(_213, _1946) -> [return: bb121, unwind: bb1086];
    }

    bb121: {
        switchInt(move _212) -> [0: bb147, otherwise: bb122];
    }

    bb122: {
        _217 = &_1;
        _216 = Vec::<std::string::String>::len(move _217) -> [return: bb123, unwind: bb1086];
    }

    bb123: {
        _215 = Lt(move _216, const 3_usize);
        switchInt(move _215) -> [0: bb129, otherwise: bb124];
    }

    bb124: {
        _1857 = const _;
        _220 = _1857 as &[&str] (PointerCoercion(Unsize));
        _226 = &_1;
        _225 = <Vec<std::string::String> as Index<usize>>::index(move _226, const 0_usize) -> [return: bb125, unwind: bb1086];
    }

    bb125: {
        _224 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_225) -> [return: bb126, unwind: bb1086];
    }

    bb126: {
        _223 = [move _224];
        _222 = &_223;
        _221 = _222 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _219 = Arguments::<'_>::new_v1(move _220, move _221) -> [return: bb127, unwind: bb1086];
    }

    bb127: {
        _218 = _eprint(move _219) -> [return: bb128, unwind: bb1086];
    }

    bb128: {
        _227 = exit(const 1_i32) -> bb1086;
    }

    bb129: {
        _230 = &_1;
        _229 = <Vec<std::string::String> as Index<usize>>::index(move _230, const 2_usize) -> [return: bb130, unwind: bb1086];
    }

    bb130: {
        _228 = _229;
        _233 = _228;
        _232 = std::fs::read::<&std::string::String>(move _233) -> [return: bb131, unwind: bb1086];
    }

    bb131: {
        _1981 = const true;
        _1859 = const _;
        _239 = _1859 as &[&str] (PointerCoercion(Unsize));
        _244 = &_228;
        _243 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_244) -> [return: bb132, unwind: bb1079];
    }

    bb132: {
        _242 = [move _243];
        _241 = &_242;
        _240 = _241 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _238 = Arguments::<'_>::new_v1(move _239, move _240) -> [return: bb133, unwind: bb1079];
    }

    bb133: {
        _237 = format(move _238) -> [return: bb134, unwind: bb1079];
    }

    bb134: {
        _236 = move _237;
        _235 = &_236;
        _234 = <std::string::String as Deref>::deref(_235) -> [return: bb135, unwind: bb1163];
    }

    bb135: {
        _1981 = const false;
        _231 = Result::<Vec<u8>, std::io::Error>::expect(move _232, _234) -> [return: bb136, unwind: bb1163];
    }

    bb136: {
        _1981 = const false;
        drop(_236) -> [return: bb137, unwind: bb1077];
    }

    bb137: {
        _250 = &_231;
        _249 = std::io::Cursor::<&Vec<u8>>::new(move _250) -> [return: bb138, unwind: bb1077];
    }

    bb138: {
        _248 = &mut _249;
        _247 = <blockstack_lib::chainstate::stacks::StacksBlock as StacksMessageCodec>::consensus_deserialize::<std::io::Cursor<&Vec<u8>>>(_248) -> [return: bb139, unwind: bb1077];
    }

    bb139: {
        _246 = Result::<blockstack_lib::chainstate::stacks::StacksBlock, blockstack_lib::codec::Error>::map_err::<(), {closure@src/main.rs:196:22: 196:26}>(move _247, const ZeroSized: {closure@src/main.rs:196:22: 196:26}) -> [return: bb140, unwind: bb1077];
    }

    bb140: {
        _245 = Result::<blockstack_lib::chainstate::stacks::StacksBlock, ()>::unwrap(move _246) -> [return: bb141, unwind: bb1077];
    }

    bb141: {
        _1858 = const _;
        _253 = _1858 as &[&str] (PointerCoercion(Unsize));
        _259 = &_245;
        _258 = &_259;
        _257 = core::fmt::rt::Argument::<'_>::new_debug::<&blockstack_lib::chainstate::stacks::StacksBlock>(_258) -> [return: bb142, unwind: bb1076];
    }

    bb142: {
        _256 = [move _257];
        _255 = &_256;
        _254 = _255 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _264 = core::fmt::rt::Alignment::Unknown;
        _265 = core::fmt::rt::Count::Implied;
        _266 = core::fmt::rt::Count::Implied;
        _263 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _264, const 4_u32, move _265, move _266) -> [return: bb143, unwind: bb1076];
    }

    bb143: {
        _262 = [move _263];
        _261 = &_262;
        _260 = _261 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _267 = core::fmt::rt::UnsafeArg::new() -> [return: bb144, unwind: bb1076];
    }

    bb144: {
        _252 = Arguments::<'_>::new_v1_formatted(move _253, move _254, move _260, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb145, unwind: bb1076];
    }

    bb145: {
        _251 = _print(move _252) -> [return: bb146, unwind: bb1076];
    }

    bb146: {
        _268 = exit(const 0_i32) -> bb1076;
    }

    bb147: {
        _271 = &_1;
        _270 = <Vec<std::string::String> as Index<usize>>::index(move _271, const 1_usize) -> [return: bb148, unwind: bb1086];
    }

    bb148: {
        _1945 = const _;
        _269 = <std::string::String as PartialEq<&str>>::eq(_270, _1945) -> [return: bb149, unwind: bb1086];
    }

    bb149: {
        switchInt(move _269) -> [0: bb205, otherwise: bb150];
    }

    bb150: {
        _274 = &_1;
        _273 = Vec::<std::string::String>::len(move _274) -> [return: bb151, unwind: bb1086];
    }

    bb151: {
        _272 = Lt(move _273, const 3_usize);
        switchInt(move _272) -> [0: bb157, otherwise: bb152];
    }

    bb152: {
        _1860 = const _;
        _277 = _1860 as &[&str] (PointerCoercion(Unsize));
        _283 = &_1;
        _282 = <Vec<std::string::String> as Index<usize>>::index(move _283, const 0_usize) -> [return: bb153, unwind: bb1086];
    }

    bb153: {
        _281 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_282) -> [return: bb154, unwind: bb1086];
    }

    bb154: {
        _280 = [move _281];
        _279 = &_280;
        _278 = _279 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _276 = Arguments::<'_>::new_v1(move _277, move _278) -> [return: bb155, unwind: bb1086];
    }

    bb155: {
        _275 = _eprint(move _276) -> [return: bb156, unwind: bb1086];
    }

    bb156: {
        _284 = exit(const 1_i32) -> bb1086;
    }

    bb157: {
        _1867 = const _;
        _288 = _1867 as &[&str] (PointerCoercion(Unsize));
        _296 = &_1;
        _295 = <Vec<std::string::String> as Index<usize>>::index(move _296, const 2_usize) -> [return: bb158, unwind: bb1086];
    }

    bb158: {
        _294 = _295;
        _293 = &_294;
        _292 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_293) -> [return: bb159, unwind: bb1086];
    }

    bb159: {
        _291 = [move _292];
        _290 = &_291;
        _289 = _290 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _287 = Arguments::<'_>::new_v1(move _288, move _289) -> [return: bb160, unwind: bb1086];
    }

    bb160: {
        _286 = format(move _287) -> [return: bb161, unwind: bb1086];
    }

    bb161: {
        _285 = move _286;
        _1866 = const _;
        _300 = _1866 as &[&str] (PointerCoercion(Unsize));
        _308 = &_1;
        _307 = <Vec<std::string::String> as Index<usize>>::index(move _308, const 2_usize) -> [return: bb162, unwind: bb1075];
    }

    bb162: {
        _306 = _307;
        _305 = &_306;
        _304 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_305) -> [return: bb163, unwind: bb1075];
    }

    bb163: {
        _303 = [move _304];
        _302 = &_303;
        _301 = _302 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _299 = Arguments::<'_>::new_v1(move _300, move _301) -> [return: bb164, unwind: bb1075];
    }

    bb164: {
        _298 = format(move _299) -> [return: bb165, unwind: bb1075];
    }

    bb165: {
        _297 = move _298;
        _312 = &_285;
        _311 = <std::string::String as Deref>::deref(_312) -> [return: bb166, unwind: bb1074];
    }

    bb166: {
        _310 = SortitionDB::open(_311, const false) -> [return: bb167, unwind: bb1074];
    }

    bb167: {
        _1980 = const true;
        _1865 = const _;
        _318 = _1865 as &[&str] (PointerCoercion(Unsize));
        _324 = &_285;
        _323 = &_324;
        _322 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_323) -> [return: bb168, unwind: bb1073];
    }

    bb168: {
        _321 = [move _322];
        _320 = &_321;
        _319 = _320 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _317 = Arguments::<'_>::new_v1(move _318, move _319) -> [return: bb169, unwind: bb1073];
    }

    bb169: {
        _316 = format(move _317) -> [return: bb170, unwind: bb1073];
    }

    bb170: {
        _315 = move _316;
        _314 = &_315;
        _313 = <std::string::String as Deref>::deref(_314) -> [return: bb171, unwind: bb1161];
    }

    bb171: {
        _1980 = const false;
        _309 = Result::<SortitionDB, blockstack_lib::util::db::Error>::expect(move _310, _313) -> [return: bb172, unwind: bb1161];
    }

    bb172: {
        _1980 = const false;
        drop(_315) -> [return: bb173, unwind: bb1071];
    }

    bb173: {
        _325 = const _;
        _330 = &_297;
        _329 = <std::string::String as Deref>::deref(_330) -> [return: bb174, unwind: bb1071];
    }

    bb174: {
        _328 = StacksChainState::open(const true, _325, _329) -> [return: bb175, unwind: bb1071];
    }

    bb175: {
        _331 = const "Failed to open stacks chain state";
        _327 = Result::<(StacksChainState, Vec<StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>::expect(move _328, _331) -> [return: bb176, unwind: bb1071];
    }

    bb176: {
        _326 = move (_327.0: blockstack_lib::chainstate::stacks::db::StacksChainState);
        drop((_327.1: std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>)) -> [return: bb1088, unwind: bb1070];
    }

    bb177: {
        _333 = SortitionDB::get_canonical_burn_chain_tip(_334) -> [return: bb178, unwind: bb1070];
    }

    bb178: {
        _336 = const "Failed to get sortition chain tip";
        _332 = Result::<BlockSnapshot, blockstack_lib::util::db::Error>::expect(move _333, _336) -> [return: bb179, unwind: bb1070];
    }

    bb179: {
        _337 = time::Instant::now() -> [return: bb180, unwind: bb1070];
    }

    bb180: {
        _340 = &_309;
        _339 = SortitionDB::index_conn(move _340) -> [return: bb181, unwind: bb1070];
    }

    bb181: {
        _342 = &_339;
        _343 = &(_332.4: blockstack_lib::chainstate::burn::ConsensusHash);
        _345 = HashMap::<ConsensusHash, (Option<BlockHeaderHash>, ConsensusHash)>::new() -> [return: bb182, unwind: bb1070];
    }

    bb182: {
        _344 = &_345;
        _341 = sortdb::<impl IndexDBConn<'_, SortitionDBTxContext, SortitionId>>::get_stacks_header_hashes(move _342, const 2100_u64, _343, _344) -> [return: bb183, unwind: bb1069];
    }

    bb183: {
        _338 = Result::<Vec<(ConsensusHash, Option<BlockHeaderHash>)>, blockstack_lib::util::db::Error>::unwrap(move _341) -> [return: bb184, unwind: bb1069];
    }

    bb184: {
        drop(_345) -> [return: bb185, unwind: bb1068];
    }

    bb185: {
        _1864 = const _;
        _348 = _1864 as &[&str] (PointerCoercion(Unsize));
        _355 = time::Instant::elapsed(_337) -> [return: bb186, unwind: bb1068];
    }

    bb186: {
        _354 = time::Duration::as_seconds_f32(move _355) -> [return: bb187, unwind: bb1068];
    }

    bb187: {
        _353 = &_354;
        _352 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_353) -> [return: bb188, unwind: bb1068];
    }

    bb188: {
        _351 = [move _352];
        _350 = &_351;
        _349 = _350 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _347 = Arguments::<'_>::new_v1(move _348, move _349) -> [return: bb189, unwind: bb1068];
    }

    bb189: {
        _346 = _print(move _347) -> [return: bb190, unwind: bb1068];
    }

    bb190: {
        _356 = time::Instant::now() -> [return: bb191, unwind: bb1068];
    }

    bb191: {
        _359 = &_326;
        _361 = &_338;
        _360 = <Vec<(ConsensusHash, Option<BlockHeaderHash>)> as Deref>::deref(_361) -> [return: bb192, unwind: bb1068];
    }

    bb192: {
        _358 = blockstack_lib::chainstate::stacks::db::blocks::<impl StacksChainState>::get_blocks_inventory(move _359, _360) -> [return: bb193, unwind: bb1068];
    }

    bb193: {
        _357 = Result::<BlocksInvData, blockstack_lib::chainstate::stacks::Error>::unwrap(move _358) -> [return: bb194, unwind: bb1068];
    }

    bb194: {
        _1863 = const _;
        _364 = _1863 as &[&str] (PointerCoercion(Unsize));
        _371 = time::Instant::elapsed(_356) -> [return: bb195, unwind: bb1067];
    }

    bb195: {
        _370 = time::Duration::as_seconds_f32(move _371) -> [return: bb196, unwind: bb1067];
    }

    bb196: {
        _369 = &_370;
        _368 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_369) -> [return: bb197, unwind: bb1067];
    }

    bb197: {
        _367 = [move _368];
        _366 = &_367;
        _365 = _366 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _363 = Arguments::<'_>::new_v1(move _364, move _365) -> [return: bb198, unwind: bb1067];
    }

    bb198: {
        _362 = _print(move _363) -> [return: bb199, unwind: bb1067];
    }

    bb199: {
        _1862 = const _;
        _374 = _1862 as &[&str] (PointerCoercion(Unsize));
        _380 = &_357;
        _379 = &_380;
        _378 = core::fmt::rt::Argument::<'_>::new_debug::<&BlocksInvData>(_379) -> [return: bb200, unwind: bb1067];
    }

    bb200: {
        _377 = [move _378];
        _376 = &_377;
        _375 = _376 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _373 = Arguments::<'_>::new_v1(move _374, move _375) -> [return: bb201, unwind: bb1067];
    }

    bb201: {
        _372 = _print(move _373) -> [return: bb202, unwind: bb1067];
    }

    bb202: {
        _1861 = const _;
        _383 = _1861 as &[&str] (PointerCoercion(Unsize));
        _382 = Arguments::<'_>::new_const(move _383) -> [return: bb203, unwind: bb1067];
    }

    bb203: {
        _381 = _print(move _382) -> [return: bb204, unwind: bb1067];
    }

    bb204: {
        _384 = exit(const 0_i32) -> bb1067;
    }

    bb205: {
        _387 = &_1;
        _386 = <Vec<std::string::String> as Index<usize>>::index(move _387, const 1_usize) -> [return: bb206, unwind: bb1086];
    }

    bb206: {
        _1944 = const _;
        _385 = <std::string::String as PartialEq<&str>>::eq(_386, _1944) -> [return: bb207, unwind: bb1086];
    }

    bb207: {
        switchInt(move _385) -> [0: bb316, otherwise: bb208];
    }

    bb208: {
        _390 = &_1;
        _389 = Vec::<std::string::String>::len(move _390) -> [return: bb209, unwind: bb1086];
    }

    bb209: {
        _388 = Lt(move _389, const 3_usize);
        switchInt(move _388) -> [0: bb215, otherwise: bb210];
    }

    bb210: {
        _1868 = const _;
        _393 = _1868 as &[&str] (PointerCoercion(Unsize));
        _399 = &_1;
        _398 = <Vec<std::string::String> as Index<usize>>::index(move _399, const 0_usize) -> [return: bb211, unwind: bb1086];
    }

    bb211: {
        _397 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_398) -> [return: bb212, unwind: bb1086];
    }

    bb212: {
        _396 = [move _397];
        _395 = &_396;
        _394 = _395 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _392 = Arguments::<'_>::new_v1(move _393, move _394) -> [return: bb213, unwind: bb1086];
    }

    bb213: {
        _391 = _eprint(move _392) -> [return: bb214, unwind: bb1086];
    }

    bb214: {
        _400 = exit(const 1_i32) -> bb1086;
    }

    bb215: {
        _1882 = const _;
        _404 = _1882 as &[&str] (PointerCoercion(Unsize));
        _412 = &_1;
        _411 = <Vec<std::string::String> as Index<usize>>::index(move _412, const 2_usize) -> [return: bb216, unwind: bb1086];
    }

    bb216: {
        _410 = _411;
        _409 = &_410;
        _408 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_409) -> [return: bb217, unwind: bb1086];
    }

    bb217: {
        _407 = [move _408];
        _406 = &_407;
        _405 = _406 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _403 = Arguments::<'_>::new_v1(move _404, move _405) -> [return: bb218, unwind: bb1086];
    }

    bb218: {
        _402 = format(move _403) -> [return: bb219, unwind: bb1086];
    }

    bb219: {
        _401 = move _402;
        _1881 = const _;
        _416 = _1881 as &[&str] (PointerCoercion(Unsize));
        _424 = &_1;
        _423 = <Vec<std::string::String> as Index<usize>>::index(move _424, const 2_usize) -> [return: bb220, unwind: bb1066];
    }

    bb220: {
        _422 = _423;
        _421 = &_422;
        _420 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_421) -> [return: bb221, unwind: bb1066];
    }

    bb221: {
        _419 = [move _420];
        _418 = &_419;
        _417 = _418 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _415 = Arguments::<'_>::new_v1(move _416, move _417) -> [return: bb222, unwind: bb1066];
    }

    bb222: {
        _414 = format(move _415) -> [return: bb223, unwind: bb1066];
    }

    bb223: {
        _413 = move _414;
        _428 = &_401;
        _427 = <std::string::String as Deref>::deref(_428) -> [return: bb224, unwind: bb1065];
    }

    bb224: {
        _426 = SortitionDB::open(_427, const false) -> [return: bb225, unwind: bb1065];
    }

    bb225: {
        _1979 = const true;
        _1880 = const _;
        _434 = _1880 as &[&str] (PointerCoercion(Unsize));
        _440 = &_401;
        _439 = &_440;
        _438 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_439) -> [return: bb226, unwind: bb1064];
    }

    bb226: {
        _437 = [move _438];
        _436 = &_437;
        _435 = _436 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _433 = Arguments::<'_>::new_v1(move _434, move _435) -> [return: bb227, unwind: bb1064];
    }

    bb227: {
        _432 = format(move _433) -> [return: bb228, unwind: bb1064];
    }

    bb228: {
        _431 = move _432;
        _430 = &_431;
        _429 = <std::string::String as Deref>::deref(_430) -> [return: bb229, unwind: bb1159];
    }

    bb229: {
        _1979 = const false;
        _425 = Result::<SortitionDB, blockstack_lib::util::db::Error>::expect(move _426, _429) -> [return: bb230, unwind: bb1159];
    }

    bb230: {
        _1979 = const false;
        drop(_431) -> [return: bb231, unwind: bb1062];
    }

    bb231: {
        _441 = const _;
        _446 = &_413;
        _445 = <std::string::String as Deref>::deref(_446) -> [return: bb232, unwind: bb1062];
    }

    bb232: {
        _444 = StacksChainState::open(const true, _441, _445) -> [return: bb233, unwind: bb1062];
    }

    bb233: {
        _447 = const "Failed to open stacks chain state";
        _443 = Result::<(StacksChainState, Vec<StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>::expect(move _444, _447) -> [return: bb234, unwind: bb1062];
    }

    bb234: {
        _442 = move (_443.0: blockstack_lib::chainstate::stacks::db::StacksChainState);
        drop((_443.1: std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>)) -> [return: bb1089, unwind: bb1061];
    }

    bb235: {
        _449 = SortitionDB::get_canonical_burn_chain_tip(_450) -> [return: bb236, unwind: bb1061];
    }

    bb236: {
        _452 = const "Failed to get sortition chain tip";
        _448 = Result::<BlockSnapshot, blockstack_lib::util::db::Error>::expect(move _449, _452) -> [return: bb237, unwind: bb1061];
    }

    bb237: {
        _453 = time::Instant::now() -> [return: bb238, unwind: bb1061];
    }

    bb238: {
        _455 = PeerAddress::from_ipv4(const 127_u8, const 0_u8, const 0_u8, const 1_u8) -> [return: bb239, unwind: bb1061];
    }

    bb239: {
        _456 = Option::<Secp256k1PrivateKey>::None;
        _458 = <UrlString as TryFrom<&str>>::try_from(const "abc") -> [return: bb240, unwind: bb1061];
    }

    bb240: {
        _457 = Result::<UrlString, Infallible>::unwrap(move _458) -> [return: bb241, unwind: bb1061];
    }

    bb241: {
        _454 = LocalPeer::new(const 0_u32, const 0_u32, move _455, const 0_u16, move _456, const 0_u64, move _457) -> [return: bb242, unwind: bb1061];
    }

    bb242: {
        _461 = &_425;
        _460 = SortitionDB::index_conn(move _461) -> [return: bb243, unwind: bb1060];
    }

    bb243: {
        _463 = &_460;
        _464 = &(_448.4: blockstack_lib::chainstate::burn::ConsensusHash);
        _466 = HashMap::<ConsensusHash, (Option<BlockHeaderHash>, ConsensusHash)>::new() -> [return: bb244, unwind: bb1060];
    }

    bb244: {
        _465 = &_466;
        _462 = sortdb::<impl IndexDBConn<'_, SortitionDBTxContext, SortitionId>>::get_stacks_header_hashes(move _463, const 2100_u64, _464, _465) -> [return: bb245, unwind: bb1059];
    }

    bb245: {
        _459 = Result::<Vec<(ConsensusHash, Option<BlockHeaderHash>)>, blockstack_lib::util::db::Error>::unwrap(move _462) -> [return: bb246, unwind: bb1059];
    }

    bb246: {
        drop(_466) -> [return: bb247, unwind: bb1058];
    }

    bb247: {
        _1879 = const _;
        _469 = _1879 as &[&str] (PointerCoercion(Unsize));
        _476 = time::Instant::elapsed(_453) -> [return: bb248, unwind: bb1058];
    }

    bb248: {
        _475 = time::Duration::as_seconds_f32(move _476) -> [return: bb249, unwind: bb1058];
    }

    bb249: {
        _474 = &_475;
        _473 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_474) -> [return: bb250, unwind: bb1058];
    }

    bb250: {
        _472 = [move _473];
        _471 = &_472;
        _470 = _471 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _468 = Arguments::<'_>::new_v1(move _469, move _470) -> [return: bb251, unwind: bb1058];
    }

    bb251: {
        _467 = _print(move _468) -> [return: bb252, unwind: bb1058];
    }

    bb252: {
        _477 = time::Instant::now() -> [return: bb253, unwind: bb1058];
    }

    bb253: {
        _478 = const 0_u128;
        _482 = &_459;
        _481 = <Vec<(ConsensusHash, Option<BlockHeaderHash>)> as Deref>::deref(move _482) -> [return: bb254, unwind: bb1058];
    }

    bb254: {
        _480 = core::slice::<impl [(ConsensusHash, Option<BlockHeaderHash>)]>::iter(_481) -> [return: bb255, unwind: bb1058];
    }

    bb255: {
        _479 = <std::slice::Iter<'_, (ConsensusHash, Option<BlockHeaderHash>)> as IntoIterator>::into_iter(move _480) -> [return: bb256, unwind: bb1058];
    }

    bb256: {
        _483 = move _479;
        goto -> bb257;
    }

    bb257: {
        _485 = &mut _483;
        _484 = <std::slice::Iter<'_, (ConsensusHash, Option<BlockHeaderHash>)> as Iterator>::next(_485) -> [return: bb258, unwind: bb1058];
    }

    bb258: {
        _486 = discriminant(_484);
        switchInt(move _486) -> [0: bb260, 1: bb259, otherwise: bb38];
    }

    bb259: {
        _1950 = deref_copy ((_484 as Some).0: &(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>));
        _487 = &((*_1950).0: blockstack_lib::chainstate::burn::ConsensusHash);
        _1951 = deref_copy ((_484 as Some).0: &(blockstack_lib::chainstate::burn::ConsensusHash, std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>));
        _488 = &((*_1951).1: std::option::Option<blockstack_lib::types::chainstate::BlockHeaderHash>);
        _490 = discriminant((*_488));
        switchInt(move _490) -> [0: bb257, 1: bb261, otherwise: bb38];
    }

    bb260: {
        _1878 = const _;
        _586 = _1878 as &[&str] (PointerCoercion(Unsize));
        _593 = time::Instant::elapsed(_477) -> [return: bb308, unwind: bb1058];
    }

    bb261: {
        _491 = &(((*_488) as Some).0: blockstack_lib::types::chainstate::BlockHeaderHash);
        _489 = _491;
        _493 = &_487;
        _1952 = deref_copy (*_493);
        _494 = &_489;
        _1953 = deref_copy (*_494);
        _492 = blockstack_lib::chainstate::stacks::block::<impl StacksBlockHeader>::make_index_block_hash(_1952, _1953) -> [return: bb262, unwind: bb1058];
    }

    bb262: {
        _495 = get_epoch_time_ms() -> [return: bb263, unwind: bb1058];
    }

    bb263: {
        _501 = &_442;
        _500 = StacksChainState::db(move _501) -> [return: bb264, unwind: bb1058];
    }

    bb264: {
        _499 = &_500;
        _1954 = deref_copy (*_499);
        _502 = &_492;
        _498 = blockstack_lib::chainstate::stacks::db::blocks::<impl StacksChainState>::load_staging_block_info(_1954, _502) -> [return: bb265, unwind: bb1058];
    }

    bb265: {
        _504 = discriminant(_498);
        switchInt(move _504) -> [0: bb266, otherwise: bb267];
    }

    bb266: {
        _503 = discriminant(((_498 as Ok).0: std::option::Option<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>));
        switchInt(move _503) -> [1: bb268, otherwise: bb267];
    }

    bb267: {
        _507 = get_loglevel() -> [return: bb269, unwind: bb1057];
    }

    bb268: {
        _505 = move ((((_498 as Ok).0: std::option::Option<blockstack_lib::chainstate::stacks::db::blocks::StagingBlock>) as Some).0: blockstack_lib::chainstate::stacks::db::blocks::StagingBlock);
        _497 = move _505;
        _1982 = discriminant(_498);
        switchInt(move _1982) -> [0: bb1090, otherwise: bb1091];
    }

    bb269: {
        _1872 = const _;
        _508 = slog::Level::is_at_least(_1872, _507) -> [return: bb270, unwind: bb1057];
    }

    bb270: {
        switchInt(move _508) -> [0: bb280, otherwise: bb271];
    }

    bb271: {
        _1871 = const _;
        _510 = slog::Level::as_usize(_1871) -> [return: bb272, unwind: bb1057];
    }

    bb272: {
        _513 = __slog_static_max_level() -> [return: bb273, unwind: bb1057];
    }

    bb273: {
        _512 = &_513;
        _511 = FilterLevel::as_usize(move _512) -> [return: bb274, unwind: bb1057];
    }

    bb274: {
        _509 = Le(move _510, move _511);
        switchInt(move _509) -> [0: bb280, otherwise: bb275];
    }

    bb275: {
        _515 = const {alloc1: &LOGGER};
        _514 = <LOGGER as Deref>::deref(_515) -> [return: bb276, unwind: bb1057];
    }

    bb276: {
        _518 = const {alloc2: &RecordStatic<'_>};
        _1870 = const _;
        _521 = _1870 as &[&str] (PointerCoercion(Unsize));
        _527 = &_492;
        _526 = &_527;
        _525 = core::fmt::rt::Argument::<'_>::new_debug::<&StacksBlockId>(_526) -> [return: bb277, unwind: bb1057];
    }

    bb277: {
        _524 = [move _525];
        _523 = &_524;
        _522 = _523 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _520 = Arguments::<'_>::new_v1(move _521, move _522) -> [return: bb278, unwind: bb1057];
    }

    bb278: {
        _519 = &_520;
        _1869 = const _;
        _529 = _1869 as &dyn slog::KV (PointerCoercion(Unsize));
        _528 = BorrowedKV::<'_>(move _529);
        _517 = Record::<'_>::new(_518, _519, move _528) -> [return: bb279, unwind: bb1057];
    }

    bb279: {
        _516 = &_517;
        _506 = Logger::<Arc<dyn SendSyncRefUnwindSafeDrain<Err = slog::private::NeverStruct, Ok = ()>>>::log(_514, _516) -> [return: bb1165, unwind: bb1057];
    }

    bb280: {
        drop(_498) -> [return: bb257, unwind: bb1058];
    }

    bb281: {
        _534 = discriminant(_530);
        switchInt(move _534) -> [0: bb283, 1: bb282, otherwise: bb38];
    }

    bb282: {
        _539 = get_loglevel() -> [return: bb285, unwind: bb1055];
    }

    bb283: {
        _535 = move ((_530 as Ok).0: std::option::Option<blockstack_lib::types::chainstate::StacksBlockHeader>);
        _537 = &_497;
        _536 = {closure@src/main.rs:329:40: 329:45} { child_block_info: move _537 };
        _496 = Option::<StacksBlockHeader>::map::<(StacksBlockHeader, ConsensusHash), {closure@src/main.rs:329:40: 329:45}>(move _535, move _536) -> [return: bb284, unwind: bb1055];
    }

    bb284: {
        drop(_497) -> [return: bb299, unwind: bb1157];
    }

    bb285: {
        _1876 = const _;
        _540 = slog::Level::is_at_least(_1876, _539) -> [return: bb286, unwind: bb1055];
    }

    bb286: {
        switchInt(move _540) -> [0: bb298, otherwise: bb287];
    }

    bb287: {
        _1875 = const _;
        _542 = slog::Level::as_usize(_1875) -> [return: bb288, unwind: bb1055];
    }

    bb288: {
        _545 = __slog_static_max_level() -> [return: bb289, unwind: bb1055];
    }

    bb289: {
        _544 = &_545;
        _543 = FilterLevel::as_usize(move _544) -> [return: bb290, unwind: bb1055];
    }

    bb290: {
        _541 = Le(move _542, move _543);
        switchInt(move _541) -> [0: bb298, otherwise: bb291];
    }

    bb291: {
        _547 = const {alloc1: &LOGGER};
        _546 = <LOGGER as Deref>::deref(_547) -> [return: bb292, unwind: bb1055];
    }

    bb292: {
        _550 = const {alloc3: &RecordStatic<'_>};
        _1874 = const _;
        _553 = _1874 as &[&str] (PointerCoercion(Unsize));
        _559 = &_454;
        _558 = &_559;
        _557 = core::fmt::rt::Argument::<'_>::new_debug::<&LocalPeer>(_558) -> [return: bb293, unwind: bb1055];
    }

    bb293: {
        _562 = &_487;
        _561 = &_562;
        _560 = core::fmt::rt::Argument::<'_>::new_display::<&&ConsensusHash>(_561) -> [return: bb294, unwind: bb1055];
    }

    bb294: {
        _565 = &_489;
        _564 = &_565;
        _563 = core::fmt::rt::Argument::<'_>::new_display::<&&BlockHeaderHash>(_564) -> [return: bb295, unwind: bb1055];
    }

    bb295: {
        _556 = [move _557, move _560, move _563];
        _555 = &_556;
        _554 = _555 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _552 = Arguments::<'_>::new_v1(move _553, move _554) -> [return: bb296, unwind: bb1055];
    }

    bb296: {
        _551 = &_552;
        _1873 = const _;
        _567 = _1873 as &dyn slog::KV (PointerCoercion(Unsize));
        _566 = BorrowedKV::<'_>(move _567);
        _549 = Record::<'_>::new(_550, _551, move _566) -> [return: bb297, unwind: bb1055];
    }

    bb297: {
        _548 = &_549;
        _538 = Logger::<Arc<dyn SendSyncRefUnwindSafeDrain<Err = slog::private::NeverStruct, Ok = ()>>>::log(_546, _548) -> [return: bb1166, unwind: bb1055];
    }

    bb298: {
        drop(_497) -> [return: bb307, unwind: bb1157];
    }

    bb299: {
        drop(_530) -> [return: bb300, unwind: bb1058];
    }

    bb300: {
        _568 = get_epoch_time_ms() -> [return: bb301, unwind: bb1058];
    }

    bb301: {
        _569 = core::num::<impl u128>::saturating_sub(_568, _495) -> [return: bb302, unwind: bb1058];
    }

    bb302: {
        _570 = CheckedAdd(_478, _569);
        assert(!move (_570.1: bool), "attempt to compute `{} + {}`, which would overflow", _478, move _569) -> [success: bb303, unwind: bb1058];
    }

    bb303: {
        _478 = move (_570.0: u128);
        _571 = discriminant(_496);
        switchInt(move _571) -> [1: bb304, otherwise: bb257];
    }

    bb304: {
        _572 = move (((_496 as Some).0: (blockstack_lib::types::chainstate::StacksBlockHeader, blockstack_lib::chainstate::burn::ConsensusHash)).0: blockstack_lib::types::chainstate::StacksBlockHeader);
        _573 = (((_496 as Some).0: (blockstack_lib::types::chainstate::StacksBlockHeader, blockstack_lib::chainstate::burn::ConsensusHash)).1: blockstack_lib::chainstate::burn::ConsensusHash);
        _576 = &_454;
        _577 = &_442;
        _578 = &_573;
        _581 = &_572;
        _580 = blockstack_lib::chainstate::stacks::block::<impl StacksBlockHeader>::block_hash(move _581) -> [return: bb305, unwind: bb1058];
    }

    bb305: {
        _579 = &_580;
        _582 = &_487;
        _1955 = deref_copy (*_582);
        _583 = &_489;
        _1956 = deref_copy (*_583);
        _575 = blockstack_lib::net::download::<impl PeerNetwork>::can_download_microblock_stream(_576, _577, _578, _579, _1955, _1956) -> [return: bb306, unwind: bb1058];
    }

    bb306: {
        _574 = Result::<bool, blockstack_lib::net::Error>::unwrap(move _575) -> [return: bb1167, unwind: bb1058];
    }

    bb307: {
        _1983 = discriminant(_530);
        switchInt(move _1983) -> [0: bb257, otherwise: bb1092];
    }

    bb308: {
        _592 = time::Duration::as_seconds_f32(move _593) -> [return: bb309, unwind: bb1058];
    }

    bb309: {
        _591 = &_592;
        _590 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_591) -> [return: bb310, unwind: bb1058];
    }

    bb310: {
        _595 = &_478;
        _594 = core::fmt::rt::Argument::<'_>::new_display::<u128>(_595) -> [return: bb311, unwind: bb1058];
    }

    bb311: {
        _589 = [move _590, move _594];
        _588 = &_589;
        _587 = _588 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _585 = Arguments::<'_>::new_v1(move _586, move _587) -> [return: bb312, unwind: bb1058];
    }

    bb312: {
        _584 = _print(move _585) -> [return: bb313, unwind: bb1058];
    }

    bb313: {
        _1877 = const _;
        _598 = _1877 as &[&str] (PointerCoercion(Unsize));
        _597 = Arguments::<'_>::new_const(move _598) -> [return: bb314, unwind: bb1058];
    }

    bb314: {
        _596 = _print(move _597) -> [return: bb315, unwind: bb1058];
    }

    bb315: {
        _599 = exit(const 0_i32) -> bb1058;
    }

    bb316: {
        _602 = &_1;
        _601 = <Vec<std::string::String> as Index<usize>>::index(move _602, const 1_usize) -> [return: bb317, unwind: bb1086];
    }

    bb317: {
        _1943 = const _;
        _600 = <std::string::String as PartialEq<&str>>::eq(_601, _1943) -> [return: bb318, unwind: bb1086];
    }

    bb318: {
        switchInt(move _600) -> [0: bb382, otherwise: bb319];
    }

    bb319: {
        _605 = &_1;
        _604 = Vec::<std::string::String>::len(move _605) -> [return: bb320, unwind: bb1086];
    }

    bb320: {
        _603 = Lt(move _604, const 4_usize);
        switchInt(move _603) -> [0: bb326, otherwise: bb321];
    }

    bb321: {
        _1883 = const _;
        _608 = _1883 as &[&str] (PointerCoercion(Unsize));
        _614 = &_1;
        _613 = <Vec<std::string::String> as Index<usize>>::index(move _614, const 0_usize) -> [return: bb322, unwind: bb1086];
    }

    bb322: {
        _612 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_613) -> [return: bb323, unwind: bb1086];
    }

    bb323: {
        _611 = [move _612];
        _610 = &_611;
        _609 = _610 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _607 = Arguments::<'_>::new_v1(move _608, move _609) -> [return: bb324, unwind: bb1086];
    }

    bb324: {
        _606 = _eprint(move _607) -> [return: bb325, unwind: bb1086];
    }

    bb325: {
        _615 = exit(const 1_i32) -> bb1086;
    }

    bb326: {
        _620 = &_1;
        _619 = <Vec<std::string::String> as Index<usize>>::index(move _620, const 3_usize) -> [return: bb327, unwind: bb1086];
    }

    bb327: {
        _618 = <std::string::String as Deref>::deref(_619) -> [return: bb328, unwind: bb1086];
    }

    bb328: {
        _617 = core::str::<impl str>::parse::<u64>(_618) -> [return: bb329, unwind: bb1086];
    }

    bb329: {
        _621 = const "Failed to parse <height> argument";
        _616 = Result::<u64, ParseIntError>::expect(move _617, _621) -> [return: bb330, unwind: bb1086];
    }

    bb330: {
        _626 = &_1;
        _625 = <Vec<std::string::String> as Deref>::deref(move _626) -> [return: bb331, unwind: bb1086];
    }

    bb331: {
        _624 = core::slice::<impl [std::string::String]>::get::<usize>(_625, const 4_usize) -> [return: bb332, unwind: bb1086];
    }

    bb332: {
        _623 = Option::<&std::string::String>::map::<u64, {closure@src/main.rs:375:18: 375:21}>(move _624, const ZeroSized: {closure@src/main.rs:375:18: 375:21}) -> [return: bb333, unwind: bb1086];
    }

    bb333: {
        _622 = Option::<u64>::unwrap_or(move _623, _616) -> [return: bb334, unwind: bb1086];
    }

    bb334: {
        _631 = &_1;
        _630 = <Vec<std::string::String> as Index<usize>>::index(move _631, const 2_usize) -> [return: bb335, unwind: bb1086];
    }

    bb335: {
        _629 = <std::string::String as Deref>::deref(_630) -> [return: bb336, unwind: bb1086];
    }

    bb336: {
        _628 = SortitionDB::open(_629, const false) -> [return: bb337, unwind: bb1086];
    }

    bb337: {
        _1978 = const true;
        _1887 = const _;
        _637 = _1887 as &[&str] (PointerCoercion(Unsize));
        _643 = &_1;
        _642 = <Vec<std::string::String> as Index<usize>>::index(move _643, const 2_usize) -> [return: bb338, unwind: bb1054];
    }

    bb338: {
        _641 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_642) -> [return: bb339, unwind: bb1054];
    }

    bb339: {
        _640 = [move _641];
        _639 = &_640;
        _638 = _639 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _636 = Arguments::<'_>::new_v1(move _637, move _638) -> [return: bb340, unwind: bb1054];
    }

    bb340: {
        _635 = format(move _636) -> [return: bb341, unwind: bb1054];
    }

    bb341: {
        _634 = move _635;
        _633 = &_634;
        _632 = <std::string::String as Deref>::deref(_633) -> [return: bb342, unwind: bb1155];
    }

    bb342: {
        _1978 = const false;
        _627 = Result::<SortitionDB, blockstack_lib::util::db::Error>::expect(move _628, _632) -> [return: bb343, unwind: bb1155];
    }

    bb343: {
        _1978 = const false;
        drop(_634) -> [return: bb344, unwind: bb1052];
    }

    bb344: {
        _647 = &_627;
        _646 = SortitionDB::conn(move _647) -> [return: bb345, unwind: bb1052];
    }

    bb345: {
        _645 = SortitionDB::get_canonical_sortition_tip(_646) -> [return: bb346, unwind: bb1052];
    }

    bb346: {
        _648 = const "Failed to get sortition chain tip";
        _644 = Result::<SortitionId, blockstack_lib::util::db::Error>::expect(move _645, _648) -> [return: bb347, unwind: bb1052];
    }

    bb347: {
        _650 = &_627;
        _651 = &_644;
        _649 = SortitionDB::index_handle(move _650, _651) -> [return: bb348, unwind: bb1052];
    }

    bb348: {
        _652 = Vec::<(u64, bool, u32)>::new() -> [return: bb349, unwind: bb1052];
    }

    bb349: {
        _656 = CheckedAdd(const 1_u64, _622);
        assert(!move (_656.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_u64, _622) -> [success: bb350, unwind: bb1051];
    }

    bb350: {
        _655 = move (_656.0: u64);
        _654 = std::ops::Range::<u64> { start: _616, end: move _655 };
        _653 = <std::ops::Range<u64> as IntoIterator>::into_iter(move _654) -> [return: bb351, unwind: bb1051];
    }

    bb351: {
        _657 = move _653;
        goto -> bb352;
    }

    bb352: {
        _659 = &mut _657;
        _658 = <std::ops::Range<u64> as Iterator>::next(_659) -> [return: bb353, unwind: bb1051];
    }

    bb353: {
        _660 = discriminant(_658);
        switchInt(move _660) -> [0: bb355, 1: bb354, otherwise: bb38];
    }

    bb354: {
        _661 = ((_658 as Some).0: u64);
        _664 = ((_649.1: blockstack_lib::chainstate::burn::db::sortdb::SortitionHandleContext).0: u64);
        _665 = CheckedAdd(_664, const 100_u64);
        assert(!move (_665.1: bool), "attempt to compute `{} + {}`, which would overflow", move _664, const 100_u64) -> [success: bb356, unwind: bb1051];
    }

    bb355: {
        _1886 = const _;
        _694 = _1886 as &[&str] (PointerCoercion(Unsize));
        _693 = Arguments::<'_>::new_const(move _694) -> [return: bb369, unwind: bb1051];
    }

    bb356: {
        _663 = move (_665.0: u64);
        _662 = Ge(move _663, _661);
        switchInt(move _662) -> [0: bb360, otherwise: bb357];
    }

    bb357: {
        _1884 = const _;
        _668 = _1884 as &[&str] (PointerCoercion(Unsize));
        _667 = Arguments::<'_>::new_const(move _668) -> [return: bb358, unwind: bb1051];
    }

    bb358: {
        _666 = _eprint(move _667) -> [return: bb359, unwind: bb1051];
    }

    bb359: {
        _669 = exit(const 1_i32) -> bb1051;
    }

    bb360: {
        _673 = &_649;
        _674 = &_644;
        _672 = SortitionDB::get_ancestor_snapshot::<SortitionHandleContext>(_673, _661, _674) -> [return: bb361, unwind: bb1051];
    }

    bb361: {
        _675 = const "Failed to get chain tip to evaluate at";
        _671 = Result::<Option<BlockSnapshot>, blockstack_lib::util::db::Error>::expect(move _672, _675) -> [return: bb362, unwind: bb1051];
    }

    bb362: {
        _676 = const "Failed to get chain tip to evaluate at";
        _670 = Option::<BlockSnapshot>::expect(move _671, _676) -> [return: bb363, unwind: bb1051];
    }

    bb363: {
        _677 = PoxConstants::mainnet_default() -> [return: bb364, unwind: bb1051];
    }

    bb364: {
        _680 = &_649;
        _681 = &(_670.2: blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _682 = &_677;
        _679 = sortdb::<impl IndexDBConn<'_, SortitionHandleContext, SortitionId>>::get_chosen_pox_anchor_check_position(move _680, _681, _682, const false) -> [return: bb365, unwind: bb1051];
    }

    bb365: {
        _683 = const "Failed to compute PoX cycle";
        _678 = Result::<Result<(ConsensusHash, BlockHeaderHash, u32), u32>, blockstack_lib::chainstate::coordinator::Error>::expect(move _679, _683) -> [return: bb366, unwind: bb1051];
    }

    bb366: {
        _685 = discriminant(_678);
        switchInt(move _685) -> [0: bb368, 1: bb367, otherwise: bb38];
    }

    bb367: {
        _689 = ((_678 as Err).0: u32);
        _690 = &mut _652;
        _691 = (_661, const false, _689);
        _684 = Vec::<(u64, bool, u32)>::push(move _690, move _691) -> [return: bb1168, unwind: bb1051];
    }

    bb368: {
        _686 = (((_678 as Ok).0: (blockstack_lib::chainstate::burn::ConsensusHash, blockstack_lib::types::chainstate::BlockHeaderHash, u32)).2: u32);
        _687 = &mut _652;
        _688 = (_661, const true, _686);
        _684 = Vec::<(u64, bool, u32)>::push(move _687, move _688) -> [return: bb1169, unwind: bb1051];
    }

    bb369: {
        _692 = _print(move _693) -> [return: bb370, unwind: bb1051];
    }

    bb370: {
        _698 = &_652;
        _697 = <Vec<(u64, bool, u32)> as Deref>::deref(move _698) -> [return: bb371, unwind: bb1051];
    }

    bb371: {
        _696 = core::slice::<impl [(u64, bool, u32)]>::iter(_697) -> [return: bb372, unwind: bb1051];
    }

    bb372: {
        _695 = <std::slice::Iter<'_, (u64, bool, u32)> as IntoIterator>::into_iter(move _696) -> [return: bb373, unwind: bb1051];
    }

    bb373: {
        _699 = move _695;
        goto -> bb374;
    }

    bb374: {
        _701 = &mut _699;
        _700 = <std::slice::Iter<'_, (u64, bool, u32)> as Iterator>::next(_701) -> [return: bb375, unwind: bb1051];
    }

    bb375: {
        _702 = discriminant(_700);
        switchInt(move _702) -> [0: bb377, 1: bb376, otherwise: bb38];
    }

    bb376: {
        _703 = ((_700 as Some).0: &(u64, bool, u32));
        _1885 = const _;
        _706 = _1885 as &[&str] (PointerCoercion(Unsize));
        _712 = &((*_703).0: u64);
        _711 = &_712;
        _710 = core::fmt::rt::Argument::<'_>::new_display::<&u64>(_711) -> [return: bb378, unwind: bb1051];
    }

    bb377: {
        _719 = exit(const 0_i32) -> bb1051;
    }

    bb378: {
        _715 = &((*_703).1: bool);
        _714 = &_715;
        _713 = core::fmt::rt::Argument::<'_>::new_display::<&bool>(_714) -> [return: bb379, unwind: bb1051];
    }

    bb379: {
        _718 = &((*_703).2: u32);
        _717 = &_718;
        _716 = core::fmt::rt::Argument::<'_>::new_display::<&u32>(_717) -> [return: bb380, unwind: bb1051];
    }

    bb380: {
        _709 = [move _710, move _713, move _716];
        _708 = &_709;
        _707 = _708 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _705 = Arguments::<'_>::new_v1(move _706, move _707) -> [return: bb381, unwind: bb1051];
    }

    bb381: {
        _704 = _print(move _705) -> [return: bb1170, unwind: bb1051];
    }

    bb382: {
        _722 = &_1;
        _721 = <Vec<std::string::String> as Index<usize>>::index(move _722, const 1_usize) -> [return: bb383, unwind: bb1086];
    }

    bb383: {
        _1942 = const _;
        _720 = <std::string::String as PartialEq<&str>>::eq(_721, _1942) -> [return: bb384, unwind: bb1086];
    }

    bb384: {
        switchInt(move _720) -> [0: bb495, otherwise: bb385];
    }

    bb385: {
        _725 = &_1;
        _724 = Vec::<std::string::String>::len(move _725) -> [return: bb386, unwind: bb1086];
    }

    bb386: {
        _723 = Lt(move _724, const 3_usize);
        switchInt(move _723) -> [0: bb392, otherwise: bb387];
    }

    bb387: {
        _1888 = const _;
        _728 = _1888 as &[&str] (PointerCoercion(Unsize));
        _734 = &_1;
        _733 = <Vec<std::string::String> as Index<usize>>::index(move _734, const 0_usize) -> [return: bb388, unwind: bb1086];
    }

    bb388: {
        _732 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_733) -> [return: bb389, unwind: bb1086];
    }

    bb389: {
        _731 = [move _732];
        _730 = &_731;
        _729 = _730 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _727 = Arguments::<'_>::new_v1(move _728, move _729) -> [return: bb390, unwind: bb1086];
    }

    bb390: {
        _726 = _eprint(move _727) -> [return: bb391, unwind: bb1086];
    }

    bb391: {
        _735 = exit(const 1_i32) -> bb1086;
    }

    bb392: {
        _736 = get_epoch_time_ms() -> [return: bb393, unwind: bb1086];
    }

    bb393: {
        _1894 = const _;
        _740 = _1894 as &[&str] (PointerCoercion(Unsize));
        _748 = &_1;
        _747 = <Vec<std::string::String> as Index<usize>>::index(move _748, const 2_usize) -> [return: bb394, unwind: bb1086];
    }

    bb394: {
        _746 = _747;
        _745 = &_746;
        _744 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_745) -> [return: bb395, unwind: bb1086];
    }

    bb395: {
        _743 = [move _744];
        _742 = &_743;
        _741 = _742 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _739 = Arguments::<'_>::new_v1(move _740, move _741) -> [return: bb396, unwind: bb1086];
    }

    bb396: {
        _738 = format(move _739) -> [return: bb397, unwind: bb1086];
    }

    bb397: {
        _737 = move _738;
        _1893 = const _;
        _752 = _1893 as &[&str] (PointerCoercion(Unsize));
        _760 = &_1;
        _759 = <Vec<std::string::String> as Index<usize>>::index(move _760, const 2_usize) -> [return: bb398, unwind: bb1050];
    }

    bb398: {
        _758 = _759;
        _757 = &_758;
        _756 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_757) -> [return: bb399, unwind: bb1050];
    }

    bb399: {
        _755 = [move _756];
        _754 = &_755;
        _753 = _754 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _751 = Arguments::<'_>::new_v1(move _752, move _753) -> [return: bb400, unwind: bb1050];
    }

    bb400: {
        _750 = format(move _751) -> [return: bb401, unwind: bb1050];
    }

    bb401: {
        _749 = move _750;
        _761 = core::num::<impl u64>::max_value() -> [return: bb402, unwind: bb1049];
    }

    bb402: {
        _762 = core::num::<impl u64>::max_value() -> [return: bb403, unwind: bb1049];
    }

    bb403: {
        _765 = &_1;
        _764 = Vec::<std::string::String>::len(move _765) -> [return: bb404, unwind: bb1049];
    }

    bb404: {
        _763 = Ge(move _764, const 4_usize);
        switchInt(move _763) -> [0: bb410, otherwise: bb405];
    }

    bb405: {
        _770 = &_1;
        _769 = <Vec<std::string::String> as Index<usize>>::index(move _770, const 3_usize) -> [return: bb406, unwind: bb1049];
    }

    bb406: {
        _768 = <std::string::String as Deref>::deref(_769) -> [return: bb407, unwind: bb1049];
    }

    bb407: {
        _767 = core::str::<impl str>::parse::<u64>(_768) -> [return: bb408, unwind: bb1049];
    }

    bb408: {
        _771 = const "Could not parse min_fee";
        _766 = Result::<u64, ParseIntError>::expect(move _767, _771) -> [return: bb409, unwind: bb1049];
    }

    bb409: {
        _761 = move _766;
        goto -> bb410;
    }

    bb410: {
        _774 = &_1;
        _773 = Vec::<std::string::String>::len(move _774) -> [return: bb411, unwind: bb1049];
    }

    bb411: {
        _772 = Ge(move _773, const 5_usize);
        switchInt(move _772) -> [0: bb417, otherwise: bb412];
    }

    bb412: {
        _779 = &_1;
        _778 = <Vec<std::string::String> as Index<usize>>::index(move _779, const 4_usize) -> [return: bb413, unwind: bb1049];
    }

    bb413: {
        _777 = <std::string::String as Deref>::deref(_778) -> [return: bb414, unwind: bb1049];
    }

    bb414: {
        _776 = core::str::<impl str>::parse::<u64>(_777) -> [return: bb415, unwind: bb1049];
    }

    bb415: {
        _780 = const "Could not parse max_time";
        _775 = Result::<u64, ParseIntError>::expect(move _776, _780) -> [return: bb416, unwind: bb1049];
    }

    bb416: {
        _762 = move _775;
        goto -> bb417;
    }

    bb417: {
        _784 = &_737;
        _783 = <std::string::String as Deref>::deref(_784) -> [return: bb418, unwind: bb1049];
    }

    bb418: {
        _782 = SortitionDB::open(_783, const false) -> [return: bb419, unwind: bb1049];
    }

    bb419: {
        _1977 = const true;
        _1892 = const _;
        _790 = _1892 as &[&str] (PointerCoercion(Unsize));
        _796 = &_737;
        _795 = &_796;
        _794 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_795) -> [return: bb420, unwind: bb1048];
    }

    bb420: {
        _793 = [move _794];
        _792 = &_793;
        _791 = _792 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _789 = Arguments::<'_>::new_v1(move _790, move _791) -> [return: bb421, unwind: bb1048];
    }

    bb421: {
        _788 = format(move _789) -> [return: bb422, unwind: bb1048];
    }

    bb422: {
        _787 = move _788;
        _786 = &_787;
        _785 = <std::string::String as Deref>::deref(_786) -> [return: bb423, unwind: bb1153];
    }

    bb423: {
        _1977 = const false;
        _781 = Result::<SortitionDB, blockstack_lib::util::db::Error>::expect(move _782, _785) -> [return: bb424, unwind: bb1153];
    }

    bb424: {
        _1977 = const false;
        drop(_787) -> [return: bb425, unwind: bb1046];
    }

    bb425: {
        _797 = const _;
        _802 = &_749;
        _801 = <std::string::String as Deref>::deref(_802) -> [return: bb426, unwind: bb1046];
    }

    bb426: {
        _800 = StacksChainState::open(const true, _797, _801) -> [return: bb427, unwind: bb1046];
    }

    bb427: {
        _803 = const "Failed to open stacks chain state";
        _799 = Result::<(StacksChainState, Vec<StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>::expect(move _800, _803) -> [return: bb428, unwind: bb1046];
    }

    bb428: {
        _798 = move (_799.0: blockstack_lib::chainstate::stacks::db::StacksChainState);
        drop((_799.1: std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>)) -> [return: bb1093, unwind: bb1045];
    }

    bb429: {
        _805 = SortitionDB::get_canonical_burn_chain_tip(_806) -> [return: bb430, unwind: bb1045];
    }

    bb430: {
        _808 = const "Failed to get sortition chain tip";
        _804 = Result::<BlockSnapshot, blockstack_lib::util::db::Error>::expect(move _805, _808) -> [return: bb431, unwind: bb1045];
    }

    bb431: {
        _812 = &_749;
        _811 = <std::string::String as Deref>::deref(_812) -> [return: bb432, unwind: bb1045];
    }

    bb432: {
        _810 = MemPoolDB::open(const true, _797, _811) -> [return: bb433, unwind: bb1045];
    }

    bb433: {
        _813 = const "Failed to open mempool db";
        _809 = Result::<MemPoolDB, blockstack_lib::util::db::Error>::expect(move _810, _813) -> [return: bb434, unwind: bb1045];
    }

    bb434: {
        _817 = &_798;
        _818 = &_781;
        _816 = blockstack_lib::chainstate::stacks::db::blocks::<impl StacksChainState>::get_stacks_chain_tip(move _817, _818) -> [return: bb435, unwind: bb1044];
    }

    bb435: {
        _815 = Result::<Option<StagingBlock>, blockstack_lib::chainstate::stacks::Error>::unwrap(move _816) -> [return: bb436, unwind: bb1044];
    }

    bb436: {
        _814 = Option::<StagingBlock>::unwrap(move _815) -> [return: bb437, unwind: bb1044];
    }

    bb437: {
        _823 = &_798;
        _822 = StacksChainState::db(move _823) -> [return: bb438, unwind: bb1043];
    }

    bb438: {
        _824 = &(_814.0: blockstack_lib::chainstate::burn::ConsensusHash);
        _825 = &(_814.1: blockstack_lib::types::chainstate::BlockHeaderHash);
        _821 = headers::<impl StacksChainState>::get_anchored_block_header_info(_822, _824, _825) -> [return: bb439, unwind: bb1043];
    }

    bb439: {
        _826 = const "Failed to load chain tip header info";
        _820 = Result::<Option<StacksHeaderInfo>, blockstack_lib::chainstate::stacks::Error>::expect(move _821, _826) -> [return: bb440, unwind: bb1043];
    }

    bb440: {
        _827 = const "Failed to load chain tip header info";
        _819 = Option::<StacksHeaderInfo>::expect(move _820, _827) -> [return: bb441, unwind: bb1043];
    }

    bb441: {
        _828 = Secp256k1PrivateKey::new() -> [return: bb442, unwind: bb1043];
    }

    bb442: {
        _831 = &_828;
        _830 = auth::<impl blockstack_lib::chainstate::stacks::TransactionAuth>::from_p2pkh(_831) -> [return: bb443, unwind: bb1043];
    }

    bb443: {
        _829 = Option::<blockstack_lib::chainstate::stacks::TransactionAuth>::unwrap(move _830) -> [return: bb444, unwind: bb1043];
    }

    bb444: {
        _1976 = const true;
        _833 = &mut _829;
        _832 = auth::<impl blockstack_lib::chainstate::stacks::TransactionAuth>::set_origin_nonce(move _833, const 0_u64) -> [return: bb445, unwind: bb1151];
    }

    bb445: {
        _835 = blockstack_lib::chainstate::stacks::TransactionVersion::Mainnet;
        _1976 = const false;
        _836 = move _829;
        _839 = [const 0_u8; 32];
        _838 = blockstack_lib::chainstate::stacks::CoinbasePayload(move _839);
        _837 = blockstack_lib::chainstate::stacks::TransactionPayload::Coinbase(move _838);
        _834 = blockstack_lib::chainstate::stacks::transaction::<impl blockstack_lib::chainstate::stacks::StacksTransaction>::new(move _835, move _836, move _837) -> [return: bb446, unwind: bb1151];
    }

    bb446: {
        (_834.1: u32) = _797;
        _840 = OnChainOnly;
        (_834.3: blockstack_lib::chainstate::stacks::TransactionAnchorMode) = move _840;
        _842 = &_834;
        _841 = blockstack_lib::chainstate::stacks::transaction::<impl blockstack_lib::chainstate::stacks::StacksTransactionSigner>::new(_842) -> [return: bb447, unwind: bb1042];
    }

    bb447: {
        _845 = &mut _841;
        _846 = &_828;
        _844 = blockstack_lib::chainstate::stacks::transaction::<impl blockstack_lib::chainstate::stacks::StacksTransactionSigner>::sign_origin(move _845, _846) -> [return: bb448, unwind: bb1041];
    }

    bb448: {
        _843 = Result::<(), blockstack_lib::net::Error>::unwrap(move _844) -> [return: bb449, unwind: bb1041];
    }

    bb449: {
        _849 = &_841;
        _848 = blockstack_lib::chainstate::stacks::transaction::<impl blockstack_lib::chainstate::stacks::StacksTransactionSigner>::get_tx(move _849) -> [return: bb450, unwind: bb1041];
    }

    bb450: {
        _847 = Option::<blockstack_lib::chainstate::stacks::StacksTransaction>::unwrap(move _848) -> [return: bb451, unwind: bb1041];
    }

    bb451: {
        _1891 = const _;
        _851 = <ExecutionCost as Clone>::clone(_1891) -> [return: bb452, unwind: bb1040];
    }

    bb452: {
        _850 = blockstack_lib::chainstate::stacks::miner::BlockBuilderSettings::limited(move _851) -> [return: bb453, unwind: bb1040];
    }

    bb453: {
        _852 = _762;
        (_850.1: u64) = move _852;
        _853 = _761;
        ((_850.2: blockstack_lib::core::mempool::MemPoolWalkSettings).0: u64) = move _853;
        _855 = &_798;
        _858 = &_781;
        _857 = SortitionDB::index_conn(move _858) -> [return: bb454, unwind: bb1040];
    }

    bb454: {
        _856 = &_857;
        _859 = &mut _809;
        _860 = &_819;
        _861 = (_804.6: u64);
        _862 = VRFProof::empty() -> [return: bb455, unwind: bb1040];
    }

    bb455: {
        _864 = [const 0_u8; 20];
        _863 = blockstack_lib::util::hash::Hash160(move _864);
        _865 = &_847;
        _866 = move _850;
        _867 = Option::<&dyn MemPoolEventDispatcher>::None;
        _854 = miner::<impl blockstack_lib::chainstate::stacks::StacksBlockBuilder>::build_anchored_block(_855, _856, _859, _860, move _861, move _862, move _863, _865, move _866, move _867) -> [return: bb456, unwind: bb1040];
    }

    bb456: {
        _1975 = const true;
        _868 = get_epoch_time_ms() -> [return: bb457, unwind: bb1149];
    }

    bb457: {
        _1890 = const _;
        _871 = _1890 as &[&str] (PointerCoercion(Unsize));
        _879 = &_854;
        _878 = Result::<(blockstack_lib::chainstate::stacks::StacksBlock, ExecutionCost, u64), blockstack_lib::chainstate::stacks::Error>::is_ok(move _879) -> [return: bb458, unwind: bb1149];
    }

    bb458: {
        switchInt(move _878) -> [0: bb460, otherwise: bb459];
    }

    bb459: {
        _877 = const "Successfully";
        goto -> bb461;
    }

    bb460: {
        _880 = const "Failed to";
        _877 = _880;
        goto -> bb461;
    }

    bb461: {
        _876 = &_877;
        _875 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_876) -> [return: bb462, unwind: bb1149];
    }

    bb462: {
        _884 = (_819.2: u64);
        _885 = CheckedAdd(_884, const 1_u64);
        assert(!move (_885.1: bool), "attempt to compute `{} + {}`, which would overflow", move _884, const 1_u64) -> [success: bb463, unwind: bb1149];
    }

    bb463: {
        _883 = move (_885.0: u64);
        _882 = &_883;
        _881 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_882) -> [return: bb464, unwind: bb1149];
    }

    bb464: {
        _889 = &(_819.4: blockstack_lib::chainstate::burn::ConsensusHash);
        _892 = &(_819.0: blockstack_lib::types::chainstate::StacksBlockHeader);
        _891 = blockstack_lib::chainstate::stacks::block::<impl StacksBlockHeader>::block_hash(move _892) -> [return: bb465, unwind: bb1149];
    }

    bb465: {
        _890 = &_891;
        _888 = blockstack_lib::chainstate::stacks::block::<impl StacksBlockHeader>::make_index_block_hash(_889, _890) -> [return: bb466, unwind: bb1149];
    }

    bb466: {
        _887 = &_888;
        _886 = core::fmt::rt::Argument::<'_>::new_display::<StacksBlockId>(_887) -> [return: bb467, unwind: bb1149];
    }

    bb467: {
        _895 = &(_819.4: blockstack_lib::chainstate::burn::ConsensusHash);
        _894 = &_895;
        _893 = core::fmt::rt::Argument::<'_>::new_display::<&ConsensusHash>(_894) -> [return: bb468, unwind: bb1149];
    }

    bb468: {
        _900 = &(_819.0: blockstack_lib::types::chainstate::StacksBlockHeader);
        _899 = blockstack_lib::chainstate::stacks::block::<impl StacksBlockHeader>::block_hash(move _900) -> [return: bb469, unwind: bb1149];
    }

    bb469: {
        _898 = &_899;
        _897 = &_898;
        _896 = core::fmt::rt::Argument::<'_>::new_display::<&BlockHeaderHash>(_897) -> [return: bb470, unwind: bb1149];
    }

    bb470: {
        _903 = core::num::<impl u128>::saturating_sub(_868, _736) -> [return: bb471, unwind: bb1149];
    }

    bb471: {
        _902 = &_903;
        _901 = core::fmt::rt::Argument::<'_>::new_display::<u128>(_902) -> [return: bb472, unwind: bb1149];
    }

    bb472: {
        _905 = &_761;
        _904 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_905) -> [return: bb473, unwind: bb1149];
    }

    bb473: {
        _907 = &_762;
        _906 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_907) -> [return: bb474, unwind: bb1149];
    }

    bb474: {
        _874 = [move _875, move _881, move _886, move _893, move _896, move _901, move _904, move _906];
        _873 = &_874;
        _872 = _873 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _870 = Arguments::<'_>::new_v1(move _871, move _872) -> [return: bb475, unwind: bb1149];
    }

    bb475: {
        _869 = _print(move _870) -> [return: bb476, unwind: bb1149];
    }

    bb476: {
        _908 = discriminant(_854);
        switchInt(move _908) -> [0: bb477, otherwise: bb494];
    }

    bb477: {
        _1975 = const false;
        _909 = move (((_854 as Ok).0: (blockstack_lib::chainstate::stacks::StacksBlock, blockstack_lib::vm::costs::ExecutionCost, u64)).0: blockstack_lib::chainstate::stacks::StacksBlock);
        _910 = move (((_854 as Ok).0: (blockstack_lib::chainstate::stacks::StacksBlock, blockstack_lib::vm::costs::ExecutionCost, u64)).1: blockstack_lib::vm::costs::ExecutionCost);
        _911 = (((_854 as Ok).0: (blockstack_lib::chainstate::stacks::StacksBlock, blockstack_lib::vm::costs::ExecutionCost, u64)).2: u64);
        _912 = const 0_u64;
        _916 = &(_909.1: std::vec::Vec<blockstack_lib::chainstate::stacks::StacksTransaction>);
        _915 = <Vec<blockstack_lib::chainstate::stacks::StacksTransaction> as Deref>::deref(move _916) -> [return: bb478, unwind: bb1039];
    }

    bb478: {
        _914 = core::slice::<impl [blockstack_lib::chainstate::stacks::StacksTransaction]>::iter(_915) -> [return: bb479, unwind: bb1039];
    }

    bb479: {
        _913 = <std::slice::Iter<'_, blockstack_lib::chainstate::stacks::StacksTransaction> as IntoIterator>::into_iter(move _914) -> [return: bb480, unwind: bb1039];
    }

    bb480: {
        _917 = move _913;
        goto -> bb481;
    }

    bb481: {
        _919 = &mut _917;
        _918 = <std::slice::Iter<'_, blockstack_lib::chainstate::stacks::StacksTransaction> as Iterator>::next(_919) -> [return: bb482, unwind: bb1039];
    }

    bb482: {
        _920 = discriminant(_918);
        switchInt(move _920) -> [0: bb484, 1: bb483, otherwise: bb38];
    }

    bb483: {
        _921 = ((_918 as Some).0: &blockstack_lib::chainstate::stacks::StacksTransaction);
        _922 = blockstack_lib::chainstate::stacks::transaction::<impl blockstack_lib::chainstate::stacks::StacksTransaction>::get_tx_fee(_921) -> [return: bb485, unwind: bb1039];
    }

    bb484: {
        _1889 = const _;
        _926 = _1889 as &[&str] (PointerCoercion(Unsize));
        _933 = &_909;
        _932 = blockstack_lib::chainstate::stacks::block::<impl blockstack_lib::chainstate::stacks::StacksBlock>::block_hash(move _933) -> [return: bb487, unwind: bb1039];
    }

    bb485: {
        _923 = CheckedAdd(_912, _922);
        assert(!move (_923.1: bool), "attempt to compute `{} + {}`, which would overflow", _912, move _922) -> [success: bb486, unwind: bb1039];
    }

    bb486: {
        _912 = move (_923.0: u64);
        goto -> bb481;
    }

    bb487: {
        _931 = &_932;
        _930 = core::fmt::rt::Argument::<'_>::new_display::<BlockHeaderHash>(_931) -> [return: bb488, unwind: bb1039];
    }

    bb488: {
        _935 = &_912;
        _934 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_935) -> [return: bb489, unwind: bb1039];
    }

    bb489: {
        _937 = &_911;
        _936 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_937) -> [return: bb490, unwind: bb1039];
    }

    bb490: {
        _940 = &_910;
        _939 = &_940;
        _938 = core::fmt::rt::Argument::<'_>::new_debug::<&ExecutionCost>(_939) -> [return: bb491, unwind: bb1039];
    }

    bb491: {
        _929 = [move _930, move _934, move _936, move _938];
        _928 = &_929;
        _927 = _928 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _925 = Arguments::<'_>::new_v1(move _926, move _927) -> [return: bb492, unwind: bb1039];
    }

    bb492: {
        _924 = _print(move _925) -> [return: bb493, unwind: bb1039];
    }

    bb493: {
        drop(_909) -> [return: bb494, unwind: bb1149];
    }

    bb494: {
        _941 = exit(const 0_i32) -> bb1149;
    }

    bb495: {
        _944 = &_1;
        _943 = <Vec<std::string::String> as Index<usize>>::index(move _944, const 1_usize) -> [return: bb496, unwind: bb1086];
    }

    bb496: {
        _1941 = const _;
        _942 = <std::string::String as PartialEq<&str>>::eq(_943, _1941) -> [return: bb497, unwind: bb1086];
    }

    bb497: {
        switchInt(move _942) -> [0: bb524, otherwise: bb498];
    }

    bb498: {
        _947 = &_1;
        _946 = Vec::<std::string::String>::len(move _947) -> [return: bb499, unwind: bb1086];
    }

    bb499: {
        _945 = Lt(move _946, const 3_usize);
        switchInt(move _945) -> [0: bb505, otherwise: bb500];
    }

    bb500: {
        _1895 = const _;
        _950 = _1895 as &[&str] (PointerCoercion(Unsize));
        _956 = &_1;
        _955 = <Vec<std::string::String> as Index<usize>>::index(move _956, const 0_usize) -> [return: bb501, unwind: bb1086];
    }

    bb501: {
        _954 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_955) -> [return: bb502, unwind: bb1086];
    }

    bb502: {
        _953 = [move _954];
        _952 = &_953;
        _951 = _952 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _949 = Arguments::<'_>::new_v1(move _950, move _951) -> [return: bb503, unwind: bb1086];
    }

    bb503: {
        _948 = _eprint(move _949) -> [return: bb504, unwind: bb1086];
    }

    bb504: {
        _957 = exit(const 1_i32) -> bb1086;
    }

    bb505: {
        _960 = &_1;
        _959 = <Vec<std::string::String> as Index<usize>>::index(move _960, const 2_usize) -> [return: bb506, unwind: bb1086];
    }

    bb506: {
        _958 = _959;
        _963 = _958;
        _962 = std::fs::read::<&std::string::String>(move _963) -> [return: bb507, unwind: bb1086];
    }

    bb507: {
        _1974 = const true;
        _1897 = const _;
        _969 = _1897 as &[&str] (PointerCoercion(Unsize));
        _974 = &_958;
        _973 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_974) -> [return: bb508, unwind: bb1038];
    }

    bb508: {
        _972 = [move _973];
        _971 = &_972;
        _970 = _971 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _968 = Arguments::<'_>::new_v1(move _969, move _970) -> [return: bb509, unwind: bb1038];
    }

    bb509: {
        _967 = format(move _968) -> [return: bb510, unwind: bb1038];
    }

    bb510: {
        _966 = move _967;
        _965 = &_966;
        _964 = <std::string::String as Deref>::deref(_965) -> [return: bb511, unwind: bb1145];
    }

    bb511: {
        _1974 = const false;
        _961 = Result::<Vec<u8>, std::io::Error>::expect(move _962, _964) -> [return: bb512, unwind: bb1145];
    }

    bb512: {
        _1974 = const false;
        drop(_966) -> [return: bb513, unwind: bb1036];
    }

    bb513: {
        _976 = &_961;
        _975 = std::io::Cursor::<&Vec<u8>>::new(move _976) -> [return: bb514, unwind: bb1036];
    }

    bb514: {
        _978 = &mut _975;
        _977 = LogReader::<'_, std::io::Cursor<&Vec<u8>>>::from_reader(_978) -> [return: bb515, unwind: bb1036];
    }

    bb515: {
        _982 = &mut _977;
        _981 = <Vec<blockstack_lib::chainstate::stacks::StacksMicroblock> as StacksMessageCodec>::consensus_deserialize::<LogReader<'_, std::io::Cursor<&Vec<u8>>>>(_982) -> [return: bb516, unwind: bb1035];
    }

    bb516: {
        _984 = &_977;
        _983 = {closure@src/main.rs:555:22: 555:25} { debug_cursor: move _984 };
        _980 = Result::<Vec<blockstack_lib::chainstate::stacks::StacksMicroblock>, blockstack_lib::codec::Error>::map_err::<(), {closure@src/main.rs:555:22: 555:25}>(move _981, move _983) -> [return: bb517, unwind: bb1035];
    }

    bb517: {
        _979 = Result::<Vec<blockstack_lib::chainstate::stacks::StacksMicroblock>, ()>::unwrap(move _980) -> [return: bb518, unwind: bb1035];
    }

    bb518: {
        _1896 = const _;
        _987 = _1896 as &[&str] (PointerCoercion(Unsize));
        _993 = &_979;
        _992 = &_993;
        _991 = core::fmt::rt::Argument::<'_>::new_debug::<&Vec<blockstack_lib::chainstate::stacks::StacksMicroblock>>(_992) -> [return: bb519, unwind: bb1034];
    }

    bb519: {
        _990 = [move _991];
        _989 = &_990;
        _988 = _989 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _998 = core::fmt::rt::Alignment::Unknown;
        _999 = core::fmt::rt::Count::Implied;
        _1000 = core::fmt::rt::Count::Implied;
        _997 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _998, const 4_u32, move _999, move _1000) -> [return: bb520, unwind: bb1034];
    }

    bb520: {
        _996 = [move _997];
        _995 = &_996;
        _994 = _995 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _1001 = core::fmt::rt::UnsafeArg::new() -> [return: bb521, unwind: bb1034];
    }

    bb521: {
        _986 = Arguments::<'_>::new_v1_formatted(move _987, move _988, move _994, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb522, unwind: bb1034];
    }

    bb522: {
        _985 = _print(move _986) -> [return: bb523, unwind: bb1034];
    }

    bb523: {
        _1002 = exit(const 0_i32) -> bb1034;
    }

    bb524: {
        _1005 = &_1;
        _1004 = <Vec<std::string::String> as Index<usize>>::index(move _1005, const 1_usize) -> [return: bb525, unwind: bb1086];
    }

    bb525: {
        _1940 = const _;
        _1003 = <std::string::String as PartialEq<&str>>::eq(_1004, _1940) -> [return: bb526, unwind: bb1086];
    }

    bb526: {
        switchInt(move _1003) -> [0: bb601, otherwise: bb527];
    }

    bb527: {
        _1008 = &_1;
        _1007 = Vec::<std::string::String>::len(move _1008) -> [return: bb528, unwind: bb1086];
    }

    bb528: {
        _1006 = Lt(move _1007, const 5_usize);
        switchInt(move _1006) -> [0: bb536, otherwise: bb529];
    }

    bb529: {
        _1899 = const _;
        _1011 = _1899 as &[&str] (PointerCoercion(Unsize));
        _1017 = &_1;
        _1016 = <Vec<std::string::String> as Index<usize>>::index(move _1017, const 0_usize) -> [return: bb530, unwind: bb1086];
    }

    bb530: {
        _1015 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_1016) -> [return: bb531, unwind: bb1086];
    }

    bb531: {
        _1014 = [move _1015];
        _1013 = &_1014;
        _1012 = _1013 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1010 = Arguments::<'_>::new_v1(move _1011, move _1012) -> [return: bb532, unwind: bb1086];
    }

    bb532: {
        _1009 = _eprint(move _1010) -> [return: bb533, unwind: bb1086];
    }

    bb533: {
        _1898 = const _;
        _1020 = _1898 as &[&str] (PointerCoercion(Unsize));
        _1019 = Arguments::<'_>::new_const(move _1020) -> [return: bb534, unwind: bb1086];
    }

    bb534: {
        _1018 = _eprint(move _1019) -> [return: bb535, unwind: bb1086];
    }

    bb535: {
        _1021 = exit(const 1_i32) -> bb1086;
    }

    bb536: {
        _1027 = &_1;
        _1026 = Vec::<std::string::String>::len(move _1027) -> [return: bb537, unwind: bb1086];
    }

    bb537: {
        switchInt(move _1026) -> [5: bb538, otherwise: bb546];
    }

    bb538: {
        _1030 = &_1;
        _1029 = <Vec<std::string::String> as Index<usize>>::index(move _1030, const 2_usize) -> [return: bb539, unwind: bb1086];
    }

    bb539: {
        _1028 = _1029;
        _1906 = const _;
        _1034 = _1906 as &[&str] (PointerCoercion(Unsize));
        _1040 = &_1028;
        _1039 = &_1040;
        _1038 = core::fmt::rt::Argument::<'_>::new_display::<&&std::string::String>(_1039) -> [return: bb540, unwind: bb1086];
    }

    bb540: {
        _1037 = [move _1038];
        _1036 = &_1037;
        _1035 = _1036 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1033 = Arguments::<'_>::new_v1(move _1034, move _1035) -> [return: bb541, unwind: bb1086];
    }

    bb541: {
        _1032 = format(move _1033) -> [return: bb542, unwind: bb1086];
    }

    bb542: {
        _1031 = move _1032;
        _1905 = const _;
        _1043 = _1905 as &[&str] (PointerCoercion(Unsize));
        _1049 = &_1028;
        _1048 = &_1049;
        _1047 = core::fmt::rt::Argument::<'_>::new_display::<&&std::string::String>(_1048) -> [return: bb543, unwind: bb1033];
    }

    bb543: {
        _1046 = [move _1047];
        _1045 = &_1046;
        _1044 = _1045 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1042 = Arguments::<'_>::new_v1(move _1043, move _1044) -> [return: bb544, unwind: bb1033];
    }

    bb544: {
        _1041 = format(move _1042) -> [return: bb545, unwind: bb1033];
    }

    bb545: {
        _1025 = (move _1031, move _1041, const 3_usize);
        goto -> bb551;
    }

    bb546: {
        _1052 = &_1;
        _1051 = <Vec<std::string::String> as Index<usize>>::index(move _1052, const 2_usize) -> [return: bb547, unwind: bb1086];
    }

    bb547: {
        _1050 = <std::string::String as ToString>::to_string(_1051) -> [return: bb548, unwind: bb1086];
    }

    bb548: {
        _1055 = &_1;
        _1054 = <Vec<std::string::String> as Index<usize>>::index(move _1055, const 3_usize) -> [return: bb549, unwind: bb1032];
    }

    bb549: {
        _1053 = <std::string::String as ToString>::to_string(_1054) -> [return: bb550, unwind: bb1032];
    }

    bb550: {
        _1025 = (move _1050, move _1053, const 4_usize);
        goto -> bb551;
    }

    bb551: {
        _1022 = move (_1025.0: std::string::String);
        _1023 = move (_1025.1: std::string::String);
        _1024 = (_1025.2: usize);
        _1057 = &_1;
        _1056 = <Vec<std::string::String> as Index<usize>>::index(move _1057, _1024) -> [return: bb552, unwind: bb1030];
    }

    bb552: {
        _1059 = &_1;
        _1061 = CheckedAdd(_1024, const 1_usize);
        assert(!move (_1061.1: bool), "attempt to compute `{} + {}`, which would overflow", _1024, const 1_usize) -> [success: bb553, unwind: bb1030];
    }

    bb553: {
        _1060 = move (_1061.0: usize);
        _1058 = <Vec<std::string::String> as Index<usize>>::index(move _1059, move _1060) -> [return: bb554, unwind: bb1030];
    }

    bb554: {
        _1065 = &_1022;
        _1064 = std::fs::metadata::<&std::string::String>(move _1065) -> [return: bb555, unwind: bb1030];
    }

    bb555: {
        _1063 = &_1064;
        _1062 = Result::<Metadata, std::io::Error>::is_err(move _1063) -> [return: bb556, unwind: bb1029];
    }

    bb556: {
        switchInt(move _1062) -> [0: bb562, otherwise: bb557];
    }

    bb557: {
        drop(_1064) -> [return: bb558, unwind: bb1030];
    }

    bb558: {
        _1900 = const _;
        _1068 = _1900 as &[&str] (PointerCoercion(Unsize));
        _1074 = &_1022;
        _1073 = &_1074;
        _1072 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_1073) -> [return: bb559, unwind: bb1030];
    }

    bb559: {
        _1071 = [move _1072];
        _1070 = &_1071;
        _1069 = _1070 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1067 = Arguments::<'_>::new_v1(move _1068, move _1069) -> [return: bb560, unwind: bb1030];
    }

    bb560: {
        _1066 = _eprint(move _1067) -> [return: bb561, unwind: bb1030];
    }

    bb561: {
        _1075 = exit(const 1_i32) -> bb1030;
    }

    bb562: {
        drop(_1064) -> [return: bb563, unwind: bb1030];
    }

    bb563: {
        _1079 = &_1023;
        _1078 = std::fs::metadata::<&std::string::String>(move _1079) -> [return: bb564, unwind: bb1030];
    }

    bb564: {
        _1077 = &_1078;
        _1076 = Result::<Metadata, std::io::Error>::is_err(move _1077) -> [return: bb565, unwind: bb1028];
    }

    bb565: {
        switchInt(move _1076) -> [0: bb571, otherwise: bb566];
    }

    bb566: {
        drop(_1078) -> [return: bb567, unwind: bb1030];
    }

    bb567: {
        _1901 = const _;
        _1082 = _1901 as &[&str] (PointerCoercion(Unsize));
        _1088 = &_1023;
        _1087 = &_1088;
        _1086 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_1087) -> [return: bb568, unwind: bb1030];
    }

    bb568: {
        _1085 = [move _1086];
        _1084 = &_1085;
        _1083 = _1084 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1081 = Arguments::<'_>::new_v1(move _1082, move _1083) -> [return: bb569, unwind: bb1030];
    }

    bb569: {
        _1080 = _eprint(move _1081) -> [return: bb570, unwind: bb1030];
    }

    bb570: {
        _1089 = exit(const 1_i32) -> bb1030;
    }

    bb571: {
        drop(_1078) -> [return: bb572, unwind: bb1030];
    }

    bb572: {
        _1092 = <std::string::String as Deref>::deref(_1056) -> [return: bb573, unwind: bb1030];
    }

    bb573: {
        _1091 = StacksBlockId::from_hex(_1092) -> [return: bb574, unwind: bb1030];
    }

    bb574: {
        _1093 = const "Bad MARF block hash";
        _1090 = Result::<StacksBlockId, HexError>::expect(move _1091, _1093) -> [return: bb575, unwind: bb1030];
    }

    bb575: {
        _1097 = &_1022;
        _1096 = <std::string::String as Deref>::deref(_1097) -> [return: bb576, unwind: bb1030];
    }

    bb576: {
        _1095 = MARF::<StacksBlockId>::from_path(_1096) -> [return: bb577, unwind: bb1030];
    }

    bb577: {
        _1098 = const "Failed to open MARF";
        _1094 = Result::<MARF<StacksBlockId>, blockstack_lib::chainstate::stacks::index::Error>::expect(move _1095, _1098) -> [return: bb578, unwind: bb1030];
    }

    bb578: {
        _1101 = &mut _1094;
        _1102 = &_1090;
        _1103 = <std::string::String as Deref>::deref(_1058) -> [return: bb579, unwind: bb1027];
    }

    bb579: {
        _1100 = <MARF<StacksBlockId> as MarfConnection<StacksBlockId>>::get(move _1101, _1102, _1103) -> [return: bb580, unwind: bb1027];
    }

    bb580: {
        _1104 = const "Failed to read MARF";
        _1099 = Result::<Option<MARFValue>, blockstack_lib::chainstate::stacks::index::Error>::expect(move _1100, _1104) -> [return: bb581, unwind: bb1027];
    }

    bb581: {
        _1105 = discriminant(_1099);
        switchInt(move _1105) -> [1: bb582, otherwise: bb598];
    }

    bb582: {
        _1106 = ((_1099 as Some).0: blockstack_lib::types::chainstate::MARFValue);
        _1109 = &_1023;
        _1108 = Connection::open_with_flags::<&std::string::String>(move _1109, const _) -> [return: bb583, unwind: bb1027];
    }

    bb583: {
        _1110 = const "Failed to open DB";
        _1107 = Result::<Connection, rusqlite::Error>::expect(move _1108, _1110) -> [return: bb584, unwind: bb1027];
    }

    bb584: {
        _1117 = &_1106;
        _1116 = MARFValue::to_hex(move _1117) -> [return: bb585, unwind: bb1026];
    }

    bb585: {
        _1115 = &_1116;
        _1114 = _1115 as &dyn rusqlite::ToSql (PointerCoercion(Unsize));
        _1113 = [move _1114];
        _1112 = &_1113;
        _1111 = _1112 as &[&dyn rusqlite::ToSql] (PointerCoercion(Unsize));
        _1119 = &_1107;
        _1120 = const "SELECT value FROM __fork_storage WHERE value_hash = ?1";
        _1118 = Connection::query_row_and_then::<std::string::String, rusqlite::Error, &[&dyn ToSql], {closure@src/main.rs:612:17: 612:22}>(move _1119, _1120, _1111, const ZeroSized: {closure@src/main.rs:612:17: 612:22}) -> [return: bb586, unwind: bb1025];
    }

    bb586: {
        _1973 = const true;
        _1122 = move _1118;
        _1904 = const _;
        _1128 = _1904 as &[&str] (PointerCoercion(Unsize));
        _1134 = &_1106;
        _1133 = &_1134;
        _1132 = core::fmt::rt::Argument::<'_>::new_display::<&MARFValue>(_1133) -> [return: bb587, unwind: bb1024];
    }

    bb587: {
        _1131 = [move _1132];
        _1130 = &_1131;
        _1129 = _1130 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1127 = Arguments::<'_>::new_v1(move _1128, move _1129) -> [return: bb588, unwind: bb1024];
    }

    bb588: {
        _1126 = format(move _1127) -> [return: bb589, unwind: bb1024];
    }

    bb589: {
        _1125 = move _1126;
        _1124 = &_1125;
        _1123 = <std::string::String as Deref>::deref(_1124) -> [return: bb590, unwind: bb1143];
    }

    bb590: {
        _1973 = const false;
        _1121 = Result::<std::string::String, rusqlite::Error>::expect(move _1122, _1123) -> [return: bb591, unwind: bb1143];
    }

    bb591: {
        _1973 = const false;
        drop(_1125) -> [return: bb592, unwind: bb1022];
    }

    bb592: {
        _1903 = const _;
        _1137 = _1903 as &[&str] (PointerCoercion(Unsize));
        _1142 = &_1121;
        _1141 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_1142) -> [return: bb593, unwind: bb1022];
    }

    bb593: {
        _1140 = [move _1141];
        _1139 = &_1140;
        _1138 = _1139 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1136 = Arguments::<'_>::new_v1(move _1137, move _1138) -> [return: bb594, unwind: bb1022];
    }

    bb594: {
        _1135 = _print(move _1136) -> [return: bb595, unwind: bb1022];
    }

    bb595: {
        drop(_1121) -> [return: bb596, unwind: bb1025];
    }

    bb596: {
        drop(_1116) -> [return: bb597, unwind: bb1026];
    }

    bb597: {
        drop(_1107) -> [return: bb600, unwind: bb1027];
    }

    bb598: {
        _1902 = const _;
        _1145 = _1902 as &[&str] (PointerCoercion(Unsize));
        _1144 = Arguments::<'_>::new_const(move _1145) -> [return: bb599, unwind: bb1027];
    }

    bb599: {
        _1143 = _print(move _1144) -> [return: bb1171, unwind: bb1027];
    }

    bb600: {
        _1146 = exit(const 0_i32) -> bb1027;
    }

    bb601: {
        _1149 = &_1;
        _1148 = <Vec<std::string::String> as Index<usize>>::index(move _1149, const 1_usize) -> [return: bb602, unwind: bb1086];
    }

    bb602: {
        _1939 = const _;
        _1147 = <std::string::String as PartialEq<&str>>::eq(_1148, _1939) -> [return: bb603, unwind: bb1086];
    }

    bb603: {
        switchInt(move _1147) -> [0: bb633, otherwise: bb604];
    }

    bb604: {
        _1152 = &_1;
        _1151 = Vec::<std::string::String>::len(move _1152) -> [return: bb605, unwind: bb1086];
    }

    bb605: {
        _1150 = Lt(move _1151, const 3_usize);
        switchInt(move _1150) -> [0: bb611, otherwise: bb606];
    }

    bb606: {
        _1907 = const _;
        _1155 = _1907 as &[&str] (PointerCoercion(Unsize));
        _1161 = &_1;
        _1160 = <Vec<std::string::String> as Index<usize>>::index(move _1161, const 0_usize) -> [return: bb607, unwind: bb1086];
    }

    bb607: {
        _1159 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_1160) -> [return: bb608, unwind: bb1086];
    }

    bb608: {
        _1158 = [move _1159];
        _1157 = &_1158;
        _1156 = _1157 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1154 = Arguments::<'_>::new_v1(move _1155, move _1156) -> [return: bb609, unwind: bb1086];
    }

    bb609: {
        _1153 = _eprint(move _1154) -> [return: bb610, unwind: bb1086];
    }

    bb610: {
        _1162 = exit(const 1_i32) -> bb1086;
    }

    bb611: {
        _1166 = &_1;
        _1165 = <Vec<std::string::String> as Index<usize>>::index(move _1166, const 2_usize) -> [return: bb612, unwind: bb1086];
    }

    bb612: {
        _1164 = std::fs::read_to_string::<&std::string::String>(_1165) -> [return: bb613, unwind: bb1086];
    }

    bb613: {
        _1972 = const true;
        _1911 = const _;
        _1172 = _1911 as &[&str] (PointerCoercion(Unsize));
        _1178 = &_1;
        _1177 = <Vec<std::string::String> as Index<usize>>::index(move _1178, const 2_usize) -> [return: bb614, unwind: bb1021];
    }

    bb614: {
        _1176 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_1177) -> [return: bb615, unwind: bb1021];
    }

    bb615: {
        _1175 = [move _1176];
        _1174 = &_1175;
        _1173 = _1174 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1171 = Arguments::<'_>::new_v1(move _1172, move _1173) -> [return: bb616, unwind: bb1021];
    }

    bb616: {
        _1170 = format(move _1171) -> [return: bb617, unwind: bb1021];
    }

    bb617: {
        _1169 = move _1170;
        _1168 = &_1169;
        _1167 = <std::string::String as Deref>::deref(_1168) -> [return: bb618, unwind: bb1141];
    }

    bb618: {
        _1972 = const false;
        _1163 = Result::<std::string::String, std::io::Error>::expect(move _1164, _1167) -> [return: bb619, unwind: bb1141];
    }

    bb619: {
        _1972 = const false;
        drop(_1169) -> [return: bb620, unwind: bb1019];
    }

    bb620: {
        _1181 = &_1163;
        _1180 = <std::string::String as Deref>::deref(_1181) -> [return: bb621, unwind: bb1019];
    }

    bb621: {
        _1179 = execute(_1180) -> [return: bb622, unwind: bb1019];
    }

    bb622: {
        _1183 = discriminant(_1179);
        switchInt(move _1183) -> [0: bb623, 1: bb624, otherwise: bb38];
    }

    bb623: {
        _1182 = discriminant(((_1179 as Ok).0: std::option::Option<blockstack_lib::vm::Value>));
        switchInt(move _1182) -> [0: bb629, 1: bb625, otherwise: bb38];
    }

    bb624: {
        _1196 = move ((_1179 as Err).0: blockstack_lib::vm::errors::Error);
        _1908 = const _;
        _1199 = _1908 as &[&str] (PointerCoercion(Unsize));
        _1204 = &_1196;
        _1203 = core::fmt::rt::Argument::<'_>::new_display::<blockstack_lib::vm::errors::Error>(_1204) -> [return: bb631, unwind: bb1017];
    }

    bb625: {
        _1184 = move ((((_1179 as Ok).0: std::option::Option<blockstack_lib::vm::Value>) as Some).0: blockstack_lib::vm::Value);
        _1910 = const _;
        _1187 = _1910 as &[&str] (PointerCoercion(Unsize));
        _1192 = &_1184;
        _1191 = core::fmt::rt::Argument::<'_>::new_display::<blockstack_lib::vm::Value>(_1192) -> [return: bb626, unwind: bb1018];
    }

    bb626: {
        _1190 = [move _1191];
        _1189 = &_1190;
        _1188 = _1189 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1186 = Arguments::<'_>::new_v1(move _1187, move _1188) -> [return: bb627, unwind: bb1018];
    }

    bb627: {
        _1185 = _print(move _1186) -> [return: bb628, unwind: bb1018];
    }

    bb628: {
        drop(_1184) -> [return: bb1096, unwind: bb1139];
    }

    bb629: {
        _1909 = const _;
        _1195 = _1909 as &[&str] (PointerCoercion(Unsize));
        _1194 = Arguments::<'_>::new_const(move _1195) -> [return: bb630, unwind: bb1139];
    }

    bb630: {
        _1193 = _print(move _1194) -> [return: bb1172, unwind: bb1139];
    }

    bb631: {
        _1202 = [move _1203];
        _1201 = &_1202;
        _1200 = _1201 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1198 = Arguments::<'_>::new_v1(move _1199, move _1200) -> [return: bb632, unwind: bb1017];
    }

    bb632: {
        _1197 = panic_fmt(move _1198) -> bb1017;
    }

    bb633: {
        _1207 = &_1;
        _1206 = <Vec<std::string::String> as Index<usize>>::index(move _1207, const 1_usize) -> [return: bb634, unwind: bb1086];
    }

    bb634: {
        _1938 = const _;
        _1205 = <std::string::String as PartialEq<&str>>::eq(_1206, _1938) -> [return: bb635, unwind: bb1086];
    }

    bb635: {
        switchInt(move _1205) -> [0: bb660, otherwise: bb636];
    }

    bb636: {
        _1209 = &_1;
        _1208 = <Vec<std::string::String> as Index<usize>>::index(move _1209, const 2_usize) -> [return: bb637, unwind: bb1086];
    }

    bb637: {
        _1214 = &_1;
        _1213 = <Vec<std::string::String> as Index<usize>>::index(move _1214, const 3_usize) -> [return: bb638, unwind: bb1086];
    }

    bb638: {
        _1212 = <std::string::String as Deref>::deref(_1213) -> [return: bb639, unwind: bb1086];
    }

    bb639: {
        _1211 = BlockHeaderHash::from_hex(_1212) -> [return: bb640, unwind: bb1086];
    }

    bb640: {
        _1210 = Result::<BlockHeaderHash, HexError>::unwrap(move _1211) -> [return: bb641, unwind: bb1086];
    }

    bb641: {
        _1219 = &_1;
        _1218 = <Vec<std::string::String> as Index<usize>>::index(move _1219, const 4_usize) -> [return: bb642, unwind: bb1086];
    }

    bb642: {
        _1217 = <std::string::String as Deref>::deref(_1218) -> [return: bb643, unwind: bb1086];
    }

    bb643: {
        _1216 = ConsensusHash::from_hex(_1217) -> [return: bb644, unwind: bb1086];
    }

    bb644: {
        _1215 = Result::<ConsensusHash, HexError>::unwrap(move _1216) -> [return: bb645, unwind: bb1086];
    }

    bb645: {
        _1221 = &_1215;
        _1222 = &_1210;
        _1220 = blockstack_lib::chainstate::stacks::block::<impl StacksBlockHeader>::make_index_block_hash(_1221, _1222) -> [return: bb646, unwind: bb1086];
    }

    bb646: {
        _1224 = &_1;
        _1223 = <Vec<std::string::String> as Index<usize>>::index(move _1224, const 5_usize) -> [return: bb647, unwind: bb1086];
    }

    bb647: {
        _1227 = <std::string::String as Deref>::deref(_1208) -> [return: bb648, unwind: bb1086];
    }

    bb648: {
        _1226 = MARF::<StacksBlockId>::from_path(_1227) -> [return: bb649, unwind: bb1086];
    }

    bb649: {
        _1225 = Result::<MARF<StacksBlockId>, blockstack_lib::chainstate::stacks::index::Error>::unwrap(move _1226) -> [return: bb650, unwind: bb1086];
    }

    bb650: {
        _1230 = &mut _1225;
        _1231 = &_1220;
        _1232 = <std::string::String as Deref>::deref(_1223) -> [return: bb651, unwind: bb1016];
    }

    bb651: {
        _1229 = <MARF<StacksBlockId> as MarfConnection<StacksBlockId>>::get(move _1230, _1231, _1232) -> [return: bb652, unwind: bb1016];
    }

    bb652: {
        _1233 = const "MARF error.";
        _1228 = Result::<Option<MARFValue>, blockstack_lib::chainstate::stacks::index::Error>::expect(move _1229, _1233) -> [return: bb653, unwind: bb1016];
    }

    bb653: {
        _1234 = discriminant(_1228);
        switchInt(move _1234) -> [0: bb654, 1: bb655, otherwise: bb38];
    }

    bb654: {
        _1912 = const _;
        _1246 = _1912 as &[&str] (PointerCoercion(Unsize));
        _1245 = Arguments::<'_>::new_const(move _1246) -> [return: bb658, unwind: bb1016];
    }

    bb655: {
        _1235 = ((_1228 as Some).0: blockstack_lib::types::chainstate::MARFValue);
        _1913 = const _;
        _1238 = _1913 as &[&str] (PointerCoercion(Unsize));
        _1243 = &_1235;
        _1242 = core::fmt::rt::Argument::<'_>::new_display::<MARFValue>(_1243) -> [return: bb656, unwind: bb1016];
    }

    bb656: {
        _1241 = [move _1242];
        _1240 = &_1241;
        _1239 = _1240 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1237 = Arguments::<'_>::new_v1(move _1238, move _1239) -> [return: bb657, unwind: bb1016];
    }

    bb657: {
        _1236 = _print(move _1237) -> [return: bb1173, unwind: bb1016];
    }

    bb658: {
        _1244 = _print(move _1245) -> [return: bb1174, unwind: bb1016];
    }

    bb659: {
        drop(_1225) -> [return: bb985, unwind: bb1086];
    }

    bb660: {
        _1249 = &_1;
        _1248 = <Vec<std::string::String> as Index<usize>>::index(move _1249, const 1_usize) -> [return: bb661, unwind: bb1086];
    }

    bb661: {
        _1937 = const _;
        _1247 = <std::string::String as PartialEq<&str>>::eq(_1248, _1937) -> [return: bb662, unwind: bb1086];
    }

    bb662: {
        switchInt(move _1247) -> [0: bb690, otherwise: bb663];
    }

    bb663: {
        _1251 = &_1;
        _1250 = <Vec<std::string::String> as Index<usize>>::index(move _1251, const 2_usize) -> [return: bb664, unwind: bb1086];
    }

    bb664: {
        _1256 = &_1;
        _1255 = <Vec<std::string::String> as Index<usize>>::index(move _1256, const 3_usize) -> [return: bb665, unwind: bb1086];
    }

    bb665: {
        _1254 = <std::string::String as Deref>::deref(_1255) -> [return: bb666, unwind: bb1086];
    }

    bb666: {
        _1253 = BlockHeaderHash::from_hex(_1254) -> [return: bb667, unwind: bb1086];
    }

    bb667: {
        _1252 = Result::<BlockHeaderHash, HexError>::unwrap(move _1253) -> [return: bb668, unwind: bb1086];
    }

    bb668: {
        _1261 = &_1;
        _1260 = <Vec<std::string::String> as Index<usize>>::index(move _1261, const 4_usize) -> [return: bb669, unwind: bb1086];
    }

    bb669: {
        _1259 = <std::string::String as Deref>::deref(_1260) -> [return: bb670, unwind: bb1086];
    }

    bb670: {
        _1258 = blockstack_lib::types::chainstate::BurnchainHeaderHash::from_hex(_1259) -> [return: bb671, unwind: bb1086];
    }

    bb671: {
        _1257 = Result::<blockstack_lib::types::chainstate::BurnchainHeaderHash, HexError>::unwrap(move _1258) -> [return: bb672, unwind: bb1086];
    }

    bb672: {
        _1263 = Connection::open::<&std::string::String>(_1250) -> [return: bb673, unwind: bb1086];
    }

    bb673: {
        _1262 = Result::<Connection, rusqlite::Error>::unwrap(move _1263) -> [return: bb674, unwind: bb1086];
    }

    bb674: {
        _1265 = &_1257;
        _1264 = <blockstack_lib::types::chainstate::BurnchainHeaderHash as Clone>::clone(move _1265) -> [return: bb675, unwind: bb1015];
    }

    bb675: {
        _1267 = &_1252;
        _1266 = <BlockHeaderHash as Clone>::clone(move _1267) -> [return: bb1175, unwind: bb1015];
    }

    bb676: {
        _1915 = const _;
        _1270 = _1915 as &[&str] (PointerCoercion(Unsize));
        _1275 = &_1264;
        _1274 = core::fmt::rt::Argument::<'_>::new_display::<blockstack_lib::types::chainstate::BurnchainHeaderHash>(_1275) -> [return: bb677, unwind: bb1015];
    }

    bb677: {
        _1277 = &_1266;
        _1276 = core::fmt::rt::Argument::<'_>::new_display::<BlockHeaderHash>(_1277) -> [return: bb678, unwind: bb1015];
    }

    bb678: {
        _1273 = [move _1274, move _1276];
        _1272 = &_1273;
        _1271 = _1272 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1269 = Arguments::<'_>::new_v1(move _1270, move _1271) -> [return: bb679, unwind: bb1015];
    }

    bb679: {
        _1268 = _print(move _1269) -> [return: bb680, unwind: bb1015];
    }

    bb680: {
        _1281 = &_1262;
        _1282 = const "SELECT parent_burn_header_hash, parent_anchored_block_hash FROM staging_blocks WHERE anchored_block_hash = ? and burn_header_hash = ?";
        _1286 = &_1266;
        _1285 = _1286 as &dyn rusqlite::ToSql (PointerCoercion(Unsize));
        _1288 = &_1264;
        _1287 = _1288 as &dyn rusqlite::ToSql (PointerCoercion(Unsize));
        _1284 = [_1285, move _1287];
        _1283 = &_1284;
        _1280 = Connection::query_row::<(blockstack_lib::types::chainstate::BurnchainHeaderHash, BlockHeaderHash), &[&dyn ToSql; 2], {closure@src/main.rs:674:87: 674:92}>(move _1281, _1282, move _1283, const ZeroSized: {closure@src/main.rs:674:87: 674:92}) -> [return: bb681, unwind: bb1015];
    }

    bb681: {
        _1289 = discriminant(_1280);
        switchInt(move _1289) -> [0: bb683, 1: bb682, otherwise: bb38];
    }

    bb682: {
        _1960 = const true;
        _1291 = move ((_1280 as Err).0: rusqlite::Error);
        _1292 = discriminant(_1291);
        switchInt(move _1292) -> [9: bb688, otherwise: bb684];
    }

    bb683: {
        _1290 = ((_1280 as Ok).0: (blockstack_lib::types::chainstate::BurnchainHeaderHash, blockstack_lib::types::chainstate::BlockHeaderHash));
        _1278 = (_1290.0: blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1279 = (_1290.1: blockstack_lib::types::chainstate::BlockHeaderHash);
        _1264 = _1278;
        _1266 = _1279;
        goto -> bb676;
    }

    bb684: {
        _1960 = const false;
        _1293 = move _1291;
        _1914 = const _;
        _1296 = _1914 as &[&str] (PointerCoercion(Unsize));
        _1301 = &_1293;
        _1300 = core::fmt::rt::Argument::<'_>::new_display::<rusqlite::Error>(_1301) -> [return: bb685, unwind: bb1014];
    }

    bb685: {
        _1299 = [move _1300];
        _1298 = &_1299;
        _1297 = _1298 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1295 = Arguments::<'_>::new_v1(move _1296, move _1297) -> [return: bb686, unwind: bb1014];
    }

    bb686: {
        _1294 = _eprint(move _1295) -> [return: bb687, unwind: bb1014];
    }

    bb687: {
        drop(_1293) -> [return: bb688, unwind: bb1015];
    }

    bb688: {
        switchInt(_1960) -> [0: bb689, otherwise: bb1097];
    }

    bb689: {
        _1960 = const false;
        drop(_1262) -> [return: bb985, unwind: bb1086];
    }

    bb690: {
        _1304 = &_1;
        _1303 = <Vec<std::string::String> as Index<usize>>::index(move _1304, const 1_usize) -> [return: bb691, unwind: bb1086];
    }

    bb691: {
        _1936 = const _;
        _1302 = <std::string::String as PartialEq<&str>>::eq(_1303, _1936) -> [return: bb692, unwind: bb1086];
    }

    bb692: {
        switchInt(move _1302) -> [0: bb698, otherwise: bb693];
    }

    bb693: {
        _1916 = const _;
        _1307 = _1916 as &[&str] (PointerCoercion(Unsize));
        _1313 = make_json_api_reference() -> [return: bb694, unwind: bb1086];
    }

    bb694: {
        _1312 = &_1313;
        _1311 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_1312) -> [return: bb695, unwind: bb1013];
    }

    bb695: {
        _1310 = [move _1311];
        _1309 = &_1310;
        _1308 = _1309 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1306 = Arguments::<'_>::new_v1(move _1307, move _1308) -> [return: bb696, unwind: bb1013];
    }

    bb696: {
        _1305 = _print(move _1306) -> [return: bb697, unwind: bb1013];
    }

    bb697: {
        drop(_1313) -> [return: bb985, unwind: bb1086];
    }

    bb698: {
        _1316 = &_1;
        _1315 = <Vec<std::string::String> as Index<usize>>::index(move _1316, const 1_usize) -> [return: bb699, unwind: bb1086];
    }

    bb699: {
        _1935 = const _;
        _1314 = <std::string::String as PartialEq<&str>>::eq(_1315, _1935) -> [return: bb700, unwind: bb1086];
    }

    bb700: {
        switchInt(move _1314) -> [0: bb706, otherwise: bb701];
    }

    bb701: {
        _1917 = const _;
        _1319 = _1917 as &[&str] (PointerCoercion(Unsize));
        _1325 = make_json_boot_contracts_reference() -> [return: bb702, unwind: bb1086];
    }

    bb702: {
        _1324 = &_1325;
        _1323 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_1324) -> [return: bb703, unwind: bb1012];
    }

    bb703: {
        _1322 = [move _1323];
        _1321 = &_1322;
        _1320 = _1321 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1318 = Arguments::<'_>::new_v1(move _1319, move _1320) -> [return: bb704, unwind: bb1012];
    }

    bb704: {
        _1317 = _print(move _1318) -> [return: bb705, unwind: bb1012];
    }

    bb705: {
        drop(_1325) -> [return: bb985, unwind: bb1086];
    }

    bb706: {
        _1328 = &_1;
        _1327 = <Vec<std::string::String> as Index<usize>>::index(move _1328, const 1_usize) -> [return: bb707, unwind: bb1086];
    }

    bb707: {
        _1934 = const _;
        _1326 = <std::string::String as PartialEq<&str>>::eq(_1327, _1934) -> [return: bb708, unwind: bb1086];
    }

    bb708: {
        switchInt(move _1326) -> [0: bb720, otherwise: bb709];
    }

    bb709: {
        _1918 = const _;
        _1335 = _1918 as &[&str] (PointerCoercion(Unsize));
        _1341 = &_1;
        _1340 = <Vec<std::string::String> as Index<usize>>::index(move _1341, const 0_usize) -> [return: bb710, unwind: bb1086];
    }

    bb710: {
        _1339 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_1340) -> [return: bb711, unwind: bb1086];
    }

    bb711: {
        _1344 = &_1;
        _1343 = <Vec<std::string::String> as Index<usize>>::index(move _1344, const 1_usize) -> [return: bb712, unwind: bb1086];
    }

    bb712: {
        _1342 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_1343) -> [return: bb713, unwind: bb1086];
    }

    bb713: {
        _1338 = [move _1339, move _1342];
        _1337 = &_1338;
        _1336 = _1337 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1334 = Arguments::<'_>::new_v1(move _1335, move _1336) -> [return: bb714, unwind: bb1086];
    }

    bb714: {
        _1333 = format(move _1334) -> [return: bb715, unwind: bb1086];
    }

    bb715: {
        _1332 = move _1333;
        _1331 = &_1332;
        _1330 = <std::string::String as Deref>::deref(_1331) -> [return: bb716, unwind: bb1011];
    }

    bb716: {
        _1346 = &_1;
        _1347 = RangeFrom::<usize> { start: const 2_usize };
        _1345 = <Vec<std::string::String> as Index<RangeFrom<usize>>>::index(move _1346, move _1347) -> [return: bb717, unwind: bb1011];
    }

    bb717: {
        _1329 = invoke_command(_1330, _1345) -> [return: bb718, unwind: bb1011];
    }

    bb718: {
        drop(_1329) -> [return: bb719, unwind: bb1011];
    }

    bb719: {
        drop(_1332) -> [return: bb985, unwind: bb1086];
    }

    bb720: {
        _1350 = &_1;
        _1349 = <Vec<std::string::String> as Index<usize>>::index(move _1350, const 1_usize) -> [return: bb721, unwind: bb1086];
    }

    bb721: {
        _1933 = const _;
        _1348 = <std::string::String as PartialEq<&str>>::eq(_1349, _1933) -> [return: bb722, unwind: bb1086];
    }

    bb722: {
        switchInt(move _1348) -> [0: bb740, otherwise: bb723];
    }

    bb723: {
        _1352 = &_1;
        _1351 = <Vec<std::string::String> as Index<usize>>::index(move _1352, const 2_usize) -> [return: bb724, unwind: bb1086];
    }

    bb724: {
        _1354 = &_1;
        _1353 = <Vec<std::string::String> as Index<usize>>::index(move _1354, const 3_usize) -> [return: bb725, unwind: bb1086];
    }

    bb725: {
        _1358 = <std::string::String as Deref>::deref(_1351) -> [return: bb726, unwind: bb1086];
    }

    bb726: {
        _1357 = StacksChainState::open(const false, const 2147483648_u32, _1358) -> [return: bb727, unwind: bb1086];
    }

    bb727: {
        _1356 = Result::<(StacksChainState, Vec<StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>::unwrap(move _1357) -> [return: bb728, unwind: bb1086];
    }

    bb728: {
        _1355 = move (_1356.0: blockstack_lib::chainstate::stacks::db::StacksChainState);
        drop((_1356.1: std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>)) -> [return: bb1098, unwind: bb1010];
    }

    bb729: {
        _1360 = SortitionDB::open(_1361, const true) -> [return: bb730, unwind: bb1010];
    }

    bb730: {
        _1359 = Result::<SortitionDB, blockstack_lib::util::db::Error>::unwrap(move _1360) -> [return: bb731, unwind: bb1010];
    }

    bb731: {
        _1366 = &_1359;
        _1365 = SortitionDB::conn(move _1366) -> [return: bb732, unwind: bb1009];
    }

    bb732: {
        _1364 = SortitionDB::get_canonical_burn_chain_tip(_1365) -> [return: bb733, unwind: bb1009];
    }

    bb733: {
        _1363 = Result::<BlockSnapshot, blockstack_lib::util::db::Error>::unwrap(move _1364) -> [return: bb734, unwind: bb1009];
    }

    bb734: {
        _1362 = (_1363.19: blockstack_lib::types::chainstate::SortitionId);
        _1369 = &mut _1359;
        _1370 = &_1362;
        _1368 = SortitionDB::tx_handle_begin(move _1369, _1370) -> [return: bb735, unwind: bb1009];
    }

    bb735: {
        _1367 = Result::<IndexDBTx<'_, SortitionHandleContext, SortitionId>, blockstack_lib::util::db::Error>::unwrap(move _1368) -> [return: bb736, unwind: bb1009];
    }

    bb736: {
        _1373 = &mut _1355;
        _1374 = &mut _1367;
        _1372 = blockstack_lib::chainstate::stacks::db::blocks::<impl StacksChainState>::process_next_staging_block(move _1373, _1374) -> [return: bb737, unwind: bb1008];
    }

    bb737: {
        _1371 = Result::<(Option<StacksEpochReceipt>, Option<blockstack_lib::chainstate::stacks::TransactionPayload>), blockstack_lib::chainstate::stacks::Error>::unwrap(move _1372) -> [return: bb738, unwind: bb1008];
    }

    bb738: {
        drop(_1371) -> [return: bb739, unwind: bb1008];
    }

    bb739: {
        drop(_1367) -> [return: bb983, unwind: bb1009];
    }

    bb740: {
        _1377 = &_1;
        _1376 = <Vec<std::string::String> as Index<usize>>::index(move _1377, const 1_usize) -> [return: bb741, unwind: bb1086];
    }

    bb741: {
        _1932 = const _;
        _1375 = <std::string::String as PartialEq<&str>>::eq(_1376, _1932) -> [return: bb742, unwind: bb1086];
    }

    bb742: {
        switchInt(move _1375) -> [0: bb966, otherwise: bb743];
    }

    bb743: {
        _1380 = &_1;
        _1379 = Vec::<std::string::String>::len(move _1380) -> [return: bb744, unwind: bb1086];
    }

    bb744: {
        _1378 = Lt(move _1379, const 7_usize);
        switchInt(move _1378) -> [0: bb750, otherwise: bb745];
    }

    bb745: {
        _1919 = const _;
        _1383 = _1919 as &[&str] (PointerCoercion(Unsize));
        _1391 = &_1;
        _1390 = <Vec<std::string::String> as Index<usize>>::index(move _1391, const 0_usize) -> [return: bb746, unwind: bb1086];
    }

    bb746: {
        _1389 = _1390;
        _1388 = &_1389;
        _1387 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_1388) -> [return: bb747, unwind: bb1086];
    }

    bb747: {
        _1386 = [move _1387];
        _1385 = &_1386;
        _1384 = _1385 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1382 = Arguments::<'_>::new_v1(move _1383, move _1384) -> [return: bb748, unwind: bb1086];
    }

    bb748: {
        _1381 = _eprint(move _1382) -> [return: bb749, unwind: bb1086];
    }

    bb749: {
        _1392 = exit(const 1_i32) -> bb1086;
    }

    bb750: {
        _1394 = &_1;
        _1393 = <Vec<std::string::String> as Index<usize>>::index(move _1394, const 2_usize) -> [return: bb751, unwind: bb1086];
    }

    bb751: {
        _1396 = &_1;
        _1395 = <Vec<std::string::String> as Index<usize>>::index(move _1396, const 3_usize) -> [return: bb752, unwind: bb1086];
    }

    bb752: {
        _1399 = &_1;
        _1398 = <Vec<std::string::String> as Index<usize>>::index(move _1399, const 4_usize) -> [return: bb753, unwind: bb1086];
    }

    bb753: {
        _1397 = _1398;
        _1401 = &_1;
        _1400 = <Vec<std::string::String> as Index<usize>>::index(move _1401, const 5_usize) -> [return: bb754, unwind: bb1086];
    }

    bb754: {
        _1404 = &_1;
        _1403 = <Vec<std::string::String> as Index<usize>>::index(move _1404, const 6_usize) -> [return: bb755, unwind: bb1086];
    }

    bb755: {
        _1402 = _1403;
        _1408 = <std::string::String as Deref>::deref(_1393) -> [return: bb756, unwind: bb1086];
    }

    bb756: {
        _1407 = StacksChainState::open(const false, const 2147483648_u32, _1408) -> [return: bb757, unwind: bb1086];
    }

    bb757: {
        _1406 = Result::<(StacksChainState, Vec<StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>::unwrap(move _1407) -> [return: bb758, unwind: bb1086];
    }

    bb758: {
        _1405 = move (_1406.0: blockstack_lib::chainstate::stacks::db::StacksChainState);
        drop((_1406.1: std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>)) -> [return: bb1099, unwind: bb1007];
    }

    bb759: {
        _1410 = SortitionDB::open(_1411, const true) -> [return: bb760, unwind: bb1007];
    }

    bb760: {
        _1409 = Result::<SortitionDB, blockstack_lib::util::db::Error>::unwrap(move _1410) -> [return: bb761, unwind: bb1007];
    }

    bb761: {
        _1415 = SizeOf([(blockstack_lib::vm::types::PrincipalData, u64); 4]);
        _1416 = AlignOf([(blockstack_lib::vm::types::PrincipalData, u64); 4]);
        _1417 = alloc::alloc::exchange_malloc(move _1415, move _1416) -> [return: bb762, unwind: bb1006];
    }

    bb762: {
        _1418 = ShallowInitBox(move _1417, [(blockstack_lib::vm::types::PrincipalData, u64); 4]);
        _1424 = const "ST2QKZ4FKHAH1NQKYKYAYZPY440FEPK7GZ1R5HBP2";
        _1423 = <StacksAddress as blockstack_lib::burnchains::Address>::from_string(_1424) -> [return: bb763, unwind: bb1138];
    }

    bb763: {
        _1422 = Option::<StacksAddress>::unwrap(move _1423) -> [return: bb764, unwind: bb1138];
    }

    bb764: {
        _1421 = &_1422;
        _1420 = blockstack_lib::chainstate::stacks::address::<impl StacksAddress>::to_account_principal(move _1421) -> [return: bb765, unwind: bb1138];
    }

    bb765: {
        _1419 = (move _1420, const 10000000000000000_u64);
        _1430 = const "ST319CF5WV77KYR1H3GT0GZ7B8Q4AQPY42ETP1VPF";
        _1429 = <StacksAddress as blockstack_lib::burnchains::Address>::from_string(_1430) -> [return: bb766, unwind: bb1005];
    }

    bb766: {
        _1428 = Option::<StacksAddress>::unwrap(move _1429) -> [return: bb767, unwind: bb1005];
    }

    bb767: {
        _1427 = &_1428;
        _1426 = blockstack_lib::chainstate::stacks::address::<impl StacksAddress>::to_account_principal(move _1427) -> [return: bb768, unwind: bb1005];
    }

    bb768: {
        _1425 = (move _1426, const 10000000000000000_u64);
        _1436 = const "ST221Z6TDTC5E0BYR2V624Q2ST6R0Q71T78WTAX6H";
        _1435 = <StacksAddress as blockstack_lib::burnchains::Address>::from_string(_1436) -> [return: bb769, unwind: bb1004];
    }

    bb769: {
        _1434 = Option::<StacksAddress>::unwrap(move _1435) -> [return: bb770, unwind: bb1004];
    }

    bb770: {
        _1433 = &_1434;
        _1432 = blockstack_lib::chainstate::stacks::address::<impl StacksAddress>::to_account_principal(move _1433) -> [return: bb771, unwind: bb1004];
    }

    bb771: {
        _1431 = (move _1432, const 10000000000000000_u64);
        _1442 = const "ST2TFVBMRPS5SSNP98DQKQ5JNB2B6NZM91C4K3P7B";
        _1441 = <StacksAddress as blockstack_lib::burnchains::Address>::from_string(_1442) -> [return: bb772, unwind: bb1003];
    }

    bb772: {
        _1440 = Option::<StacksAddress>::unwrap(move _1441) -> [return: bb773, unwind: bb1003];
    }

    bb773: {
        _1439 = &_1440;
        _1438 = blockstack_lib::chainstate::stacks::address::<impl StacksAddress>::to_account_principal(move _1439) -> [return: bb774, unwind: bb1003];
    }

    bb774: {
        _1437 = (move _1438, const 10000000000000000_u64);
        _1994 = (((_1418.0: std::ptr::Unique<[(blockstack_lib::vm::types::PrincipalData, u64); 4]>).0: std::ptr::NonNull<[(blockstack_lib::vm::types::PrincipalData, u64); 4]>).0: *const [(blockstack_lib::vm::types::PrincipalData, u64); 4]);
        _1995 = _1994 as *const () (PtrToPtr);
        _1996 = _1995 as usize (Transmute);
        _1997 = AlignOf([(blockstack_lib::vm::types::PrincipalData, u64); 4]);
        _1998 = Sub(_1997, const 1_usize);
        _1999 = BitAnd(_1996, _1998);
        _2000 = Eq(_1999, const 0_usize);
        assert(_2000, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1997, _1996) -> [success: bb1164, unwind unreachable];
    }

    bb775: {
        _1971 = const true;
        _1443 = ExecutionCost { write_length: const 150000000_u64, write_count: const 50000_u64, read_length: const 1000000000_u64, read_count: const 50000_u64, runtime: const 100000000_u64 };
        _1446 = &_1402;
        _1957 = deref_copy (*_1446);
        _1445 = <std::string::String as Deref>::deref(_1957) -> [return: bb776, unwind: bb1137];
    }

    bb776: {
        _1444 = burnchain::<impl Burnchain>::regtest(_1445) -> [return: bb777, unwind: bb1137];
    }

    bb777: {
        _1447 = (_1444.7: u64);
        _1448 = (_1444.8: blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1452 = &_1444;
        _1453 = _1448;
        _1454 = <u32 as Into<u64>>::into(const _) -> [return: bb778, unwind: bb1002];
    }

    bb778: {
        _1451 = burnchain::<impl Burnchain>::connect_db(move _1452, const true, move _1453, move _1454) -> [return: bb779, unwind: bb1002];
    }

    bb779: {
        _1450 = Result::<(SortitionDB, BurnchainDB), blockstack_lib::burnchains::Error>::unwrap(move _1451) -> [return: bb780, unwind: bb1002];
    }

    bb780: {
        _1449 = move (_1450.0: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB);
        drop((_1450.1: blockstack_lib::burnchains::db::BurnchainDB)) -> [return: bb1100, unwind: bb1001];
    }

    bb781: {
        _1459 = &_1448;
        _1460 = <u32 as Into<u64>>::into(const _) -> [return: bb782, unwind: bb1001];
    }

    bb782: {
        _1456 = BurnchainDB::connect(_1457, _1447, _1459, move _1460, const true) -> [return: bb783, unwind: bb1001];
    }

    bb783: {
        _1455 = Result::<BurnchainDB, blockstack_lib::burnchains::Error>::unwrap(move _1456) -> [return: bb784, unwind: bb1001];
    }

    bb784: {
        _1971 = const false;
        _1462 = move _1412;
        _1463 = Option::<Box<dyn for<'a, 'b> FnOnce(&'a mut ClarityTx<'b>)>>::None;
        _1464 = _1448;
        _1465 = _1447 as u32 (IntToInt);
        _1466 = PoxConstants::regtest_default() -> [return: bb785, unwind: bb998];
    }

    bb785: {
        _1467 = Option::<Box<dyn FnOnce() -> Box<dyn Iterator<Item = ChainstateAccountLockup>>>>::None;
        _1468 = Option::<Box<dyn FnOnce() -> Box<dyn Iterator<Item = ChainstateAccountBalance>>>>::None;
        _1469 = Option::<Box<dyn FnOnce() -> Box<dyn Iterator<Item = ChainstateBNSNamespace>>>>::None;
        _1470 = Option::<Box<dyn FnOnce() -> Box<dyn Iterator<Item = ChainstateBNSName>>>>::None;
        _1461 = ChainStateBootData { first_burnchain_block_hash: move _1464, first_burnchain_block_height: move _1465, first_burnchain_block_timestamp: const 0_u32, initial_balances: move _1462, pox_constants: move _1466, post_flight_callback: move _1463, get_bulk_initial_lockups: move _1467, get_bulk_initial_balances: move _1468, get_bulk_initial_namespaces: move _1469, get_bulk_initial_names: move _1470 };
        _1474 = <std::string::String as Deref>::deref(_1400) -> [return: bb786, unwind: bb997];
    }

    bb786: {
        _1476 = &mut _1461;
        _1475 = Option::<&mut ChainStateBootData>::Some(_1476);
        _1473 = StacksChainState::open_and_exec(const false, const 2147483648_u32, _1474, move _1475, move _1443) -> [return: bb787, unwind: bb997];
    }

    bb787: {
        _1472 = Result::<(StacksChainState, Vec<StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>::unwrap(move _1473) -> [return: bb788, unwind: bb997];
    }

    bb788: {
        _1471 = move (_1472.0: blockstack_lib::chainstate::stacks::db::StacksChainState);
        drop((_1472.1: std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>)) -> [return: bb1101, unwind: bb996];
    }

    bb789: {
        _1477 = Result::<Vec<BlockSnapshot>, blockstack_lib::util::db::Error>::unwrap(move _1478) -> [return: bb790, unwind: bb996];
    }

    bb790: {
        _1970 = const true;
        _1484 = &_1405;
        _1483 = StacksChainState::db(move _1484) -> [return: bb791, unwind: bb1135];
    }

    bb791: {
        _1482 = &_1483;
        _1959 = deref_copy (*_1482);
        _1481 = blockstack_lib::chainstate::stacks::db::blocks::<impl StacksChainState>::get_all_staging_block_headers(_1959) -> [return: bb792, unwind: bb1135];
    }

    bb792: {
        _1480 = Result::<Vec<StagingBlock>, blockstack_lib::chainstate::stacks::Error>::unwrap(move _1481) -> [return: bb793, unwind: bb1135];
    }

    bb793: {
        _1969 = const true;
        _1485 = Vec::<(StacksBlockId, u64)>::new() -> [return: bb794, unwind: bb1133];
    }

    bb794: {
        _1968 = const true;
        _1489 = &_1477;
        _1488 = <Vec<BlockSnapshot> as Deref>::deref(move _1489) -> [return: bb795, unwind: bb1131];
    }

    bb795: {
        _1487 = core::slice::<impl [BlockSnapshot]>::iter(_1488) -> [return: bb796, unwind: bb1131];
    }

    bb796: {
        _1486 = <std::slice::Iter<'_, BlockSnapshot> as IntoIterator>::into_iter(move _1487) -> [return: bb797, unwind: bb1131];
    }

    bb797: {
        _1490 = move _1486;
        goto -> bb798;
    }

    bb798: {
        _1492 = &mut _1490;
        _1491 = <std::slice::Iter<'_, BlockSnapshot> as Iterator>::next(_1492) -> [return: bb799, unwind: bb1131];
    }

    bb799: {
        _1493 = discriminant(_1491);
        switchInt(move _1493) -> [0: bb801, 1: bb800, otherwise: bb38];
    }

    bb800: {
        _1494 = ((_1491 as Some).0: &blockstack_lib::chainstate::burn::BlockSnapshot);
        _1495 = ((*_1494).7: bool);
        switchInt(move _1495) -> [0: bb798, otherwise: bb802];
    }

    bb801: {
        _1506 = &mut _1485;
        _1505 = <Vec<(StacksBlockId, u64)> as DerefMut>::deref_mut(move _1506) -> [return: bb805, unwind: bb1131];
    }

    bb802: {
        _1496 = ((*_1494).15: u64);
        switchInt(move _1496) -> [0: bb798, otherwise: bb803];
    }

    bb803: {
        _1498 = &((*_1494).4: blockstack_lib::chainstate::burn::ConsensusHash);
        _1499 = &((*_1494).10: blockstack_lib::types::chainstate::BlockHeaderHash);
        _1497 = blockstack_lib::chainstate::stacks::block::<impl StacksBlockHeader>::make_index_block_hash(_1498, _1499) -> [return: bb804, unwind: bb1131];
    }

    bb804: {
        _1501 = &mut _1485;
        _1503 = ((*_1494).15: u64);
        _1502 = (_1497, move _1503);
        _1500 = Vec::<(StacksBlockId, u64)>::push(move _1501, move _1502) -> [return: bb1176, unwind: bb1131];
    }

    bb805: {
        _1504 = slice::<impl [(StacksBlockId, u64)]>::sort_by::<{closure@src/main.rs:858:47: 858:61}>(_1505, const ZeroSized: {closure@src/main.rs:858:47: 858:61}) -> [return: bb806, unwind: bb1131];
    }

    bb806: {
        _1968 = const false;
        _1510 = move _1485;
        _1509 = <Vec<(StacksBlockId, u64)> as IntoIterator>::into_iter(move _1510) -> [return: bb807, unwind: bb1131];
    }

    bb807: {
        _1508 = <std::vec::IntoIter<(StacksBlockId, u64)> as Iterator>::map::<StacksBlockId, {closure@src/main.rs:861:18: 861:26}>(move _1509, const ZeroSized: {closure@src/main.rs:861:18: 861:26}) -> [return: bb808, unwind: bb1131];
    }

    bb808: {
        _1507 = <std::iter::Map<std::vec::IntoIter<(StacksBlockId, u64)>, {closure@src/main.rs:861:18: 861:26}> as Iterator>::collect::<Vec<StacksBlockId>>(move _1508) -> [return: bb809, unwind: bb1131];
    }

    bb809: {
        _1511 = HashMap::<StacksBlockId, StagingBlock>::new() -> [return: bb810, unwind: bb995];
    }

    bb810: {
        _1513 = &_1480;
        _1512 = Vec::<StagingBlock>::len(move _1513) -> [return: bb811, unwind: bb994];
    }

    bb811: {
        _1969 = const false;
        _1516 = move _1480;
        _1515 = <Vec<StagingBlock> as IntoIterator>::into_iter(move _1516) -> [return: bb812, unwind: bb994];
    }

    bb812: {
        _1514 = <std::vec::IntoIter<StagingBlock> as IntoIterator>::into_iter(move _1515) -> [return: bb813, unwind: bb994];
    }

    bb813: {
        _1517 = move _1514;
        goto -> bb814;
    }

    bb814: {
        _1519 = &mut _1517;
        _1518 = <std::vec::IntoIter<StagingBlock> as Iterator>::next(_1519) -> [return: bb815, unwind: bb993];
    }

    bb815: {
        _1520 = discriminant(_1518);
        switchInt(move _1520) -> [0: bb817, 1: bb816, otherwise: bb38];
    }

    bb816: {
        _1961 = const true;
        _1521 = move ((_1518 as Some).0: blockstack_lib::chainstate::stacks::db::blocks::StagingBlock);
        _1522 = (_1521.10: bool);
        switchInt(move _1522) -> [0: bb818, otherwise: bb825];
    }

    bb817: {
        drop(_1517) -> [return: bb827, unwind: bb994];
    }

    bb818: {
        _1524 = &(_1521.0: blockstack_lib::chainstate::burn::ConsensusHash);
        _1525 = &(_1521.1: blockstack_lib::types::chainstate::BlockHeaderHash);
        _1523 = blockstack_lib::chainstate::stacks::block::<impl StacksBlockHeader>::make_index_block_hash(_1524, _1525) -> [return: bb819, unwind: bb1129];
    }

    bb819: {
        _1920 = const _;
        _1528 = _1920 as &[&str] (PointerCoercion(Unsize));
        _1534 = &(_1521.0: blockstack_lib::chainstate::burn::ConsensusHash);
        _1533 = &_1534;
        _1532 = core::fmt::rt::Argument::<'_>::new_display::<&ConsensusHash>(_1533) -> [return: bb820, unwind: bb1129];
    }

    bb820: {
        _1537 = &(_1521.1: blockstack_lib::types::chainstate::BlockHeaderHash);
        _1536 = &_1537;
        _1535 = core::fmt::rt::Argument::<'_>::new_display::<&BlockHeaderHash>(_1536) -> [return: bb821, unwind: bb1129];
    }

    bb821: {
        _1531 = [move _1532, move _1535];
        _1530 = &_1531;
        _1529 = _1530 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1527 = Arguments::<'_>::new_v1(move _1528, move _1529) -> [return: bb822, unwind: bb1129];
    }

    bb822: {
        _1526 = _eprint(move _1527) -> [return: bb823, unwind: bb1129];
    }

    bb823: {
        _1539 = &mut _1511;
        _1961 = const false;
        _1540 = move _1521;
        _1538 = HashMap::<StacksBlockId, StagingBlock>::insert(move _1539, _1523, move _1540) -> [return: bb824, unwind: bb1129];
    }

    bb824: {
        drop(_1538) -> [return: bb825, unwind: bb1129];
    }

    bb825: {
        switchInt(_1961) -> [0: bb826, otherwise: bb1102];
    }

    bb826: {
        _1961 = const false;
        goto -> bb814;
    }

    bb827: {
        _1930 = const _;
        _1543 = _1930 as &[&str] (PointerCoercion(Unsize));
        _1551 = &_1511;
        _1550 = HashMap::<StacksBlockId, StagingBlock>::len(move _1551) -> [return: bb828, unwind: bb994];
    }

    bb828: {
        _1549 = &_1550;
        _1548 = &_1549;
        _1547 = core::fmt::rt::Argument::<'_>::new_display::<&usize>(_1548) -> [return: bb829, unwind: bb994];
    }

    bb829: {
        _1553 = &_1512;
        _1552 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_1553) -> [return: bb830, unwind: bb994];
    }

    bb830: {
        _1546 = [move _1547, move _1552];
        _1545 = &_1546;
        _1544 = _1545 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1542 = Arguments::<'_>::new_v1(move _1543, move _1544) -> [return: bb831, unwind: bb994];
    }

    bb831: {
        _1541 = _eprint(move _1542) -> [return: bb832, unwind: bb994];
    }

    bb832: {
        _1554 = HashSet::<StacksBlockId>::new() -> [return: bb833, unwind: bb994];
    }

    bb833: {
        _1555 = const 0_usize;
        _1559 = &_1444;
        _1560 = _1448;
        _1561 = <u32 as Into<u64>>::into(const _) -> [return: bb834, unwind: bb992];
    }

    bb834: {
        _1558 = burnchain::<impl Burnchain>::connect_db(move _1559, const true, move _1560, move _1561) -> [return: bb835, unwind: bb992];
    }

    bb835: {
        _1557 = Result::<(SortitionDB, BurnchainDB), blockstack_lib::burnchains::Error>::unwrap(move _1558) -> [return: bb836, unwind: bb992];
    }

    bb836: {
        _1967 = const true;
        _1556 = move (_1557.0: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB);
        drop((_1557.1: blockstack_lib::burnchains::db::BurnchainDB)) -> [return: bb1103, unwind: bb1127];
    }

    bb837: {
        _1566 = ExecutionCost::max_value() -> [return: bb838, unwind: bb1127];
    }

    bb838: {
        _1564 = StacksChainState::open_with_block_limit(const false, const 2147483648_u32, _1565, move _1566) -> [return: bb839, unwind: bb1127];
    }

    bb839: {
        _1563 = Result::<(StacksChainState, Vec<StacksTransactionReceipt>), blockstack_lib::chainstate::stacks::Error>::unwrap(move _1564) -> [return: bb840, unwind: bb1127];
    }

    bb840: {
        _1966 = const true;
        _1562 = move (_1563.0: blockstack_lib::chainstate::stacks::db::StacksChainState);
        drop((_1563.1: std::vec::Vec<blockstack_lib::chainstate::stacks::events::StacksTransactionReceipt>)) -> [return: bb1104, unwind: bb1125];
    }

    bb841: {
        drop(_1567) -> [return: bb842, unwind: bb1125];
    }

    bb842: {
        _1970 = const false;
        _1571 = move _1477;
        _1570 = <Vec<BlockSnapshot> as IntoIterator>::into_iter(move _1571) -> [return: bb843, unwind: bb1125];
    }

    bb843: {
        _1569 = <std::vec::IntoIter<BlockSnapshot> as IntoIterator>::into_iter(move _1570) -> [return: bb844, unwind: bb1125];
    }

    bb844: {
        _1572 = move _1569;
        goto -> bb845;
    }

    bb845: {
        _1574 = &mut _1572;
        _1573 = <std::vec::IntoIter<BlockSnapshot> as Iterator>::next(_1574) -> [return: bb846, unwind: bb991];
    }

    bb846: {
        _1575 = discriminant(_1573);
        switchInt(move _1575) -> [0: bb848, 1: bb847, otherwise: bb38];
    }

    bb847: {
        _1576 = move ((_1573 as Some).0: blockstack_lib::chainstate::burn::BlockSnapshot);
        _1581 = &_1455;
        _1582 = &(_1576.2: blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1580 = BurnchainDB::get_burnchain_block(move _1581, _1582) -> [return: bb849, unwind: bb991];
    }

    bb848: {
        drop(_1572) -> [return: bb960, unwind: bb1125];
    }

    bb849: {
        _1579 = Result::<BurnchainBlockData, blockstack_lib::burnchains::Error>::unwrap(move _1580) -> [return: bb850, unwind: bb991];
    }

    bb850: {
        _1577 = move (_1579.0: blockstack_lib::burnchains::BurnchainBlockHeader);
        _1964 = const true;
        _1578 = move (_1579.1: std::vec::Vec<blockstack_lib::chainstate::burn::operations::BlockstackOperationType>);
        _1584 = &(_1576.3: blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1586 = <blockstack_lib::types::chainstate::BurnchainHeaderHash as ClarityMarfTrieId>::sentinel() -> [return: bb851, unwind: bb1123];
    }

    bb851: {
        _1585 = &_1586;
        _1583 = <blockstack_lib::types::chainstate::BurnchainHeaderHash as PartialEq>::eq(move _1584, move _1585) -> [return: bb852, unwind: bb1123];
    }

    bb852: {
        switchInt(move _1583) -> [0: bb853, otherwise: bb1115];
    }

    bb853: {
        _1592 = &_1449;
        _1591 = SortitionDB::conn(move _1592) -> [return: bb854, unwind: bb1123];
    }

    bb854: {
        _1590 = SortitionDB::get_canonical_burn_chain_tip(_1591) -> [return: bb855, unwind: bb1123];
    }

    bb855: {
        _1589 = Result::<BlockSnapshot, blockstack_lib::util::db::Error>::unwrap(move _1590) -> [return: bb856, unwind: bb1123];
    }

    bb856: {
        _1594 = &mut _1449;
        _1595 = &_1577;
        _1964 = const false;
        _1596 = move _1578;
        _1597 = &_1444;
        _1598 = &(_1589.19: blockstack_lib::types::chainstate::SortitionId);
        _1599 = Option::<RewardCycleInfo>::None;
        _1593 = SortitionDB::evaluate_sortition(move _1594, _1595, move _1596, _1597, _1598, move _1599) -> [return: bb857, unwind: bb1123];
    }

    bb857: {
        _1588 = Result::<(BlockSnapshot, BurnchainStateTransition, Option<RewardSetInfo>), blockstack_lib::burnchains::Error>::unwrap(move _1593) -> [return: bb858, unwind: bb1123];
    }

    bb858: {
        _1587 = move (_1588.0: blockstack_lib::chainstate::burn::BlockSnapshot);
        drop(_1588) -> [return: bb859, unwind: bb1123];
    }

    bb859: {
        _1601 = &(_1576.2: blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1602 = &(_1587.2: blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1600 = (move _1601, move _1602);
        _1603 = (_1600.0: &blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1604 = (_1600.1: &blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1605 = <blockstack_lib::types::chainstate::BurnchainHeaderHash as PartialEq>::eq(_1603, _1604) -> [return: bb860, unwind: bb1123];
    }

    bb860: {
        switchInt(move _1605) -> [0: bb862, otherwise: bb861];
    }

    bb861: {
        _1610 = &(_1576.3: blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1611 = &(_1587.3: blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1609 = (move _1610, move _1611);
        _1612 = (_1609.0: &blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1613 = (_1609.1: &blockstack_lib::types::chainstate::BurnchainHeaderHash);
        _1614 = <blockstack_lib::types::chainstate::BurnchainHeaderHash as PartialEq>::eq(_1612, _1613) -> [return: bb863, unwind: bb1123];
    }

    bb862: {
        _1606 = core::panicking::AssertKind::Eq;
        _1608 = Option::<Arguments<'_>>::None;
        _1607 = core::panicking::assert_failed::<blockstack_lib::types::chainstate::BurnchainHeaderHash, blockstack_lib::types::chainstate::BurnchainHeaderHash>(move _1606, _1603, _1604, move _1608) -> bb1123;
    }

    bb863: {
        switchInt(move _1614) -> [0: bb865, otherwise: bb864];
    }

    bb864: {
        _1619 = &(_1576.7: bool);
        _1620 = &(_1587.7: bool);
        _1618 = (move _1619, move _1620);
        _1621 = (_1618.0: &bool);
        _1622 = (_1618.1: &bool);
        _1624 = (*_1621);
        _1625 = (*_1622);
        _1623 = Eq(move _1624, move _1625);
        switchInt(move _1623) -> [0: bb867, otherwise: bb866];
    }

    bb865: {
        _1615 = core::panicking::AssertKind::Eq;
        _1617 = Option::<Arguments<'_>>::None;
        _1616 = core::panicking::assert_failed::<blockstack_lib::types::chainstate::BurnchainHeaderHash, blockstack_lib::types::chainstate::BurnchainHeaderHash>(move _1615, _1612, _1613, move _1617) -> bb1123;
    }

    bb866: {
        _1630 = &(_1576.10: blockstack_lib::types::chainstate::BlockHeaderHash);
        _1631 = &(_1587.10: blockstack_lib::types::chainstate::BlockHeaderHash);
        _1629 = (move _1630, move _1631);
        _1632 = (_1629.0: &blockstack_lib::types::chainstate::BlockHeaderHash);
        _1633 = (_1629.1: &blockstack_lib::types::chainstate::BlockHeaderHash);
        _1634 = <BlockHeaderHash as PartialEq>::eq(_1632, _1633) -> [return: bb868, unwind: bb1123];
    }

    bb867: {
        _1626 = core::panicking::AssertKind::Eq;
        _1628 = Option::<Arguments<'_>>::None;
        _1627 = core::panicking::assert_failed::<bool, bool>(move _1626, _1621, _1622, move _1628) -> bb1123;
    }

    bb868: {
        switchInt(move _1634) -> [0: bb870, otherwise: bb869];
    }

    bb869: {
        _1639 = &(_1576.4: blockstack_lib::chainstate::burn::ConsensusHash);
        _1640 = &(_1587.4: blockstack_lib::chainstate::burn::ConsensusHash);
        _1638 = (move _1639, move _1640);
        _1641 = (_1638.0: &blockstack_lib::chainstate::burn::ConsensusHash);
        _1642 = (_1638.1: &blockstack_lib::chainstate::burn::ConsensusHash);
        _1643 = <ConsensusHash as PartialEq>::eq(_1641, _1642) -> [return: bb871, unwind: bb1123];
    }

    bb870: {
        _1635 = core::panicking::AssertKind::Eq;
        _1637 = Option::<Arguments<'_>>::None;
        _1636 = core::panicking::assert_failed::<BlockHeaderHash, BlockHeaderHash>(move _1635, _1632, _1633, move _1637) -> bb1123;
    }

    bb871: {
        switchInt(move _1643) -> [0: bb873, otherwise: bb872];
    }

    bb872: {
        _1648 = &(_1576.8: blockstack_lib::chainstate::burn::SortitionHash);
        _1649 = &(_1587.8: blockstack_lib::chainstate::burn::SortitionHash);
        _1647 = (move _1648, move _1649);
        _1650 = (_1647.0: &blockstack_lib::chainstate::burn::SortitionHash);
        _1651 = (_1647.1: &blockstack_lib::chainstate::burn::SortitionHash);
        _1652 = <SortitionHash as PartialEq>::eq(_1650, _1651) -> [return: bb874, unwind: bb1123];
    }

    bb873: {
        _1644 = core::panicking::AssertKind::Eq;
        _1646 = Option::<Arguments<'_>>::None;
        _1645 = core::panicking::assert_failed::<ConsensusHash, ConsensusHash>(move _1644, _1641, _1642, move _1646) -> bb1123;
    }

    bb874: {
        switchInt(move _1652) -> [0: bb876, otherwise: bb875];
    }

    bb875: {
        _1657 = &(_1576.0: u64);
        _1658 = &(_1587.0: u64);
        _1656 = (move _1657, move _1658);
        _1659 = (_1656.0: &u64);
        _1660 = (_1656.1: &u64);
        _1662 = (*_1659);
        _1663 = (*_1660);
        _1661 = Eq(move _1662, move _1663);
        switchInt(move _1661) -> [0: bb878, otherwise: bb877];
    }

    bb876: {
        _1653 = core::panicking::AssertKind::Eq;
        _1655 = Option::<Arguments<'_>>::None;
        _1654 = core::panicking::assert_failed::<SortitionHash, SortitionHash>(move _1653, _1650, _1651, move _1655) -> bb1123;
    }

    bb877: {
        _1668 = &(_1576.6: u64);
        _1669 = &(_1587.6: u64);
        _1667 = (move _1668, move _1669);
        _1670 = (_1667.0: &u64);
        _1671 = (_1667.1: &u64);
        _1673 = (*_1670);
        _1674 = (*_1671);
        _1672 = Eq(move _1673, move _1674);
        switchInt(move _1672) -> [0: bb880, otherwise: bb879];
    }

    bb878: {
        _1664 = core::panicking::AssertKind::Eq;
        _1666 = Option::<Arguments<'_>>::None;
        _1665 = core::panicking::assert_failed::<u64, u64>(move _1664, _1659, _1660, move _1666) -> bb1123;
    }

    bb879: {
        _1679 = &(_1576.5: blockstack_lib::chainstate::burn::OpsHash);
        _1680 = &(_1587.5: blockstack_lib::chainstate::burn::OpsHash);
        _1678 = (move _1679, move _1680);
        _1681 = (_1678.0: &blockstack_lib::chainstate::burn::OpsHash);
        _1682 = (_1678.1: &blockstack_lib::chainstate::burn::OpsHash);
        _1683 = <OpsHash as PartialEq>::eq(_1681, _1682) -> [return: bb881, unwind: bb1123];
    }

    bb880: {
        _1675 = core::panicking::AssertKind::Eq;
        _1677 = Option::<Arguments<'_>>::None;
        _1676 = core::panicking::assert_failed::<u64, u64>(move _1675, _1670, _1671, move _1677) -> bb1123;
    }

    bb881: {
        switchInt(move _1683) -> [0: bb883, otherwise: bb882];
    }

    bb882: {
        _1687 = (_1587.7: bool);
        switchInt(move _1687) -> [0: bb937, otherwise: bb884];
    }

    bb883: {
        _1684 = core::panicking::AssertKind::Eq;
        _1686 = Option::<Arguments<'_>>::None;
        _1685 = core::panicking::assert_failed::<OpsHash, OpsHash>(move _1684, _1681, _1682, move _1686) -> bb1123;
    }

    bb884: {
        _1689 = &(_1587.4: blockstack_lib::chainstate::burn::ConsensusHash);
        _1690 = &(_1587.10: blockstack_lib::types::chainstate::BlockHeaderHash);
        _1688 = blockstack_lib::chainstate::stacks::block::<impl StacksBlockHeader>::make_index_block_hash(_1689, _1690) -> [return: bb885, unwind: bb1123];
    }

    bb885: {
        _1692 = &mut _1554;
        _1694 = &_1688;
        _1693 = <StacksBlockId as Clone>::clone(move _1694) -> [return: bb886, unwind: bb1123];
    }

    bb886: {
        _1691 = HashSet::<StacksBlockId>::insert(move _1692, move _1693) -> [return: bb887, unwind: bb1123];
    }

    bb887: {
        _1696 = _1555;
        _1698 = &_1507;
        _1697 = Vec::<StacksBlockId>::len(move _1698) -> [return: bb888, unwind: bb1123];
    }

    bb888: {
        _1695 = Ge(move _1696, move _1697);
        switchInt(move _1695) -> [0: bb889, otherwise: bb1115];
    }

    bb889: {
        _1700 = &_1688;
        _1702 = &_1507;
        _1703 = _1555;
        _1701 = <Vec<StacksBlockId> as Index<usize>>::index(move _1702, move _1703) -> [return: bb890, unwind: bb1123];
    }

    bb890: {
        _1699 = <StacksBlockId as PartialEq>::eq(move _1700, _1701) -> [return: bb891, unwind: bb1123];
    }

    bb891: {
        switchInt(move _1699) -> [0: bb937, otherwise: bb892];
    }

    bb892: {
        _1705 = _1555;
        _1707 = &_1507;
        _1706 = Vec::<StacksBlockId>::len(move _1707) -> [return: bb893, unwind: bb1123];
    }

    bb893: {
        _1704 = Lt(move _1705, move _1706);
        switchInt(move _1704) -> [0: bb937, otherwise: bb894];
    }

    bb894: {
        _1709 = &_1554;
        _1710 = &_1688;
        _1708 = HashSet::<StacksBlockId>::contains::<StacksBlockId>(move _1709, _1710) -> [return: bb895, unwind: bb1123];
    }

    bb895: {
        switchInt(move _1708) -> [0: bb937, otherwise: bb896];
    }

    bb896: {
        _1712 = &_1511;
        _1713 = &_1688;
        _1711 = HashMap::<StacksBlockId, StagingBlock>::get::<StacksBlockId>(move _1712, _1713) -> [return: bb897, unwind: bb1123];
    }

    bb897: {
        _1714 = discriminant(_1711);
        switchInt(move _1714) -> [1: bb898, otherwise: bb918];
    }

    bb898: {
        _1717 = &(_1405.4: std::string::String);
        _1718 = &(_1587.4: blockstack_lib::chainstate::burn::ConsensusHash);
        _1719 = &(_1587.10: blockstack_lib::types::chainstate::BlockHeaderHash);
        _1716 = blockstack_lib::chainstate::stacks::db::blocks::<impl StacksChainState>::load_block(_1717, _1718, _1719) -> [return: bb899, unwind: bb1123];
    }

    bb899: {
        _1715 = Result::<Option<blockstack_lib::chainstate::stacks::StacksBlock>, blockstack_lib::chainstate::stacks::Error>::unwrap(move _1716) -> [return: bb900, unwind: bb1123];
    }

    bb900: {
        _1962 = const true;
        _1720 = discriminant(_1715);
        switchInt(move _1720) -> [1: bb901, otherwise: bb905];
    }

    bb901: {
        _1962 = const false;
        _1721 = move ((_1715 as Some).0: blockstack_lib::chainstate::stacks::StacksBlock);
        _1723 = &_1449;
        _1722 = SortitionDB::index_conn(move _1723) -> [return: bb902, unwind: bb990];
    }

    bb902: {
        _1726 = &_1722;
        _1727 = &mut _1471;
        _1728 = &(_1587.4: blockstack_lib::chainstate::burn::ConsensusHash);
        _1729 = &_1721;
        _1725 = Relayer::process_new_anchored_block(_1726, _1727, _1728, _1729, const 0_u64) -> [return: bb903, unwind: bb990];
    }

    bb903: {
        _1724 = Result::<bool, blockstack_lib::chainstate::stacks::Error>::unwrap(move _1725) -> [return: bb904, unwind: bb990];
    }

    bb904: {
        drop(_1721) -> [return: bb1108, unwind: bb1121];
    }

    bb905: {
        _1731 = get_loglevel() -> [return: bb906, unwind: bb1121];
    }

    bb906: {
        _1928 = const _;
        _1732 = slog::Level::is_at_least(_1928, _1731) -> [return: bb907, unwind: bb1121];
    }

    bb907: {
        switchInt(move _1732) -> [0: bb1108, otherwise: bb908];
    }

    bb908: {
        _1927 = const _;
        _1734 = slog::Level::as_usize(_1927) -> [return: bb909, unwind: bb1121];
    }

    bb909: {
        _1737 = __slog_static_max_level() -> [return: bb910, unwind: bb1121];
    }

    bb910: {
        _1736 = &_1737;
        _1735 = FilterLevel::as_usize(move _1736) -> [return: bb911, unwind: bb1121];
    }

    bb911: {
        _1733 = Le(move _1734, move _1735);
        switchInt(move _1733) -> [0: bb1108, otherwise: bb912];
    }

    bb912: {
        _1739 = const {alloc1: &LOGGER};
        _1738 = <LOGGER as Deref>::deref(_1739) -> [return: bb913, unwind: bb1121];
    }

    bb913: {
        _1742 = const {alloc4: &RecordStatic<'_>};
        _1926 = const _;
        _1745 = _1926 as &[&str] (PointerCoercion(Unsize));
        _1751 = &(_1587.4: blockstack_lib::chainstate::burn::ConsensusHash);
        _1750 = &_1751;
        _1749 = core::fmt::rt::Argument::<'_>::new_display::<&ConsensusHash>(_1750) -> [return: bb914, unwind: bb1121];
    }

    bb914: {
        _1754 = &(_1587.10: blockstack_lib::types::chainstate::BlockHeaderHash);
        _1753 = &_1754;
        _1752 = core::fmt::rt::Argument::<'_>::new_display::<&BlockHeaderHash>(_1753) -> [return: bb915, unwind: bb1121];
    }

    bb915: {
        _1748 = [move _1749, move _1752];
        _1747 = &_1748;
        _1746 = _1747 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1744 = Arguments::<'_>::new_v1(move _1745, move _1746) -> [return: bb916, unwind: bb1121];
    }

    bb916: {
        _1743 = &_1744;
        _1925 = const _;
        _1756 = _1925 as &dyn slog::KV (PointerCoercion(Unsize));
        _1755 = BorrowedKV::<'_>(move _1756);
        _1741 = Record::<'_>::new(_1742, _1743, move _1755) -> [return: bb917, unwind: bb1121];
    }

    bb917: {
        _1740 = &_1741;
        _1730 = Logger::<Arc<dyn SendSyncRefUnwindSafeDrain<Err = slog::private::NeverStruct, Ok = ()>>>::log(_1738, _1740) -> [return: bb1177, unwind: bb1121];
    }

    bb918: {
        _1758 = get_loglevel() -> [return: bb919, unwind: bb1123];
    }

    bb919: {
        _1924 = const _;
        _1759 = slog::Level::is_at_least(_1924, _1758) -> [return: bb920, unwind: bb1123];
    }

    bb920: {
        switchInt(move _1759) -> [0: bb931, otherwise: bb921];
    }

    bb921: {
        _1923 = const _;
        _1761 = slog::Level::as_usize(_1923) -> [return: bb922, unwind: bb1123];
    }

    bb922: {
        _1764 = __slog_static_max_level() -> [return: bb923, unwind: bb1123];
    }

    bb923: {
        _1763 = &_1764;
        _1762 = FilterLevel::as_usize(move _1763) -> [return: bb924, unwind: bb1123];
    }

    bb924: {
        _1760 = Le(move _1761, move _1762);
        switchInt(move _1760) -> [0: bb931, otherwise: bb925];
    }

    bb925: {
        _1766 = const {alloc1: &LOGGER};
        _1765 = <LOGGER as Deref>::deref(_1766) -> [return: bb926, unwind: bb1123];
    }

    bb926: {
        _1769 = const {alloc5: &RecordStatic<'_>};
        _1922 = const _;
        _1772 = _1922 as &[&str] (PointerCoercion(Unsize));
        _1778 = &(_1587.4: blockstack_lib::chainstate::burn::ConsensusHash);
        _1777 = &_1778;
        _1776 = core::fmt::rt::Argument::<'_>::new_display::<&ConsensusHash>(_1777) -> [return: bb927, unwind: bb1123];
    }

    bb927: {
        _1781 = &(_1587.10: blockstack_lib::types::chainstate::BlockHeaderHash);
        _1780 = &_1781;
        _1779 = core::fmt::rt::Argument::<'_>::new_display::<&BlockHeaderHash>(_1780) -> [return: bb928, unwind: bb1123];
    }

    bb928: {
        _1775 = [move _1776, move _1779];
        _1774 = &_1775;
        _1773 = _1774 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1771 = Arguments::<'_>::new_v1(move _1772, move _1773) -> [return: bb929, unwind: bb1123];
    }

    bb929: {
        _1770 = &_1771;
        _1921 = const _;
        _1783 = _1921 as &dyn slog::KV (PointerCoercion(Unsize));
        _1782 = BorrowedKV::<'_>(move _1783);
        _1768 = Record::<'_>::new(_1769, _1770, move _1782) -> [return: bb930, unwind: bb1123];
    }

    bb930: {
        _1767 = &_1768;
        _1757 = Logger::<Arc<dyn SendSyncRefUnwindSafeDrain<Err = slog::private::NeverStruct, Ok = ()>>>::log(_1765, _1767) -> [return: bb1178, unwind: bb1123];
    }

    bb931: {
        _1784 = CheckedAdd(_1555, const 1_usize);
        assert(!move (_1784.1: bool), "attempt to compute `{} + {}`, which would overflow", _1555, const 1_usize) -> [success: bb932, unwind: bb1123];
    }

    bb932: {
        _1555 = move (_1784.0: usize);
        _1786 = _1555;
        _1788 = &_1507;
        _1787 = Vec::<StacksBlockId>::len(move _1788) -> [return: bb933, unwind: bb1123];
    }

    bb933: {
        _1785 = Ge(move _1786, move _1787);
        switchInt(move _1785) -> [0: bb934, otherwise: bb937];
    }

    bb934: {
        _1791 = &_1507;
        _1792 = _1555;
        _1790 = <Vec<StacksBlockId> as Index<usize>>::index(move _1791, move _1792) -> [return: bb935, unwind: bb1123];
    }

    bb935: {
        _1789 = <StacksBlockId as Clone>::clone(_1790) -> [return: bb936, unwind: bb1123];
    }

    bb936: {
        _1688 = move _1789;
        goto -> bb892;
    }

    bb937: {
        _1793 = Vec::<StacksEpochReceipt>::new() -> [return: bb1179, unwind: bb1123];
    }

    bb938: {
        _1798 = &_1449;
        _1797 = SortitionDB::conn(move _1798) -> [return: bb939, unwind: bb989];
    }

    bb939: {
        _1796 = SortitionDB::get_canonical_burn_chain_tip(_1797) -> [return: bb940, unwind: bb989];
    }

    bb940: {
        _1795 = Result::<BlockSnapshot, blockstack_lib::util::db::Error>::unwrap(move _1796) -> [return: bb941, unwind: bb989];
    }

    bb941: {
        _1794 = (_1795.19: blockstack_lib::types::chainstate::SortitionId);
        _1801 = &mut _1449;
        _1802 = &_1794;
        _1800 = SortitionDB::tx_handle_begin(move _1801, _1802) -> [return: bb942, unwind: bb989];
    }

    bb942: {
        _1799 = Result::<IndexDBTx<'_, SortitionHandleContext, SortitionId>, blockstack_lib::util::db::Error>::unwrap(move _1800) -> [return: bb943, unwind: bb989];
    }

    bb943: {
        _1805 = &mut _1471;
        _1804 = blockstack_lib::chainstate::stacks::db::blocks::<impl StacksChainState>::process_blocks(move _1805, move _1799, const 1_usize) -> [return: bb944, unwind: bb989];
    }

    bb944: {
        _1803 = Result::<Vec<(Option<StacksEpochReceipt>, Option<blockstack_lib::chainstate::stacks::TransactionPayload>)>, blockstack_lib::chainstate::stacks::Error>::unwrap(move _1804) -> [return: bb945, unwind: bb989];
    }

    bb945: {
        _1965 = const true;
        _1807 = &_1803;
        _1806 = Vec::<(Option<StacksEpochReceipt>, Option<blockstack_lib::chainstate::stacks::TransactionPayload>)>::len(move _1807) -> [return: bb946, unwind: bb1118];
    }

    bb946: {
        switchInt(move _1806) -> [0: bb947, otherwise: bb948];
    }

    bb947: {
        drop(_1803) -> [return: bb957, unwind: bb989];
    }

    bb948: {
        _1965 = const false;
        _1810 = move _1803;
        _1809 = <Vec<(Option<StacksEpochReceipt>, Option<blockstack_lib::chainstate::stacks::TransactionPayload>)> as IntoIterator>::into_iter(move _1810) -> [return: bb949, unwind: bb1118];
    }

    bb949: {
        _1808 = <std::vec::IntoIter<(Option<StacksEpochReceipt>, Option<blockstack_lib::chainstate::stacks::TransactionPayload>)> as IntoIterator>::into_iter(move _1809) -> [return: bb950, unwind: bb1118];
    }

    bb950: {
        _1811 = move _1808;
        goto -> bb951;
    }

    bb951: {
        _1813 = &mut _1811;
        _1812 = <std::vec::IntoIter<(Option<StacksEpochReceipt>, Option<blockstack_lib::chainstate::stacks::TransactionPayload>)> as Iterator>::next(_1813) -> [return: bb952, unwind: bb988];
    }

    bb952: {
        _1814 = discriminant(_1812);
        switchInt(move _1814) -> [0: bb954, 1: bb953, otherwise: bb38];
    }

    bb953: {
        _1963 = const true;
        _1815 = move (((_1812 as Some).0: (std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)).0: std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>);
        _1816 = discriminant(_1815);
        switchInt(move _1816) -> [1: bb955, otherwise: bb1112];
    }

    bb954: {
        drop(_1811) -> [return: bb956, unwind: bb1118];
    }

    bb955: {
        _1963 = const false;
        _1817 = move ((_1815 as Some).0: blockstack_lib::chainstate::stacks::db::StacksEpochReceipt);
        _1819 = &mut _1793;
        _1818 = Vec::<StacksEpochReceipt>::push(move _1819, move _1817) -> [return: bb1180, unwind: bb987];
    }

    bb956: {
        _1965 = const false;
        goto -> bb938;
    }

    bb957: {
        _1965 = const false;
        drop(_1793) -> [return: bb958, unwind: bb1123];
    }

    bb958: {
        _1964 = const false;
        goto -> bb845;
    }

    bb959: {
        _1964 = const false;
        goto -> bb845;
    }

    bb960: {
        _1929 = const _;
        _1822 = _1929 as &[&str] (PointerCoercion(Unsize));
        _1827 = &_1555;
        _1826 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_1827) -> [return: bb961, unwind: bb1125];
    }

    bb961: {
        _1831 = &_1507;
        _1830 = Vec::<StacksBlockId>::len(move _1831) -> [return: bb962, unwind: bb1125];
    }

    bb962: {
        _1829 = &_1830;
        _1828 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_1829) -> [return: bb963, unwind: bb1125];
    }

    bb963: {
        _1825 = [move _1826, move _1828];
        _1824 = &_1825;
        _1823 = _1824 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1821 = Arguments::<'_>::new_v1(move _1822, move _1823) -> [return: bb964, unwind: bb1125];
    }

    bb964: {
        _1820 = _eprint(move _1821) -> [return: bb965, unwind: bb1125];
    }

    bb965: {
        _1966 = const false;
        _1967 = const false;
        drop(_1554) -> [return: bb974, unwind: bb994];
    }

    bb966: {
        _1834 = &_1;
        _1833 = Vec::<std::string::String>::len(move _1834) -> [return: bb967, unwind: bb1086];
    }

    bb967: {
        _1832 = Lt(move _1833, const 4_usize);
        switchInt(move _1832) -> [0: bb973, otherwise: bb968];
    }

    bb968: {
        _1931 = const _;
        _1837 = _1931 as &[&str] (PointerCoercion(Unsize));
        _1843 = &_1;
        _1842 = <Vec<std::string::String> as Index<usize>>::index(move _1843, const 0_usize) -> [return: bb969, unwind: bb1086];
    }

    bb969: {
        _1841 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_1842) -> [return: bb970, unwind: bb1086];
    }

    bb970: {
        _1840 = [move _1841];
        _1839 = &_1840;
        _1838 = _1839 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _1836 = Arguments::<'_>::new_v1(move _1837, move _1838) -> [return: bb971, unwind: bb1086];
    }

    bb971: {
        _1835 = _eprint(move _1836) -> [return: bb972, unwind: bb1086];
    }

    bb972: {
        _1844 = exit(const 1_i32) -> bb1086;
    }

    bb973: {
        drop(_1) -> [return: bb986, unwind continue];
    }

    bb974: {
        drop(_1511) -> [return: bb975, unwind: bb995];
    }

    bb975: {
        drop(_1507) -> [return: bb976, unwind: bb1131];
    }

    bb976: {
        _1968 = const false;
        _1969 = const false;
        _1970 = const false;
        drop(_1471) -> [return: bb977, unwind: bb997];
    }

    bb977: {
        drop(_1461) -> [return: bb978, unwind: bb1000];
    }

    bb978: {
        drop(_1455) -> [return: bb979, unwind: bb1001];
    }

    bb979: {
        drop(_1449) -> [return: bb980, unwind: bb1002];
    }

    bb980: {
        drop(_1444) -> [return: bb981, unwind: bb1137];
    }

    bb981: {
        _1971 = const false;
        drop(_1409) -> [return: bb982, unwind: bb1007];
    }

    bb982: {
        drop(_1405) -> [return: bb985, unwind: bb1086];
    }

    bb983: {
        drop(_1359) -> [return: bb984, unwind: bb1010];
    }

    bb984: {
        drop(_1355) -> [return: bb985, unwind: bb1086];
    }

    bb985: {
        drop(_1) -> [return: bb986, unwind continue];
    }

    bb986: {
        return;
    }

    bb987 (cleanup): {
        _1988 = discriminant(_1812);
        switchInt(move _1988) -> [1: bb1116, otherwise: bb988];
    }

    bb988 (cleanup): {
        drop(_1811) -> [return: bb1118, unwind terminate(cleanup)];
    }

    bb989 (cleanup): {
        drop(_1793) -> [return: bb1123, unwind terminate(cleanup)];
    }

    bb990 (cleanup): {
        drop(_1721) -> [return: bb1121, unwind terminate(cleanup)];
    }

    bb991 (cleanup): {
        drop(_1572) -> [return: bb1125, unwind terminate(cleanup)];
    }

    bb992 (cleanup): {
        drop(_1554) -> [return: bb994, unwind terminate(cleanup)];
    }

    bb993 (cleanup): {
        drop(_1517) -> [return: bb994, unwind terminate(cleanup)];
    }

    bb994 (cleanup): {
        drop(_1511) -> [return: bb995, unwind terminate(cleanup)];
    }

    bb995 (cleanup): {
        drop(_1507) -> [return: bb1131, unwind terminate(cleanup)];
    }

    bb996 (cleanup): {
        drop(_1471) -> [return: bb997, unwind terminate(cleanup)];
    }

    bb997 (cleanup): {
        drop(_1461) -> [return: bb1000, unwind terminate(cleanup)];
    }

    bb998 (cleanup): {
        drop(_1463) -> [return: bb999, unwind terminate(cleanup)];
    }

    bb999 (cleanup): {
        drop(_1462) -> [return: bb1000, unwind terminate(cleanup)];
    }

    bb1000 (cleanup): {
        drop(_1455) -> [return: bb1001, unwind terminate(cleanup)];
    }

    bb1001 (cleanup): {
        drop(_1449) -> [return: bb1002, unwind terminate(cleanup)];
    }

    bb1002 (cleanup): {
        drop(_1444) -> [return: bb1137, unwind terminate(cleanup)];
    }

    bb1003 (cleanup): {
        drop(_1431) -> [return: bb1004, unwind terminate(cleanup)];
    }

    bb1004 (cleanup): {
        drop(_1425) -> [return: bb1005, unwind terminate(cleanup)];
    }

    bb1005 (cleanup): {
        drop(_1419) -> [return: bb1138, unwind terminate(cleanup)];
    }

    bb1006 (cleanup): {
        drop(_1409) -> [return: bb1007, unwind terminate(cleanup)];
    }

    bb1007 (cleanup): {
        drop(_1405) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1008 (cleanup): {
        drop(_1367) -> [return: bb1009, unwind terminate(cleanup)];
    }

    bb1009 (cleanup): {
        drop(_1359) -> [return: bb1010, unwind terminate(cleanup)];
    }

    bb1010 (cleanup): {
        drop(_1355) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1011 (cleanup): {
        drop(_1332) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1012 (cleanup): {
        drop(_1325) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1013 (cleanup): {
        drop(_1313) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1014 (cleanup): {
        drop(_1293) -> [return: bb1015, unwind terminate(cleanup)];
    }

    bb1015 (cleanup): {
        drop(_1262) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1016 (cleanup): {
        drop(_1225) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1017 (cleanup): {
        drop(_1196) -> [return: bb1139, unwind terminate(cleanup)];
    }

    bb1018 (cleanup): {
        drop(_1184) -> [return: bb1139, unwind terminate(cleanup)];
    }

    bb1019 (cleanup): {
        drop(_1163) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1020 (cleanup): {
        drop(_1169) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1021 (cleanup): {
        drop(_1164) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1022 (cleanup): {
        drop(_1121) -> [return: bb1025, unwind terminate(cleanup)];
    }

    bb1023 (cleanup): {
        drop(_1125) -> [return: bb1025, unwind terminate(cleanup)];
    }

    bb1024 (cleanup): {
        drop(_1122) -> [return: bb1025, unwind terminate(cleanup)];
    }

    bb1025 (cleanup): {
        drop(_1116) -> [return: bb1026, unwind terminate(cleanup)];
    }

    bb1026 (cleanup): {
        drop(_1107) -> [return: bb1027, unwind terminate(cleanup)];
    }

    bb1027 (cleanup): {
        drop(_1094) -> [return: bb1030, unwind terminate(cleanup)];
    }

    bb1028 (cleanup): {
        drop(_1078) -> [return: bb1030, unwind terminate(cleanup)];
    }

    bb1029 (cleanup): {
        drop(_1064) -> [return: bb1030, unwind terminate(cleanup)];
    }

    bb1030 (cleanup): {
        drop(_1023) -> [return: bb1031, unwind terminate(cleanup)];
    }

    bb1031 (cleanup): {
        drop(_1022) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1032 (cleanup): {
        drop(_1050) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1033 (cleanup): {
        drop(_1031) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1034 (cleanup): {
        drop(_979) -> [return: bb1035, unwind terminate(cleanup)];
    }

    bb1035 (cleanup): {
        drop(_977) -> [return: bb1036, unwind terminate(cleanup)];
    }

    bb1036 (cleanup): {
        drop(_961) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1037 (cleanup): {
        drop(_966) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1038 (cleanup): {
        drop(_962) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1039 (cleanup): {
        drop(_909) -> [return: bb1149, unwind terminate(cleanup)];
    }

    bb1040 (cleanup): {
        drop(_847) -> [return: bb1041, unwind terminate(cleanup)];
    }

    bb1041 (cleanup): {
        drop(_841) -> [return: bb1042, unwind terminate(cleanup)];
    }

    bb1042 (cleanup): {
        drop(_834) -> [return: bb1151, unwind terminate(cleanup)];
    }

    bb1043 (cleanup): {
        drop(_814) -> [return: bb1044, unwind terminate(cleanup)];
    }

    bb1044 (cleanup): {
        drop(_809) -> [return: bb1045, unwind terminate(cleanup)];
    }

    bb1045 (cleanup): {
        drop(_798) -> [return: bb1046, unwind terminate(cleanup)];
    }

    bb1046 (cleanup): {
        drop(_781) -> [return: bb1049, unwind terminate(cleanup)];
    }

    bb1047 (cleanup): {
        drop(_787) -> [return: bb1049, unwind terminate(cleanup)];
    }

    bb1048 (cleanup): {
        drop(_782) -> [return: bb1049, unwind terminate(cleanup)];
    }

    bb1049 (cleanup): {
        drop(_749) -> [return: bb1050, unwind terminate(cleanup)];
    }

    bb1050 (cleanup): {
        drop(_737) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1051 (cleanup): {
        drop(_652) -> [return: bb1052, unwind terminate(cleanup)];
    }

    bb1052 (cleanup): {
        drop(_627) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1053 (cleanup): {
        drop(_634) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1054 (cleanup): {
        drop(_628) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1055 (cleanup): {
        drop(_497) -> [return: bb1157, unwind terminate(cleanup)];
    }

    bb1056 (cleanup): {
        drop(_497) -> [return: bb1058, unwind terminate(cleanup)];
    }

    bb1057 (cleanup): {
        drop(_498) -> [return: bb1058, unwind terminate(cleanup)];
    }

    bb1058 (cleanup): {
        drop(_459) -> [return: bb1060, unwind terminate(cleanup)];
    }

    bb1059 (cleanup): {
        drop(_466) -> [return: bb1060, unwind terminate(cleanup)];
    }

    bb1060 (cleanup): {
        drop(_454) -> [return: bb1061, unwind terminate(cleanup)];
    }

    bb1061 (cleanup): {
        drop(_442) -> [return: bb1062, unwind terminate(cleanup)];
    }

    bb1062 (cleanup): {
        drop(_425) -> [return: bb1065, unwind terminate(cleanup)];
    }

    bb1063 (cleanup): {
        drop(_431) -> [return: bb1065, unwind terminate(cleanup)];
    }

    bb1064 (cleanup): {
        drop(_426) -> [return: bb1065, unwind terminate(cleanup)];
    }

    bb1065 (cleanup): {
        drop(_413) -> [return: bb1066, unwind terminate(cleanup)];
    }

    bb1066 (cleanup): {
        drop(_401) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1067 (cleanup): {
        drop(_357) -> [return: bb1068, unwind terminate(cleanup)];
    }

    bb1068 (cleanup): {
        drop(_338) -> [return: bb1070, unwind terminate(cleanup)];
    }

    bb1069 (cleanup): {
        drop(_345) -> [return: bb1070, unwind terminate(cleanup)];
    }

    bb1070 (cleanup): {
        drop(_326) -> [return: bb1071, unwind terminate(cleanup)];
    }

    bb1071 (cleanup): {
        drop(_309) -> [return: bb1074, unwind terminate(cleanup)];
    }

    bb1072 (cleanup): {
        drop(_315) -> [return: bb1074, unwind terminate(cleanup)];
    }

    bb1073 (cleanup): {
        drop(_310) -> [return: bb1074, unwind terminate(cleanup)];
    }

    bb1074 (cleanup): {
        drop(_297) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1075 (cleanup): {
        drop(_285) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1076 (cleanup): {
        drop(_245) -> [return: bb1077, unwind terminate(cleanup)];
    }

    bb1077 (cleanup): {
        drop(_231) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1078 (cleanup): {
        drop(_236) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1079 (cleanup): {
        drop(_232) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1080 (cleanup): {
        drop(_173) -> [return: bb1081, unwind terminate(cleanup)];
    }

    bb1081 (cleanup): {
        drop(_159) -> [return: bb1082, unwind terminate(cleanup)];
    }

    bb1082 (cleanup): {
        drop(_157) -> [return: bb1083, unwind terminate(cleanup)];
    }

    bb1083 (cleanup): {
        drop(_151) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1084 (cleanup): {
        drop(_100) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1085 (cleanup): {
        drop(_28) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb1086 (cleanup): {
        drop(_1) -> [return: bb1087, unwind terminate(cleanup)];
    }

    bb1087 (cleanup): {
        resume;
    }

    bb1088: {
        _335 = &_309;
        _334 = SortitionDB::conn(move _335) -> [return: bb177, unwind: bb1070];
    }

    bb1089: {
        _451 = &_425;
        _450 = SortitionDB::conn(move _451) -> [return: bb235, unwind: bb1061];
    }

    bb1090: {
        _531 = &(_442.4: std::string::String);
        _532 = &(_497.2: blockstack_lib::chainstate::burn::ConsensusHash);
        _533 = &(_497.3: blockstack_lib::types::chainstate::BlockHeaderHash);
        _530 = blockstack_lib::chainstate::stacks::db::blocks::<impl StacksChainState>::load_block_header(_531, _532, _533) -> [return: bb281, unwind: bb1056];
    }

    bb1091: {
        drop(_498) -> [return: bb1090, unwind: bb1056];
    }

    bb1092: {
        drop(_530) -> [return: bb257, unwind: bb1058];
    }

    bb1093: {
        _807 = &_781;
        _806 = SortitionDB::conn(move _807) -> [return: bb429, unwind: bb1045];
    }

    bb1094: {
        drop(_1163) -> [return: bb985, unwind: bb1086];
    }

    bb1095: {
        goto -> bb1094;
    }

    bb1096: {
        _1984 = discriminant(_1179);
        switchInt(move _1984) -> [0: bb1095, otherwise: bb1094];
    }

    bb1097: {
        drop(_1291) -> [return: bb689, unwind: bb1015];
    }

    bb1098: {
        _1361 = <std::string::String as Deref>::deref(_1353) -> [return: bb729, unwind: bb1010];
    }

    bb1099: {
        _1411 = <std::string::String as Deref>::deref(_1395) -> [return: bb759, unwind: bb1007];
    }

    bb1100: {
        _1458 = &_1397;
        _1958 = deref_copy (*_1458);
        _1457 = <std::string::String as Deref>::deref(_1958) -> [return: bb781, unwind: bb1001];
    }

    bb1101: {
        _1479 = &_1409;
        _1478 = SortitionDB::get_all_snapshots(move _1479) -> [return: bb789, unwind: bb996];
    }

    bb1102: {
        drop(_1521) -> [return: bb826, unwind: bb993];
    }

    bb1103: {
        _1565 = <std::string::String as Deref>::deref(_1400) -> [return: bb837, unwind: bb1127];
    }

    bb1104: {
        _1966 = const false;
        _1967 = const false;
        _1568 = {closure@src/main.rs:904:31: 904:38} { p2p_chainstate: move _1562, p2p_new_sortition_db: move _1556 };
        _1567 = spawn::<{closure@src/main.rs:904:31: 904:38}, ()>(move _1568) -> [return: bb841, unwind: bb1125];
    }

    bb1105: {
        _1962 = const false;
        goto -> bb931;
    }

    bb1106: {
        switchInt(_1962) -> [0: bb1105, otherwise: bb1107];
    }

    bb1107: {
        drop(((_1715 as Some).0: blockstack_lib::chainstate::stacks::StacksBlock)) -> [return: bb1105, unwind: bb1123];
    }

    bb1108: {
        _1985 = discriminant(_1715);
        switchInt(move _1985) -> [1: bb1106, otherwise: bb1105];
    }

    bb1109: {
        _1963 = const false;
        _1987 = discriminant(_1812);
        switchInt(move _1987) -> [1: bb1113, otherwise: bb951];
    }

    bb1110: {
        switchInt(_1963) -> [0: bb1109, otherwise: bb1111];
    }

    bb1111: {
        drop(((_1815 as Some).0: blockstack_lib::chainstate::stacks::db::StacksEpochReceipt)) -> [return: bb1109, unwind: bb987];
    }

    bb1112: {
        _1986 = discriminant(_1815);
        switchInt(move _1986) -> [1: bb1110, otherwise: bb1109];
    }

    bb1113: {
        drop((((_1812 as Some).0: (std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)).1: std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)) -> [return: bb951, unwind: bb988];
    }

    bb1114: {
        drop(_1578) -> [return: bb959, unwind: bb991];
    }

    bb1115: {
        switchInt(_1964) -> [0: bb959, otherwise: bb1114];
    }

    bb1116 (cleanup): {
        drop((((_1812 as Some).0: (std::option::Option<blockstack_lib::chainstate::stacks::db::StacksEpochReceipt>, std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)).1: std::option::Option<blockstack_lib::chainstate::stacks::TransactionPayload>)) -> [return: bb988, unwind terminate(cleanup)];
    }

    bb1117 (cleanup): {
        drop(_1803) -> [return: bb989, unwind terminate(cleanup)];
    }

    bb1118 (cleanup): {
        switchInt(_1965) -> [0: bb989, otherwise: bb1117];
    }

    bb1119 (cleanup): {
        switchInt(_1962) -> [0: bb1123, otherwise: bb1120];
    }

    bb1120 (cleanup): {
        drop(((_1715 as Some).0: blockstack_lib::chainstate::stacks::StacksBlock)) -> [return: bb1123, unwind terminate(cleanup)];
    }

    bb1121 (cleanup): {
        _1989 = discriminant(_1715);
        switchInt(move _1989) -> [1: bb1119, otherwise: bb1123];
    }

    bb1122 (cleanup): {
        drop(_1578) -> [return: bb991, unwind terminate(cleanup)];
    }

    bb1123 (cleanup): {
        switchInt(_1964) -> [0: bb991, otherwise: bb1122];
    }

    bb1124 (cleanup): {
        drop(_1562) -> [return: bb1127, unwind terminate(cleanup)];
    }

    bb1125 (cleanup): {
        switchInt(_1966) -> [0: bb1127, otherwise: bb1124];
    }

    bb1126 (cleanup): {
        drop(_1556) -> [return: bb992, unwind terminate(cleanup)];
    }

    bb1127 (cleanup): {
        switchInt(_1967) -> [0: bb992, otherwise: bb1126];
    }

    bb1128 (cleanup): {
        drop(_1521) -> [return: bb993, unwind terminate(cleanup)];
    }

    bb1129 (cleanup): {
        switchInt(_1961) -> [0: bb993, otherwise: bb1128];
    }

    bb1130 (cleanup): {
        drop(_1485) -> [return: bb1133, unwind terminate(cleanup)];
    }

    bb1131 (cleanup): {
        switchInt(_1968) -> [0: bb1133, otherwise: bb1130];
    }

    bb1132 (cleanup): {
        drop(_1480) -> [return: bb1135, unwind terminate(cleanup)];
    }

    bb1133 (cleanup): {
        switchInt(_1969) -> [0: bb1135, otherwise: bb1132];
    }

    bb1134 (cleanup): {
        drop(_1477) -> [return: bb996, unwind terminate(cleanup)];
    }

    bb1135 (cleanup): {
        switchInt(_1970) -> [0: bb996, otherwise: bb1134];
    }

    bb1136 (cleanup): {
        drop(_1412) -> [return: bb1006, unwind terminate(cleanup)];
    }

    bb1137 (cleanup): {
        switchInt(_1971) -> [0: bb1006, otherwise: bb1136];
    }

    bb1138 (cleanup): {
        _1990 = &mut _1418;
        _1991 = <Box<[(PrincipalData, u64); 4]> as Drop>::drop(move _1990) -> [return: bb1181, unwind terminate(cleanup)];
    }

    bb1139 (cleanup): {
        goto -> bb1019;
    }

    bb1140 (cleanup): {
        drop(_1164) -> [return: bb1020, unwind terminate(cleanup)];
    }

    bb1141 (cleanup): {
        switchInt(_1972) -> [0: bb1020, otherwise: bb1140];
    }

    bb1142 (cleanup): {
        drop(_1122) -> [return: bb1023, unwind terminate(cleanup)];
    }

    bb1143 (cleanup): {
        switchInt(_1973) -> [0: bb1023, otherwise: bb1142];
    }

    bb1144 (cleanup): {
        drop(_962) -> [return: bb1037, unwind terminate(cleanup)];
    }

    bb1145 (cleanup): {
        switchInt(_1974) -> [0: bb1037, otherwise: bb1144];
    }

    bb1146 (cleanup): {
        switchInt(_1975) -> [0: bb1040, otherwise: bb1147];
    }

    bb1147 (cleanup): {
        drop((((_854 as Ok).0: (blockstack_lib::chainstate::stacks::StacksBlock, blockstack_lib::vm::costs::ExecutionCost, u64)).0: blockstack_lib::chainstate::stacks::StacksBlock)) -> [return: bb1040, unwind terminate(cleanup)];
    }

    bb1148 (cleanup): {
        drop(_854) -> [return: bb1040, unwind terminate(cleanup)];
    }

    bb1149 (cleanup): {
        _1992 = discriminant(_854);
        switchInt(move _1992) -> [0: bb1146, otherwise: bb1148];
    }

    bb1150 (cleanup): {
        drop(_829) -> [return: bb1043, unwind terminate(cleanup)];
    }

    bb1151 (cleanup): {
        switchInt(_1976) -> [0: bb1043, otherwise: bb1150];
    }

    bb1152 (cleanup): {
        drop(_782) -> [return: bb1047, unwind terminate(cleanup)];
    }

    bb1153 (cleanup): {
        switchInt(_1977) -> [0: bb1047, otherwise: bb1152];
    }

    bb1154 (cleanup): {
        drop(_628) -> [return: bb1053, unwind terminate(cleanup)];
    }

    bb1155 (cleanup): {
        switchInt(_1978) -> [0: bb1053, otherwise: bb1154];
    }

    bb1156 (cleanup): {
        drop(_530) -> [return: bb1058, unwind terminate(cleanup)];
    }

    bb1157 (cleanup): {
        _1993 = discriminant(_530);
        switchInt(move _1993) -> [0: bb1058, otherwise: bb1156];
    }

    bb1158 (cleanup): {
        drop(_426) -> [return: bb1063, unwind terminate(cleanup)];
    }

    bb1159 (cleanup): {
        switchInt(_1979) -> [0: bb1063, otherwise: bb1158];
    }

    bb1160 (cleanup): {
        drop(_310) -> [return: bb1072, unwind terminate(cleanup)];
    }

    bb1161 (cleanup): {
        switchInt(_1980) -> [0: bb1072, otherwise: bb1160];
    }

    bb1162 (cleanup): {
        drop(_232) -> [return: bb1078, unwind terminate(cleanup)];
    }

    bb1163 (cleanup): {
        switchInt(_1981) -> [0: bb1078, otherwise: bb1162];
    }

    bb1164: {
        (*_1994) = [move _1419, move _1425, move _1431, move _1437];
        _1414 = move _1418;
        _1413 = move _1414 as std::boxed::Box<[(blockstack_lib::vm::types::PrincipalData, u64)]> (PointerCoercion(Unsize));
        _1412 = slice::<impl [(PrincipalData, u64)]>::into_vec::<std::alloc::Global>(move _1413) -> [return: bb775, unwind: bb1006];
    }

    bb1165: {
        goto -> bb280;
    }

    bb1166: {
        goto -> bb298;
    }

    bb1167: {
        goto -> bb257;
    }

    bb1168: {
        goto -> bb352;
    }

    bb1169: {
        goto -> bb352;
    }

    bb1170: {
        goto -> bb374;
    }

    bb1171: {
        goto -> bb600;
    }

    bb1172: {
        goto -> bb1096;
    }

    bb1173: {
        goto -> bb659;
    }

    bb1174: {
        goto -> bb659;
    }

    bb1175: {
        goto -> bb676;
    }

    bb1176: {
        goto -> bb798;
    }

    bb1177: {
        goto -> bb1108;
    }

    bb1178: {
        goto -> bb931;
    }

    bb1179: {
        goto -> bb938;
    }

    bb1180: {
        goto -> bb1112;
    }

    bb1181 (cleanup): {
        goto -> bb1006;
    }
}

alloc5 (static: main::RS, size: 32, align: 8) {
    0x00 │ ╾─────alloc9<imm>─────╼ ╾────alloc615<imm>────╼ │ ╾──────╼╾──────╼
    0x10 │ 00 00 00 00 00 00 00 00 02 __ __ __ __ __ __ __ │ .........░░░░░░░
}

alloc9 (static: main::RS::LOC, size: 56, align: 8) {
    0x00 │ ╾────alloc618<imm>────╼ 0b 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾────alloc620<imm>────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
    0x20 │ ╾────alloc621<imm>────╼ 0f 00 00 00 00 00 00 00 │ ╾──────╼........
    0x30 │ ec 03 00 00 1d 00 00 00                         │ ........
}

alloc618 (size: 11, align: 1) {
    73 72 63 2f 6d 61 69 6e 2e 72 73                │ src/main.rs
}

alloc620 (size: 0, align: 1) {}

alloc621 (size: 15, align: 1) {
    62 6c 6f 63 6b 73 74 61 63 6b 5f 63 6f 72 65    │ blockstack_core
}

alloc615 (size: 0, align: 1) {}

alloc4 (static: main::RS, size: 32, align: 8) {
    0x00 │ ╾─────alloc8<imm>─────╼ ╾────alloc606<imm>────╼ │ ╾──────╼╾──────╼
    0x10 │ 00 00 00 00 00 00 00 00 02 __ __ __ __ __ __ __ │ .........░░░░░░░
}

alloc8 (static: main::RS::LOC, size: 56, align: 8) {
    0x00 │ ╾────alloc609<imm>────╼ 0b 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾────alloc611<imm>────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
    0x20 │ ╾────alloc612<imm>────╼ 0f 00 00 00 00 00 00 00 │ ╾──────╼........
    0x30 │ e5 03 00 00 21 00 00 00                         │ ....!...
}

alloc609 (size: 11, align: 1) {
    73 72 63 2f 6d 61 69 6e 2e 72 73                │ src/main.rs
}

alloc611 (size: 0, align: 1) {}

alloc612 (size: 15, align: 1) {
    62 6c 6f 63 6b 73 74 61 63 6b 5f 63 6f 72 65    │ blockstack_core
}

alloc606 (size: 0, align: 1) {}

alloc3 (static: main::RS, size: 32, align: 8) {
    0x00 │ ╾─────alloc7<imm>─────╼ ╾────alloc597<imm>────╼ │ ╾──────╼╾──────╼
    0x10 │ 00 00 00 00 00 00 00 00 04 __ __ __ __ __ __ __ │ .........░░░░░░░
}

alloc7 (static: main::RS::LOC, size: 56, align: 8) {
    0x00 │ ╾────alloc600<imm>────╼ 0b 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾────alloc602<imm>────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
    0x20 │ ╾────alloc603<imm>────╼ 0f 00 00 00 00 00 00 00 │ ╾──────╼........
    0x30 │ 4d 01 00 00 19 00 00 00                         │ M.......
}

alloc600 (size: 11, align: 1) {
    73 72 63 2f 6d 61 69 6e 2e 72 73                │ src/main.rs
}

alloc602 (size: 0, align: 1) {}

alloc603 (size: 15, align: 1) {
    62 6c 6f 63 6b 73 74 61 63 6b 5f 63 6f 72 65    │ blockstack_core
}

alloc597 (size: 0, align: 1) {}

alloc2 (static: main::RS, size: 32, align: 8) {
    0x00 │ ╾─────alloc6<imm>─────╼ ╾────alloc588<imm>────╼ │ ╾──────╼╾──────╼
    0x10 │ 00 00 00 00 00 00 00 00 04 __ __ __ __ __ __ __ │ .........░░░░░░░
}

alloc6 (static: main::RS::LOC, size: 56, align: 8) {
    0x00 │ ╾────alloc591<imm>────╼ 0b 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾────alloc593<imm>────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
    0x20 │ ╾────alloc594<imm>────╼ 0f 00 00 00 00 00 00 00 │ ╾──────╼........
    0x30 │ 3e 01 00 00 19 00 00 00                         │ >.......
}

alloc591 (size: 11, align: 1) {
    73 72 63 2f 6d 61 69 6e 2e 72 73                │ src/main.rs
}

alloc593 (size: 0, align: 1) {}

alloc594 (size: 15, align: 1) {
    62 6c 6f 63 6b 73 74 61 63 6b 5f 63 6f 72 65    │ blockstack_core
}

alloc588 (size: 0, align: 1) {}

alloc1 (static: LOGGER, size: 0, align: 1) {}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " command [args...]\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " decode-bitcoin-header [-t|-r] BLOCK_HEIGHT PATH\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "-r";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "-t";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " decode-bitcoin-header [-t|-r] BLOCK_HEIGHT PATH\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed to read header\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " decode-tx TRANSACTION\n"];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Address: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Verified: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " decode-block BLOCK_PATH\n"];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed to open "];
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " get-block-inventory <working-dir>\n\nGiven a <working-dir>, obtain a 2100 header hash block inventory (with an empty header cache).\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Done!\n"];
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Fetched block inv in ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Fetched header hashes in ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed to open "];
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "/mainnet/chainstate/"];
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "/mainnet/burnchain/sortition"];
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " can-download-microblock <working-dir>\n\nGiven a <working-dir>, obtain a 2100 header hash inventory (with an empty header cache), and then\ncheck if the associated microblocks can be downloaded \n\n"];
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "No such block: "];
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &slog::Level = {
    let mut _0: &slog::Level;
    let mut _1: slog::Level;

    bb0: {
        _1 = slog::Level::Debug;
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &slog::Level = {
    let mut _0: &slog::Level;
    let mut _1: slog::Level;

    bb0: {
        _1 = slog::Level::Debug;
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const ": Do not have parent of anchored block ", const "/", const " yet, so cannot ask for the microblocks it produced"];
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &slog::Level = {
    let mut _0: &slog::Level;
    let mut _1: slog::Level;

    bb0: {
        _1 = slog::Level::Debug;
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &slog::Level = {
    let mut _0: &slog::Level;
    let mut _1: slog::Level;

    bb0: {
        _1 = slog::Level::Debug;
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Done!\n"];
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Checked can_download in ", const " (headers load took ", const "ms)\n"];
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Fetched header hashes in ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed to open "];
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "/mainnet/chainstate/"];
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "/mainnet/burnchain/sortition"];
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " evaluate-pox-anchor <path to mainnet/burnchain/sortition> <height> (last-height)\n"];
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Block height too low to evaluate\n"];
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const ", ", const ", ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Block height, Would select anchor, Anchor agreement\n"];
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed to open "];
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " try-mine <working-dir> [min-fee [max-time]]\n\nGiven a <working-dir>, try to ''mine'' an anchored block. This invokes the miner block\nassembly, but does not attempt to broadcast a block commit. This is useful for determining\nwhat transactions a given chain state would include in an anchor block, or otherwise\nsimulating a miner.\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &[&str; 5] = {
    let mut _0: &[&str; 5];
    let mut _1: [&str; 5];

    bb0: {
        _1 = [const "Block ", const ": ", const " uSTX, ", const " bytes, cost ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &[&str; 9] = {
    let mut _0: &[&str; 9];
    let mut _1: [&str; 9];

    bb0: {
        _1 = [const "", const " mined block @ height = ", const " off of ", const " (", const "/", const ") in ", const "ms. Min-fee: ", const ", Max-time: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[46] in main: &ExecutionCost = {
    let mut _0: &blockstack_lib::vm::costs::ExecutionCost;
    let mut _1: blockstack_lib::vm::costs::ExecutionCost;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[47] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed to open "];
        _0 = &_1;
        return;
    }
}

promoted[48] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "/mainnet/chainstate/"];
        _0 = &_1;
        return;
    }
}

promoted[49] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "/mainnet/burnchain/sortition"];
        _0 = &_1;
        return;
    }
}

promoted[50] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " decode-microblocks MICROBLOCK_STREAM_PATH\n"];
        _0 = &_1;
        return;
    }
}

promoted[51] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[52] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed to open "];
        _0 = &_1;
        return;
    }
}

promoted[53] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "       STATE_DIR is either the chain state directory OR a marf index and data db file\n"];
        _0 = &_1;
        return;
    }
}

promoted[54] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " header-indexed-get STATE_DIR BLOCK_ID_HASH KEY\n"];
        _0 = &_1;
        return;
    }
}

promoted[55] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "No such file or directory: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[56] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "No such file or directory: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[57] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "(undefined)\n"];
        _0 = &_1;
        return;
    }
}

promoted[58] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[59] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed to query DB for MARF value hash "];
        _0 = &_1;
        return;
    }
}

promoted[60] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "/vm/headers.sqlite"];
        _0 = &_1;
        return;
    }
}

promoted[61] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "/vm/index.sqlite"];
        _0 = &_1;
        return;
    }
}

promoted[62] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " exec_program [program-file.clar]\n"];
        _0 = &_1;
        return;
    }
}

promoted[63] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Program Execution Error: \n"];
        _0 = &_1;
        return;
    }
}

promoted[64] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[65] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[66] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Error reading file: "];
        _0 = &_1;
        return;
    }
}

promoted[67] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "None\n"];
        _0 = &_1;
        return;
    }
}

promoted[68] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[69] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "SQL Error: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[70] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ", ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[71] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[72] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[73] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const " "];
        _0 = &_1;
        return;
    }
}

promoted[74] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " OLD_CHAINSTATE_PATH OLD_SORTITION_DB_PATH OLD_BURNCHAIN_DB_PATH NEW_CHAINSTATE_PATH NEW_BURNCHAIN_DB_PATH\n"];
        _0 = &_1;
        return;
    }
}

promoted[75] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Will consider ", const "/", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[76] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[77] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Missing stacks block ", const "/"];
        _0 = &_1;
        return;
    }
}

promoted[78] in main: &slog::Level = {
    let mut _0: &slog::Level;
    let mut _1: slog::Level;

    bb0: {
        _1 = slog::Level::Warning;
        _0 = &_1;
        return;
    }
}

promoted[79] in main: &slog::Level = {
    let mut _0: &slog::Level;
    let mut _1: slog::Level;

    bb0: {
        _1 = slog::Level::Warning;
        _0 = &_1;
        return;
    }
}

promoted[80] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[81] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "No such stacks block ", const "/"];
        _0 = &_1;
        return;
    }
}

promoted[82] in main: &slog::Level = {
    let mut _0: &slog::Level;
    let mut _1: slog::Level;

    bb0: {
        _1 = slog::Level::Warning;
        _0 = &_1;
        return;
    }
}

promoted[83] in main: &slog::Level = {
    let mut _0: &slog::Level;
    let mut _1: slog::Level;

    bb0: {
        _1 = slog::Level::Warning;
        _0 = &_1;
        return;
    }
}

promoted[84] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Final arrival index is ", const " out of ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[85] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "\nWill replay ", const " stacks epochs out of ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[86] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " blockchain network working_dir\n"];
        _0 = &_1;
        return;
    }
}

promoted[87] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "replay-chainstate";
        _0 = &_1;
        return;
    }
}

promoted[88] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "process-block";
        _0 = &_1;
        return;
    }
}

promoted[89] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "local";
        _0 = &_1;
        return;
    }
}

promoted[90] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "docgen_boot";
        _0 = &_1;
        return;
    }
}

promoted[91] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "docgen";
        _0 = &_1;
        return;
    }
}

promoted[92] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "get-ancestors";
        _0 = &_1;
        return;
    }
}

promoted[93] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "marf-get";
        _0 = &_1;
        return;
    }
}

promoted[94] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "exec_program";
        _0 = &_1;
        return;
    }
}

promoted[95] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "header-indexed-get";
        _0 = &_1;
        return;
    }
}

promoted[96] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "decode-microblocks";
        _0 = &_1;
        return;
    }
}

promoted[97] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "try-mine";
        _0 = &_1;
        return;
    }
}

promoted[98] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "evaluate-pox-anchor";
        _0 = &_1;
        return;
    }
}

promoted[99] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "can-download-microblock";
        _0 = &_1;
        return;
    }
}

promoted[100] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "get-block-inventory";
        _0 = &_1;
        return;
    }
}

promoted[101] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "decode-block";
        _0 = &_1;
        return;
    }
}

promoted[102] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "decode-tx";
        _0 = &_1;
        return;
    }
}

promoted[103] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "decode-bitcoin-header";
        _0 = &_1;
        return;
    }
}

promoted[104] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "--version";
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: {closure@src/main.rs:159:22: 159:26}, _2: HexError) -> () {
    debug _e => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: !;
    let mut _7: &[&str; 1];

    bb0: {
        _7 = const _;
        _5 = _7 as &[&str] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = _eprint(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = exit(const 1_i32) -> unwind continue;
    }
}

promoted[0] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed to decode transaction: must be a hex string\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#1}(_1: {closure@src/main.rs:169:22: 169:25}, _2: blockstack_lib::codec::Error) -> () {
    debug e => _2;
    debug debug_cursor => (*(_1.0: &blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>));
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &&blockstack_lib::codec::Error;
    let _11: &blockstack_lib::codec::Error;
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: std::slice::Iter<'_, std::vec::Vec<u8>>;
    let mut _16: std::slice::Iter<'_, std::vec::Vec<u8>>;
    let _17: &[std::vec::Vec<u8>];
    let _18: &std::vec::Vec<std::vec::Vec<u8>>;
    let mut _19: std::slice::Iter<'_, std::vec::Vec<u8>>;
    let mut _20: std::option::Option<&std::vec::Vec<u8>>;
    let mut _21: &mut std::slice::Iter<'_, std::vec::Vec<u8>>;
    let mut _22: isize;
    let _24: ();
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let _31: &std::string::String;
    let _32: std::string::String;
    let _33: &[u8];
    let _34: !;
    let mut _36: &[&str; 1];
    let mut _37: &[&str; 2];
    let mut _38: &blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>;
    scope 1 {
        debug iter => _19;
        let _23: &std::vec::Vec<u8>;
        scope 2 {
            debug buf => _23;
            let mut _35: &[&str; 2];
        }
    }

    bb0: {
        _37 = const _;
        _5 = _37 as &[&str] (PointerCoercion(Unsize));
        _11 = &_2;
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<&blockstack_lib::codec::Error>(_10) -> [return: bb1, unwind: bb21];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _3 = _eprint(move _4) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _36 = const _;
        _14 = _36 as &[&str] (PointerCoercion(Unsize));
        _13 = Arguments::<'_>::new_const(move _14) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _12 = _eprint(move _13) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        _38 = deref_copy (_1.0: &blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>);
        _18 = LogReader::<'_, std::io::Cursor<&Vec<u8>>>::log(_38) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _17 = <Vec<Vec<u8>> as Deref>::deref(_18) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        _16 = core::slice::<impl [Vec<u8>]>::iter(_17) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _15 = <std::slice::Iter<'_, Vec<u8>> as IntoIterator>::into_iter(move _16) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        _19 = move _15;
        goto -> bb10;
    }

    bb10: {
        _21 = &mut _19;
        _20 = <std::slice::Iter<'_, Vec<u8>> as Iterator>::next(_21) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb14, 1: bb12, otherwise: bb13];
    }

    bb12: {
        _23 = ((_20 as Some).0: &std::vec::Vec<u8>);
        _35 = const _;
        _26 = _35 as &[&str] (PointerCoercion(Unsize));
        _33 = <Vec<u8> as Deref>::deref(_23) -> [return: bb15, unwind: bb21];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _34 = exit(const 1_i32) -> bb21;
    }

    bb15: {
        _32 = to_hex(_33) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _31 = &_32;
        _30 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_31) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        _29 = [move _30];
        _28 = &_29;
        _27 = _28 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> [return: bb18, unwind: bb20];
    }

    bb18: {
        _24 = _eprint(move _25) -> [return: bb19, unwind: bb20];
    }

    bb19: {
        drop(_32) -> [return: bb10, unwind: bb21];
    }

    bb20 (cleanup): {
        drop(_32) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_2) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }
}

promoted[0] in main::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "  ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Bytes consumed:\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Failed to decode transaction: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#2}(_1: {closure@src/main.rs:196:22: 196:26}, _2: blockstack_lib::codec::Error) -> () {
    debug _e => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: !;
    let mut _7: &[&str; 1];

    bb0: {
        _7 = const _;
        _5 = _7 as &[&str] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        _3 = _eprint(move _4) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _6 = exit(const 1_i32) -> bb3;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

promoted[0] in main::{closure#2}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed to decode block\n"];
        _0 = &_1;
        return;
    }
}

static main::RS: RecordStatic<'_> = {
    let mut _0: slog::RecordStatic<'_>;
    let mut _1: &slog::RecordLocation;
    let _2: &slog::RecordLocation;
    let _3: &slog::RecordLocation;
    let mut _4: slog::Level;
    let mut _5: &str;
    let _6: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc6: &RecordLocation};
        _2 = &(*_3);
        _1 = &(*_2);
        StorageLive(_4);
        _4 = slog::Level::Debug;
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "";
        _5 = &(*_6);
        _0 = RecordStatic::<'_> { location: move _1, tag: move _5, level: move _4 };
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_1);
        StorageDead(_6);
        StorageDead(_2);
        return;
    }
}

alloc6 (static: main::RS::LOC, size: 56, align: 8) {
    0x00 │ ╾────alloc591<imm>────╼ 0b 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾────alloc593<imm>────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
    0x20 │ ╾────alloc594<imm>────╼ 0f 00 00 00 00 00 00 00 │ ╾──────╼........
    0x30 │ 3e 01 00 00 19 00 00 00                         │ >.......
}

alloc591 (size: 11, align: 1) {
    73 72 63 2f 6d 61 69 6e 2e 72 73                │ src/main.rs
}

alloc593 (size: 0, align: 1) {}

alloc594 (size: 15, align: 1) {
    62 6c 6f 63 6b 73 74 61 63 6b 5f 63 6f 72 65    │ blockstack_core
}

static main::RS::LOC: RecordLocation = {
    let mut _0: slog::RecordLocation;

    bb0: {
        _0 = RecordLocation { file: const "src/main.rs", line: const 318_u32, column: const 25_u32, function: const "", module: const "blockstack_core" };
        return;
    }
}

fn main::{closure#3}(_1: {closure@src/main.rs:329:40: 329:45}, _2: StacksBlockHeader) -> (StacksBlockHeader, ConsensusHash) {
    debug hdr => _2;
    debug child_block_info => (*(_1.0: &blockstack_lib::chainstate::stacks::db::blocks::StagingBlock));
    let mut _0: (blockstack_lib::types::chainstate::StacksBlockHeader, blockstack_lib::chainstate::burn::ConsensusHash);
    let mut _3: blockstack_lib::chainstate::burn::ConsensusHash;
    let mut _4: &blockstack_lib::chainstate::stacks::db::blocks::StagingBlock;

    bb0: {
        _4 = deref_copy (_1.0: &blockstack_lib::chainstate::stacks::db::blocks::StagingBlock);
        _3 = ((*_4).2: blockstack_lib::chainstate::burn::ConsensusHash);
        _0 = (move _2, move _3);
        return;
    }
}

static main::RS: RecordStatic<'_> = {
    let mut _0: slog::RecordStatic<'_>;
    let mut _1: &slog::RecordLocation;
    let _2: &slog::RecordLocation;
    let _3: &slog::RecordLocation;
    let mut _4: slog::Level;
    let mut _5: &str;
    let _6: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc7: &RecordLocation};
        _2 = &(*_3);
        _1 = &(*_2);
        StorageLive(_4);
        _4 = slog::Level::Debug;
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "";
        _5 = &(*_6);
        _0 = RecordStatic::<'_> { location: move _1, tag: move _5, level: move _4 };
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_1);
        StorageDead(_6);
        StorageDead(_2);
        return;
    }
}

alloc7 (static: main::RS::LOC, size: 56, align: 8) {
    0x00 │ ╾────alloc600<imm>────╼ 0b 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾────alloc602<imm>────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
    0x20 │ ╾────alloc603<imm>────╼ 0f 00 00 00 00 00 00 00 │ ╾──────╼........
    0x30 │ 4d 01 00 00 19 00 00 00                         │ M.......
}

alloc600 (size: 11, align: 1) {
    73 72 63 2f 6d 61 69 6e 2e 72 73                │ src/main.rs
}

alloc602 (size: 0, align: 1) {}

alloc603 (size: 15, align: 1) {
    62 6c 6f 63 6b 73 74 61 63 6b 5f 63 6f 72 65    │ blockstack_core
}

static main::RS::LOC: RecordLocation = {
    let mut _0: slog::RecordLocation;

    bb0: {
        _0 = RecordLocation { file: const "src/main.rs", line: const 333_u32, column: const 25_u32, function: const "", module: const "blockstack_core" };
        return;
    }
}

fn main::{closure#4}(_1: {closure@src/main.rs:375:18: 375:21}, _2: &std::string::String) -> u64 {
    debug x => _2;
    let mut _0: u64;
    let mut _3: std::result::Result<u64, std::num::ParseIntError>;
    let _4: &str;
    let _5: &str;

    bb0: {
        _4 = <std::string::String as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = core::str::<impl str>::parse::<u64>(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = const "Failed to parse <end-height> argument";
        _0 = Result::<u64, ParseIntError>::expect(move _3, _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 20_usize;
        return;
    }
}

fn main::{closure#5}(_1: {closure@src/main.rs:555:22: 555:25}, _2: blockstack_lib::codec::Error) -> () {
    debug e => _2;
    debug debug_cursor => (*(_1.0: &blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>));
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &&blockstack_lib::codec::Error;
    let _11: &blockstack_lib::codec::Error;
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: std::slice::Iter<'_, std::vec::Vec<u8>>;
    let mut _16: std::slice::Iter<'_, std::vec::Vec<u8>>;
    let _17: &[std::vec::Vec<u8>];
    let _18: &std::vec::Vec<std::vec::Vec<u8>>;
    let mut _19: std::slice::Iter<'_, std::vec::Vec<u8>>;
    let mut _20: std::option::Option<&std::vec::Vec<u8>>;
    let mut _21: &mut std::slice::Iter<'_, std::vec::Vec<u8>>;
    let mut _22: isize;
    let _24: ();
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let _31: &std::string::String;
    let _32: std::string::String;
    let _33: &[u8];
    let _34: !;
    let mut _36: &[&str; 1];
    let mut _37: &[&str; 2];
    let mut _38: &blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>;
    scope 1 {
        debug iter => _19;
        let _23: &std::vec::Vec<u8>;
        scope 2 {
            debug buf => _23;
            let mut _35: &[&str; 2];
        }
    }

    bb0: {
        _37 = const _;
        _5 = _37 as &[&str] (PointerCoercion(Unsize));
        _11 = &_2;
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<&blockstack_lib::codec::Error>(_10) -> [return: bb1, unwind: bb21];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _3 = _eprint(move _4) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _36 = const _;
        _14 = _36 as &[&str] (PointerCoercion(Unsize));
        _13 = Arguments::<'_>::new_const(move _14) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _12 = _eprint(move _13) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        _38 = deref_copy (_1.0: &blockstack_lib::util::retry::LogReader<'_, std::io::Cursor<&std::vec::Vec<u8>>>);
        _18 = LogReader::<'_, std::io::Cursor<&Vec<u8>>>::log(_38) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _17 = <Vec<Vec<u8>> as Deref>::deref(_18) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        _16 = core::slice::<impl [Vec<u8>]>::iter(_17) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _15 = <std::slice::Iter<'_, Vec<u8>> as IntoIterator>::into_iter(move _16) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        _19 = move _15;
        goto -> bb10;
    }

    bb10: {
        _21 = &mut _19;
        _20 = <std::slice::Iter<'_, Vec<u8>> as Iterator>::next(_21) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb14, 1: bb12, otherwise: bb13];
    }

    bb12: {
        _23 = ((_20 as Some).0: &std::vec::Vec<u8>);
        _35 = const _;
        _26 = _35 as &[&str] (PointerCoercion(Unsize));
        _33 = <Vec<u8> as Deref>::deref(_23) -> [return: bb15, unwind: bb21];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _34 = exit(const 1_i32) -> bb21;
    }

    bb15: {
        _32 = to_hex(_33) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _31 = &_32;
        _30 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_31) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        _29 = [move _30];
        _28 = &_29;
        _27 = _28 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> [return: bb18, unwind: bb20];
    }

    bb18: {
        _24 = _eprint(move _25) -> [return: bb19, unwind: bb20];
    }

    bb19: {
        drop(_32) -> [return: bb10, unwind: bb21];
    }

    bb20 (cleanup): {
        drop(_32) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_2) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }
}

promoted[0] in main::{closure#5}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "  ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#5}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Bytes consumed:\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main::{closure#5}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Failed to decode microblocks: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#6}(_1: {closure@src/main.rs:612:17: 612:22}, _2: &Row<'_>) -> Result<std::string::String, rusqlite::Error> {
    debug row => _2;
    let mut _0: std::result::Result<std::string::String, rusqlite::Error>;
    let _3: std::string::String;
    scope 1 {
        debug s => _3;
    }

    bb0: {
        _3 = Row::<'_>::get_unwrap::<usize, std::string::String>(_2, const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<std::string::String, rusqlite::Error>::Ok(move _3);
        return;
    }
}

fn main::{closure#7}(_1: {closure@src/main.rs:674:87: 674:92}, _2: &Row<'_>) -> Result<(blockstack_lib::types::chainstate::BurnchainHeaderHash, BlockHeaderHash), rusqlite::Error> {
    debug row => _2;
    let mut _0: std::result::Result<(blockstack_lib::types::chainstate::BurnchainHeaderHash, blockstack_lib::types::chainstate::BlockHeaderHash), rusqlite::Error>;
    let mut _3: (blockstack_lib::types::chainstate::BurnchainHeaderHash, blockstack_lib::types::chainstate::BlockHeaderHash);
    let mut _4: blockstack_lib::types::chainstate::BurnchainHeaderHash;
    let mut _5: blockstack_lib::types::chainstate::BlockHeaderHash;

    bb0: {
        _4 = Row::<'_>::get_unwrap::<usize, blockstack_lib::types::chainstate::BurnchainHeaderHash>(_2, const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = Row::<'_>::get_unwrap::<usize, BlockHeaderHash>(_2, const 1_usize) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = (move _4, move _5);
        _0 = Result::<(blockstack_lib::types::chainstate::BurnchainHeaderHash, BlockHeaderHash), rusqlite::Error>::Ok(move _3);
        return;
    }
}

fn main::{closure#8}(_1: &mut {closure@src/main.rs:858:47: 858:61}, _2: &(StacksBlockId, u64), _3: &(StacksBlockId, u64)) -> std::cmp::Ordering {
    let mut _0: std::cmp::Ordering;
    let _4: &&(blockstack_lib::types::chainstate::StacksBlockId, u64);
    let _5: &&(blockstack_lib::types::chainstate::StacksBlockId, u64);
    let mut _6: std::option::Option<std::cmp::Ordering>;
    let mut _7: &u64;
    let _8: &u64;
    let mut _9: &(blockstack_lib::types::chainstate::StacksBlockId, u64);
    let mut _10: &(blockstack_lib::types::chainstate::StacksBlockId, u64);
    scope 1 {
        debug a => _4;
        debug b => _5;
    }

    bb0: {
        _4 = &_2;
        _5 = &_3;
        _9 = deref_copy (*_4);
        _7 = &((*_9).1: u64);
        _10 = deref_copy (*_5);
        _8 = &((*_10).1: u64);
        _6 = <u64 as PartialOrd>::partial_cmp(move _7, _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Option::<std::cmp::Ordering>::unwrap(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn main::{closure#9}(_1: &mut {closure@src/main.rs:861:18: 861:26}, _2: (StacksBlockId, u64)) -> StacksBlockId {
    let mut _0: blockstack_lib::types::chainstate::StacksBlockId;
    scope 1 {
        debug h => _0;
    }

    bb0: {
        _0 = (_2.0: blockstack_lib::types::chainstate::StacksBlockId);
        return;
    }
}

fn main::{closure#10}(_1: {closure@src/main.rs:904:31: 904:38}) -> () {
    debug p2p_chainstate => (_1.0: blockstack_lib::chainstate::stacks::db::StacksChainState);
    debug p2p_new_sortition_db => (_1.1: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB);
    let mut _0: ();
    let _2: blockstack_lib::chainstate::stacks::db::unconfirmed::ProcessedUnconfirmedState;
    let mut _3: std::result::Result<blockstack_lib::chainstate::stacks::db::unconfirmed::ProcessedUnconfirmedState, blockstack_lib::chainstate::stacks::Error>;
    let mut _4: &mut blockstack_lib::chainstate::stacks::db::StacksChainState;
    let mut _5: &dyn blockstack_lib::vm::database::BurnStateDB;
    let _6: &blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionDBTxContext, blockstack_lib::types::chainstate::SortitionId>;
    let _7: blockstack_lib::util::db::IndexDBConn<'_, blockstack_lib::chainstate::burn::db::sortdb::SortitionDBTxContext, blockstack_lib::types::chainstate::SortitionId>;
    let mut _8: &blockstack_lib::chainstate::burn::db::sortdb::SortitionDB;
    let _9: &str;
    let _10: ();

    bb0: {
        goto -> bb1;
    }

    bb1: {
        _4 = &mut (_1.0: blockstack_lib::chainstate::stacks::db::StacksChainState);
        _8 = &(_1.1: blockstack_lib::chainstate::burn::db::sortdb::SortitionDB);
        _7 = SortitionDB::index_conn(move _8) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _6 = &_7;
        _5 = _6 as &dyn blockstack_lib::vm::database::BurnStateDB (PointerCoercion(Unsize));
        _3 = unconfirmed::<impl StacksChainState>::refresh_unconfirmed_state(move _4, move _5) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _9 = const "Failed to open unconfirmed Clarity state";
        _2 = Result::<ProcessedUnconfirmedState, blockstack_lib::chainstate::stacks::Error>::expect(move _3, _9) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _10 = blockstack_lib::util::sleep_ms(const 100_u64) -> [return: bb8, unwind: bb6];
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        goto -> bb1;
    }
}

static main::RS: RecordStatic<'_> = {
    let mut _0: slog::RecordStatic<'_>;
    let mut _1: &slog::RecordLocation;
    let _2: &slog::RecordLocation;
    let _3: &slog::RecordLocation;
    let mut _4: slog::Level;
    let mut _5: &str;
    let _6: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc8: &RecordLocation};
        _2 = &(*_3);
        _1 = &(*_2);
        StorageLive(_4);
        _4 = slog::Level::Warning;
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "";
        _5 = &(*_6);
        _0 = RecordStatic::<'_> { location: move _1, tag: move _5, level: move _4 };
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_1);
        StorageDead(_6);
        StorageDead(_2);
        return;
    }
}

alloc8 (static: main::RS::LOC, size: 56, align: 8) {
    0x00 │ ╾────alloc609<imm>────╼ 0b 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾────alloc611<imm>────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
    0x20 │ ╾────alloc612<imm>────╼ 0f 00 00 00 00 00 00 00 │ ╾──────╼........
    0x30 │ e5 03 00 00 21 00 00 00                         │ ....!...
}

alloc609 (size: 11, align: 1) {
    73 72 63 2f 6d 61 69 6e 2e 72 73                │ src/main.rs
}

alloc611 (size: 0, align: 1) {}

alloc612 (size: 15, align: 1) {
    62 6c 6f 63 6b 73 74 61 63 6b 5f 63 6f 72 65    │ blockstack_core
}

static main::RS::LOC: RecordLocation = {
    let mut _0: slog::RecordLocation;

    bb0: {
        _0 = RecordLocation { file: const "src/main.rs", line: const 997_u32, column: const 33_u32, function: const "", module: const "blockstack_core" };
        return;
    }
}

static main::RS: RecordStatic<'_> = {
    let mut _0: slog::RecordStatic<'_>;
    let mut _1: &slog::RecordLocation;
    let _2: &slog::RecordLocation;
    let _3: &slog::RecordLocation;
    let mut _4: slog::Level;
    let mut _5: &str;
    let _6: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc9: &RecordLocation};
        _2 = &(*_3);
        _1 = &(*_2);
        StorageLive(_4);
        _4 = slog::Level::Warning;
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "";
        _5 = &(*_6);
        _0 = RecordStatic::<'_> { location: move _1, tag: move _5, level: move _4 };
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_1);
        StorageDead(_6);
        StorageDead(_2);
        return;
    }
}

alloc9 (static: main::RS::LOC, size: 56, align: 8) {
    0x00 │ ╾────alloc618<imm>────╼ 0b 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾────alloc620<imm>────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
    0x20 │ ╾────alloc621<imm>────╼ 0f 00 00 00 00 00 00 00 │ ╾──────╼........
    0x30 │ ec 03 00 00 1d 00 00 00                         │ ........
}

alloc618 (size: 11, align: 1) {
    73 72 63 2f 6d 61 69 6e 2e 72 73                │ src/main.rs
}

alloc620 (size: 0, align: 1) {}

alloc621 (size: 15, align: 1) {
    62 6c 6f 63 6b 73 74 61 63 6b 5f 63 6f 72 65    │ blockstack_core
}

static main::RS::LOC: RecordLocation = {
    let mut _0: slog::RecordLocation;

    bb0: {
        _0 = RecordLocation { file: const "src/main.rs", line: const 1004_u32, column: const 29_u32, function: const "", module: const "blockstack_core" };
        return;
    }
}
