// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const ADDR: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "127.0.0.1";
        return;
    }
}

fn start_repl() -> {async fn body@cli/src/argparse.rs:99:27: 139:2} {
    let mut _0: {async fn body@cli/src/argparse.rs:99:27: 139:2};

    bb0: {
        _0 = {coroutine@cli/src/argparse.rs:99:27: 139:2 (#0)};
        return;
    }
}

fn start_repl::{closure#0}(_1: Pin<&mut {async fn body@cli/src/argparse.rs:99:27: 139:2}>, _2: &mut std::task::Context<'_>) -> Poll<()> {
    debug _task_context => _329;
    let mut _0: std::task::Poll<()>;
    let _3: &yaml_rust::yaml::Yaml;
    let mut _4: &std::vec::Vec<yaml_rust::yaml::Yaml>;
    let mut _5: std::result::Result<std::vec::Vec<yaml_rust::yaml::Yaml>, yaml_rust::scanner::ScanError>;
    let _6: &str;
    let _7: &str;
    let mut _8: clap::App<'_, '_>;
    let mut _9: std::option::Option<&str>;
    let mut _10: &clap::ArgMatches<'_>;
    let mut _11: isize;
    let _13: &str;
    let mut _14: std::option::Option<&str>;
    let mut _15: &clap::ArgMatches<'_>;
    let mut _16: isize;
    let mut _18: std::result::Result<u16, std::num::ParseIntError>;
    let mut _19: isize;
    let _21: ();
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let _24: !;
    let mut _25: std::option::Option<&str>;
    let mut _26: &clap::ArgMatches<'_>;
    let mut _27: isize;
    let mut _30: {async fn body@skytable::aio::TlsConnection::new::{closure#0}};
    let mut _31: {async fn body@skytable::aio::TlsConnection::new::{closure#0}};
    let mut _32: u16;
    let mut _33: std::task::Poll<std::result::Result<skytable::aio::TlsConnection, skytable::error::Error>>;
    let mut _34: std::pin::Pin<&mut {async fn body@skytable::aio::TlsConnection::new::{closure#0}}>;
    let mut _35: &mut {async fn body@skytable::aio::TlsConnection::new::{closure#0}};
    let mut _36: &mut std::task::Context<'_>;
    let mut _37: isize;
    let mut _39: isize;
    let _42: ();
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &skytable::error::Error;
    let _50: !;
    let mut _51: skytable::aio::TlsConnection;
    let mut _52: std::option::Option<&str>;
    let mut _53: &clap::ArgMatches<'_>;
    let mut _54: isize;
    let mut _55: bool;
    let mut _56: {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _57: {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _58: &mut runner::Runner<skytable::aio::TlsConnection>;
    let _59: &&str;
    let mut _60: std::task::Poll<()>;
    let mut _61: std::pin::Pin<&mut {async fn body@cli/src/runner.rs:154:62: 175:6}>;
    let mut _62: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _63: &mut std::task::Context<'_>;
    let mut _64: isize;
    let _66: ();
    let mut _67: std::fmt::Arguments<'_>;
    let mut _68: &[&str];
    let mut _69: &[core::fmt::rt::Argument<'_>];
    let _70: &[core::fmt::rt::Argument<'_>; 2];
    let _71: [core::fmt::rt::Argument<'_>; 2];
    let mut _72: core::fmt::rt::Argument<'_>;
    let _73: &&str;
    let mut _74: core::fmt::rt::Argument<'_>;
    let _75: &u16;
    let _76: ();
    let mut _77: std::fmt::Arguments<'_>;
    let mut _78: &[&str];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let _80: &[core::fmt::rt::Argument<'_>; 2];
    let _81: [core::fmt::rt::Argument<'_>; 2];
    let mut _82: core::fmt::rt::Argument<'_>;
    let _83: &&str;
    let mut _84: core::fmt::rt::Argument<'_>;
    let _85: &&str;
    let _86: ();
    let mut _87: &mut rustyline::Editor<()>;
    let _88: ();
    let mut _89: &mut rustyline::Editor<()>;
    let mut _90: std::result::Result<(), rustyline::error::ReadlineError>;
    let mut _91: &mut rustyline::Editor<()>;
    let _92: &str;
    let mut _93: &mut rustyline::Editor<()>;
    let _94: &str;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: &str;
    let mut _98: &std::string::String;
    let _99: &str;
    let mut _100: &std::string::String;
    let mut _101: bool;
    let mut _102: bool;
    let _104: ();
    let mut _105: std::result::Result<(), std::io::Error>;
    let mut _106: std::result::Result<(), std::io::Error>;
    let mut _107: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _108: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _109: &mut std::io::Stdout;
    let mut _110: &mut std::io::Stdout;
    let mut _111: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _112: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21};
    let mut _113: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27};
    let mut _114: &mut std::io::Stdout;
    let _115: &str;
    let _116: ();
    let mut _117: std::result::Result<(), std::io::Error>;
    let mut _118: std::result::Result<(), std::io::Error>;
    let mut _119: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _120: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _121: &mut std::io::Stdout;
    let mut _122: &mut std::io::Stdout;
    let mut _123: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _124: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21};
    let mut _125: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27};
    let mut _126: &mut std::io::Stdout;
    let _127: &str;
    let _128: ();
    let mut _129: std::io::Stdout;
    let mut _130: bool;
    let mut _131: &std::string::String;
    let mut _132: {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _133: {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _134: &mut runner::Runner<skytable::aio::TlsConnection>;
    let _135: &str;
    let _136: &std::string::String;
    let mut _137: std::task::Poll<()>;
    let mut _138: std::pin::Pin<&mut {async fn body@cli/src/runner.rs:154:62: 175:6}>;
    let mut _139: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _140: &mut std::task::Context<'_>;
    let mut _141: isize;
    let _144: ();
    let mut _145: std::fmt::Arguments<'_>;
    let mut _146: &[&str];
    let mut _147: &[core::fmt::rt::Argument<'_>];
    let _148: &[core::fmt::rt::Argument<'_>; 1];
    let _149: [core::fmt::rt::Argument<'_>; 1];
    let mut _150: core::fmt::rt::Argument<'_>;
    let _151: &rustyline::error::ReadlineError;
    let _152: !;
    let mut _153: std::result::Result<(), rustyline::error::ReadlineError>;
    let mut _154: &mut rustyline::Editor<()>;
    let _155: &str;
    let mut _156: isize;
    let _158: ();
    let mut _159: std::fmt::Arguments<'_>;
    let mut _160: &[&str];
    let mut _161: &[core::fmt::rt::Argument<'_>];
    let _162: &[core::fmt::rt::Argument<'_>; 1];
    let _163: [core::fmt::rt::Argument<'_>; 1];
    let mut _164: core::fmt::rt::Argument<'_>;
    let _165: &rustyline::error::ReadlineError;
    let mut _167: {async fn body@skytable::AsyncConnection::new::{closure#0}};
    let mut _168: {async fn body@skytable::AsyncConnection::new::{closure#0}};
    let mut _169: u16;
    let mut _170: std::task::Poll<std::result::Result<skytable::AsyncConnection, std::io::Error>>;
    let mut _171: std::pin::Pin<&mut {async fn body@skytable::AsyncConnection::new::{closure#0}}>;
    let mut _172: &mut {async fn body@skytable::AsyncConnection::new::{closure#0}};
    let mut _173: &mut std::task::Context<'_>;
    let mut _174: isize;
    let mut _176: isize;
    let _179: ();
    let mut _180: std::fmt::Arguments<'_>;
    let mut _181: &[&str];
    let mut _182: &[core::fmt::rt::Argument<'_>];
    let _183: &[core::fmt::rt::Argument<'_>; 1];
    let _184: [core::fmt::rt::Argument<'_>; 1];
    let mut _185: core::fmt::rt::Argument<'_>;
    let _186: &std::io::Error;
    let _187: !;
    let mut _188: skytable::AsyncConnection;
    let mut _189: std::option::Option<&str>;
    let mut _190: &clap::ArgMatches<'_>;
    let mut _191: isize;
    let mut _192: bool;
    let mut _193: {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _194: {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _195: &mut runner::Runner<skytable::AsyncConnection>;
    let _196: &&str;
    let mut _197: std::task::Poll<()>;
    let mut _198: std::pin::Pin<&mut {async fn body@cli/src/runner.rs:154:62: 175:6}>;
    let mut _199: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _200: &mut std::task::Context<'_>;
    let mut _201: isize;
    let _203: ();
    let mut _204: std::fmt::Arguments<'_>;
    let mut _205: &[&str];
    let mut _206: &[core::fmt::rt::Argument<'_>];
    let _207: &[core::fmt::rt::Argument<'_>; 2];
    let _208: [core::fmt::rt::Argument<'_>; 2];
    let mut _209: core::fmt::rt::Argument<'_>;
    let _210: &&str;
    let mut _211: core::fmt::rt::Argument<'_>;
    let _212: &u16;
    let _213: ();
    let mut _214: std::fmt::Arguments<'_>;
    let mut _215: &[&str];
    let mut _216: &[core::fmt::rt::Argument<'_>];
    let _217: &[core::fmt::rt::Argument<'_>; 2];
    let _218: [core::fmt::rt::Argument<'_>; 2];
    let mut _219: core::fmt::rt::Argument<'_>;
    let _220: &&str;
    let mut _221: core::fmt::rt::Argument<'_>;
    let _222: &&str;
    let _223: ();
    let mut _224: &mut rustyline::Editor<()>;
    let _225: ();
    let mut _226: &mut rustyline::Editor<()>;
    let mut _227: std::result::Result<(), rustyline::error::ReadlineError>;
    let mut _228: &mut rustyline::Editor<()>;
    let _229: &str;
    let mut _230: &mut rustyline::Editor<()>;
    let _231: &str;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: &str;
    let mut _235: &std::string::String;
    let _236: &str;
    let mut _237: &std::string::String;
    let mut _238: bool;
    let mut _239: bool;
    let _241: ();
    let mut _242: std::result::Result<(), std::io::Error>;
    let mut _243: std::result::Result<(), std::io::Error>;
    let mut _244: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _245: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _246: &mut std::io::Stdout;
    let mut _247: &mut std::io::Stdout;
    let mut _248: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _249: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21};
    let mut _250: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27};
    let mut _251: &mut std::io::Stdout;
    let _252: &str;
    let _253: ();
    let mut _254: std::result::Result<(), std::io::Error>;
    let mut _255: std::result::Result<(), std::io::Error>;
    let mut _256: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _257: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _258: &mut std::io::Stdout;
    let mut _259: &mut std::io::Stdout;
    let mut _260: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _261: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21};
    let mut _262: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27};
    let mut _263: &mut std::io::Stdout;
    let _264: &str;
    let _265: ();
    let mut _266: std::io::Stdout;
    let mut _267: bool;
    let mut _268: &std::string::String;
    let mut _269: {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _270: {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _271: &mut runner::Runner<skytable::AsyncConnection>;
    let _272: &str;
    let _273: &std::string::String;
    let mut _274: std::task::Poll<()>;
    let mut _275: std::pin::Pin<&mut {async fn body@cli/src/runner.rs:154:62: 175:6}>;
    let mut _276: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _277: &mut std::task::Context<'_>;
    let mut _278: isize;
    let _281: ();
    let mut _282: std::fmt::Arguments<'_>;
    let mut _283: &[&str];
    let mut _284: &[core::fmt::rt::Argument<'_>];
    let _285: &[core::fmt::rt::Argument<'_>; 1];
    let _286: [core::fmt::rt::Argument<'_>; 1];
    let mut _287: core::fmt::rt::Argument<'_>;
    let _288: &rustyline::error::ReadlineError;
    let _289: !;
    let mut _290: std::result::Result<(), rustyline::error::ReadlineError>;
    let mut _291: &mut rustyline::Editor<()>;
    let _292: &str;
    let mut _293: isize;
    let _295: ();
    let mut _296: std::fmt::Arguments<'_>;
    let mut _297: &[&str];
    let mut _298: &[core::fmt::rt::Argument<'_>];
    let _299: &[core::fmt::rt::Argument<'_>; 1];
    let _300: [core::fmt::rt::Argument<'_>; 1];
    let mut _301: core::fmt::rt::Argument<'_>;
    let _302: &rustyline::error::ReadlineError;
    let _303: ();
    let mut _304: std::fmt::Arguments<'_>;
    let mut _305: &[&str];
    let mut _318: &str;
    let mut _319: &str;
    let mut _320: bool;
    let mut _321: bool;
    let mut _322: bool;
    let mut _323: bool;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: ();
    let mut _329: &mut std::task::Context<'_>;
    let mut _330: u32;
    let mut _331: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _332: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _333: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _334: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _335: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _336: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _337: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _338: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _339: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _340: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _341: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _342: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _343: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _344: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _345: &str;
    let mut _346: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _347: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _348: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _349: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _350: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _351: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _352: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _353: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _354: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _355: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _356: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _357: &str;
    let mut _358: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _359: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _360: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _361: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _362: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _363: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _364: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _365: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _366: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _367: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _368: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _369: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _370: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _371: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _372: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _373: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _374: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _375: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _376: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _377: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _378: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _379: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _380: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _381: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _382: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _383: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _384: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _385: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _386: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _387: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _388: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _389: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _390: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _391: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _392: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _393: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _394: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _395: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _396: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _397: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _398: &str;
    let mut _399: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _400: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _401: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _402: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _403: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _404: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _405: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _406: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _407: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _408: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _409: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _410: &str;
    let mut _411: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _412: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _413: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _414: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _415: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _416: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _417: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _418: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _419: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _420: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _421: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _422: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _423: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _424: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _425: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _426: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _427: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _428: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _429: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _430: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _431: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _432: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _433: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _434: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _435: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _436: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _437: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _438: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _439: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _440: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _441: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _442: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _443: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _444: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _445: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _446: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _447: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _448: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _449: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _450: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _451: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _452: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _453: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _454: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _455: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _456: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _457: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _458: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _459: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _460: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _461: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _462: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _463: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _464: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _465: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _466: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _467: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _468: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _469: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _470: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _471: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _472: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _473: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _474: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _475: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _476: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _477: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _478: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _479: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _480: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _481: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _482: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _483: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    scope 1 {
        debug cfg_layout => _3;
        scope 2 {
            debug matches => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#3).1: clap::ArgMatches<'_>);
            let _12: &str;
            scope 3 {
                debug host => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#3).2: &str);
                let _17: &str;
                scope 5 {
                    debug port => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#3).3: u16);
                    let _166: skytable::AsyncConnection;
                    let _177: skytable::AsyncConnection;
                    let _178: std::io::Error;
                    let mut _308: &[&str; 1];
                    scope 8 {
                        debug sslcert => _28;
                        let _28: &str;
                        let _29: skytable::aio::TlsConnection;
                        let _40: skytable::aio::TlsConnection;
                        let _41: skytable::error::Error;
                        scope 9 {
                            debug con => _29;
                            scope 15 {
                                debug runner => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#4).2: runner::Runner<skytable::aio::TlsConnection>);
                                let mut _315: &[&str; 3];
                                let mut _316: &[&str; 3];
                                scope 16 {
                                    debug eval_expr => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#4).3: &str);
                                    scope 17 {
                                        debug __awaitee => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#4).4: {async fn body@cli/src/runner.rs:154:62: 175:6});
                                        let _65: ();
                                        scope 18 {
                                        }
                                        scope 19 {
                                            debug result => _65;
                                        }
                                    }
                                }
                                scope 20 {
                                    debug editor => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#5).5: rustyline::Editor<()>);
                                    scope 21 {
                                        let _143: rustyline::error::ReadlineError;
                                        scope 22 {
                                            debug line => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#5).7: std::string::String);
                                            let mut _103: std::io::Stdout;
                                            scope 23 {
                                                debug stdout => _103;
                                            }
                                            scope 24 {
                                                debug __awaitee => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#5).9: {async fn body@cli/src/runner.rs:154:62: 175:6});
                                                let _142: ();
                                                scope 25 {
                                                }
                                                scope 26 {
                                                    debug result => _142;
                                                }
                                            }
                                        }
                                        scope 27 {
                                            debug err => _143;
                                            let mut _313: &[&str; 2];
                                        }
                                        scope 28 {
                                            debug e => _157;
                                            let _157: rustyline::error::ReadlineError;
                                            let mut _314: &[&str; 2];
                                        }
                                    }
                                }
                            }
                        }
                        scope 10 {
                            debug __awaitee => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#3).4: {async fn body@skytable::aio::TlsConnection::new::{closure#0}});
                            let _38: std::result::Result<skytable::aio::TlsConnection, skytable::error::Error>;
                            scope 11 {
                            }
                            scope 12 {
                                debug result => _38;
                            }
                        }
                        scope 13 {
                            debug c => _40;
                        }
                        scope 14 {
                            debug e => _41;
                            let mut _312: &[&str; 2];
                        }
                    }
                    scope 29 {
                        debug con => _166;
                        scope 35 {
                            debug runner => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#7).2: runner::Runner<skytable::AsyncConnection>);
                            let mut _310: &[&str; 3];
                            let mut _311: &[&str; 3];
                            scope 36 {
                                debug eval_expr => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#7).3: &str);
                                scope 37 {
                                    debug __awaitee => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#7).4: {async fn body@cli/src/runner.rs:154:62: 175:6});
                                    let _202: ();
                                    scope 38 {
                                    }
                                    scope 39 {
                                        debug result => _202;
                                    }
                                }
                            }
                            scope 40 {
                                debug editor => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#8).5: rustyline::Editor<()>);
                                scope 41 {
                                    let _280: rustyline::error::ReadlineError;
                                    scope 42 {
                                        debug line => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#8).7: std::string::String);
                                        let mut _240: std::io::Stdout;
                                        scope 43 {
                                            debug stdout => _240;
                                        }
                                        scope 44 {
                                            debug __awaitee => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#8).9: {async fn body@cli/src/runner.rs:154:62: 175:6});
                                            let _279: ();
                                            scope 45 {
                                            }
                                            scope 46 {
                                                debug result => _279;
                                            }
                                        }
                                    }
                                    scope 47 {
                                        debug err => _280;
                                        let mut _307: &[&str; 2];
                                    }
                                    scope 48 {
                                        debug e => _294;
                                        let _294: rustyline::error::ReadlineError;
                                        let mut _309: &[&str; 2];
                                    }
                                }
                            }
                        }
                    }
                    scope 30 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2})) as variant#6).4: {async fn body@skytable::AsyncConnection::new::{closure#0}});
                        let _175: std::result::Result<skytable::AsyncConnection, std::io::Error>;
                        scope 31 {
                        }
                        scope 32 {
                            debug result => _175;
                        }
                    }
                    scope 33 {
                        debug c => _177;
                    }
                    scope 34 {
                        debug e => _178;
                        let mut _306: &[&str; 2];
                    }
                }
                scope 6 {
                    debug p => _17;
                    let _20: u16;
                    let mut _317: &[&str; 1];
                    scope 7 {
                        debug p => _20;
                    }
                }
            }
            scope 4 {
                debug t => _12;
            }
        }
    }

    bb0: {
        _331 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _330 = discriminant((*_331));
        switchInt(move _330) -> [0: bb1, 1: bb275, 2: bb274, 3: bb268, 4: bb269, 5: bb270, 6: bb271, 7: bb272, 8: bb273, otherwise: bb9];
    }

    bb1: {
        _329 = move _2;
        _332 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_332) as variant#4).5: bool) = const false;
        _333 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_333) as variant#7).5: bool) = const false;
        _320 = const false;
        _321 = const false;
        _322 = const false;
        _323 = const false;
        _6 = const "#\n# Created on Tue Nov 03 2020\n#\n# This file is a part of Skytable\n# Copyright (c) 2020, Sayan Nandan <ohsayan@outlook.com>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <https://www.gnu.org/licenses/>.\n#\n#\n\nname: Skytable Shell\nversion: 0.6.0\nauthor: Sayan N. <ohsayan@outlook.com>\nabout: The Skytable Shell (skysh)\nargs:\n  - host:\n      short: h\n      required: false\n      long: host\n      value_name: host\n      help: Sets the remote host to connect to\n      takes_value: true\n  - port:\n      short: p\n      required: false\n      long: port\n      value_name: port\n      help: Sets the remote port to connect to\n      takes_value: true\n  - eval:\n      short: e\n      required: false\n      long: eval\n      value_name: expression\n      help: Run an expression without REPL\n      takes_value: true\n  - cert:\n      short: C\n      required: false\n      long: sslcert\n      value_name: cert\n      help: Sets the PEM certificate to use for SSL connections\n      takes_value: true\n";
        _5 = YamlLoader::load_from_str(_6) -> [return: bb2, unwind: bb243];
    }

    bb2: {
        _7 = const "failed to load YAML file";
        _334 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_334) as variant#3).0: std::vec::Vec<yaml_rust::yaml::Yaml>) = Result::<Vec<yaml_rust::yaml::Yaml>, yaml_rust::scanner::ScanError>::expect(move _5, _7) -> [return: bb3, unwind: bb243];
    }

    bb3: {
        _335 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _4 = &(((*_335) as variant#3).0: std::vec::Vec<yaml_rust::yaml::Yaml>);
        _3 = <Vec<yaml_rust::yaml::Yaml> as Index<usize>>::index(move _4, const 0_usize) -> [return: bb4, unwind: bb242];
    }

    bb4: {
        _8 = App::<'_, '_>::from_yaml(_3) -> [return: bb5, unwind: bb242];
    }

    bb5: {
        _336 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_336) as variant#3).1: clap::ArgMatches<'_>) = App::<'_, '_>::get_matches(move _8) -> [return: bb6, unwind: bb242];
    }

    bb6: {
        _337 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _10 = &(((*_337) as variant#3).1: clap::ArgMatches<'_>);
        _9 = ArgMatches::<'_>::value_of::<&str>(move _10, const "host") -> [return: bb7, unwind: bb241];
    }

    bb7: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _13 = const _;
        _338 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_338) as variant#3).2: &str) = _13;
        goto -> bb11;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _12 = ((_9 as Some).0: &str);
        _339 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_339) as variant#3).2: &str) = _12;
        goto -> bb11;
    }

    bb11: {
        _340 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _15 = &(((*_340) as variant#3).1: clap::ArgMatches<'_>);
        _14 = ArgMatches::<'_>::value_of::<&str>(move _15, const "port") -> [return: bb12, unwind: bb241];
    }

    bb12: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _341 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_341) as variant#3).3: u16) = const 2003_u16;
        goto -> bb20;
    }

    bb14: {
        _17 = ((_14 as Some).0: &str);
        _18 = core::str::<impl str>::parse::<u16>(_17) -> [return: bb15, unwind: bb241];
    }

    bb15: {
        _19 = discriminant(_18);
        switchInt(move _19) -> [0: bb17, 1: bb16, otherwise: bb9];
    }

    bb16: {
        _317 = const _;
        _23 = _317 as &[&str] (PointerCoercion(Unsize));
        _22 = Arguments::<'_>::new_const(move _23) -> [return: bb18, unwind: bb241];
    }

    bb17: {
        _20 = ((_18 as Ok).0: u16);
        _342 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_342) as variant#3).3: u16) = _20;
        goto -> bb20;
    }

    bb18: {
        _21 = _eprint(move _22) -> [return: bb19, unwind: bb241];
    }

    bb19: {
        _24 = exit(const 1_i32) -> bb241;
    }

    bb20: {
        _343 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _26 = &(((*_343) as variant#3).1: clap::ArgMatches<'_>);
        _25 = ArgMatches::<'_>::value_of::<&str>(move _26, const "cert") -> [return: bb21, unwind: bb241];
    }

    bb21: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [1: bb22, otherwise: bb113];
    }

    bb22: {
        _28 = ((_25 as Some).0: &str);
        _344 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _345 = deref_copy (((*_344) as variant#3).2: &str);
        _346 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _32 = (((*_346) as variant#3).3: u16);
        _31 = TlsConnection::new(_345, move _32, _28) -> [return: bb23, unwind: bb240];
    }

    bb23: {
        _30 = <{async fn body@TlsConnection::new::{closure#0}} as IntoFuture>::into_future(move _31) -> [return: bb24, unwind: bb240];
    }

    bb24: {
        _347 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_347) as variant#3).4: {async fn body@skytable::aio::TlsConnection::new::{closure#0}}) = move _30;
        goto -> bb25;
    }

    bb25: {
        _348 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _35 = &mut (((*_348) as variant#3).4: {async fn body@skytable::aio::TlsConnection::new::{closure#0}});
        _34 = Pin::<&mut {async fn body@TlsConnection::new::{closure#0}}>::new_unchecked(_35) -> [return: bb26, unwind: bb239];
    }

    bb26: {
        _36 = _329;
        _33 = <{async fn body@TlsConnection::new::{closure#0}} as Future>::poll(move _34, _36) -> [return: bb27, unwind: bb239];
    }

    bb27: {
        _37 = discriminant(_33);
        switchInt(move _37) -> [0: bb29, 1: bb28, otherwise: bb9];
    }

    bb28: {
        _0 = Poll::<()>::Pending;
        _349 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        discriminant((*_349)) = 3;
        return;
    }

    bb29: {
        _38 = move ((_33 as Ready).0: std::result::Result<skytable::aio::TlsConnection, skytable::error::Error>);
        _350 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_350) as variant#3).4: {async fn body@skytable::aio::TlsConnection::new::{closure#0}})) -> [return: bb30, unwind: bb240];
    }

    bb30: {
        _39 = discriminant(_38);
        switchInt(move _39) -> [0: bb32, 1: bb31, otherwise: bb9];
    }

    bb31: {
        _41 = move ((_38 as Err).0: skytable::error::Error);
        _312 = const _;
        _44 = _312 as &[&str] (PointerCoercion(Unsize));
        _49 = &_41;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<skytable::error::Error>(_49) -> [return: bb33, unwind: bb238];
    }

    bb32: {
        _40 = move ((_38 as Ok).0: skytable::aio::TlsConnection);
        _351 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_351) as variant#4).5: bool) = const true;
        _29 = move _40;
        _352 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_352) as variant#4).5: bool) = const false;
        _51 = move _29;
        _353 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_353) as variant#4).2: runner::Runner<skytable::aio::TlsConnection>) = Runner::<TlsConnection>::new(move _51) -> [return: bb36, unwind: bb267];
    }

    bb33: {
        _47 = [move _48];
        _46 = &_47;
        _45 = _46 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> [return: bb34, unwind: bb238];
    }

    bb34: {
        _42 = _eprint(move _43) -> [return: bb35, unwind: bb238];
    }

    bb35: {
        _50 = exit(const 1_i32) -> bb238;
    }

    bb36: {
        _354 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _53 = &(((*_354) as variant#3).1: clap::ArgMatches<'_>);
        _52 = ArgMatches::<'_>::value_of::<&str>(move _53, const "eval") -> [return: bb37, unwind: bb237];
    }

    bb37: {
        _54 = discriminant(_52);
        switchInt(move _54) -> [1: bb38, otherwise: bb50];
    }

    bb38: {
        _355 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_355) as variant#4).3: &str) = ((_52 as Some).0: &str);
        _356 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _357 = deref_copy (((*_356) as variant#4).3: &str);
        _55 = core::str::<impl str>::is_empty(_357) -> [return: bb39, unwind: bb237];
    }

    bb39: {
        switchInt(move _55) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _328 = const ();
        goto -> bb210;
    }

    bb41: {
        _358 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _58 = &mut (((*_358) as variant#4).2: runner::Runner<skytable::aio::TlsConnection>);
        _359 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _59 = &(((*_359) as variant#4).3: &str);
        _318 = deref_copy (*_59);
        _57 = Runner::<TlsConnection>::run_query(move _58, _318) -> [return: bb42, unwind: bb237];
    }

    bb42: {
        _56 = <{async fn body@cli/src/runner.rs:154:62: 175:6} as IntoFuture>::into_future(move _57) -> [return: bb43, unwind: bb237];
    }

    bb43: {
        _360 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_360) as variant#4).4: {async fn body@cli/src/runner.rs:154:62: 175:6}) = move _56;
        goto -> bb44;
    }

    bb44: {
        _361 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _62 = &mut (((*_361) as variant#4).4: {async fn body@cli/src/runner.rs:154:62: 175:6});
        _61 = Pin::<&mut {async fn body@cli/src/runner.rs:154:62: 175:6}>::new_unchecked(_62) -> [return: bb45, unwind: bb236];
    }

    bb45: {
        _63 = _329;
        _60 = <{async fn body@cli/src/runner.rs:154:62: 175:6} as Future>::poll(move _61, _63) -> [return: bb46, unwind: bb236];
    }

    bb46: {
        _64 = discriminant(_60);
        switchInt(move _64) -> [0: bb48, 1: bb47, otherwise: bb9];
    }

    bb47: {
        _0 = Poll::<()>::Pending;
        _362 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        discriminant((*_362)) = 4;
        return;
    }

    bb48: {
        _65 = ((_60 as Ready).0: ());
        _363 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_363) as variant#4).4: {async fn body@cli/src/runner.rs:154:62: 175:6})) -> [return: bb49, unwind: bb237];
    }

    bb49: {
        _328 = const ();
        goto -> bb210;
    }

    bb50: {
        _316 = const _;
        _68 = _316 as &[&str] (PointerCoercion(Unsize));
        _364 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _73 = &(((*_364) as variant#3).2: &str);
        _72 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_73) -> [return: bb51, unwind: bb237];
    }

    bb51: {
        _365 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _75 = &(((*_365) as variant#3).3: u16);
        _74 = core::fmt::rt::Argument::<'_>::new_display::<u16>(_75) -> [return: bb52, unwind: bb237];
    }

    bb52: {
        _71 = [move _72, move _74];
        _70 = &_71;
        _69 = _70 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _67 = Arguments::<'_>::new_v1(move _68, move _69) -> [return: bb53, unwind: bb237];
    }

    bb53: {
        _66 = _print(move _67) -> [return: bb54, unwind: bb237];
    }

    bb54: {
        _315 = const _;
        _78 = _315 as &[&str] (PointerCoercion(Unsize));
        _83 = const {alloc1: &&str};
        _82 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_83) -> [return: bb55, unwind: bb237];
    }

    bb55: {
        _85 = const {alloc2: &&str};
        _84 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_85) -> [return: bb56, unwind: bb237];
    }

    bb56: {
        _81 = [move _82, move _84];
        _80 = &_81;
        _79 = _80 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _77 = Arguments::<'_>::new_v1(move _78, move _79) -> [return: bb57, unwind: bb237];
    }

    bb57: {
        _76 = _print(move _77) -> [return: bb58, unwind: bb237];
    }

    bb58: {
        _366 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_366) as variant#5).5: rustyline::Editor<()>) = Editor::<()>::new() -> [return: bb59, unwind: bb237];
    }

    bb59: {
        _367 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _87 = &mut (((*_367) as variant#5).5: rustyline::Editor<()>);
        _86 = <Editor<()> as Configurer>::set_auto_add_history(move _87, const true) -> [return: bb60, unwind: bb235];
    }

    bb60: {
        _368 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _89 = &mut (((*_368) as variant#5).5: rustyline::Editor<()>);
        _88 = <Editor<()> as Configurer>::set_history_ignore_dups(move _89, const true) -> [return: bb61, unwind: bb235];
    }

    bb61: {
        _369 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _91 = &mut (((*_369) as variant#5).5: rustyline::Editor<()>);
        _92 = const ".sky_history";
        _90 = Editor::<()>::load_history::<str>(move _91, _92) -> [return: bb62, unwind: bb235];
    }

    bb62: {
        drop(_90) -> [return: bb63, unwind: bb235];
    }

    bb63: {
        _370 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _93 = &mut (((*_370) as variant#5).5: rustyline::Editor<()>);
        _94 = const "skysh> ";
        _371 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_371) as variant#5).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>) = Editor::<()>::readline(move _93, _94) -> [return: bb64, unwind: bb234];
    }

    bb64: {
        _320 = const true;
        _372 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _96 = discriminant((((*_372) as variant#5).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>));
        switchInt(move _96) -> [0: bb67, 1: bb65, otherwise: bb9];
    }

    bb65: {
        _373 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _95 = discriminant((((((*_373) as variant#5).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>) as Err).0: rustyline::error::ReadlineError));
        switchInt(move _95) -> [2: bb248, otherwise: bb66];
    }

    bb66: {
        _320 = const false;
        _374 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _143 = move (((((*_374) as variant#5).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>) as Err).0: rustyline::error::ReadlineError);
        _313 = const _;
        _146 = _313 as &[&str] (PointerCoercion(Unsize));
        _151 = &_143;
        _150 = core::fmt::rt::Argument::<'_>::new_display::<ReadlineError>(_151) -> [return: bb101, unwind: bb230];
    }

    bb67: {
        _375 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _376 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_375) as variant#5).7: std::string::String) = move (((((*_376) as variant#5).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>) as Ok).0: std::string::String);
        _377 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _100 = &(((*_377) as variant#5).7: std::string::String);
        _99 = <std::string::String as Deref>::deref(move _100) -> [return: bb68, unwind: bb233];
    }

    bb68: {
        _378 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_378) as variant#5).8: std::string::String) = std::str::<impl str>::to_lowercase(_99) -> [return: bb69, unwind: bb233];
    }

    bb69: {
        _379 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _98 = &(((*_379) as variant#5).8: std::string::String);
        _97 = std::string::String::as_str(move _98) -> [return: bb70, unwind: bb232];
    }

    bb70: {
        _102 = <str as PartialEq>::eq(_97, const "exit") -> [return: bb76, unwind: bb232];
    }

    bb71: {
        _380 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_380) as variant#5).8: std::string::String)) -> [return: bb104, unwind: bb233];
    }

    bb72: {
        _101 = <str as PartialEq>::eq(_97, const "clear") -> [return: bb75, unwind: bb232];
    }

    bb73: {
        _103 = std::io::stdout() -> [return: bb77, unwind: bb232];
    }

    bb74: {
        _381 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _131 = &(((*_381) as variant#5).7: std::string::String);
        _130 = std::string::String::is_empty(move _131) -> [return: bb89, unwind: bb232];
    }

    bb75: {
        switchInt(move _101) -> [0: bb74, otherwise: bb73];
    }

    bb76: {
        switchInt(move _102) -> [0: bb72, otherwise: bb71];
    }

    bb77: {
        _110 = &mut _103;
        _109 = <std::io::Stdout as std::io::Write>::by_ref(move _110) -> [return: bb78, unwind: bb232];
    }

    bb78: {
        _108 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _109);
        _111 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
        _107 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _108, move _111) -> [return: bb79, unwind: bb232];
    }

    bb79: {
        _112 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21};
        _106 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _107, move _112) -> [return: bb80, unwind: bb232];
    }

    bb80: {
        _114 = &mut _103;
        _113 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27} { stdout: move _114 };
        _105 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _106, move _113) -> [return: bb81, unwind: bb232];
    }

    bb81: {
        _115 = const "Failed to clear screen";
        _104 = Result::<(), std::io::Error>::expect(move _105, _115) -> [return: bb82, unwind: bb232];
    }

    bb82: {
        _122 = &mut _103;
        _121 = <std::io::Stdout as std::io::Write>::by_ref(move _122) -> [return: bb83, unwind: bb232];
    }

    bb83: {
        _120 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _121);
        _123 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
        _119 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _120, move _123) -> [return: bb84, unwind: bb232];
    }

    bb84: {
        _124 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21};
        _118 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _119, move _124) -> [return: bb85, unwind: bb232];
    }

    bb85: {
        _126 = &mut _103;
        _125 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27} { stdout: move _126 };
        _117 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _118, move _125) -> [return: bb86, unwind: bb232];
    }

    bb86: {
        _127 = const "Failed to move cursor to origin";
        _116 = Result::<(), std::io::Error>::expect(move _117, _127) -> [return: bb87, unwind: bb232];
    }

    bb87: {
        _129 = move _103;
        _128 = std::mem::drop::<std::io::Stdout>(move _129) -> [return: bb88, unwind: bb232];
    }

    bb88: {
        _382 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_382) as variant#5).8: std::string::String)) -> [return: bb105, unwind: bb233];
    }

    bb89: {
        switchInt(move _130) -> [0: bb90, otherwise: bb99];
    }

    bb90: {
        _383 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _134 = &mut (((*_383) as variant#4).2: runner::Runner<skytable::aio::TlsConnection>);
        _384 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _136 = &(((*_384) as variant#5).7: std::string::String);
        _135 = <std::string::String as Deref>::deref(_136) -> [return: bb91, unwind: bb232];
    }

    bb91: {
        _133 = Runner::<TlsConnection>::run_query(move _134, _135) -> [return: bb92, unwind: bb232];
    }

    bb92: {
        _132 = <{async fn body@cli/src/runner.rs:154:62: 175:6} as IntoFuture>::into_future(move _133) -> [return: bb93, unwind: bb232];
    }

    bb93: {
        _385 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_385) as variant#5).9: {async fn body@cli/src/runner.rs:154:62: 175:6}) = move _132;
        goto -> bb94;
    }

    bb94: {
        _386 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _139 = &mut (((*_386) as variant#5).9: {async fn body@cli/src/runner.rs:154:62: 175:6});
        _138 = Pin::<&mut {async fn body@cli/src/runner.rs:154:62: 175:6}>::new_unchecked(_139) -> [return: bb95, unwind: bb231];
    }

    bb95: {
        _140 = _329;
        _137 = <{async fn body@cli/src/runner.rs:154:62: 175:6} as Future>::poll(move _138, _140) -> [return: bb96, unwind: bb231];
    }

    bb96: {
        _141 = discriminant(_137);
        switchInt(move _141) -> [0: bb98, 1: bb97, otherwise: bb9];
    }

    bb97: {
        _0 = Poll::<()>::Pending;
        _387 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        discriminant((*_387)) = 5;
        return;
    }

    bb98: {
        _142 = ((_137 as Ready).0: ());
        _388 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_388) as variant#5).9: {async fn body@cli/src/runner.rs:154:62: 175:6})) -> [return: bb99, unwind: bb232];
    }

    bb99: {
        _389 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_389) as variant#5).8: std::string::String)) -> [return: bb100, unwind: bb233];
    }

    bb100: {
        _390 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_390) as variant#5).7: std::string::String)) -> [return: bb244, unwind: bb234];
    }

    bb101: {
        _149 = [move _150];
        _148 = &_149;
        _147 = _148 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _145 = Arguments::<'_>::new_v1(move _146, move _147) -> [return: bb102, unwind: bb230];
    }

    bb102: {
        _144 = _eprint(move _145) -> [return: bb103, unwind: bb230];
    }

    bb103: {
        _152 = exit(const 1_i32) -> bb230;
    }

    bb104: {
        _391 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_391) as variant#5).7: std::string::String)) -> [return: bb248, unwind: bb234];
    }

    bb105: {
        _393 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_393) as variant#5).7: std::string::String)) -> [return: bb249, unwind: bb234];
    }

    bb106: {
        _321 = const true;
        _156 = discriminant(_153);
        switchInt(move _156) -> [1: bb107, otherwise: bb253];
    }

    bb107: {
        _321 = const false;
        _157 = move ((_153 as Err).0: rustyline::error::ReadlineError);
        _314 = const _;
        _160 = _314 as &[&str] (PointerCoercion(Unsize));
        _165 = &_157;
        _164 = core::fmt::rt::Argument::<'_>::new_display::<ReadlineError>(_165) -> [return: bb108, unwind: bb228];
    }

    bb108: {
        _163 = [move _164];
        _162 = &_163;
        _161 = _162 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _159 = Arguments::<'_>::new_v1(move _160, move _161) -> [return: bb109, unwind: bb228];
    }

    bb109: {
        _158 = _eprint(move _159) -> [return: bb110, unwind: bb228];
    }

    bb110: {
        drop(_157) -> [return: bb253, unwind: bb229];
    }

    bb111: {
        _395 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_395) as variant#4).2: runner::Runner<skytable::aio::TlsConnection>)) -> [return: bb112, unwind: bb267];
    }

    bb112: {
        _396 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_396) as variant#4).5: bool) = const false;
        goto -> bb204;
    }

    bb113: {
        _397 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _398 = deref_copy (((*_397) as variant#3).2: &str);
        _399 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _169 = (((*_399) as variant#3).3: u16);
        _168 = AsyncConnection::new(_398, move _169) -> [return: bb114, unwind: bb227];
    }

    bb114: {
        _167 = <{async fn body@AsyncConnection::new::{closure#0}} as IntoFuture>::into_future(move _168) -> [return: bb115, unwind: bb227];
    }

    bb115: {
        _400 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_400) as variant#6).4: {async fn body@skytable::AsyncConnection::new::{closure#0}}) = move _167;
        goto -> bb116;
    }

    bb116: {
        _401 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _172 = &mut (((*_401) as variant#6).4: {async fn body@skytable::AsyncConnection::new::{closure#0}});
        _171 = Pin::<&mut {async fn body@AsyncConnection::new::{closure#0}}>::new_unchecked(_172) -> [return: bb117, unwind: bb226];
    }

    bb117: {
        _173 = _329;
        _170 = <{async fn body@AsyncConnection::new::{closure#0}} as Future>::poll(move _171, _173) -> [return: bb118, unwind: bb226];
    }

    bb118: {
        _174 = discriminant(_170);
        switchInt(move _174) -> [0: bb120, 1: bb119, otherwise: bb9];
    }

    bb119: {
        _0 = Poll::<()>::Pending;
        _402 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        discriminant((*_402)) = 6;
        return;
    }

    bb120: {
        _175 = move ((_170 as Ready).0: std::result::Result<skytable::AsyncConnection, std::io::Error>);
        _403 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_403) as variant#6).4: {async fn body@skytable::AsyncConnection::new::{closure#0}})) -> [return: bb121, unwind: bb227];
    }

    bb121: {
        _176 = discriminant(_175);
        switchInt(move _176) -> [0: bb123, 1: bb122, otherwise: bb9];
    }

    bb122: {
        _178 = move ((_175 as Err).0: std::io::Error);
        _306 = const _;
        _181 = _306 as &[&str] (PointerCoercion(Unsize));
        _186 = &_178;
        _185 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_186) -> [return: bb124, unwind: bb225];
    }

    bb123: {
        _177 = move ((_175 as Ok).0: skytable::AsyncConnection);
        _404 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_404) as variant#7).5: bool) = const true;
        _166 = move _177;
        _405 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_405) as variant#7).5: bool) = const false;
        _188 = move _166;
        _406 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_406) as variant#7).2: runner::Runner<skytable::AsyncConnection>) = Runner::<AsyncConnection>::new(move _188) -> [return: bb127, unwind: bb265];
    }

    bb124: {
        _184 = [move _185];
        _183 = &_184;
        _182 = _183 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _180 = Arguments::<'_>::new_v1(move _181, move _182) -> [return: bb125, unwind: bb225];
    }

    bb125: {
        _179 = _eprint(move _180) -> [return: bb126, unwind: bb225];
    }

    bb126: {
        _187 = exit(const 1_i32) -> bb225;
    }

    bb127: {
        _407 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _190 = &(((*_407) as variant#3).1: clap::ArgMatches<'_>);
        _189 = ArgMatches::<'_>::value_of::<&str>(move _190, const "eval") -> [return: bb128, unwind: bb224];
    }

    bb128: {
        _191 = discriminant(_189);
        switchInt(move _191) -> [1: bb129, otherwise: bb141];
    }

    bb129: {
        _408 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_408) as variant#7).3: &str) = ((_189 as Some).0: &str);
        _409 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _410 = deref_copy (((*_409) as variant#7).3: &str);
        _192 = core::str::<impl str>::is_empty(_410) -> [return: bb130, unwind: bb224];
    }

    bb130: {
        switchInt(move _192) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        _328 = const ();
        goto -> bb208;
    }

    bb132: {
        _411 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _195 = &mut (((*_411) as variant#7).2: runner::Runner<skytable::AsyncConnection>);
        _412 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _196 = &(((*_412) as variant#7).3: &str);
        _319 = deref_copy (*_196);
        _194 = Runner::<AsyncConnection>::run_query(move _195, _319) -> [return: bb133, unwind: bb224];
    }

    bb133: {
        _193 = <{async fn body@cli/src/runner.rs:154:62: 175:6} as IntoFuture>::into_future(move _194) -> [return: bb134, unwind: bb224];
    }

    bb134: {
        _413 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_413) as variant#7).4: {async fn body@cli/src/runner.rs:154:62: 175:6}) = move _193;
        goto -> bb135;
    }

    bb135: {
        _414 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _199 = &mut (((*_414) as variant#7).4: {async fn body@cli/src/runner.rs:154:62: 175:6});
        _198 = Pin::<&mut {async fn body@cli/src/runner.rs:154:62: 175:6}>::new_unchecked(_199) -> [return: bb136, unwind: bb223];
    }

    bb136: {
        _200 = _329;
        _197 = <{async fn body@cli/src/runner.rs:154:62: 175:6} as Future>::poll(move _198, _200) -> [return: bb137, unwind: bb223];
    }

    bb137: {
        _201 = discriminant(_197);
        switchInt(move _201) -> [0: bb139, 1: bb138, otherwise: bb9];
    }

    bb138: {
        _0 = Poll::<()>::Pending;
        _415 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        discriminant((*_415)) = 7;
        return;
    }

    bb139: {
        _202 = ((_197 as Ready).0: ());
        _416 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_416) as variant#7).4: {async fn body@cli/src/runner.rs:154:62: 175:6})) -> [return: bb140, unwind: bb224];
    }

    bb140: {
        _328 = const ();
        goto -> bb208;
    }

    bb141: {
        _311 = const _;
        _205 = _311 as &[&str] (PointerCoercion(Unsize));
        _417 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _210 = &(((*_417) as variant#3).2: &str);
        _209 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_210) -> [return: bb142, unwind: bb224];
    }

    bb142: {
        _418 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _212 = &(((*_418) as variant#3).3: u16);
        _211 = core::fmt::rt::Argument::<'_>::new_display::<u16>(_212) -> [return: bb143, unwind: bb224];
    }

    bb143: {
        _208 = [move _209, move _211];
        _207 = &_208;
        _206 = _207 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _204 = Arguments::<'_>::new_v1(move _205, move _206) -> [return: bb144, unwind: bb224];
    }

    bb144: {
        _203 = _print(move _204) -> [return: bb145, unwind: bb224];
    }

    bb145: {
        _310 = const _;
        _215 = _310 as &[&str] (PointerCoercion(Unsize));
        _220 = const {alloc1: &&str};
        _219 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_220) -> [return: bb146, unwind: bb224];
    }

    bb146: {
        _222 = const {alloc2: &&str};
        _221 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_222) -> [return: bb147, unwind: bb224];
    }

    bb147: {
        _218 = [move _219, move _221];
        _217 = &_218;
        _216 = _217 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _214 = Arguments::<'_>::new_v1(move _215, move _216) -> [return: bb148, unwind: bb224];
    }

    bb148: {
        _213 = _print(move _214) -> [return: bb149, unwind: bb224];
    }

    bb149: {
        _419 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_419) as variant#8).5: rustyline::Editor<()>) = Editor::<()>::new() -> [return: bb150, unwind: bb224];
    }

    bb150: {
        _420 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _224 = &mut (((*_420) as variant#8).5: rustyline::Editor<()>);
        _223 = <Editor<()> as Configurer>::set_auto_add_history(move _224, const true) -> [return: bb151, unwind: bb222];
    }

    bb151: {
        _421 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _226 = &mut (((*_421) as variant#8).5: rustyline::Editor<()>);
        _225 = <Editor<()> as Configurer>::set_history_ignore_dups(move _226, const true) -> [return: bb152, unwind: bb222];
    }

    bb152: {
        _422 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _228 = &mut (((*_422) as variant#8).5: rustyline::Editor<()>);
        _229 = const ".sky_history";
        _227 = Editor::<()>::load_history::<str>(move _228, _229) -> [return: bb153, unwind: bb222];
    }

    bb153: {
        drop(_227) -> [return: bb154, unwind: bb222];
    }

    bb154: {
        _423 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _230 = &mut (((*_423) as variant#8).5: rustyline::Editor<()>);
        _231 = const "skysh> ";
        _424 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_424) as variant#8).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>) = Editor::<()>::readline(move _230, _231) -> [return: bb155, unwind: bb221];
    }

    bb155: {
        _322 = const true;
        _425 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _233 = discriminant((((*_425) as variant#8).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>));
        switchInt(move _233) -> [0: bb158, 1: bb156, otherwise: bb9];
    }

    bb156: {
        _426 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _232 = discriminant((((((*_426) as variant#8).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>) as Err).0: rustyline::error::ReadlineError));
        switchInt(move _232) -> [2: bb258, otherwise: bb157];
    }

    bb157: {
        _322 = const false;
        _427 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _280 = move (((((*_427) as variant#8).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>) as Err).0: rustyline::error::ReadlineError);
        _307 = const _;
        _283 = _307 as &[&str] (PointerCoercion(Unsize));
        _288 = &_280;
        _287 = core::fmt::rt::Argument::<'_>::new_display::<ReadlineError>(_288) -> [return: bb192, unwind: bb217];
    }

    bb158: {
        _428 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _429 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_428) as variant#8).7: std::string::String) = move (((((*_429) as variant#8).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>) as Ok).0: std::string::String);
        _430 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _237 = &(((*_430) as variant#8).7: std::string::String);
        _236 = <std::string::String as Deref>::deref(move _237) -> [return: bb159, unwind: bb220];
    }

    bb159: {
        _431 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_431) as variant#8).8: std::string::String) = std::str::<impl str>::to_lowercase(_236) -> [return: bb160, unwind: bb220];
    }

    bb160: {
        _432 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _235 = &(((*_432) as variant#8).8: std::string::String);
        _234 = std::string::String::as_str(move _235) -> [return: bb161, unwind: bb219];
    }

    bb161: {
        _239 = <str as PartialEq>::eq(_234, const "exit") -> [return: bb167, unwind: bb219];
    }

    bb162: {
        _433 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_433) as variant#8).8: std::string::String)) -> [return: bb195, unwind: bb220];
    }

    bb163: {
        _238 = <str as PartialEq>::eq(_234, const "clear") -> [return: bb166, unwind: bb219];
    }

    bb164: {
        _240 = std::io::stdout() -> [return: bb168, unwind: bb219];
    }

    bb165: {
        _434 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _268 = &(((*_434) as variant#8).7: std::string::String);
        _267 = std::string::String::is_empty(move _268) -> [return: bb180, unwind: bb219];
    }

    bb166: {
        switchInt(move _238) -> [0: bb165, otherwise: bb164];
    }

    bb167: {
        switchInt(move _239) -> [0: bb163, otherwise: bb162];
    }

    bb168: {
        _247 = &mut _240;
        _246 = <std::io::Stdout as std::io::Write>::by_ref(move _247) -> [return: bb169, unwind: bb219];
    }

    bb169: {
        _245 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _246);
        _248 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
        _244 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _245, move _248) -> [return: bb170, unwind: bb219];
    }

    bb170: {
        _249 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21};
        _243 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _244, move _249) -> [return: bb171, unwind: bb219];
    }

    bb171: {
        _251 = &mut _240;
        _250 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27} { stdout: move _251 };
        _242 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _243, move _250) -> [return: bb172, unwind: bb219];
    }

    bb172: {
        _252 = const "Failed to clear screen";
        _241 = Result::<(), std::io::Error>::expect(move _242, _252) -> [return: bb173, unwind: bb219];
    }

    bb173: {
        _259 = &mut _240;
        _258 = <std::io::Stdout as std::io::Write>::by_ref(move _259) -> [return: bb174, unwind: bb219];
    }

    bb174: {
        _257 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _258);
        _260 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
        _256 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _257, move _260) -> [return: bb175, unwind: bb219];
    }

    bb175: {
        _261 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21};
        _255 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _256, move _261) -> [return: bb176, unwind: bb219];
    }

    bb176: {
        _263 = &mut _240;
        _262 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27} { stdout: move _263 };
        _254 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _255, move _262) -> [return: bb177, unwind: bb219];
    }

    bb177: {
        _264 = const "Failed to move cursor to origin";
        _253 = Result::<(), std::io::Error>::expect(move _254, _264) -> [return: bb178, unwind: bb219];
    }

    bb178: {
        _266 = move _240;
        _265 = std::mem::drop::<std::io::Stdout>(move _266) -> [return: bb179, unwind: bb219];
    }

    bb179: {
        _435 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_435) as variant#8).8: std::string::String)) -> [return: bb196, unwind: bb220];
    }

    bb180: {
        switchInt(move _267) -> [0: bb181, otherwise: bb190];
    }

    bb181: {
        _436 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _271 = &mut (((*_436) as variant#7).2: runner::Runner<skytable::AsyncConnection>);
        _437 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _273 = &(((*_437) as variant#8).7: std::string::String);
        _272 = <std::string::String as Deref>::deref(_273) -> [return: bb182, unwind: bb219];
    }

    bb182: {
        _270 = Runner::<AsyncConnection>::run_query(move _271, _272) -> [return: bb183, unwind: bb219];
    }

    bb183: {
        _269 = <{async fn body@cli/src/runner.rs:154:62: 175:6} as IntoFuture>::into_future(move _270) -> [return: bb184, unwind: bb219];
    }

    bb184: {
        _438 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_438) as variant#8).9: {async fn body@cli/src/runner.rs:154:62: 175:6}) = move _269;
        goto -> bb185;
    }

    bb185: {
        _439 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _276 = &mut (((*_439) as variant#8).9: {async fn body@cli/src/runner.rs:154:62: 175:6});
        _275 = Pin::<&mut {async fn body@cli/src/runner.rs:154:62: 175:6}>::new_unchecked(_276) -> [return: bb186, unwind: bb218];
    }

    bb186: {
        _277 = _329;
        _274 = <{async fn body@cli/src/runner.rs:154:62: 175:6} as Future>::poll(move _275, _277) -> [return: bb187, unwind: bb218];
    }

    bb187: {
        _278 = discriminant(_274);
        switchInt(move _278) -> [0: bb189, 1: bb188, otherwise: bb9];
    }

    bb188: {
        _0 = Poll::<()>::Pending;
        _440 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        discriminant((*_440)) = 8;
        return;
    }

    bb189: {
        _279 = ((_274 as Ready).0: ());
        _441 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_441) as variant#8).9: {async fn body@cli/src/runner.rs:154:62: 175:6})) -> [return: bb190, unwind: bb219];
    }

    bb190: {
        _442 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_442) as variant#8).8: std::string::String)) -> [return: bb191, unwind: bb220];
    }

    bb191: {
        _443 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_443) as variant#8).7: std::string::String)) -> [return: bb254, unwind: bb221];
    }

    bb192: {
        _286 = [move _287];
        _285 = &_286;
        _284 = _285 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _282 = Arguments::<'_>::new_v1(move _283, move _284) -> [return: bb193, unwind: bb217];
    }

    bb193: {
        _281 = _eprint(move _282) -> [return: bb194, unwind: bb217];
    }

    bb194: {
        _289 = exit(const 1_i32) -> bb217;
    }

    bb195: {
        _444 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_444) as variant#8).7: std::string::String)) -> [return: bb258, unwind: bb221];
    }

    bb196: {
        _446 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_446) as variant#8).7: std::string::String)) -> [return: bb259, unwind: bb221];
    }

    bb197: {
        _323 = const true;
        _293 = discriminant(_290);
        switchInt(move _293) -> [1: bb198, otherwise: bb263];
    }

    bb198: {
        _323 = const false;
        _294 = move ((_290 as Err).0: rustyline::error::ReadlineError);
        _309 = const _;
        _297 = _309 as &[&str] (PointerCoercion(Unsize));
        _302 = &_294;
        _301 = core::fmt::rt::Argument::<'_>::new_display::<ReadlineError>(_302) -> [return: bb199, unwind: bb215];
    }

    bb199: {
        _300 = [move _301];
        _299 = &_300;
        _298 = _299 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _296 = Arguments::<'_>::new_v1(move _297, move _298) -> [return: bb200, unwind: bb215];
    }

    bb200: {
        _295 = _eprint(move _296) -> [return: bb201, unwind: bb215];
    }

    bb201: {
        drop(_294) -> [return: bb263, unwind: bb216];
    }

    bb202: {
        _448 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_448) as variant#7).2: runner::Runner<skytable::AsyncConnection>)) -> [return: bb203, unwind: bb265];
    }

    bb203: {
        _449 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_449) as variant#7).5: bool) = const false;
        goto -> bb204;
    }

    bb204: {
        _308 = const _;
        _305 = _308 as &[&str] (PointerCoercion(Unsize));
        _304 = Arguments::<'_>::new_const(move _305) -> [return: bb205, unwind: bb241];
    }

    bb205: {
        _303 = _print(move _304) -> [return: bb206, unwind: bb241];
    }

    bb206: {
        _328 = const ();
        _450 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_450) as variant#3).1: clap::ArgMatches<'_>)) -> [return: bb207, unwind: bb242];
    }

    bb207: {
        _451 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_451) as variant#3).0: std::vec::Vec<yaml_rust::yaml::Yaml>)) -> [return: bb214, unwind: bb243];
    }

    bb208: {
        _452 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_452) as variant#7).2: runner::Runner<skytable::AsyncConnection>)) -> [return: bb209, unwind: bb265];
    }

    bb209: {
        _453 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_453) as variant#7).5: bool) = const false;
        goto -> bb212;
    }

    bb210: {
        _454 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_454) as variant#4).2: runner::Runner<skytable::aio::TlsConnection>)) -> [return: bb211, unwind: bb267];
    }

    bb211: {
        _455 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_455) as variant#4).5: bool) = const false;
        goto -> bb212;
    }

    bb212: {
        _456 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_456) as variant#3).1: clap::ArgMatches<'_>)) -> [return: bb213, unwind: bb242];
    }

    bb213: {
        _457 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_457) as variant#3).0: std::vec::Vec<yaml_rust::yaml::Yaml>)) -> [return: bb214, unwind: bb243];
    }

    bb214: {
        _0 = Poll::<()>::Ready(move _328);
        _458 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        discriminant((*_458)) = 1;
        return;
    }

    bb215 (cleanup): {
        drop(_294) -> [return: bb216, unwind terminate(cleanup)];
    }

    bb216 (cleanup): {
        _323 = const false;
        goto -> bb222;
    }

    bb217 (cleanup): {
        drop(_280) -> [return: bb221, unwind terminate(cleanup)];
    }

    bb218 (cleanup): {
        _459 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_459) as variant#8).9: {async fn body@cli/src/runner.rs:154:62: 175:6})) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        _460 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_460) as variant#8).8: std::string::String)) -> [return: bb220, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        _461 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_461) as variant#8).7: std::string::String)) -> [return: bb221, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        _322 = const false;
        goto -> bb222;
    }

    bb222 (cleanup): {
        _462 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_462) as variant#8).5: rustyline::Editor<()>)) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        _463 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_463) as variant#7).4: {async fn body@cli/src/runner.rs:154:62: 175:6})) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        _464 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_464) as variant#7).2: runner::Runner<skytable::AsyncConnection>)) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        drop(_178) -> [return: bb227, unwind terminate(cleanup)];
    }

    bb226 (cleanup): {
        _465 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_465) as variant#6).4: {async fn body@skytable::AsyncConnection::new::{closure#0}})) -> [return: bb227, unwind terminate(cleanup)];
    }

    bb227 (cleanup): {
        _466 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_466) as variant#7).5: bool) = const false;
        goto -> bb241;
    }

    bb228 (cleanup): {
        drop(_157) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb229 (cleanup): {
        _321 = const false;
        goto -> bb235;
    }

    bb230 (cleanup): {
        drop(_143) -> [return: bb234, unwind terminate(cleanup)];
    }

    bb231 (cleanup): {
        _467 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_467) as variant#5).9: {async fn body@cli/src/runner.rs:154:62: 175:6})) -> [return: bb232, unwind terminate(cleanup)];
    }

    bb232 (cleanup): {
        _468 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_468) as variant#5).8: std::string::String)) -> [return: bb233, unwind terminate(cleanup)];
    }

    bb233 (cleanup): {
        _469 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_469) as variant#5).7: std::string::String)) -> [return: bb234, unwind terminate(cleanup)];
    }

    bb234 (cleanup): {
        _320 = const false;
        goto -> bb235;
    }

    bb235 (cleanup): {
        _470 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_470) as variant#5).5: rustyline::Editor<()>)) -> [return: bb237, unwind terminate(cleanup)];
    }

    bb236 (cleanup): {
        _471 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_471) as variant#4).4: {async fn body@cli/src/runner.rs:154:62: 175:6})) -> [return: bb237, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        _472 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_472) as variant#4).2: runner::Runner<skytable::aio::TlsConnection>)) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        drop(_41) -> [return: bb240, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        _473 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_473) as variant#3).4: {async fn body@skytable::aio::TlsConnection::new::{closure#0}})) -> [return: bb240, unwind terminate(cleanup)];
    }

    bb240 (cleanup): {
        _474 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        (((*_474) as variant#4).5: bool) = const false;
        goto -> bb241;
    }

    bb241 (cleanup): {
        _475 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_475) as variant#3).1: clap::ArgMatches<'_>)) -> [return: bb242, unwind terminate(cleanup)];
    }

    bb242 (cleanup): {
        _476 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_476) as variant#3).0: std::vec::Vec<yaml_rust::yaml::Yaml>)) -> [return: bb243, unwind terminate(cleanup)];
    }

    bb243 (cleanup): {
        _483 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        discriminant((*_483)) = 2;
        resume;
    }

    bb244: {
        _320 = const false;
        goto -> bb63;
    }

    bb245: {
        _320 = const false;
        _392 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _154 = &mut (((*_392) as variant#5).5: rustyline::Editor<()>);
        _155 = const ".sky_history";
        _153 = Editor::<()>::save_history::<str>(move _154, _155) -> [return: bb106, unwind: bb229];
    }

    bb246: {
        switchInt(_320) -> [0: bb245, otherwise: bb247];
    }

    bb247: {
        _477 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((((*_477) as variant#5).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>) as Err).0: rustyline::error::ReadlineError)) -> [return: bb245, unwind: bb234];
    }

    bb248: {
        _478 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _324 = discriminant((((*_478) as variant#5).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>));
        switchInt(move _324) -> [0: bb245, otherwise: bb246];
    }

    bb249: {
        _320 = const false;
        goto -> bb63;
    }

    bb250: {
        _321 = const false;
        _394 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_394) as variant#5).5: rustyline::Editor<()>)) -> [return: bb111, unwind: bb237];
    }

    bb251: {
        switchInt(_321) -> [0: bb250, otherwise: bb252];
    }

    bb252: {
        drop(((_153 as Err).0: rustyline::error::ReadlineError)) -> [return: bb250, unwind: bb229];
    }

    bb253: {
        _325 = discriminant(_153);
        switchInt(move _325) -> [1: bb251, otherwise: bb250];
    }

    bb254: {
        _322 = const false;
        goto -> bb154;
    }

    bb255: {
        _322 = const false;
        _445 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _291 = &mut (((*_445) as variant#8).5: rustyline::Editor<()>);
        _292 = const ".sky_history";
        _290 = Editor::<()>::save_history::<str>(move _291, _292) -> [return: bb197, unwind: bb216];
    }

    bb256: {
        switchInt(_322) -> [0: bb255, otherwise: bb257];
    }

    bb257: {
        _479 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((((*_479) as variant#8).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>) as Err).0: rustyline::error::ReadlineError)) -> [return: bb255, unwind: bb221];
    }

    bb258: {
        _480 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _326 = discriminant((((*_480) as variant#8).6: std::result::Result<std::string::String, rustyline::error::ReadlineError>));
        switchInt(move _326) -> [0: bb255, otherwise: bb256];
    }

    bb259: {
        _322 = const false;
        goto -> bb154;
    }

    bb260: {
        _323 = const false;
        _447 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        drop((((*_447) as variant#8).5: rustyline::Editor<()>)) -> [return: bb202, unwind: bb224];
    }

    bb261: {
        switchInt(_323) -> [0: bb260, otherwise: bb262];
    }

    bb262: {
        drop(((_290 as Err).0: rustyline::error::ReadlineError)) -> [return: bb260, unwind: bb216];
    }

    bb263: {
        _327 = discriminant(_290);
        switchInt(move _327) -> [1: bb261, otherwise: bb260];
    }

    bb264 (cleanup): {
        drop(_166) -> [return: bb227, unwind terminate(cleanup)];
    }

    bb265 (cleanup): {
        _481 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        switchInt((((*_481) as variant#7).5: bool)) -> [0: bb227, otherwise: bb264];
    }

    bb266 (cleanup): {
        drop(_29) -> [return: bb240, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        _482 = deref_copy (_1.0: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2});
        switchInt((((*_482) as variant#4).5: bool)) -> [0: bb240, otherwise: bb266];
    }

    bb268: {
        _329 = move _2;
        goto -> bb25;
    }

    bb269: {
        _329 = move _2;
        goto -> bb44;
    }

    bb270: {
        _329 = move _2;
        goto -> bb94;
    }

    bb271: {
        _329 = move _2;
        goto -> bb116;
    }

    bb272: {
        _329 = move _2;
        goto -> bb135;
    }

    bb273: {
        _329 = move _2;
        goto -> bb185;
    }

    bb274: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb274, unwind continue];
    }

    bb275: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb275, unwind continue];
    }
}

alloc2 (static: URL, size: 16, align: 8) {
    ╾───alloc2569<imm>────╼ 24 00 00 00 00 00 00 00 │ ╾──────╼$.......
}

alloc2569 (size: 36, align: 1) {
    0x00 │ 68 74 74 70 73 3a 2f 2f 67 69 74 68 75 62 2e 63 │ https://github.c
    0x10 │ 6f 6d 2f 73 6b 79 74 61 62 6c 65 2f 73 6b 79 74 │ om/skytable/skyt
    0x20 │ 61 62 6c 65                                     │ able
}

alloc1 (static: VERSION, size: 16, align: 8) {
    ╾───alloc2571<imm>────╼ 05 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2571 (size: 5, align: 1) {
    30 2e 37 2e 31                                  │ 0.7.1
}

promoted[0] in start_repl::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "ERROR: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in start_repl::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Failed to read line with error: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in start_repl::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Goodbye!\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in start_repl::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Failed to save history with error: '", const "'\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in start_repl::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Skytable v", const " | ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in start_repl::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Connected to skyhash://", const ":", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in start_repl::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "ERROR: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in start_repl::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Failed to read line with error: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in start_repl::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Failed to save history with error: '", const "'\n"];
        _0 = &_1;
        return;
    }
}

promoted[9] in start_repl::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Skytable v", const " | ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[10] in start_repl::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Connected to skyhash-secure://", const ":", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[11] in start_repl::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "ERROR: Invalid port\n"];
        _0 = &_1;
        return;
    }
}

fn start_repl::{closure#0}::{closure#1}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::terminal::Clear;
    let mut _4: crossterm::terminal::ClearType;

    bb0: {
        _4 = All;
        _3 = Clear(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Clear>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn start_repl::{closure#0}::{closure#2}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn start_repl::{closure#0}::{closure#0}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    debug stdout => (*(_1.0: &mut std::io::Stdout));
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;

    bb0: {
        _4 = deref_copy (_1.0: &mut std::io::Stdout);
        _3 = <std::io::Stdout as std::io::Write>::by_ref(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn start_repl::{closure#0}::{closure#4}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::cursor::MoveTo;

    bb0: {
        _3 = MoveTo(const 0_u16, const 0_u16);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<MoveTo>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn start_repl::{closure#0}::{closure#5}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn start_repl::{closure#0}::{closure#3}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    debug stdout => (*(_1.0: &mut std::io::Stdout));
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;

    bb0: {
        _4 = deref_copy (_1.0: &mut std::io::Stdout);
        _3 = <std::io::Stdout as std::io::Write>::by_ref(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn start_repl::{closure#0}::{closure#7}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::terminal::Clear;
    let mut _4: crossterm::terminal::ClearType;

    bb0: {
        _4 = All;
        _3 = Clear(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Clear>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn start_repl::{closure#0}::{closure#8}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn start_repl::{closure#0}::{closure#6}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    debug stdout => (*(_1.0: &mut std::io::Stdout));
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;

    bb0: {
        _4 = deref_copy (_1.0: &mut std::io::Stdout);
        _3 = <std::io::Stdout as std::io::Write>::by_ref(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn start_repl::{closure#0}::{closure#10}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::cursor::MoveTo;

    bb0: {
        _3 = MoveTo(const 0_u16, const 0_u16);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<MoveTo>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn start_repl::{closure#0}::{closure#11}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn start_repl::{closure#0}::{closure#9}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    debug stdout => (*(_1.0: &mut std::io::Stdout));
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;

    bb0: {
        _4 = deref_copy (_1.0: &mut std::io::Stdout);
        _3 = <std::io::Stdout as std::io::Write>::by_ref(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn runner::<impl at cli/src/runner.rs:47:1: 47:37>::run_simple_query(_1: &mut AsyncConnection, _2: Query) -> Pin<Box<dyn Future<Output = Result<Element, skytable::error::Error>> + Send + Sync>> {
    debug self => _1;
    debug query => _2;
    let mut _0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>>;
    let mut _3: std::pin::Pin<std::boxed::Box<{async block@cli/src/runner.rs:52:18: 52:68}>>;
    let mut _4: {async block@cli/src/runner.rs:52:18: 52:68};

    bb0: {
        _4 = {coroutine@cli/src/runner.rs:52:18: 52:68 (#0)} { self: move _1, query: move _2 };
        _3 = Box::<{async block@cli/src/runner.rs:52:18: 52:68}>::pin(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = move _3 as std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>> (PointerCoercion(Unsize));
        return;
    }
}

fn runner::<impl at cli/src/runner.rs:47:1: 47:37>::run_simple_query::{closure#0}(_1: Pin<&mut {async block@cli/src/runner.rs:52:18: 52:68}>, _2: &mut std::task::Context<'_>) -> Poll<Result<Element, skytable::error::Error>> {
    debug _task_context => _13;
    debug self => ((*(_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68})).0: &mut skytable::AsyncConnection);
    debug query => ((*(_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68})).1: skytable::Query);
    let mut _0: std::task::Poll<std::result::Result<skytable::Element, skytable::error::Error>>;
    let mut _3: {async fn body@skytable::AsyncConnection::run_simple_query::{closure#0}};
    let mut _4: {async fn body@skytable::AsyncConnection::run_simple_query::{closure#0}};
    let _5: &skytable::Query;
    let mut _6: std::task::Poll<std::result::Result<skytable::Element, skytable::error::Error>>;
    let mut _7: std::pin::Pin<&mut {async fn body@skytable::AsyncConnection::run_simple_query::{closure#0}}>;
    let mut _8: &mut {async fn body@skytable::AsyncConnection::run_simple_query::{closure#0}};
    let mut _9: &mut std::task::Context<'_>;
    let mut _10: isize;
    let mut _12: &mut skytable::AsyncConnection;
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: u32;
    let mut _15: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    let mut _16: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    let mut _17: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    let mut _18: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    let mut _19: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    let mut _20: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    let mut _21: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    let mut _22: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    let mut _23: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    let mut _24: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    let mut _25: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    let mut _26: &mut {async block@cli/src/runner.rs:52:18: 52:68};
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68})) as variant#3).0: {async fn body@skytable::AsyncConnection::run_simple_query::{closure#0}});
        let _11: std::result::Result<skytable::Element, skytable::error::Error>;
        scope 2 {
        }
        scope 3 {
            debug result => _11;
        }
    }

    bb0: {
        _15 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        _14 = discriminant((*_15));
        switchInt(move _14) -> [0: bb1, 1: bb17, 2: bb16, 3: bb15, otherwise: bb8];
    }

    bb1: {
        _13 = move _2;
        _16 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        _12 = deref_copy ((*_16).0: &mut skytable::AsyncConnection);
        _17 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        _5 = &((*_17).1: skytable::Query);
        _4 = AsyncConnection::run_simple_query(_12, _5) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _3 = <{async fn body@AsyncConnection::run_simple_query::{closure#0}} as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _18 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        (((*_18) as variant#3).0: {async fn body@skytable::AsyncConnection::run_simple_query::{closure#0}}) = move _3;
        goto -> bb4;
    }

    bb4: {
        _19 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        _8 = &mut (((*_19) as variant#3).0: {async fn body@skytable::AsyncConnection::run_simple_query::{closure#0}});
        _7 = Pin::<&mut {async fn body@AsyncConnection::run_simple_query::{closure#0}}>::new_unchecked(_8) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _9 = _13;
        _6 = <{async fn body@AsyncConnection::run_simple_query::{closure#0}} as Future>::poll(move _7, _9) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<Result<Element, skytable::error::Error>>::Pending;
        _20 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        discriminant((*_20)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _11 = move ((_6 as Ready).0: std::result::Result<skytable::Element, skytable::error::Error>);
        _21 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        drop((((*_21) as variant#3).0: {async fn body@skytable::AsyncConnection::run_simple_query::{closure#0}})) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        _24 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        drop(((*_24).1: skytable::Query)) -> [return: bb14, unwind: bb13];
    }

    bb11 (cleanup): {
        _23 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        drop((((*_23) as variant#3).0: {async fn body@skytable::AsyncConnection::run_simple_query::{closure#0}})) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        _25 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        drop(((*_25).1: skytable::Query)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _26 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        discriminant((*_26)) = 2;
        resume;
    }

    bb14: {
        _0 = Poll::<Result<Element, skytable::error::Error>>::Ready(move _11);
        _22 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:52:18: 52:68});
        discriminant((*_22)) = 1;
        return;
    }

    bb15: {
        _13 = move _2;
        goto -> bb4;
    }

    bb16: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb16, unwind continue];
    }

    bb17: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb17, unwind continue];
    }
}

fn runner::<impl at cli/src/runner.rs:56:1: 56:40>::run_simple_query(_1: &mut TlsConnection, _2: Query) -> Pin<Box<dyn Future<Output = Result<Element, skytable::error::Error>> + Send + Sync>> {
    debug self => _1;
    debug query => _2;
    let mut _0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>>;
    let mut _3: std::pin::Pin<std::boxed::Box<{async block@cli/src/runner.rs:61:18: 61:68}>>;
    let mut _4: {async block@cli/src/runner.rs:61:18: 61:68};

    bb0: {
        _4 = {coroutine@cli/src/runner.rs:61:18: 61:68 (#0)} { self: move _1, query: move _2 };
        _3 = Box::<{async block@cli/src/runner.rs:61:18: 61:68}>::pin(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = move _3 as std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>> (PointerCoercion(Unsize));
        return;
    }
}

fn runner::<impl at cli/src/runner.rs:56:1: 56:40>::run_simple_query::{closure#0}(_1: Pin<&mut {async block@cli/src/runner.rs:61:18: 61:68}>, _2: &mut std::task::Context<'_>) -> Poll<Result<Element, skytable::error::Error>> {
    debug _task_context => _13;
    debug self => ((*(_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68})).0: &mut skytable::aio::TlsConnection);
    debug query => ((*(_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68})).1: skytable::Query);
    let mut _0: std::task::Poll<std::result::Result<skytable::Element, skytable::error::Error>>;
    let mut _3: {async fn body@skytable::aio::TlsConnection::run_simple_query::{closure#0}};
    let mut _4: {async fn body@skytable::aio::TlsConnection::run_simple_query::{closure#0}};
    let _5: &skytable::Query;
    let mut _6: std::task::Poll<std::result::Result<skytable::Element, skytable::error::Error>>;
    let mut _7: std::pin::Pin<&mut {async fn body@skytable::aio::TlsConnection::run_simple_query::{closure#0}}>;
    let mut _8: &mut {async fn body@skytable::aio::TlsConnection::run_simple_query::{closure#0}};
    let mut _9: &mut std::task::Context<'_>;
    let mut _10: isize;
    let mut _12: &mut skytable::aio::TlsConnection;
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: u32;
    let mut _15: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    let mut _16: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    let mut _17: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    let mut _18: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    let mut _19: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    let mut _20: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    let mut _21: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    let mut _22: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    let mut _23: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    let mut _24: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    let mut _25: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    let mut _26: &mut {async block@cli/src/runner.rs:61:18: 61:68};
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68})) as variant#3).0: {async fn body@skytable::aio::TlsConnection::run_simple_query::{closure#0}});
        let _11: std::result::Result<skytable::Element, skytable::error::Error>;
        scope 2 {
        }
        scope 3 {
            debug result => _11;
        }
    }

    bb0: {
        _15 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        _14 = discriminant((*_15));
        switchInt(move _14) -> [0: bb1, 1: bb17, 2: bb16, 3: bb15, otherwise: bb8];
    }

    bb1: {
        _13 = move _2;
        _16 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        _12 = deref_copy ((*_16).0: &mut skytable::aio::TlsConnection);
        _17 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        _5 = &((*_17).1: skytable::Query);
        _4 = TlsConnection::run_simple_query(_12, _5) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _3 = <{async fn body@TlsConnection::run_simple_query::{closure#0}} as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _18 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        (((*_18) as variant#3).0: {async fn body@skytable::aio::TlsConnection::run_simple_query::{closure#0}}) = move _3;
        goto -> bb4;
    }

    bb4: {
        _19 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        _8 = &mut (((*_19) as variant#3).0: {async fn body@skytable::aio::TlsConnection::run_simple_query::{closure#0}});
        _7 = Pin::<&mut {async fn body@TlsConnection::run_simple_query::{closure#0}}>::new_unchecked(_8) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _9 = _13;
        _6 = <{async fn body@TlsConnection::run_simple_query::{closure#0}} as Future>::poll(move _7, _9) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<Result<Element, skytable::error::Error>>::Pending;
        _20 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        discriminant((*_20)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _11 = move ((_6 as Ready).0: std::result::Result<skytable::Element, skytable::error::Error>);
        _21 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        drop((((*_21) as variant#3).0: {async fn body@skytable::aio::TlsConnection::run_simple_query::{closure#0}})) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        _24 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        drop(((*_24).1: skytable::Query)) -> [return: bb14, unwind: bb13];
    }

    bb11 (cleanup): {
        _23 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        drop((((*_23) as variant#3).0: {async fn body@skytable::aio::TlsConnection::run_simple_query::{closure#0}})) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        _25 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        drop(((*_25).1: skytable::Query)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _26 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        discriminant((*_26)) = 2;
        resume;
    }

    bb14: {
        _0 = Poll::<Result<Element, skytable::error::Error>>::Ready(move _11);
        _22 = deref_copy (_1.0: &mut {async block@cli/src/runner.rs:61:18: 61:68});
        discriminant((*_22)) = 1;
        return;
    }

    bb15: {
        _13 = move _2;
        goto -> bb4;
    }

    bb16: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb16, unwind continue];
    }

    bb17: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb17, unwind continue];
    }
}

fn runner::<impl at cli/src/runner.rs:150:1: 150:31>::new(_1: T) -> Runner<T> {
    debug con => _1;
    let mut _0: runner::Runner<T>;

    bb0: {
        _0 = Runner::<T> { con: move _1 };
        return;
    }
}

fn runner::<impl at cli/src/runner.rs:150:1: 150:31>::run_query(_1: &mut Runner<T>, _2: &str) -> {async fn body@cli/src/runner.rs:154:62: 175:6} {
    debug self => _1;
    debug unescaped_items => _2;
    let mut _0: {async fn body@cli/src/runner.rs:154:62: 175:6};

    bb0: {
        _0 = {coroutine@cli/src/runner.rs:154:62: 175:6 (#0)} { self: move _1, unescaped_items: _2 };
        return;
    }
}

fn runner::<impl at cli/src/runner.rs:150:1: 150:31>::run_query::{closure#0}(_1: Pin<&mut {async fn body@cli/src/runner.rs:154:62: 175:6}>, _2: &mut std::task::Context<'_>) -> Poll<()> {
    debug _task_context => _80;
    debug self => ((*(_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6})).0: &mut runner::Runner<T>);
    debug unescaped_items => ((*(_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6})).1: &str);
    let mut _0: std::task::Poll<()>;
    let _3: &mut runner::Runner<T>;
    let mut _6: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>>;
    let mut _7: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>>;
    let mut _8: &mut T;
    let mut _9: std::task::Poll<std::result::Result<skytable::Element, skytable::error::Error>>;
    let mut _10: std::pin::Pin<&mut std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>>>;
    let mut _11: &mut std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>>;
    let mut _12: &mut std::task::Context<'_>;
    let mut _13: isize;
    let mut _15: isize;
    let mut _17: isize;
    let mut _18: isize;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &std::string::String;
    let _29: ();
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &runner::BinaryData;
    let _37: runner::BinaryData;
    let mut _41: std::option::Option<usize>;
    let _43: ();
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: [core::fmt::rt::Argument<'_>; 1];
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &u64;
    let _54: ();
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &skytable::error::Error;
    let _62: !;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: ();
    let mut _80: &mut std::task::Context<'_>;
    let mut _81: u32;
    let mut _82: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _83: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _84: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _85: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _86: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _87: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _88: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _89: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _90: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    let mut _91: &mut {async fn body@cli/src/runner.rs:154:62: 175:6};
    scope 1 {
        debug self => _3;
        let _4: &str;
        scope 2 {
            debug unescaped_items => _4;
            let _5: skytable::Query;
            scope 3 {
                debug query => _5;
                let _16: skytable::Element;
                let _53: skytable::error::Error;
                scope 4 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6})) as variant#3).0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>>);
                    let _14: std::result::Result<skytable::Element, skytable::error::Error>;
                    scope 5 {
                    }
                    scope 6 {
                        debug result => _14;
                    }
                }
                scope 7 {
                    debug resp => _16;
                    let _19: std::string::String;
                    let _28: std::vec::Vec<u8>;
                    let _38: std::vec::Vec<std::option::Option<std::vec::Vec<u8>>>;
                    let _39: std::vec::Vec<std::option::Option<std::string::String>>;
                    let _40: skytable::RespCode;
                    let _42: u64;
                    let _51: std::vec::Vec<skytable::types::FlatElement>;
                    let _52: std::vec::Vec<skytable::Element>;
                    scope 8 {
                        debug st => _19;
                        let mut _66: &[&str; 2];
                    }
                    scope 9 {
                        debug st => _28;
                        let mut _65: &[&str; 2];
                    }
                    scope 10 {
                        debug brr => _38;
                    }
                    scope 11 {
                        debug srr => _39;
                    }
                    scope 12 {
                        debug r => _40;
                    }
                    scope 13 {
                        debug int => _42;
                        let mut _64: &[&str; 2];
                    }
                    scope 14 {
                        debug frr => _51;
                    }
                    scope 15 {
                        debug a => _52;
                    }
                }
                scope 16 {
                    debug e => _53;
                    let mut _63: &[&str; 2];
                }
            }
        }
    }

    bb0: {
        _82 = deref_copy (_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6});
        _81 = discriminant((*_82));
        switchInt(move _81) -> [0: bb1, 1: bb80, 2: bb79, 3: bb78, otherwise: bb9];
    }

    bb1: {
        _80 = move _2;
        _74 = const false;
        _73 = const false;
        _68 = const false;
        _72 = const false;
        _71 = const false;
        _67 = const false;
        _70 = const false;
        _69 = const false;
        _83 = deref_copy (_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6});
        _3 = move ((*_83).0: &mut runner::Runner<T>);
        _84 = deref_copy (_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6});
        _4 = ((*_84).1: &str);
        _5 = turn_into_query(_4) -> [return: bb2, unwind: bb41];
    }

    bb2: {
        _8 = &mut ((*_3).0: T);
        _7 = <T as runner::AsyncSocket>::run_simple_query(move _8, move _5) -> [return: bb3, unwind: bb41];
    }

    bb3: {
        _6 = <Pin<Box<dyn Future<Output = Result<Element, skytable::error::Error>> + Send + Sync>> as IntoFuture>::into_future(move _7) -> [return: bb4, unwind: bb41];
    }

    bb4: {
        _85 = deref_copy (_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6});
        (((*_85) as variant#3).0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>>) = move _6;
        goto -> bb5;
    }

    bb5: {
        _86 = deref_copy (_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6});
        _11 = &mut (((*_86) as variant#3).0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>>);
        _10 = Pin::<&mut Pin<Box<dyn Future<Output = Result<Element, skytable::error::Error>> + Send + Sync>>>::new_unchecked(_11) -> [return: bb6, unwind: bb40];
    }

    bb6: {
        _12 = _80;
        _9 = <Pin<Box<dyn Future<Output = Result<Element, skytable::error::Error>> + Send + Sync>> as Future>::poll(move _10, _12) -> [return: bb7, unwind: bb40];
    }

    bb7: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<()>::Pending;
        _87 = deref_copy (_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6});
        discriminant((*_87)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _14 = move ((_9 as Ready).0: std::result::Result<skytable::Element, skytable::error::Error>);
        _88 = deref_copy (_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6});
        drop((((*_88) as variant#3).0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>>)) -> [return: bb11, unwind: bb41];
    }

    bb11: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb9];
    }

    bb12: {
        _53 = move ((_14 as Err).0: skytable::error::Error);
        _63 = const _;
        _56 = _63 as &[&str] (PointerCoercion(Unsize));
        _61 = &_53;
        _60 = core::fmt::rt::Argument::<'_>::new_display::<skytable::error::Error>(_61) -> [return: bb33, unwind: bb36];
    }

    bb13: {
        _67 = const true;
        _68 = const true;
        _69 = const true;
        _70 = const true;
        _71 = const true;
        _72 = const true;
        _73 = const true;
        _74 = const true;
        _16 = move ((_14 as Ok).0: skytable::Element);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb14, 1: bb15, 2: bb19, 3: bb27, 4: bb26, otherwise: bb9];
    }

    bb14: {
        _17 = discriminant(((_16 as Array).0: skytable::types::Array));
        switchInt(move _17) -> [0: bb24, 1: bb25, 2: bb31, 3: bb32, otherwise: bb9];
    }

    bb15: {
        _74 = const false;
        _19 = move ((_16 as String).0: std::string::String);
        _66 = const _;
        _22 = _66 as &[&str] (PointerCoercion(Unsize));
        _27 = &_19;
        _26 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_27) -> [return: bb16, unwind: bb38];
    }

    bb16: {
        _25 = [move _26];
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _23) -> [return: bb17, unwind: bb38];
    }

    bb17: {
        _20 = _print(move _21) -> [return: bb18, unwind: bb38];
    }

    bb18: {
        _79 = const ();
        drop(_19) -> [return: bb60, unwind: bb77];
    }

    bb19: {
        _73 = const false;
        _28 = move ((_16 as Binstr).0: std::vec::Vec<u8>);
        _65 = const _;
        _31 = _65 as &[&str] (PointerCoercion(Unsize));
        _37 = BinaryData(move _28);
        _36 = &_37;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<BinaryData>(_36) -> [return: bb20, unwind: bb37];
    }

    bb20: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb21, unwind: bb37];
    }

    bb21: {
        _29 = _print(move _30) -> [return: bb22, unwind: bb37];
    }

    bb22: {
        drop(_37) -> [return: bb23, unwind: bb77];
    }

    bb23: {
        _79 = const ();
        goto -> bb60;
    }

    bb24: {
        _72 = const false;
        _38 = move ((((_16 as Array).0: skytable::types::Array) as Bin).0: std::vec::Vec<std::option::Option<std::vec::Vec<u8>>>);
        _79 = print_bin_array(move _38) -> [return: bb81, unwind: bb77];
    }

    bb25: {
        _71 = const false;
        _39 = move ((((_16 as Array).0: skytable::types::Array) as Str).0: std::vec::Vec<std::option::Option<std::string::String>>);
        _79 = print_str_array(move _39) -> [return: bb82, unwind: bb77];
    }

    bb26: {
        _67 = const false;
        _40 = move ((_16 as RespCode).0: skytable::RespCode);
        _41 = Option::<usize>::None;
        _79 = print_rcode(move _40, move _41) -> [return: bb83, unwind: bb77];
    }

    bb27: {
        _42 = ((_16 as UnsignedInt).0: u64);
        _64 = const _;
        _45 = _64 as &[&str] (PointerCoercion(Unsize));
        _50 = &_42;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_50) -> [return: bb28, unwind: bb77];
    }

    bb28: {
        _48 = [move _49];
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _44 = Arguments::<'_>::new_v1(move _45, move _46) -> [return: bb29, unwind: bb77];
    }

    bb29: {
        _43 = _print(move _44) -> [return: bb30, unwind: bb77];
    }

    bb30: {
        _79 = const ();
        goto -> bb60;
    }

    bb31: {
        _70 = const false;
        _51 = move ((((_16 as Array).0: skytable::types::Array) as Flat).0: std::vec::Vec<skytable::types::FlatElement>);
        _79 = write_flat_array(move _51) -> [return: bb84, unwind: bb77];
    }

    bb32: {
        _69 = const false;
        _52 = move ((((_16 as Array).0: skytable::types::Array) as Recursive).0: std::vec::Vec<skytable::Element>);
        _79 = print_array(move _52) -> [return: bb85, unwind: bb77];
    }

    bb33: {
        _59 = [move _60];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _55 = Arguments::<'_>::new_v1(move _56, move _57) -> [return: bb34, unwind: bb36];
    }

    bb34: {
        _54 = _eprint(move _55) -> [return: bb35, unwind: bb36];
    }

    bb35: {
        _62 = exit(const 1_i32) -> bb36;
    }

    bb36 (cleanup): {
        drop(_53) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_37) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_19) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        goto -> bb41;
    }

    bb40 (cleanup): {
        _90 = deref_copy (_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6});
        drop((((*_90) as variant#3).0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::result::Result<skytable::Element, skytable::error::Error>> + std::marker::Send + std::marker::Sync>>)) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        _91 = deref_copy (_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6});
        discriminant((*_91)) = 2;
        resume;
    }

    bb42: {
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _0 = Poll::<()>::Ready(move _79);
        _89 = deref_copy (_1.0: &mut {async fn body@cli/src/runner.rs:154:62: 175:6});
        discriminant((*_89)) = 1;
        return;
    }

    bb43: {
        switchInt(_68) -> [0: bb44, otherwise: bb53];
    }

    bb44: {
        _68 = const false;
        goto -> bb42;
    }

    bb45: {
        switchInt(_72) -> [0: bb44, otherwise: bb46];
    }

    bb46: {
        drop(((((_16 as Array).0: skytable::types::Array) as Bin).0: std::vec::Vec<std::option::Option<std::vec::Vec<u8>>>)) -> [return: bb44, unwind: bb39];
    }

    bb47: {
        switchInt(_71) -> [0: bb44, otherwise: bb48];
    }

    bb48: {
        drop(((((_16 as Array).0: skytable::types::Array) as Str).0: std::vec::Vec<std::option::Option<std::string::String>>)) -> [return: bb44, unwind: bb39];
    }

    bb49: {
        switchInt(_70) -> [0: bb44, otherwise: bb50];
    }

    bb50: {
        drop(((((_16 as Array).0: skytable::types::Array) as Flat).0: std::vec::Vec<skytable::types::FlatElement>)) -> [return: bb44, unwind: bb39];
    }

    bb51: {
        switchInt(_69) -> [0: bb44, otherwise: bb52];
    }

    bb52: {
        drop(((((_16 as Array).0: skytable::types::Array) as Recursive).0: std::vec::Vec<skytable::Element>)) -> [return: bb44, unwind: bb39];
    }

    bb53: {
        _75 = discriminant(((_16 as Array).0: skytable::types::Array));
        switchInt(move _75) -> [0: bb45, 1: bb47, 2: bb49, otherwise: bb51];
    }

    bb54: {
        switchInt(_74) -> [0: bb42, otherwise: bb55];
    }

    bb55: {
        drop(((_16 as String).0: std::string::String)) -> [return: bb42, unwind: bb39];
    }

    bb56: {
        switchInt(_73) -> [0: bb42, otherwise: bb57];
    }

    bb57: {
        drop(((_16 as Binstr).0: std::vec::Vec<u8>)) -> [return: bb42, unwind: bb39];
    }

    bb58: {
        switchInt(_67) -> [0: bb42, otherwise: bb59];
    }

    bb59: {
        drop(((_16 as RespCode).0: skytable::RespCode)) -> [return: bb42, unwind: bb39];
    }

    bb60: {
        _76 = discriminant(_16);
        switchInt(move _76) -> [0: bb43, 1: bb54, 2: bb56, 4: bb58, otherwise: bb42];
    }

    bb61 (cleanup): {
        switchInt(_68) -> [0: bb39, otherwise: bb70];
    }

    bb62 (cleanup): {
        switchInt(_72) -> [0: bb39, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop(((((_16 as Array).0: skytable::types::Array) as Bin).0: std::vec::Vec<std::option::Option<std::vec::Vec<u8>>>)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_71) -> [0: bb39, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop(((((_16 as Array).0: skytable::types::Array) as Str).0: std::vec::Vec<std::option::Option<std::string::String>>)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_70) -> [0: bb39, otherwise: bb67];
    }

    bb67 (cleanup): {
        drop(((((_16 as Array).0: skytable::types::Array) as Flat).0: std::vec::Vec<skytable::types::FlatElement>)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_69) -> [0: bb39, otherwise: bb69];
    }

    bb69 (cleanup): {
        drop(((((_16 as Array).0: skytable::types::Array) as Recursive).0: std::vec::Vec<skytable::Element>)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        _77 = discriminant(((_16 as Array).0: skytable::types::Array));
        switchInt(move _77) -> [0: bb62, 1: bb64, 2: bb66, otherwise: bb68];
    }

    bb71 (cleanup): {
        switchInt(_74) -> [0: bb39, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop(((_16 as String).0: std::string::String)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_73) -> [0: bb39, otherwise: bb74];
    }

    bb74 (cleanup): {
        drop(((_16 as Binstr).0: std::vec::Vec<u8>)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_67) -> [0: bb39, otherwise: bb76];
    }

    bb76 (cleanup): {
        drop(((_16 as RespCode).0: skytable::RespCode)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        _78 = discriminant(_16);
        switchInt(move _78) -> [0: bb61, 1: bb71, 2: bb73, 4: bb75, otherwise: bb39];
    }

    bb78: {
        _80 = move _2;
        goto -> bb5;
    }

    bb79: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb79, unwind continue];
    }

    bb80: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb80, unwind continue];
    }

    bb81: {
        goto -> bb60;
    }

    bb82: {
        goto -> bb60;
    }

    bb83: {
        goto -> bb60;
    }

    bb84: {
        goto -> bb60;
    }

    bb85: {
        goto -> bb60;
    }
}

promoted[0] in runner::<impl at cli/src/runner.rs:150:1: 150:31>::run_query::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "An I/O error occurred while querying: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in runner::<impl at cli/src/runner.rs:150:1: 150:31>::run_query::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "[SKYSH ERROR] The server possibly sent a newer data type that we can't parse\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in runner::<impl at cli/src/runner.rs:150:1: 150:31>::run_query::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in runner::<impl at cli/src/runner.rs:150:1: 150:31>::run_query::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in runner::<impl at cli/src/runner.rs:150:1: 150:31>::run_query::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "\"", const "\"\n"];
        _0 = &_1;
        return;
    }
}

fn print_rcode(_1: skytable::RespCode, _2: Option<usize>) -> () {
    debug rcode => _1;
    debug idx => _2;
    let mut _0: ();
    let mut _3: isize;
    let mut _4: std::result::Result<(), std::io::Error>;
    let mut _5: std::result::Result<(), std::io::Error>;
    let mut _6: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _7: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _8: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _9: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _10: &mut std::io::Stdout;
    let mut _11: &mut std::io::Stdout;
    let mut _12: std::io::Stdout;
    let _13: &str;
    let mut _14: std::result::Result<(), std::io::Error>;
    let mut _15: std::result::Result<(), std::io::Error>;
    let mut _16: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _17: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _18: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _19: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _20: &mut std::io::Stdout;
    let mut _21: &mut std::io::Stdout;
    let mut _22: std::io::Stdout;
    let mut _23: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _24: &std::option::Option<usize>;
    let _25: &str;
    let _26: std::string::String;
    let mut _27: std::result::Result<(), std::io::Error>;
    let mut _28: std::result::Result<(), std::io::Error>;
    let mut _29: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _30: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _31: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _32: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _33: &mut std::io::Stdout;
    let mut _34: &mut std::io::Stdout;
    let mut _35: std::io::Stdout;
    let mut _36: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _37: &std::option::Option<usize>;
    let mut _38: &std::string::String;
    let _39: &str;
    let mut _40: std::result::Result<(), std::io::Error>;
    let mut _41: std::result::Result<(), std::io::Error>;
    let mut _42: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _43: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _44: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _45: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _46: &mut std::io::Stdout;
    let mut _47: &mut std::io::Stdout;
    let mut _48: std::io::Stdout;
    let mut _49: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _50: &std::option::Option<usize>;
    let _51: &str;
    let mut _52: std::result::Result<(), std::io::Error>;
    let mut _53: std::result::Result<(), std::io::Error>;
    let mut _54: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _55: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _56: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _57: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _58: &mut std::io::Stdout;
    let mut _59: &mut std::io::Stdout;
    let mut _60: std::io::Stdout;
    let mut _61: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _62: &std::option::Option<usize>;
    let _63: &str;
    let mut _64: std::result::Result<(), std::io::Error>;
    let mut _65: std::result::Result<(), std::io::Error>;
    let mut _66: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _67: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _68: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _69: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _70: &mut std::io::Stdout;
    let mut _71: &mut std::io::Stdout;
    let mut _72: std::io::Stdout;
    let mut _73: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _74: &std::option::Option<usize>;
    let _75: &str;
    let mut _76: std::result::Result<(), std::io::Error>;
    let mut _77: std::result::Result<(), std::io::Error>;
    let mut _78: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _79: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _80: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _81: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _82: &mut std::io::Stdout;
    let mut _83: &mut std::io::Stdout;
    let mut _84: std::io::Stdout;
    let mut _85: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _86: &std::option::Option<usize>;
    let _87: &str;
    let mut _88: std::result::Result<(), std::io::Error>;
    let mut _89: std::result::Result<(), std::io::Error>;
    let mut _90: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _91: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _92: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _93: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _94: &mut std::io::Stdout;
    let mut _95: &mut std::io::Stdout;
    let mut _96: std::io::Stdout;
    let mut _97: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _98: &std::option::Option<usize>;
    let _99: &str;
    let mut _100: std::result::Result<(), std::io::Error>;
    let mut _101: std::result::Result<(), std::io::Error>;
    let mut _102: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _103: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _104: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _105: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _106: &mut std::io::Stdout;
    let mut _107: &mut std::io::Stdout;
    let mut _108: std::io::Stdout;
    let mut _109: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _110: &std::option::Option<usize>;
    let _111: &str;
    let mut _112: std::result::Result<(), std::io::Error>;
    let mut _113: std::result::Result<(), std::io::Error>;
    let mut _114: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _115: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _116: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _117: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _118: &mut std::io::Stdout;
    let mut _119: &mut std::io::Stdout;
    let mut _120: std::io::Stdout;
    let mut _121: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33};
    let mut _122: &std::option::Option<usize>;
    let _123: &str;
    let mut _124: bool;
    let mut _125: isize;
    let mut _126: isize;
    scope 1 {
        debug st => _26;
    }

    bb0: {
        _124 = const false;
        _124 = const true;
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb2, 1: bb35, 2: bb43, 3: bb10, 4: bb51, 5: bb59, 6: bb18, 7: bb27, 9: bb67, otherwise: bb1];
    }

    bb1: {
        _120 = std::io::stdout() -> [return: bb75, unwind: bb90];
    }

    bb2: {
        _12 = std::io::stdout() -> [return: bb3, unwind: bb90];
    }

    bb3: {
        _11 = &mut _12;
        _10 = <std::io::Stdout as std::io::Write>::by_ref(move _11) -> [return: bb4, unwind: bb90];
    }

    bb4: {
        _9 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _10);
        _8 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _9, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb5, unwind: bb90];
    }

    bb5: {
        _7 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _8, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb6, unwind: bb90];
    }

    bb6: {
        _6 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _7, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb7, unwind: bb90];
    }

    bb7: {
        _5 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _6, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}) -> [return: bb8, unwind: bb90];
    }

    bb8: {
        _4 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _5, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}) -> [return: bb9, unwind: bb90];
    }

    bb9: {
        _13 = const "Failed to write to stdout";
        _0 = Result::<(), std::io::Error>::expect(move _4, _13) -> [return: bb91, unwind: bb90];
    }

    bb10: {
        _22 = std::io::stdout() -> [return: bb11, unwind: bb90];
    }

    bb11: {
        _21 = &mut _22;
        _20 = <std::io::Stdout as std::io::Write>::by_ref(move _21) -> [return: bb12, unwind: bb90];
    }

    bb12: {
        _19 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _20);
        _18 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _19, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb13, unwind: bb90];
    }

    bb13: {
        _24 = &_2;
        _23 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33} { idx: move _24 };
        _17 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _18, move _23) -> [return: bb14, unwind: bb90];
    }

    bb14: {
        _16 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _17, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb15, unwind: bb90];
    }

    bb15: {
        _15 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _16, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}) -> [return: bb16, unwind: bb90];
    }

    bb16: {
        _14 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _15, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}) -> [return: bb17, unwind: bb90];
    }

    bb17: {
        _25 = const "Failed to write to stdout";
        _0 = Result::<(), std::io::Error>::expect(move _14, _25) -> [return: bb92, unwind: bb90];
    }

    bb18: {
        _124 = const false;
        _26 = move ((_1 as ErrorString).0: std::string::String);
        _35 = std::io::stdout() -> [return: bb19, unwind: bb82];
    }

    bb19: {
        _34 = &mut _35;
        _33 = <std::io::Stdout as std::io::Write>::by_ref(move _34) -> [return: bb20, unwind: bb82];
    }

    bb20: {
        _32 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _33);
        _31 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _32, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb21, unwind: bb82];
    }

    bb21: {
        _37 = &_2;
        _38 = &_26;
        _36 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33} { idx: move _37, st: move _38 };
        _30 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _31, move _36) -> [return: bb22, unwind: bb82];
    }

    bb22: {
        _29 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _30, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb23, unwind: bb82];
    }

    bb23: {
        _28 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _29, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}) -> [return: bb24, unwind: bb82];
    }

    bb24: {
        _27 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _28, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}) -> [return: bb25, unwind: bb82];
    }

    bb25: {
        _39 = const "Failed to write to stdout";
        _0 = Result::<(), std::io::Error>::expect(move _27, _39) -> [return: bb26, unwind: bb82];
    }

    bb26: {
        drop(_26) -> [return: bb87, unwind: bb90];
    }

    bb27: {
        _48 = std::io::stdout() -> [return: bb28, unwind: bb90];
    }

    bb28: {
        _47 = &mut _48;
        _46 = <std::io::Stdout as std::io::Write>::by_ref(move _47) -> [return: bb29, unwind: bb90];
    }

    bb29: {
        _45 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _46);
        _44 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _45, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb30, unwind: bb90];
    }

    bb30: {
        _50 = &_2;
        _49 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33} { idx: move _50 };
        _43 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _44, move _49) -> [return: bb31, unwind: bb90];
    }

    bb31: {
        _42 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _43, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb32, unwind: bb90];
    }

    bb32: {
        _41 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _42, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}) -> [return: bb33, unwind: bb90];
    }

    bb33: {
        _40 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _41, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}) -> [return: bb34, unwind: bb90];
    }

    bb34: {
        _51 = const "Failed to write to stdout";
        _0 = Result::<(), std::io::Error>::expect(move _40, _51) -> [return: bb93, unwind: bb90];
    }

    bb35: {
        _60 = std::io::stdout() -> [return: bb36, unwind: bb90];
    }

    bb36: {
        _59 = &mut _60;
        _58 = <std::io::Stdout as std::io::Write>::by_ref(move _59) -> [return: bb37, unwind: bb90];
    }

    bb37: {
        _57 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _58);
        _56 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _57, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb38, unwind: bb90];
    }

    bb38: {
        _62 = &_2;
        _61 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33} { idx: move _62 };
        _55 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _56, move _61) -> [return: bb39, unwind: bb90];
    }

    bb39: {
        _54 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _55, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb40, unwind: bb90];
    }

    bb40: {
        _53 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _54, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}) -> [return: bb41, unwind: bb90];
    }

    bb41: {
        _52 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _53, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}) -> [return: bb42, unwind: bb90];
    }

    bb42: {
        _63 = const "Failed to write to stdout";
        _0 = Result::<(), std::io::Error>::expect(move _52, _63) -> [return: bb94, unwind: bb90];
    }

    bb43: {
        _72 = std::io::stdout() -> [return: bb44, unwind: bb90];
    }

    bb44: {
        _71 = &mut _72;
        _70 = <std::io::Stdout as std::io::Write>::by_ref(move _71) -> [return: bb45, unwind: bb90];
    }

    bb45: {
        _69 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _70);
        _68 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _69, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb46, unwind: bb90];
    }

    bb46: {
        _74 = &_2;
        _73 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33} { idx: move _74 };
        _67 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _68, move _73) -> [return: bb47, unwind: bb90];
    }

    bb47: {
        _66 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _67, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb48, unwind: bb90];
    }

    bb48: {
        _65 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _66, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}) -> [return: bb49, unwind: bb90];
    }

    bb49: {
        _64 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _65, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}) -> [return: bb50, unwind: bb90];
    }

    bb50: {
        _75 = const "Failed to write to stdout";
        _0 = Result::<(), std::io::Error>::expect(move _64, _75) -> [return: bb95, unwind: bb90];
    }

    bb51: {
        _84 = std::io::stdout() -> [return: bb52, unwind: bb90];
    }

    bb52: {
        _83 = &mut _84;
        _82 = <std::io::Stdout as std::io::Write>::by_ref(move _83) -> [return: bb53, unwind: bb90];
    }

    bb53: {
        _81 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _82);
        _80 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _81, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb54, unwind: bb90];
    }

    bb54: {
        _86 = &_2;
        _85 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33} { idx: move _86 };
        _79 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _80, move _85) -> [return: bb55, unwind: bb90];
    }

    bb55: {
        _78 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _79, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb56, unwind: bb90];
    }

    bb56: {
        _77 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _78, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}) -> [return: bb57, unwind: bb90];
    }

    bb57: {
        _76 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _77, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}) -> [return: bb58, unwind: bb90];
    }

    bb58: {
        _87 = const "Failed to write to stdout";
        _0 = Result::<(), std::io::Error>::expect(move _76, _87) -> [return: bb96, unwind: bb90];
    }

    bb59: {
        _96 = std::io::stdout() -> [return: bb60, unwind: bb90];
    }

    bb60: {
        _95 = &mut _96;
        _94 = <std::io::Stdout as std::io::Write>::by_ref(move _95) -> [return: bb61, unwind: bb90];
    }

    bb61: {
        _93 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _94);
        _92 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _93, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb62, unwind: bb90];
    }

    bb62: {
        _98 = &_2;
        _97 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33} { idx: move _98 };
        _91 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _92, move _97) -> [return: bb63, unwind: bb90];
    }

    bb63: {
        _90 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _91, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb64, unwind: bb90];
    }

    bb64: {
        _89 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _90, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}) -> [return: bb65, unwind: bb90];
    }

    bb65: {
        _88 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _89, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}) -> [return: bb66, unwind: bb90];
    }

    bb66: {
        _99 = const "Failed to write to stdout";
        _0 = Result::<(), std::io::Error>::expect(move _88, _99) -> [return: bb97, unwind: bb90];
    }

    bb67: {
        _108 = std::io::stdout() -> [return: bb68, unwind: bb90];
    }

    bb68: {
        _107 = &mut _108;
        _106 = <std::io::Stdout as std::io::Write>::by_ref(move _107) -> [return: bb69, unwind: bb90];
    }

    bb69: {
        _105 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _106);
        _104 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _105, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb70, unwind: bb90];
    }

    bb70: {
        _110 = &_2;
        _109 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33} { idx: move _110 };
        _103 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _104, move _109) -> [return: bb71, unwind: bb90];
    }

    bb71: {
        _102 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _103, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb72, unwind: bb90];
    }

    bb72: {
        _101 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _102, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}) -> [return: bb73, unwind: bb90];
    }

    bb73: {
        _100 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _101, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}) -> [return: bb74, unwind: bb90];
    }

    bb74: {
        _111 = const "Failed to write to stdout";
        _0 = Result::<(), std::io::Error>::expect(move _100, _111) -> [return: bb98, unwind: bb90];
    }

    bb75: {
        _119 = &mut _120;
        _118 = <std::io::Stdout as std::io::Write>::by_ref(move _119) -> [return: bb76, unwind: bb90];
    }

    bb76: {
        _117 = Result::<&mut std::io::Stdout, std::io::Error>::Ok(move _118);
        _116 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _117, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb77, unwind: bb90];
    }

    bb77: {
        _122 = &_2;
        _121 = {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33} { idx: move _122 };
        _115 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _116, move _121) -> [return: bb78, unwind: bb90];
    }

    bb78: {
        _114 = Result::<&mut std::io::Stdout, std::io::Error>::and_then::<&mut std::io::Stdout, {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}>(move _115, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}) -> [return: bb79, unwind: bb90];
    }

    bb79: {
        _113 = Result::<&mut std::io::Stdout, std::io::Error>::map::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}>(move _114, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}) -> [return: bb80, unwind: bb90];
    }

    bb80: {
        _112 = Result::<(), std::io::Error>::and_then::<(), {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}>(move _113, const ZeroSized: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}) -> [return: bb81, unwind: bb90];
    }

    bb81: {
        _123 = const "Failed to write to stdout";
        _0 = Result::<(), std::io::Error>::expect(move _112, _123) -> [return: bb99, unwind: bb90];
    }

    bb82 (cleanup): {
        drop(_26) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        resume;
    }

    bb84: {
        return;
    }

    bb85: {
        switchInt(_124) -> [0: bb84, otherwise: bb86];
    }

    bb86: {
        drop(((_1 as ErrorString).0: std::string::String)) -> [return: bb84, unwind continue];
    }

    bb87: {
        _125 = discriminant(_1);
        switchInt(move _125) -> [6: bb85, otherwise: bb84];
    }

    bb88 (cleanup): {
        switchInt(_124) -> [0: bb83, otherwise: bb89];
    }

    bb89 (cleanup): {
        drop(((_1 as ErrorString).0: std::string::String)) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        _126 = discriminant(_1);
        switchInt(move _126) -> [6: bb88, otherwise: bb83];
    }

    bb91: {
        goto -> bb87;
    }

    bb92: {
        goto -> bb87;
    }

    bb93: {
        goto -> bb87;
    }

    bb94: {
        goto -> bb87;
    }

    bb95: {
        goto -> bb87;
    }

    bb96: {
        goto -> bb87;
    }

    bb97: {
        goto -> bb87;
    }

    bb98: {
        goto -> bb87;
    }

    bb99: {
        goto -> bb87;
    }
}

fn print_rcode::{closure#1}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::SetForegroundColor;
    let mut _4: crossterm::style::Color;

    bb0: {
        _4 = Cyan;
        _3 = SetForegroundColor(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<SetForegroundColor>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#2}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::Print<std::string::String>;
    let mut _4: std::string::String;
    let _5: &str;

    bb0: {
        _5 = const "(Okay)\n";
        _4 = <str as ToString>::to_string(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Print::<std::string::String>(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Print<std::string::String>>(_2, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn print_rcode::{closure#3}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;

    bb0: {
        _0 = <std::io::Stdout as QueueableCommand>::queue::<ResetColor>(_2, const ResetColor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#4}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn print_rcode::{closure#0}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;
    let mut _5: std::io::Stdout;

    bb0: {
        _5 = std::io::stdout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::io::Stdout as std::io::Write>::by_ref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_rcode::{closure#6}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::SetForegroundColor;
    let mut _4: crossterm::style::Color;

    bb0: {
        _4 = Red;
        _3 = SetForegroundColor(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<SetForegroundColor>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#7}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    debug idx => (*(_1.0: &std::option::Option<usize>));
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::Print<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: isize;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let _15: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 0];
    let _20: [core::fmt::rt::Argument<'_>; 0];
    let mut _21: &[&str; 1];
    let mut _23: &std::option::Option<usize>;
    let mut _24: &std::option::Option<usize>;
    scope 1 {
        debug idx => _6;
        let _6: usize;
        let _7: std::string::String;
        let mut _22: &[&str; 2];
        scope 2 {
            debug res => _7;
        }
    }
    scope 3 {
        debug res => _15;
    }

    bb0: {
        _23 = deref_copy (_1.0: &std::option::Option<usize>);
        _5 = discriminant((*_23));
        switchInt(move _5) -> [1: bb1, otherwise: bb5];
    }

    bb1: {
        _24 = deref_copy (_1.0: &std::option::Option<usize>);
        _6 = (((*_24) as Some).0: usize);
        _22 = const _;
        _9 = _22 as &[&str] (PointerCoercion(Unsize));
        _14 = &_6;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = format(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = move _7;
        goto -> bb9;
    }

    bb5: {
        _21 = const _;
        _17 = _21 as &[&str] (PointerCoercion(Unsize));
        _20 = core::fmt::rt::Argument::<'_>::none() -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = format(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _4 = move _15;
        goto -> bb9;
    }

    bb9: {
        _3 = Print::<std::string::String>(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Print<std::string::String>>(_2, move _3) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

promoted[0] in print_rcode::{closure#7}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "(Action Error)\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_rcode::{closure#7}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "(", const ") (Action Error)\n"];
        _0 = &_1;
        return;
    }
}

fn print_rcode::{closure#8}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;

    bb0: {
        _0 = <std::io::Stdout as QueueableCommand>::queue::<ResetColor>(_2, const ResetColor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#9}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn print_rcode::{closure#5}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;
    let mut _5: std::io::Stdout;

    bb0: {
        _5 = std::io::stdout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::io::Stdout as std::io::Write>::by_ref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_rcode::{closure#11}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::SetForegroundColor;
    let mut _4: crossterm::style::Color;

    bb0: {
        _4 = Red;
        _3 = SetForegroundColor(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<SetForegroundColor>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#12}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    debug idx => (*(_1.0: &std::option::Option<usize>));
    debug st => (*(_1.1: &std::string::String));
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::Print<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: isize;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 2];
    let _12: [core::fmt::rt::Argument<'_>; 2];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let mut _23: &[&str; 2];
    let mut _25: &std::option::Option<usize>;
    let mut _26: &std::option::Option<usize>;
    let mut _27: &std::string::String;
    let mut _28: &std::string::String;
    scope 1 {
        debug idx => _6;
        let _6: usize;
        let _7: std::string::String;
        let mut _24: &[&str; 3];
        scope 2 {
            debug res => _7;
        }
    }
    scope 3 {
        debug res => _16;
    }

    bb0: {
        _25 = deref_copy (_1.0: &std::option::Option<usize>);
        _5 = discriminant((*_25));
        switchInt(move _5) -> [1: bb1, otherwise: bb6];
    }

    bb1: {
        _26 = deref_copy (_1.0: &std::option::Option<usize>);
        _6 = (((*_26) as Some).0: usize);
        _24 = const _;
        _9 = _24 as &[&str] (PointerCoercion(Unsize));
        _14 = &_6;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _27 = deref_copy (_1.1: &std::string::String);
        _15 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_27) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = [move _13, move _15];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = format(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _4 = move _7;
        goto -> bb10;
    }

    bb6: {
        _23 = const _;
        _18 = _23 as &[&str] (PointerCoercion(Unsize));
        _28 = deref_copy (_1.1: &std::string::String);
        _22 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_28) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = [move _22];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _16 = format(move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        _4 = move _16;
        goto -> bb10;
    }

    bb10: {
        _3 = Print::<std::string::String>(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Print<std::string::String>>(_2, move _3) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }
}

promoted[0] in print_rcode::{closure#12}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "(", const ")\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_rcode::{closure#12}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "(", const ") (", const ")\n"];
        _0 = &_1;
        return;
    }
}

fn print_rcode::{closure#13}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;

    bb0: {
        _0 = <std::io::Stdout as QueueableCommand>::queue::<ResetColor>(_2, const ResetColor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#14}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn print_rcode::{closure#10}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;
    let mut _5: std::io::Stdout;

    bb0: {
        _5 = std::io::stdout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::io::Stdout as std::io::Write>::by_ref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_rcode::{closure#16}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::SetForegroundColor;
    let mut _4: crossterm::style::Color;

    bb0: {
        _4 = Red;
        _3 = SetForegroundColor(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<SetForegroundColor>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#17}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    debug idx => (*(_1.0: &std::option::Option<usize>));
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::Print<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: isize;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let _15: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 0];
    let _20: [core::fmt::rt::Argument<'_>; 0];
    let mut _21: &[&str; 1];
    let mut _23: &std::option::Option<usize>;
    let mut _24: &std::option::Option<usize>;
    scope 1 {
        debug idx => _6;
        let _6: usize;
        let _7: std::string::String;
        let mut _22: &[&str; 2];
        scope 2 {
            debug res => _7;
        }
    }
    scope 3 {
        debug res => _15;
    }

    bb0: {
        _23 = deref_copy (_1.0: &std::option::Option<usize>);
        _5 = discriminant((*_23));
        switchInt(move _5) -> [1: bb1, otherwise: bb5];
    }

    bb1: {
        _24 = deref_copy (_1.0: &std::option::Option<usize>);
        _6 = (((*_24) as Some).0: usize);
        _22 = const _;
        _9 = _22 as &[&str] (PointerCoercion(Unsize));
        _14 = &_6;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = format(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = move _7;
        goto -> bb9;
    }

    bb5: {
        _21 = const _;
        _17 = _21 as &[&str] (PointerCoercion(Unsize));
        _20 = core::fmt::rt::Argument::<'_>::none() -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = format(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _4 = move _15;
        goto -> bb9;
    }

    bb9: {
        _3 = Print::<std::string::String>(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Print<std::string::String>>(_2, move _3) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

promoted[0] in print_rcode::{closure#17}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "(Other Error)\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_rcode::{closure#17}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "(", const ") (Other Error)\n"];
        _0 = &_1;
        return;
    }
}

fn print_rcode::{closure#18}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;

    bb0: {
        _0 = <std::io::Stdout as QueueableCommand>::queue::<ResetColor>(_2, const ResetColor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#19}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn print_rcode::{closure#15}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;
    let mut _5: std::io::Stdout;

    bb0: {
        _5 = std::io::stdout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::io::Stdout as std::io::Write>::by_ref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_rcode::{closure#21}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::SetForegroundColor;
    let mut _4: crossterm::style::Color;

    bb0: {
        _4 = Red;
        _3 = SetForegroundColor(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<SetForegroundColor>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#22}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    debug idx => (*(_1.0: &std::option::Option<usize>));
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::Print<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: isize;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let _15: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 0];
    let _20: [core::fmt::rt::Argument<'_>; 0];
    let mut _21: &[&str; 1];
    let mut _23: &std::option::Option<usize>;
    let mut _24: &std::option::Option<usize>;
    scope 1 {
        debug idx => _6;
        let _6: usize;
        let _7: std::string::String;
        let mut _22: &[&str; 2];
        scope 2 {
            debug res => _7;
        }
    }
    scope 3 {
        debug res => _15;
    }

    bb0: {
        _23 = deref_copy (_1.0: &std::option::Option<usize>);
        _5 = discriminant((*_23));
        switchInt(move _5) -> [1: bb1, otherwise: bb5];
    }

    bb1: {
        _24 = deref_copy (_1.0: &std::option::Option<usize>);
        _6 = (((*_24) as Some).0: usize);
        _22 = const _;
        _9 = _22 as &[&str] (PointerCoercion(Unsize));
        _14 = &_6;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = format(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = move _7;
        goto -> bb9;
    }

    bb5: {
        _21 = const _;
        _17 = _21 as &[&str] (PointerCoercion(Unsize));
        _20 = core::fmt::rt::Argument::<'_>::none() -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = format(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _4 = move _15;
        goto -> bb9;
    }

    bb9: {
        _3 = Print::<std::string::String>(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Print<std::string::String>>(_2, move _3) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

promoted[0] in print_rcode::{closure#22}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "(Not Found)\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_rcode::{closure#22}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "(", const ") (Not Found)\n"];
        _0 = &_1;
        return;
    }
}

fn print_rcode::{closure#23}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;

    bb0: {
        _0 = <std::io::Stdout as QueueableCommand>::queue::<ResetColor>(_2, const ResetColor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#24}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn print_rcode::{closure#20}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;
    let mut _5: std::io::Stdout;

    bb0: {
        _5 = std::io::stdout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::io::Stdout as std::io::Write>::by_ref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_rcode::{closure#26}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::SetForegroundColor;
    let mut _4: crossterm::style::Color;

    bb0: {
        _4 = Red;
        _3 = SetForegroundColor(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<SetForegroundColor>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#27}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    debug idx => (*(_1.0: &std::option::Option<usize>));
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::Print<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: isize;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let _15: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 0];
    let _20: [core::fmt::rt::Argument<'_>; 0];
    let mut _21: &[&str; 1];
    let mut _23: &std::option::Option<usize>;
    let mut _24: &std::option::Option<usize>;
    scope 1 {
        debug idx => _6;
        let _6: usize;
        let _7: std::string::String;
        let mut _22: &[&str; 2];
        scope 2 {
            debug res => _7;
        }
    }
    scope 3 {
        debug res => _15;
    }

    bb0: {
        _23 = deref_copy (_1.0: &std::option::Option<usize>);
        _5 = discriminant((*_23));
        switchInt(move _5) -> [1: bb1, otherwise: bb5];
    }

    bb1: {
        _24 = deref_copy (_1.0: &std::option::Option<usize>);
        _6 = (((*_24) as Some).0: usize);
        _22 = const _;
        _9 = _22 as &[&str] (PointerCoercion(Unsize));
        _14 = &_6;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = format(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = move _7;
        goto -> bb9;
    }

    bb5: {
        _21 = const _;
        _17 = _21 as &[&str] (PointerCoercion(Unsize));
        _20 = core::fmt::rt::Argument::<'_>::none() -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = format(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _4 = move _15;
        goto -> bb9;
    }

    bb9: {
        _3 = Print::<std::string::String>(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Print<std::string::String>>(_2, move _3) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

promoted[0] in print_rcode::{closure#27}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "(Overwrite Error)\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_rcode::{closure#27}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "(", const ") (Overwrite Error)\n"];
        _0 = &_1;
        return;
    }
}

fn print_rcode::{closure#28}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;

    bb0: {
        _0 = <std::io::Stdout as QueueableCommand>::queue::<ResetColor>(_2, const ResetColor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#29}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn print_rcode::{closure#25}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;
    let mut _5: std::io::Stdout;

    bb0: {
        _5 = std::io::stdout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::io::Stdout as std::io::Write>::by_ref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_rcode::{closure#31}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::SetForegroundColor;
    let mut _4: crossterm::style::Color;

    bb0: {
        _4 = Red;
        _3 = SetForegroundColor(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<SetForegroundColor>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#32}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    debug idx => (*(_1.0: &std::option::Option<usize>));
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::Print<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: isize;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let _15: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 0];
    let _20: [core::fmt::rt::Argument<'_>; 0];
    let mut _21: &[&str; 1];
    let mut _23: &std::option::Option<usize>;
    let mut _24: &std::option::Option<usize>;
    scope 1 {
        debug idx => _6;
        let _6: usize;
        let _7: std::string::String;
        let mut _22: &[&str; 2];
        scope 2 {
            debug res => _7;
        }
    }
    scope 3 {
        debug res => _15;
    }

    bb0: {
        _23 = deref_copy (_1.0: &std::option::Option<usize>);
        _5 = discriminant((*_23));
        switchInt(move _5) -> [1: bb1, otherwise: bb5];
    }

    bb1: {
        _24 = deref_copy (_1.0: &std::option::Option<usize>);
        _6 = (((*_24) as Some).0: usize);
        _22 = const _;
        _9 = _22 as &[&str] (PointerCoercion(Unsize));
        _14 = &_6;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = format(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = move _7;
        goto -> bb9;
    }

    bb5: {
        _21 = const _;
        _17 = _21 as &[&str] (PointerCoercion(Unsize));
        _20 = core::fmt::rt::Argument::<'_>::none() -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = format(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _4 = move _15;
        goto -> bb9;
    }

    bb9: {
        _3 = Print::<std::string::String>(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Print<std::string::String>>(_2, move _3) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

promoted[0] in print_rcode::{closure#32}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "(Packet Error)\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_rcode::{closure#32}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "(", const ") (Packet Error)\n"];
        _0 = &_1;
        return;
    }
}

fn print_rcode::{closure#33}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;

    bb0: {
        _0 = <std::io::Stdout as QueueableCommand>::queue::<ResetColor>(_2, const ResetColor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#34}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn print_rcode::{closure#30}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;
    let mut _5: std::io::Stdout;

    bb0: {
        _5 = std::io::stdout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::io::Stdout as std::io::Write>::by_ref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_rcode::{closure#36}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::SetForegroundColor;
    let mut _4: crossterm::style::Color;

    bb0: {
        _4 = Red;
        _3 = SetForegroundColor(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<SetForegroundColor>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#37}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    debug idx => (*(_1.0: &std::option::Option<usize>));
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::Print<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: isize;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let _15: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 0];
    let _20: [core::fmt::rt::Argument<'_>; 0];
    let mut _21: &[&str; 1];
    let mut _23: &std::option::Option<usize>;
    let mut _24: &std::option::Option<usize>;
    scope 1 {
        debug idx => _6;
        let _6: usize;
        let _7: std::string::String;
        let mut _22: &[&str; 2];
        scope 2 {
            debug res => _7;
        }
    }
    scope 3 {
        debug res => _15;
    }

    bb0: {
        _23 = deref_copy (_1.0: &std::option::Option<usize>);
        _5 = discriminant((*_23));
        switchInt(move _5) -> [1: bb1, otherwise: bb5];
    }

    bb1: {
        _24 = deref_copy (_1.0: &std::option::Option<usize>);
        _6 = (((*_24) as Some).0: usize);
        _22 = const _;
        _9 = _22 as &[&str] (PointerCoercion(Unsize));
        _14 = &_6;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = format(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = move _7;
        goto -> bb9;
    }

    bb5: {
        _21 = const _;
        _17 = _21 as &[&str] (PointerCoercion(Unsize));
        _20 = core::fmt::rt::Argument::<'_>::none() -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = format(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _4 = move _15;
        goto -> bb9;
    }

    bb9: {
        _3 = Print::<std::string::String>(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Print<std::string::String>>(_2, move _3) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

promoted[0] in print_rcode::{closure#37}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "(Server Error)\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_rcode::{closure#37}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "(", const ") (Server Error)\n"];
        _0 = &_1;
        return;
    }
}

fn print_rcode::{closure#38}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;

    bb0: {
        _0 = <std::io::Stdout as QueueableCommand>::queue::<ResetColor>(_2, const ResetColor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#39}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn print_rcode::{closure#35}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;
    let mut _5: std::io::Stdout;

    bb0: {
        _5 = std::io::stdout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::io::Stdout as std::io::Write>::by_ref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_rcode::{closure#41}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::SetForegroundColor;
    let mut _4: crossterm::style::Color;

    bb0: {
        _4 = Red;
        _3 = SetForegroundColor(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<SetForegroundColor>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#42}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    debug idx => (*(_1.0: &std::option::Option<usize>));
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::Print<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: isize;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let _15: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 0];
    let _20: [core::fmt::rt::Argument<'_>; 0];
    let mut _21: &[&str; 1];
    let mut _23: &std::option::Option<usize>;
    let mut _24: &std::option::Option<usize>;
    scope 1 {
        debug idx => _6;
        let _6: usize;
        let _7: std::string::String;
        let mut _22: &[&str; 2];
        scope 2 {
            debug res => _7;
        }
    }
    scope 3 {
        debug res => _15;
    }

    bb0: {
        _23 = deref_copy (_1.0: &std::option::Option<usize>);
        _5 = discriminant((*_23));
        switchInt(move _5) -> [1: bb1, otherwise: bb5];
    }

    bb1: {
        _24 = deref_copy (_1.0: &std::option::Option<usize>);
        _6 = (((*_24) as Some).0: usize);
        _22 = const _;
        _9 = _22 as &[&str] (PointerCoercion(Unsize));
        _14 = &_6;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = format(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = move _7;
        goto -> bb9;
    }

    bb5: {
        _21 = const _;
        _17 = _21 as &[&str] (PointerCoercion(Unsize));
        _20 = core::fmt::rt::Argument::<'_>::none() -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = format(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _4 = move _15;
        goto -> bb9;
    }

    bb9: {
        _3 = Print::<std::string::String>(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Print<std::string::String>>(_2, move _3) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

promoted[0] in print_rcode::{closure#42}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "(Unknown data type)\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_rcode::{closure#42}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "(", const ") (Unknown data type)\n"];
        _0 = &_1;
        return;
    }
}

fn print_rcode::{closure#43}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;

    bb0: {
        _0 = <std::io::Stdout as QueueableCommand>::queue::<ResetColor>(_2, const ResetColor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#44}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn print_rcode::{closure#40}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;
    let mut _5: std::io::Stdout;

    bb0: {
        _5 = std::io::stdout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::io::Stdout as std::io::Write>::by_ref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_rcode::{closure#46}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::SetForegroundColor;
    let mut _4: crossterm::style::Color;

    bb0: {
        _4 = Red;
        _3 = SetForegroundColor(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<SetForegroundColor>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#47}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    debug idx => (*(_1.0: &std::option::Option<usize>));
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;
    let mut _3: crossterm::style::Print<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: isize;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let _15: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 0];
    let _20: [core::fmt::rt::Argument<'_>; 0];
    let mut _21: &[&str; 1];
    let mut _23: &std::option::Option<usize>;
    let mut _24: &std::option::Option<usize>;
    scope 1 {
        debug idx => _6;
        let _6: usize;
        let _7: std::string::String;
        let mut _22: &[&str; 2];
        scope 2 {
            debug res => _7;
        }
    }
    scope 3 {
        debug res => _15;
    }

    bb0: {
        _23 = deref_copy (_1.0: &std::option::Option<usize>);
        _5 = discriminant((*_23));
        switchInt(move _5) -> [1: bb1, otherwise: bb5];
    }

    bb1: {
        _24 = deref_copy (_1.0: &std::option::Option<usize>);
        _6 = (((*_24) as Some).0: usize);
        _22 = const _;
        _9 = _22 as &[&str] (PointerCoercion(Unsize));
        _14 = &_6;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = format(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = move _7;
        goto -> bb9;
    }

    bb5: {
        _21 = const _;
        _17 = _21 as &[&str] (PointerCoercion(Unsize));
        _20 = core::fmt::rt::Argument::<'_>::none() -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = format(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _4 = move _15;
        goto -> bb9;
    }

    bb9: {
        _3 = Print::<std::string::String>(move _4);
        _0 = <std::io::Stdout as QueueableCommand>::queue::<Print<std::string::String>>(_2, move _3) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

promoted[0] in print_rcode::{closure#47}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "(Unknown error)\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_rcode::{closure#47}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "(", const ") (Unknown error)\n"];
        _0 = &_1;
        return;
    }
}

fn print_rcode::{closure#48}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:66:25: 66:33}, _2: &mut std::io::Stdout) -> Result<&mut std::io::Stdout, std::io::Error> {
    debug writer => _2;
    let mut _0: std::result::Result<&mut std::io::Stdout, std::io::Error>;

    bb0: {
        _0 = <std::io::Stdout as QueueableCommand>::queue::<ResetColor>(_2, const ResetColor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_rcode::{closure#49}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:67:18: 67:21}, _2: &mut std::io::Stdout) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn print_rcode::{closure#45}(_1: {closure@/home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossterm-0.21.0/src/macros.rs:119:23: 119:27}, _2: ()) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: &mut std::io::Stdout;
    let mut _4: &mut std::io::Stdout;
    let mut _5: std::io::Stdout;

    bb0: {
        _5 = std::io::stdout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::io::Stdout as std::io::Write>::by_ref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::io::Stdout as std::io::Write>::flush(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_bin_array(_1: Vec<Option<Vec<u8>>>) -> () {
    debug bin_array => _1;
    let mut _0: ();
    let mut _2: std::iter::Enumerate<std::vec::IntoIter<std::option::Option<std::vec::Vec<u8>>>>;
    let mut _3: std::vec::IntoIter<std::option::Option<std::vec::Vec<u8>>>;

    bb0: {
        _3 = <Vec<Option<Vec<u8>>> as IntoIterator>::into_iter(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <std::vec::IntoIter<Option<Vec<u8>>> as Iterator>::enumerate(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <Enumerate<std::vec::IntoIter<Option<Vec<u8>>>> as Iterator>::for_each::<{closure@cli/src/runner.rs:194:48: 194:61}>(move _2, const ZeroSized: {closure@cli/src/runner.rs:194:48: 194:61}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_bin_array::{closure#0}(_1: &mut {closure@cli/src/runner.rs:194:48: 194:61}, _2: (usize, Option<Vec<u8>>)) -> () {
    let mut _0: ();
    let _3: usize;
    let _4: std::option::Option<std::vec::Vec<u8>>;
    let mut _6: (usize, bool);
    let mut _7: isize;
    let _9: ();
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 2];
    let _14: [core::fmt::rt::Argument<'_>; 2];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &usize;
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &runner::BinaryData;
    let _19: runner::BinaryData;
    let mut _20: std::vec::Vec<u8>;
    let mut _21: skytable::RespCode;
    let mut _22: std::option::Option<usize>;
    let mut _23: usize;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: isize;
    scope 1 {
        debug idx => _3;
        debug elem => _4;
        let _5: usize;
        scope 2 {
            debug idx => _5;
            let _8: std::vec::Vec<u8>;
            scope 3 {
                debug ele => _8;
                let mut _24: &[&str; 3];
            }
        }
    }

    bb0: {
        _25 = const false;
        _26 = const false;
        _3 = (_2.0: usize);
        _26 = const true;
        _4 = move (_2.1: std::option::Option<std::vec::Vec<u8>>);
        _6 = CheckedAdd(_3, const 1_usize);
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_usize) -> [success: bb1, unwind: bb17];
    }

    bb1: {
        _5 = move (_6.0: usize);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _21 = skytable::RespCode::NotFound;
        _23 = _5;
        _22 = Option::<usize>::Some(move _23);
        _0 = print_rcode(move _21, move _22) -> [return: bb18, unwind: bb17];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _26 = const false;
        _25 = const true;
        _8 = move ((_4 as Some).0: std::vec::Vec<u8>);
        _24 = const _;
        _11 = _24 as &[&str] (PointerCoercion(Unsize));
        _16 = &_5;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_16) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _25 = const false;
        _20 = move _8;
        _19 = BinaryData(move _20);
        _18 = &_19;
        _17 = core::fmt::rt::Argument::<'_>::new_display::<BinaryData>(_18) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _14 = [move _15, move _17];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _10 = Arguments::<'_>::new_v1(move _11, move _12) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _9 = _print(move _10) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_19) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _25 = const false;
        goto -> bb10;
    }

    bb10: {
        _26 = const false;
        return;
    }

    bb11 (cleanup): {
        drop(_19) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_25) -> [0: bb17, otherwise: bb13];
    }

    bb15 (cleanup): {
        switchInt(_26) -> [0: bb12, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop(((_4 as Some).0: std::vec::Vec<u8>)) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _27 = discriminant(_4);
        switchInt(move _27) -> [1: bb15, otherwise: bb12];
    }

    bb18: {
        goto -> bb10;
    }
}

promoted[0] in print_bin_array::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "(", const ") ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn print_str_array(_1: Vec<Option<std::string::String>>) -> () {
    debug str_array => _1;
    let mut _0: ();
    let mut _2: std::iter::Enumerate<std::vec::IntoIter<std::option::Option<std::string::String>>>;
    let mut _3: std::vec::IntoIter<std::option::Option<std::string::String>>;

    bb0: {
        _3 = <Vec<Option<std::string::String>> as IntoIterator>::into_iter(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <std::vec::IntoIter<Option<std::string::String>> as Iterator>::enumerate(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <Enumerate<std::vec::IntoIter<Option<std::string::String>>> as Iterator>::for_each::<{closure@cli/src/runner.rs:206:48: 206:61}>(move _2, const ZeroSized: {closure@cli/src/runner.rs:206:48: 206:61}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn print_str_array::{closure#0}(_1: &mut {closure@cli/src/runner.rs:206:48: 206:61}, _2: (usize, Option<std::string::String>)) -> () {
    let mut _0: ();
    let _3: usize;
    let _4: std::option::Option<std::string::String>;
    let mut _6: (usize, bool);
    let mut _7: isize;
    let _9: ();
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 2];
    let _14: [core::fmt::rt::Argument<'_>; 2];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &usize;
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &std::string::String;
    let mut _19: skytable::RespCode;
    let mut _20: std::option::Option<usize>;
    let mut _21: usize;
    let mut _23: bool;
    let mut _24: isize;
    scope 1 {
        debug idx => _3;
        debug elem => _4;
        let _5: usize;
        scope 2 {
            debug idx => _5;
            let _8: std::string::String;
            scope 3 {
                debug ele => _8;
                let mut _22: &[&str; 3];
            }
        }
    }

    bb0: {
        _23 = const false;
        _3 = (_2.0: usize);
        _23 = const true;
        _4 = move (_2.1: std::option::Option<std::string::String>);
        _6 = CheckedAdd(_3, const 1_usize);
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_usize) -> [success: bb1, unwind: bb14];
    }

    bb1: {
        _5 = move (_6.0: usize);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _19 = skytable::RespCode::NotFound;
        _21 = _5;
        _20 = Option::<usize>::Some(move _21);
        _0 = print_rcode(move _19, move _20) -> [return: bb15, unwind: bb14];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _23 = const false;
        _8 = move ((_4 as Some).0: std::string::String);
        _22 = const _;
        _11 = _22 as &[&str] (PointerCoercion(Unsize));
        _16 = &_5;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_16) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _18 = &_8;
        _17 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_18) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _14 = [move _15, move _17];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _10 = Arguments::<'_>::new_v1(move _11, move _12) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _9 = _print(move _10) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_8) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _23 = const false;
        return;
    }

    bb10 (cleanup): {
        drop(_8) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        switchInt(_23) -> [0: bb11, otherwise: bb13];
    }

    bb13 (cleanup): {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        _24 = discriminant(_4);
        switchInt(move _24) -> [1: bb12, otherwise: bb11];
    }

    bb15: {
        goto -> bb9;
    }
}

promoted[0] in print_str_array::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "(", const ") \"", const "\"\n"];
        _0 = &_1;
        return;
    }
}

fn write_flat_array(_1: Vec<FlatElement>) -> () {
    debug flat_array => _1;
    let mut _0: ();
    let mut _2: std::iter::Enumerate<std::vec::IntoIter<skytable::types::FlatElement>>;
    let mut _3: std::iter::Enumerate<std::vec::IntoIter<skytable::types::FlatElement>>;
    let mut _4: std::vec::IntoIter<skytable::types::FlatElement>;
    let mut _5: std::iter::Enumerate<std::vec::IntoIter<skytable::types::FlatElement>>;
    let _6: ();
    let mut _7: std::option::Option<(usize, skytable::types::FlatElement)>;
    let mut _8: &mut std::iter::Enumerate<std::vec::IntoIter<skytable::types::FlatElement>>;
    let mut _9: isize;
    let mut _13: (usize, bool);
    let mut _14: isize;
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 2];
    let _21: [core::fmt::rt::Argument<'_>; 2];
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &usize;
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &std::string::String;
    let _27: ();
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let mut _30: &[core::fmt::rt::Argument<'_>];
    let _31: &[core::fmt::rt::Argument<'_>; 2];
    let _32: [core::fmt::rt::Argument<'_>; 2];
    let mut _33: core::fmt::rt::Argument<'_>;
    let _34: &usize;
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &runner::BinaryData;
    let _37: runner::BinaryData;
    let mut _38: std::vec::Vec<u8>;
    let mut _40: std::option::Option<usize>;
    let mut _41: usize;
    let _43: ();
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 2];
    let _48: [core::fmt::rt::Argument<'_>; 2];
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &u64;
    let mut _51: core::fmt::rt::Argument<'_>;
    let _52: &usize;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: isize;
    let mut _61: isize;
    scope 1 {
        debug iter => _5;
        let _10: usize;
        let _11: skytable::types::FlatElement;
        scope 2 {
            debug idx => _10;
            debug item => _11;
            let _12: usize;
            scope 3 {
                debug idx => _12;
                let _15: std::string::String;
                let _26: std::vec::Vec<u8>;
                let _39: skytable::RespCode;
                let _42: u64;
                scope 4 {
                    debug st => _15;
                    let mut _55: &[&str; 3];
                }
                scope 5 {
                    debug st => _26;
                    let mut _54: &[&str; 3];
                }
                scope 6 {
                    debug rc => _39;
                }
                scope 7 {
                    debug int => _42;
                    let mut _53: &[&str; 3];
                }
            }
        }
    }

    bb0: {
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _4 = <Vec<FlatElement> as IntoIterator>::into_iter(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::vec::IntoIter<FlatElement> as Iterator>::enumerate(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <Enumerate<std::vec::IntoIter<FlatElement>> as IntoIterator>::into_iter(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = move _2;
        goto -> bb4;
    }

    bb4: {
        _8 = &mut _5;
        _7 = <Enumerate<std::vec::IntoIter<FlatElement>> as Iterator>::next(_8) -> [return: bb5, unwind: bb30];
    }

    bb5: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _10 = (((_7 as Some).0: (usize, skytable::types::FlatElement)).0: usize);
        _56 = const true;
        _57 = const true;
        _58 = const true;
        _11 = move (((_7 as Some).0: (usize, skytable::types::FlatElement)).1: skytable::types::FlatElement);
        _13 = CheckedAdd(_10, const 1_usize);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb9, unwind: bb47];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        drop(_5) -> [return: bb27, unwind continue];
    }

    bb9: {
        _12 = move (_13.0: usize);
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb10, 1: bb15, 2: bb21, 3: bb22, otherwise: bb7];
    }

    bb10: {
        _58 = const false;
        _15 = move ((_11 as String).0: std::string::String);
        _55 = const _;
        _18 = _55 as &[&str] (PointerCoercion(Unsize));
        _23 = &_12;
        _22 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_23) -> [return: bb11, unwind: bb29];
    }

    bb11: {
        _25 = &_15;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_25) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _21 = [move _22, move _24];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb13, unwind: bb29];
    }

    bb13: {
        _16 = _print(move _17) -> [return: bb14, unwind: bb29];
    }

    bb14: {
        drop(_15) -> [return: bb26, unwind: bb47];
    }

    bb15: {
        _57 = const false;
        _59 = const true;
        _26 = move ((_11 as Binstr).0: std::vec::Vec<u8>);
        _54 = const _;
        _29 = _54 as &[&str] (PointerCoercion(Unsize));
        _34 = &_12;
        _33 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_34) -> [return: bb16, unwind: bb40];
    }

    bb16: {
        _59 = const false;
        _38 = move _26;
        _37 = BinaryData(move _38);
        _36 = &_37;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<BinaryData>(_36) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _32 = [move _33, move _35];
        _31 = &_32;
        _30 = _31 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _28 = Arguments::<'_>::new_v1(move _29, move _30) -> [return: bb18, unwind: bb28];
    }

    bb18: {
        _27 = _print(move _28) -> [return: bb19, unwind: bb28];
    }

    bb19: {
        drop(_37) -> [return: bb20, unwind: bb40];
    }

    bb20: {
        _59 = const false;
        goto -> bb26;
    }

    bb21: {
        _56 = const false;
        _39 = move ((_11 as RespCode).0: skytable::RespCode);
        _41 = _12;
        _40 = Option::<usize>::Some(move _41);
        _6 = print_rcode(move _39, move _40) -> [return: bb48, unwind: bb47];
    }

    bb22: {
        _42 = ((_11 as UnsignedInt).0: u64);
        _53 = const _;
        _45 = _53 as &[&str] (PointerCoercion(Unsize));
        _50 = &_42;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_50) -> [return: bb23, unwind: bb47];
    }

    bb23: {
        _52 = &_12;
        _51 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_52) -> [return: bb24, unwind: bb47];
    }

    bb24: {
        _48 = [move _49, move _51];
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _44 = Arguments::<'_>::new_v1(move _45, move _46) -> [return: bb25, unwind: bb47];
    }

    bb25: {
        _43 = _print(move _44) -> [return: bb49, unwind: bb47];
    }

    bb26: {
        _60 = discriminant(_11);
        switchInt(move _60) -> [0: bb33, 1: bb35, 2: bb37, otherwise: bb32];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_37) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_15) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_5) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32: {
        _56 = const false;
        _57 = const false;
        _58 = const false;
        goto -> bb4;
    }

    bb33: {
        switchInt(_58) -> [0: bb32, otherwise: bb34];
    }

    bb34: {
        drop(((_11 as String).0: std::string::String)) -> [return: bb32, unwind: bb30];
    }

    bb35: {
        switchInt(_57) -> [0: bb32, otherwise: bb36];
    }

    bb36: {
        drop(((_11 as Binstr).0: std::vec::Vec<u8>)) -> [return: bb32, unwind: bb30];
    }

    bb37: {
        switchInt(_56) -> [0: bb32, otherwise: bb38];
    }

    bb38: {
        drop(((_11 as RespCode).0: skytable::RespCode)) -> [return: bb32, unwind: bb30];
    }

    bb39 (cleanup): {
        drop(_26) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_59) -> [0: bb47, otherwise: bb39];
    }

    bb41 (cleanup): {
        switchInt(_58) -> [0: bb30, otherwise: bb42];
    }

    bb42 (cleanup): {
        drop(((_11 as String).0: std::string::String)) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_57) -> [0: bb30, otherwise: bb44];
    }

    bb44 (cleanup): {
        drop(((_11 as Binstr).0: std::vec::Vec<u8>)) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_56) -> [0: bb30, otherwise: bb46];
    }

    bb46 (cleanup): {
        drop(((_11 as RespCode).0: skytable::RespCode)) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        _61 = discriminant(_11);
        switchInt(move _61) -> [0: bb41, 1: bb43, 2: bb45, otherwise: bb30];
    }

    bb48: {
        goto -> bb26;
    }

    bb49: {
        goto -> bb26;
    }
}

promoted[0] in write_flat_array: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "[SKYSH ERROR] Element typed cannot yet be parsed\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in write_flat_array: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "(", const ") \"", const "\"\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in write_flat_array: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "(", const ") ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in write_flat_array: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "(", const ") \"", const "\"\n"];
        _0 = &_1;
        return;
    }
}

fn print_array(_1: Vec<Element>) -> () {
    debug array => _1;
    let mut _0: ();
    let mut _2: std::iter::Enumerate<std::vec::IntoIter<skytable::Element>>;
    let mut _3: std::iter::Enumerate<std::vec::IntoIter<skytable::Element>>;
    let mut _4: std::vec::IntoIter<skytable::Element>;
    let mut _5: std::iter::Enumerate<std::vec::IntoIter<skytable::Element>>;
    let _6: ();
    let mut _7: std::option::Option<(usize, skytable::Element)>;
    let mut _8: &mut std::iter::Enumerate<std::vec::IntoIter<skytable::Element>>;
    let mut _9: isize;
    let mut _13: (usize, bool);
    let mut _14: isize;
    let mut _15: isize;
    let _17: ();
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 2];
    let _22: [core::fmt::rt::Argument<'_>; 2];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &usize;
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &std::string::String;
    let mut _28: std::option::Option<usize>;
    let mut _29: usize;
    let _31: ();
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let _35: &[core::fmt::rt::Argument<'_>; 2];
    let _36: [core::fmt::rt::Argument<'_>; 2];
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &usize;
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &u64;
    let _43: ();
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 0];
    let _48: [core::fmt::rt::Argument<'_>; 0];
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    scope 1 {
        debug iter => _5;
        let _10: usize;
        let _11: skytable::Element;
        scope 2 {
            debug idx => _10;
            debug item => _11;
            let _12: usize;
            scope 3 {
                debug idx => _12;
                let _16: std::string::String;
                let _27: skytable::RespCode;
                let _30: u64;
                let _41: std::vec::Vec<std::option::Option<std::vec::Vec<u8>>>;
                let _42: std::vec::Vec<std::option::Option<std::string::String>>;
                let mut _49: &[&str; 1];
                scope 4 {
                    debug st => _16;
                    let mut _51: &[&str; 3];
                }
                scope 5 {
                    debug rc => _27;
                }
                scope 6 {
                    debug int => _30;
                    let mut _50: &[&str; 3];
                }
                scope 7 {
                    debug brr => _41;
                }
                scope 8 {
                    debug srr => _42;
                }
            }
        }
    }

    bb0: {
        _56 = const false;
        _55 = const false;
        _52 = const false;
        _54 = const false;
        _53 = const false;
        _4 = <Vec<Element> as IntoIterator>::into_iter(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::vec::IntoIter<Element> as Iterator>::enumerate(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <Enumerate<std::vec::IntoIter<Element>> as IntoIterator>::into_iter(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = move _2;
        goto -> bb4;
    }

    bb4: {
        _8 = &mut _5;
        _7 = <Enumerate<std::vec::IntoIter<Element>> as Iterator>::next(_8) -> [return: bb5, unwind: bb29];
    }

    bb5: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _10 = (((_7 as Some).0: (usize, skytable::Element)).0: usize);
        _52 = const true;
        _53 = const true;
        _54 = const true;
        _55 = const true;
        _56 = const true;
        _11 = move (((_7 as Some).0: (usize, skytable::Element)).1: skytable::Element);
        _13 = CheckedAdd(_10, const 1_usize);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb9, unwind: bb57];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        drop(_5) -> [return: bb27, unwind continue];
    }

    bb9: {
        _12 = move (_13.0: usize);
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb10, 1: bb12, 3: bb18, 4: bb17, otherwise: bb11];
    }

    bb10: {
        _14 = discriminant(((_11 as Array).0: skytable::types::Array));
        switchInt(move _14) -> [0: bb22, 1: bb23, otherwise: bb11];
    }

    bb11: {
        _49 = const _;
        _45 = _49 as &[&str] (PointerCoercion(Unsize));
        _48 = core::fmt::rt::Argument::<'_>::none() -> [return: bb24, unwind: bb57];
    }

    bb12: {
        _56 = const false;
        _16 = move ((_11 as String).0: std::string::String);
        _51 = const _;
        _19 = _51 as &[&str] (PointerCoercion(Unsize));
        _24 = &_12;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_24) -> [return: bb13, unwind: bb28];
    }

    bb13: {
        _26 = &_16;
        _25 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_26) -> [return: bb14, unwind: bb28];
    }

    bb14: {
        _22 = [move _23, move _25];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _18 = Arguments::<'_>::new_v1(move _19, move _20) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        _17 = _print(move _18) -> [return: bb16, unwind: bb28];
    }

    bb16: {
        drop(_16) -> [return: bb26, unwind: bb57];
    }

    bb17: {
        _55 = const false;
        _27 = move ((_11 as RespCode).0: skytable::RespCode);
        _29 = _12;
        _28 = Option::<usize>::Some(move _29);
        _6 = print_rcode(move _27, move _28) -> [return: bb58, unwind: bb57];
    }

    bb18: {
        _30 = ((_11 as UnsignedInt).0: u64);
        _50 = const _;
        _33 = _50 as &[&str] (PointerCoercion(Unsize));
        _38 = &_12;
        _37 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_38) -> [return: bb19, unwind: bb57];
    }

    bb19: {
        _40 = &_30;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_40) -> [return: bb20, unwind: bb57];
    }

    bb20: {
        _36 = [move _37, move _39];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _34) -> [return: bb21, unwind: bb57];
    }

    bb21: {
        _31 = _print(move _32) -> [return: bb59, unwind: bb57];
    }

    bb22: {
        _54 = const false;
        _41 = move ((((_11 as Array).0: skytable::types::Array) as Bin).0: std::vec::Vec<std::option::Option<std::vec::Vec<u8>>>);
        _6 = print_bin_array(move _41) -> [return: bb60, unwind: bb57];
    }

    bb23: {
        _53 = const false;
        _42 = move ((((_11 as Array).0: skytable::types::Array) as Str).0: std::vec::Vec<std::option::Option<std::string::String>>);
        _6 = print_str_array(move _42) -> [return: bb61, unwind: bb57];
    }

    bb24: {
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _44 = Arguments::<'_>::new_v1(move _45, move _46) -> [return: bb25, unwind: bb57];
    }

    bb25: {
        _43 = _eprint(move _44) -> [return: bb62, unwind: bb57];
    }

    bb26: {
        _58 = discriminant(_11);
        switchInt(move _58) -> [0: bb32, 1: bb40, 4: bb42, otherwise: bb44];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_16) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_5) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }

    bb31: {
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        goto -> bb4;
    }

    bb32: {
        switchInt(_52) -> [0: bb33, otherwise: bb39];
    }

    bb33: {
        _52 = const false;
        goto -> bb31;
    }

    bb34: {
        switchInt(_54) -> [0: bb33, otherwise: bb35];
    }

    bb35: {
        drop(((((_11 as Array).0: skytable::types::Array) as Bin).0: std::vec::Vec<std::option::Option<std::vec::Vec<u8>>>)) -> [return: bb33, unwind: bb29];
    }

    bb36: {
        switchInt(_53) -> [0: bb33, otherwise: bb37];
    }

    bb37: {
        drop(((((_11 as Array).0: skytable::types::Array) as Str).0: std::vec::Vec<std::option::Option<std::string::String>>)) -> [return: bb33, unwind: bb29];
    }

    bb38: {
        drop(((_11 as Array).0: skytable::types::Array)) -> [return: bb33, unwind: bb29];
    }

    bb39: {
        _57 = discriminant(((_11 as Array).0: skytable::types::Array));
        switchInt(move _57) -> [0: bb34, 1: bb36, otherwise: bb38];
    }

    bb40: {
        switchInt(_56) -> [0: bb31, otherwise: bb41];
    }

    bb41: {
        drop(((_11 as String).0: std::string::String)) -> [return: bb31, unwind: bb29];
    }

    bb42: {
        switchInt(_55) -> [0: bb31, otherwise: bb43];
    }

    bb43: {
        drop(((_11 as RespCode).0: skytable::RespCode)) -> [return: bb31, unwind: bb29];
    }

    bb44: {
        drop(_11) -> [return: bb31, unwind: bb29];
    }

    bb45 (cleanup): {
        switchInt(_52) -> [0: bb29, otherwise: bb51];
    }

    bb46 (cleanup): {
        switchInt(_54) -> [0: bb29, otherwise: bb47];
    }

    bb47 (cleanup): {
        drop(((((_11 as Array).0: skytable::types::Array) as Bin).0: std::vec::Vec<std::option::Option<std::vec::Vec<u8>>>)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_53) -> [0: bb29, otherwise: bb49];
    }

    bb49 (cleanup): {
        drop(((((_11 as Array).0: skytable::types::Array) as Str).0: std::vec::Vec<std::option::Option<std::string::String>>)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(((_11 as Array).0: skytable::types::Array)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        _59 = discriminant(((_11 as Array).0: skytable::types::Array));
        switchInt(move _59) -> [0: bb46, 1: bb48, otherwise: bb50];
    }

    bb52 (cleanup): {
        switchInt(_56) -> [0: bb29, otherwise: bb53];
    }

    bb53 (cleanup): {
        drop(((_11 as String).0: std::string::String)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_55) -> [0: bb29, otherwise: bb55];
    }

    bb55 (cleanup): {
        drop(((_11 as RespCode).0: skytable::RespCode)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_11) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        _60 = discriminant(_11);
        switchInt(move _60) -> [0: bb45, 1: bb52, 4: bb54, otherwise: bb56];
    }

    bb58: {
        goto -> bb26;
    }

    bb59: {
        goto -> bb26;
    }

    bb60: {
        goto -> bb26;
    }

    bb61: {
        goto -> bb26;
    }

    bb62: {
        goto -> bb26;
    }
}

promoted[0] in print_array: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "[SKYSH ERROR] Nested arrays cannot be printed just yet\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_array: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "(", const ") \"", const "\"\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in print_array: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "(", const ") \"", const "\"\n"];
        _0 = &_1;
        return;
    }
}

fn runner::<impl at cli/src/runner.rs:248:1: 248:33>::fmt(_1: &BinaryData, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _4: std::result::Result<(), std::fmt::Error>;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: isize;
    let mut _8: std::slice::Iter<'_, u8>;
    let mut _9: std::slice::Iter<'_, u8>;
    let _10: &[u8];
    let mut _11: &std::vec::Vec<u8>;
    let mut _12: std::slice::Iter<'_, u8>;
    let mut _13: std::option::Option<&u8>;
    let mut _14: &mut std::slice::Iter<'_, u8>;
    let mut _15: isize;
    let mut _18: u8;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _20: std::result::Result<(), std::fmt::Error>;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: isize;
    let mut _24: u8;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _26: std::result::Result<(), std::fmt::Error>;
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: isize;
    let mut _30: u8;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _32: std::result::Result<(), std::fmt::Error>;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: isize;
    let mut _36: u8;
    let mut _37: u8;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _39: std::result::Result<(), std::fmt::Error>;
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: [core::fmt::rt::Argument<'_>; 1];
    let mut _45: core::fmt::rt::Argument<'_>;
    let _46: &char;
    let _47: char;
    let mut _48: u8;
    let mut _49: isize;
    let mut _50: u8;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _52: std::result::Result<(), std::fmt::Error>;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: isize;
    let mut _56: bool;
    let mut _57: u8;
    let mut _58: bool;
    let mut _59: u8;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _61: std::result::Result<(), std::fmt::Error>;
    let mut _62: std::fmt::Arguments<'_>;
    let mut _63: &[&str];
    let mut _64: &[core::fmt::rt::Argument<'_>];
    let _65: &[core::fmt::rt::Argument<'_>; 1];
    let _66: [core::fmt::rt::Argument<'_>; 1];
    let mut _67: core::fmt::rt::Argument<'_>;
    let _68: &char;
    let _69: char;
    let mut _70: u8;
    let mut _71: isize;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _73: std::result::Result<(), std::fmt::Error>;
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[core::fmt::rt::Argument<'_>];
    let _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: [core::fmt::rt::Argument<'_>; 1];
    let mut _79: core::fmt::rt::Argument<'_>;
    let _80: &u8;
    let mut _81: &[core::fmt::rt::Placeholder];
    let _82: &[core::fmt::rt::Placeholder; 1];
    let _83: [core::fmt::rt::Placeholder; 1];
    let mut _84: core::fmt::rt::Placeholder;
    let mut _85: core::fmt::rt::Alignment;
    let mut _86: core::fmt::rt::Count;
    let mut _87: core::fmt::rt::Count;
    let mut _88: core::fmt::rt::UnsafeArg;
    let mut _89: isize;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _91: std::result::Result<(), std::fmt::Error>;
    let mut _92: std::fmt::Arguments<'_>;
    let mut _93: &[&str];
    let mut _94: isize;
    let mut _102: &[&str; 1];
    let mut _103: &[&str; 1];
    scope 1 {
        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug iter => _12;
        let _16: &u8;
        scope 6 {
            debug b => _16;
            let _17: u8;
            scope 7 {
                debug b => _17;
                scope 8 {
                    let mut _95: &[&str; 1];
                    let mut _96: &[&str; 1];
                    let mut _97: &[&str; 1];
                    let mut _98: &[&str; 1];
                    let mut _99: &[&str; 1];
                    let mut _100: &[&str; 1];
                    let mut _101: &[&str; 1];
                    scope 9 {
                        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => const ();
                        scope 12 {
                        }
                    }
                    scope 13 {
                        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => const ();
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
                        scope 18 {
                        }
                    }
                    scope 19 {
                        debug val => const ();
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug val => const ();
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => const ();
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => const ();
                        scope 32 {
                        }
                    }
                    scope 33 {
                    }
                    scope 34 {
                        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
                        scope 35 {
                        }
                    }
                    scope 36 {
                        debug val => const ();
                        scope 37 {
                        }
                    }
                }
            }
        }
    }
    scope 38 {
        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
        scope 39 {
        }
    }
    scope 40 {
        debug val => const ();
        scope 41 {
        }
    }

    bb0: {
        _103 = const _;
        _6 = _103 as &[&str] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_const(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Formatter::<'_>::write_fmt(_2, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <Result<(), std::fmt::Error> as Try>::branch(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _11 = &((*_1).0: std::vec::Vec<u8>);
        _10 = <Vec<u8> as Deref>::deref(move _11) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb66, unwind continue];
    }

    bb7: {
        _9 = core::slice::<impl [u8]>::iter(_10) -> [return: bb8, unwind continue];
    }

    bb8: {
        _8 = <std::slice::Iter<'_, u8> as IntoIterator>::into_iter(move _9) -> [return: bb9, unwind continue];
    }

    bb9: {
        _12 = move _8;
        goto -> bb10;
    }

    bb10: {
        _14 = &mut _12;
        _13 = <std::slice::Iter<'_, u8> as Iterator>::next(_14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb5];
    }

    bb12: {
        _16 = ((_13 as Some).0: &u8);
        _17 = (*_16);
        _18 = _17;
        switchInt(move _18) -> [10: bb14, otherwise: bb19];
    }

    bb13: {
        _102 = const _;
        _93 = _102 as &[&str] (PointerCoercion(Unsize));
        _92 = Arguments::<'_>::new_const(move _93) -> [return: bb61, unwind continue];
    }

    bb14: {
        _95 = const _;
        _22 = _95 as &[&str] (PointerCoercion(Unsize));
        _21 = Arguments::<'_>::new_const(move _22) -> [return: bb15, unwind continue];
    }

    bb15: {
        _20 = Formatter::<'_>::write_fmt(_2, move _21) -> [return: bb16, unwind continue];
    }

    bb16: {
        _19 = <Result<(), std::fmt::Error> as Try>::branch(move _20) -> [return: bb17, unwind continue];
    }

    bb17: {
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb10, 1: bb18, otherwise: bb5];
    }

    bb18: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb66, unwind continue];
    }

    bb19: {
        _24 = _17;
        switchInt(move _24) -> [13: bb20, otherwise: bb25];
    }

    bb20: {
        _96 = const _;
        _28 = _96 as &[&str] (PointerCoercion(Unsize));
        _27 = Arguments::<'_>::new_const(move _28) -> [return: bb21, unwind continue];
    }

    bb21: {
        _26 = Formatter::<'_>::write_fmt(_2, move _27) -> [return: bb22, unwind continue];
    }

    bb22: {
        _25 = <Result<(), std::fmt::Error> as Try>::branch(move _26) -> [return: bb23, unwind continue];
    }

    bb23: {
        _29 = discriminant(_25);
        switchInt(move _29) -> [0: bb10, 1: bb24, otherwise: bb5];
    }

    bb24: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb66, unwind continue];
    }

    bb25: {
        _30 = _17;
        switchInt(move _30) -> [9: bb26, otherwise: bb31];
    }

    bb26: {
        _97 = const _;
        _34 = _97 as &[&str] (PointerCoercion(Unsize));
        _33 = Arguments::<'_>::new_const(move _34) -> [return: bb27, unwind continue];
    }

    bb27: {
        _32 = Formatter::<'_>::write_fmt(_2, move _33) -> [return: bb28, unwind continue];
    }

    bb28: {
        _31 = <Result<(), std::fmt::Error> as Try>::branch(move _32) -> [return: bb29, unwind continue];
    }

    bb29: {
        _35 = discriminant(_31);
        switchInt(move _35) -> [0: bb10, 1: bb30, otherwise: bb5];
    }

    bb30: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb66, unwind continue];
    }

    bb31: {
        _36 = _17;
        switchInt(move _36) -> [92: bb33, otherwise: bb32];
    }

    bb32: {
        _37 = _17;
        switchInt(move _37) -> [34: bb33, otherwise: bb39];
    }

    bb33: {
        _98 = const _;
        _41 = _98 as &[&str] (PointerCoercion(Unsize));
        _48 = _17;
        _47 = move _48 as char (IntToInt);
        _46 = &_47;
        _45 = core::fmt::rt::Argument::<'_>::new_display::<char>(_46) -> [return: bb34, unwind continue];
    }

    bb34: {
        _44 = [move _45];
        _43 = &_44;
        _42 = _43 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> [return: bb35, unwind continue];
    }

    bb35: {
        _39 = Formatter::<'_>::write_fmt(_2, move _40) -> [return: bb36, unwind continue];
    }

    bb36: {
        _38 = <Result<(), std::fmt::Error> as Try>::branch(move _39) -> [return: bb37, unwind continue];
    }

    bb37: {
        _49 = discriminant(_38);
        switchInt(move _49) -> [0: bb10, 1: bb38, otherwise: bb5];
    }

    bb38: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb66, unwind continue];
    }

    bb39: {
        _50 = _17;
        switchInt(move _50) -> [0: bb40, otherwise: bb45];
    }

    bb40: {
        _99 = const _;
        _54 = _99 as &[&str] (PointerCoercion(Unsize));
        _53 = Arguments::<'_>::new_const(move _54) -> [return: bb41, unwind continue];
    }

    bb41: {
        _52 = Formatter::<'_>::write_fmt(_2, move _53) -> [return: bb42, unwind continue];
    }

    bb42: {
        _51 = <Result<(), std::fmt::Error> as Try>::branch(move _52) -> [return: bb43, unwind continue];
    }

    bb43: {
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb10, 1: bb44, otherwise: bb5];
    }

    bb44: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb66, unwind continue];
    }

    bb45: {
        _57 = _17;
        _56 = Ge(move _57, const 32_u8);
        switchInt(move _56) -> [0: bb53, otherwise: bb46];
    }

    bb46: {
        _59 = _17;
        _58 = Lt(move _59, const 127_u8);
        switchInt(move _58) -> [0: bb53, otherwise: bb47];
    }

    bb47: {
        _100 = const _;
        _63 = _100 as &[&str] (PointerCoercion(Unsize));
        _70 = _17;
        _69 = move _70 as char (IntToInt);
        _68 = &_69;
        _67 = core::fmt::rt::Argument::<'_>::new_display::<char>(_68) -> [return: bb48, unwind continue];
    }

    bb48: {
        _66 = [move _67];
        _65 = &_66;
        _64 = _65 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _62 = Arguments::<'_>::new_v1(move _63, move _64) -> [return: bb49, unwind continue];
    }

    bb49: {
        _61 = Formatter::<'_>::write_fmt(_2, move _62) -> [return: bb50, unwind continue];
    }

    bb50: {
        _60 = <Result<(), std::fmt::Error> as Try>::branch(move _61) -> [return: bb51, unwind continue];
    }

    bb51: {
        _71 = discriminant(_60);
        switchInt(move _71) -> [0: bb10, 1: bb52, otherwise: bb5];
    }

    bb52: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb66, unwind continue];
    }

    bb53: {
        _101 = const _;
        _75 = _101 as &[&str] (PointerCoercion(Unsize));
        _80 = &_17;
        _79 = core::fmt::rt::Argument::<'_>::new_lower_hex::<u8>(_80) -> [return: bb54, unwind continue];
    }

    bb54: {
        _78 = [move _79];
        _77 = &_78;
        _76 = _77 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _85 = core::fmt::rt::Alignment::Unknown;
        _86 = core::fmt::rt::Count::Implied;
        _87 = core::fmt::rt::Count::Is(const 2_usize);
        _84 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _85, const 8_u32, move _86, move _87) -> [return: bb55, unwind continue];
    }

    bb55: {
        _83 = [move _84];
        _82 = &_83;
        _81 = _82 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _88 = core::fmt::rt::UnsafeArg::new() -> [return: bb56, unwind continue];
    }

    bb56: {
        _74 = Arguments::<'_>::new_v1_formatted(move _75, move _76, move _81, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb57, unwind continue];
    }

    bb57: {
        _73 = Formatter::<'_>::write_fmt(_2, move _74) -> [return: bb58, unwind continue];
    }

    bb58: {
        _72 = <Result<(), std::fmt::Error> as Try>::branch(move _73) -> [return: bb59, unwind continue];
    }

    bb59: {
        _89 = discriminant(_72);
        switchInt(move _89) -> [0: bb10, 1: bb60, otherwise: bb5];
    }

    bb60: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb66, unwind continue];
    }

    bb61: {
        _91 = Formatter::<'_>::write_fmt(_2, move _92) -> [return: bb62, unwind continue];
    }

    bb62: {
        _90 = <Result<(), std::fmt::Error> as Try>::branch(move _91) -> [return: bb63, unwind continue];
    }

    bb63: {
        _94 = discriminant(_90);
        switchInt(move _94) -> [0: bb64, 1: bb65, otherwise: bb5];
    }

    bb64: {
        _0 = Result::<(), std::fmt::Error>::Ok(const ());
        goto -> bb66;
    }

    bb65: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb66, unwind continue];
    }

    bb66: {
        return;
    }
}

promoted[0] in runner::<impl at cli/src/runner.rs:248:1: 248:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in runner::<impl at cli/src/runner.rs:248:1: 248:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\\r"];
        _0 = &_1;
        return;
    }
}

promoted[2] in runner::<impl at cli/src/runner.rs:248:1: 248:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\\t"];
        _0 = &_1;
        return;
    }
}

promoted[3] in runner::<impl at cli/src/runner.rs:248:1: 248:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\\"];
        _0 = &_1;
        return;
    }
}

promoted[4] in runner::<impl at cli/src/runner.rs:248:1: 248:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\\0"];
        _0 = &_1;
        return;
    }
}

promoted[5] in runner::<impl at cli/src/runner.rs:248:1: 248:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[6] in runner::<impl at cli/src/runner.rs:248:1: 248:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\\x"];
        _0 = &_1;
        return;
    }
}

promoted[7] in runner::<impl at cli/src/runner.rs:248:1: 248:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\""];
        _0 = &_1;
        return;
    }
}

promoted[8] in runner::<impl at cli/src/runner.rs:248:1: 248:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "b\""];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: {async block@cli/src/main.rs:34:17: 36:2};
    let _2: ();
    let mut _3: &tokio::runtime::Runtime;
    let _4: tokio::runtime::Runtime;
    let mut _5: std::result::Result<tokio::runtime::Runtime, std::io::Error>;
    let mut _6: &mut tokio::runtime::Builder;
    let mut _7: &mut tokio::runtime::Builder;
    let mut _8: tokio::runtime::Builder;
    let _9: &str;
    let mut _10: {async block@cli/src/main.rs:34:17: 36:2};
    let mut _11: bool;
    scope 1 {
        debug body => _1;
        scope 2 {
        }
    }

    bb0: {
        _11 = const false;
        _11 = const true;
        _1 = {coroutine@cli/src/main.rs:34:17: 36:2 (#0)};
        _8 = tokio::runtime::Builder::new_multi_thread() -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _7 = &mut _8;
        _6 = tokio::runtime::Builder::enable_all(move _7) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _5 = tokio::runtime::Builder::build(_6) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _9 = const "Failed building the Runtime";
        _4 = Result::<Runtime, std::io::Error>::expect(move _5, _9) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _3 = &_4;
        _11 = const false;
        _10 = move _1;
        _2 = Runtime::block_on::<{async block@cli/src/main.rs:34:17: 36:2}>(move _3, move _10) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_8) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _11 = const false;
        return;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_8) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_11) -> [0: bb10, otherwise: bb11];
    }
}

fn main::{closure#0}(_1: Pin<&mut {async block@cli/src/main.rs:34:17: 36:2}>, _2: &mut std::task::Context<'_>) -> Poll<()> {
    debug _task_context => _12;
    let mut _0: std::task::Poll<()>;
    let mut _3: {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _4: {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _5: std::task::Poll<()>;
    let mut _6: std::pin::Pin<&mut {async fn body@cli/src/argparse.rs:99:27: 139:2}>;
    let mut _7: &mut {async fn body@cli/src/argparse.rs:99:27: 139:2};
    let mut _8: &mut std::task::Context<'_>;
    let mut _9: isize;
    let mut _11: ();
    let mut _12: &mut std::task::Context<'_>;
    let mut _13: u32;
    let mut _14: &mut {async block@cli/src/main.rs:34:17: 36:2};
    let mut _15: &mut {async block@cli/src/main.rs:34:17: 36:2};
    let mut _16: &mut {async block@cli/src/main.rs:34:17: 36:2};
    let mut _17: &mut {async block@cli/src/main.rs:34:17: 36:2};
    let mut _18: &mut {async block@cli/src/main.rs:34:17: 36:2};
    let mut _19: &mut {async block@cli/src/main.rs:34:17: 36:2};
    let mut _20: &mut {async block@cli/src/main.rs:34:17: 36:2};
    let mut _21: &mut {async block@cli/src/main.rs:34:17: 36:2};
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut {async block@cli/src/main.rs:34:17: 36:2})) as variant#3).0: {async fn body@cli/src/argparse.rs:99:27: 139:2});
        let _10: ();
        scope 2 {
        }
        scope 3 {
            debug result => _10;
        }
    }

    bb0: {
        _14 = deref_copy (_1.0: &mut {async block@cli/src/main.rs:34:17: 36:2});
        _13 = discriminant((*_14));
        switchInt(move _13) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb8];
    }

    bb1: {
        _12 = move _2;
        _4 = start_repl() -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _3 = <{async fn body@cli/src/argparse.rs:99:27: 139:2} as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _15 = deref_copy (_1.0: &mut {async block@cli/src/main.rs:34:17: 36:2});
        (((*_15) as variant#3).0: {async fn body@cli/src/argparse.rs:99:27: 139:2}) = move _3;
        goto -> bb4;
    }

    bb4: {
        _16 = deref_copy (_1.0: &mut {async block@cli/src/main.rs:34:17: 36:2});
        _7 = &mut (((*_16) as variant#3).0: {async fn body@cli/src/argparse.rs:99:27: 139:2});
        _6 = Pin::<&mut {async fn body@cli/src/argparse.rs:99:27: 139:2}>::new_unchecked(_7) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _8 = _12;
        _5 = <{async fn body@cli/src/argparse.rs:99:27: 139:2} as Future>::poll(move _6, _8) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<()>::Pending;
        _17 = deref_copy (_1.0: &mut {async block@cli/src/main.rs:34:17: 36:2});
        discriminant((*_17)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _10 = ((_5 as Ready).0: ());
        _18 = deref_copy (_1.0: &mut {async block@cli/src/main.rs:34:17: 36:2});
        drop((((*_18) as variant#3).0: {async fn body@cli/src/argparse.rs:99:27: 139:2})) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        _11 = const ();
        _0 = Poll::<()>::Ready(move _11);
        _19 = deref_copy (_1.0: &mut {async block@cli/src/main.rs:34:17: 36:2});
        discriminant((*_19)) = 1;
        return;
    }

    bb11 (cleanup): {
        _20 = deref_copy (_1.0: &mut {async block@cli/src/main.rs:34:17: 36:2});
        drop((((*_20) as variant#3).0: {async fn body@cli/src/argparse.rs:99:27: 139:2})) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        _21 = deref_copy (_1.0: &mut {async block@cli/src/main.rs:34:17: 36:2});
        discriminant((*_21)) = 2;
        resume;
    }

    bb13: {
        _12 = move _2;
        goto -> bb4;
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb14, unwind continue];
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb15, unwind continue];
    }
}

fn BinaryData(_1: Vec<u8>) -> BinaryData {
    let mut _0: runner::BinaryData;

    bb0: {
        _0 = BinaryData(move _1);
        return;
    }
}

// MIR FOR CTFE
fn BinaryData(_1: Vec<u8>) -> BinaryData {
    let mut _0: runner::BinaryData;

    bb0: {
        _0 = BinaryData(move _1);
        return;
    }
}
