// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _IMPL_SERIALIZE_FOR_Step: () = {
    let mut _0: ();                      // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19

    bb0: {
        _0 = const ();                   // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
    }
}

fn _IMPL_SERIALIZE_FOR_Step::<impl at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19>::serialize(_1: &generate_block::Step, _2: __S) -> Result<<__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Error> {
    debug self => _1;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
    debug __serializer => _2;            // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
    let mut _0: std::result::Result<<__S as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Ok, <__S as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Error>; // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
    let mut _3: isize;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:28:10: 29:12

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
    }

    bb1: {
        _0 = <__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::serialize_unit_variant(move _2, const "Step", const 3_u32, const "Commit") -> bb6; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Error> {<__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        unreachable;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
    }

    bb3: {
        _0 = <__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::serialize_unit_variant(move _2, const "Step", const 0_u32, const "Propose") -> bb6; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Error> {<__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = <__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::serialize_unit_variant(move _2, const "Step", const 1_u32, const "Prevote") -> bb6; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Error> {<__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _0 = <__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::serialize_unit_variant(move _2, const "Step", const 2_u32, const "Precommit") -> bb6; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::Error> {<__S as _IMPL_SERIALIZE_FOR_Step::_serde::Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:10: 27:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:19: 27:19
    }
}

const _IMPL_DESERIALIZE_FOR_Step: () = {
    let mut _0: ();                      // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32

    bb0: {
        _0 = const ();                   // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Step::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::deserialize(_1: __D) -> Result<generate_block::Step, <__D as _IMPL_SERIALIZE_FOR_Step::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _0: std::result::Result<generate_block::Step, <__D as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Step::_serde::Deserializer<'_>>::deserialize_enum::<__Visitor<'_>>(move _1, const "Step", const _, const __Visitor::<'_> {{ marker: PhantomData::<generate_block::Step>, lifetime: PhantomData::<&()> }}) -> bb1; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], __Visitor<'_>) -> Result<<__Visitor<'_> as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Step::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Step::_serde::Deserializer<'_>>::deserialize_enum::<__Visitor<'_>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(VARIANTS, [], None) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Visitor<'_>, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:32: 27:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Step::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::deserialize::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::expecting(_1: &__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    debug __formatter => _2;             // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let _3: &str;                        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32

    bb0: {
        _3 = const "variant identifier"; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:32: 27:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Step::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::deserialize::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::visit_u64(_1: __FieldVisitor, _2: u64) -> Result<__Field, __E> {
    debug self => const __FieldVisitor;  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    debug __value => _2;                 // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _0: std::result::Result<generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field, __E>; // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _3: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _4: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _5: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _6: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _7: __E;                     // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _8: generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::Unexpected<'_>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _9: &dyn generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::Expected; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _10: &&str;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb1: {
        _8 = _IMPL_SERIALIZE_FOR_Step::_serde::de::Unexpected::<'_>::Unsigned(_2); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _10 = const _;                   // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<__FieldVisitor as Visitor<'de>>::visit_u64, [ReErased, __E], Some(promoted[0])) }
        _9 = _10 as &dyn generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::Expected (Pointer(Unsize)); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _7 = <__E as _IMPL_SERIALIZE_FOR_Step::_serde::de::Error>::invalid_value(move _8, move _9) -> bb6; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: for<'a, 'b> fn(_IMPL_SERIALIZE_FOR_Step::_serde::de::Unexpected<'a>, &'b (dyn Expected + 'b)) -> __E {<__E as _IMPL_SERIALIZE_FOR_Step::_serde::de::Error>::invalid_value}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const __Field::__field0;    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x00)) }
        _0 = Result::<__Field, __E>::Ok(move _3); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb7;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb3: {
        _4 = const __Field::__field1;    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x01)) }
        _0 = Result::<__Field, __E>::Ok(move _4); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb7;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb4: {
        _5 = const __Field::__field2;    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x02)) }
        _0 = Result::<__Field, __E>::Ok(move _5); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb7;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb5: {
        _6 = const __Field::__field3;    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x03)) }
        _0 = Result::<__Field, __E>::Ok(move _6); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb7;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb6: {
        _0 = Result::<__Field, __E>::Err(move _7); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb7;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb7: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:32: 27:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Step::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::deserialize::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::visit_u64: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _1: &str;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32

    bb0: {
        _1 = const "variant index 0 <= i < 4"; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Step::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::deserialize::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::visit_str(_1: __FieldVisitor, _2: &str) -> Result<__Field, __E> {
    debug self => const __FieldVisitor;  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    debug __value => _2;                 // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _0: std::result::Result<generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field, __E>; // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _3: bool;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _4: bool;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _5: bool;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _6: bool;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _7: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _8: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _9: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _10: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _11: __E;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "Propose") -> bb1; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb9]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "Prevote") -> bb3; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb10]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "Precommit") -> bb5; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _5) -> [0: bb6, otherwise: bb11]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "Commit") -> bb7; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _6) -> [0: bb8, otherwise: bb12]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb8: {
        _11 = <__E as _IMPL_SERIALIZE_FOR_Step::_serde::de::Error>::unknown_variant(_2, const _) -> bb13; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: for<'a> fn(&'a str, &'static [&'static str]) -> __E {<__E as _IMPL_SERIALIZE_FOR_Step::_serde::de::Error>::unknown_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(VARIANTS, [], None) }
    }

    bb9: {
        _7 = const __Field::__field0;    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x00)) }
        _0 = Result::<__Field, __E>::Ok(move _7); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb14;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb10: {
        _8 = const __Field::__field1;    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x01)) }
        _0 = Result::<__Field, __E>::Ok(move _8); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb14;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb11: {
        _9 = const __Field::__field2;    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x02)) }
        _0 = Result::<__Field, __E>::Ok(move _9); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb14;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb12: {
        _10 = const __Field::__field3;   // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x03)) }
        _0 = Result::<__Field, __E>::Ok(move _10); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb14;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb13: {
        _0 = Result::<__Field, __E>::Err(move _11); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb14;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb14: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:32: 27:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Step::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::deserialize::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::visit_bytes(_1: __FieldVisitor, _2: &[u8]) -> Result<__Field, __E> {
    debug self => const __FieldVisitor;  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    debug __value => _2;                 // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _0: std::result::Result<generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field, __E>; // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _3: usize;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _4: usize;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _5: bool;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _6: usize;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _7: usize;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _8: bool;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _9: usize;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _10: usize;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _11: bool;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _12: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _13: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _14: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _15: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let _16: &std::borrow::Cow<'_, str>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let _17: std::borrow::Cow<'_, str>;  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _18: __E;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _19: &str;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let _20: &str;                       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    scope 1 {
        debug __value => _16;            // in scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb0: {
        _9 = Len((*_2));                 // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _10 = const 7_usize;             // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _11 = Eq(move _9, move _10);     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        switchInt(move _11) -> [0: bb13, otherwise: bb1]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [80: bb2, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [114: bb3, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [111: bb4, 101: bb9, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [112: bb5, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [111: bb6, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [115: bb7, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [101: bb30, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb8: {
        _17 = from_utf8_lossy(_2) -> bb34; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt((*_2)[3 of 7]) -> [118: bb10, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb10: {
        switchInt((*_2)[4 of 7]) -> [111: bb11, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb11: {
        switchInt((*_2)[5 of 7]) -> [116: bb12, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb12: {
        switchInt((*_2)[6 of 7]) -> [101: bb31, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb13: {
        _6 = Len((*_2));                 // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _7 = const 9_usize;              // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _8 = Eq(move _6, move _7);       // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        switchInt(move _8) -> [0: bb23, otherwise: bb14]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb14: {
        switchInt((*_2)[0 of 9]) -> [80: bb15, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb15: {
        switchInt((*_2)[1 of 9]) -> [114: bb16, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb16: {
        switchInt((*_2)[2 of 9]) -> [101: bb17, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb17: {
        switchInt((*_2)[3 of 9]) -> [99: bb18, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb18: {
        switchInt((*_2)[4 of 9]) -> [111: bb19, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb19: {
        switchInt((*_2)[5 of 9]) -> [109: bb20, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb20: {
        switchInt((*_2)[6 of 9]) -> [109: bb21, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb21: {
        switchInt((*_2)[7 of 9]) -> [105: bb22, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb22: {
        switchInt((*_2)[8 of 9]) -> [116: bb32, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb23: {
        _3 = Len((*_2));                 // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _4 = const 6_usize;              // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _5 = Eq(move _3, move _4);       // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        switchInt(move _5) -> [0: bb8, otherwise: bb24]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb24: {
        switchInt((*_2)[0 of 6]) -> [67: bb25, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb25: {
        switchInt((*_2)[1 of 6]) -> [111: bb26, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb26: {
        switchInt((*_2)[2 of 6]) -> [109: bb27, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb27: {
        switchInt((*_2)[3 of 6]) -> [109: bb28, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb28: {
        switchInt((*_2)[4 of 6]) -> [105: bb29, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb29: {
        switchInt((*_2)[5 of 6]) -> [116: bb33, otherwise: bb8]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb30: {
        _12 = const __Field::__field0;   // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x00)) }
        _0 = Result::<__Field, __E>::Ok(move _12); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb37;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb31: {
        _13 = const __Field::__field1;   // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x01)) }
        _0 = Result::<__Field, __E>::Ok(move _13); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb37;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb32: {
        _14 = const __Field::__field2;   // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x02)) }
        _0 = Result::<__Field, __E>::Ok(move _14); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb37;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb33: {
        _15 = const __Field::__field3;   // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x03)) }
        _0 = Result::<__Field, __E>::Ok(move _15); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb37;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb34: {
        _16 = &_17;                      // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _20 = <Cow<'_, str> as Deref>::deref(_16) -> [return: bb35, unwind: bb38]; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb35: {
        _19 = _20;                       // scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _18 = <__E as _IMPL_SERIALIZE_FOR_Step::_serde::de::Error>::unknown_variant(move _19, const _) -> [return: bb36, unwind: bb38]; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: for<'a> fn(&'a str, &'static [&'static str]) -> __E {<__E as _IMPL_SERIALIZE_FOR_Step::_serde::de::Error>::unknown_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(VARIANTS, [], None) }
    }

    bb36: {
        _0 = Result::<__Field, __E>::Err(move _18); // scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        drop(_17) -> bb37;               // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb37: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:32: 27:32
    }

    bb38 (cleanup): {
        drop(_17) -> bb39;               // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb39 (cleanup): {
        resume;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Step::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::deserialize::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::deserialize(_1: __D) -> Result<__Field, <__D as _IMPL_SERIALIZE_FOR_Step::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _0: std::result::Result<generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field, <__D as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Step::_serde::Deserializer<'_>>::deserialize_identifier::<__FieldVisitor>(move _1, const __FieldVisitor) -> bb1; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: fn(__D, __FieldVisitor) -> Result<<__FieldVisitor as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Step::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Step::_serde::Deserializer<'_>>::deserialize_identifier::<__FieldVisitor>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __FieldVisitor, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:32: 27:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Step::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::deserialize::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::expecting(_1: &__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    debug __formatter => _2;             // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let _3: &str;                        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32

    bb0: {
        _3 = const "enum Step";          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:32: 27:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Step::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::deserialize::<impl at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32>::visit_enum(_1: __Visitor<'_>, _2: __A) -> Result<generate_block::Step, <__A as EnumAccess<'_>>::Error> {
    debug self => const __Visitor::<'_> {{ marker: PhantomData::<generate_block::Step>, lifetime: PhantomData::<&()> }}; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    debug __data => _2;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _0: std::result::Result<generate_block::Step, <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error>; // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _3: std::result::Result<(generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field, <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Variant), <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _4: isize;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let _5: (generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field, <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Variant); // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let _6: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _7: isize;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let _8: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _9: std::result::Result<(), <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _10: isize;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _12: generate_block::Step;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:28:10: 29:12
    let _13: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _14: std::result::Result<(), <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _15: isize;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _17: generate_block::Step;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:28:10: 30:12
    let _18: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _19: std::result::Result<(), <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _20: isize;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _22: generate_block::Step;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:28:10: 31:14
    let _23: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _24: std::result::Result<(), <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _25: isize;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _27: generate_block::Step;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:28:10: 32:11
    scope 1 {
        debug __val => _5;               // in scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }
    scope 2 {
        debug __err => _6;               // in scope 2 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }
    scope 3 {
        debug __variant => _8;           // in scope 3 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        let _11: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error; // in scope 3 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        scope 4 {
            debug __val => const ();     // in scope 4 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        }
        scope 5 {
            debug __err => _11;          // in scope 5 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        }
    }
    scope 6 {
        debug __variant => _13;          // in scope 6 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        let _16: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error; // in scope 6 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        scope 7 {
            debug __val => const ();     // in scope 7 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        }
        scope 8 {
            debug __err => _16;          // in scope 8 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        }
    }
    scope 9 {
        debug __variant => _18;          // in scope 9 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        let _21: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error; // in scope 9 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        scope 10 {
            debug __val => const ();     // in scope 10 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        }
        scope 11 {
            debug __err => _21;          // in scope 11 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        }
    }
    scope 12 {
        debug __variant => _23;          // in scope 12 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        let _26: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error; // in scope 12 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        scope 13 {
            debug __val => const ();     // in scope 13 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        }
        scope 14 {
            debug __err => _26;          // in scope 14 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<__Field>(move _2) -> bb1; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: fn(__A) -> Result<(__Field, <__A as EnumAccess<'_>>::Variant), <__A as EnumAccess<'_>>::Error> {<__A as EnumAccess<'_>>::variant::<__Field>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _0 = Result::<generate_block::Step, <__A as EnumAccess<'_>>::Error>::Err(move _6); // scope 2 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb26;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field, <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Variant)); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _7 = discriminant((_5.0: generate_block::_IMPL_DESERIALIZE_FOR_Step::<impl generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::Deserialize<'de> for generate_block::Step>::deserialize::__Field)); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        switchInt(move _7) -> [0: bb7, 1: bb12, 2: bb17, 3: bb5, otherwise: bb6]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb5: {
        _23 = move (_5.1: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _24 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _23) -> bb22; // scope 12 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb7: {
        _8 = move (_5.1: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> bb8; // scope 3 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = discriminant(_9);          // scope 3 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        switchInt(move _10) -> [0: bb11, 1: bb9, otherwise: bb10]; // scope 3 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb9: {
        _11 = move ((_9 as Err).0: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error); // scope 3 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _0 = Result::<generate_block::Step, <__A as EnumAccess<'_>>::Error>::Err(move _11); // scope 5 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb26;                    // scope 0 at no-location
    }

    bb10: {
        unreachable;                     // scope 3 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb11: {
        _12 = const generate_block::Step::Propose; // scope 3 at tests/chain-executor-mock/src/generate_block.rs:28:10: 29:12
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: generate_block::Step, val: Value(Scalar(0x00)) }
        _0 = Result::<generate_block::Step, <__A as EnumAccess<'_>>::Error>::Ok(move _12); // scope 3 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb26;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb12: {
        _13 = move (_5.1: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> bb13; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb13: {
        _15 = discriminant(_14);         // scope 6 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        switchInt(move _15) -> [0: bb16, 1: bb14, otherwise: bb15]; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb14: {
        _16 = move ((_14 as Err).0: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error); // scope 6 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _0 = Result::<generate_block::Step, <__A as EnumAccess<'_>>::Error>::Err(move _16); // scope 8 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb26;                    // scope 0 at no-location
    }

    bb15: {
        unreachable;                     // scope 6 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb16: {
        _17 = const generate_block::Step::Prevote; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:28:10: 30:12
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: generate_block::Step, val: Value(Scalar(0x01)) }
        _0 = Result::<generate_block::Step, <__A as EnumAccess<'_>>::Error>::Ok(move _17); // scope 6 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb26;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb17: {
        _18 = move (_5.1: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> bb18; // scope 9 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb18: {
        _20 = discriminant(_19);         // scope 9 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        switchInt(move _20) -> [0: bb21, 1: bb19, otherwise: bb20]; // scope 9 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb19: {
        _21 = move ((_19 as Err).0: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error); // scope 9 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _0 = Result::<generate_block::Step, <__A as EnumAccess<'_>>::Error>::Err(move _21); // scope 11 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb26;                    // scope 0 at no-location
    }

    bb20: {
        unreachable;                     // scope 9 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb21: {
        _22 = const generate_block::Step::Precommit; // scope 9 at tests/chain-executor-mock/src/generate_block.rs:28:10: 31:14
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: generate_block::Step, val: Value(Scalar(0x02)) }
        _0 = Result::<generate_block::Step, <__A as EnumAccess<'_>>::Error>::Ok(move _22); // scope 9 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb26;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb22: {
        _25 = discriminant(_24);         // scope 12 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        switchInt(move _25) -> [0: bb25, 1: bb23, otherwise: bb24]; // scope 12 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb23: {
        _26 = move ((_24 as Err).0: <__A as generate_block::_IMPL_SERIALIZE_FOR_Step::_serde::de::EnumAccess<'_>>::Error); // scope 12 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _0 = Result::<generate_block::Step, <__A as EnumAccess<'_>>::Error>::Err(move _26); // scope 14 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb26;                    // scope 0 at no-location
    }

    bb24: {
        unreachable;                     // scope 12 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }

    bb25: {
        _27 = const generate_block::Step::Commit; // scope 12 at tests/chain-executor-mock/src/generate_block.rs:28:10: 32:11
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: generate_block::Step, val: Value(Scalar(0x03)) }
        _0 = Result::<generate_block::Step, <__A as EnumAccess<'_>>::Error>::Ok(move _27); // scope 12 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        goto -> bb26;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
    }

    bb26: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:32: 27:32
    }
}

const VARIANTS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _1: &[&str; 4];              // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let _2: &[&str; 4];                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let _3: [&str; 4];                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _4: &[&str; 4];              // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32

    bb0: {
        StorageLive(_1);                 // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        StorageLive(_2);                 // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _4 = const _;                    // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &[&str; 4], val: Unevaluated(VARIANTS, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _1 = &(*_2);                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        StorageDead(_2);                 // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
        StorageDead(_1);                 // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:31: 27:32
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }
}

promoted[0] in VARIANTS: &[&str; 4] = {
    let mut _0: &[&str; 4];              // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    let mut _1: [&str; 4];               // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32

    bb0: {
        _1 = [const "Propose", const "Prevote", const "Precommit", const "Commit"]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:21: 27:32
    }
}

fn generate_block::<impl at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39>::fmt(_1: &generate_block::Step, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
    debug f => _2;                       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
    let mut _3: &str;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
    let mut _4: isize;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
    let _5: &str;                        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
    let _6: &str;                        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
    let _7: &str;                        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
    let _8: &str;                        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
    }

    bb1: {
        _8 = const "Commit";             // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _8;                         // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
        goto -> bb6;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:38: 27:39
    }

    bb2: {
        unreachable;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
    }

    bb3: {
        _5 = const "Propose";            // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
        goto -> bb6;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:38: 27:39
    }

    bb4: {
        _6 = const "Prevote";            // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
        goto -> bb6;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:38: 27:39
    }

    bb5: {
        _7 = const "Precommit";          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
        goto -> bb6;                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:38: 27:39
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb7; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:34: 27:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:39: 27:39
    }
}

fn generate_block::<impl at tests/chain-executor-mock/src/generate_block.rs:27:41: 27:50>::eq(_1: &generate_block::Step, _2: &generate_block::Step) -> bool {
    debug self => _1;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:41: 27:50
    debug other => _2;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:41: 27:50
    let mut _0: bool;                    // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:41: 27:50
    let _3: isize;                       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:41: 27:50
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:41: 27:50
        let _4: isize;                   // in scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:41: 27:50
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at tests/chain-executor-mock/src/generate_block.rs:27:41: 27:50
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:41: 27:50
        _4 = discriminant((*_2));        // scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:41: 27:50
        _0 = Eq(_3, _4);                 // scope 2 at tests/chain-executor-mock/src/generate_block.rs:27:41: 27:50
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:50: 27:50
    }
}

fn generate_block::<impl at tests/chain-executor-mock/src/generate_block.rs:27:52: 27:54>::assert_receiver_is_total_eq(_1: &generate_block::Step) -> () {
    debug self => _1;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:52: 27:54
    let mut _0: ();                      // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:52: 27:54

    bb0: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:54: 27:54
    }
}

fn generate_block::<impl at tests/chain-executor-mock/src/generate_block.rs:27:56: 27:61>::clone(_1: &generate_block::Step) -> generate_block::Step {
    debug self => _1;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:56: 27:61
    let mut _0: generate_block::Step;    // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:56: 27:61

    bb0: {
        _0 = (*_1);                      // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:56: 27:61
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:61: 27:61
    }
}

fn generate_block::<impl at tests/chain-executor-mock/src/generate_block.rs:27:69: 27:73>::hash(_1: &generate_block::Step, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:69: 27:73
    debug state => _2;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:69: 27:73
    let mut _0: ();                      // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:69: 27:73
    let _3: isize;                       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:69: 27:73
    let _4: &isize;                      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:69: 27:73
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:69: 27:73
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:69: 27:73
        _4 = &_3;                        // scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:69: 27:73
        _0 = <isize as std::hash::Hash>::hash::<__H>(_4, _2) -> bb1; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:27:69: 27:73
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:27:69: 27:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as std::hash::Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:27:73: 27:73
    }
}

fn generate_block::<impl at tests/chain-executor-mock/src/generate_block.rs:39:1: 39:27>::as_millis(_1: &Duration) -> u64 {
    debug self => _1;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:40:18: 40:23
    let mut _0: u64;                     // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:40:28: 40:31
    let mut _2: u64;                     // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:9: 41:31
    let mut _3: u64;                     // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:9: 41:23
    let mut _4: (u64, bool);             // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:9: 41:31
    let mut _5: u64;                     // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:34: 41:65
    let mut _6: u32;                     // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:44: 41:64
    let mut _7: (u64, bool);             // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:9: 41:65

    bb0: {
        _3 = Duration::as_secs(_1) -> bb1; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:9: 41:23
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:41:14: 41:21
                                         // + literal: Const { ty: for<'a> fn(&'a Duration) -> u64 {Duration::as_secs}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = CheckedMul(_3, const 1000_u64); // scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:9: 41:31
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, const 1000_u64) -> bb2; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:9: 41:31
    }

    bb2: {
        _2 = move (_4.0: u64);           // scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:9: 41:31
        _6 = Duration::subsec_millis(_1) -> bb3; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:44: 41:64
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:41:49: 41:62
                                         // + literal: Const { ty: for<'a> fn(&'a Duration) -> u32 {Duration::subsec_millis}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = <u64 as From<u32>>::from(move _6) -> bb4; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:34: 41:65
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:41:34: 41:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> u64 {<u64 as From<u32>>::from}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = CheckedAdd(_2, _5);         // scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:9: 41:65
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _5) -> bb5; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:9: 41:65
    }

    bb5: {
        _0 = move (_7.0: u64);           // scope 0 at tests/chain-executor-mock/src/generate_block.rs:41:9: 41:65
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:42:6: 42:6
    }
}

fn generate_block::<impl at tests/chain-executor-mock/src/generate_block.rs:47:1: 47:16>::build_contract_address(_1: &H160, _2: &U256) -> H160 {
    debug sender => _1;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:48:35: 48:41
    debug nonce => _2;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:48:53: 48:58
    let mut _0: cita_types::H160;        // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:48:70: 48:77
    let mut _3: rlp::RlpStream;          // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:51:13: 51:23
    let _4: &mut rlp::RlpStream;         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:52:9: 52:30
    let mut _5: &mut rlp::RlpStream;     // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:52:9: 52:30
    let _6: &mut rlp::RlpStream;         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:53:9: 53:29
    let mut _7: &mut rlp::RlpStream;     // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:53:9: 53:29
    let mut _8: cita_types::H256;        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:54:20: 54:45
    let mut _9: &std::vec::Vec<u8>;      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:54:20: 54:45
    let _10: std::vec::Vec<u8>;          // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:54:20: 54:32
    let mut _11: rlp::RlpStream;         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:54:20: 54:26
    let mut _12: bool;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:55:5: 55:6
    scope 1 {
        debug stream => _3;              // in scope 1 at tests/chain-executor-mock/src/generate_block.rs:51:13: 51:23
    }

    bb0: {
        _12 = const false;               // scope 0 at tests/chain-executor-mock/src/generate_block.rs:51:13: 51:23
        _12 = const true;                // scope 0 at tests/chain-executor-mock/src/generate_block.rs:51:26: 51:48
        _3 = RlpStream::new_list(const 2_usize) -> bb1; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:51:26: 51:48
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:51:26: 51:45
                                         // + literal: Const { ty: fn(usize) -> RlpStream {RlpStream::new_list}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _3;                    // scope 1 at tests/chain-executor-mock/src/generate_block.rs:52:9: 52:30
        _4 = RlpStream::append::<H160>(move _5, _1) -> [return: bb2, unwind: bb11]; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:52:9: 52:30
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:52:16: 52:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut RlpStream, &'b H160) -> &'a mut RlpStream {RlpStream::append::<H160>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut _3;                    // scope 1 at tests/chain-executor-mock/src/generate_block.rs:53:9: 53:29
        _6 = RlpStream::append::<U256>(move _7, _2) -> [return: bb3, unwind: bb11]; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:53:9: 53:29
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:53:16: 53:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut RlpStream, &'b U256) -> &'a mut RlpStream {RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = const false;               // scope 1 at tests/chain-executor-mock/src/generate_block.rs:54:20: 54:26
        _11 = move _3;                   // scope 1 at tests/chain-executor-mock/src/generate_block.rs:54:20: 54:26
        _10 = RlpStream::out(move _11) -> [return: bb4, unwind: bb11]; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:54:20: 54:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:54:27: 54:30
                                         // + literal: Const { ty: fn(RlpStream) -> Vec<u8> {RlpStream::out}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = &_10;                       // scope 1 at tests/chain-executor-mock/src/generate_block.rs:54:20: 54:45
        _8 = <Vec<u8> as Hashable>::crypt_hash(move _9) -> [return: bb5, unwind: bb8]; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:54:20: 54:45
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:54:33: 54:43
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> H256 {<Vec<u8> as Hashable>::crypt_hash}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = <H160 as From<H256>>::from(move _8) -> [return: bb6, unwind: bb8]; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:54:9: 54:46
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:54:9: 54:19
                                         // + literal: Const { ty: fn(H256) -> H160 {<H160 as From<H256>>::from}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = const false;               // scope 0 at tests/chain-executor-mock/src/generate_block.rs:55:5: 55:6
        drop(_10) -> bb7;                // scope 0 at tests/chain-executor-mock/src/generate_block.rs:55:5: 55:6
    }

    bb7: {
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:55:6: 55:6
    }

    bb8 (cleanup): {
        drop(_10) -> bb9;                // scope 0 at tests/chain-executor-mock/src/generate_block.rs:55:5: 55:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:48:5: 55:6
    }

    bb10 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at tests/chain-executor-mock/src/generate_block.rs:55:5: 55:6
    }

    bb11 (cleanup): {
        switchInt(_12) -> [0: bb9, otherwise: bb10]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:55:5: 55:6
    }
}

fn generate_block::<impl at tests/chain-executor-mock/src/generate_block.rs:47:1: 47:16>::build_tx(_1: &str, _2: &str, _3: u64, _4: u32, _5: u64, _6: &H256) -> SignedTransaction {
    debug to_address => _1;              // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:58:9: 58:19
    debug data => _2;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:59:9: 59:13
    debug quota => _3;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:60:9: 60:14
    debug nonce => _4;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:61:9: 61:14
    debug valid_until_block => _5;       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:62:9: 62:26
    debug privkey => _6;                 // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:63:9: 63:16
    let mut _0: libproto::SignedTransaction; // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:64:10: 64:27
    let _7: std::vec::Vec<u8>;           // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:65:13: 65:17
    let mut _8: std::result::Result<std::vec::Vec<u8>, rustc_serialize::hex::FromHexError>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:65:20: 65:35
    let _10: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:67:9: 67:26
    let mut _11: &mut libproto::Transaction; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:67:9: 67:26
    let mut _12: std::vec::Vec<u8>;      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:67:21: 67:25
    let _13: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:68:9: 68:43
    let mut _14: &mut libproto::Transaction; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:68:9: 68:43
    let mut _15: std::string::String;    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let mut _17: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _18: &[&str];                // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:68:30: 68:34
    let mut _19: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _21: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:68:36: 68:41
    let _23: &u32;                       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:68:36: 68:41
    let _24: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:69:9: 69:28
    let mut _25: &mut libproto::Transaction; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:69:9: 69:28
    let _26: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:71:9: 71:42
    let mut _27: &mut libproto::Transaction; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:71:9: 71:42
    let mut _28: std::string::String;    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:71:19: 71:41
    let _29: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:72:9: 72:52
    let mut _30: &mut libproto::Transaction; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:72:9: 72:52
    let _31: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:73:9: 73:36
    let mut _32: &mut libproto::Transaction; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:73:9: 73:36
    let mut _33: std::vec::Vec<u8>;      // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:47:36: 47:69
    let _34: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:74:9: 74:29
    let mut _35: &mut libproto::Transaction; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:74:9: 74:29
    let _36: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:75:9: 75:35
    let mut _37: &mut libproto::Transaction; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:75:9: 75:35
    let mut _38: std::vec::Vec<u8>;      // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:59
    let mut _39: &libproto::Transaction; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:76:9: 76:26
    let mut _40: cita_types::H256;       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:76:17: 76:25
    let mut _42: bool;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:77:5: 77:6
    scope 1 {
        debug data => _7;                // in scope 1 at tests/chain-executor-mock/src/generate_block.rs:65:13: 65:17
        let mut _9: libproto::Transaction; // in scope 1 at tests/chain-executor-mock/src/generate_block.rs:66:13: 66:19
        scope 2 {
            debug tx => _9;              // in scope 2 at tests/chain-executor-mock/src/generate_block.rs:66:13: 66:19
            let _16: std::string::String; // in scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
            let mut _41: &[&str; 1];     // in scope 2 at tests/chain-executor-mock/src/generate_block.rs:68:30: 68:34
            scope 3 {
                debug res => _16;        // in scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
            }
        }
    }

    bb0: {
        _42 = const false;               // scope 0 at tests/chain-executor-mock/src/generate_block.rs:65:13: 65:17
        _8 = <str as FromHex>::from_hex(_2) -> bb1; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:65:20: 65:35
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:65:25: 65:33
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<Vec<u8>, FromHexError> {<str as FromHex>::from_hex}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Result::<Vec<u8>, FromHexError>::unwrap(move _8) -> bb2; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:65:20: 65:44
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:65:36: 65:42
                                         // + literal: Const { ty: fn(Result<Vec<u8>, FromHexError>) -> Vec<u8> {Result::<Vec<u8>, FromHexError>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _42 = const true;                // scope 0 at tests/chain-executor-mock/src/generate_block.rs:65:43: 65:44
        _9 = Transaction::new() -> [return: bb3, unwind: bb23]; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:66:22: 66:40
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:66:22: 66:38
                                         // + literal: Const { ty: fn() -> Transaction {Transaction::new}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = &mut _9;                   // scope 2 at tests/chain-executor-mock/src/generate_block.rs:67:9: 67:26
        _42 = const false;               // scope 2 at tests/chain-executor-mock/src/generate_block.rs:67:21: 67:25
        _12 = move _7;                   // scope 2 at tests/chain-executor-mock/src/generate_block.rs:67:21: 67:25
        _10 = Transaction::set_data(move _11, move _12) -> [return: bb4, unwind: bb20]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:67:9: 67:26
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:67:12: 67:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Transaction, Vec<u8>) {Transaction::set_data}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = &mut _9;                   // scope 2 at tests/chain-executor-mock/src/generate_block.rs:68:9: 68:43
        _41 = const _;                   // scope 2 at tests/chain-executor-mock/src/generate_block.rs:68:30: 68:34
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:68:30: 68:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(BuildBlock::build_tx, [], Some(promoted[0])) }
        _18 = _41 as &[&str] (Pointer(Unsize)); // scope 2 at tests/chain-executor-mock/src/generate_block.rs:68:30: 68:34
        _23 = &_4;                       // scope 2 at tests/chain-executor-mock/src/generate_block.rs:68:36: 68:41
        _22 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(_23) -> [return: bb5, unwind: bb20]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:68:36: 68:41
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:68:36: 68:41
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = [move _22];                // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _20 = &_21;                      // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _19 = _20 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb6, unwind: bb20]; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = format(move _17) -> [return: bb7, unwind: bb20]; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {format}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = move _16;                  // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _13 = Transaction::set_nonce(move _14, move _15) -> [return: bb8, unwind: bb20]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:68:9: 68:43
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:68:12: 68:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Transaction, std::string::String) {Transaction::set_nonce}, val: Value(<ZST>) }
    }

    bb8: {
        _25 = &mut _9;                   // scope 2 at tests/chain-executor-mock/src/generate_block.rs:69:9: 69:28
        _24 = Transaction::set_quota(move _25, _3) -> [return: bb9, unwind: bb20]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:69:9: 69:28
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:69:12: 69:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Transaction, u64) {Transaction::set_quota}, val: Value(<ZST>) }
    }

    bb9: {
        _27 = &mut _9;                   // scope 2 at tests/chain-executor-mock/src/generate_block.rs:71:9: 71:42
        _28 = <str as ToString>::to_string(_1) -> [return: bb10, unwind: bb20]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:71:19: 71:41
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:71:30: 71:39
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> std::string::String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb10: {
        _26 = Transaction::set_to(move _27, move _28) -> [return: bb11, unwind: bb20]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:71:9: 71:42
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:71:12: 71:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut Transaction, std::string::String) {Transaction::set_to}, val: Value(<ZST>) }
    }

    bb11: {
        _30 = &mut _9;                   // scope 2 at tests/chain-executor-mock/src/generate_block.rs:72:9: 72:52
        _29 = Transaction::set_valid_until_block(move _30, _5) -> [return: bb12, unwind: bb20]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:72:9: 72:52
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:72:12: 72:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Transaction, u64) {Transaction::set_valid_until_block}, val: Value(<ZST>) }
    }

    bb12: {
        _32 = &mut _9;                   // scope 2 at tests/chain-executor-mock/src/generate_block.rs:73:9: 73:36
        _33 = from_elem::<u8>(const 0_u8, const 32_usize) -> [return: bb13, unwind: bb20]; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:47:36: 47:69
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:47:36: 47:58
                                         // + literal: Const { ty: fn(u8, usize) -> Vec<u8> {from_elem::<u8>}, val: Value(<ZST>) }
    }

    bb13: {
        _31 = Transaction::set_value(move _32, move _33) -> [return: bb14, unwind: bb20]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:73:9: 73:36
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:73:12: 73:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Transaction, Vec<u8>) {Transaction::set_value}, val: Value(<ZST>) }
    }

    bb14: {
        _35 = &mut _9;                   // scope 2 at tests/chain-executor-mock/src/generate_block.rs:74:9: 74:29
        _34 = Transaction::set_chain_id(move _35, const 123_u32) -> [return: bb15, unwind: bb20]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:74:9: 74:29
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:74:12: 74:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Transaction, u32) {Transaction::set_chain_id}, val: Value(<ZST>) }
    }

    bb15: {
        _37 = &mut _9;                   // scope 2 at tests/chain-executor-mock/src/generate_block.rs:75:9: 75:35
        _38 = Vec::<u8>::new() -> [return: bb16, unwind: bb20]; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<u8> {Vec::<u8>::new}, val: Value(<ZST>) }
    }

    bb16: {
        _36 = Transaction::set_chain_id_v1(move _37, move _38) -> [return: bb17, unwind: bb20]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:75:9: 75:35
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:75:12: 75:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut Transaction, Vec<u8>) {Transaction::set_chain_id_v1}, val: Value(<ZST>) }
    }

    bb17: {
        _39 = &_9;                       // scope 2 at tests/chain-executor-mock/src/generate_block.rs:76:9: 76:26
        _40 = (*_6);                     // scope 2 at tests/chain-executor-mock/src/generate_block.rs:76:17: 76:25
        _0 = libproto::<impl Transaction>::sign(move _39, move _40) -> [return: bb18, unwind: bb20]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:76:9: 76:26
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:76:12: 76:16
                                         // + literal: Const { ty: for<'a> fn(&'a Transaction, H256) -> SignedTransaction {libproto::<impl Transaction>::sign}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_9) -> [return: bb19, unwind: bb23]; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:77:5: 77:6
    }

    bb19: {
        _42 = const false;               // scope 0 at tests/chain-executor-mock/src/generate_block.rs:77:5: 77:6
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:77:6: 77:6
    }

    bb20 (cleanup): {
        drop(_9) -> bb23;                // scope 1 at tests/chain-executor-mock/src/generate_block.rs:77:5: 77:6
    }

    bb21 (cleanup): {
        resume;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:57:5: 77:6
    }

    bb22 (cleanup): {
        drop(_7) -> bb21;                // scope 0 at tests/chain-executor-mock/src/generate_block.rs:77:5: 77:6
    }

    bb23 (cleanup): {
        switchInt(_42) -> [0: bb21, otherwise: bb22]; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:77:5: 77:6
    }
}

promoted[0] in generate_block::<impl at tests/chain-executor-mock/src/generate_block.rs:47:1: 47:16>::build_tx: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:68:30: 68:34
    let mut _1: [&str; 1];               // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:68:30: 68:34

    bb0: {
        _1 = [const ""];                 // scope 0 at tests/chain-executor-mock/src/generate_block.rs:68:30: 68:34
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:68:30: 68:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/generate_block.rs:68:30: 68:34
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:68:30: 68:34
    }
}

fn generate_block::<impl at tests/chain-executor-mock/src/generate_block.rs:47:1: 47:16>::build_block_with_proof(_1: &[SignedTransaction], _2: H256, _3: u64, _4: &H256, _5: u64) -> (Vec<u8>, libproto::BlockWithProof) {
    debug txs => _1;                     // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:81:9: 81:12
    debug pre_hash => _2;                // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:82:9: 82:17
    debug height => _3;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:83:9: 83:15
    debug privkey => _4;                 // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:84:9: 84:16
    debug timestamp => _5;               // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:85:9: 85:18
    let mut _0: (std::vec::Vec<u8>, libproto::BlockWithProof); // return place in scope 0 at tests/chain-executor-mock/src/generate_block.rs:86:10: 86:35
    let _6: cita_types::H160;            // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:13: 87:19
    let mut _7: &crypto::KeyPair;        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:22: 87:72
    let _8: crypto::KeyPair;             // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:22: 87:62
    let mut _9: std::result::Result<crypto::KeyPair, crypto::Error>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:22: 87:53
    let mut _10: cita_types::H256;       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:44: 87:52
    let _12: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:89:9: 89:59
    let mut _13: &mut libproto::BlockHeader; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:89:9: 89:59
    let mut _14: &mut libproto::BlockHeader; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:89:9: 89:27
    let mut _15: &mut libproto::Block;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:89:9: 89:27
    let mut _16: u64;                    // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:89:42: 89:58
    let mut _17: (u64, bool);            // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:89:42: 89:58
    let _18: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:90:9: 90:46
    let mut _19: &mut libproto::BlockHeader; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:90:9: 90:46
    let mut _20: &mut libproto::BlockHeader; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:90:9: 90:27
    let mut _21: &mut libproto::Block;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:90:9: 90:27
    let _22: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:91:9: 91:61
    let mut _23: &mut libproto::BlockHeader; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:91:9: 91:61
    let mut _24: &mut libproto::BlockHeader; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:91:9: 91:27
    let mut _25: &mut libproto::Block;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:91:9: 91:27
    let mut _26: std::vec::Vec<u8>;      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:91:41: 91:60
    let mut _27: &[u8];                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:91:41: 91:60
    let mut _28: &[u8; 32];              // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:91:41: 91:60
    let _29: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:92:9: 92:54
    let mut _30: &mut libproto::BlockBody; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:92:9: 92:54
    let mut _31: &mut libproto::BlockBody; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:92:9: 92:25
    let mut _32: &mut libproto::Block;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:92:9: 92:25
    let mut _33: protobuf::repeated::RepeatedField<libproto::SignedTransaction>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:92:43: 92:53
    let mut _35: cita_types::H256;       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:96:26: 96:41
    let mut _38: std::result::Result<std::vec::Vec<u8>, std::boxed::Box<bincode::ErrorKind>>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:98:19: 107:10
    let _39: &(usize, usize, generate_block::Step, cita_types::H160, std::option::Option<cita_types::H256>); // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:99:13: 105:14
    let _40: (usize, usize, generate_block::Step, cita_types::H160, std::option::Option<cita_types::H256>); // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:99:14: 105:14
    let mut _41: usize;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:100:17: 100:29
    let mut _42: usize;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:101:17: 101:28
    let mut _43: generate_block::Step;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:102:17: 102:32
    let mut _44: cita_types::H160;       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:103:17: 103:23
    let mut _45: std::option::Option<cita_types::H256>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:104:17: 104:37
    let mut _46: cita_types::H256;       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:104:22: 104:36
    let mut _48: std::result::Result<crypto::Signature, crypto::Error>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:109:25: 109:68
    let _49: &cita_types::H256;          // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:109:50: 109:67
    let _50: cita_types::H256;           // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:109:51: 109:67
    let mut _51: &std::vec::Vec<u8>;     // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:109:51: 109:67
    let _52: std::option::Option<crypto::Signature>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:110:9: 110:52
    let mut _53: &mut std::collections::HashMap<cita_types::H160, crypto::Signature>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:110:9: 110:52
    let mut _54: cita_types::H160;       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:110:24: 110:40
    let mut _55: &[u8];                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:110:24: 110:40
    let _56: &[u8];                      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:110:24: 110:33
    let mut _57: &cita_types::H160;      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:110:26: 110:32
    let mut _58: crypto::Signature;      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:110:42: 110:51
    let mut _59: std::collections::HashMap<cita_types::H160, crypto::Signature>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:111:25: 111:32
    let mut _61: &proof::BftProof;       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:112:34: 112:47
    let mut _62: usize;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:113:33: 113:48
    let mut _63: (usize, bool);          // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:113:33: 113:52
    let _64: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:114:9: 114:60
    let mut _65: &mut libproto::BlockHeader; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:114:9: 114:60
    let mut _66: &mut libproto::BlockHeader; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:114:9: 114:27
    let mut _67: &mut libproto::Block;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:114:9: 114:27
    let mut _68: libproto::Proof;        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:114:38: 114:59
    let mut _69: proof::BftProof;        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:114:38: 114:52
    let mut _71: &libproto::BlockBody;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:115:33: 115:69
    let _72: &libproto::BlockBody;       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:115:33: 115:49
    let mut _73: &libproto::Block;       // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:115:33: 115:49
    let _74: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:116:9: 118:63
    let mut _75: &mut libproto::BlockHeader; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:116:9: 118:63
    let mut _76: &mut libproto::BlockHeader; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:116:9: 117:26
    let mut _77: &mut libproto::Block;   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:116:9: 117:26
    let mut _78: std::vec::Vec<u8>;      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:118:36: 118:62
    let mut _79: &[u8];                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:118:36: 118:62
    let _80: &[u8];                      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:118:36: 118:62
    let mut _81: &cita_types::H256;      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:118:36: 118:62
    let _83: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:120:9: 120:33
    let mut _84: &mut libproto::BlockWithProof; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:120:9: 120:33
    let mut _85: libproto::Block;        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:120:27: 120:32
    let _86: ();                         // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:121:9: 121:42
    let mut _87: &mut libproto::BlockWithProof; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:121:9: 121:42
    let mut _88: libproto::Proof;        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:121:29: 121:41
    let mut _89: proof::BftProof;        // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:121:29: 121:34
    let mut _91: libproto::BlockWithProof; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:123:28: 123:45
    let mut _92: &libproto::BlockWithProof; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:123:28: 123:45
    let mut _93: std::vec::Vec<u8>;      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:124:10: 124:33
    let mut _94: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:124:10: 124:24
    let mut _95: libproto::Message;      // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:124:10: 124:13
    let mut _96: libproto::BlockWithProof; // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:124:35: 124:44
    let mut _97: bool;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    let mut _98: bool;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    let mut _99: bool;                   // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    let mut _100: bool;                  // in scope 0 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    scope 1 {
        debug sender => _6;              // in scope 1 at tests/chain-executor-mock/src/generate_block.rs:87:13: 87:19
        let mut _11: libproto::Block;    // in scope 1 at tests/chain-executor-mock/src/generate_block.rs:88:13: 88:22
        scope 2 {
            debug block => _11;          // in scope 2 at tests/chain-executor-mock/src/generate_block.rs:88:13: 88:22
            let mut _34: proof::BftProof; // in scope 2 at tests/chain-executor-mock/src/generate_block.rs:93:13: 93:22
            scope 3 {
                debug proof => _34;      // in scope 3 at tests/chain-executor-mock/src/generate_block.rs:93:13: 93:22
                let mut _36: std::collections::HashMap<cita_types::H160, crypto::Signature>; // in scope 3 at tests/chain-executor-mock/src/generate_block.rs:97:13: 97:24
                scope 4 {
                    debug commits => _36; // in scope 4 at tests/chain-executor-mock/src/generate_block.rs:97:13: 97:24
                    let _37: std::vec::Vec<u8>; // in scope 4 at tests/chain-executor-mock/src/generate_block.rs:98:13: 98:16
                    scope 5 {
                        debug msg => _37; // in scope 5 at tests/chain-executor-mock/src/generate_block.rs:98:13: 98:16
                        let _47: crypto::Signature; // in scope 5 at tests/chain-executor-mock/src/generate_block.rs:109:13: 109:22
                        scope 6 {
                            debug signature => _47; // in scope 6 at tests/chain-executor-mock/src/generate_block.rs:109:13: 109:22
                            let mut _60: proof::BftProof; // in scope 6 at tests/chain-executor-mock/src/generate_block.rs:112:13: 112:31
                            scope 7 {
                                debug previous_proof => _60; // in scope 7 at tests/chain-executor-mock/src/generate_block.rs:112:13: 112:31
                                let _70: cita_types::H256; // in scope 7 at tests/chain-executor-mock/src/generate_block.rs:115:13: 115:30
                                scope 8 {
                                    debug transactions_root => _70; // in scope 8 at tests/chain-executor-mock/src/generate_block.rs:115:13: 115:30
                                    let mut _82: libproto::BlockWithProof; // in scope 8 at tests/chain-executor-mock/src/generate_block.rs:119:13: 119:26
                                    scope 9 {
                                        debug proof_blk => _82; // in scope 9 at tests/chain-executor-mock/src/generate_block.rs:119:13: 119:26
                                        let _90: libproto::Message; // in scope 9 at tests/chain-executor-mock/src/generate_block.rs:123:13: 123:16
                                        scope 10 {
                                            debug msg => _90; // in scope 10 at tests/chain-executor-mock/src/generate_block.rs:123:13: 123:16
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _97 = const false;               // scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:13: 87:19
        _100 = const false;              // scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:13: 87:19
        _98 = const false;               // scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:13: 87:19
        _99 = const false;               // scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:13: 87:19
        _10 = (*_4);                     // scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:44: 87:52
        _9 = <KeyPair as CreateKey>::from_privkey(move _10) -> bb1; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:22: 87:53
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:87:22: 87:43
                                         // + literal: Const { ty: fn(<KeyPair as CreateKey>::PrivKey) -> Result<KeyPair, <KeyPair as CreateKey>::Error> {<KeyPair as CreateKey>::from_privkey}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Result::<KeyPair, crypto::Error>::unwrap(move _9) -> bb2; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:22: 87:62
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:87:54: 87:60
                                         // + literal: Const { ty: fn(Result<KeyPair, crypto::Error>) -> KeyPair {Result::<KeyPair, crypto::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_8;                        // scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:22: 87:72
        _6 = <KeyPair as CreateKey>::address(move _7) -> bb3; // scope 0 at tests/chain-executor-mock/src/generate_block.rs:87:22: 87:72
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:87:63: 87:70
                                         // + literal: Const { ty: for<'a> fn(&'a KeyPair) -> H160 {<KeyPair as CreateKey>::address}, val: Value(<ZST>) }
    }

    bb3: {
        _100 = const true;               // scope 1 at tests/chain-executor-mock/src/generate_block.rs:88:25: 88:37
        _11 = libproto::Block::new() -> bb4; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:88:25: 88:37
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:88:25: 88:35
                                         // + literal: Const { ty: fn() -> libproto::Block {libproto::Block::new}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = &mut _11;                  // scope 2 at tests/chain-executor-mock/src/generate_block.rs:89:9: 89:27
        _14 = libproto::Block::mut_header(move _15) -> [return: bb5, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:89:9: 89:27
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:89:15: 89:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Block) -> &'a mut libproto::BlockHeader {libproto::Block::mut_header}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _14;                       // scope 2 at tests/chain-executor-mock/src/generate_block.rs:89:9: 89:59
        _17 = CheckedMul(_5, const 1000_u64); // scope 2 at tests/chain-executor-mock/src/generate_block.rs:89:42: 89:58
        assert(!move (_17.1: bool), "attempt to compute `{} * {}`, which would overflow", _5, const 1000_u64) -> [success: bb6, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:89:42: 89:58
    }

    bb6: {
        _16 = move (_17.0: u64);         // scope 2 at tests/chain-executor-mock/src/generate_block.rs:89:42: 89:58
        _12 = libproto::BlockHeader::set_timestamp(move _13, move _16) -> [return: bb7, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:89:9: 89:59
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:89:28: 89:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, u64) {libproto::BlockHeader::set_timestamp}, val: Value(<ZST>) }
    }

    bb7: {
        _21 = &mut _11;                  // scope 2 at tests/chain-executor-mock/src/generate_block.rs:90:9: 90:27
        _20 = libproto::Block::mut_header(move _21) -> [return: bb8, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:90:9: 90:27
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:90:15: 90:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Block) -> &'a mut libproto::BlockHeader {libproto::Block::mut_header}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = _20;                       // scope 2 at tests/chain-executor-mock/src/generate_block.rs:90:9: 90:46
        _18 = libproto::BlockHeader::set_height(move _19, _3) -> [return: bb9, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:90:9: 90:46
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:90:28: 90:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, u64) {libproto::BlockHeader::set_height}, val: Value(<ZST>) }
    }

    bb9: {
        _25 = &mut _11;                  // scope 2 at tests/chain-executor-mock/src/generate_block.rs:91:9: 91:27
        _24 = libproto::Block::mut_header(move _25) -> [return: bb10, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:91:9: 91:27
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:91:15: 91:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Block) -> &'a mut libproto::BlockHeader {libproto::Block::mut_header}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = _24;                       // scope 2 at tests/chain-executor-mock/src/generate_block.rs:91:9: 91:61
        _28 = &(_2.0: [u8; 32]);         // scope 2 at tests/chain-executor-mock/src/generate_block.rs:91:41: 91:60
        _27 = move _28 as &[u8] (Pointer(Unsize)); // scope 2 at tests/chain-executor-mock/src/generate_block.rs:91:41: 91:60
        _26 = slice::<impl [u8]>::to_vec(move _27) -> [return: bb11, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:91:41: 91:60
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:91:52: 91:58
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = libproto::BlockHeader::set_prevhash(move _23, move _26) -> [return: bb12, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:91:9: 91:61
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:91:28: 91:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, Vec<u8>) {libproto::BlockHeader::set_prevhash}, val: Value(<ZST>) }
    }

    bb12: {
        _32 = &mut _11;                  // scope 2 at tests/chain-executor-mock/src/generate_block.rs:92:9: 92:25
        _31 = libproto::Block::mut_body(move _32) -> [return: bb13, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:92:9: 92:25
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:92:15: 92:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Block) -> &'a mut BlockBody {libproto::Block::mut_body}, val: Value(<ZST>) }
    }

    bb13: {
        _30 = _31;                       // scope 2 at tests/chain-executor-mock/src/generate_block.rs:92:9: 92:54
        _33 = <&[SignedTransaction] as Into<protobuf::repeated::RepeatedField<SignedTransaction>>>::into(_1) -> [return: bb14, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:92:43: 92:53
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:92:47: 92:51
                                         // + literal: Const { ty: fn(&[SignedTransaction]) -> protobuf::repeated::RepeatedField<SignedTransaction> {<&[SignedTransaction] as Into<protobuf::repeated::RepeatedField<SignedTransaction>>>::into}, val: Value(<ZST>) }
    }

    bb14: {
        _29 = BlockBody::set_transactions(move _30, move _33) -> [return: bb15, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:92:9: 92:54
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:92:26: 92:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut BlockBody, protobuf::repeated::RepeatedField<SignedTransaction>) {BlockBody::set_transactions}, val: Value(<ZST>) }
    }

    bb15: {
        _34 = BftProof::default() -> [return: bb16, unwind: bb59]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:93:25: 93:44
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:93:25: 93:42
                                         // + literal: Const { ty: fn() -> BftProof {BftProof::default}, val: Value(<ZST>) }
    }

    bb16: {
        _99 = const true;                // scope 3 at tests/chain-executor-mock/src/generate_block.rs:94:24: 94:30
        (_34.1: usize) = _3 as usize (IntToInt); // scope 3 at tests/chain-executor-mock/src/generate_block.rs:94:9: 94:39
        (_34.2: usize) = const 0_usize;  // scope 3 at tests/chain-executor-mock/src/generate_block.rs:95:9: 95:24
        _35 = <H256 as Default>::default() -> [return: bb17, unwind: bb57]; // scope 3 at tests/chain-executor-mock/src/generate_block.rs:96:26: 96:41
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:96:26: 96:39
                                         // + literal: Const { ty: fn() -> H256 {<H256 as Default>::default}, val: Value(<ZST>) }
    }

    bb17: {
        (_34.0: cita_types::H256) = move _35; // scope 3 at tests/chain-executor-mock/src/generate_block.rs:96:9: 96:41
        _36 = HashMap::<H160, Signature>::new() -> [return: bb18, unwind: bb57]; // scope 3 at tests/chain-executor-mock/src/generate_block.rs:97:27: 97:41
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:97:27: 97:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> HashMap<H160, Signature> {HashMap::<H160, Signature>::new}, val: Value(<ZST>) }
    }

    bb18: {
        _98 = const true;                // scope 4 at tests/chain-executor-mock/src/generate_block.rs:98:13: 98:16
        _41 = (_34.1: usize);            // scope 4 at tests/chain-executor-mock/src/generate_block.rs:100:17: 100:29
        _42 = (_34.2: usize);            // scope 4 at tests/chain-executor-mock/src/generate_block.rs:101:17: 101:28
        _43 = const generate_block::Step::Precommit; // scope 4 at tests/chain-executor-mock/src/generate_block.rs:102:17: 102:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: generate_block::Step, val: Value(Scalar(0x02)) }
        _44 = _6;                        // scope 4 at tests/chain-executor-mock/src/generate_block.rs:103:17: 103:23
        _46 = (_34.0: cita_types::H256); // scope 4 at tests/chain-executor-mock/src/generate_block.rs:104:22: 104:36
        _45 = std::option::Option::<H256>::Some(move _46); // scope 4 at tests/chain-executor-mock/src/generate_block.rs:104:17: 104:37
        _40 = (move _41, move _42, move _43, move _44, move _45); // scope 4 at tests/chain-executor-mock/src/generate_block.rs:99:14: 105:14
        _39 = &_40;                      // scope 4 at tests/chain-executor-mock/src/generate_block.rs:99:13: 105:14
        _38 = bincode::serialize::<(usize, usize, generate_block::Step, H160, std::option::Option<H256>), bincode::Infinite>(_39, const bincode::Infinite) -> [return: bb19, unwind: bb55]; // scope 4 at tests/chain-executor-mock/src/generate_block.rs:98:19: 107:10
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:98:19: 98:28
                                         // + literal: Const { ty: for<'a> fn(&'a (usize, usize, generate_block::Step, H160, std::option::Option<H256>), bincode::Infinite) -> Result<Vec<u8>, Box<bincode::ErrorKind>> {bincode::serialize::<(usize, usize, generate_block::Step, H160, std::option::Option<H256>), bincode::Infinite>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: bincode::Infinite, val: Value(<ZST>) }
    }

    bb19: {
        _37 = Result::<Vec<u8>, Box<bincode::ErrorKind>>::unwrap(move _38) -> [return: bb20, unwind: bb55]; // scope 4 at tests/chain-executor-mock/src/generate_block.rs:98:19: 108:18
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:108:10: 108:16
                                         // + literal: Const { ty: fn(Result<Vec<u8>, Box<bincode::ErrorKind>>) -> Vec<u8> {Result::<Vec<u8>, Box<bincode::ErrorKind>>::unwrap}, val: Value(<ZST>) }
    }

    bb20: {
        _51 = &_37;                      // scope 5 at tests/chain-executor-mock/src/generate_block.rs:109:51: 109:67
        _50 = <Vec<u8> as Hashable>::crypt_hash(move _51) -> [return: bb21, unwind: bb50]; // scope 5 at tests/chain-executor-mock/src/generate_block.rs:109:51: 109:67
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:109:55: 109:65
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> H256 {<Vec<u8> as Hashable>::crypt_hash}, val: Value(<ZST>) }
    }

    bb21: {
        _49 = &_50;                      // scope 5 at tests/chain-executor-mock/src/generate_block.rs:109:50: 109:67
        _48 = <Signature as Sign>::sign(_4, _49) -> [return: bb22, unwind: bb50]; // scope 5 at tests/chain-executor-mock/src/generate_block.rs:109:25: 109:68
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:109:25: 109:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a <Signature as Sign>::PrivKey, &'b <Signature as Sign>::Message) -> Result<Signature, <Signature as Sign>::Error> {<Signature as Sign>::sign}, val: Value(<ZST>) }
    }

    bb22: {
        _47 = Result::<Signature, crypto::Error>::unwrap(move _48) -> [return: bb23, unwind: bb50]; // scope 5 at tests/chain-executor-mock/src/generate_block.rs:109:25: 109:77
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:109:69: 109:75
                                         // + literal: Const { ty: fn(Result<Signature, crypto::Error>) -> Signature {Result::<Signature, crypto::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb23: {
        _53 = &mut _36;                  // scope 6 at tests/chain-executor-mock/src/generate_block.rs:110:9: 110:52
        _57 = &_6;                       // scope 6 at tests/chain-executor-mock/src/generate_block.rs:110:26: 110:32
        _56 = <H160 as Deref>::deref(move _57) -> [return: bb24, unwind: bb50]; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:110:24: 110:33
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:110:24: 110:33
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb24: {
        _55 = _56;                       // scope 6 at tests/chain-executor-mock/src/generate_block.rs:110:24: 110:40
        _54 = <&[u8] as Into<H160>>::into(move _55) -> [return: bb25, unwind: bb50]; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:110:24: 110:40
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:110:34: 110:38
                                         // + literal: Const { ty: fn(&[u8]) -> H160 {<&[u8] as Into<H160>>::into}, val: Value(<ZST>) }
    }

    bb25: {
        _58 = move _47;                  // scope 6 at tests/chain-executor-mock/src/generate_block.rs:110:42: 110:51
        _52 = HashMap::<H160, Signature>::insert(move _53, move _54, move _58) -> [return: bb26, unwind: bb50]; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:110:9: 110:52
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:110:17: 110:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<H160, Signature>, H160, Signature) -> std::option::Option<Signature> {HashMap::<H160, Signature>::insert}, val: Value(<ZST>) }
    }

    bb26: {
        _98 = const false;               // scope 6 at tests/chain-executor-mock/src/generate_block.rs:111:25: 111:32
        _59 = move _36;                  // scope 6 at tests/chain-executor-mock/src/generate_block.rs:111:25: 111:32
        drop((_34.3: std::collections::HashMap<cita_types::H160, crypto::Signature>)) -> [return: bb27, unwind: bb28]; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:111:9: 111:22
    }

    bb27: {
        _99 = const true;                // scope 6 at tests/chain-executor-mock/src/generate_block.rs:111:9: 111:22
        (_34.3: std::collections::HashMap<cita_types::H160, crypto::Signature>) = move _59; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:111:9: 111:22
        _61 = &_34;                      // scope 6 at tests/chain-executor-mock/src/generate_block.rs:112:34: 112:47
        _60 = <BftProof as Clone>::clone(move _61) -> [return: bb29, unwind: bb50]; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:112:34: 112:47
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:112:40: 112:45
                                         // + literal: Const { ty: for<'a> fn(&'a BftProof) -> BftProof {<BftProof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb28 (cleanup): {
        _99 = const true;                // scope 6 at tests/chain-executor-mock/src/generate_block.rs:111:9: 111:22
        (_34.3: std::collections::HashMap<cita_types::H160, crypto::Signature>) = move _59; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:111:9: 111:22
        goto -> bb50;                    // scope 6 at tests/chain-executor-mock/src/generate_block.rs:111:31: 111:32
    }

    bb29: {
        _97 = const true;                // scope 6 at tests/chain-executor-mock/src/generate_block.rs:112:46: 112:47
        _62 = _3 as usize (IntToInt);    // scope 7 at tests/chain-executor-mock/src/generate_block.rs:113:33: 113:48
        _63 = CheckedSub(_62, const 1_usize); // scope 7 at tests/chain-executor-mock/src/generate_block.rs:113:33: 113:52
        assert(!move (_63.1: bool), "attempt to compute `{} - {}`, which would overflow", move _62, const 1_usize) -> [success: bb30, unwind: bb53]; // scope 7 at tests/chain-executor-mock/src/generate_block.rs:113:33: 113:52
    }

    bb30: {
        (_60.1: usize) = move (_63.0: usize); // scope 7 at tests/chain-executor-mock/src/generate_block.rs:113:9: 113:52
        _67 = &mut _11;                  // scope 7 at tests/chain-executor-mock/src/generate_block.rs:114:9: 114:27
        _66 = libproto::Block::mut_header(move _67) -> [return: bb31, unwind: bb53]; // scope 7 at tests/chain-executor-mock/src/generate_block.rs:114:9: 114:27
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:114:15: 114:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Block) -> &'a mut libproto::BlockHeader {libproto::Block::mut_header}, val: Value(<ZST>) }
    }

    bb31: {
        _65 = _66;                       // scope 7 at tests/chain-executor-mock/src/generate_block.rs:114:9: 114:60
        _97 = const false;               // scope 7 at tests/chain-executor-mock/src/generate_block.rs:114:38: 114:52
        _69 = move _60;                  // scope 7 at tests/chain-executor-mock/src/generate_block.rs:114:38: 114:52
        _68 = <BftProof as Into<Proof>>::into(move _69) -> [return: bb32, unwind: bb53]; // scope 7 at tests/chain-executor-mock/src/generate_block.rs:114:38: 114:59
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:114:53: 114:57
                                         // + literal: Const { ty: fn(BftProof) -> Proof {<BftProof as Into<Proof>>::into}, val: Value(<ZST>) }
    }

    bb32: {
        _64 = libproto::BlockHeader::set_proof(move _65, move _68) -> [return: bb33, unwind: bb53]; // scope 7 at tests/chain-executor-mock/src/generate_block.rs:114:9: 114:60
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:114:28: 114:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, Proof) {libproto::BlockHeader::set_proof}, val: Value(<ZST>) }
    }

    bb33: {
        _73 = &_11;                      // scope 7 at tests/chain-executor-mock/src/generate_block.rs:115:33: 115:49
        _72 = libproto::Block::get_body(move _73) -> [return: bb34, unwind: bb53]; // scope 7 at tests/chain-executor-mock/src/generate_block.rs:115:33: 115:49
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:115:39: 115:47
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Block) -> &'a BlockBody {libproto::Block::get_body}, val: Value(<ZST>) }
    }

    bb34: {
        _71 = _72;                       // scope 7 at tests/chain-executor-mock/src/generate_block.rs:115:33: 115:69
        _70 = libproto::<impl BlockBody>::transactions_root(move _71) -> [return: bb35, unwind: bb53]; // scope 7 at tests/chain-executor-mock/src/generate_block.rs:115:33: 115:69
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:115:50: 115:67
                                         // + literal: Const { ty: for<'a> fn(&'a BlockBody) -> H256 {libproto::<impl BlockBody>::transactions_root}, val: Value(<ZST>) }
    }

    bb35: {
        _77 = &mut _11;                  // scope 8 at tests/chain-executor-mock/src/generate_block.rs:116:9: 117:26
        _76 = libproto::Block::mut_header(move _77) -> [return: bb36, unwind: bb53]; // scope 8 at tests/chain-executor-mock/src/generate_block.rs:116:9: 117:26
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:117:14: 117:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Block) -> &'a mut libproto::BlockHeader {libproto::Block::mut_header}, val: Value(<ZST>) }
    }

    bb36: {
        _75 = _76;                       // scope 8 at tests/chain-executor-mock/src/generate_block.rs:116:9: 118:63
        _81 = &_70;                      // scope 8 at tests/chain-executor-mock/src/generate_block.rs:118:36: 118:62
        _80 = <H256 as Deref>::deref(move _81) -> [return: bb37, unwind: bb53]; // scope 8 at tests/chain-executor-mock/src/generate_block.rs:118:36: 118:62
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:118:36: 118:62
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb37: {
        _79 = _80;                       // scope 8 at tests/chain-executor-mock/src/generate_block.rs:118:36: 118:62
        _78 = slice::<impl [u8]>::to_vec(move _79) -> [return: bb38, unwind: bb53]; // scope 8 at tests/chain-executor-mock/src/generate_block.rs:118:36: 118:62
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:118:54: 118:60
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb38: {
        _74 = libproto::BlockHeader::set_transactions_root(move _75, move _78) -> [return: bb39, unwind: bb53]; // scope 8 at tests/chain-executor-mock/src/generate_block.rs:116:9: 118:63
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:118:14: 118:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, Vec<u8>) {libproto::BlockHeader::set_transactions_root}, val: Value(<ZST>) }
    }

    bb39: {
        _82 = libproto::BlockWithProof::new() -> [return: bb40, unwind: bb53]; // scope 8 at tests/chain-executor-mock/src/generate_block.rs:119:29: 119:50
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:119:29: 119:48
                                         // + literal: Const { ty: fn() -> libproto::BlockWithProof {libproto::BlockWithProof::new}, val: Value(<ZST>) }
    }

    bb40: {
        _84 = &mut _82;                  // scope 9 at tests/chain-executor-mock/src/generate_block.rs:120:9: 120:33
        _100 = const false;              // scope 9 at tests/chain-executor-mock/src/generate_block.rs:120:27: 120:32
        _85 = move _11;                  // scope 9 at tests/chain-executor-mock/src/generate_block.rs:120:27: 120:32
        _83 = libproto::BlockWithProof::set_blk(move _84, move _85) -> [return: bb41, unwind: bb49]; // scope 9 at tests/chain-executor-mock/src/generate_block.rs:120:9: 120:33
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:120:19: 120:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockWithProof, libproto::Block) {libproto::BlockWithProof::set_blk}, val: Value(<ZST>) }
    }

    bb41: {
        _87 = &mut _82;                  // scope 9 at tests/chain-executor-mock/src/generate_block.rs:121:9: 121:42
        _99 = const false;               // scope 9 at tests/chain-executor-mock/src/generate_block.rs:121:29: 121:34
        _89 = move _34;                  // scope 9 at tests/chain-executor-mock/src/generate_block.rs:121:29: 121:34
        _88 = <BftProof as Into<Proof>>::into(move _89) -> [return: bb42, unwind: bb49]; // scope 9 at tests/chain-executor-mock/src/generate_block.rs:121:29: 121:41
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:121:35: 121:39
                                         // + literal: Const { ty: fn(BftProof) -> Proof {<BftProof as Into<Proof>>::into}, val: Value(<ZST>) }
    }

    bb42: {
        _86 = libproto::BlockWithProof::set_proof(move _87, move _88) -> [return: bb43, unwind: bb49]; // scope 9 at tests/chain-executor-mock/src/generate_block.rs:121:9: 121:42
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:121:19: 121:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockWithProof, Proof) {libproto::BlockWithProof::set_proof}, val: Value(<ZST>) }
    }

    bb43: {
        _92 = &_82;                      // scope 9 at tests/chain-executor-mock/src/generate_block.rs:123:28: 123:45
        _91 = <libproto::BlockWithProof as Clone>::clone(move _92) -> [return: bb44, unwind: bb49]; // scope 9 at tests/chain-executor-mock/src/generate_block.rs:123:28: 123:45
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:123:38: 123:43
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockWithProof) -> libproto::BlockWithProof {<libproto::BlockWithProof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb44: {
        _90 = <libproto::BlockWithProof as Into<Message>>::into(move _91) -> [return: bb45, unwind: bb49]; // scope 9 at tests/chain-executor-mock/src/generate_block.rs:123:28: 123:52
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:123:46: 123:50
                                         // + literal: Const { ty: fn(libproto::BlockWithProof) -> Message {<libproto::BlockWithProof as Into<Message>>::into}, val: Value(<ZST>) }
    }

    bb45: {
        _95 = move _90;                  // scope 10 at tests/chain-executor-mock/src/generate_block.rs:124:10: 124:13
        _94 = <Message as libproto::TryInto<Vec<u8>>>::try_into(move _95) -> [return: bb46, unwind: bb49]; // scope 10 at tests/chain-executor-mock/src/generate_block.rs:124:10: 124:24
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:124:14: 124:22
                                         // + literal: Const { ty: fn(Message) -> Result<Vec<u8>, <Message as libproto::TryInto<Vec<u8>>>::Error> {<Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb46: {
        _93 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _94) -> [return: bb47, unwind: bb49]; // scope 10 at tests/chain-executor-mock/src/generate_block.rs:124:10: 124:33
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/generate_block.rs:124:25: 124:31
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb47: {
        _96 = move _82;                  // scope 10 at tests/chain-executor-mock/src/generate_block.rs:124:35: 124:44
        _0 = (move _93, move _96);       // scope 10 at tests/chain-executor-mock/src/generate_block.rs:124:9: 124:45
        _97 = const false;               // scope 6 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
        drop(_37) -> [return: bb48, unwind: bb55]; // scope 4 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    }

    bb48: {
        _98 = const false;               // scope 3 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
        _99 = const false;               // scope 2 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
        _100 = const false;              // scope 1 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
        return;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:125:6: 125:6
    }

    bb49 (cleanup): {
        drop(_82) -> bb53;               // scope 8 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    }

    bb50 (cleanup): {
        drop(_37) -> bb55;               // scope 4 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    }

    bb51 (cleanup): {
        resume;                          // scope 0 at tests/chain-executor-mock/src/generate_block.rs:80:5: 125:6
    }

    bb52 (cleanup): {
        drop((_60.3: std::collections::HashMap<cita_types::H160, crypto::Signature>)) -> bb50; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    }

    bb53 (cleanup): {
        switchInt(_97) -> [0: bb50, otherwise: bb52]; // scope 6 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    }

    bb54 (cleanup): {
        drop(_36) -> bb57;               // scope 3 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    }

    bb55 (cleanup): {
        switchInt(_98) -> [0: bb57, otherwise: bb54]; // scope 3 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    }

    bb56 (cleanup): {
        drop((_34.3: std::collections::HashMap<cita_types::H160, crypto::Signature>)) -> bb59; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    }

    bb57 (cleanup): {
        switchInt(_99) -> [0: bb59, otherwise: bb56]; // scope 2 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    }

    bb58 (cleanup): {
        drop(_11) -> bb51;               // scope 1 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    }

    bb59 (cleanup): {
        switchInt(_100) -> [0: bb51, otherwise: bb58]; // scope 1 at tests/chain-executor-mock/src/generate_block.rs:125:5: 125:6
    }
}

const GENESIS_TIMESTAMP: u64 = {
    let mut _0: u64;                     // return place in scope 0 at tests/chain-executor-mock/src/main.rs:47:26: 47:29

    bb0: {
        _0 = const 1524000000_u64;       // scope 0 at tests/chain-executor-mock/src/main.rs:47:32: 47:45
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:47:1: 47:46
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at tests/chain-executor-mock/src/main.rs:49:11: 49:11
    let _1: std::option::Option<std::path::PathBuf>; // in scope 0 at tests/chain-executor-mock/src/main.rs:50:5: 50:26
    let mut _2: std::result::Result<std::path::PathBuf, dotenv::Error>; // in scope 0 at tests/chain-executor-mock/src/main.rs:50:5: 50:21
    let _3: ();                          // in scope 0 at tests/chain-executor-mock/src/main.rs:51:5: 51:43
    let _4: ();                          // in scope 0 at tests/chain-executor-mock/src/main.rs:52:5: 52:73
    let _5: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _9: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _10: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _11: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _12: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _13: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _14: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _15: &[&str];                // in scope 0 at tests/chain-executor-mock/src/main.rs:53:11: 53:37
    let _16: clap::ArgMatches<'_>;       // in scope 0 at tests/chain-executor-mock/src/main.rs:55:9: 55:16
    let mut _17: clap::App<'_, '_>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:55:19: 65:10
    let mut _18: clap::App<'_, '_>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:55:19: 57:28
    let mut _19: clap::App<'_, '_>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:55:19: 56:26
    let mut _20: clap::App<'_, '_>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:55:19: 55:50
    let mut _21: clap::Arg<'_, '_>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 64:47
    let mut _22: clap::Arg<'_, '_>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 63:35
    let mut _23: clap::Arg<'_, '_>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 62:32
    let mut _24: clap::Arg<'_, '_>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 61:35
    let mut _25: clap::Arg<'_, '_>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 60:28
    let mut _26: clap::Arg<'_, '_>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 59:46
    let _27: &str;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:59:34: 59:45
    let _28: &str;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:61:23: 61:34
    let _29: &str;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:64:23: 64:46
    let mut _31: std::option::Option<&str>; // in scope 0 at tests/chain-executor-mock/src/main.rs:68:26: 68:55
    let mut _32: &clap::ArgMatches<'_>;  // in scope 0 at tests/chain-executor-mock/src/main.rs:68:26: 68:55
    let _34: usize;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:70:5: 73:45
    let mut _35: std::result::Result<usize, std::io::Error>; // in scope 0 at tests/chain-executor-mock/src/main.rs:70:5: 72:47
    let mut _36: &mut std::fs::File;     // in scope 0 at tests/chain-executor-mock/src/main.rs:70:5: 72:47
    let mut _37: std::fs::File;          // in scope 0 at tests/chain-executor-mock/src/main.rs:70:5: 71:45
    let mut _38: std::result::Result<std::fs::File, std::io::Error>; // in scope 0 at tests/chain-executor-mock/src/main.rs:70:5: 70:35
    let mut _39: &str;                   // in scope 0 at tests/chain-executor-mock/src/main.rs:70:20: 70:34
    let _40: &str;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:71:17: 71:44
    let mut _41: &mut std::string::String; // in scope 0 at tests/chain-executor-mock/src/main.rs:72:25: 72:46
    let _42: &str;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:73:17: 73:44
    let mut _44: std::result::Result<serde_yaml::Value, serde_yaml::Error>; // in scope 0 at tests/chain-executor-mock/src/main.rs:75:9: 75:56
    let mut _45: &str;                   // in scope 0 at tests/chain-executor-mock/src/main.rs:75:30: 75:55
    let _46: &str;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:75:30: 75:55
    let mut _47: &std::string::String;   // in scope 0 at tests/chain-executor-mock/src/main.rs:75:30: 75:55
    let _48: &str;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:75:64: 75:87
    let mut _50: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _51: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _52: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _53: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _54: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _55: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _56: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _57: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _58: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _59: &[&str];                // in scope 0 at tests/chain-executor-mock/src/main.rs:77:11: 77:30
    let mut _60: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _61: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _62: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _63: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:77:32: 77:46
    let _64: &&str;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:77:32: 77:46
    let mut _67: (pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at tests/chain-executor-mock/src/main.rs:78:28: 78:48
    let mut _70: (pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at tests/chain-executor-mock/src/main.rs:79:28: 79:48
    let _71: ();                         // in scope 0 at tests/chain-executor-mock/src/main.rs:81:5: 86:6
    let _72: &str;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:82:9: 82:20
    let mut _73: std::vec::Vec<libproto::router::RoutingKey>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:23:37: 25:6
    let mut _74: std::boxed::Box<[libproto::router::RoutingKey]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _75: usize;                  // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _76: usize;                  // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _77: *mut u8;                // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _78: std::boxed::Box<[libproto::router::RoutingKey; 1]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _79: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _80: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _81: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _82: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at tests/chain-executor-mock/src/main.rs:84:9: 84:15
    let mut _83: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at tests/chain-executor-mock/src/main.rs:85:9: 85:15
    let mut _85: std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at tests/chain-executor-mock/src/main.rs:87:20: 87:45
    let _86: &str;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:87:53: 87:69
    let mut _88: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _89: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _90: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _91: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _92: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _93: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _94: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _95: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _96: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _97: &[&str];                // in scope 0 at tests/chain-executor-mock/src/main.rs:88:11: 88:24
    let mut _98: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _99: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _100: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _101: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:88:26: 88:34
    let _102: &std::string::String;      // in scope 0 at tests/chain-executor-mock/src/main.rs:88:26: 88:34
    let mut _104: std::sync::Mutex<std::time::SystemTime>; // in scope 0 at tests/chain-executor-mock/src/main.rs:89:29: 89:64
    let mut _105: std::time::SystemTime; // in scope 0 at tests/chain-executor-mock/src/main.rs:89:40: 89:63
    let mut _107: std::option::Option<cita_types::H256>; // in scope 0 at tests/chain-executor-mock/src/main.rs:91:19: 93:49
    let mut _108: std::option::Option<&str>; // in scope 0 at tests/chain-executor-mock/src/main.rs:91:19: 92:18
    let mut _109: &serde_yaml::Value;    // in scope 0 at tests/chain-executor-mock/src/main.rs:91:19: 92:18
    let _110: &serde_yaml::Value;        // in scope 0 at tests/chain-executor-mock/src/main.rs:91:19: 91:39
    let mut _111: &serde_yaml::Value;    // in scope 0 at tests/chain-executor-mock/src/main.rs:91:19: 91:28
    let mut _113: std::slice::IterMut<'_, serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
    let mut _114: &mut std::vec::Vec<serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
    let mut _115: std::option::Option<&mut std::vec::Vec<serde_yaml::Value>>; // in scope 0 at tests/chain-executor-mock/src/main.rs:96:18: 96:55
    let mut _116: &mut serde_yaml::Value; // in scope 0 at tests/chain-executor-mock/src/main.rs:96:18: 96:55
    let mut _117: &mut serde_yaml::Value; // in scope 0 at tests/chain-executor-mock/src/main.rs:96:18: 96:37
    let mut _118: &mut serde_yaml::Value; // in scope 0 at tests/chain-executor-mock/src/main.rs:96:18: 96:27
    let mut _120: std::option::Option<&mut serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
    let mut _121: &mut std::slice::IterMut<'_, serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
    let mut _122: isize;                 // in scope 0 at tests/chain-executor-mock/src/main.rs:96:5: 99:6
    let mut _125: std::option::Option<u64>; // in scope 0 at tests/chain-executor-mock/src/main.rs:97:28: 97:52
    let mut _126: &serde_yaml::Value;    // in scope 0 at tests/chain-executor-mock/src/main.rs:97:28: 97:52
    let _127: &serde_yaml::Value;        // in scope 0 at tests/chain-executor-mock/src/main.rs:97:28: 97:43
    let mut _128: &serde_yaml::Value;    // in scope 0 at tests/chain-executor-mock/src/main.rs:97:28: 97:33
    let _129: std::option::Option<&serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:98:9: 98:48
    let mut _130: &mut std::collections::HashMap<u64, &serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:98:9: 98:48
    let mut _131: u64;                   // in scope 0 at tests/chain-executor-mock/src/main.rs:98:28: 98:40
    let mut _132: &serde_yaml::Value;    // in scope 0 at tests/chain-executor-mock/src/main.rs:98:42: 98:47
    let mut _134: std::collections::hash_map::Keys<'_, u64, &serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:101:27: 101:45
    let mut _135: &std::collections::HashMap<u64, &serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:101:27: 101:45
    let _136: ();                        // in scope 0 at tests/chain-executor-mock/src/main.rs:102:9: 102:23
    let mut _137: &mut [&u64];           // in scope 0 at tests/chain-executor-mock/src/main.rs:102:9: 102:23
    let mut _138: &mut [&u64];           // in scope 0 at tests/chain-executor-mock/src/main.rs:102:9: 102:23
    let mut _139: &mut std::vec::Vec<&u64>; // in scope 0 at tests/chain-executor-mock/src/main.rs:102:9: 102:23
    let mut _141: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _142: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _143: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _144: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _145: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _146: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _147: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _148: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _149: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _150: &[&str];               // in scope 0 at tests/chain-executor-mock/src/main.rs:103:15: 103:33
    let mut _151: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _152: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _153: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _154: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:103:35: 103:42
    let _155: &std::vec::Vec<&u64>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:103:35: 103:42
    let mut _156: std::ops::RangeInclusive<u64>; // in scope 0 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
    let mut _157: std::ops::RangeInclusive<u64>; // in scope 0 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
    let mut _158: u64;                   // in scope 0 at tests/chain-executor-mock/src/main.rs:105:23: 105:47
    let mut _159: usize;                 // in scope 0 at tests/chain-executor-mock/src/main.rs:105:23: 105:40
    let mut _160: &std::collections::HashMap<u64, &serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:105:23: 105:40
    let mut _162: std::option::Option<u64>; // in scope 0 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
    let mut _163: &mut std::ops::RangeInclusive<u64>; // in scope 0 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
    let mut _164: isize;                 // in scope 0 at tests/chain-executor-mock/src/main.rs:105:5: 110:6
    let mut _166: bool;                  // in scope 0 at tests/chain-executor-mock/src/main.rs:106:12: 106:46
    let mut _167: bool;                  // in scope 0 at tests/chain-executor-mock/src/main.rs:106:13: 106:46
    let mut _168: &std::collections::HashMap<u64, &serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:106:13: 106:46
    let _169: &u64;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:106:38: 106:45
    let mut _171: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _172: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _173: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _174: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _175: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _176: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _177: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _178: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _179: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _180: &[&str];               // in scope 0 at tests/chain-executor-mock/src/main.rs:107:20: 107:46
    let mut _181: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _182: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _183: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _184: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:107:48: 107:54
    let _185: &u64;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:107:48: 107:54
    let mut _189: (std::string::String, std::vec::Vec<u8>); // in scope 0 at tests/chain-executor-mock/src/main.rs:114:27: 114:49
    let mut _190: std::result::Result<(std::string::String, std::vec::Vec<u8>), pubsub::crossbeam_channel::RecvError>; // in scope 0 at tests/chain-executor-mock/src/main.rs:114:27: 114:40
    let mut _191: &pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at tests/chain-executor-mock/src/main.rs:114:27: 114:40
    let mut _193: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _194: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _195: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _196: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _197: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _198: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _199: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _200: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _201: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _202: &[&str];               // in scope 0 at tests/chain-executor-mock/src/main.rs:115:15: 115:33
    let mut _203: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _204: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _205: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _206: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:115:35: 115:38
    let _207: &std::string::String;      // in scope 0 at tests/chain-executor-mock/src/main.rs:115:35: 115:38
    let mut _209: std::result::Result<libproto::Message, libproto::TryFromConvertError>; // in scope 0 at tests/chain-executor-mock/src/main.rs:116:23: 116:47
    let mut _210: &std::vec::Vec<u8>;    // in scope 0 at tests/chain-executor-mock/src/main.rs:116:41: 116:46
    let mut _211: bool;                  // in scope 0 at tests/chain-executor-mock/src/main.rs:118:12: 118:71
    let mut _212: &libproto::router::RoutingKey; // in scope 0 at tests/chain-executor-mock/src/main.rs:118:12: 118:34
    let _213: libproto::router::RoutingKey; // in scope 0 at tests/chain-executor-mock/src/main.rs:118:12: 118:34
    let mut _214: &std::string::String;  // in scope 0 at tests/chain-executor-mock/src/main.rs:118:29: 118:33
    let mut _216: std::option::Option<libproto::RichStatus>; // in scope 0 at tests/chain-executor-mock/src/main.rs:119:31: 119:53
    let mut _217: &mut libproto::Message; // in scope 0 at tests/chain-executor-mock/src/main.rs:119:31: 119:53
    let mut _219: u64;                   // in scope 0 at tests/chain-executor-mock/src/main.rs:120:26: 120:44
    let mut _220: (u64, bool);           // in scope 0 at tests/chain-executor-mock/src/main.rs:120:26: 120:48
    let mut _221: bool;                  // in scope 0 at tests/chain-executor-mock/src/main.rs:123:16: 123:65
    let mut _222: &std::option::Option<&serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:123:16: 123:65
    let _223: std::option::Option<&serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:123:16: 123:55
    let mut _224: &mut std::collections::HashMap<u64, &serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:123:16: 123:55
    let _225: &u64;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:123:35: 123:54
    let mut _227: u64;                   // in scope 0 at tests/chain-executor-mock/src/main.rs:124:38: 124:56
    let mut _229: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _230: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _231: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _232: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _233: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _234: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _235: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _236: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _237: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _238: &[&str];               // in scope 0 at tests/chain-executor-mock/src/main.rs:125:23: 125:44
    let mut _239: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _240: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _241: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _242: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:125:46: 125:60
    let _243: &u8;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:125:46: 125:60
    let mut _244: bool;                  // in scope 0 at tests/chain-executor-mock/src/main.rs:127:23: 127:39
    let mut _245: u8;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:127:23: 127:29
    let mut _246: (u8, bool);            // in scope 0 at tests/chain-executor-mock/src/main.rs:128:17: 128:28
    let mut _247: bool;                  // in scope 0 at tests/chain-executor-mock/src/main.rs:131:16: 131:27
    let mut _248: u8;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:131:16: 131:22
    let mut _250: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _251: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _252: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _253: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _254: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _255: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _256: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _257: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _258: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _259: &[&str];               // in scope 0 at tests/chain-executor-mock/src/main.rs:132:23: 132:52
    let mut _260: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _261: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _262: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _263: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:132:54: 132:60
    let _264: &u64;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:132:54: 132:60
    let mut _265: std::option::Option<&&serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:135:39: 135:63
    let mut _266: &std::collections::HashMap<u64, &serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:135:39: 135:63
    let _267: &u64;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:135:55: 135:62
    let mut _268: isize;                 // in scope 0 at tests/chain-executor-mock/src/main.rs:135:20: 135:36
    let mut _271: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _272: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _273: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _274: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _275: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _276: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _277: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _278: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _279: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _280: &[&str];               // in scope 0 at tests/chain-executor-mock/src/main.rs:137:21: 137:79
    let mut _281: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _282: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _283: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _284: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:138:21: 138:39
    let _285: &u64;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:138:21: 138:39
    let mut _286: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:138:41: 138:47
    let _287: &u64;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:138:41: 138:47
    let _288: ();                        // in scope 0 at tests/chain-executor-mock/src/main.rs:140:17: 147:18
    let mut _289: cita_types::H256;      // in scope 0 at tests/chain-executor-mock/src/main.rs:141:21: 141:56
    let mut _290: &[u8];                 // in scope 0 at tests/chain-executor-mock/src/main.rs:141:38: 141:55
    let _291: &[u8];                     // in scope 0 at tests/chain-executor-mock/src/main.rs:141:38: 141:55
    let _292: &std::vec::Vec<u8>;        // in scope 0 at tests/chain-executor-mock/src/main.rs:141:38: 141:55
    let _293: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at tests/chain-executor-mock/src/main.rs:143:21: 143:28
    let _294: &std::sync::Arc<std::sync::Mutex<std::time::SystemTime>>; // in scope 0 at tests/chain-executor-mock/src/main.rs:144:21: 144:38
    let _295: std::sync::Arc<std::sync::Mutex<std::time::SystemTime>>; // in scope 0 at tests/chain-executor-mock/src/main.rs:144:22: 144:38
    let mut _296: &std::sync::Arc<std::sync::Mutex<std::time::SystemTime>>; // in scope 0 at tests/chain-executor-mock/src/main.rs:144:22: 144:38
    let _297: &&&serde_yaml::Value;      // in scope 0 at tests/chain-executor-mock/src/main.rs:145:21: 145:32
    let _298: &cita_types::H256;         // in scope 0 at tests/chain-executor-mock/src/main.rs:146:21: 146:29
    let mut _300: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _301: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _302: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _303: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _304: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _305: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _306: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _307: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _308: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _309: &[&str];               // in scope 0 at tests/chain-executor-mock/src/main.rs:149:23: 149:61
    let mut _310: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _311: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _312: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _313: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:149:63: 149:69
    let _314: &u64;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:149:63: 149:69
    let mut _315: bool;                  // in scope 0 at tests/chain-executor-mock/src/main.rs:151:16: 151:38
    let mut _316: &std::collections::HashMap<u64, &serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:151:16: 151:38
    let mut _318: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _319: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _320: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _321: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _322: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _323: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _324: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _325: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _326: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _327: &[&str];               // in scope 0 at tests/chain-executor-mock/src/main.rs:152:23: 152:43
    let mut _329: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _330: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _331: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _332: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _333: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _334: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _335: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _336: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _337: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _338: &[&str];               // in scope 0 at tests/chain-executor-mock/src/main.rs:157:11: 157:21
    let mut _376: &logger::LogFavour<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:52:25: 52:72
    let mut _377: &&serde_yaml::Value;   // in scope 0 at tests/chain-executor-mock/src/main.rs:145:21: 145:32
    let mut _378: &serde_yaml::Value;    // in scope 0 at tests/chain-executor-mock/src/main.rs:145:21: 145:32
    let mut _379: bool;                  // in scope 0 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    let mut _380: bool;                  // in scope 0 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    let mut _381: bool;                  // in scope 0 at tests/chain-executor-mock/src/main.rs:65:9: 65:10
    let mut _382: *const [libproto::router::RoutingKey; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    scope 1 {
        debug lvl => _5;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _373: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _374: &[&str; 1];        // in scope 1 at tests/chain-executor-mock/src/main.rs:53:11: 53:37
        let mut _375: &log::LevelFilter; // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
    scope 2 {
        debug matches => _16;            // in scope 2 at tests/chain-executor-mock/src/main.rs:55:9: 55:16
        let _30: &str;                   // in scope 2 at tests/chain-executor-mock/src/main.rs:68:9: 68:23
        scope 3 {
            debug mock_data_path => _30; // in scope 3 at tests/chain-executor-mock/src/main.rs:68:9: 68:23
            let mut _33: std::string::String; // in scope 3 at tests/chain-executor-mock/src/main.rs:69:9: 69:29
            scope 4 {
                debug mock_data_string => _33; // in scope 4 at tests/chain-executor-mock/src/main.rs:69:9: 69:29
                let mut _43: serde_yaml::Value; // in scope 4 at tests/chain-executor-mock/src/main.rs:74:9: 74:22
                scope 5 {
                    debug mock_data => _43; // in scope 5 at tests/chain-executor-mock/src/main.rs:74:9: 74:22
                    let _49: log::Level; // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let _65: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 5 at tests/chain-executor-mock/src/main.rs:78:10: 78:16
                    let _66: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 5 at tests/chain-executor-mock/src/main.rs:78:18: 78:24
                    scope 6 {
                        debug lvl => _49; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        let mut _370: &(&str, &str, &str, u32); // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                        let mut _371: &[&str; 1]; // in scope 6 at tests/chain-executor-mock/src/main.rs:77:11: 77:30
                        let mut _372: &log::LevelFilter; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                    }
                    scope 7 {
                        debug tx_sub => _65; // in scope 7 at tests/chain-executor-mock/src/main.rs:78:10: 78:16
                        debug rx_sub => _66; // in scope 7 at tests/chain-executor-mock/src/main.rs:78:18: 78:24
                        let _68: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 7 at tests/chain-executor-mock/src/main.rs:79:10: 79:16
                        let _69: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 7 at tests/chain-executor-mock/src/main.rs:79:18: 79:24
                        scope 8 {
                            debug tx_pub => _68; // in scope 8 at tests/chain-executor-mock/src/main.rs:79:10: 79:16
                            debug rx_pub => _69; // in scope 8 at tests/chain-executor-mock/src/main.rs:79:18: 79:24
                            let _84: std::string::String; // in scope 8 at tests/chain-executor-mock/src/main.rs:87:9: 87:17
                            scope 9 {
                            }
                            scope 10 {
                                debug amqp_url => _84; // in scope 10 at tests/chain-executor-mock/src/main.rs:87:9: 87:17
                                let _87: log::Level; // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                let _103: std::sync::Arc<std::sync::Mutex<std::time::SystemTime>>; // in scope 10 at tests/chain-executor-mock/src/main.rs:89:9: 89:17
                                scope 11 {
                                    debug lvl => _87; // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                    let mut _367: &(&str, &str, &str, u32); // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                    let mut _368: &[&str; 1]; // in scope 11 at tests/chain-executor-mock/src/main.rs:88:11: 88:24
                                    let mut _369: &log::LevelFilter; // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                }
                                scope 12 {
                                    debug sys_time => _103; // in scope 12 at tests/chain-executor-mock/src/main.rs:89:9: 89:17
                                    let _106: cita_types::H256; // in scope 12 at tests/chain-executor-mock/src/main.rs:91:9: 91:16
                                    scope 13 {
                                        debug privkey => _106; // in scope 13 at tests/chain-executor-mock/src/main.rs:91:9: 91:16
                                        let mut _112: std::collections::HashMap<u64, &serde_yaml::Value>; // in scope 13 at tests/chain-executor-mock/src/main.rs:95:9: 95:24
                                        scope 14 {
                                            debug mock_blocks => _112; // in scope 14 at tests/chain-executor-mock/src/main.rs:95:9: 95:24
                                            let mut _119: std::slice::IterMut<'_, serde_yaml::Value>; // in scope 14 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
                                            let mut _133: std::vec::Vec<&u64>; // in scope 14 at tests/chain-executor-mock/src/main.rs:101:13: 101:24
                                            let mut _161: std::ops::RangeInclusive<u64>; // in scope 14 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
                                            let mut _186: u8; // in scope 14 at tests/chain-executor-mock/src/main.rs:112:9: 112:19
                                            scope 15 {
                                                debug iter => _119; // in scope 15 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
                                                let _123: &mut serde_yaml::Value; // in scope 15 at tests/chain-executor-mock/src/main.rs:96:9: 96:14
                                                scope 16 {
                                                    debug block => _123; // in scope 16 at tests/chain-executor-mock/src/main.rs:96:9: 96:14
                                                    let _124: u64; // in scope 16 at tests/chain-executor-mock/src/main.rs:97:13: 97:25
                                                    scope 17 {
                                                        debug block_number => _124; // in scope 17 at tests/chain-executor-mock/src/main.rs:97:13: 97:25
                                                    }
                                                }
                                            }
                                            scope 18 {
                                                debug numbers => _133; // in scope 18 at tests/chain-executor-mock/src/main.rs:101:13: 101:24
                                                let _140: log::Level; // in scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                scope 19 {
                                                    debug lvl => _140; // in scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                    let mut _364: &(&str, &str, &str, u32); // in scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                                    let mut _365: &[&str; 1]; // in scope 19 at tests/chain-executor-mock/src/main.rs:103:15: 103:33
                                                    let mut _366: &log::LevelFilter; // in scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                                }
                                            }
                                            scope 20 {
                                                debug iter => _161; // in scope 20 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
                                                let _165: u64; // in scope 20 at tests/chain-executor-mock/src/main.rs:105:9: 105:15
                                                scope 21 {
                                                    debug number => _165; // in scope 21 at tests/chain-executor-mock/src/main.rs:105:9: 105:15
                                                    let _170: log::Level; // in scope 21 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                    scope 22 {
                                                        debug lvl => _170; // in scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                        let mut _361: &(&str, &str, &str, u32); // in scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                                        let mut _362: &[&str; 1]; // in scope 22 at tests/chain-executor-mock/src/main.rs:107:20: 107:46
                                                        let mut _363: &log::LevelFilter; // in scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                                    }
                                                }
                                            }
                                            scope 23 {
                                                debug repeat => _186; // in scope 23 at tests/chain-executor-mock/src/main.rs:112:9: 112:19
                                                let _187: std::string::String; // in scope 23 at tests/chain-executor-mock/src/main.rs:114:14: 114:17
                                                let _188: std::vec::Vec<u8>; // in scope 23 at tests/chain-executor-mock/src/main.rs:114:19: 114:23
                                                let _328: log::Level; // in scope 23 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                scope 24 {
                                                    debug key => _187; // in scope 24 at tests/chain-executor-mock/src/main.rs:114:14: 114:17
                                                    debug body => _188; // in scope 24 at tests/chain-executor-mock/src/main.rs:114:19: 114:23
                                                    let _192: log::Level; // in scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                    let mut _208: libproto::Message; // in scope 24 at tests/chain-executor-mock/src/main.rs:116:13: 116:20
                                                    scope 25 {
                                                        debug lvl => _192; // in scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                        let mut _358: &(&str, &str, &str, u32); // in scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                                        let mut _359: &[&str; 1]; // in scope 25 at tests/chain-executor-mock/src/main.rs:115:15: 115:33
                                                        let mut _360: &log::LevelFilter; // in scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                                    }
                                                    scope 26 {
                                                        debug msg => _208; // in scope 26 at tests/chain-executor-mock/src/main.rs:116:13: 116:20
                                                        let _215: libproto::RichStatus; // in scope 26 at tests/chain-executor-mock/src/main.rs:119:17: 119:28
                                                        let mut _357: &libproto::router::RoutingKey; // in scope 26 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
                                                        scope 27 {
                                                            debug rich_status => _215; // in scope 27 at tests/chain-executor-mock/src/main.rs:119:17: 119:28
                                                            let _218: u64; // in scope 27 at tests/chain-executor-mock/src/main.rs:120:17: 120:23
                                                            scope 28 {
                                                                debug height => _218; // in scope 28 at tests/chain-executor-mock/src/main.rs:120:17: 120:23
                                                                let _226: u8; // in scope 28 at tests/chain-executor-mock/src/main.rs:124:21: 124:35
                                                                let _249: log::Level; // in scope 28 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                let _299: log::Level; // in scope 28 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                let _317: log::Level; // in scope 28 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                scope 29 {
                                                                    debug current_height => _226; // in scope 29 at tests/chain-executor-mock/src/main.rs:124:21: 124:35
                                                                    let _228: log::Level; // in scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                    scope 30 {
                                                                        debug lvl => _228; // in scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                        let mut _354: &(&str, &str, &str, u32); // in scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                                                        let mut _355: &[&str; 1]; // in scope 30 at tests/chain-executor-mock/src/main.rs:125:23: 125:44
                                                                        let mut _356: &log::LevelFilter; // in scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                                                    }
                                                                }
                                                                scope 31 {
                                                                    debug lvl => _249; // in scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                    let mut _351: &(&str, &str, &str, u32); // in scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                                                    let mut _352: &[&str; 2]; // in scope 31 at tests/chain-executor-mock/src/main.rs:132:23: 132:52
                                                                    let mut _353: &log::LevelFilter; // in scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                                                }
                                                                scope 32 {
                                                                    debug mock_block => _269; // in scope 32 at tests/chain-executor-mock/src/main.rs:135:25: 135:35
                                                                    let _269: &&serde_yaml::Value; // in scope 32 at tests/chain-executor-mock/src/main.rs:135:25: 135:35
                                                                    let _270: log::Level; // in scope 32 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                    scope 33 {
                                                                        debug lvl => _270; // in scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                        let mut _345: &(&str, &str, &str, u32); // in scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                                                        let mut _346: &[&str; 2]; // in scope 33 at tests/chain-executor-mock/src/main.rs:137:21: 137:79
                                                                        let mut _347: &log::LevelFilter; // in scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                                                    }
                                                                }
                                                                scope 34 {
                                                                    debug lvl => _299; // in scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                    let mut _348: &(&str, &str, &str, u32); // in scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                                                    let mut _349: &[&str; 1]; // in scope 34 at tests/chain-executor-mock/src/main.rs:149:23: 149:61
                                                                    let mut _350: &log::LevelFilter; // in scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                                                }
                                                                scope 35 {
                                                                    debug lvl => _317; // in scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                    let mut _342: &(&str, &str, &str, u32); // in scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                                                    let mut _343: &[&str; 1]; // in scope 35 at tests/chain-executor-mock/src/main.rs:152:23: 152:43
                                                                    let mut _344: &log::LevelFilter; // in scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 36 {
                                                    debug lvl => _328; // in scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                    let mut _339: &(&str, &str, &str, u32); // in scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                                    let mut _340: &[&str; 1]; // in scope 36 at tests/chain-executor-mock/src/main.rs:157:11: 157:21
                                                    let mut _341: &log::LevelFilter; // in scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _380 = const false;              // scope 0 at tests/chain-executor-mock/src/main.rs:50:5: 50:26
        _381 = const false;              // scope 0 at tests/chain-executor-mock/src/main.rs:50:5: 50:26
        _379 = const false;              // scope 0 at tests/chain-executor-mock/src/main.rs:50:5: 50:26
        _2 = dotenv() -> bb1;            // scope 0 at tests/chain-executor-mock/src/main.rs:50:5: 50:21
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:50:5: 50:19
                                         // + literal: Const { ty: fn() -> Result<PathBuf, dotenv::Error> {dotenv}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Result::<PathBuf, dotenv::Error>::ok(move _2) -> bb2; // scope 0 at tests/chain-executor-mock/src/main.rs:50:5: 50:26
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:50:22: 50:24
                                         // + literal: Const { ty: fn(Result<PathBuf, dotenv::Error>) -> std::option::Option<PathBuf> {Result::<PathBuf, dotenv::Error>::ok}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at tests/chain-executor-mock/src/main.rs:50:26: 50:27
    }

    bb3: {
        _3 = set_var::<&str, &str>(const "RUST_BACKTRACE", const "full") -> bb4; // scope 0 at tests/chain-executor-mock/src/main.rs:51:5: 51:43
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:51:5: 51:17
                                         // + literal: Const { ty: fn(&str, &str) {set_var::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:51:18: 51:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:51:36: 51:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _376 = const _;                  // scope 0 at tests/chain-executor-mock/src/main.rs:52:25: 52:72
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:52:25: 52:72
                                         // + literal: Const { ty: &LogFavour<'_>, val: Unevaluated(main, [], Some(promoted[37])) }
        _4 = init_config(_376) -> bb5;   // scope 0 at tests/chain-executor-mock/src/main.rs:52:5: 52:73
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:52:5: 52:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a LogFavour<'b>) {init_config}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = log::Level::Info;           // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _8 = &_5;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _375 = const _;                  // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[36])) }
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, _375) -> bb9; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _6 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb8;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _10 = &_5;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _12 = log::max_level() -> bb10;  // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb8: {
        switchInt(move _6) -> [0: bb14, otherwise: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        switchInt(move _7) -> [0: bb6, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        _11 = &_12;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _9 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _10, move _11) -> bb11; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb11: {
        _6 = move _9;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb8;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb12: {
        _374 = const _;                  // scope 1 at tests/chain-executor-mock/src/main.rs:53:11: 53:37
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:53:11: 53:37
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[35])) }
        _15 = _374 as &[&str] (Pointer(Unsize)); // scope 1 at tests/chain-executor-mock/src/main.rs:53:11: 53:37
        _14 = Arguments::<'_>::new_const(move _15) -> bb13; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb13: {
        _373 = const _;                  // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[34])) }
        _13 = log::__private_api_log(move _14, _5, _373) -> bb14; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb14: {
        _20 = App::<'_, '_>::new::<&str>(const "Chain executor mock") -> bb15; // scope 0 at tests/chain-executor-mock/src/main.rs:55:19: 55:50
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:55:19: 55:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> App<'_, '_> {App::<'_, '_>::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:55:28: 55:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _19 = App::<'_, '_>::version::<&str>(move _20, const "0.1.0") -> bb16; // scope 0 at tests/chain-executor-mock/src/main.rs:55:19: 56:26
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:56:10: 56:17
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::version::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:56:18: 56:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _18 = App::<'_, '_>::author::<&str>(move _19, const "Rivtower") -> bb17; // scope 0 at tests/chain-executor-mock/src/main.rs:55:19: 57:28
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:57:10: 57:16
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::author::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:57:17: 57:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _381 = const true;               // scope 0 at tests/chain-executor-mock/src/main.rs:57:27: 57:28
        _27 = const "mock-data";         // scope 0 at tests/chain-executor-mock/src/main.rs:59:34: 59:45
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:59:34: 59:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _26 = Arg::<'_, '_>::with_name(_27) -> [return: bb18, unwind: bb260]; // scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 59:46
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:59:13: 59:33
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&str) -> Arg<'_, '_> {Arg::<'_, '_>::with_name}, val: Value(<ZST>) }
    }

    bb18: {
        _25 = Arg::<'_, '_>::short::<&str>(move _26, const "m") -> [return: bb19, unwind: bb260]; // scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 60:28
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:60:18: 60:23
                                         // + literal: Const { ty: fn(Arg<'_, '_>, &str) -> Arg<'_, '_> {Arg::<'_, '_>::short::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:60:24: 60:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        _28 = const "mock-data";         // scope 0 at tests/chain-executor-mock/src/main.rs:61:23: 61:34
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:61:23: 61:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = Arg::<'_, '_>::long(move _25, _28) -> [return: bb20, unwind: bb260]; // scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 61:35
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:61:18: 61:22
                                         // + literal: Const { ty: fn(Arg<'_, '_>, &str) -> Arg<'_, '_> {Arg::<'_, '_>::long}, val: Value(<ZST>) }
    }

    bb20: {
        _23 = Arg::<'_, '_>::required(move _24, const true) -> [return: bb21, unwind: bb260]; // scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 62:32
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:62:18: 62:26
                                         // + literal: Const { ty: fn(Arg<'_, '_>, bool) -> Arg<'_, '_> {Arg::<'_, '_>::required}, val: Value(<ZST>) }
    }

    bb21: {
        _22 = Arg::<'_, '_>::takes_value(move _23, const true) -> [return: bb22, unwind: bb260]; // scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 63:35
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:63:18: 63:29
                                         // + literal: Const { ty: fn(Arg<'_, '_>, bool) -> Arg<'_, '_> {Arg::<'_, '_>::takes_value}, val: Value(<ZST>) }
    }

    bb22: {
        _29 = const "YAML format mock data"; // scope 0 at tests/chain-executor-mock/src/main.rs:64:23: 64:46
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:64:23: 64:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _21 = Arg::<'_, '_>::help(move _22, _29) -> [return: bb23, unwind: bb260]; // scope 0 at tests/chain-executor-mock/src/main.rs:59:13: 64:47
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:64:18: 64:22
                                         // + literal: Const { ty: fn(Arg<'_, '_>, &str) -> Arg<'_, '_> {Arg::<'_, '_>::help}, val: Value(<ZST>) }
    }

    bb23: {
        _381 = const false;              // scope 0 at tests/chain-executor-mock/src/main.rs:55:19: 65:10
        _17 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _18, move _21) -> [return: bb24, unwind: bb260]; // scope 0 at tests/chain-executor-mock/src/main.rs:55:19: 65:10
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:58:10: 58:13
                                         // + literal: Const { ty: fn(App<'_, '_>, Arg<'_, '_>) -> App<'_, '_> {App::<'_, '_>::arg::<Arg<'_, '_>>}, val: Value(<ZST>) }
    }

    bb24: {
        _381 = const false;              // scope 0 at tests/chain-executor-mock/src/main.rs:65:9: 65:10
        _16 = App::<'_, '_>::get_matches(move _17) -> bb25; // scope 0 at tests/chain-executor-mock/src/main.rs:55:19: 66:23
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:66:10: 66:21
                                         // + literal: Const { ty: fn(App<'_, '_>) -> ArgMatches<'_> {App::<'_, '_>::get_matches}, val: Value(<ZST>) }
    }

    bb25: {
        _32 = &_16;                      // scope 2 at tests/chain-executor-mock/src/main.rs:68:26: 68:55
        _31 = ArgMatches::<'_>::value_of::<&str>(move _32, const "mock-data") -> [return: bb26, unwind: bb253]; // scope 2 at tests/chain-executor-mock/src/main.rs:68:26: 68:55
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:68:34: 68:42
                                         // + literal: Const { ty: for<'a> fn(&'a ArgMatches<'_>, &str) -> std::option::Option<&'a str> {ArgMatches::<'_>::value_of::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:68:43: 68:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb26: {
        _30 = std::option::Option::<&str>::unwrap(move _31) -> [return: bb27, unwind: bb253]; // scope 2 at tests/chain-executor-mock/src/main.rs:68:26: 68:64
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:68:56: 68:62
                                         // + literal: Const { ty: fn(std::option::Option<&str>) -> &str {std::option::Option::<&str>::unwrap}, val: Value(<ZST>) }
    }

    bb27: {
        _33 = std::string::String::new() -> [return: bb28, unwind: bb253]; // scope 3 at tests/chain-executor-mock/src/main.rs:69:32: 69:45
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:69:32: 69:43
                                         // + literal: Const { ty: fn() -> std::string::String {std::string::String::new}, val: Value(<ZST>) }
    }

    bb28: {
        _39 = _30;                       // scope 4 at tests/chain-executor-mock/src/main.rs:70:20: 70:34
        _38 = std::fs::File::open::<&str>(move _39) -> [return: bb29, unwind: bb252]; // scope 4 at tests/chain-executor-mock/src/main.rs:70:5: 70:35
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:70:5: 70:19
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&str) -> Result<std::fs::File, std::io::Error> {std::fs::File::open::<&str>}, val: Value(<ZST>) }
    }

    bb29: {
        _40 = const "Open mock data file error"; // scope 4 at tests/chain-executor-mock/src/main.rs:71:17: 71:44
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:71:17: 71:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _37 = Result::<std::fs::File, std::io::Error>::expect(move _38, _40) -> [return: bb30, unwind: bb252]; // scope 4 at tests/chain-executor-mock/src/main.rs:70:5: 71:45
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:71:10: 71:16
                                         // + literal: Const { ty: for<'a> fn(Result<std::fs::File, std::io::Error>, &'a str) -> std::fs::File {Result::<std::fs::File, std::io::Error>::expect}, val: Value(<ZST>) }
    }

    bb30: {
        _36 = &mut _37;                  // scope 4 at tests/chain-executor-mock/src/main.rs:70:5: 72:47
        _41 = &mut _33;                  // scope 4 at tests/chain-executor-mock/src/main.rs:72:25: 72:46
        _35 = <std::fs::File as std::io::Read>::read_to_string(move _36, _41) -> [return: bb31, unwind: bb251]; // scope 4 at tests/chain-executor-mock/src/main.rs:70:5: 72:47
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:72:10: 72:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fs::File, &'b mut std::string::String) -> Result<usize, std::io::Error> {<std::fs::File as std::io::Read>::read_to_string}, val: Value(<ZST>) }
    }

    bb31: {
        _42 = const "Read mock data file error"; // scope 4 at tests/chain-executor-mock/src/main.rs:73:17: 73:44
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:73:17: 73:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _34 = Result::<usize, std::io::Error>::expect(move _35, _42) -> [return: bb32, unwind: bb251]; // scope 4 at tests/chain-executor-mock/src/main.rs:70:5: 73:45
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:73:10: 73:16
                                         // + literal: Const { ty: for<'a> fn(Result<usize, std::io::Error>, &'a str) -> usize {Result::<usize, std::io::Error>::expect}, val: Value(<ZST>) }
    }

    bb32: {
        drop(_37) -> [return: bb33, unwind: bb252]; // scope 4 at tests/chain-executor-mock/src/main.rs:73:45: 73:46
    }

    bb33: {
        _47 = &_33;                      // scope 4 at tests/chain-executor-mock/src/main.rs:75:30: 75:55
        _46 = std::string::String::as_str(move _47) -> [return: bb34, unwind: bb252]; // scope 4 at tests/chain-executor-mock/src/main.rs:75:30: 75:55
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:75:47: 75:53
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a str {std::string::String::as_str}, val: Value(<ZST>) }
    }

    bb34: {
        _45 = _46;                       // scope 4 at tests/chain-executor-mock/src/main.rs:75:30: 75:55
        _44 = serde_yaml::from_str::<Value>(move _45) -> [return: bb35, unwind: bb252]; // scope 4 at tests/chain-executor-mock/src/main.rs:75:9: 75:56
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:75:9: 75:29
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<Value, serde_yaml::Error> {serde_yaml::from_str::<Value>}, val: Value(<ZST>) }
    }

    bb35: {
        _48 = const "Parse mock data error"; // scope 4 at tests/chain-executor-mock/src/main.rs:75:64: 75:87
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:75:64: 75:87
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _43 = Result::<Value, serde_yaml::Error>::expect(move _44, _48) -> [return: bb36, unwind: bb252]; // scope 4 at tests/chain-executor-mock/src/main.rs:75:9: 75:88
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:75:57: 75:63
                                         // + literal: Const { ty: for<'a> fn(Result<Value, serde_yaml::Error>, &'a str) -> Value {Result::<Value, serde_yaml::Error>::expect}, val: Value(<ZST>) }
    }

    bb36: {
        _49 = log::Level::Info;          // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _52 = &_49;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _372 = const _;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[33])) }
        _51 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _52, _372) -> [return: bb40, unwind: bb250]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb37: {
        _50 = const false;               // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb39;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb38: {
        _54 = &_49;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _56 = log::max_level() -> [return: bb41, unwind: bb250]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb39: {
        switchInt(move _50) -> [0: bb46, otherwise: bb43]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb40: {
        switchInt(move _51) -> [0: bb37, otherwise: bb38]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb41: {
        _55 = &_56;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _53 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _54, move _55) -> [return: bb42, unwind: bb250]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb42: {
        _50 = move _53;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb39;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb43: {
        _371 = const _;                  // scope 6 at tests/chain-executor-mock/src/main.rs:77:11: 77:30
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:77:11: 77:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[32])) }
        _59 = _371 as &[&str] (Pointer(Unsize)); // scope 6 at tests/chain-executor-mock/src/main.rs:77:11: 77:30
        _64 = &_30;                      // scope 6 at tests/chain-executor-mock/src/main.rs:77:32: 77:46
        _63 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_64) -> [return: bb44, unwind: bb250]; // scope 6 at tests/chain-executor-mock/src/main.rs:77:32: 77:46
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:77:32: 77:46
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb44: {
        _62 = [move _63];                // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _61 = &_62;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _60 = _61 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _58 = Arguments::<'_>::new_v1(move _59, move _60) -> [return: bb45, unwind: bb250]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb45: {
        _370 = const _;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[31])) }
        _57 = log::__private_api_log(move _58, _49, _370) -> [return: bb261, unwind: bb250]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb46: {
        _67 = unbounded::<(std::string::String, Vec<u8>)>() -> [return: bb47, unwind: bb250]; // scope 5 at tests/chain-executor-mock/src/main.rs:78:28: 78:48
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:78:28: 78:46
                                         // + literal: Const { ty: fn() -> (pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {unbounded::<(std::string::String, Vec<u8>)>}, val: Value(<ZST>) }
    }

    bb47: {
        _380 = const true;               // scope 5 at tests/chain-executor-mock/src/main.rs:78:10: 78:16
        _65 = move (_67.0: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 5 at tests/chain-executor-mock/src/main.rs:78:10: 78:16
        _66 = move (_67.1: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 5 at tests/chain-executor-mock/src/main.rs:78:18: 78:24
        _70 = unbounded::<(std::string::String, Vec<u8>)>() -> [return: bb48, unwind: bb249]; // scope 7 at tests/chain-executor-mock/src/main.rs:79:28: 79:48
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:79:28: 79:46
                                         // + literal: Const { ty: fn() -> (pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {unbounded::<(std::string::String, Vec<u8>)>}, val: Value(<ZST>) }
    }

    bb48: {
        _68 = move (_70.0: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 7 at tests/chain-executor-mock/src/main.rs:79:10: 79:16
        _379 = const true;               // scope 7 at tests/chain-executor-mock/src/main.rs:79:18: 79:24
        _69 = move (_70.1: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 7 at tests/chain-executor-mock/src/main.rs:79:18: 79:24
        _72 = const "consensus";         // scope 8 at tests/chain-executor-mock/src/main.rs:82:9: 82:20
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:82:9: 82:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _75 = const 2_usize;             // scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _76 = const 1_usize;             // scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _77 = alloc::alloc::exchange_malloc(move _75, move _76) -> [return: bb49, unwind: bb256]; // scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb49: {
        _78 = ShallowInitBox(move _77, [libproto::router::RoutingKey; 1]); // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _80 = const libproto::router::SubModules::Chain; // scope 8 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x02)) }
        _81 = const libproto::router::MsgType::RichStatus; // scope 8 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x06)) }
        _79 = RoutingKey(move _80, move _81); // scope 8 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _382 = (((_78.0: std::ptr::Unique<[libproto::router::RoutingKey; 1]>).0: std::ptr::NonNull<[libproto::router::RoutingKey; 1]>).0: *const [libproto::router::RoutingKey; 1]); // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        (*_382) = [move _79];            // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        _74 = move _78 as std::boxed::Box<[libproto::router::RoutingKey]> (Pointer(Unsize)); // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _73 = slice::<impl [RoutingKey]>::into_vec::<std::alloc::Global>(move _74) -> [return: bb50, unwind: bb256]; // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(Box<[RoutingKey]>) -> Vec<RoutingKey> {slice::<impl [RoutingKey]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb50: {
        _380 = const false;              // scope 8 at tests/chain-executor-mock/src/main.rs:84:9: 84:15
        _82 = move _65;                  // scope 8 at tests/chain-executor-mock/src/main.rs:84:9: 84:15
        _379 = const false;              // scope 8 at tests/chain-executor-mock/src/main.rs:85:9: 85:15
        _83 = move _69;                  // scope 8 at tests/chain-executor-mock/src/main.rs:85:9: 85:15
        _71 = start_pubsub::<RoutingKey>(_72, move _73, move _82, move _83) -> [return: bb51, unwind: bb256]; // scope 8 at tests/chain-executor-mock/src/main.rs:81:5: 86:6
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:81:5: 81:17
                                         // + literal: Const { ty: for<'a> fn(&'a str, Vec<RoutingKey>, pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {start_pubsub::<RoutingKey>}, val: Value(<ZST>) }
    }

    bb51: {
        _85 = std::env::var::<&str>(const "AMQP_URL") -> [return: bb52, unwind: bb256]; // scope 8 at tests/chain-executor-mock/src/main.rs:87:20: 87:45
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:87:20: 87:33
                                         // + literal: Const { ty: fn(&str) -> Result<std::string::String, VarError> {std::env::var::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:87:34: 87:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb52: {
        _86 = const "AMQP_URL empty";    // scope 8 at tests/chain-executor-mock/src/main.rs:87:53: 87:69
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:87:53: 87:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _84 = Result::<std::string::String, VarError>::expect(move _85, _86) -> [return: bb53, unwind: bb256]; // scope 8 at tests/chain-executor-mock/src/main.rs:87:20: 87:70
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:87:46: 87:52
                                         // + literal: Const { ty: for<'a> fn(Result<std::string::String, VarError>, &'a str) -> std::string::String {Result::<std::string::String, VarError>::expect}, val: Value(<ZST>) }
    }

    bb53: {
        _87 = log::Level::Info;          // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _90 = &_87;                      // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _369 = const _;                  // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[30])) }
        _89 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _90, _369) -> [return: bb57, unwind: bb247]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb54: {
        _88 = const false;               // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb56;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb55: {
        _92 = &_87;                      // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _94 = log::max_level() -> [return: bb58, unwind: bb247]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb56: {
        switchInt(move _88) -> [0: bb63, otherwise: bb60]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb57: {
        switchInt(move _89) -> [0: bb54, otherwise: bb55]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb58: {
        _93 = &_94;                      // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _91 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _92, move _93) -> [return: bb59, unwind: bb247]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb59: {
        _88 = move _91;                  // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb56;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb60: {
        _368 = const _;                  // scope 11 at tests/chain-executor-mock/src/main.rs:88:11: 88:24
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:88:11: 88:24
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[29])) }
        _97 = _368 as &[&str] (Pointer(Unsize)); // scope 11 at tests/chain-executor-mock/src/main.rs:88:11: 88:24
        _102 = &_84;                     // scope 11 at tests/chain-executor-mock/src/main.rs:88:26: 88:34
        _101 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_102) -> [return: bb61, unwind: bb247]; // scope 11 at tests/chain-executor-mock/src/main.rs:88:26: 88:34
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:88:26: 88:34
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb61: {
        _100 = [move _101];              // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _99 = &_100;                     // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _98 = _99 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _96 = Arguments::<'_>::new_v1(move _97, move _98) -> [return: bb62, unwind: bb247]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb62: {
        _367 = const _;                  // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[28])) }
        _95 = log::__private_api_log(move _96, _87, _367) -> [return: bb262, unwind: bb247]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb63: {
        _105 = SystemTime::now() -> [return: bb64, unwind: bb247]; // scope 10 at tests/chain-executor-mock/src/main.rs:89:40: 89:63
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:89:40: 89:61
                                         // + literal: Const { ty: fn() -> SystemTime {SystemTime::now}, val: Value(<ZST>) }
    }

    bb64: {
        _104 = Mutex::<SystemTime>::new(move _105) -> [return: bb65, unwind: bb247]; // scope 10 at tests/chain-executor-mock/src/main.rs:89:29: 89:64
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:89:29: 89:39
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(SystemTime) -> Mutex<SystemTime> {Mutex::<SystemTime>::new}, val: Value(<ZST>) }
    }

    bb65: {
        _103 = Arc::<Mutex<SystemTime>>::new(move _104) -> [return: bb66, unwind: bb247]; // scope 10 at tests/chain-executor-mock/src/main.rs:89:20: 89:65
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:89:20: 89:28
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(Mutex<SystemTime>) -> Arc<Mutex<SystemTime>> {Arc::<Mutex<SystemTime>>::new}, val: Value(<ZST>) }
    }

    bb66: {
        _111 = &_43;                     // scope 12 at tests/chain-executor-mock/src/main.rs:91:19: 91:28
        _110 = <Value as std::ops::Index<&str>>::index(move _111, const "privkey") -> [return: bb67, unwind: bb246]; // scope 12 at tests/chain-executor-mock/src/main.rs:91:19: 91:39
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:91:19: 91:39
                                         // + literal: Const { ty: for<'a> fn(&'a Value, &str) -> &'a <Value as std::ops::Index<&str>>::Output {<Value as std::ops::Index<&str>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:91:29: 91:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb67: {
        _109 = _110;                     // scope 12 at tests/chain-executor-mock/src/main.rs:91:19: 92:18
        _108 = Value::as_str(move _109) -> [return: bb68, unwind: bb246]; // scope 12 at tests/chain-executor-mock/src/main.rs:91:19: 92:18
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:92:10: 92:16
                                         // + literal: Const { ty: for<'a> fn(&'a Value) -> std::option::Option<&'a str> {Value::as_str}, val: Value(<ZST>) }
    }

    bb68: {
        _107 = std::option::Option::<&str>::and_then::<H256, [closure@tests/chain-executor-mock/src/main.rs:93:19: 93:22]>(move _108, const ZeroSized: [closure@tests/chain-executor-mock/src/main.rs:93:19: 93:22]) -> [return: bb69, unwind: bb246]; // scope 12 at tests/chain-executor-mock/src/main.rs:91:19: 93:49
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:93:10: 93:18
                                         // + literal: Const { ty: fn(std::option::Option<&str>, [closure@tests/chain-executor-mock/src/main.rs:93:19: 93:22]) -> std::option::Option<H256> {std::option::Option::<&str>::and_then::<H256, [closure@tests/chain-executor-mock/src/main.rs:93:19: 93:22]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@tests/chain-executor-mock/src/main.rs:93:19: 93:22], val: Value(<ZST>) }
    }

    bb69: {
        _106 = std::option::Option::<H256>::unwrap(move _107) -> [return: bb70, unwind: bb246]; // scope 12 at tests/chain-executor-mock/src/main.rs:91:19: 94:18
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:94:10: 94:16
                                         // + literal: Const { ty: fn(std::option::Option<H256>) -> H256 {std::option::Option::<H256>::unwrap}, val: Value(<ZST>) }
    }

    bb70: {
        _112 = HashMap::<u64, &Value>::new() -> [return: bb71, unwind: bb246]; // scope 13 at tests/chain-executor-mock/src/main.rs:95:61: 95:75
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:95:61: 95:73
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn() -> HashMap<u64, &Value> {HashMap::<u64, &Value>::new}, val: Value(<ZST>) }
    }

    bb71: {
        _118 = &mut _43;                 // scope 14 at tests/chain-executor-mock/src/main.rs:96:18: 96:27
        _117 = <Value as IndexMut<&str>>::index_mut(move _118, const "blocks") -> [return: bb72, unwind: bb245]; // scope 14 at tests/chain-executor-mock/src/main.rs:96:18: 96:37
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:96:18: 96:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut Value, &str) -> &'a mut <Value as std::ops::Index<&str>>::Output {<Value as IndexMut<&str>>::index_mut}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:96:28: 96:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb72: {
        _116 = _117;                     // scope 14 at tests/chain-executor-mock/src/main.rs:96:18: 96:55
        _115 = Value::as_sequence_mut(move _116) -> [return: bb73, unwind: bb245]; // scope 14 at tests/chain-executor-mock/src/main.rs:96:18: 96:55
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:96:38: 96:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut Value) -> std::option::Option<&'a mut Vec<Value>> {Value::as_sequence_mut}, val: Value(<ZST>) }
    }

    bb73: {
        _114 = std::option::Option::<&mut Vec<Value>>::unwrap(move _115) -> [return: bb74, unwind: bb245]; // scope 14 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:96:56: 96:62
                                         // + literal: Const { ty: fn(std::option::Option<&mut Vec<Value>>) -> &mut Vec<Value> {std::option::Option::<&mut Vec<Value>>::unwrap}, val: Value(<ZST>) }
    }

    bb74: {
        _113 = <&mut Vec<Value> as IntoIterator>::into_iter(move _114) -> [return: bb75, unwind: bb245]; // scope 14 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:96:18: 96:64
                                         // + literal: Const { ty: fn(&mut Vec<Value>) -> <&mut Vec<Value> as IntoIterator>::IntoIter {<&mut Vec<Value> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb75: {
        _119 = move _113;                // scope 14 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
        goto -> bb76;                    // scope 15 at tests/chain-executor-mock/src/main.rs:96:5: 99:6
    }

    bb76: {
        _121 = &mut _119;                // scope 15 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
        _120 = <std::slice::IterMut<'_, Value> as Iterator>::next(_121) -> [return: bb77, unwind: bb245]; // scope 15 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:96:18: 96:64
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::IterMut<'_, Value>) -> std::option::Option<<std::slice::IterMut<'_, Value> as Iterator>::Item> {<std::slice::IterMut<'_, Value> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb77: {
        _122 = discriminant(_120);       // scope 15 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
        switchInt(move _122) -> [0: bb80, 1: bb78, otherwise: bb79]; // scope 15 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
    }

    bb78: {
        _123 = move ((_120 as Some).0: &mut serde_yaml::Value); // scope 15 at tests/chain-executor-mock/src/main.rs:96:9: 96:14
        _128 = &(*_123);                 // scope 16 at tests/chain-executor-mock/src/main.rs:97:28: 97:33
        _127 = <Value as std::ops::Index<&str>>::index(move _128, const "number") -> [return: bb81, unwind: bb245]; // scope 16 at tests/chain-executor-mock/src/main.rs:97:28: 97:43
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:97:28: 97:43
                                         // + literal: Const { ty: for<'a> fn(&'a Value, &str) -> &'a <Value as std::ops::Index<&str>>::Output {<Value as std::ops::Index<&str>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:97:34: 97:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb79: {
        unreachable;                     // scope 15 at tests/chain-executor-mock/src/main.rs:96:18: 96:64
    }

    bb80: {
        _135 = &_112;                    // scope 14 at tests/chain-executor-mock/src/main.rs:101:27: 101:45
        _134 = HashMap::<u64, &Value>::keys(move _135) -> [return: bb84, unwind: bb245]; // scope 14 at tests/chain-executor-mock/src/main.rs:101:27: 101:45
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:101:39: 101:43
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<u64, &Value>) -> std::collections::hash_map::Keys<'a, u64, &Value> {HashMap::<u64, &Value>::keys}, val: Value(<ZST>) }
    }

    bb81: {
        _126 = _127;                     // scope 16 at tests/chain-executor-mock/src/main.rs:97:28: 97:52
        _125 = Value::as_u64(move _126) -> [return: bb82, unwind: bb245]; // scope 16 at tests/chain-executor-mock/src/main.rs:97:28: 97:52
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:97:44: 97:50
                                         // + literal: Const { ty: for<'a> fn(&'a Value) -> std::option::Option<u64> {Value::as_u64}, val: Value(<ZST>) }
    }

    bb82: {
        _124 = std::option::Option::<u64>::unwrap(move _125) -> [return: bb83, unwind: bb245]; // scope 16 at tests/chain-executor-mock/src/main.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:97:53: 97:59
                                         // + literal: Const { ty: fn(std::option::Option<u64>) -> u64 {std::option::Option::<u64>::unwrap}, val: Value(<ZST>) }
    }

    bb83: {
        _130 = &mut _112;                // scope 17 at tests/chain-executor-mock/src/main.rs:98:9: 98:48
        _131 = _124;                     // scope 17 at tests/chain-executor-mock/src/main.rs:98:28: 98:40
        _132 = &(*_123);                 // scope 17 at tests/chain-executor-mock/src/main.rs:98:42: 98:47
        _129 = HashMap::<u64, &Value>::insert(move _130, move _131, move _132) -> [return: bb263, unwind: bb245]; // scope 17 at tests/chain-executor-mock/src/main.rs:98:9: 98:48
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:98:21: 98:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<u64, &Value>, u64, &Value) -> std::option::Option<&Value> {HashMap::<u64, &Value>::insert}, val: Value(<ZST>) }
    }

    bb84: {
        _133 = <std::collections::hash_map::Keys<'_, u64, &Value> as Iterator>::collect::<Vec<&u64>>(move _134) -> [return: bb85, unwind: bb245]; // scope 14 at tests/chain-executor-mock/src/main.rs:101:27: 101:68
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:101:46: 101:53
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn(std::collections::hash_map::Keys<'_, u64, &Value>) -> Vec<&u64> {<std::collections::hash_map::Keys<'_, u64, &Value> as Iterator>::collect::<Vec<&u64>>}, val: Value(<ZST>) }
    }

    bb85: {
        _139 = &mut _133;                // scope 18 at tests/chain-executor-mock/src/main.rs:102:9: 102:23
        _138 = <Vec<&u64> as DerefMut>::deref_mut(move _139) -> [return: bb86, unwind: bb244]; // scope 18 at tests/chain-executor-mock/src/main.rs:102:9: 102:23
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:102:9: 102:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<&u64>) -> &'a mut <Vec<&u64> as Deref>::Target {<Vec<&u64> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb86: {
        _137 = _138;                     // scope 18 at tests/chain-executor-mock/src/main.rs:102:9: 102:23
        _136 = slice::<impl [&u64]>::sort(move _137) -> [return: bb87, unwind: bb244]; // scope 18 at tests/chain-executor-mock/src/main.rs:102:9: 102:23
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:102:17: 102:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut [&u64]) {slice::<impl [&u64]>::sort}, val: Value(<ZST>) }
    }

    bb87: {
        _140 = log::Level::Info;         // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _143 = &_140;                    // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _366 = const _;                  // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[27])) }
        _142 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _143, _366) -> [return: bb91, unwind: bb244]; // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb88: {
        _141 = const false;              // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb90;                    // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb89: {
        _145 = &_140;                    // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _147 = log::max_level() -> [return: bb92, unwind: bb244]; // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb90: {
        switchInt(move _141) -> [0: bb97, otherwise: bb94]; // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb91: {
        switchInt(move _142) -> [0: bb88, otherwise: bb89]; // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb92: {
        _146 = &_147;                    // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _144 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _145, move _146) -> [return: bb93, unwind: bb244]; // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb93: {
        _141 = move _144;                // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb90;                    // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb94: {
        _365 = const _;                  // scope 19 at tests/chain-executor-mock/src/main.rs:103:15: 103:33
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:103:15: 103:33
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[26])) }
        _150 = _365 as &[&str] (Pointer(Unsize)); // scope 19 at tests/chain-executor-mock/src/main.rs:103:15: 103:33
        _155 = &_133;                    // scope 19 at tests/chain-executor-mock/src/main.rs:103:35: 103:42
        _154 = core::fmt::ArgumentV1::<'_>::new_debug::<Vec<&u64>>(_155) -> [return: bb95, unwind: bb244]; // scope 19 at tests/chain-executor-mock/src/main.rs:103:35: 103:42
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:103:35: 103:42
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: for<'b> fn(&'b Vec<&u64>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Vec<&u64>>}, val: Value(<ZST>) }
    }

    bb95: {
        _153 = [move _154];              // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _152 = &_153;                    // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _151 = _152 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _149 = Arguments::<'_>::new_v1(move _150, move _151) -> [return: bb96, unwind: bb244]; // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb96: {
        _364 = const _;                  // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[25])) }
        _148 = log::__private_api_log(move _149, _140, _364) -> [return: bb264, unwind: bb244]; // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb97: {
        drop(_133) -> [return: bb98, unwind: bb245]; // scope 14 at tests/chain-executor-mock/src/main.rs:104:5: 104:6
    }

    bb98: {
        _160 = &_112;                    // scope 14 at tests/chain-executor-mock/src/main.rs:105:23: 105:40
        _159 = HashMap::<u64, &Value>::len(move _160) -> [return: bb99, unwind: bb245]; // scope 14 at tests/chain-executor-mock/src/main.rs:105:23: 105:40
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:105:35: 105:38
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<u64, &Value>) -> usize {HashMap::<u64, &Value>::len}, val: Value(<ZST>) }
    }

    bb99: {
        _158 = move _159 as u64 (IntToInt); // scope 14 at tests/chain-executor-mock/src/main.rs:105:23: 105:47
        _157 = RangeInclusive::<u64>::new(const 1_u64, move _158) -> [return: bb100, unwind: bb245]; // scope 14 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:105:19: 105:47
                                         // + literal: Const { ty: fn(u64, u64) -> RangeInclusive<u64> {RangeInclusive::<u64>::new}, val: Value(<ZST>) }
    }

    bb100: {
        _156 = <RangeInclusive<u64> as IntoIterator>::into_iter(move _157) -> [return: bb101, unwind: bb245]; // scope 14 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:105:19: 105:47
                                         // + literal: Const { ty: fn(RangeInclusive<u64>) -> <RangeInclusive<u64> as IntoIterator>::IntoIter {<RangeInclusive<u64> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb101: {
        _161 = move _156;                // scope 14 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
        goto -> bb102;                   // scope 20 at tests/chain-executor-mock/src/main.rs:105:5: 110:6
    }

    bb102: {
        _163 = &mut _161;                // scope 20 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
        _162 = <RangeInclusive<u64> as Iterator>::next(_163) -> [return: bb103, unwind: bb245]; // scope 20 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:105:19: 105:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u64>) -> std::option::Option<<RangeInclusive<u64> as Iterator>::Item> {<RangeInclusive<u64> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb103: {
        _164 = discriminant(_162);       // scope 20 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
        switchInt(move _164) -> [0: bb106, 1: bb104, otherwise: bb105]; // scope 20 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
    }

    bb104: {
        _165 = ((_162 as Some).0: u64);  // scope 20 at tests/chain-executor-mock/src/main.rs:105:9: 105:15
        _168 = &_112;                    // scope 21 at tests/chain-executor-mock/src/main.rs:106:13: 106:46
        _169 = &_165;                    // scope 21 at tests/chain-executor-mock/src/main.rs:106:38: 106:45
        _167 = HashMap::<u64, &Value>::contains_key::<u64>(move _168, _169) -> [return: bb107, unwind: bb245]; // scope 21 at tests/chain-executor-mock/src/main.rs:106:13: 106:46
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:106:25: 106:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HashMap<u64, &Value>, &'b u64) -> bool {HashMap::<u64, &Value>::contains_key::<u64>}, val: Value(<ZST>) }
    }

    bb105: {
        unreachable;                     // scope 20 at tests/chain-executor-mock/src/main.rs:105:19: 105:47
    }

    bb106: {
        _186 = const 0_u8;               // scope 14 at tests/chain-executor-mock/src/main.rs:112:22: 112:25
        goto -> bb119;                   // scope 23 at tests/chain-executor-mock/src/main.rs:113:5: 156:6
    }

    bb107: {
        _166 = Not(move _167);           // scope 21 at tests/chain-executor-mock/src/main.rs:106:12: 106:46
        switchInt(move _166) -> [0: bb102, otherwise: bb108]; // scope 21 at tests/chain-executor-mock/src/main.rs:106:12: 106:46
    }

    bb108: {
        _170 = log::Level::Error;        // scope 21 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _173 = &_170;                    // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _363 = const _;                  // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[24])) }
        _172 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _173, _363) -> [return: bb112, unwind: bb245]; // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb109: {
        _171 = const false;              // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb111;                   // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb110: {
        _175 = &_170;                    // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _177 = log::max_level() -> [return: bb113, unwind: bb245]; // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb111: {
        switchInt(move _171) -> [0: bb118, otherwise: bb115]; // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb112: {
        switchInt(move _172) -> [0: bb109, otherwise: bb110]; // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb113: {
        _176 = &_177;                    // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _174 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _175, move _176) -> [return: bb114, unwind: bb245]; // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb114: {
        _171 = move _174;                // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb111;                   // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb115: {
        _362 = const _;                  // scope 22 at tests/chain-executor-mock/src/main.rs:107:20: 107:46
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:107:20: 107:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[23])) }
        _180 = _362 as &[&str] (Pointer(Unsize)); // scope 22 at tests/chain-executor-mock/src/main.rs:107:20: 107:46
        _185 = &_165;                    // scope 22 at tests/chain-executor-mock/src/main.rs:107:48: 107:54
        _184 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_185) -> [return: bb116, unwind: bb245]; // scope 22 at tests/chain-executor-mock/src/main.rs:107:48: 107:54
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:107:48: 107:54
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb116: {
        _183 = [move _184];              // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _182 = &_183;                    // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _181 = _182 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _179 = Arguments::<'_>::new_v1(move _180, move _181) -> [return: bb117, unwind: bb245]; // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb117: {
        _361 = const _;                  // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[22])) }
        _178 = log::__private_api_log(move _179, _170, _361) -> [return: bb265, unwind: bb245]; // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb118: {
        drop(_112) -> [return: bb231, unwind: bb246]; // scope 13 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb119: {
        _191 = &_66;                     // scope 23 at tests/chain-executor-mock/src/main.rs:114:27: 114:40
        _190 = pubsub::crossbeam_channel::Receiver::<(std::string::String, Vec<u8>)>::recv(move _191) -> [return: bb120, unwind: bb245]; // scope 23 at tests/chain-executor-mock/src/main.rs:114:27: 114:40
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:114:34: 114:38
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) -> Result<(std::string::String, Vec<u8>), pubsub::crossbeam_channel::RecvError> {pubsub::crossbeam_channel::Receiver::<(std::string::String, Vec<u8>)>::recv}, val: Value(<ZST>) }
    }

    bb120: {
        _189 = Result::<(std::string::String, Vec<u8>), pubsub::crossbeam_channel::RecvError>::unwrap(move _190) -> [return: bb121, unwind: bb245]; // scope 23 at tests/chain-executor-mock/src/main.rs:114:27: 114:49
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:114:41: 114:47
                                         // + literal: Const { ty: fn(Result<(std::string::String, Vec<u8>), pubsub::crossbeam_channel::RecvError>) -> (std::string::String, Vec<u8>) {Result::<(std::string::String, Vec<u8>), pubsub::crossbeam_channel::RecvError>::unwrap}, val: Value(<ZST>) }
    }

    bb121: {
        _187 = move (_189.0: std::string::String); // scope 23 at tests/chain-executor-mock/src/main.rs:114:14: 114:17
        _188 = move (_189.1: std::vec::Vec<u8>); // scope 23 at tests/chain-executor-mock/src/main.rs:114:19: 114:23
        _192 = log::Level::Info;         // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _195 = &_192;                    // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _360 = const _;                  // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[21])) }
        _194 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _195, _360) -> [return: bb125, unwind: bb242]; // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb122: {
        _193 = const false;              // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb124;                   // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb123: {
        _197 = &_192;                    // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _199 = log::max_level() -> [return: bb126, unwind: bb242]; // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb124: {
        switchInt(move _193) -> [0: bb131, otherwise: bb128]; // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb125: {
        switchInt(move _194) -> [0: bb122, otherwise: bb123]; // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb126: {
        _198 = &_199;                    // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _196 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _197, move _198) -> [return: bb127, unwind: bb242]; // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb127: {
        _193 = move _196;                // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb124;                   // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb128: {
        _359 = const _;                  // scope 25 at tests/chain-executor-mock/src/main.rs:115:15: 115:33
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:115:15: 115:33
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[20])) }
        _202 = _359 as &[&str] (Pointer(Unsize)); // scope 25 at tests/chain-executor-mock/src/main.rs:115:15: 115:33
        _207 = &_187;                    // scope 25 at tests/chain-executor-mock/src/main.rs:115:35: 115:38
        _206 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_207) -> [return: bb129, unwind: bb242]; // scope 25 at tests/chain-executor-mock/src/main.rs:115:35: 115:38
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:115:35: 115:38
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb129: {
        _205 = [move _206];              // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _204 = &_205;                    // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _203 = _204 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _201 = Arguments::<'_>::new_v1(move _202, move _203) -> [return: bb130, unwind: bb242]; // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb130: {
        _358 = const _;                  // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[19])) }
        _200 = log::__private_api_log(move _201, _192, _358) -> [return: bb266, unwind: bb242]; // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb131: {
        _210 = &_188;                    // scope 24 at tests/chain-executor-mock/src/main.rs:116:41: 116:46
        _209 = <Message as libproto::TryFrom<&Vec<u8>>>::try_from(move _210) -> [return: bb132, unwind: bb242]; // scope 24 at tests/chain-executor-mock/src/main.rs:116:23: 116:47
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:116:23: 116:40
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: fn(&Vec<u8>) -> Result<Message, <Message as libproto::TryFrom<&Vec<u8>>>::Error> {<Message as libproto::TryFrom<&Vec<u8>>>::try_from}, val: Value(<ZST>) }
    }

    bb132: {
        _208 = Result::<Message, TryFromConvertError>::unwrap(move _209) -> [return: bb133, unwind: bb242]; // scope 24 at tests/chain-executor-mock/src/main.rs:116:23: 116:56
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:116:48: 116:54
                                         // + literal: Const { ty: fn(Result<Message, TryFromConvertError>) -> Message {Result::<Message, TryFromConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb133: {
        _214 = &_187;                    // scope 26 at tests/chain-executor-mock/src/main.rs:118:29: 118:33
        _213 = <RoutingKey as From<&std::string::String>>::from(move _214) -> [return: bb134, unwind: bb241]; // scope 26 at tests/chain-executor-mock/src/main.rs:118:12: 118:34
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:118:12: 118:28
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: fn(&std::string::String) -> RoutingKey {<RoutingKey as From<&std::string::String>>::from}, val: Value(<ZST>) }
    }

    bb134: {
        _212 = &_213;                    // scope 26 at tests/chain-executor-mock/src/main.rs:118:12: 118:34
        _357 = const _;                  // scope 26 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
                                         // + literal: Const { ty: &RoutingKey, val: Unevaluated(main, [], Some(promoted[18])) }
        _211 = <RoutingKey as PartialEq>::eq(move _212, _357) -> [return: bb135, unwind: bb241]; // scope 26 at tests/chain-executor-mock/src/main.rs:118:12: 118:71
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:118:12: 118:71
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RoutingKey, &'b RoutingKey) -> bool {<RoutingKey as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb135: {
        switchInt(move _211) -> [0: bb208, otherwise: bb136]; // scope 26 at tests/chain-executor-mock/src/main.rs:118:12: 118:71
    }

    bb136: {
        _217 = &mut _208;                // scope 26 at tests/chain-executor-mock/src/main.rs:119:31: 119:53
        _216 = Message::take_rich_status(move _217) -> [return: bb137, unwind: bb241]; // scope 26 at tests/chain-executor-mock/src/main.rs:119:31: 119:53
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:119:35: 119:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut Message) -> std::option::Option<libproto::RichStatus> {Message::take_rich_status}, val: Value(<ZST>) }
    }

    bb137: {
        _215 = std::option::Option::<libproto::RichStatus>::unwrap(move _216) -> [return: bb138, unwind: bb241]; // scope 26 at tests/chain-executor-mock/src/main.rs:119:31: 119:62
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:119:54: 119:60
                                         // + literal: Const { ty: fn(std::option::Option<libproto::RichStatus>) -> libproto::RichStatus {std::option::Option::<libproto::RichStatus>::unwrap}, val: Value(<ZST>) }
    }

    bb138: {
        _219 = (_215.1: u64);            // scope 27 at tests/chain-executor-mock/src/main.rs:120:26: 120:44
        _220 = CheckedAdd(_219, const 1_u64); // scope 27 at tests/chain-executor-mock/src/main.rs:120:26: 120:48
        assert(!move (_220.1: bool), "attempt to compute `{} + {}`, which would overflow", move _219, const 1_u64) -> [success: bb139, unwind: bb240]; // scope 27 at tests/chain-executor-mock/src/main.rs:120:26: 120:48
    }

    bb139: {
        _218 = move (_220.0: u64);       // scope 27 at tests/chain-executor-mock/src/main.rs:120:26: 120:48
        _224 = &mut _112;                // scope 28 at tests/chain-executor-mock/src/main.rs:123:16: 123:55
        _225 = &(_215.1: u64);           // scope 28 at tests/chain-executor-mock/src/main.rs:123:35: 123:54
        _223 = HashMap::<u64, &Value>::remove::<u64>(move _224, _225) -> [return: bb140, unwind: bb240]; // scope 28 at tests/chain-executor-mock/src/main.rs:123:16: 123:55
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:123:28: 123:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut HashMap<u64, &Value>, &'b u64) -> std::option::Option<&Value> {HashMap::<u64, &Value>::remove::<u64>}, val: Value(<ZST>) }
    }

    bb140: {
        _222 = &_223;                    // scope 28 at tests/chain-executor-mock/src/main.rs:123:16: 123:65
        _221 = std::option::Option::<&Value>::is_some(move _222) -> [return: bb141, unwind: bb240]; // scope 28 at tests/chain-executor-mock/src/main.rs:123:16: 123:65
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:123:56: 123:63
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<&Value>) -> bool {std::option::Option::<&Value>::is_some}, val: Value(<ZST>) }
    }

    bb141: {
        switchInt(move _221) -> [0: bb153, otherwise: bb142]; // scope 28 at tests/chain-executor-mock/src/main.rs:123:16: 123:65
    }

    bb142: {
        _227 = (_215.1: u64);            // scope 28 at tests/chain-executor-mock/src/main.rs:124:38: 124:56
        _226 = move _227 as u8 (IntToInt); // scope 28 at tests/chain-executor-mock/src/main.rs:124:38: 124:62
        _228 = log::Level::Info;         // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _231 = &_228;                    // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _356 = const _;                  // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[17])) }
        _230 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _231, _356) -> [return: bb146, unwind: bb240]; // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb143: {
        _229 = const false;              // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb145;                   // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb144: {
        _233 = &_228;                    // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _235 = log::max_level() -> [return: bb147, unwind: bb240]; // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb145: {
        switchInt(move _229) -> [0: bb152, otherwise: bb149]; // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb146: {
        switchInt(move _230) -> [0: bb143, otherwise: bb144]; // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb147: {
        _234 = &_235;                    // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _232 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _233, move _234) -> [return: bb148, unwind: bb240]; // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb148: {
        _229 = move _232;                // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb145;                   // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb149: {
        _355 = const _;                  // scope 30 at tests/chain-executor-mock/src/main.rs:125:23: 125:44
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:125:23: 125:44
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[16])) }
        _238 = _355 as &[&str] (Pointer(Unsize)); // scope 30 at tests/chain-executor-mock/src/main.rs:125:23: 125:44
        _243 = &_226;                    // scope 30 at tests/chain-executor-mock/src/main.rs:125:46: 125:60
        _242 = core::fmt::ArgumentV1::<'_>::new_debug::<u8>(_243) -> [return: bb150, unwind: bb240]; // scope 30 at tests/chain-executor-mock/src/main.rs:125:46: 125:60
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:125:46: 125:60
                                         // + user_ty: UserType(26)
                                         // + literal: Const { ty: for<'b> fn(&'b u8) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<u8>}, val: Value(<ZST>) }
    }

    bb150: {
        _241 = [move _242];              // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _240 = &_241;                    // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _239 = _240 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _237 = Arguments::<'_>::new_v1(move _238, move _239) -> [return: bb151, unwind: bb240]; // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(25)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb151: {
        _354 = const _;                  // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[15])) }
        _236 = log::__private_api_log(move _237, _228, _354) -> [return: bb267, unwind: bb240]; // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb152: {
        _186 = const 0_u8;               // scope 29 at tests/chain-executor-mock/src/main.rs:126:17: 126:27
        goto -> bb156;                   // scope 28 at tests/chain-executor-mock/src/main.rs:123:13: 129:14
    }

    bb153: {
        _245 = _186;                     // scope 28 at tests/chain-executor-mock/src/main.rs:127:23: 127:29
        _244 = Lt(move _245, const _);   // scope 28 at tests/chain-executor-mock/src/main.rs:127:23: 127:39
        switchInt(move _244) -> [0: bb156, otherwise: bb154]; // scope 28 at tests/chain-executor-mock/src/main.rs:127:23: 127:39
    }

    bb154: {
        _246 = CheckedAdd(_186, const 1_u8); // scope 28 at tests/chain-executor-mock/src/main.rs:128:17: 128:28
        assert(!move (_246.1: bool), "attempt to compute `{} + {}`, which would overflow", _186, const 1_u8) -> [success: bb155, unwind: bb240]; // scope 28 at tests/chain-executor-mock/src/main.rs:128:17: 128:28
    }

    bb155: {
        _186 = move (_246.0: u8);        // scope 28 at tests/chain-executor-mock/src/main.rs:128:17: 128:28
        goto -> bb156;                   // scope 28 at tests/chain-executor-mock/src/main.rs:127:20: 129:14
    }

    bb156: {
        _248 = _186;                     // scope 28 at tests/chain-executor-mock/src/main.rs:131:16: 131:22
        _247 = Ge(move _248, const 3_u8); // scope 28 at tests/chain-executor-mock/src/main.rs:131:16: 131:27
        switchInt(move _247) -> [0: bb167, otherwise: bb157]; // scope 28 at tests/chain-executor-mock/src/main.rs:131:16: 131:27
    }

    bb157: {
        _249 = log::Level::Warn;         // scope 28 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _252 = &_249;                    // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _353 = const _;                  // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[14])) }
        _251 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _252, _353) -> [return: bb161, unwind: bb240]; // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb158: {
        _250 = const false;              // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb160;                   // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb159: {
        _254 = &_249;                    // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _256 = log::max_level() -> [return: bb162, unwind: bb240]; // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb160: {
        switchInt(move _250) -> [0: bb167, otherwise: bb164]; // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb161: {
        switchInt(move _251) -> [0: bb158, otherwise: bb159]; // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb162: {
        _255 = &_256;                    // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _253 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _254, move _255) -> [return: bb163, unwind: bb240]; // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb163: {
        _250 = move _253;                // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb160;                   // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb164: {
        _352 = const _;                  // scope 31 at tests/chain-executor-mock/src/main.rs:132:23: 132:52
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:132:23: 132:52
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[13])) }
        _259 = _352 as &[&str] (Pointer(Unsize)); // scope 31 at tests/chain-executor-mock/src/main.rs:132:23: 132:52
        _264 = &_218;                    // scope 31 at tests/chain-executor-mock/src/main.rs:132:54: 132:60
        _263 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_264) -> [return: bb165, unwind: bb240]; // scope 31 at tests/chain-executor-mock/src/main.rs:132:54: 132:60
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:132:54: 132:60
                                         // + user_ty: UserType(28)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb165: {
        _262 = [move _263];              // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _261 = &_262;                    // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _260 = _261 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _258 = Arguments::<'_>::new_v1(move _259, move _260) -> [return: bb166, unwind: bb240]; // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(27)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb166: {
        _351 = const _;                  // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[12])) }
        _257 = log::__private_api_log(move _258, _249, _351) -> [return: bb268, unwind: bb240]; // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb167: {
        _266 = &_112;                    // scope 32 at tests/chain-executor-mock/src/main.rs:135:39: 135:63
        _267 = &_218;                    // scope 32 at tests/chain-executor-mock/src/main.rs:135:55: 135:62
        _265 = HashMap::<u64, &Value>::get::<u64>(move _266, _267) -> [return: bb168, unwind: bb240]; // scope 32 at tests/chain-executor-mock/src/main.rs:135:39: 135:63
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:135:51: 135:54
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HashMap<u64, &Value>, &'b u64) -> std::option::Option<&'a &Value> {HashMap::<u64, &Value>::get::<u64>}, val: Value(<ZST>) }
    }

    bb168: {
        _268 = discriminant(_265);       // scope 32 at tests/chain-executor-mock/src/main.rs:135:20: 135:36
        switchInt(move _268) -> [1: bb169, otherwise: bb185]; // scope 32 at tests/chain-executor-mock/src/main.rs:135:20: 135:36
    }

    bb169: {
        _269 = ((_265 as Some).0: &&serde_yaml::Value); // scope 32 at tests/chain-executor-mock/src/main.rs:135:25: 135:35
        _270 = log::Level::Info;         // scope 32 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _273 = &_270;                    // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _347 = const _;                  // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[8])) }
        _272 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _273, _347) -> [return: bb173, unwind: bb240]; // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb170: {
        _271 = const false;              // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb172;                   // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb171: {
        _275 = &_270;                    // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _277 = log::max_level() -> [return: bb174, unwind: bb240]; // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb172: {
        switchInt(move _271) -> [0: bb180, otherwise: bb176]; // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb173: {
        switchInt(move _272) -> [0: bb170, otherwise: bb171]; // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb174: {
        _276 = &_277;                    // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _274 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _275, move _276) -> [return: bb175, unwind: bb240]; // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb175: {
        _271 = move _274;                // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb172;                   // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb176: {
        _346 = const _;                  // scope 33 at tests/chain-executor-mock/src/main.rs:137:21: 137:79
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:137:21: 137:79
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[7])) }
        _280 = _346 as &[&str] (Pointer(Unsize)); // scope 33 at tests/chain-executor-mock/src/main.rs:137:21: 137:79
        _285 = &(_215.1: u64);           // scope 33 at tests/chain-executor-mock/src/main.rs:138:21: 138:39
        _284 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_285) -> [return: bb177, unwind: bb240]; // scope 33 at tests/chain-executor-mock/src/main.rs:138:21: 138:39
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:138:21: 138:39
                                         // + user_ty: UserType(30)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb177: {
        _287 = &_218;                    // scope 33 at tests/chain-executor-mock/src/main.rs:138:41: 138:47
        _286 = core::fmt::ArgumentV1::<'_>::new_debug::<u64>(_287) -> [return: bb178, unwind: bb240]; // scope 33 at tests/chain-executor-mock/src/main.rs:138:41: 138:47
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:138:41: 138:47
                                         // + user_ty: UserType(31)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<u64>}, val: Value(<ZST>) }
    }

    bb178: {
        _283 = [move _284, move _286];   // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _282 = &_283;                    // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _281 = _282 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _279 = Arguments::<'_>::new_v1(move _280, move _281) -> [return: bb179, unwind: bb240]; // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(29)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb179: {
        _345 = const _;                  // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[6])) }
        _278 = log::__private_api_log(move _279, _270, _345) -> [return: bb269, unwind: bb240]; // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb180: {
        _292 = &(_215.0: std::vec::Vec<u8>); // scope 32 at tests/chain-executor-mock/src/main.rs:141:38: 141:55
        _291 = <Vec<u8> as Deref>::deref(_292) -> [return: bb181, unwind: bb240]; // scope 32 at tests/chain-executor-mock/src/main.rs:141:38: 141:55
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:141:38: 141:55
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb181: {
        _290 = _291;                     // scope 32 at tests/chain-executor-mock/src/main.rs:141:38: 141:55
        _289 = H256::from_slice(move _290) -> [return: bb182, unwind: bb240]; // scope 32 at tests/chain-executor-mock/src/main.rs:141:21: 141:56
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:141:21: 141:37
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H256 {H256::from_slice}, val: Value(<ZST>) }
    }

    bb182: {
        _293 = &_68;                     // scope 32 at tests/chain-executor-mock/src/main.rs:143:21: 143:28
        _296 = &_103;                    // scope 32 at tests/chain-executor-mock/src/main.rs:144:22: 144:38
        _295 = <Arc<Mutex<SystemTime>> as Clone>::clone(move _296) -> [return: bb183, unwind: bb240]; // scope 32 at tests/chain-executor-mock/src/main.rs:144:22: 144:38
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:144:31: 144:36
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Mutex<SystemTime>>) -> Arc<Mutex<SystemTime>> {<Arc<Mutex<SystemTime>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb183: {
        _294 = &_295;                    // scope 32 at tests/chain-executor-mock/src/main.rs:144:21: 144:38
        _297 = &_269;                    // scope 32 at tests/chain-executor-mock/src/main.rs:145:21: 145:32
        _377 = deref_copy (*_297);       // scope 32 at tests/chain-executor-mock/src/main.rs:145:21: 145:32
        _378 = deref_copy (*_377);       // scope 32 at tests/chain-executor-mock/src/main.rs:145:21: 145:32
        _298 = &_106;                    // scope 32 at tests/chain-executor-mock/src/main.rs:146:21: 146:29
        _288 = send_block(move _289, _218, _293, _294, _378, _298) -> [return: bb184, unwind: bb239]; // scope 32 at tests/chain-executor-mock/src/main.rs:140:17: 147:18
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:140:17: 140:27
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd> fn(H256, u64, &'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, &'b Arc<Mutex<SystemTime>>, &'c Value, &'d H256) {send_block}, val: Value(<ZST>) }
    }

    bb184: {
        drop(_295) -> [return: bb195, unwind: bb240]; // scope 32 at tests/chain-executor-mock/src/main.rs:147:18: 147:19
    }

    bb185: {
        _299 = log::Level::Warn;         // scope 28 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _302 = &_299;                    // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _350 = const _;                  // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[11])) }
        _301 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _302, _350) -> [return: bb189, unwind: bb240]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb186: {
        _300 = const false;              // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb188;                   // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb187: {
        _304 = &_299;                    // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _306 = log::max_level() -> [return: bb190, unwind: bb240]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb188: {
        switchInt(move _300) -> [0: bb195, otherwise: bb192]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb189: {
        switchInt(move _301) -> [0: bb186, otherwise: bb187]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb190: {
        _305 = &_306;                    // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _303 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _304, move _305) -> [return: bb191, unwind: bb240]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb191: {
        _300 = move _303;                // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb188;                   // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb192: {
        _349 = const _;                  // scope 34 at tests/chain-executor-mock/src/main.rs:149:23: 149:61
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:149:23: 149:61
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[10])) }
        _309 = _349 as &[&str] (Pointer(Unsize)); // scope 34 at tests/chain-executor-mock/src/main.rs:149:23: 149:61
        _314 = &_218;                    // scope 34 at tests/chain-executor-mock/src/main.rs:149:63: 149:69
        _313 = core::fmt::ArgumentV1::<'_>::new_debug::<u64>(_314) -> [return: bb193, unwind: bb240]; // scope 34 at tests/chain-executor-mock/src/main.rs:149:63: 149:69
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:149:63: 149:69
                                         // + user_ty: UserType(33)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<u64>}, val: Value(<ZST>) }
    }

    bb193: {
        _312 = [move _313];              // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _311 = &_312;                    // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _310 = _311 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _308 = Arguments::<'_>::new_v1(move _309, move _310) -> [return: bb194, unwind: bb240]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(32)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb194: {
        _348 = const _;                  // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[9])) }
        _307 = log::__private_api_log(move _308, _299, _348) -> [return: bb270, unwind: bb240]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb195: {
        _316 = &_112;                    // scope 28 at tests/chain-executor-mock/src/main.rs:151:16: 151:38
        _315 = HashMap::<u64, &Value>::is_empty(move _316) -> [return: bb196, unwind: bb240]; // scope 28 at tests/chain-executor-mock/src/main.rs:151:16: 151:38
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:151:28: 151:36
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<u64, &Value>) -> bool {HashMap::<u64, &Value>::is_empty}, val: Value(<ZST>) }
    }

    bb196: {
        switchInt(move _315) -> [0: bb207, otherwise: bb197]; // scope 28 at tests/chain-executor-mock/src/main.rs:151:16: 151:38
    }

    bb197: {
        _317 = log::Level::Warn;         // scope 28 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _320 = &_317;                    // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _344 = const _;                  // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[5])) }
        _319 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _320, _344) -> [return: bb201, unwind: bb240]; // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb198: {
        _318 = const false;              // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb200;                   // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb199: {
        _322 = &_317;                    // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _324 = log::max_level() -> [return: bb202, unwind: bb240]; // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb200: {
        switchInt(move _318) -> [0: bb206, otherwise: bb204]; // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb201: {
        switchInt(move _319) -> [0: bb198, otherwise: bb199]; // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb202: {
        _323 = &_324;                    // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _321 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _322, move _323) -> [return: bb203, unwind: bb240]; // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb203: {
        _318 = move _321;                // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb200;                   // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb204: {
        _343 = const _;                  // scope 35 at tests/chain-executor-mock/src/main.rs:152:23: 152:43
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:152:23: 152:43
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[4])) }
        _327 = _343 as &[&str] (Pointer(Unsize)); // scope 35 at tests/chain-executor-mock/src/main.rs:152:23: 152:43
        _326 = Arguments::<'_>::new_const(move _327) -> [return: bb205, unwind: bb240]; // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(34)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb205: {
        _342 = const _;                  // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[3])) }
        _325 = log::__private_api_log(move _326, _317, _342) -> [return: bb271, unwind: bb240]; // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb206: {
        drop(_215) -> [return: bb211, unwind: bb241]; // scope 26 at tests/chain-executor-mock/src/main.rs:155:9: 155:10
    }

    bb207: {
        drop(_215) -> [return: bb208, unwind: bb241]; // scope 26 at tests/chain-executor-mock/src/main.rs:155:9: 155:10
    }

    bb208: {
        drop(_208) -> [return: bb209, unwind: bb242]; // scope 24 at tests/chain-executor-mock/src/main.rs:156:5: 156:6
    }

    bb209: {
        drop(_188) -> [return: bb210, unwind: bb243]; // scope 23 at tests/chain-executor-mock/src/main.rs:156:5: 156:6
    }

    bb210: {
        drop(_187) -> [return: bb119, unwind: bb245]; // scope 23 at tests/chain-executor-mock/src/main.rs:156:5: 156:6
    }

    bb211: {
        drop(_208) -> [return: bb212, unwind: bb242]; // scope 24 at tests/chain-executor-mock/src/main.rs:156:5: 156:6
    }

    bb212: {
        drop(_188) -> [return: bb213, unwind: bb243]; // scope 23 at tests/chain-executor-mock/src/main.rs:156:5: 156:6
    }

    bb213: {
        drop(_187) -> [return: bb214, unwind: bb245]; // scope 23 at tests/chain-executor-mock/src/main.rs:156:5: 156:6
    }

    bb214: {
        _328 = log::Level::Info;         // scope 23 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _331 = &_328;                    // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _341 = const _;                  // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[2])) }
        _330 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _331, _341) -> [return: bb218, unwind: bb245]; // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb215: {
        _329 = const false;              // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb217;                   // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb216: {
        _333 = &_328;                    // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _335 = log::max_level() -> [return: bb219, unwind: bb245]; // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb217: {
        switchInt(move _329) -> [0: bb223, otherwise: bb221]; // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb218: {
        switchInt(move _330) -> [0: bb215, otherwise: bb216]; // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb219: {
        _334 = &_335;                    // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _332 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _333, move _334) -> [return: bb220, unwind: bb245]; // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb220: {
        _329 = move _332;                // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb217;                   // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb221: {
        _340 = const _;                  // scope 36 at tests/chain-executor-mock/src/main.rs:157:11: 157:21
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:157:11: 157:21
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _338 = _340 as &[&str] (Pointer(Unsize)); // scope 36 at tests/chain-executor-mock/src/main.rs:157:11: 157:21
        _337 = Arguments::<'_>::new_const(move _338) -> [return: bb222, unwind: bb245]; // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(35)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb222: {
        _339 = const _;                  // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[0])) }
        _336 = log::__private_api_log(move _337, _328, _339) -> [return: bb272, unwind: bb245]; // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb223: {
        drop(_112) -> [return: bb224, unwind: bb246]; // scope 13 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb224: {
        drop(_103) -> [return: bb225, unwind: bb247]; // scope 10 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb225: {
        drop(_84) -> [return: bb226, unwind: bb256]; // scope 8 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb226: {
        _379 = const false;              // scope 7 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
        drop(_68) -> [return: bb227, unwind: bb249]; // scope 7 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb227: {
        drop(_66) -> [return: bb228, unwind: bb258]; // scope 5 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb228: {
        _380 = const false;              // scope 5 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
        drop(_43) -> [return: bb229, unwind: bb252]; // scope 4 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb229: {
        drop(_33) -> [return: bb230, unwind: bb253]; // scope 3 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb230: {
        drop(_16) -> bb238;              // scope 0 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb231: {
        drop(_103) -> [return: bb232, unwind: bb247]; // scope 10 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb232: {
        drop(_84) -> [return: bb233, unwind: bb256]; // scope 8 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb233: {
        _379 = const false;              // scope 7 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
        drop(_68) -> [return: bb234, unwind: bb249]; // scope 7 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb234: {
        drop(_66) -> [return: bb235, unwind: bb258]; // scope 5 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb235: {
        _380 = const false;              // scope 5 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
        drop(_43) -> [return: bb236, unwind: bb252]; // scope 4 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb236: {
        drop(_33) -> [return: bb237, unwind: bb253]; // scope 3 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb237: {
        drop(_16) -> bb238;              // scope 0 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb238: {
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:158:2: 158:2
    }

    bb239 (cleanup): {
        drop(_295) -> bb240;             // scope 32 at tests/chain-executor-mock/src/main.rs:147:18: 147:19
    }

    bb240 (cleanup): {
        drop(_215) -> bb241;             // scope 26 at tests/chain-executor-mock/src/main.rs:155:9: 155:10
    }

    bb241 (cleanup): {
        drop(_208) -> bb242;             // scope 24 at tests/chain-executor-mock/src/main.rs:156:5: 156:6
    }

    bb242 (cleanup): {
        drop(_188) -> bb243;             // scope 23 at tests/chain-executor-mock/src/main.rs:156:5: 156:6
    }

    bb243 (cleanup): {
        drop(_187) -> bb245;             // scope 23 at tests/chain-executor-mock/src/main.rs:156:5: 156:6
    }

    bb244 (cleanup): {
        drop(_133) -> bb245;             // scope 14 at tests/chain-executor-mock/src/main.rs:104:5: 104:6
    }

    bb245 (cleanup): {
        drop(_112) -> bb246;             // scope 13 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb246 (cleanup): {
        drop(_103) -> bb247;             // scope 10 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb247 (cleanup): {
        drop(_84) -> bb256;              // scope 8 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb248 (cleanup): {
        drop(_68) -> bb249;              // scope 7 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb249 (cleanup): {
        drop(_66) -> bb258;              // scope 5 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb250 (cleanup): {
        drop(_43) -> bb252;              // scope 4 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb251 (cleanup): {
        drop(_37) -> bb252;              // scope 4 at tests/chain-executor-mock/src/main.rs:73:45: 73:46
    }

    bb252 (cleanup): {
        drop(_33) -> bb253;              // scope 3 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb253 (cleanup): {
        drop(_16) -> bb254;              // scope 0 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb254 (cleanup): {
        resume;                          // scope 0 at tests/chain-executor-mock/src/main.rs:49:1: 158:2
    }

    bb255 (cleanup): {
        drop(_69) -> bb248;              // scope 7 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb256 (cleanup): {
        switchInt(_379) -> [0: bb248, otherwise: bb255]; // scope 7 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb257 (cleanup): {
        drop(_65) -> bb250;              // scope 5 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb258 (cleanup): {
        switchInt(_380) -> [0: bb250, otherwise: bb257]; // scope 5 at tests/chain-executor-mock/src/main.rs:158:1: 158:2
    }

    bb259 (cleanup): {
        drop(_18) -> bb254;              // scope 0 at tests/chain-executor-mock/src/main.rs:65:9: 65:10
    }

    bb260 (cleanup): {
        switchInt(_381) -> [0: bb254, otherwise: bb259]; // scope 0 at tests/chain-executor-mock/src/main.rs:65:9: 65:10
    }

    bb261: {
        goto -> bb46;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb262: {
        goto -> bb63;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb263: {
        goto -> bb76;                    // scope 17 at tests/chain-executor-mock/src/main.rs:98:9: 98:48
    }

    bb264: {
        goto -> bb97;                    // scope 19 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb265: {
        goto -> bb118;                   // scope 22 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb266: {
        goto -> bb131;                   // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb267: {
        goto -> bb152;                   // scope 30 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb268: {
        goto -> bb167;                   // scope 31 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb269: {
        goto -> bb180;                   // scope 33 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb270: {
        goto -> bb195;                   // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb271: {
        goto -> bb206;                   // scope 35 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb272: {
        goto -> bb223;                   // scope 36 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:157:5: 157:22
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:157:5: 157:22

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:157:5: 157:22
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:157:5: 157:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:157:5: 157:22
        _1 = (move _2, move _4, move _6, const 157_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:157:11: 157:21
    let mut _1: [&str; 1];               // in scope 0 at tests/chain-executor-mock/src/main.rs:157:11: 157:21

    bb0: {
        _1 = [const "[[DONE]]"];         // scope 0 at tests/chain-executor-mock/src/main.rs:157:11: 157:21
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:157:11: 157:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:157:11: 157:21
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:157:11: 157:21
    }
}

promoted[2] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:152:17: 152:44
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:152:17: 152:44

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:152:17: 152:44
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:152:17: 152:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:152:17: 152:44
        _1 = (move _2, move _4, move _6, const 152_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:152:23: 152:43
    let mut _1: [&str; 1];               // in scope 0 at tests/chain-executor-mock/src/main.rs:152:23: 152:43

    bb0: {
        _1 = [const "break for empty..."]; // scope 0 at tests/chain-executor-mock/src/main.rs:152:23: 152:43
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:152:23: 152:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:152:23: 152:43
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:152:23: 152:43
    }
}

promoted[5] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[6] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:136:17: 139:18
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:136:17: 139:18

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:136:17: 139:18
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:136:17: 139:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:136:17: 139:18
        _1 = (move _2, move _4, move _6, const 136_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:137:21: 137:79
    let mut _1: [&str; 2];               // in scope 0 at tests/chain-executor-mock/src/main.rs:137:21: 137:79

    bb0: {
        _1 = [const "send consensus block rich_status.height=", const " height = "]; // scope 0 at tests/chain-executor-mock/src/main.rs:137:21: 137:79
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:137:21: 137:79
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:137:21: 137:79
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:137:21: 137:79
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:137:21: 137:79
    }
}

promoted[8] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[9] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:149:17: 149:70
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:149:17: 149:70

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:149:17: 149:70
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:149:17: 149:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:149:17: 149:70
        _1 = (move _2, move _4, move _6, const 149_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[10] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:149:23: 149:61
    let mut _1: [&str; 1];               // in scope 0 at tests/chain-executor-mock/src/main.rs:149:23: 149:61

    bb0: {
        _1 = [const "no data for this block height = "]; // scope 0 at tests/chain-executor-mock/src/main.rs:149:23: 149:61
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:149:23: 149:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:149:23: 149:61
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:149:23: 149:61
    }
}

promoted[11] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[12] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:132:17: 132:61
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:132:17: 132:61

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:132:17: 132:61
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:132:17: 132:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:132:17: 132:61
        _1 = (move _2, move _4, move _6, const 132_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[13] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:132:23: 132:52
    let mut _1: [&str; 2];               // in scope 0 at tests/chain-executor-mock/src/main.rs:132:23: 132:52

    bb0: {
        _1 = [const "the ", const " block can't generate"]; // scope 0 at tests/chain-executor-mock/src/main.rs:132:23: 132:52
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:132:23: 132:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:132:23: 132:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:132:23: 132:52
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:132:23: 132:52
    }
}

promoted[14] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[15] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:125:17: 125:61
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:125:17: 125:61

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:125:17: 125:61
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:125:17: 125:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:125:17: 125:61
        _1 = (move _2, move _4, move _6, const 125_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[16] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:125:23: 125:44
    let mut _1: [&str; 1];               // in scope 0 at tests/chain-executor-mock/src/main.rs:125:23: 125:44

    bb0: {
        _1 = [const "current height-"];  // scope 0 at tests/chain-executor-mock/src/main.rs:125:23: 125:44
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:125:23: 125:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:125:23: 125:44
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:125:23: 125:44
    }
}

promoted[17] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[18] in main: &RoutingKey = {
    let mut _0: &libproto::router::RoutingKey; // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _1: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _2: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _3: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25

    bb0: {
        _2 = libproto::router::SubModules::Chain; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
        _3 = libproto::router::MsgType::RichStatus; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
        _1 = RoutingKey(move _2, move _3); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    }
}

promoted[19] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:115:9: 115:39
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:115:9: 115:39

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:115:9: 115:39
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:115:9: 115:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:115:9: 115:39
        _1 = (move _2, move _4, move _6, const 115_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[20] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:115:15: 115:33
    let mut _1: [&str; 1];               // in scope 0 at tests/chain-executor-mock/src/main.rs:115:15: 115:33

    bb0: {
        _1 = [const "received: key="];   // scope 0 at tests/chain-executor-mock/src/main.rs:115:15: 115:33
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:115:15: 115:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:115:15: 115:33
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:115:15: 115:33
    }
}

promoted[21] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[22] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:107:13: 107:55
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:107:13: 107:55

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:107:13: 107:55
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:107:13: 107:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:107:13: 107:55
        _1 = (move _2, move _4, move _6, const 107_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[23] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:107:20: 107:46
    let mut _1: [&str; 1];               // in scope 0 at tests/chain-executor-mock/src/main.rs:107:20: 107:46

    bb0: {
        _1 = [const "Block missing, number="]; // scope 0 at tests/chain-executor-mock/src/main.rs:107:20: 107:46
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:107:20: 107:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:107:20: 107:46
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:107:20: 107:46
    }
}

promoted[24] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[25] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:103:9: 103:43
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:103:9: 103:43

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:103:9: 103:43
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:103:9: 103:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:103:9: 103:43
        _1 = (move _2, move _4, move _6, const 103_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[26] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:103:15: 103:33
    let mut _1: [&str; 1];               // in scope 0 at tests/chain-executor-mock/src/main.rs:103:15: 103:33

    bb0: {
        _1 = [const ">> numbers: "];     // scope 0 at tests/chain-executor-mock/src/main.rs:103:15: 103:33
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:103:15: 103:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:103:15: 103:33
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:103:15: 103:33
    }
}

promoted[27] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[28] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:88:5: 88:35
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:88:5: 88:35

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:88:5: 88:35
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:88:5: 88:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:88:5: 88:35
        _1 = (move _2, move _4, move _6, const 88_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[29] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:88:11: 88:24
    let mut _1: [&str; 1];               // in scope 0 at tests/chain-executor-mock/src/main.rs:88:11: 88:24

    bb0: {
        _1 = [const "AMQP_URL="];        // scope 0 at tests/chain-executor-mock/src/main.rs:88:11: 88:24
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:88:11: 88:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:88:11: 88:24
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:88:11: 88:24
    }
}

promoted[30] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[31] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:77:5: 77:47
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:77:5: 77:47

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:77:5: 77:47
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:77:5: 77:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:77:5: 77:47
        _1 = (move _2, move _4, move _6, const 77_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[32] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:77:11: 77:30
    let mut _1: [&str; 1];               // in scope 0 at tests/chain-executor-mock/src/main.rs:77:11: 77:30

    bb0: {
        _1 = [const "mock-data-path="];  // scope 0 at tests/chain-executor-mock/src/main.rs:77:11: 77:30
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:77:11: 77:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:77:11: 77:30
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:77:11: 77:30
    }
}

promoted[33] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[34] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:53:5: 53:38
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:53:5: 53:38

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:53:5: 53:38
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:53:5: 53:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:53:5: 53:38
        _1 = (move _2, move _4, move _6, const 53_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[35] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:53:11: 53:37
    let mut _1: [&str; 1];               // in scope 0 at tests/chain-executor-mock/src/main.rs:53:11: 53:37

    bb0: {
        _1 = [const "CITA:Chain executor mock"]; // scope 0 at tests/chain-executor-mock/src/main.rs:53:11: 53:37
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:53:11: 53:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:53:11: 53:37
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:53:11: 53:37
    }
}

promoted[36] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[37] in main: &LogFavour<'_> = {
    let mut _0: &logger::LogFavour<'_>;  // return place in scope 0 at tests/chain-executor-mock/src/main.rs:52:25: 52:72
    let mut _1: logger::LogFavour<'_>;   // in scope 0 at tests/chain-executor-mock/src/main.rs:52:26: 52:72
    let mut _2: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:52:50: 52:71
    let mut _3: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:52:50: 52:71

    bb0: {
        _3 = const "chain-executor-mock"; // scope 0 at tests/chain-executor-mock/src/main.rs:52:50: 52:71
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:52:50: 52:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at tests/chain-executor-mock/src/main.rs:52:50: 52:71
        _1 = LogFavour::<'_>::File(move _2); // scope 0 at tests/chain-executor-mock/src/main.rs:52:26: 52:72
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:52:25: 52:72
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:52:25: 52:72
    }
}

fn main::{closure#0}(_1: [closure@tests/chain-executor-mock/src/main.rs:93:19: 93:22], _2: &str) -> std::option::Option<H256> {
    debug p => _2;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:93:20: 93:21
    let mut _0: std::option::Option<cita_types::H256>; // return place in scope 0 at tests/chain-executor-mock/src/main.rs:93:23: 93:23
    let mut _3: std::result::Result<cita_types::H256, rustc_hex::FromHexError>; // in scope 0 at tests/chain-executor-mock/src/main.rs:93:23: 93:43

    bb0: {
        _3 = <H256 as FromStr>::from_str(_2) -> bb1; // scope 0 at tests/chain-executor-mock/src/main.rs:93:23: 93:43
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:93:23: 93:40
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<H256, <H256 as FromStr>::Err> {<H256 as FromStr>::from_str}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Result::<H256, rustc_hex::FromHexError>::ok(move _3) -> bb2; // scope 0 at tests/chain-executor-mock/src/main.rs:93:23: 93:48
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:93:44: 93:46
                                         // + literal: Const { ty: fn(Result<H256, rustc_hex::FromHexError>) -> std::option::Option<H256> {Result::<H256, rustc_hex::FromHexError>::ok}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:93:48: 93:48
    }
}

fn send_block(_1: H256, _2: u64, _3: &pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, _4: &Arc<Mutex<SystemTime>>, _5: &Value, _6: &H256) -> () {
    debug pre_hash => _1;                // in scope 0 at tests/chain-executor-mock/src/main.rs:162:5: 162:13
    debug height => _2;                  // in scope 0 at tests/chain-executor-mock/src/main.rs:163:5: 163:11
    debug pub_sender => _3;              // in scope 0 at tests/chain-executor-mock/src/main.rs:164:5: 164:15
    debug sys_time => _4;                // in scope 0 at tests/chain-executor-mock/src/main.rs:165:5: 165:13
    debug mock_block => _5;              // in scope 0 at tests/chain-executor-mock/src/main.rs:166:5: 166:15
    debug privkey => _6;                 // in scope 0 at tests/chain-executor-mock/src/main.rs:167:5: 167:12
    let mut _0: ();                      // return place in scope 0 at tests/chain-executor-mock/src/main.rs:168:3: 168:3
    let _7: std::vec::Vec<libproto::SignedTransaction>; // in scope 0 at tests/chain-executor-mock/src/main.rs:171:9: 171:12
    let mut _8: std::iter::Map<std::slice::Iter<'_, serde_yaml::Value>, [closure@tests/chain-executor-mock/src/main.rs:175:14: 175:18]>; // in scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 201:11
    let mut _9: std::slice::Iter<'_, serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 174:16
    let mut _10: &[serde_yaml::Value];   // in scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 174:16
    let _11: &[serde_yaml::Value];       // in scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 174:16
    let mut _12: &std::vec::Vec<serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 174:16
    let _13: &std::vec::Vec<serde_yaml::Value>; // in scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 173:18
    let mut _14: std::option::Option<&std::vec::Vec<serde_yaml::Value>>; // in scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 172:23
    let mut _15: &serde_yaml::Value;     // in scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 172:23
    let _16: &serde_yaml::Value;         // in scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 171:65
    let mut _17: [closure@tests/chain-executor-mock/src/main.rs:175:14: 175:18]; // in scope 0 at tests/chain-executor-mock/src/main.rs:175:14: 201:10
    let mut _18: &&cita_types::H256;     // in scope 0 at tests/chain-executor-mock/src/main.rs:175:14: 201:10
    let mut _21: (std::vec::Vec<u8>, libproto::BlockWithProof); // in scope 0 at tests/chain-executor-mock/src/main.rs:205:31: 211:6
    let _22: &[libproto::SignedTransaction]; // in scope 0 at tests/chain-executor-mock/src/main.rs:206:9: 206:17
    let _23: &[libproto::SignedTransaction]; // in scope 0 at tests/chain-executor-mock/src/main.rs:206:10: 206:17
    let mut _24: &std::vec::Vec<libproto::SignedTransaction>; // in scope 0 at tests/chain-executor-mock/src/main.rs:206:10: 206:13
    let mut _25: u64;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:210:9: 210:39
    let mut _26: u64;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:210:29: 210:39
    let mut _27: (u64, bool);            // in scope 0 at tests/chain-executor-mock/src/main.rs:210:29: 210:39
    let mut _28: (u64, bool);            // in scope 0 at tests/chain-executor-mock/src/main.rs:210:9: 210:39
    let mut _30: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _31: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _32: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _33: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _34: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _35: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _36: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _37: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _38: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _39: &[&str];                // in scope 0 at tests/chain-executor-mock/src/main.rs:212:11: 212:41
    let mut _40: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _41: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _42: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _43: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:212:43: 212:52
    let _44: &usize;                     // in scope 0 at tests/chain-executor-mock/src/main.rs:212:43: 212:52
    let _45: usize;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:212:43: 212:52
    let mut _46: &std::vec::Vec<libproto::SignedTransaction>; // in scope 0 at tests/chain-executor-mock/src/main.rs:212:43: 212:52
    let mut _47: std::time::SystemTime;  // in scope 0 at tests/chain-executor-mock/src/main.rs:213:33: 213:56
    let mut _48: &mut std::time::SystemTime; // in scope 0 at tests/chain-executor-mock/src/main.rs:213:5: 213:30
    let mut _49: &mut std::sync::MutexGuard<'_, std::time::SystemTime>; // in scope 0 at tests/chain-executor-mock/src/main.rs:213:6: 213:30
    let mut _50: std::sync::MutexGuard<'_, std::time::SystemTime>; // in scope 0 at tests/chain-executor-mock/src/main.rs:213:6: 213:30
    let mut _51: std::result::Result<std::sync::MutexGuard<'_, std::time::SystemTime>, std::sync::PoisonError<std::sync::MutexGuard<'_, std::time::SystemTime>>>; // in scope 0 at tests/chain-executor-mock/src/main.rs:213:6: 213:21
    let mut _52: &std::sync::Mutex<std::time::SystemTime>; // in scope 0 at tests/chain-executor-mock/src/main.rs:213:6: 213:21
    let _53: &std::sync::Mutex<std::time::SystemTime>; // in scope 0 at tests/chain-executor-mock/src/main.rs:213:6: 213:21
    let _54: ();                         // in scope 0 at tests/chain-executor-mock/src/main.rs:214:5: 219:18
    let mut _55: std::result::Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at tests/chain-executor-mock/src/main.rs:214:5: 218:11
    let mut _56: (std::string::String, std::vec::Vec<u8>); // in scope 0 at tests/chain-executor-mock/src/main.rs:215:15: 218:10
    let mut _57: std::string::String;    // in scope 0 at tests/chain-executor-mock/src/main.rs:216:13: 216:61
    let mut _58: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _59: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _60: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _61: std::vec::Vec<u8>;      // in scope 0 at tests/chain-executor-mock/src/main.rs:217:13: 217:30
    let mut _62: &std::vec::Vec<u8>;     // in scope 0 at tests/chain-executor-mock/src/main.rs:217:13: 217:30
    scope 1 {
        debug txs => _7;                 // in scope 1 at tests/chain-executor-mock/src/main.rs:171:9: 171:12
        let _19: std::vec::Vec<u8>;      // in scope 1 at tests/chain-executor-mock/src/main.rs:205:10: 205:19
        let _20: libproto::BlockWithProof; // in scope 1 at tests/chain-executor-mock/src/main.rs:205:21: 205:27
        scope 2 {
            debug send_data => _19;      // in scope 2 at tests/chain-executor-mock/src/main.rs:205:10: 205:19
            debug _block => _20;         // in scope 2 at tests/chain-executor-mock/src/main.rs:205:21: 205:27
            let _29: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 3 {
                debug lvl => _29;        // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _63: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _64: &[&str; 2]; // in scope 3 at tests/chain-executor-mock/src/main.rs:212:11: 212:41
                let mut _65: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
        }
    }

    bb0: {
        _16 = <Value as std::ops::Index<&str>>::index(_5, const "transactions") -> bb1; // scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 171:65
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:171:39: 171:65
                                         // + literal: Const { ty: for<'a> fn(&'a Value, &str) -> &'a <Value as std::ops::Index<&str>>::Output {<Value as std::ops::Index<&str>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:171:50: 171:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _15 = _16;                       // scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 172:23
        _14 = Value::as_sequence(move _15) -> bb2; // scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 172:23
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:172:10: 172:21
                                         // + literal: Const { ty: for<'a> fn(&'a Value) -> std::option::Option<&'a Vec<Value>> {Value::as_sequence}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = std::option::Option::<&Vec<Value>>::unwrap(move _14) -> bb3; // scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 173:18
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:173:10: 173:16
                                         // + literal: Const { ty: fn(std::option::Option<&Vec<Value>>) -> &Vec<Value> {std::option::Option::<&Vec<Value>>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _13;                       // scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 174:16
        _11 = <Vec<Value> as Deref>::deref(move _12) -> bb4; // scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 174:16
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:171:39: 174:16
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Value>) -> &'a <Vec<Value> as Deref>::Target {<Vec<Value> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = _11;                       // scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 174:16
        _9 = core::slice::<impl [Value]>::iter(move _10) -> bb5; // scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 174:16
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:174:10: 174:14
                                         // + literal: Const { ty: for<'a> fn(&'a [Value]) -> std::slice::Iter<'a, Value> {core::slice::<impl [Value]>::iter}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = &_6;                       // scope 0 at tests/chain-executor-mock/src/main.rs:175:14: 201:10
        _17 = [closure@tests/chain-executor-mock/src/main.rs:175:14: 175:18] { privkey: move _18 }; // scope 0 at tests/chain-executor-mock/src/main.rs:175:14: 201:10
                                         // closure
                                         // + def_id: DefId(0:82 ~ chain_executor_mock[5c01]::send_block::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((&serde_yaml::Value,)) -> libproto::SignedTransaction,
                                         //     (&&cita_types::H256,),
                                         // ]
        _8 = <std::slice::Iter<'_, Value> as Iterator>::map::<SignedTransaction, [closure@tests/chain-executor-mock/src/main.rs:175:14: 175:18]>(move _9, move _17) -> bb6; // scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 201:11
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:175:10: 175:13
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, Value>, [closure@tests/chain-executor-mock/src/main.rs:175:14: 175:18]) -> std::iter::Map<std::slice::Iter<'_, Value>, [closure@tests/chain-executor-mock/src/main.rs:175:14: 175:18]> {<std::slice::Iter<'_, Value> as Iterator>::map::<SignedTransaction, [closure@tests/chain-executor-mock/src/main.rs:175:14: 175:18]>}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = <std::iter::Map<std::slice::Iter<'_, Value>, [closure@tests/chain-executor-mock/src/main.rs:175:14: 175:18]> as Iterator>::collect::<Vec<SignedTransaction>>(move _8) -> bb7; // scope 0 at tests/chain-executor-mock/src/main.rs:171:39: 202:19
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:202:10: 202:17
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, Value>, [closure@tests/chain-executor-mock/src/main.rs:175:14: 175:18]>) -> Vec<SignedTransaction> {<std::iter::Map<std::slice::Iter<'_, Value>, [closure@tests/chain-executor-mock/src/main.rs:175:14: 175:18]> as Iterator>::collect::<Vec<SignedTransaction>>}, val: Value(<ZST>) }
    }

    bb7: {
        _24 = &_7;                       // scope 1 at tests/chain-executor-mock/src/main.rs:206:10: 206:13
        _23 = <Vec<SignedTransaction> as std::ops::Index<RangeFull>>::index(move _24, const RangeFull) -> [return: bb8, unwind: bb40]; // scope 1 at tests/chain-executor-mock/src/main.rs:206:10: 206:17
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:206:10: 206:17
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<SignedTransaction>, RangeFull) -> &'a <Vec<SignedTransaction> as std::ops::Index<RangeFull>>::Output {<Vec<SignedTransaction> as std::ops::Index<RangeFull>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: RangeFull, val: Value(<ZST>) }
    }

    bb8: {
        _22 = _23;                       // scope 1 at tests/chain-executor-mock/src/main.rs:206:9: 206:17
        _27 = CheckedMul(_2, const 3_u64); // scope 1 at tests/chain-executor-mock/src/main.rs:210:29: 210:39
        assert(!move (_27.1: bool), "attempt to compute `{} * {}`, which would overflow", _2, const 3_u64) -> [success: bb9, unwind: bb40]; // scope 1 at tests/chain-executor-mock/src/main.rs:210:29: 210:39
    }

    bb9: {
        _26 = move (_27.0: u64);         // scope 1 at tests/chain-executor-mock/src/main.rs:210:29: 210:39
        _28 = CheckedAdd(const _, _26);  // scope 1 at tests/chain-executor-mock/src/main.rs:210:9: 210:39
        assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, move _26) -> [success: bb10, unwind: bb40]; // scope 1 at tests/chain-executor-mock/src/main.rs:210:9: 210:39
    }

    bb10: {
        _25 = move (_28.0: u64);         // scope 1 at tests/chain-executor-mock/src/main.rs:210:9: 210:39
        _21 = BuildBlock::build_block_with_proof(_22, _1, _2, _6, move _25) -> [return: bb11, unwind: bb40]; // scope 1 at tests/chain-executor-mock/src/main.rs:205:31: 211:6
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:205:31: 205:65
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [SignedTransaction], H256, u64, &'b H256, u64) -> (Vec<u8>, libproto::BlockWithProof) {BuildBlock::build_block_with_proof}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = move (_21.0: std::vec::Vec<u8>); // scope 1 at tests/chain-executor-mock/src/main.rs:205:10: 205:19
        _20 = move (_21.1: libproto::BlockWithProof); // scope 1 at tests/chain-executor-mock/src/main.rs:205:21: 205:27
        _29 = log::Level::Info;          // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _32 = &_29;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _65 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(send_block, [], Some(promoted[2])) }
        _31 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _32, _65) -> [return: bb15, unwind: bb38]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb12: {
        _30 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb14;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        _34 = &_29;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _36 = log::max_level() -> [return: bb16, unwind: bb38]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb14: {
        switchInt(move _30) -> [0: bb22, otherwise: bb18]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb15: {
        switchInt(move _31) -> [0: bb12, otherwise: bb13]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb16: {
        _35 = &_36;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _33 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _34, move _35) -> [return: bb17, unwind: bb38]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb17: {
        _30 = move _33;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb14;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb18: {
        _64 = const _;                   // scope 3 at tests/chain-executor-mock/src/main.rs:212:11: 212:41
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:212:11: 212:41
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(send_block, [], Some(promoted[1])) }
        _39 = _64 as &[&str] (Pointer(Unsize)); // scope 3 at tests/chain-executor-mock/src/main.rs:212:11: 212:41
        _46 = &_7;                       // scope 3 at tests/chain-executor-mock/src/main.rs:212:43: 212:52
        _45 = Vec::<SignedTransaction>::len(move _46) -> [return: bb19, unwind: bb38]; // scope 3 at tests/chain-executor-mock/src/main.rs:212:43: 212:52
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:212:47: 212:50
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<SignedTransaction>) -> usize {Vec::<SignedTransaction>::len}, val: Value(<ZST>) }
    }

    bb19: {
        _44 = &_45;                      // scope 3 at tests/chain-executor-mock/src/main.rs:212:43: 212:52
        _43 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(_44) -> [return: bb20, unwind: bb38]; // scope 3 at tests/chain-executor-mock/src/main.rs:212:43: 212:52
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:212:43: 212:52
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb20: {
        _42 = [move _43];                // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _41 = &_42;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _40 = _41 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _38 = Arguments::<'_>::new_v1(move _39, move _40) -> [return: bb21, unwind: bb38]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb21: {
        _63 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(send_block, [], Some(promoted[0])) }
        _37 = log::__private_api_log(move _38, _29, _63) -> [return: bb42, unwind: bb38]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb22: {
        _47 = SystemTime::now() -> [return: bb23, unwind: bb38]; // scope 2 at tests/chain-executor-mock/src/main.rs:213:33: 213:56
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:213:33: 213:54
                                         // + literal: Const { ty: fn() -> SystemTime {SystemTime::now}, val: Value(<ZST>) }
    }

    bb23: {
        _53 = <Arc<Mutex<SystemTime>> as Deref>::deref(_4) -> [return: bb24, unwind: bb38]; // scope 2 at tests/chain-executor-mock/src/main.rs:213:6: 213:21
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:213:6: 213:21
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Mutex<SystemTime>>) -> &'a <Arc<Mutex<SystemTime>> as Deref>::Target {<Arc<Mutex<SystemTime>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb24: {
        _52 = _53;                       // scope 2 at tests/chain-executor-mock/src/main.rs:213:6: 213:21
        _51 = Mutex::<SystemTime>::lock(move _52) -> [return: bb25, unwind: bb38]; // scope 2 at tests/chain-executor-mock/src/main.rs:213:6: 213:21
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:213:15: 213:19
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<SystemTime>) -> Result<MutexGuard<'a, SystemTime>, PoisonError<MutexGuard<'a, SystemTime>>> {Mutex::<SystemTime>::lock}, val: Value(<ZST>) }
    }

    bb25: {
        _50 = Result::<MutexGuard<'_, SystemTime>, PoisonError<MutexGuard<'_, SystemTime>>>::unwrap(move _51) -> [return: bb26, unwind: bb38]; // scope 2 at tests/chain-executor-mock/src/main.rs:213:6: 213:30
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:213:22: 213:28
                                         // + literal: Const { ty: fn(Result<MutexGuard<'_, SystemTime>, PoisonError<MutexGuard<'_, SystemTime>>>) -> MutexGuard<'_, SystemTime> {Result::<MutexGuard<'_, SystemTime>, PoisonError<MutexGuard<'_, SystemTime>>>::unwrap}, val: Value(<ZST>) }
    }

    bb26: {
        _49 = &mut _50;                  // scope 2 at tests/chain-executor-mock/src/main.rs:213:6: 213:30
        _48 = <MutexGuard<'_, SystemTime> as DerefMut>::deref_mut(move _49) -> [return: bb27, unwind: bb37]; // scope 2 at tests/chain-executor-mock/src/main.rs:213:5: 213:30
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:213:5: 213:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut MutexGuard<'_, SystemTime>) -> &'a mut <MutexGuard<'_, SystemTime> as Deref>::Target {<MutexGuard<'_, SystemTime> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb27: {
        (*_48) = move _47;               // scope 2 at tests/chain-executor-mock/src/main.rs:213:5: 213:56
        drop(_50) -> [return: bb28, unwind: bb38]; // scope 2 at tests/chain-executor-mock/src/main.rs:213:56: 213:57
    }

    bb28: {
        _59 = const Consensus;           // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x03)) }
        _60 = const libproto::router::MsgType::BlockWithProof; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x09)) }
        _58 = RoutingKey(move _59, move _60); // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _57 = <RoutingKey as Into<std::string::String>>::into(move _58) -> [return: bb29, unwind: bb38]; // scope 2 at tests/chain-executor-mock/src/main.rs:216:13: 216:61
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:216:55: 216:59
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb29: {
        _62 = &_19;                      // scope 2 at tests/chain-executor-mock/src/main.rs:217:13: 217:30
        _61 = <Vec<u8> as Clone>::clone(move _62) -> [return: bb30, unwind: bb36]; // scope 2 at tests/chain-executor-mock/src/main.rs:217:13: 217:30
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:217:23: 217:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> Vec<u8> {<Vec<u8> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb30: {
        _56 = (move _57, move _61);      // scope 2 at tests/chain-executor-mock/src/main.rs:215:15: 218:10
        _55 = pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(_3, move _56) -> [return: bb31, unwind: bb38]; // scope 2 at tests/chain-executor-mock/src/main.rs:214:5: 218:11
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:215:10: 215:14
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb31: {
        _54 = Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap(move _55) -> [return: bb32, unwind: bb38]; // scope 2 at tests/chain-executor-mock/src/main.rs:214:5: 219:18
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:219:10: 219:16
                                         // + literal: Const { ty: fn(Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>) {Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap}, val: Value(<ZST>) }
    }

    bb32: {
        drop(_20) -> [return: bb33, unwind: bb39]; // scope 1 at tests/chain-executor-mock/src/main.rs:220:1: 220:2
    }

    bb33: {
        drop(_19) -> [return: bb34, unwind: bb40]; // scope 1 at tests/chain-executor-mock/src/main.rs:220:1: 220:2
    }

    bb34: {
        drop(_7) -> bb35;                // scope 0 at tests/chain-executor-mock/src/main.rs:220:1: 220:2
    }

    bb35: {
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:220:2: 220:2
    }

    bb36 (cleanup): {
        drop(_57) -> bb38;               // scope 2 at tests/chain-executor-mock/src/main.rs:218:9: 218:10
    }

    bb37 (cleanup): {
        drop(_50) -> bb38;               // scope 2 at tests/chain-executor-mock/src/main.rs:213:56: 213:57
    }

    bb38 (cleanup): {
        drop(_20) -> bb39;               // scope 1 at tests/chain-executor-mock/src/main.rs:220:1: 220:2
    }

    bb39 (cleanup): {
        drop(_19) -> bb40;               // scope 1 at tests/chain-executor-mock/src/main.rs:220:1: 220:2
    }

    bb40 (cleanup): {
        drop(_7) -> bb41;                // scope 0 at tests/chain-executor-mock/src/main.rs:220:1: 220:2
    }

    bb41 (cleanup): {
        resume;                          // scope 0 at tests/chain-executor-mock/src/main.rs:161:1: 220:2
    }

    bb42: {
        goto -> bb22;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in send_block: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:212:5: 212:53
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:212:5: 212:53

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:212:5: 212:53
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:212:5: 212:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:212:5: 212:53
        _1 = (move _2, move _4, move _6, const 212_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in send_block: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:212:11: 212:41
    let mut _1: [&str; 2];               // in scope 0 at tests/chain-executor-mock/src/main.rs:212:11: 212:41

    bb0: {
        _1 = [const "send block (", const " transactions)"]; // scope 0 at tests/chain-executor-mock/src/main.rs:212:11: 212:41
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:212:11: 212:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:212:11: 212:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:212:11: 212:41
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:212:11: 212:41
    }
}

promoted[2] in send_block: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn send_block::{closure#0}(_1: &mut [closure@tests/chain-executor-mock/src/main.rs:175:14: 175:18], _2: &Value) -> SignedTransaction {
    debug tx => _2;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:175:15: 175:17
    debug privkey => (*((*_1).0: &&cita_types::H256)); // in scope 0 at tests/chain-executor-mock/src/main.rs:167:5: 167:12
    let mut _0: libproto::SignedTransaction; // return place in scope 0 at tests/chain-executor-mock/src/main.rs:175:19: 175:19
    let _3: &str;                        // in scope 0 at tests/chain-executor-mock/src/main.rs:176:17: 176:33
    let mut _4: std::option::Option<&str>; // in scope 0 at tests/chain-executor-mock/src/main.rs:176:36: 176:53
    let mut _5: &serde_yaml::Value;      // in scope 0 at tests/chain-executor-mock/src/main.rs:176:36: 176:53
    let _6: &serde_yaml::Value;          // in scope 0 at tests/chain-executor-mock/src/main.rs:176:36: 176:44
    let mut _8: std::option::Option<&str>; // in scope 0 at tests/chain-executor-mock/src/main.rs:177:34: 177:56
    let mut _9: &serde_yaml::Value;      // in scope 0 at tests/chain-executor-mock/src/main.rs:177:34: 177:56
    let _10: &serde_yaml::Value;         // in scope 0 at tests/chain-executor-mock/src/main.rs:177:34: 177:47
    let mut _12: std::result::Result<cita_types::H256, rustc_hex::FromHexError>; // in scope 0 at tests/chain-executor-mock/src/main.rs:178:39: 178:72
    let mut _13: &str;                   // in scope 0 at tests/chain-executor-mock/src/main.rs:178:57: 178:71
    let mut _15: std::option::Option<&str>; // in scope 0 at tests/chain-executor-mock/src/main.rs:179:24: 179:43
    let mut _16: &serde_yaml::Value;     // in scope 0 at tests/chain-executor-mock/src/main.rs:179:24: 179:43
    let _17: &serde_yaml::Value;         // in scope 0 at tests/chain-executor-mock/src/main.rs:179:24: 179:34
    let mut _19: std::option::Option<u64>; // in scope 0 at tests/chain-executor-mock/src/main.rs:180:25: 180:45
    let mut _20: &serde_yaml::Value;     // in scope 0 at tests/chain-executor-mock/src/main.rs:180:25: 180:45
    let _21: &serde_yaml::Value;         // in scope 0 at tests/chain-executor-mock/src/main.rs:180:25: 180:36
    let mut _23: u64;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:181:25: 181:54
    let mut _24: std::option::Option<u64>; // in scope 0 at tests/chain-executor-mock/src/main.rs:181:25: 181:45
    let mut _25: &serde_yaml::Value;     // in scope 0 at tests/chain-executor-mock/src/main.rs:181:25: 181:45
    let _26: &serde_yaml::Value;         // in scope 0 at tests/chain-executor-mock/src/main.rs:181:25: 181:36
    let mut _28: std::option::Option<u64>; // in scope 0 at tests/chain-executor-mock/src/main.rs:182:37: 182:69
    let mut _29: &serde_yaml::Value;     // in scope 0 at tests/chain-executor-mock/src/main.rs:182:37: 182:69
    let _30: &serde_yaml::Value;         // in scope 0 at tests/chain-executor-mock/src/main.rs:182:37: 182:60
    let mut _32: &crypto::KeyPair;       // in scope 0 at tests/chain-executor-mock/src/main.rs:183:26: 183:76
    let _33: crypto::KeyPair;            // in scope 0 at tests/chain-executor-mock/src/main.rs:183:26: 183:66
    let mut _34: std::result::Result<crypto::KeyPair, crypto::Error>; // in scope 0 at tests/chain-executor-mock/src/main.rs:183:26: 183:57
    let mut _35: cita_types::H256;       // in scope 0 at tests/chain-executor-mock/src/main.rs:183:48: 183:56
    let mut _37: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _38: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _39: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _40: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _41: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _42: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _43: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _44: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _45: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _46: &[&str];                // in scope 0 at tests/chain-executor-mock/src/main.rs:185:17: 185:49
    let mut _47: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _48: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _49: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _50: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:186:17: 186:35
    let _51: &std::string::String;       // in scope 0 at tests/chain-executor-mock/src/main.rs:186:17: 186:35
    let _52: std::string::String;        // in scope 0 at tests/chain-executor-mock/src/main.rs:186:17: 186:35
    let mut _53: &cita_types::H160;      // in scope 0 at tests/chain-executor-mock/src/main.rs:186:17: 186:35
    let mut _54: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:187:17: 187:92
    let _55: &std::string::String;       // in scope 0 at tests/chain-executor-mock/src/main.rs:187:17: 187:92
    let _56: std::string::String;        // in scope 0 at tests/chain-executor-mock/src/main.rs:187:17: 187:92
    let mut _57: &cita_types::H160;      // in scope 0 at tests/chain-executor-mock/src/main.rs:187:17: 187:92
    let _58: cita_types::H160;           // in scope 0 at tests/chain-executor-mock/src/main.rs:187:17: 187:80
    let _59: &cita_types::H160;          // in scope 0 at tests/chain-executor-mock/src/main.rs:187:52: 187:59
    let _60: &cita_types::U256;          // in scope 0 at tests/chain-executor-mock/src/main.rs:187:61: 187:79
    let _61: cita_types::U256;           // in scope 0 at tests/chain-executor-mock/src/main.rs:187:62: 187:79
    let mut _63: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _64: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _65: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _66: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _67: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _68: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _69: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _70: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _71: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _72: &[&str];                // in scope 0 at tests/chain-executor-mock/src/main.rs:190:17: 190:49
    let mut _73: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _74: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _75: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _76: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:191:17: 191:33
    let _77: &&str;                      // in scope 0 at tests/chain-executor-mock/src/main.rs:191:17: 191:33
    let mut _78: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:191:35: 191:40
    let _79: &u64;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:191:35: 191:40
    let mut _80: core::fmt::ArgumentV1<'_>; // in scope 0 at tests/chain-executor-mock/src/main.rs:191:42: 191:47
    let _81: &u32;                       // in scope 0 at tests/chain-executor-mock/src/main.rs:191:42: 191:47
    let mut _82: &str;                   // in scope 0 at tests/chain-executor-mock/src/main.rs:194:17: 194:33
    let mut _83: &str;                   // in scope 0 at tests/chain-executor-mock/src/main.rs:195:17: 195:21
    let mut _84: u64;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:196:17: 196:22
    let mut _85: u64;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:198:17: 198:34
    let _86: &cita_types::H256;          // in scope 0 at tests/chain-executor-mock/src/main.rs:199:17: 199:28
    let mut _93: &&cita_types::H256;     // in scope 0 at tests/chain-executor-mock/src/main.rs:175:14: 201:10
    let mut _94: &cita_types::H256;      // in scope 0 at tests/chain-executor-mock/src/main.rs:175:14: 201:10
    scope 1 {
        debug contract_address => _3;    // in scope 1 at tests/chain-executor-mock/src/main.rs:176:17: 176:33
        let _7: &str;                    // in scope 1 at tests/chain-executor-mock/src/main.rs:177:17: 177:31
        scope 2 {
            debug tx_privkey_str => _7;  // in scope 2 at tests/chain-executor-mock/src/main.rs:177:17: 177:31
            let _11: cita_types::H256;   // in scope 2 at tests/chain-executor-mock/src/main.rs:178:17: 178:27
            scope 3 {
                debug tx_privkey => _11; // in scope 3 at tests/chain-executor-mock/src/main.rs:178:17: 178:27
                let _14: &str;           // in scope 3 at tests/chain-executor-mock/src/main.rs:179:17: 179:21
                scope 4 {
                    debug data => _14;   // in scope 4 at tests/chain-executor-mock/src/main.rs:179:17: 179:21
                    let _18: u64;        // in scope 4 at tests/chain-executor-mock/src/main.rs:180:17: 180:22
                    scope 5 {
                        debug quota => _18; // in scope 5 at tests/chain-executor-mock/src/main.rs:180:17: 180:22
                        let _22: u32;    // in scope 5 at tests/chain-executor-mock/src/main.rs:181:17: 181:22
                        scope 6 {
                            debug nonce => _22; // in scope 6 at tests/chain-executor-mock/src/main.rs:181:17: 181:22
                            let _27: u64; // in scope 6 at tests/chain-executor-mock/src/main.rs:182:17: 182:34
                            scope 7 {
                                debug valid_until_block => _27; // in scope 7 at tests/chain-executor-mock/src/main.rs:182:17: 182:34
                                let _31: cita_types::H160; // in scope 7 at tests/chain-executor-mock/src/main.rs:183:17: 183:23
                                scope 8 {
                                    debug sender => _31; // in scope 8 at tests/chain-executor-mock/src/main.rs:183:17: 183:23
                                    let _36: log::Level; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                    let _62: log::Level; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                    scope 9 {
                                        debug lvl => _36; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                        let mut _90: &(&str, &str, &str, u32); // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                        let mut _91: &[&str; 2]; // in scope 9 at tests/chain-executor-mock/src/main.rs:185:17: 185:49
                                        let mut _92: &log::LevelFilter; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                    }
                                    scope 10 {
                                        debug lvl => _62; // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                        let mut _87: &(&str, &str, &str, u32); // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                        let mut _88: &[&str; 3]; // in scope 10 at tests/chain-executor-mock/src/main.rs:190:17: 190:49
                                        let mut _89: &log::LevelFilter; // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _6 = <Value as std::ops::Index<&str>>::index(_2, const "to") -> bb1; // scope 0 at tests/chain-executor-mock/src/main.rs:176:36: 176:44
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:176:36: 176:44
                                         // + literal: Const { ty: for<'a> fn(&'a Value, &str) -> &'a <Value as std::ops::Index<&str>>::Output {<Value as std::ops::Index<&str>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:176:39: 176:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at tests/chain-executor-mock/src/main.rs:176:36: 176:53
        _4 = Value::as_str(move _5) -> bb2; // scope 0 at tests/chain-executor-mock/src/main.rs:176:36: 176:53
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:176:45: 176:51
                                         // + literal: Const { ty: for<'a> fn(&'a Value) -> std::option::Option<&'a str> {Value::as_str}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = std::option::Option::<&str>::unwrap(move _4) -> bb3; // scope 0 at tests/chain-executor-mock/src/main.rs:176:36: 176:62
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:176:54: 176:60
                                         // + literal: Const { ty: fn(std::option::Option<&str>) -> &str {std::option::Option::<&str>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = <Value as std::ops::Index<&str>>::index(_2, const "privkey") -> bb4; // scope 1 at tests/chain-executor-mock/src/main.rs:177:34: 177:47
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:177:34: 177:47
                                         // + literal: Const { ty: for<'a> fn(&'a Value, &str) -> &'a <Value as std::ops::Index<&str>>::Output {<Value as std::ops::Index<&str>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:177:37: 177:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _9 = _10;                        // scope 1 at tests/chain-executor-mock/src/main.rs:177:34: 177:56
        _8 = Value::as_str(move _9) -> bb5; // scope 1 at tests/chain-executor-mock/src/main.rs:177:34: 177:56
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:177:48: 177:54
                                         // + literal: Const { ty: for<'a> fn(&'a Value) -> std::option::Option<&'a str> {Value::as_str}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = std::option::Option::<&str>::unwrap(move _8) -> bb6; // scope 1 at tests/chain-executor-mock/src/main.rs:177:34: 177:65
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:177:57: 177:63
                                         // + literal: Const { ty: fn(std::option::Option<&str>) -> &str {std::option::Option::<&str>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = _7;                        // scope 2 at tests/chain-executor-mock/src/main.rs:178:57: 178:71
        _12 = <H256 as FromStr>::from_str(move _13) -> bb7; // scope 2 at tests/chain-executor-mock/src/main.rs:178:39: 178:72
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:178:39: 178:56
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<H256, <H256 as FromStr>::Err> {<H256 as FromStr>::from_str}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = Result::<H256, rustc_hex::FromHexError>::unwrap(move _12) -> bb8; // scope 2 at tests/chain-executor-mock/src/main.rs:178:39: 178:81
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:178:73: 178:79
                                         // + literal: Const { ty: fn(Result<H256, rustc_hex::FromHexError>) -> H256 {Result::<H256, rustc_hex::FromHexError>::unwrap}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = <Value as std::ops::Index<&str>>::index(_2, const "data") -> bb9; // scope 3 at tests/chain-executor-mock/src/main.rs:179:24: 179:34
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:179:24: 179:34
                                         // + literal: Const { ty: for<'a> fn(&'a Value, &str) -> &'a <Value as std::ops::Index<&str>>::Output {<Value as std::ops::Index<&str>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:179:27: 179:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _16 = _17;                       // scope 3 at tests/chain-executor-mock/src/main.rs:179:24: 179:43
        _15 = Value::as_str(move _16) -> bb10; // scope 3 at tests/chain-executor-mock/src/main.rs:179:24: 179:43
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:179:35: 179:41
                                         // + literal: Const { ty: for<'a> fn(&'a Value) -> std::option::Option<&'a str> {Value::as_str}, val: Value(<ZST>) }
    }

    bb10: {
        _14 = std::option::Option::<&str>::unwrap(move _15) -> bb11; // scope 3 at tests/chain-executor-mock/src/main.rs:179:24: 179:52
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:179:44: 179:50
                                         // + literal: Const { ty: fn(std::option::Option<&str>) -> &str {std::option::Option::<&str>::unwrap}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = <Value as std::ops::Index<&str>>::index(_2, const "quota") -> bb12; // scope 4 at tests/chain-executor-mock/src/main.rs:180:25: 180:36
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:180:25: 180:36
                                         // + literal: Const { ty: for<'a> fn(&'a Value, &str) -> &'a <Value as std::ops::Index<&str>>::Output {<Value as std::ops::Index<&str>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:180:28: 180:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _20 = _21;                       // scope 4 at tests/chain-executor-mock/src/main.rs:180:25: 180:45
        _19 = Value::as_u64(move _20) -> bb13; // scope 4 at tests/chain-executor-mock/src/main.rs:180:25: 180:45
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:180:37: 180:43
                                         // + literal: Const { ty: for<'a> fn(&'a Value) -> std::option::Option<u64> {Value::as_u64}, val: Value(<ZST>) }
    }

    bb13: {
        _18 = std::option::Option::<u64>::unwrap(move _19) -> bb14; // scope 4 at tests/chain-executor-mock/src/main.rs:180:25: 180:54
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:180:46: 180:52
                                         // + literal: Const { ty: fn(std::option::Option<u64>) -> u64 {std::option::Option::<u64>::unwrap}, val: Value(<ZST>) }
    }

    bb14: {
        _26 = <Value as std::ops::Index<&str>>::index(_2, const "nonce") -> bb15; // scope 5 at tests/chain-executor-mock/src/main.rs:181:25: 181:36
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:181:25: 181:36
                                         // + literal: Const { ty: for<'a> fn(&'a Value, &str) -> &'a <Value as std::ops::Index<&str>>::Output {<Value as std::ops::Index<&str>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:181:28: 181:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _25 = _26;                       // scope 5 at tests/chain-executor-mock/src/main.rs:181:25: 181:45
        _24 = Value::as_u64(move _25) -> bb16; // scope 5 at tests/chain-executor-mock/src/main.rs:181:25: 181:45
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:181:37: 181:43
                                         // + literal: Const { ty: for<'a> fn(&'a Value) -> std::option::Option<u64> {Value::as_u64}, val: Value(<ZST>) }
    }

    bb16: {
        _23 = std::option::Option::<u64>::unwrap(move _24) -> bb17; // scope 5 at tests/chain-executor-mock/src/main.rs:181:25: 181:54
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:181:46: 181:52
                                         // + literal: Const { ty: fn(std::option::Option<u64>) -> u64 {std::option::Option::<u64>::unwrap}, val: Value(<ZST>) }
    }

    bb17: {
        _22 = move _23 as u32 (IntToInt); // scope 5 at tests/chain-executor-mock/src/main.rs:181:25: 181:61
        _30 = <Value as std::ops::Index<&str>>::index(_2, const "valid_until_block") -> bb18; // scope 6 at tests/chain-executor-mock/src/main.rs:182:37: 182:60
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:182:37: 182:60
                                         // + literal: Const { ty: for<'a> fn(&'a Value, &str) -> &'a <Value as std::ops::Index<&str>>::Output {<Value as std::ops::Index<&str>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:182:40: 182:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _29 = _30;                       // scope 6 at tests/chain-executor-mock/src/main.rs:182:37: 182:69
        _28 = Value::as_u64(move _29) -> bb19; // scope 6 at tests/chain-executor-mock/src/main.rs:182:37: 182:69
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:182:61: 182:67
                                         // + literal: Const { ty: for<'a> fn(&'a Value) -> std::option::Option<u64> {Value::as_u64}, val: Value(<ZST>) }
    }

    bb19: {
        _27 = std::option::Option::<u64>::unwrap(move _28) -> bb20; // scope 6 at tests/chain-executor-mock/src/main.rs:182:37: 182:78
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:182:70: 182:76
                                         // + literal: Const { ty: fn(std::option::Option<u64>) -> u64 {std::option::Option::<u64>::unwrap}, val: Value(<ZST>) }
    }

    bb20: {
        _93 = deref_copy ((*_1).0: &&cita_types::H256); // scope 7 at tests/chain-executor-mock/src/main.rs:183:48: 183:56
        _94 = deref_copy (*_93);         // scope 7 at tests/chain-executor-mock/src/main.rs:183:48: 183:56
        _35 = (*_94);                    // scope 7 at tests/chain-executor-mock/src/main.rs:183:48: 183:56
        _34 = <KeyPair as CreateKey>::from_privkey(move _35) -> bb21; // scope 7 at tests/chain-executor-mock/src/main.rs:183:26: 183:57
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:183:26: 183:47
                                         // + literal: Const { ty: fn(<KeyPair as CreateKey>::PrivKey) -> Result<KeyPair, <KeyPair as CreateKey>::Error> {<KeyPair as CreateKey>::from_privkey}, val: Value(<ZST>) }
    }

    bb21: {
        _33 = Result::<KeyPair, crypto::Error>::unwrap(move _34) -> bb22; // scope 7 at tests/chain-executor-mock/src/main.rs:183:26: 183:66
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:183:58: 183:64
                                         // + literal: Const { ty: fn(Result<KeyPair, crypto::Error>) -> KeyPair {Result::<KeyPair, crypto::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb22: {
        _32 = &_33;                      // scope 7 at tests/chain-executor-mock/src/main.rs:183:26: 183:76
        _31 = <KeyPair as CreateKey>::address(move _32) -> bb23; // scope 7 at tests/chain-executor-mock/src/main.rs:183:26: 183:76
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:183:67: 183:74
                                         // + literal: Const { ty: for<'a> fn(&'a KeyPair) -> H160 {<KeyPair as CreateKey>::address}, val: Value(<ZST>) }
    }

    bb23: {
        _36 = log::Level::Info;          // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _39 = &_36;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _92 = const _;                   // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(send_block::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[5])) }
        _38 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _39, _92) -> bb27; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb24: {
        _37 = const false;               // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb26;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb25: {
        _41 = &_36;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _43 = log::max_level() -> bb28;  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb26: {
        switchInt(move _37) -> [0: bb40, otherwise: bb30]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb27: {
        switchInt(move _38) -> [0: bb24, otherwise: bb25]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb28: {
        _42 = &_43;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _40 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _41, move _42) -> bb29; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb29: {
        _37 = move _40;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb26;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb30: {
        _91 = const _;                   // scope 9 at tests/chain-executor-mock/src/main.rs:185:17: 185:49
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:185:17: 185:49
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(send_block::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[4])) }
        _46 = _91 as &[&str] (Pointer(Unsize)); // scope 9 at tests/chain-executor-mock/src/main.rs:185:17: 185:49
        _53 = &_31;                      // scope 9 at tests/chain-executor-mock/src/main.rs:186:17: 186:35
        _52 = <H160 as cita_types::traits::LowerHex>::lower_hex(move _53) -> bb31; // scope 9 at tests/chain-executor-mock/src/main.rs:186:17: 186:35
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:186:24: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> std::string::String {<H160 as cita_types::traits::LowerHex>::lower_hex}, val: Value(<ZST>) }
    }

    bb31: {
        _51 = &_52;                      // scope 9 at tests/chain-executor-mock/src/main.rs:186:17: 186:35
        _50 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_51) -> [return: bb32, unwind: bb55]; // scope 9 at tests/chain-executor-mock/src/main.rs:186:17: 186:35
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:186:17: 186:35
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb32: {
        _59 = &_31;                      // scope 9 at tests/chain-executor-mock/src/main.rs:187:52: 187:59
        _61 = <U256 as From<u32>>::from(_22) -> [return: bb33, unwind: bb55]; // scope 9 at tests/chain-executor-mock/src/main.rs:187:62: 187:79
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:187:62: 187:72
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(u32) -> U256 {<U256 as From<u32>>::from}, val: Value(<ZST>) }
    }

    bb33: {
        _60 = &_61;                      // scope 9 at tests/chain-executor-mock/src/main.rs:187:61: 187:79
        _58 = BuildBlock::build_contract_address(_59, _60) -> [return: bb34, unwind: bb55]; // scope 9 at tests/chain-executor-mock/src/main.rs:187:17: 187:80
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:187:17: 187:51
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H160, &'b U256) -> H160 {BuildBlock::build_contract_address}, val: Value(<ZST>) }
    }

    bb34: {
        _57 = &_58;                      // scope 9 at tests/chain-executor-mock/src/main.rs:187:17: 187:92
        _56 = <H160 as cita_types::traits::LowerHex>::lower_hex(move _57) -> [return: bb35, unwind: bb55]; // scope 9 at tests/chain-executor-mock/src/main.rs:187:17: 187:92
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:187:81: 187:90
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> std::string::String {<H160 as cita_types::traits::LowerHex>::lower_hex}, val: Value(<ZST>) }
    }

    bb35: {
        _55 = &_56;                      // scope 9 at tests/chain-executor-mock/src/main.rs:187:17: 187:92
        _54 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_55) -> [return: bb36, unwind: bb54]; // scope 9 at tests/chain-executor-mock/src/main.rs:187:17: 187:92
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:187:17: 187:92
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb36: {
        _49 = [move _50, move _54];      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _48 = &_49;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _47 = _48 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _45 = Arguments::<'_>::new_v1(move _46, move _47) -> [return: bb37, unwind: bb54]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb37: {
        _90 = const _;                   // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(send_block::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[3])) }
        _44 = log::__private_api_log(move _45, _36, _90) -> [return: bb38, unwind: bb54]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb38: {
        drop(_56) -> [return: bb39, unwind: bb55]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:41:14: 41:15
    }

    bb39: {
        drop(_52) -> bb40;               // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:41:14: 41:15
    }

    bb40: {
        _62 = log::Level::Info;          // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _65 = &_62;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _89 = const _;                   // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(send_block::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _64 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _65, _89) -> bb44; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb41: {
        _63 = const false;               // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb43;                    // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb42: {
        _67 = &_62;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _69 = log::max_level() -> bb45;  // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb43: {
        switchInt(move _63) -> [0: bb52, otherwise: bb47]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb44: {
        switchInt(move _64) -> [0: bb41, otherwise: bb42]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb45: {
        _68 = &_69;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _66 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _67, move _68) -> bb46; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb46: {
        _63 = move _66;                  // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb43;                    // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb47: {
        _88 = const _;                   // scope 10 at tests/chain-executor-mock/src/main.rs:190:17: 190:49
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:190:17: 190:49
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(send_block::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _72 = _88 as &[&str] (Pointer(Unsize)); // scope 10 at tests/chain-executor-mock/src/main.rs:190:17: 190:49
        _77 = &_3;                       // scope 10 at tests/chain-executor-mock/src/main.rs:191:17: 191:33
        _76 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_77) -> bb48; // scope 10 at tests/chain-executor-mock/src/main.rs:191:17: 191:33
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:191:17: 191:33
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb48: {
        _79 = &_18;                      // scope 10 at tests/chain-executor-mock/src/main.rs:191:35: 191:40
        _78 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_79) -> bb49; // scope 10 at tests/chain-executor-mock/src/main.rs:191:35: 191:40
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:191:35: 191:40
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb49: {
        _81 = &_22;                      // scope 10 at tests/chain-executor-mock/src/main.rs:191:42: 191:47
        _80 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(_81) -> bb50; // scope 10 at tests/chain-executor-mock/src/main.rs:191:42: 191:47
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:191:42: 191:47
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb50: {
        _75 = [move _76, move _78, move _80]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _74 = &_75;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _73 = _74 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _71 = Arguments::<'_>::new_v1(move _72, move _73) -> bb51; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb51: {
        _87 = const _;                   // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(send_block::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _70 = log::__private_api_log(move _71, _62, _87) -> bb52; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb52: {
        _82 = _3;                        // scope 8 at tests/chain-executor-mock/src/main.rs:194:17: 194:33
        _83 = _14;                       // scope 8 at tests/chain-executor-mock/src/main.rs:195:17: 195:21
        _84 = _18;                       // scope 8 at tests/chain-executor-mock/src/main.rs:196:17: 196:22
        _85 = _27;                       // scope 8 at tests/chain-executor-mock/src/main.rs:198:17: 198:34
        _86 = &_11;                      // scope 8 at tests/chain-executor-mock/src/main.rs:199:17: 199:28
        _0 = BuildBlock::build_tx(move _82, move _83, move _84, _22, move _85, _86) -> bb53; // scope 8 at tests/chain-executor-mock/src/main.rs:193:13: 200:14
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:193:13: 193:33
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a str, &'b str, u64, u32, u64, &'c H256) -> SignedTransaction {BuildBlock::build_tx}, val: Value(<ZST>) }
    }

    bb53: {
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:201:10: 201:10
    }

    bb54 (cleanup): {
        drop(_56) -> bb55;               // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:41:14: 41:15
    }

    bb55 (cleanup): {
        drop(_52) -> bb56;               // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:41:14: 41:15
    }

    bb56 (cleanup): {
        resume;                          // scope 0 at tests/chain-executor-mock/src/main.rs:175:14: 201:10
    }
}

promoted[0] in send_block::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:189:13: 192:14
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:189:13: 192:14

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:189:13: 192:14
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:189:13: 192:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:189:13: 192:14
        _1 = (move _2, move _4, move _6, const 189_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in send_block::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:190:17: 190:49
    let mut _1: [&str; 3];               // in scope 0 at tests/chain-executor-mock/src/main.rs:190:17: 190:49

    bb0: {
        _1 = [const "address=", const ", quota=", const ", nonce="]; // scope 0 at tests/chain-executor-mock/src/main.rs:190:17: 190:49
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:190:17: 190:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:190:17: 190:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:190:17: 190:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:190:17: 190:49
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:190:17: 190:49
    }
}

promoted[2] in send_block::{closure#0}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in send_block::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:184:13: 188:14
    let mut _7: &str;                    // in scope 0 at tests/chain-executor-mock/src/main.rs:184:13: 188:14

    bb0: {
        _3 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "chain_executor_mock"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "tests/chain-executor-mock/src/main.rs"; // scope 0 at tests/chain-executor-mock/src/main.rs:184:13: 188:14
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:184:13: 188:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at tests/chain-executor-mock/src/main.rs:184:13: 188:14
        _1 = (move _2, move _4, move _6, const 184_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in send_block::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at tests/chain-executor-mock/src/main.rs:185:17: 185:49
    let mut _1: [&str; 2];               // in scope 0 at tests/chain-executor-mock/src/main.rs:185:17: 185:49

    bb0: {
        _1 = [const "sender=", const ", contract_address="]; // scope 0 at tests/chain-executor-mock/src/main.rs:185:17: 185:49
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:185:17: 185:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: tests/chain-executor-mock/src/main.rs:185:17: 185:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tests/chain-executor-mock/src/main.rs:185:17: 185:49
        return;                          // scope 0 at tests/chain-executor-mock/src/main.rs:185:17: 185:49
    }
}

promoted[5] in send_block::{closure#0}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}
