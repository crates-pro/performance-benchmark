// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::sync::Arc<std::sync::Mutex<bool>>;
    let mut _2: std::sync::Mutex<bool>;
    let mut _4: std::sync::Condvar;
    let mut _6: &std::sync::Arc<std::sync::Mutex<bool>>;
    let mut _8: &std::sync::Arc<std::sync::Condvar>;
    let mut _10: [closure@src/main.rs:11:21: 11:28];
    let _12: ();
    let mut _13: std::time::Duration;
    let mut _14: &mut bool;
    let mut _15: &mut std::sync::MutexGuard<'_, bool>;
    let mut _16: std::sync::MutexGuard<'_, bool>;
    let mut _17: std::result::Result<std::sync::MutexGuard<'_, bool>, std::sync::PoisonError<std::sync::MutexGuard<'_, bool>>>;
    let _18: &std::sync::Mutex<bool>;
    let mut _19: &std::sync::Arc<std::sync::Mutex<bool>>;
    let mut _20: bool;
    let mut _21: i32;
    let _22: ();
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &i32;
    let _30: ();
    let _31: &std::sync::Condvar;
    let mut _32: &std::sync::Arc<std::sync::Condvar>;
    let _33: ();
    let mut _34: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _35: std::thread::JoinHandle<()>;
    let _36: ();
    let mut _37: std::fmt::Arguments<'_>;
    let mut _38: &[&str];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: [core::fmt::rt::Argument<'_>; 1];
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &std::sync::Arc<std::sync::Mutex<bool>>;
    let mut _46: bool;
    let mut _47: bool;
    scope 1 {
        debug flag => _1;
        let _3: std::sync::Arc<std::sync::Condvar>;
        scope 2 {
            debug cond => _3;
            let _5: std::sync::Arc<std::sync::Mutex<bool>>;
            scope 3 {
                debug cflag => _5;
                let _7: std::sync::Arc<std::sync::Condvar>;
                scope 4 {
                    debug ccond => _7;
                    let _9: std::thread::JoinHandle<()>;
                    scope 5 {
                        debug hdl => _9;
                        let mut _11: i32;
                        scope 6 {
                            debug counter => _11;
                            let mut _44: &[&str; 2];
                            let mut _45: &[&str; 2];
                            scope 47 (inlined Duration::from_millis) {
                                debug millis => const 1000_u64;
                                let mut _90: u64;
                                let mut _91: u32;
                            }
                            scope 48 (inlined <Arc<Mutex<bool>> as Deref>::deref) {
                                debug self => _19;
                                let _92: &alloc::sync::ArcInner<std::sync::Mutex<bool>>;
                                scope 49 (inlined Arc::<Mutex<bool>>::inner) {
                                    debug self => _19;
                                    let mut _93: &std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Mutex<bool>>>;
                                    scope 50 {
                                        scope 51 (inlined NonNull::<alloc::sync::ArcInner<Mutex<bool>>>::as_ref::<'_>) {
                                            debug self => _93;
                                            let _94: *mut alloc::sync::ArcInner<std::sync::Mutex<bool>>;
                                            let mut _95: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Mutex<bool>>>;
                                            scope 52 {
                                                scope 53 (inlined NonNull::<alloc::sync::ArcInner<Mutex<bool>>>::as_ptr) {
                                                    debug self => _95;
                                                    let mut _96: *const alloc::sync::ArcInner<std::sync::Mutex<bool>>;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 54 (inlined Mutex::<bool>::lock) {
                                debug self => _18;
                                let _97: ();
                                let mut _98: &std::sys::unix::locks::futex_mutex::Mutex;
                                scope 55 {
                                }
                            }
                            scope 56 (inlined <MutexGuard<'_, bool> as DerefMut>::deref_mut) {
                                debug self => _15;
                                let mut _99: *mut bool;
                                let mut _100: &std::cell::UnsafeCell<bool>;
                                let mut _101: &std::sync::Mutex<bool>;
                                scope 57 {
                                    scope 58 (inlined UnsafeCell::<bool>::get) {
                                        debug self => _100;
                                        let mut _102: *const bool;
                                        let mut _103: *const std::cell::UnsafeCell<bool>;
                                    }
                                }
                            }
                            scope 59 (inlined JoinHandle::<()>::join) {
                                debug self => _35;
                                let mut _104: std::thread::JoinInner<'_, ()>;
                            }
                            scope 60 (inlined core::fmt::rt::Argument::<'_>::new_display::<i32>) {
                                debug x => _29;
                                let mut _105: for<'a, 'b, 'c> fn(&'a i32, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error>;
                                scope 61 (inlined core::fmt::rt::Argument::<'_>::new::<i32>) {
                                    debug x => _29;
                                    debug f => _105;
                                    let mut _106: for<'a, 'b, 'c> fn(&'a core::fmt::rt::Opaque, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error>;
                                    let mut _107: &core::fmt::rt::Opaque;
                                    scope 62 {
                                    }
                                }
                            }
                            scope 63 (inlined <Arc<Condvar> as Deref>::deref) {
                                debug self => _32;
                                let _108: &alloc::sync::ArcInner<std::sync::Condvar>;
                                scope 64 (inlined Arc::<Condvar>::inner) {
                                    debug self => _32;
                                    let mut _109: &std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Condvar>>;
                                    scope 65 {
                                        scope 66 (inlined NonNull::<alloc::sync::ArcInner<Condvar>>::as_ref::<'_>) {
                                            debug self => _109;
                                            let _110: *mut alloc::sync::ArcInner<std::sync::Condvar>;
                                            let mut _111: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Condvar>>;
                                            scope 67 {
                                                scope 68 (inlined NonNull::<alloc::sync::ArcInner<Condvar>>::as_ptr) {
                                                    debug self => _111;
                                                    let mut _112: *const alloc::sync::ArcInner<std::sync::Condvar>;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 69 (inlined core::fmt::rt::Argument::<'_>::new_debug::<Arc<Mutex<bool>>>) {
                                debug x => _43;
                                let mut _113: for<'a, 'b, 'c> fn(&'a std::sync::Arc<std::sync::Mutex<bool>>, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error>;
                                scope 70 (inlined core::fmt::rt::Argument::<'_>::new::<Arc<Mutex<bool>>>) {
                                    debug x => _43;
                                    debug f => _113;
                                    let mut _114: for<'a, 'b, 'c> fn(&'a core::fmt::rt::Opaque, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error>;
                                    let mut _115: &core::fmt::rt::Opaque;
                                    scope 71 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 33 (inlined <Arc<Condvar> as Clone>::clone) {
                    debug self => _8;
                    let _74: usize;
                    let mut _75: &std::sync::atomic::AtomicUsize;
                    let _76: &alloc::sync::ArcInner<std::sync::Condvar>;
                    let mut _77: bool;
                    let mut _78: usize;
                    let _79: !;
                    let mut _80: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Condvar>>;
                    let mut _85: usize;
                    scope 34 {
                        debug old_size => _74;
                        scope 35 {
                            scope 46 (inlined Arc::<Condvar>::from_inner) {
                                debug ptr => _80;
                            }
                        }
                    }
                    scope 36 (inlined Arc::<Condvar>::inner) {
                        debug self => _8;
                        let mut _81: &std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Condvar>>;
                        scope 37 {
                            scope 38 (inlined NonNull::<alloc::sync::ArcInner<Condvar>>::as_ref::<'_>) {
                                debug self => _81;
                                let _82: *mut alloc::sync::ArcInner<std::sync::Condvar>;
                                let mut _83: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Condvar>>;
                                scope 39 {
                                    scope 40 (inlined NonNull::<alloc::sync::ArcInner<Condvar>>::as_ptr) {
                                        debug self => _83;
                                        let mut _84: *const alloc::sync::ArcInner<std::sync::Condvar>;
                                    }
                                }
                            }
                        }
                    }
                    scope 41 (inlined AtomicUsize::fetch_add) {
                        debug self => _75;
                        debug val => const 1_usize;
                        debug order => const Relaxed;
                        let mut _86: *mut usize;
                        let mut _87: &std::cell::UnsafeCell<usize>;
                        scope 42 {
                            scope 43 (inlined UnsafeCell::<usize>::get) {
                                debug self => _87;
                                let mut _88: *const usize;
                                let mut _89: *const std::cell::UnsafeCell<usize>;
                            }
                            scope 44 (inlined atomic::atomic_add::<usize>) {
                                debug dst => _86;
                                debug val => const 1_usize;
                                debug order => const Relaxed;
                                scope 45 {
                                }
                            }
                        }
                    }
                }
            }
            scope 19 (inlined <Arc<Mutex<bool>> as Clone>::clone) {
                debug self => _6;
                let _58: usize;
                let mut _59: &std::sync::atomic::AtomicUsize;
                let _60: &alloc::sync::ArcInner<std::sync::Mutex<bool>>;
                let mut _61: bool;
                let mut _62: usize;
                let _63: !;
                let mut _64: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Mutex<bool>>>;
                let mut _69: usize;
                scope 20 {
                    debug old_size => _58;
                    scope 21 {
                        scope 32 (inlined Arc::<Mutex<bool>>::from_inner) {
                            debug ptr => _64;
                        }
                    }
                }
                scope 22 (inlined Arc::<Mutex<bool>>::inner) {
                    debug self => _6;
                    let mut _65: &std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Mutex<bool>>>;
                    scope 23 {
                        scope 24 (inlined NonNull::<alloc::sync::ArcInner<Mutex<bool>>>::as_ref::<'_>) {
                            debug self => _65;
                            let _66: *mut alloc::sync::ArcInner<std::sync::Mutex<bool>>;
                            let mut _67: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Mutex<bool>>>;
                            scope 25 {
                                scope 26 (inlined NonNull::<alloc::sync::ArcInner<Mutex<bool>>>::as_ptr) {
                                    debug self => _67;
                                    let mut _68: *const alloc::sync::ArcInner<std::sync::Mutex<bool>>;
                                }
                            }
                        }
                    }
                }
                scope 27 (inlined AtomicUsize::fetch_add) {
                    debug self => _59;
                    debug val => const 1_usize;
                    debug order => const Relaxed;
                    let mut _70: *mut usize;
                    let mut _71: &std::cell::UnsafeCell<usize>;
                    scope 28 {
                        scope 29 (inlined UnsafeCell::<usize>::get) {
                            debug self => _71;
                            let mut _72: *const usize;
                            let mut _73: *const std::cell::UnsafeCell<usize>;
                        }
                        scope 30 (inlined atomic::atomic_add::<usize>) {
                            debug dst => _70;
                            debug val => const 1_usize;
                            debug order => const Relaxed;
                            scope 31 {
                            }
                        }
                    }
                }
            }
        }
        scope 15 (inlined Condvar::new) {
            let mut _55: std::sys::unix::locks::futex_condvar::Condvar;
            scope 16 (inlined std::sys::unix::locks::futex_condvar::Condvar::new) {
                let mut _56: std::sync::atomic::AtomicU32;
                scope 17 (inlined AtomicU32::new) {
                    debug v => const 0_u32;
                    let mut _57: std::cell::UnsafeCell<u32>;
                    scope 18 (inlined UnsafeCell::<u32>::new) {
                        debug value => const 0_u32;
                    }
                }
            }
        }
    }
    scope 7 (inlined Mutex::<bool>::new) {
        debug t => const false;
        let mut _48: std::sys::unix::locks::futex_mutex::Mutex;
        let mut _49: std::sync::poison::Flag;
        let mut _50: std::cell::UnsafeCell<bool>;
        scope 8 (inlined std::sys::unix::locks::futex_mutex::Mutex::new) {
            let mut _51: std::sync::atomic::AtomicU32;
            scope 9 (inlined AtomicU32::new) {
                debug v => const 0_u32;
                let mut _52: std::cell::UnsafeCell<u32>;
                scope 10 (inlined UnsafeCell::<u32>::new) {
                    debug value => const 0_u32;
                }
            }
        }
        scope 11 (inlined sync::poison::Flag::new) {
            let mut _53: std::sync::atomic::AtomicBool;
            scope 12 (inlined AtomicBool::new) {
                debug v => const false;
                let mut _54: std::cell::UnsafeCell<u8>;
                scope 13 (inlined UnsafeCell::<u8>::new) {
                    debug value => const 0_u8;
                }
            }
        }
        scope 14 (inlined UnsafeCell::<bool>::new) {
            debug value => const false;
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_48);
        StorageLive(_51);
        StorageLive(_52);
        _52 = const UnsafeCell::<u32> {{ value: 0_u32 }};
        _51 = AtomicU32 { v: move _52 };
        StorageDead(_52);
        _48 = std::sys::unix::locks::futex_mutex::Mutex { futex: move _51 };
        StorageDead(_51);
        StorageLive(_49);
        StorageLive(_53);
        StorageLive(_54);
        _54 = const UnsafeCell::<u8> {{ value: 0_u8 }};
        _53 = AtomicBool { v: move _54 };
        StorageDead(_54);
        _49 = sync::poison::Flag { failed: move _53 };
        StorageDead(_53);
        StorageLive(_50);
        _50 = const UnsafeCell::<bool> {{ value: false }};
        _2 = Mutex::<bool> { inner: move _48, poison: move _49, data: move _50 };
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        _1 = Arc::<Mutex<bool>>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = const UnsafeCell::<u32> {{ value: 0_u32 }};
        _56 = AtomicU32 { v: move _57 };
        StorageDead(_57);
        _55 = std::sys::unix::locks::futex_condvar::Condvar { futex: move _56 };
        StorageDead(_56);
        _4 = Condvar { inner: move _55 };
        StorageDead(_55);
        _3 = Arc::<Condvar>::new(move _4) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_1;
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_65);
        _65 = &((*_6).0: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Mutex<bool>>>);
        StorageLive(_66);
        StorageLive(_67);
        _67 = (*_65);
        StorageLive(_68);
        _68 = (_67.0: *const alloc::sync::ArcInner<std::sync::Mutex<bool>>);
        _66 = move _68 as *mut alloc::sync::ArcInner<std::sync::Mutex<bool>> (PtrToPtr);
        StorageDead(_68);
        StorageDead(_67);
        _60 = &(*_66);
        StorageDead(_66);
        StorageDead(_65);
        _59 = &((*_60).0: std::sync::atomic::AtomicUsize);
        StorageLive(_69);
        _69 = const 1_usize;
        StorageLive(_70);
        StorageLive(_71);
        _71 = &((*_59).0: std::cell::UnsafeCell<usize>);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &raw const (*_71);
        _72 = move _73 as *const usize (PtrToPtr);
        StorageDead(_73);
        _70 = move _72 as *mut usize (PtrToPtr);
        StorageDead(_72);
        StorageDead(_71);
        _58 = atomic_xadd_relaxed::<usize>(_70, _69) -> [return: bb27, unwind unreachable];
    }

    bb3: {
        _46 = const true;
        StorageDead(_10);
        StorageLive(_11);
        _11 = const 0_i32;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_13);
        StorageLive(_90);
        _90 = const 1_u64;
        StorageLive(_91);
        _91 = const 0_u32;
        _13 = Duration::new(move _90, move _91) -> [return: bb31, unwind: bb22];
    }

    bb5: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_19);
        _19 = &_1;
        StorageLive(_92);
        StorageLive(_93);
        _93 = &((*_19).0: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Mutex<bool>>>);
        StorageLive(_94);
        StorageLive(_95);
        _95 = (*_93);
        StorageLive(_96);
        _96 = (_95.0: *const alloc::sync::ArcInner<std::sync::Mutex<bool>>);
        _94 = move _96 as *mut alloc::sync::ArcInner<std::sync::Mutex<bool>> (PtrToPtr);
        StorageDead(_96);
        StorageDead(_95);
        _92 = &(*_94);
        StorageDead(_94);
        StorageDead(_93);
        _18 = &((*_92).2: std::sync::Mutex<bool>);
        StorageDead(_92);
        StorageDead(_19);
        StorageLive(_98);
        _98 = &((*_18).0: std::sys::unix::locks::futex_mutex::Mutex);
        _97 = std::sys::unix::locks::futex_mutex::Mutex::lock(move _98) -> [return: bb32, unwind: bb22];
    }

    bb6: {
        _16 = Result::<MutexGuard<'_, bool>, PoisonError<MutexGuard<'_, bool>>>::unwrap(move _17) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        _15 = &mut _16;
        StorageDead(_17);
        StorageLive(_99);
        StorageLive(_100);
        _101 = deref_copy ((*_15).0: &std::sync::Mutex<bool>);
        _100 = &((*_101).2: std::cell::UnsafeCell<bool>);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &raw const (*_100);
        _102 = move _103 as *const bool (PtrToPtr);
        StorageDead(_103);
        _99 = move _102 as *mut bool (PtrToPtr);
        StorageDead(_102);
        StorageDead(_100);
        _14 = &mut (*_99);
        StorageDead(_99);
        StorageDead(_15);
        (*_14) = const true;
        drop(_16) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        _11 = Add(_11, const 1_i32);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _11;
        _20 = Gt(move _21, const 3_i32);
        StorageDead(_21);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_20);
        StorageLive(_34);
        StorageLive(_35);
        _46 = const false;
        _35 = move _9;
        StorageLive(_104);
        _104 = move (_35.0: std::thread::JoinInner<'_, ()>);
        _34 = std::thread::JoinInner::<'_, ()>::join(move _104) -> [return: bb33, unwind: bb22];
    }

    bb10: {
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        _45 = const _;
        _24 = _45 as &[&str] (PointerCoercion(Unsize));
        StorageLive(_25);
        StorageLive(_27);
        StorageLive(_28);
        _29 = &_11;
        StorageLive(_105);
        _105 = <i32 as std::fmt::Display>::fmt as for<'a, 'b, 'c> fn(&'a i32, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> (PointerCoercion(ReifyFnPointer));
        StorageLive(_106);
        _106 = _105 as for<'a, 'b, 'c> fn(&'a core::fmt::rt::Opaque, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> (Transmute);
        StorageLive(_107);
        _107 = _29 as &core::fmt::rt::Opaque (Transmute);
        _28 = core::fmt::rt::Argument::<'_> { value: move _107, formatter: move _106 };
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        _27 = [move _28];
        StorageDead(_28);
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _23 = Arguments::<'_>::new_v1(move _24, move _25) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = _print(move _23) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_27);
        StorageLive(_32);
        _32 = &_3;
        StorageLive(_108);
        StorageLive(_109);
        _109 = &((*_32).0: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Condvar>>);
        StorageLive(_110);
        StorageLive(_111);
        _111 = (*_109);
        StorageLive(_112);
        _112 = (_111.0: *const alloc::sync::ArcInner<std::sync::Condvar>);
        _110 = move _112 as *mut alloc::sync::ArcInner<std::sync::Condvar> (PtrToPtr);
        StorageDead(_112);
        StorageDead(_111);
        _108 = &(*_110);
        StorageDead(_110);
        StorageDead(_109);
        _31 = &((*_108).2: std::sync::Condvar);
        StorageDead(_108);
        StorageDead(_32);
        _30 = Condvar::notify_one(_31) -> [return: bb34, unwind: bb22];
    }

    bb13: {
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        _44 = const _;
        _38 = _44 as &[&str] (PointerCoercion(Unsize));
        StorageLive(_39);
        StorageLive(_41);
        StorageLive(_42);
        _43 = &_1;
        StorageLive(_113);
        _113 = <Arc<Mutex<bool>> as Debug>::fmt as for<'a, 'b, 'c> fn(&'a std::sync::Arc<std::sync::Mutex<bool>>, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> (PointerCoercion(ReifyFnPointer));
        StorageLive(_114);
        _114 = _113 as for<'a, 'b, 'c> fn(&'a core::fmt::rt::Opaque, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> (Transmute);
        StorageLive(_115);
        _115 = _43 as &core::fmt::rt::Opaque (Transmute);
        _42 = core::fmt::rt::Argument::<'_> { value: move _115, formatter: move _114 };
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_113);
        _41 = [move _42];
        StorageDead(_42);
        _40 = &_41;
        _39 = _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _37 = Arguments::<'_>::new_v1(move _38, move _39) -> [return: bb14, unwind: bb22];
    }

    bb14: {
        StorageDead(_39);
        StorageDead(_38);
        _36 = _print(move _37) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_41);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        drop(_3) -> [return: bb16, unwind: bb19];
    }

    bb16: {
        StorageDead(_3);
        drop(_1) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_1);
        return;
    }

    bb18 (cleanup): {
        drop(_3) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_1) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }

    bb21 (cleanup): {
        drop(_9) -> [return: bb24, unwind terminate];
    }

    bb22 (cleanup): {
        switchInt(_46) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_5) -> [return: bb18, unwind terminate];
    }

    bb24 (cleanup): {
        switchInt(_47) -> [0: bb18, otherwise: bb23];
    }

    bb25: {
        _63 = std::intrinsics::abort() -> unwind unreachable;
    }

    bb26: {
        StorageDead(_61);
        StorageLive(_64);
        _64 = ((*_6).0: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Mutex<bool>>>);
        _5 = Arc::<Mutex<bool>> { ptr: _64, phantom: const PhantomData::<alloc::sync::ArcInner<Mutex<bool>>> };
        StorageDead(_64);
        StorageDead(_58);
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_3;
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_81);
        _81 = &((*_8).0: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Condvar>>);
        StorageLive(_82);
        StorageLive(_83);
        _83 = (*_81);
        StorageLive(_84);
        _84 = (_83.0: *const alloc::sync::ArcInner<std::sync::Condvar>);
        _82 = move _84 as *mut alloc::sync::ArcInner<std::sync::Condvar> (PtrToPtr);
        StorageDead(_84);
        StorageDead(_83);
        _76 = &(*_82);
        StorageDead(_82);
        StorageDead(_81);
        _75 = &((*_76).0: std::sync::atomic::AtomicUsize);
        StorageLive(_85);
        _85 = const 1_usize;
        StorageLive(_86);
        StorageLive(_87);
        _87 = &((*_75).0: std::cell::UnsafeCell<usize>);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &raw const (*_87);
        _88 = move _89 as *const usize (PtrToPtr);
        StorageDead(_89);
        _86 = move _88 as *mut usize (PtrToPtr);
        StorageDead(_88);
        StorageDead(_87);
        _74 = atomic_xadd_relaxed::<usize>(_86, _85) -> [return: bb30, unwind unreachable];
    }

    bb27: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_59);
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _58;
        _61 = Gt(move _62, const _);
        StorageDead(_62);
        switchInt(move _61) -> [0: bb26, otherwise: bb25];
    }

    bb28: {
        _79 = std::intrinsics::abort() -> unwind unreachable;
    }

    bb29: {
        StorageDead(_77);
        StorageLive(_80);
        _80 = ((*_8).0: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Condvar>>);
        _7 = Arc::<Condvar> { ptr: _80, phantom: const PhantomData::<alloc::sync::ArcInner<Condvar>> };
        StorageDead(_80);
        StorageDead(_74);
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _47 = const false;
        _10 = [closure@src/main.rs:11:21: 11:28] { cflag: move _5, ccond: move _7 };
        _9 = spawn::<[closure@src/main.rs:11:21: 11:28], ()>(move _10) -> [return: bb3, unwind: bb24];
    }

    bb30: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_75);
        StorageDead(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _74;
        _77 = Gt(move _78, const _);
        StorageDead(_78);
        switchInt(move _77) -> [0: bb29, otherwise: bb28];
    }

    bb31: {
        StorageDead(_91);
        StorageDead(_90);
        _12 = sleep(move _13) -> [return: bb5, unwind: bb22];
    }

    bb32: {
        StorageDead(_98);
        _17 = MutexGuard::<'_, bool>::new(_18) -> [return: bb6, unwind: bb22];
    }

    bb33: {
        StorageDead(_104);
        StorageDead(_35);
        _33 = Result::<(), Box<dyn Any + Send>>::unwrap(move _34) -> [return: bb13, unwind: bb22];
    }

    bb34: {
        goto -> bb4;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "outside counter: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: [closure@src/main.rs:11:21: 11:28]) -> () {
    debug cflag => (_1.0: std::sync::Arc<std::sync::Mutex<bool>>);
    debug ccond => (_1.1: std::sync::Arc<std::sync::Condvar>);
    let mut _0: ();
    let mut _2: std::sync::MutexGuard<'_, bool>;
    let mut _3: std::result::Result<std::sync::MutexGuard<'_, bool>, std::sync::PoisonError<std::sync::MutexGuard<'_, bool>>>;
    let _4: &std::sync::Mutex<bool>;
    let mut _5: &std::sync::Arc<std::sync::Mutex<bool>>;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: &bool;
    let mut _12: &std::sync::MutexGuard<'_, bool>;
    let mut _13: std::sync::MutexGuard<'_, bool>;
    let mut _14: std::result::Result<std::sync::MutexGuard<'_, bool>, std::sync::PoisonError<std::sync::MutexGuard<'_, bool>>>;
    let _15: &std::sync::Condvar;
    let mut _16: &std::sync::Arc<std::sync::Condvar>;
    let mut _17: std::sync::MutexGuard<'_, bool>;
    let mut _18: &mut bool;
    let mut _19: &mut std::sync::MutexGuard<'_, bool>;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &i32;
    let mut _29: bool;
    scope 1 {
        debug lock => _2;
        let mut _6: i32;
        scope 2 {
            debug counter => _6;
            let mut _28: &[&str; 2];
            scope 11 (inlined <MutexGuard<'_, bool> as Deref>::deref) {
                debug self => _12;
                let _37: *mut bool;
                let mut _38: &std::cell::UnsafeCell<bool>;
                let mut _39: &std::sync::Mutex<bool>;
                scope 12 {
                    scope 13 (inlined UnsafeCell::<bool>::get) {
                        debug self => _38;
                        let mut _40: *const bool;
                        let mut _41: *const std::cell::UnsafeCell<bool>;
                    }
                }
            }
            scope 14 (inlined <Arc<Condvar> as Deref>::deref) {
                debug self => _16;
                let _42: &alloc::sync::ArcInner<std::sync::Condvar>;
                scope 15 (inlined Arc::<Condvar>::inner) {
                    debug self => _16;
                    let mut _43: &std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Condvar>>;
                    scope 16 {
                        scope 17 (inlined NonNull::<alloc::sync::ArcInner<Condvar>>::as_ref::<'_>) {
                            debug self => _43;
                            let _44: *mut alloc::sync::ArcInner<std::sync::Condvar>;
                            let mut _45: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Condvar>>;
                            scope 18 {
                                scope 19 (inlined NonNull::<alloc::sync::ArcInner<Condvar>>::as_ptr) {
                                    debug self => _45;
                                    let mut _46: *const alloc::sync::ArcInner<std::sync::Condvar>;
                                }
                            }
                        }
                    }
                }
            }
            scope 20 (inlined <MutexGuard<'_, bool> as DerefMut>::deref_mut) {
                debug self => _19;
                let mut _47: *mut bool;
                let mut _48: &std::cell::UnsafeCell<bool>;
                let mut _49: &std::sync::Mutex<bool>;
                scope 21 {
                    scope 22 (inlined UnsafeCell::<bool>::get) {
                        debug self => _48;
                        let mut _50: *const bool;
                        let mut _51: *const std::cell::UnsafeCell<bool>;
                    }
                }
            }
            scope 23 (inlined core::fmt::rt::Argument::<'_>::new_display::<i32>) {
                debug x => _27;
                let mut _52: for<'a, 'b, 'c> fn(&'a i32, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error>;
                scope 24 (inlined core::fmt::rt::Argument::<'_>::new::<i32>) {
                    debug x => _27;
                    debug f => _52;
                    let mut _53: for<'a, 'b, 'c> fn(&'a core::fmt::rt::Opaque, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error>;
                    let mut _54: &core::fmt::rt::Opaque;
                    scope 25 {
                    }
                }
            }
        }
    }
    scope 3 (inlined <Arc<Mutex<bool>> as Deref>::deref) {
        debug self => _5;
        let _30: &alloc::sync::ArcInner<std::sync::Mutex<bool>>;
        scope 4 (inlined Arc::<Mutex<bool>>::inner) {
            debug self => _5;
            let mut _31: &std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Mutex<bool>>>;
            scope 5 {
                scope 6 (inlined NonNull::<alloc::sync::ArcInner<Mutex<bool>>>::as_ref::<'_>) {
                    debug self => _31;
                    let _32: *mut alloc::sync::ArcInner<std::sync::Mutex<bool>>;
                    let mut _33: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Mutex<bool>>>;
                    scope 7 {
                        scope 8 (inlined NonNull::<alloc::sync::ArcInner<Mutex<bool>>>::as_ptr) {
                            debug self => _33;
                            let mut _34: *const alloc::sync::ArcInner<std::sync::Mutex<bool>>;
                        }
                    }
                }
            }
        }
    }
    scope 9 (inlined Mutex::<bool>::lock) {
        debug self => _4;
        let _35: ();
        let mut _36: &std::sys::unix::locks::futex_mutex::Mutex;
        scope 10 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_5);
        _5 = &(_1.0: std::sync::Arc<std::sync::Mutex<bool>>);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &((*_5).0: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Mutex<bool>>>);
        StorageLive(_32);
        StorageLive(_33);
        _33 = (*_31);
        StorageLive(_34);
        _34 = (_33.0: *const alloc::sync::ArcInner<std::sync::Mutex<bool>>);
        _32 = move _34 as *mut alloc::sync::ArcInner<std::sync::Mutex<bool>> (PtrToPtr);
        StorageDead(_34);
        StorageDead(_33);
        _30 = &(*_32);
        StorageDead(_32);
        StorageDead(_31);
        _4 = &((*_30).2: std::sync::Mutex<bool>);
        StorageDead(_30);
        StorageDead(_5);
        StorageLive(_36);
        _36 = &((*_4).0: std::sys::unix::locks::futex_mutex::Mutex);
        _35 = std::sys::unix::locks::futex_mutex::Mutex::lock(move _36) -> [return: bb18, unwind: bb14];
    }

    bb1: {
        _2 = Result::<MutexGuard<'_, bool>, PoisonError<MutexGuard<'_, bool>>>::unwrap(move _3) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _29 = const true;
        StorageDead(_3);
        StorageLive(_6);
        _6 = const 0_i32;
        goto -> bb3;
    }

    bb3: {
        StorageLive(_7);
        StorageLive(_8);
        _8 = _6;
        _7 = Lt(move _8, const 3_i32);
        StorageDead(_8);
        switchInt(move _7) -> [0: bb11, otherwise: bb4];
    }

    bb4: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &_2;
        StorageLive(_37);
        StorageLive(_38);
        _39 = deref_copy ((*_12).0: &std::sync::Mutex<bool>);
        _38 = &((*_39).2: std::cell::UnsafeCell<bool>);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &raw const (*_38);
        _40 = move _41 as *const bool (PtrToPtr);
        StorageDead(_41);
        _37 = move _40 as *mut bool (PtrToPtr);
        StorageDead(_40);
        StorageDead(_38);
        _11 = &(*_37);
        StorageDead(_37);
        _10 = (*_11);
        StorageDead(_12);
        _9 = Not(move _10);
        StorageDead(_11);
        StorageDead(_10);
        switchInt(move _9) -> [0: bb8, otherwise: bb5];
    }

    bb5: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_16);
        _16 = &(_1.1: std::sync::Arc<std::sync::Condvar>);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &((*_16).0: std::ptr::NonNull<alloc::sync::ArcInner<std::sync::Condvar>>);
        StorageLive(_44);
        StorageLive(_45);
        _45 = (*_43);
        StorageLive(_46);
        _46 = (_45.0: *const alloc::sync::ArcInner<std::sync::Condvar>);
        _44 = move _46 as *mut alloc::sync::ArcInner<std::sync::Condvar> (PtrToPtr);
        StorageDead(_46);
        StorageDead(_45);
        _42 = &(*_44);
        StorageDead(_44);
        StorageDead(_43);
        _15 = &((*_42).2: std::sync::Condvar);
        StorageDead(_42);
        StorageDead(_16);
        StorageLive(_17);
        _29 = const false;
        _17 = move _2;
        _14 = Condvar::wait::<bool>(_15, move _17) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        StorageDead(_17);
        _13 = Result::<MutexGuard<'_, bool>, PoisonError<MutexGuard<'_, bool>>>::unwrap(move _14) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        StorageDead(_14);
        _29 = const true;
        _2 = move _13;
        StorageDead(_13);
        StorageDead(_9);
        goto -> bb4;
    }

    bb8: {
        StorageDead(_9);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _2;
        StorageLive(_47);
        StorageLive(_48);
        _49 = deref_copy ((*_19).0: &std::sync::Mutex<bool>);
        _48 = &((*_49).2: std::cell::UnsafeCell<bool>);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &raw const (*_48);
        _50 = move _51 as *const bool (PtrToPtr);
        StorageDead(_51);
        _47 = move _50 as *mut bool (PtrToPtr);
        StorageDead(_50);
        StorageDead(_48);
        _18 = &mut (*_47);
        StorageDead(_47);
        StorageDead(_19);
        (*_18) = const false;
        StorageDead(_18);
        _6 = Add(_6, const 1_i32);
        StorageLive(_21);
        StorageLive(_22);
        _28 = const _;
        _22 = _28 as &[&str] (PointerCoercion(Unsize));
        StorageLive(_23);
        StorageLive(_25);
        StorageLive(_26);
        _27 = &_6;
        StorageLive(_52);
        _52 = <i32 as std::fmt::Display>::fmt as for<'a, 'b, 'c> fn(&'a i32, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> (PointerCoercion(ReifyFnPointer));
        StorageLive(_53);
        _53 = _52 as for<'a, 'b, 'c> fn(&'a core::fmt::rt::Opaque, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> (Transmute);
        StorageLive(_54);
        _54 = _27 as &core::fmt::rt::Opaque (Transmute);
        _26 = core::fmt::rt::Argument::<'_> { value: move _54, formatter: move _53 };
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        _25 = [move _26];
        StorageDead(_26);
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _23) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = _print(move _21) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        StorageDead(_21);
        StorageDead(_25);
        StorageDead(_7);
        goto -> bb3;
    }

    bb11: {
        StorageDead(_7);
        StorageDead(_6);
        drop(_2) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        StorageDead(_2);
        drop(_1) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate];
    }

    bb17 (cleanup): {
        switchInt(_29) -> [0: bb14, otherwise: bb16];
    }

    bb18: {
        StorageDead(_36);
        _3 = MutexGuard::<'_, bool>::new(_4) -> [return: bb1, unwind: bb14];
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "inner counter: ", const "\n"];
        _0 = &_1;
        return;
    }
}
