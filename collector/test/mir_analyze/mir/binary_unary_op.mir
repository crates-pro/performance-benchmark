// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: (i32, bool);
    let mut _5: (i32, bool);
    let mut _7: (i32, bool);
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _19: u32;
    let mut _20: bool;
    let mut _22: u32;
    let mut _23: bool;
    let mut _33: bool;
    let mut _35: bool;
    scope 1 {
        debug _y => const 6_i32;
        let _2: i32;
        scope 2 {
            debug _x => _2;
            let _4: i32;
            scope 3 {
                debug _x => _4;
                let _6: i32;
                scope 4 {
                    debug _x => _6;
                    let _8: i32;
                    scope 5 {
                        debug _x => _8;
                        let _13: i32;
                        scope 6 {
                            debug _x => _13;
                            let _18: i32;
                            scope 7 {
                                debug _x => _18;
                                let _21: i32;
                                scope 8 {
                                    debug _x => _21;
                                    let _24: i32;
                                    scope 9 {
                                        debug _x => _24;
                                        let _25: i32;
                                        scope 10 {
                                            debug _x => _25;
                                            let _26: i32;
                                            scope 11 {
                                                debug _x => _26;
                                                let _27: bool;
                                                scope 12 {
                                                    debug _x => _27;
                                                    let _28: bool;
                                                    scope 13 {
                                                        debug _x => _28;
                                                        let _29: bool;
                                                        scope 14 {
                                                            debug _x => _29;
                                                            let _30: bool;
                                                            scope 15 {
                                                                debug _x => _30;
                                                                let _31: bool;
                                                                scope 16 {
                                                                    debug _x => _31;
                                                                    let _32: i32;
                                                                    scope 17 {
                                                                        debug _x => _32;
                                                                        let _34: bool;
                                                                        scope 18 {
                                                                            debug _x => _34;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 6_i32;
        _3 = CheckedAdd(_1, const 1_i32);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        _2 = move (_3.0: i32);
        _5 = CheckedSub(_1, _2);
        assert(!move (_5.1: bool), "attempt to compute `{} - {}`, which would overflow", _1, _2) -> [success: bb2, unwind continue];
    }

    bb2: {
        _4 = move (_5.0: i32);
        _7 = CheckedMul(_1, const 1_i32);
        assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", _1, const 1_i32) -> [success: bb3, unwind continue];
    }

    bb3: {
        _6 = move (_7.0: i32);
        _9 = Eq(const 1_i32, const 0_i32);
        assert(!move _9, "attempt to divide `{}` by zero", _1) -> [success: bb4, unwind continue];
    }

    bb4: {
        _10 = Eq(const 1_i32, const -1_i32);
        _11 = Eq(_1, const i32::MIN);
        _12 = BitAnd(move _10, move _11);
        assert(!move _12, "attempt to compute `{} / {}`, which would overflow", _1, const 1_i32) -> [success: bb5, unwind continue];
    }

    bb5: {
        _8 = Div(_1, const 1_i32);
        _14 = Eq(const 1_i32, const 0_i32);
        assert(!move _14, "attempt to calculate the remainder of `{}` with a divisor of zero", _1) -> [success: bb6, unwind continue];
    }

    bb6: {
        _15 = Eq(const 1_i32, const -1_i32);
        _16 = Eq(_1, const i32::MIN);
        _17 = BitAnd(move _15, move _16);
        assert(!move _17, "attempt to compute the remainder of `{} % {}`, which would overflow", _1, const 1_i32) -> [success: bb7, unwind continue];
    }

    bb7: {
        _13 = Rem(_1, const 1_i32);
        _19 = const 1_i32 as u32 (IntToInt);
        _20 = Lt(move _19, const 32_u32);
        assert(move _20, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb8, unwind continue];
    }

    bb8: {
        _18 = Shl(_1, const 1_i32);
        _22 = const 1_i32 as u32 (IntToInt);
        _23 = Lt(move _22, const 32_u32);
        assert(move _23, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb9, unwind continue];
    }

    bb9: {
        _21 = Shr(_1, const 1_i32);
        _24 = BitXor(_1, const 1_i32);
        _25 = BitAnd(_1, const 1_i32);
        _26 = BitOr(_1, const 1_i32);
        _27 = Lt(_1, const 1_i32);
        _28 = Gt(_1, const 1_i32);
        _29 = Le(_1, const 1_i32);
        _30 = Ge(_1, const 1_i32);
        _31 = Eq(_1, const 1_i32);
        _33 = Eq(_1, const i32::MIN);
        assert(!move _33, "attempt to negate `{}`, which would overflow", _1) -> [success: bb10, unwind continue];
    }

    bb10: {
        _32 = Neg(_1);
        _35 = Eq(_32, _1);
        _34 = Not(move _35);
        return;
    }
}
