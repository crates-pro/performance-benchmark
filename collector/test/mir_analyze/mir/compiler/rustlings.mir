// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const RUSTC_COLOR_ARGS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 2];
    let _2: &[&str; 2];
    let _3: [&str; 2];
    let mut _4: &[&str; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in RUSTC_COLOR_ARGS: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "--color", const "always"];
        _0 = &_1;
        return;
    }
}

const I_AM_DONE_REGEX: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "(?m)^\\s*///?\\s*I\\s+AM\\s+NOT\\s+DONE";
        return;
    }
}

const CONTEXT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const CLIPPY_CARGO_TOML_PATH: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "./exercises/clippy/Cargo.toml";
        return;
    }
}

fn temp_file() -> std::string::String {
    let mut _0: std::string::String;
    let _1: std::string::String;
    let mut _2: std::iter::Filter<std::str::Chars<'_>, {closure@src/exercise.rs:20:17: 20:20}>;
    let mut _3: std::str::Chars<'_>;
    let _4: &str;
    let mut _5: &std::string::String;
    let _6: std::string::String;
    let _7: std::string::String;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &std::thread::ThreadId;
    let _15: std::thread::ThreadId;
    let mut _16: &std::thread::Thread;
    let _17: std::thread::Thread;
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 2];
    let _22: [core::fmt::rt::Argument<'_>; 2];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &u32;
    let _25: u32;
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &std::string::String;
    let mut _29: &[&str; 1];
    scope 1 {
        debug thread_id => _1;
        let mut _28: &[&str; 2];
        scope 3 {
            debug res => _0;
        }
    }
    scope 2 {
        debug res => _7;
    }

    bb0: {
        _29 = const _;
        _9 = _29 as &[&str] (PointerCoercion(Unsize));
        _17 = current() -> [return: bb1, unwind continue];
    }

    bb1: {
        _16 = &_17;
        _15 = Thread::id(move _16) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _14 = &_15;
        _13 = core::fmt::rt::Argument::<'_>::new_debug::<ThreadId>(_14) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _7 = format(move _8) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        drop(_17) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _6 = move _7;
        _5 = &_6;
        _4 = <std::string::String as Deref>::deref(move _5) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _3 = core::str::<impl str>::chars(_4) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _2 = <Chars<'_> as Iterator>::filter::<{closure@src/exercise.rs:20:17: 20:20}>(move _3, const ZeroSized: {closure@src/exercise.rs:20:17: 20:20}) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        _1 = <Filter<Chars<'_>, {closure@src/exercise.rs:20:17: 20:20}> as Iterator>::collect::<std::string::String>(move _2) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        drop(_6) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _28 = const _;
        _19 = _28 as &[&str] (PointerCoercion(Unsize));
        _25 = id() -> [return: bb12, unwind: bb18];
    }

    bb12: {
        _24 = &_25;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_24) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _27 = &_1;
        _26 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_27) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        _22 = [move _23, move _26];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _18 = Arguments::<'_>::new_v1(move _19, move _20) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        _0 = format(move _18) -> [return: bb16, unwind: bb18];
    }

    bb16: {
        drop(_1) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_1) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_6) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_7) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_17) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }
}

promoted[0] in temp_file: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "./temp_", const "_"];
        _0 = &_1;
        return;
    }
}

promoted[1] in temp_file: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn temp_file::{closure#0}(_1: &mut {closure@src/exercise.rs:20:17: 20:20}, _2: &char) -> bool {
    debug c => _2;
    let mut _0: bool;
    let mut _3: char;

    bb0: {
        _3 = (*_2);
        _0 = char::methods::<impl char>::is_alphanumeric(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const exercise::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:27:10: 27:21>::deserialize(_1: __D) -> Result<Mode, <__D as exercise::_::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<exercise::Mode, <__D as exercise::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as exercise::_::_serde::Deserializer<'_>>::deserialize_enum::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Visitor<'_>>(move _1, const "Mode", const _, const exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Mode>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:27:10: 27:21>::deserialize::<impl at src/exercise.rs:27:10: 27:21>::expecting(_1: &exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:27:10: 27:21>::deserialize::<impl at src/exercise.rs:27:10: 27:21>::visit_u64(_1: exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__FieldVisitor, _2: u64) -> Result<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E> {
    debug self => const exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field, __E>;
    let mut _3: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field;
    let mut _4: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field;
    let mut _5: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: exercise::_::_serde::de::Unexpected<'_>;
    let mut _8: &dyn exercise::_::_serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn exercise::_::_serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as exercise::_::_serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field::__field0;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field::__field1;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field::__field2;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in exercise::_::<impl at src/exercise.rs:27:10: 27:21>::deserialize::<impl at src/exercise.rs:27:10: 27:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:27:10: 27:21>::deserialize::<impl at src/exercise.rs:27:10: 27:21>::visit_str(_1: exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__FieldVisitor, _2: &str) -> Result<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E> {
    debug self => const exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field;
    let mut _7: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field;
    let mut _8: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field;
    let mut _9: __E;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "compile") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field::__field0;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb11;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "test") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field::__field1;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb11;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "clippy") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field::__field2;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb11;
    }

    bb6: {
        _9 = <__E as exercise::_::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb10, unwind continue];
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Err(move _9);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:27:10: 27:21>::deserialize::<impl at src/exercise.rs:27:10: 27:21>::visit_bytes(_1: exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E> {
    debug self => const exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field;
    let mut _13: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field;
    let mut _14: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field;
    let _15: &std::borrow::Cow<'_, str>;
    let _16: std::borrow::Cow<'_, str>;
    let mut _17: __E;
    let _18: &str;
    scope 1 {
        debug __value => _15;
    }

    bb0: {
        _9 = Len((*_2));
        _10 = const 7_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [99: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [111: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [109: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [112: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [105: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [108: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [101: bb21, otherwise: bb8];
    }

    bb8: {
        _16 = from_utf8_lossy(_2) -> [return: bb24, unwind continue];
    }

    bb9: {
        _6 = Len((*_2));
        _7 = const 4_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb14, otherwise: bb10];
    }

    bb10: {
        switchInt((*_2)[0 of 4]) -> [116: bb11, otherwise: bb8];
    }

    bb11: {
        switchInt((*_2)[1 of 4]) -> [101: bb12, otherwise: bb8];
    }

    bb12: {
        switchInt((*_2)[2 of 4]) -> [115: bb13, otherwise: bb8];
    }

    bb13: {
        switchInt((*_2)[3 of 4]) -> [116: bb22, otherwise: bb8];
    }

    bb14: {
        _3 = Len((*_2));
        _4 = const 6_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb15];
    }

    bb15: {
        switchInt((*_2)[0 of 6]) -> [99: bb16, otherwise: bb8];
    }

    bb16: {
        switchInt((*_2)[1 of 6]) -> [108: bb17, otherwise: bb8];
    }

    bb17: {
        switchInt((*_2)[2 of 6]) -> [105: bb18, otherwise: bb8];
    }

    bb18: {
        switchInt((*_2)[3 of 6]) -> [112: bb19, otherwise: bb8];
    }

    bb19: {
        switchInt((*_2)[4 of 6]) -> [112: bb20, otherwise: bb8];
    }

    bb20: {
        switchInt((*_2)[5 of 6]) -> [121: bb23, otherwise: bb8];
    }

    bb21: {
        _12 = exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field::__field0;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb27;
    }

    bb22: {
        _13 = exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field::__field1;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb27;
    }

    bb23: {
        _14 = exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field::__field2;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb27;
    }

    bb24: {
        _15 = &_16;
        _18 = <Cow<'_, str> as Deref>::deref(_15) -> [return: bb25, unwind: bb28];
    }

    bb25: {
        _17 = <__E as exercise::_::_serde::de::Error>::unknown_variant(_18, const _) -> [return: bb26, unwind: bb28];
    }

    bb26: {
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, __E>::Err(move _17);
        drop(_16) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_16) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }
}

fn exercise::_::<impl at src/exercise.rs:27:10: 27:21>::deserialize::<impl at src/exercise.rs:27:10: 27:21>::deserialize(_1: __D) -> Result<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field, <__D as exercise::_::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field, <__D as exercise::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as exercise::_::_serde::Deserializer<'_>>::deserialize_identifier::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__FieldVisitor>(move _1, const exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:27:10: 27:21>::deserialize::<impl at src/exercise.rs:27:10: 27:21>::expecting(_1: &exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum Mode";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:27:10: 27:21>::deserialize::<impl at src/exercise.rs:27:10: 27:21>::visit_enum(_1: exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Visitor<'_>, _2: __A) -> Result<Mode, <__A as EnumAccess<'_>>::Error> {
    debug self => const exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Mode>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<exercise::Mode, <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field, <__A as exercise::_::_serde::de::EnumAccess<'_>>::Variant), <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field, <__A as exercise::_::_serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error;
    let mut _7: isize;
    let _8: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _9: std::result::Result<(), <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _10: isize;
    let mut _12: exercise::Mode;
    let _13: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _14: std::result::Result<(), <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _15: isize;
    let mut _17: exercise::Mode;
    let _18: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _19: std::result::Result<(), <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _20: isize;
    let mut _22: exercise::Mode;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _8;
        let _11: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _11;
        }
    }
    scope 6 {
        debug __variant => _13;
        let _16: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error;
        scope 7 {
            debug __val => const ();
        }
        scope 8 {
            debug __err => _16;
        }
    }
    scope 9 {
        debug __variant => _18;
        let _21: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error;
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _21;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<exercise::_::<impl Deserialize<'de> for Mode>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Mode, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb17;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field, <__A as exercise::_::_serde::de::EnumAccess<'_>>::Variant));
        _7 = discriminant((_5.0: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Mode>::deserialize::__Field));
        switchInt(move _7) -> [0: bb6, 1: bb10, 2: bb5, otherwise: bb3];
    }

    bb5: {
        _18 = move (_5.1: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Variant);
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> [return: bb14, unwind continue];
    }

    bb6: {
        _8 = move (_5.1: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Variant);
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _11 = move ((_9 as Err).0: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Mode, <__A as EnumAccess<'_>>::Error>::Err(move _11);
        goto -> bb17;
    }

    bb9: {
        _12 = Mode::Compile;
        _0 = Result::<Mode, <__A as EnumAccess<'_>>::Error>::Ok(move _12);
        goto -> bb17;
    }

    bb10: {
        _13 = move (_5.1: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Variant);
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _16 = move ((_14 as Err).0: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Mode, <__A as EnumAccess<'_>>::Error>::Err(move _16);
        goto -> bb17;
    }

    bb13: {
        _17 = Mode::Test;
        _0 = Result::<Mode, <__A as EnumAccess<'_>>::Error>::Ok(move _17);
        goto -> bb17;
    }

    bb14: {
        _20 = discriminant(_19);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _21 = move ((_19 as Err).0: <__A as exercise::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Mode, <__A as EnumAccess<'_>>::Error>::Err(move _21);
        goto -> bb17;
    }

    bb16: {
        _22 = Mode::Clippy;
        _0 = Result::<Mode, <__A as EnumAccess<'_>>::Error>::Ok(move _22);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

const VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in VARIANTS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "compile", const "test", const "clippy"];
        _0 = &_1;
        return;
    }
}

fn exercise::<impl at src/exercise.rs:27:29: 27:34>::clone(_1: &Mode) -> Mode {
    debug self => _1;
    let mut _0: exercise::Mode;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn exercise::<impl at src/exercise.rs:27:36: 27:41>::fmt(_1: &Mode, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "Clippy";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Compile";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "Test";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

const exercise::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize(_1: __D) -> Result<ExerciseList, <__D as exercise::_::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<exercise::ExerciseList, <__D as exercise::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as exercise::_::_serde::Deserializer<'_>>::deserialize_struct::<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Visitor<'_>>(move _1, const "ExerciseList", const _, const exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<ExerciseList>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize::<impl at src/exercise.rs:38:10: 38:21>::expecting(_1: &exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize::<impl at src/exercise.rs:38:10: 38:21>::visit_u64(_1: exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__FieldVisitor, _2: u64) -> Result<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field, __E> {
    debug self => const exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field, __E>;
    let mut _3: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field;
    let mut _4: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field::__ignore;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb3;
    }

    bb2: {
        _3 = exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field::__field0;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize::<impl at src/exercise.rs:38:10: 38:21>::visit_str(_1: exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__FieldVisitor, _2: &str) -> Result<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field, __E> {
    debug self => const exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field;
    let mut _5: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "exercises") -> [return: bb3, unwind continue];
    }

    bb1: {
        _4 = exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field::__field0;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb4;
    }

    bb2: {
        _5 = exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field::__ignore;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb4;
    }

    bb3: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize::<impl at src/exercise.rs:38:10: 38:21>::visit_bytes(_1: exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field, __E> {
    debug self => const exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field;
    let mut _7: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 9_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [101: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [120: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [101: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [114: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [99: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [105: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [115: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [101: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [115: bb11, otherwise: bb10];
    }

    bb10: {
        _7 = exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field::__ignore;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb12;
    }

    bb11: {
        _6 = exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field::__field0;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize::<impl at src/exercise.rs:38:10: 38:21>::deserialize(_1: __D) -> Result<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field, <__D as exercise::_::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field, <__D as exercise::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as exercise::_::_serde::Deserializer<'_>>::deserialize_identifier::<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__FieldVisitor>(move _1, const exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize::<impl at src/exercise.rs:38:10: 38:21>::expecting(_1: &exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct ExerciseList";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize::<impl at src/exercise.rs:38:10: 38:21>::visit_seq(_1: exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Visitor<'_>, _2: __A) -> Result<ExerciseList, <__A as SeqAccess<'_>>::Error> {
    debug self => const exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<ExerciseList>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<exercise::ExerciseList, <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<std::vec::Vec<exercise::Exercise>>, <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<std::vec::Vec<exercise::Exercise>>;
    let _7: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: std::vec::Vec<exercise::Exercise>;
    let mut _10: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn exercise::_::_serde::de::Expected;
    let mut _12: exercise::ExerciseList;
    let mut _13: &&str;
    scope 1 {
        debug __field0 => _9;
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<Vec<Exercise>>(_4) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<ExerciseList, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb8;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = move ((_3 as Ok).0: std::option::Option<std::vec::Vec<exercise::Exercise>>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _13 = const _;
        _11 = _13 as &dyn exercise::_::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as exercise::_::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb10];
    }

    bb6: {
        _9 = move ((_6 as Some).0: std::vec::Vec<exercise::Exercise>);
        _12 = ExerciseList { exercises: move _9 };
        _0 = Result::<ExerciseList, <__A as SeqAccess<'_>>::Error>::Ok(move _12);
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb7: {
        _0 = Result::<ExerciseList, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb8;
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize::<impl at src/exercise.rs:38:10: 38:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct ExerciseList with 1 element";
        _0 = &_1;
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize::<impl at src/exercise.rs:38:10: 38:21>::visit_map(_1: exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Visitor<'_>, _2: __A) -> Result<ExerciseList, <__A as MapAccess<'_>>::Error> {
    debug self => const exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<ExerciseList>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<exercise::ExerciseList, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::vec::Vec<exercise::Exercise>>;
    let mut _4: std::result::Result<std::option::Option<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field>, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: isize;
    let mut _12: bool;
    let _13: &std::option::Option<std::vec::Vec<exercise::Exercise>>;
    let mut _14: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
    let mut _15: std::option::Option<std::vec::Vec<exercise::Exercise>>;
    let mut _16: std::result::Result<std::vec::Vec<exercise::Exercise>, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _17: &mut __A;
    let mut _18: isize;
    let mut _21: std::result::Result<exercise::_::_serde::de::IgnoredAny, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: std::result::Result<std::vec::Vec<exercise::Exercise>, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _29: isize;
    let mut _32: exercise::ExerciseList;
    let mut _33: std::vec::Vec<exercise::Exercise>;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    scope 1 {
        debug __field0 => _3;
        let _25: std::vec::Vec<exercise::Exercise>;
        let _27: std::vec::Vec<exercise::Exercise>;
        let _30: std::vec::Vec<exercise::Exercise>;
        let _31: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
        scope 2 {
            debug __key => _10;
            let _7: std::option::Option<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field>;
            let _8: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
            let _10: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field;
            let _19: std::vec::Vec<exercise::Exercise>;
            let _20: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
            let _24: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __val => _7;
            }
            scope 4 {
                debug __err => _8;
            }
            scope 5 {
                debug __val => _19;
            }
            scope 6 {
                debug __err => _20;
            }
            scope 7 {
            }
            scope 8 {
                debug __val => const IgnoredAny;
            }
            scope 9 {
                debug __err => _24;
            }
        }
        scope 10 {
            debug __field0 => _25;
        }
        scope 11 {
            debug __field0 => _27;
        }
        scope 12 {
            debug __val => _30;
        }
        scope 13 {
            debug __err => _31;
        }
    }

    bb0: {
        _34 = const false;
        _34 = const true;
        _3 = std::option::Option::<Vec<Exercise>>::None;
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as MapAccess<'_>>::next_key::<exercise::_::<impl Deserialize<'de> for ExerciseList>::deserialize::__Field>(_5) -> [return: bb2, unwind: bb36];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<ExerciseList, <__A as MapAccess<'_>>::Error>::Err(move _8);
        goto -> bb33;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Ok).0: std::option::Option<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = discriminant(_3);
        switchInt(move _26) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb7: {
        _10 = move ((_7 as Some).0: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::ExerciseList>::deserialize::__Field);
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_22) -> [return: bb19, unwind: bb36];
    }

    bb9: {
        _13 = &_3;
        _12 = std::option::Option::<Vec<Exercise>>::is_some(_13) -> [return: bb10, unwind: bb36];
    }

    bb10: {
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _14 = <<__A as MapAccess<'_>>::Error as exercise::_::_serde::de::Error>::duplicate_field(const "exercises") -> [return: bb12, unwind: bb36];
    }

    bb12: {
        _0 = Result::<ExerciseList, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb33;
    }

    bb13: {
        _17 = &mut _2;
        _16 = <__A as MapAccess<'_>>::next_value::<Vec<Exercise>>(_17) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _20 = move ((_16 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<ExerciseList, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb33;
    }

    bb16: {
        _19 = move ((_16 as Ok).0: std::vec::Vec<exercise::Exercise>);
        _15 = std::option::Option::<Vec<Exercise>>::Some(move _19);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _34 = const true;
        _3 = move _15;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _34 = const true;
        _3 = move _15;
        goto -> bb36;
    }

    bb19: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb1, 1: bb20, otherwise: bb4];
    }

    bb20: {
        _24 = move ((_21 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<ExerciseList, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb33;
    }

    bb21: {
        _28 = exercise::_::_serde::__private::de::missing_field::<'_, Vec<Exercise>, <__A as MapAccess<'_>>::Error>(const "exercises") -> [return: bb23, unwind: bb36];
    }

    bb22: {
        _34 = const false;
        _27 = move ((_3 as Some).0: std::vec::Vec<exercise::Exercise>);
        _25 = move _27;
        goto -> bb26;
    }

    bb23: {
        _29 = discriminant(_28);
        switchInt(move _29) -> [0: bb25, 1: bb24, otherwise: bb4];
    }

    bb24: {
        _31 = move ((_28 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<ExerciseList, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb33;
    }

    bb25: {
        _30 = move ((_28 as Ok).0: std::vec::Vec<exercise::Exercise>);
        _25 = move _30;
        goto -> bb26;
    }

    bb26: {
        _33 = move _25;
        _32 = ExerciseList { exercises: move _33 };
        _0 = Result::<ExerciseList, <__A as MapAccess<'_>>::Error>::Ok(move _32);
        _34 = const false;
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30: {
        _34 = const false;
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb31: {
        switchInt(_34) -> [0: bb30, otherwise: bb32];
    }

    bb32: {
        drop(((_3 as Some).0: std::vec::Vec<exercise::Exercise>)) -> [return: bb30, unwind: bb28];
    }

    bb33: {
        _35 = discriminant(_3);
        switchInt(move _35) -> [1: bb31, otherwise: bb30];
    }

    bb34 (cleanup): {
        switchInt(_34) -> [0: bb28, otherwise: bb35];
    }

    bb35 (cleanup): {
        drop(((_3 as Some).0: std::vec::Vec<exercise::Exercise>)) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        _36 = discriminant(_3);
        switchInt(move _36) -> [1: bb34, otherwise: bb28];
    }
}

const exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 1];
    let _2: &[&str; 1];
    let _3: [&str; 1];
    let mut _4: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in exercise::_::<impl at src/exercise.rs:38:10: 38:21>::deserialize::FIELDS: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "exercises"];
        _0 = &_1;
        return;
    }
}

const exercise::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize(_1: __D) -> Result<Exercise, <__D as exercise::_::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<exercise::Exercise, <__D as exercise::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as exercise::_::_serde::Deserializer<'_>>::deserialize_struct::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Visitor<'_>>(move _1, const "Exercise", const _, const exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Exercise>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::expecting(_1: &exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::visit_u64(_1: exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__FieldVisitor, _2: u64) -> Result<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E> {
    debug self => const exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field, __E>;
    let mut _3: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _4: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _5: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _6: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _7: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1];
    }

    bb1: {
        _7 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__ignore;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb6;
    }

    bb2: {
        _3 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field0;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field1;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field2;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _6 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field3;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::visit_str(_1: exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__FieldVisitor, _2: &str) -> Result<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E> {
    debug self => const exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _8: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _9: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _10: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _11: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;

    bb0: {
        _6 = <str as PartialEq>::eq(_2, const "name") -> [return: bb12, unwind continue];
    }

    bb1: {
        _7 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field0;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb13;
    }

    bb2: {
        _5 = <str as PartialEq>::eq(_2, const "path") -> [return: bb11, unwind continue];
    }

    bb3: {
        _8 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field1;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb13;
    }

    bb4: {
        _4 = <str as PartialEq>::eq(_2, const "mode") -> [return: bb10, unwind continue];
    }

    bb5: {
        _9 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field2;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb13;
    }

    bb6: {
        _3 = <str as PartialEq>::eq(_2, const "hint") -> [return: bb9, unwind continue];
    }

    bb7: {
        _10 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field3;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb13;
    }

    bb8: {
        _11 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__ignore;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb13;
    }

    bb9: {
        switchInt(move _3) -> [0: bb8, otherwise: bb7];
    }

    bb10: {
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb11: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb12: {
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb13: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::visit_bytes(_1: exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E> {
    debug self => const exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _7: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _8: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _9: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
    let mut _10: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 4_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 4]) -> [110: bb2, 112: bb6, 109: bb9, 104: bb12, otherwise: bb5];
    }

    bb2: {
        switchInt((*_2)[1 of 4]) -> [97: bb3, otherwise: bb5];
    }

    bb3: {
        switchInt((*_2)[2 of 4]) -> [109: bb4, otherwise: bb5];
    }

    bb4: {
        switchInt((*_2)[3 of 4]) -> [101: bb15, otherwise: bb5];
    }

    bb5: {
        _10 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__ignore;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb19;
    }

    bb6: {
        switchInt((*_2)[1 of 4]) -> [97: bb7, otherwise: bb5];
    }

    bb7: {
        switchInt((*_2)[2 of 4]) -> [116: bb8, otherwise: bb5];
    }

    bb8: {
        switchInt((*_2)[3 of 4]) -> [104: bb16, otherwise: bb5];
    }

    bb9: {
        switchInt((*_2)[1 of 4]) -> [111: bb10, otherwise: bb5];
    }

    bb10: {
        switchInt((*_2)[2 of 4]) -> [100: bb11, otherwise: bb5];
    }

    bb11: {
        switchInt((*_2)[3 of 4]) -> [101: bb17, otherwise: bb5];
    }

    bb12: {
        switchInt((*_2)[1 of 4]) -> [105: bb13, otherwise: bb5];
    }

    bb13: {
        switchInt((*_2)[2 of 4]) -> [110: bb14, otherwise: bb5];
    }

    bb14: {
        switchInt((*_2)[3 of 4]) -> [116: bb18, otherwise: bb5];
    }

    bb15: {
        _6 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field0;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb19;
    }

    bb16: {
        _7 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field1;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb19;
    }

    bb17: {
        _8 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field2;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb19;
    }

    bb18: {
        _9 = exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field::__field3;
        _0 = Result::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb19;
    }

    bb19: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::deserialize(_1: __D) -> Result<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field, <__D as exercise::_::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field, <__D as exercise::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as exercise::_::_serde::Deserializer<'_>>::deserialize_identifier::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__FieldVisitor>(move _1, const exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::expecting(_1: &exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Exercise";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::visit_seq(_1: exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Visitor<'_>, _2: __A) -> Result<Exercise, <__A as SeqAccess<'_>>::Error> {
    debug self => const exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Exercise>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<exercise::Exercise, <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error>;
    let _3: std::string::String;
    let mut _4: std::result::Result<std::option::Option<std::string::String>, <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::string::String>;
    let _8: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::string::String;
    let mut _11: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn exercise::_::_serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<std::path::PathBuf>, <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn exercise::_::_serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<exercise::Mode>, <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn exercise::_::_serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<std::string::String>, <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn exercise::_::_serde::de::Expected;
    let mut _41: exercise::Exercise;
    let mut _42: std::string::String;
    let mut _43: std::path::PathBuf;
    let mut _44: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: std::path::PathBuf;
        let _17: std::option::Option<std::path::PathBuf>;
        let _18: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error;
        let _20: std::path::PathBuf;
        let mut _45: &&str;
        scope 5 {
            debug __field1 => _13;
            let _26: std::option::Option<exercise::Mode>;
            let _27: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error;
            let _29: exercise::Mode;
            let mut _46: &&str;
            scope 9 {
                debug __field2 => _29;
                let _35: std::option::Option<std::string::String>;
                let _36: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error;
                let _38: std::string::String;
                let mut _47: &&str;
                scope 13 {
                    debug __field3 => _38;
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_5) -> [return: bb1, unwind: bb32];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb28;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::string::String>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _44 = const _;
        _12 = _44 as &dyn exercise::_::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as exercise::_::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb32];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::string::String);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<PathBuf>(_15) -> [return: bb8, unwind: bb31];
    }

    bb7: {
        _0 = Result::<Exercise, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb28;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb27;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<std::path::PathBuf>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _45 = const _;
        _22 = _45 as &dyn exercise::_::_serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as exercise::_::_serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb31];
    }

    bb12: {
        _20 = move ((_17 as Some).0: std::path::PathBuf);
        _13 = move _20;
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<Mode>(_24) -> [return: bb14, unwind: bb30];
    }

    bb13: {
        _0 = Result::<Exercise, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb27;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb26;
    }

    bb16: {
        _26 = ((_23 as Ok).0: std::option::Option<exercise::Mode>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _46 = const _;
        _31 = _46 as &dyn exercise::_::_serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as exercise::_::_serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb30];
    }

    bb18: {
        _29 = ((_26 as Some).0: exercise::Mode);
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_33) -> [return: bb20, unwind: bb30];
    }

    bb19: {
        _0 = Result::<Exercise, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb26;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as exercise::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb26;
    }

    bb22: {
        _35 = move ((_32 as Ok).0: std::option::Option<std::string::String>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _47 = const _;
        _40 = _47 as &dyn exercise::_::_serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as exercise::_::_serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb30];
    }

    bb24: {
        _38 = move ((_35 as Some).0: std::string::String);
        _42 = move _3;
        _43 = move _13;
        _41 = Exercise { name: move _42, path: move _43, mode: _29, hint: move _38 };
        _0 = Result::<Exercise, <__A as SeqAccess<'_>>::Error>::Ok(move _41);
        drop(_2) -> [return: bb29, unwind continue];
    }

    bb25: {
        _0 = Result::<Exercise, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb26;
    }

    bb26: {
        drop(_13) -> [return: bb27, unwind: bb31];
    }

    bb27: {
        drop(_3) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        drop(_2) -> [return: bb29, unwind continue];
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_13) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_3) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_2) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }
}

promoted[0] in exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Exercise with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Exercise with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Exercise with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Exercise with 4 elements";
        _0 = &_1;
        return;
    }
}

fn exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::<impl at src/exercise.rs:45:10: 45:21>::visit_map(_1: exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Visitor<'_>, _2: __A) -> Result<Exercise, <__A as MapAccess<'_>>::Error> {
    debug self => const exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Exercise>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<exercise::Exercise, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::string::String>;
    let mut _7: std::result::Result<std::option::Option<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field>, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _8: &mut __A;
    let mut _9: isize;
    let mut _12: isize;
    let mut _14: isize;
    let mut _15: bool;
    let _16: &std::option::Option<std::string::String>;
    let mut _17: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
    let mut _18: std::option::Option<std::string::String>;
    let mut _19: std::result::Result<std::string::String, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _20: &mut __A;
    let mut _21: isize;
    let mut _24: bool;
    let _25: &std::option::Option<std::path::PathBuf>;
    let mut _26: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
    let mut _27: std::option::Option<std::path::PathBuf>;
    let mut _28: std::result::Result<std::path::PathBuf, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _29: &mut __A;
    let mut _30: isize;
    let mut _33: bool;
    let _34: &std::option::Option<exercise::Mode>;
    let mut _35: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
    let mut _36: std::option::Option<exercise::Mode>;
    let mut _37: std::result::Result<exercise::Mode, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _38: &mut __A;
    let mut _39: isize;
    let mut _42: bool;
    let _43: &std::option::Option<std::string::String>;
    let mut _44: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
    let mut _45: std::option::Option<std::string::String>;
    let mut _46: std::result::Result<std::string::String, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _47: &mut __A;
    let mut _48: isize;
    let mut _51: std::result::Result<exercise::_::_serde::de::IgnoredAny, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: isize;
    let mut _58: std::result::Result<std::string::String, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _59: isize;
    let mut _63: isize;
    let mut _65: std::result::Result<std::path::PathBuf, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _66: isize;
    let mut _70: isize;
    let mut _72: std::result::Result<exercise::Mode, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _73: isize;
    let mut _77: isize;
    let mut _79: std::result::Result<std::string::String, <__A as exercise::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _80: isize;
    let mut _83: exercise::Exercise;
    let mut _84: std::string::String;
    let mut _85: std::path::PathBuf;
    let mut _86: exercise::Mode;
    let mut _87: std::string::String;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::path::PathBuf>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<exercise::Mode>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<std::string::String>;
                scope 4 {
                    debug __field3 => _6;
                    let _55: std::string::String;
                    let _57: std::string::String;
                    let _60: std::string::String;
                    let _61: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
                    scope 5 {
                        debug __key => _13;
                        let _10: std::option::Option<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field>;
                        let _11: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
                        let _13: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field;
                        let _22: std::string::String;
                        let _23: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
                        let _31: std::path::PathBuf;
                        let _32: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
                        let _40: exercise::Mode;
                        let _41: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
                        let _49: std::string::String;
                        let _50: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
                        let _54: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
                        scope 6 {
                            debug __val => _10;
                        }
                        scope 7 {
                            debug __err => _11;
                        }
                        scope 8 {
                            debug __val => _22;
                        }
                        scope 9 {
                            debug __err => _23;
                        }
                        scope 10 {
                            debug __val => _31;
                        }
                        scope 11 {
                            debug __err => _32;
                        }
                        scope 12 {
                            debug __val => _40;
                        }
                        scope 13 {
                            debug __err => _41;
                        }
                        scope 14 {
                            debug __val => _49;
                        }
                        scope 15 {
                            debug __err => _50;
                        }
                        scope 16 {
                        }
                        scope 17 {
                            debug __val => const IgnoredAny;
                        }
                        scope 18 {
                            debug __err => _54;
                        }
                    }
                    scope 19 {
                        debug __field0 => _55;
                        let _62: std::path::PathBuf;
                        let _64: std::path::PathBuf;
                        let _67: std::path::PathBuf;
                        let _68: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
                        scope 23 {
                            debug __field1 => _62;
                            let _69: exercise::Mode;
                            let _71: exercise::Mode;
                            let _74: exercise::Mode;
                            let _75: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
                            scope 27 {
                                debug __field2 => _69;
                                let _76: std::string::String;
                                let _78: std::string::String;
                                let _81: std::string::String;
                                let _82: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error;
                                scope 31 {
                                    debug __field3 => _76;
                                }
                                scope 32 {
                                    debug __field3 => _78;
                                }
                                scope 33 {
                                    debug __val => _81;
                                }
                                scope 34 {
                                    debug __err => _82;
                                }
                            }
                            scope 28 {
                                debug __field2 => _71;
                            }
                            scope 29 {
                                debug __val => _74;
                            }
                            scope 30 {
                                debug __err => _75;
                            }
                        }
                        scope 24 {
                            debug __field1 => _64;
                        }
                        scope 25 {
                            debug __val => _67;
                        }
                        scope 26 {
                            debug __err => _68;
                        }
                    }
                    scope 20 {
                        debug __field0 => _57;
                    }
                    scope 21 {
                        debug __val => _60;
                    }
                    scope 22 {
                        debug __err => _61;
                    }
                }
            }
        }
    }

    bb0: {
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _90 = const true;
        _3 = std::option::Option::<std::string::String>::None;
        _89 = const true;
        _4 = std::option::Option::<PathBuf>::None;
        _5 = std::option::Option::<Mode>::None;
        _88 = const true;
        _6 = std::option::Option::<std::string::String>::None;
        goto -> bb1;
    }

    bb1: {
        _8 = &mut _2;
        _7 = <__A as MapAccess<'_>>::next_key::<exercise::_::<impl Deserialize<'de> for Exercise>::deserialize::__Field>(_8) -> [return: bb2, unwind: bb94];
    }

    bb2: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_7 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _11);
        goto -> bb85;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_7 as Ok).0: std::option::Option<exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field>);
        _12 = discriminant(_10);
        switchInt(move _12) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _56 = discriminant(_3);
        switchInt(move _56) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb7: {
        _13 = move ((_10 as Some).0: exercise::_::<impl exercise::_::_serde::Deserialize<'de> for exercise::Exercise>::deserialize::__Field);
        _14 = discriminant(_13);
        switchInt(move _14) -> [0: bb9, 1: bb19, 2: bb29, 3: bb37, otherwise: bb8];
    }

    bb8: {
        _52 = &mut _2;
        _51 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_52) -> [return: bb47, unwind: bb94];
    }

    bb9: {
        _16 = &_3;
        _15 = std::option::Option::<std::string::String>::is_some(_16) -> [return: bb10, unwind: bb94];
    }

    bb10: {
        switchInt(move _15) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _17 = <<__A as MapAccess<'_>>::Error as exercise::_::_serde::de::Error>::duplicate_field(const "name") -> [return: bb12, unwind: bb94];
    }

    bb12: {
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _17);
        goto -> bb85;
    }

    bb13: {
        _20 = &mut _2;
        _19 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_20) -> [return: bb14, unwind: bb94];
    }

    bb14: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _23 = move ((_19 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _23);
        goto -> bb85;
    }

    bb16: {
        _22 = move ((_19 as Ok).0: std::string::String);
        _18 = std::option::Option::<std::string::String>::Some(move _22);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _90 = const true;
        _3 = move _18;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _90 = const true;
        _3 = move _18;
        goto -> bb94;
    }

    bb19: {
        _25 = &_4;
        _24 = std::option::Option::<PathBuf>::is_some(_25) -> [return: bb20, unwind: bb94];
    }

    bb20: {
        switchInt(move _24) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _26 = <<__A as MapAccess<'_>>::Error as exercise::_::_serde::de::Error>::duplicate_field(const "path") -> [return: bb22, unwind: bb94];
    }

    bb22: {
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _26);
        goto -> bb85;
    }

    bb23: {
        _29 = &mut _2;
        _28 = <__A as MapAccess<'_>>::next_value::<PathBuf>(_29) -> [return: bb24, unwind: bb94];
    }

    bb24: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _32 = move ((_28 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _32);
        goto -> bb85;
    }

    bb26: {
        _31 = move ((_28 as Ok).0: std::path::PathBuf);
        _27 = std::option::Option::<PathBuf>::Some(move _31);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _89 = const true;
        _4 = move _27;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _89 = const true;
        _4 = move _27;
        goto -> bb94;
    }

    bb29: {
        _34 = &_5;
        _33 = std::option::Option::<Mode>::is_some(_34) -> [return: bb30, unwind: bb94];
    }

    bb30: {
        switchInt(move _33) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _35 = <<__A as MapAccess<'_>>::Error as exercise::_::_serde::de::Error>::duplicate_field(const "mode") -> [return: bb32, unwind: bb94];
    }

    bb32: {
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _35);
        goto -> bb85;
    }

    bb33: {
        _38 = &mut _2;
        _37 = <__A as MapAccess<'_>>::next_value::<Mode>(_38) -> [return: bb34, unwind: bb94];
    }

    bb34: {
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _41 = move ((_37 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _41);
        goto -> bb85;
    }

    bb36: {
        _40 = ((_37 as Ok).0: exercise::Mode);
        _36 = std::option::Option::<Mode>::Some(_40);
        _5 = move _36;
        goto -> bb1;
    }

    bb37: {
        _43 = &_6;
        _42 = std::option::Option::<std::string::String>::is_some(_43) -> [return: bb38, unwind: bb94];
    }

    bb38: {
        switchInt(move _42) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _44 = <<__A as MapAccess<'_>>::Error as exercise::_::_serde::de::Error>::duplicate_field(const "hint") -> [return: bb40, unwind: bb94];
    }

    bb40: {
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb85;
    }

    bb41: {
        _47 = &mut _2;
        _46 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_47) -> [return: bb42, unwind: bb94];
    }

    bb42: {
        _48 = discriminant(_46);
        switchInt(move _48) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        _50 = move ((_46 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _50);
        goto -> bb85;
    }

    bb44: {
        _49 = move ((_46 as Ok).0: std::string::String);
        _45 = std::option::Option::<std::string::String>::Some(move _49);
        drop(_6) -> [return: bb45, unwind: bb46];
    }

    bb45: {
        _88 = const true;
        _6 = move _45;
        goto -> bb1;
    }

    bb46 (cleanup): {
        _88 = const true;
        _6 = move _45;
        goto -> bb94;
    }

    bb47: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb1, 1: bb48, otherwise: bb4];
    }

    bb48: {
        _54 = move ((_51 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _54);
        goto -> bb85;
    }

    bb49: {
        _58 = exercise::_::_serde::__private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "name") -> [return: bb51, unwind: bb94];
    }

    bb50: {
        _90 = const false;
        _57 = move ((_3 as Some).0: std::string::String);
        _55 = move _57;
        goto -> bb54;
    }

    bb51: {
        _59 = discriminant(_58);
        switchInt(move _59) -> [0: bb53, 1: bb52, otherwise: bb4];
    }

    bb52: {
        _61 = move ((_58 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _61);
        goto -> bb85;
    }

    bb53: {
        _60 = move ((_58 as Ok).0: std::string::String);
        _55 = move _60;
        goto -> bb54;
    }

    bb54: {
        _63 = discriminant(_4);
        switchInt(move _63) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb55: {
        _65 = exercise::_::_serde::__private::de::missing_field::<'_, PathBuf, <__A as MapAccess<'_>>::Error>(const "path") -> [return: bb57, unwind: bb77];
    }

    bb56: {
        _89 = const false;
        _64 = move ((_4 as Some).0: std::path::PathBuf);
        _62 = move _64;
        goto -> bb60;
    }

    bb57: {
        _66 = discriminant(_65);
        switchInt(move _66) -> [0: bb59, 1: bb58, otherwise: bb4];
    }

    bb58: {
        _68 = move ((_65 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _68);
        goto -> bb74;
    }

    bb59: {
        _67 = move ((_65 as Ok).0: std::path::PathBuf);
        _62 = move _67;
        goto -> bb60;
    }

    bb60: {
        _70 = discriminant(_5);
        switchInt(move _70) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        _72 = exercise::_::_serde::__private::de::missing_field::<'_, Mode, <__A as MapAccess<'_>>::Error>(const "mode") -> [return: bb63, unwind: bb76];
    }

    bb62: {
        _71 = ((_5 as Some).0: exercise::Mode);
        _69 = _71;
        goto -> bb66;
    }

    bb63: {
        _73 = discriminant(_72);
        switchInt(move _73) -> [0: bb65, 1: bb64, otherwise: bb4];
    }

    bb64: {
        _75 = move ((_72 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _75);
        goto -> bb73;
    }

    bb65: {
        _74 = ((_72 as Ok).0: exercise::Mode);
        _69 = _74;
        goto -> bb66;
    }

    bb66: {
        _77 = discriminant(_6);
        switchInt(move _77) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        _79 = exercise::_::_serde::__private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "hint") -> [return: bb69, unwind: bb76];
    }

    bb68: {
        _88 = const false;
        _78 = move ((_6 as Some).0: std::string::String);
        _76 = move _78;
        goto -> bb72;
    }

    bb69: {
        _80 = discriminant(_79);
        switchInt(move _80) -> [0: bb71, 1: bb70, otherwise: bb4];
    }

    bb70: {
        _82 = move ((_79 as Err).0: <__A as exercise::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Err(move _82);
        goto -> bb73;
    }

    bb71: {
        _81 = move ((_79 as Ok).0: std::string::String);
        _76 = move _81;
        goto -> bb72;
    }

    bb72: {
        _84 = move _55;
        _85 = move _62;
        _86 = _69;
        _87 = move _76;
        _83 = Exercise { name: move _84, path: move _85, mode: move _86, hint: move _87 };
        _0 = Result::<Exercise, <__A as MapAccess<'_>>::Error>::Ok(move _83);
        _88 = const false;
        _89 = const false;
        _90 = const false;
        drop(_2) -> [return: bb75, unwind continue];
    }

    bb73: {
        drop(_62) -> [return: bb74, unwind: bb77];
    }

    bb74: {
        drop(_55) -> [return: bb85, unwind: bb94];
    }

    bb75: {
        return;
    }

    bb76 (cleanup): {
        drop(_62) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_55) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        _95 = discriminant(_4);
        switchInt(move _95) -> [1: bb95, otherwise: bb79];
    }

    bb79 (cleanup): {
        _96 = discriminant(_3);
        switchInt(move _96) -> [1: bb97, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop(_2) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        resume;
    }

    bb82: {
        _88 = const false;
        _92 = discriminant(_4);
        switchInt(move _92) -> [1: bb87, otherwise: bb86];
    }

    bb83: {
        switchInt(_88) -> [0: bb82, otherwise: bb84];
    }

    bb84: {
        drop(((_6 as Some).0: std::string::String)) -> [return: bb82, unwind: bb78];
    }

    bb85: {
        _91 = discriminant(_6);
        switchInt(move _91) -> [1: bb83, otherwise: bb82];
    }

    bb86: {
        _89 = const false;
        _93 = discriminant(_3);
        switchInt(move _93) -> [1: bb90, otherwise: bb89];
    }

    bb87: {
        switchInt(_89) -> [0: bb86, otherwise: bb88];
    }

    bb88: {
        drop(((_4 as Some).0: std::path::PathBuf)) -> [return: bb86, unwind: bb79];
    }

    bb89: {
        _90 = const false;
        drop(_2) -> [return: bb75, unwind continue];
    }

    bb90: {
        switchInt(_90) -> [0: bb89, otherwise: bb91];
    }

    bb91: {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb89, unwind: bb80];
    }

    bb92 (cleanup): {
        switchInt(_88) -> [0: bb78, otherwise: bb93];
    }

    bb93 (cleanup): {
        drop(((_6 as Some).0: std::string::String)) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        _94 = discriminant(_6);
        switchInt(move _94) -> [1: bb92, otherwise: bb78];
    }

    bb95 (cleanup): {
        switchInt(_89) -> [0: bb79, otherwise: bb96];
    }

    bb96 (cleanup): {
        drop(((_4 as Some).0: std::path::PathBuf)) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        switchInt(_90) -> [0: bb80, otherwise: bb98];
    }

    bb98 (cleanup): {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb80, unwind terminate(cleanup)];
    }
}

const exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 4];
    let _2: &[&str; 4];
    let _3: [&str; 4];
    let mut _4: &[&str; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in exercise::_::<impl at src/exercise.rs:45:10: 45:21>::deserialize::FIELDS: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "name", const "path", const "mode", const "hint"];
        _0 = &_1;
        return;
    }
}

fn exercise::<impl at src/exercise.rs:45:23: 45:28>::fmt(_1: &Exercise, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::path::PathBuf;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &exercise::Mode;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&std::string::String;
    let _16: &std::string::String;

    bb0: {
        _3 = const "Exercise";
        _4 = const "name";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "path";
        _9 = &((*_1).1: std::path::PathBuf);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "mode";
        _12 = &((*_1).2: exercise::Mode);
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = const "hint";
        _16 = &((*_1).3: std::string::String);
        _15 = &_16;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field4_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::<impl at src/exercise.rs:59:10: 59:19>::eq(_1: &State, _2: &State) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&exercise::State, &exercise::State);
    let mut _7: isize;
    let mut _8: isize;
    let mut _11: &exercise::State;
    let mut _12: &exercise::State;
    let mut _13: &exercise::State;
    let mut _14: &exercise::State;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _9: &std::vec::Vec<exercise::ContextLine>;
            let _10: &std::vec::Vec<exercise::ContextLine>;
            scope 3 {
                debug __self_0 => _9;
                debug __arg1_0 => _10;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _11 = deref_copy (_6.0: &exercise::State);
        _8 = discriminant((*_11));
        switchInt(move _8) -> [1: bb4, otherwise: bb3];
    }

    bb2: {
        _0 = const false;
        goto -> bb6;
    }

    bb3: {
        _0 = const true;
        goto -> bb6;
    }

    bb4: {
        _12 = deref_copy (_6.1: &exercise::State);
        _7 = discriminant((*_12));
        switchInt(move _7) -> [1: bb5, otherwise: bb3];
    }

    bb5: {
        _13 = deref_copy (_6.0: &exercise::State);
        _9 = &(((*_13) as Pending).0: std::vec::Vec<exercise::ContextLine>);
        _14 = deref_copy (_6.1: &exercise::State);
        _10 = &(((*_14) as Pending).0: std::vec::Vec<exercise::ContextLine>);
        _0 = <Vec<ContextLine> as PartialEq>::eq(_9, _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn exercise::<impl at src/exercise.rs:59:21: 59:26>::fmt(_1: &State, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &std::vec::Vec<exercise::ContextLine>;
    let _6: &str;
    let mut _7: &dyn std::fmt::Debug;
    let _8: &&std::vec::Vec<exercise::ContextLine>;
    scope 1 {
        debug __self_0 => _5;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as Pending).0: std::vec::Vec<exercise::ContextLine>);
        _6 = const "Pending";
        _8 = &_5;
        _7 = _8 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _6, move _7) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = const "Done";
        _0 = Formatter::<'_>::write_str(_2, _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn exercise::<impl at src/exercise.rs:68:10: 68:19>::eq(_1: &ContextLine, _2: &ContextLine) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &std::string::String;
    let mut _5: &std::string::String;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: bool;

    bb0: {
        _4 = &((*_1).0: std::string::String);
        _5 = &((*_2).0: std::string::String);
        _3 = <std::string::String as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _7 = ((*_1).1: usize);
        _8 = ((*_2).1: usize);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = ((*_1).2: bool);
        _10 = ((*_2).2: bool);
        _0 = Eq(move _9, move _10);
        goto -> bb5;
    }

    bb4: {
        _0 = const false;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn exercise::<impl at src/exercise.rs:68:21: 68:26>::fmt(_1: &ContextLine, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &usize;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&bool;
    let _13: &bool;

    bb0: {
        _3 = const "ContextLine";
        _4 = const "line";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "number";
        _9 = &((*_1).1: usize);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "important";
        _13 = &((*_1).2: bool);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::<impl at src/exercise.rs:84:1: 84:30>::run(_1: &CompiledExercise<'_>) -> Result<ExerciseOutput, ExerciseOutput> {
    debug self => _1;
    let mut _0: std::result::Result<exercise::ExerciseOutput, exercise::ExerciseOutput>;
    let mut _2: &exercise::Exercise;

    bb0: {
        _2 = deref_copy ((*_1).0: &exercise::Exercise);
        _0 = Exercise::run(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::<impl at src/exercise.rs:92:10: 92:15>::fmt(_1: &ExerciseOutput, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::string::String;
    let _10: &std::string::String;

    bb0: {
        _3 = const "ExerciseOutput";
        _4 = const "stdout";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "stderr";
        _10 = &((*_1).1: std::string::String);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::<impl at src/exercise.rs:102:1: 102:25>::drop(_1: &mut FileHandle) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = clean() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exercise::<impl at src/exercise.rs:108:1: 108:14>::compile(_1: &Exercise) -> Result<CompiledExercise<'_>, ExerciseOutput> {
    debug self => _1;
    let mut _0: std::result::Result<exercise::CompiledExercise<'_>, exercise::ExerciseOutput>;
    let _2: std::process::Output;
    let mut _3: std::result::Result<std::process::Output, std::io::Error>;
    let mut _4: isize;
    let mut _5: &mut std::process::Command;
    let mut _6: &mut std::process::Command;
    let mut _7: &mut std::process::Command;
    let mut _8: std::process::Command;
    let mut _9: &[&str; 3];
    let _10: [&str; 3];
    let mut _11: &str;
    let mut _12: std::option::Option<&str>;
    let _13: &std::path::Path;
    let mut _14: &std::path::PathBuf;
    let _15: &str;
    let _16: &str;
    let _17: &std::string::String;
    let _18: std::string::String;
    let mut _19: &mut std::process::Command;
    let mut _20: &mut std::process::Command;
    let mut _21: &mut std::process::Command;
    let mut _22: std::process::Command;
    let mut _23: &[&str; 4];
    let _24: [&str; 4];
    let _25: &str;
    let mut _26: std::option::Option<&str>;
    let _27: &std::path::Path;
    let mut _28: &std::path::PathBuf;
    let _29: &str;
    let _30: &str;
    let _31: &std::string::String;
    let _32: std::string::String;
    let _33: std::string::String;
    let _34: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 3];
    let _39: [core::fmt::rt::Argument<'_>; 3];
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &std::string::String;
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &std::string::String;
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: &std::string::String;
    let mut _47: bool;
    let mut _48: &std::result::Result<std::string::String, std::env::VarError>;
    let _49: std::result::Result<std::string::String, std::env::VarError>;
    let _50: &str;
    let _51: ();
    let mut _52: std::result::Result<(), std::io::Error>;
    let mut _53: std::string::String;
    let mut _54: &str;
    let _55: std::process::Output;
    let mut _56: std::result::Result<std::process::Output, std::io::Error>;
    let mut _57: &mut std::process::Command;
    let mut _58: &mut std::process::Command;
    let mut _59: &mut std::process::Command;
    let mut _60: std::process::Command;
    let mut _61: &[&str; 3];
    let _62: [&str; 3];
    let mut _63: &str;
    let mut _64: std::option::Option<&str>;
    let _65: &std::path::Path;
    let mut _66: &std::path::PathBuf;
    let _67: &str;
    let _68: &str;
    let _69: &std::string::String;
    let _70: std::string::String;
    let _71: &str;
    let _72: std::process::Output;
    let mut _73: std::result::Result<std::process::Output, std::io::Error>;
    let mut _74: &mut std::process::Command;
    let mut _75: &mut std::process::Command;
    let mut _76: &mut std::process::Command;
    let mut _77: std::process::Command;
    let _78: &str;
    let mut _79: &mut std::process::Command;
    let mut _80: &mut std::process::Command;
    let mut _81: &mut std::process::Command;
    let mut _82: &mut std::process::Command;
    let mut _83: std::process::Command;
    let _84: &str;
    let mut _85: bool;
    let mut _86: &std::process::ExitStatus;
    let mut _87: exercise::CompiledExercise<'_>;
    let _88: ();
    let mut _89: exercise::ExerciseOutput;
    let mut _90: std::string::String;
    let mut _91: &std::borrow::Cow<'_, str>;
    let _92: std::borrow::Cow<'_, str>;
    let _93: &[u8];
    let _94: &std::vec::Vec<u8>;
    let mut _95: std::string::String;
    let mut _96: &std::borrow::Cow<'_, str>;
    let _97: std::borrow::Cow<'_, str>;
    let _98: &[u8];
    let _99: &std::vec::Vec<u8>;
    let mut _103: &[&str; 4];
    let mut _104: bool;
    scope 1 {
        debug cmd => _2;
    }
    scope 2 {
        debug cargo_toml => _33;
        let _46: &str;
        scope 4 {
            debug cargo_toml_error_msg => _46;
            let mut _100: &[&str; 3];
            let mut _101: &[&str; 3];
            let mut _102: &[&str; 3];
        }
    }
    scope 3 {
        debug res => _34;
    }

    bb0: {
        _104 = const false;
        _4 = discriminant(((*_1).2: exercise::Mode));
        switchInt(move _4) -> [0: bb3, 1: bb14, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _103 = const _;
        _36 = _103 as &[&str] (PointerCoercion(Unsize));
        _41 = &((*_1).0: std::string::String);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_41) -> [return: bb25, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _8 = Command::new::<&str>(const "rustc") -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = &mut _8;
        _14 = &((*_1).1: std::path::PathBuf);
        _13 = <PathBuf as Deref>::deref(move _14) -> [return: bb5, unwind: bb92];
    }

    bb5: {
        _12 = Path::to_str(_13) -> [return: bb6, unwind: bb92];
    }

    bb6: {
        _11 = std::option::Option::<&str>::unwrap(move _12) -> [return: bb7, unwind: bb92];
    }

    bb7: {
        _15 = const "-o";
        _18 = temp_file() -> [return: bb8, unwind: bb92];
    }

    bb8: {
        _17 = &_18;
        _16 = <std::string::String as Deref>::deref(_17) -> [return: bb9, unwind: bb91];
    }

    bb9: {
        _10 = [move _11, _15, _16];
        _9 = &_10;
        _6 = Command::args::<&[&str; 3], &&str>(move _7, move _9) -> [return: bb10, unwind: bb91];
    }

    bb10: {
        _5 = Command::args::<&[&str], &&str>(_6, const _) -> [return: bb11, unwind: bb91];
    }

    bb11: {
        _3 = Command::output(_5) -> [return: bb12, unwind: bb91];
    }

    bb12: {
        drop(_18) -> [return: bb13, unwind: bb92];
    }

    bb13: {
        drop(_8) -> [return: bb64, unwind continue];
    }

    bb14: {
        _22 = Command::new::<&str>(const "rustc") -> [return: bb15, unwind continue];
    }

    bb15: {
        _21 = &mut _22;
        _28 = &((*_1).1: std::path::PathBuf);
        _27 = <PathBuf as Deref>::deref(move _28) -> [return: bb16, unwind: bb90];
    }

    bb16: {
        _26 = Path::to_str(_27) -> [return: bb17, unwind: bb90];
    }

    bb17: {
        _25 = std::option::Option::<&str>::unwrap(move _26) -> [return: bb18, unwind: bb90];
    }

    bb18: {
        _29 = const "-o";
        _32 = temp_file() -> [return: bb19, unwind: bb90];
    }

    bb19: {
        _31 = &_32;
        _30 = <std::string::String as Deref>::deref(_31) -> [return: bb20, unwind: bb89];
    }

    bb20: {
        _24 = [const "--test", _25, _29, _30];
        _23 = &_24;
        _20 = Command::args::<&[&str; 4], &&str>(move _21, move _23) -> [return: bb21, unwind: bb89];
    }

    bb21: {
        _19 = Command::args::<&[&str], &&str>(_20, const _) -> [return: bb22, unwind: bb89];
    }

    bb22: {
        _3 = Command::output(_19) -> [return: bb23, unwind: bb89];
    }

    bb23: {
        drop(_32) -> [return: bb24, unwind: bb90];
    }

    bb24: {
        drop(_22) -> [return: bb64, unwind continue];
    }

    bb25: {
        _43 = &((*_1).0: std::string::String);
        _42 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_43) -> [return: bb26, unwind continue];
    }

    bb26: {
        _45 = &((*_1).0: std::string::String);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_45) -> [return: bb27, unwind continue];
    }

    bb27: {
        _39 = [move _40, move _42, move _44];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _35 = Arguments::<'_>::new_v1(move _36, move _37) -> [return: bb28, unwind continue];
    }

    bb28: {
        _34 = format(move _35) -> [return: bb29, unwind continue];
    }

    bb29: {
        _104 = const true;
        _33 = move _34;
        _49 = var::<&str>(const "NO_EMOJI") -> [return: bb30, unwind: bb95];
    }

    bb30: {
        _48 = &_49;
        _47 = Result::<std::string::String, VarError>::is_ok(move _48) -> [return: bb31, unwind: bb88];
    }

    bb31: {
        switchInt(move _47) -> [0: bb34, otherwise: bb32];
    }

    bb32: {
        drop(_49) -> [return: bb33, unwind: bb95];
    }

    bb33: {
        _46 = const "Failed to write Clippy Cargo.toml file.";
        goto -> bb36;
    }

    bb34: {
        drop(_49) -> [return: bb35, unwind: bb95];
    }

    bb35: {
        _50 = const "Failed to write 📎 Clippy 📎 Cargo.toml file.";
        _46 = _50;
        goto -> bb36;
    }

    bb36: {
        _104 = const false;
        _53 = move _33;
        _52 = std::fs::write::<&str, std::string::String>(const _, move _53) -> [return: bb37, unwind: bb95];
    }

    bb37: {
        _54 = _46;
        _51 = Result::<(), std::io::Error>::expect(move _52, move _54) -> [return: bb38, unwind: bb95];
    }

    bb38: {
        _60 = Command::new::<&str>(const "rustc") -> [return: bb39, unwind: bb95];
    }

    bb39: {
        _59 = &mut _60;
        _66 = &((*_1).1: std::path::PathBuf);
        _65 = <PathBuf as Deref>::deref(move _66) -> [return: bb40, unwind: bb87];
    }

    bb40: {
        _64 = Path::to_str(_65) -> [return: bb41, unwind: bb87];
    }

    bb41: {
        _63 = std::option::Option::<&str>::unwrap(move _64) -> [return: bb42, unwind: bb87];
    }

    bb42: {
        _67 = const "-o";
        _70 = temp_file() -> [return: bb43, unwind: bb87];
    }

    bb43: {
        _69 = &_70;
        _68 = <std::string::String as Deref>::deref(_69) -> [return: bb44, unwind: bb86];
    }

    bb44: {
        _62 = [move _63, _67, _68];
        _61 = &_62;
        _58 = Command::args::<&[&str; 3], &&str>(move _59, move _61) -> [return: bb45, unwind: bb86];
    }

    bb45: {
        _57 = Command::args::<&[&str], &&str>(_58, const _) -> [return: bb46, unwind: bb86];
    }

    bb46: {
        _56 = Command::output(_57) -> [return: bb47, unwind: bb86];
    }

    bb47: {
        _71 = const "Failed to compile!";
        _55 = Result::<Output, std::io::Error>::expect(move _56, _71) -> [return: bb48, unwind: bb86];
    }

    bb48: {
        drop(_55) -> [return: bb49, unwind: bb86];
    }

    bb49: {
        drop(_70) -> [return: bb50, unwind: bb87];
    }

    bb50: {
        drop(_60) -> [return: bb51, unwind: bb95];
    }

    bb51: {
        _77 = Command::new::<&str>(const "cargo") -> [return: bb52, unwind: bb95];
    }

    bb52: {
        _76 = &mut _77;
        _102 = const _;
        _75 = Command::args::<&[&str; 3], &&str>(move _76, _102) -> [return: bb53, unwind: bb85];
    }

    bb53: {
        _74 = Command::args::<&[&str], &&str>(_75, const _) -> [return: bb54, unwind: bb85];
    }

    bb54: {
        _73 = Command::output(_74) -> [return: bb55, unwind: bb85];
    }

    bb55: {
        _78 = const "Failed to run 'cargo clean'";
        _72 = Result::<Output, std::io::Error>::expect(move _73, _78) -> [return: bb56, unwind: bb85];
    }

    bb56: {
        drop(_72) -> [return: bb57, unwind: bb85];
    }

    bb57: {
        drop(_77) -> [return: bb58, unwind: bb95];
    }

    bb58: {
        _83 = Command::new::<&str>(const "cargo") -> [return: bb59, unwind: bb95];
    }

    bb59: {
        _82 = &mut _83;
        _101 = const _;
        _81 = Command::args::<&[&str; 3], &&str>(move _82, _101) -> [return: bb60, unwind: bb84];
    }

    bb60: {
        _80 = Command::args::<&[&str], &&str>(_81, const _) -> [return: bb61, unwind: bb84];
    }

    bb61: {
        _100 = const _;
        _79 = Command::args::<&[&str; 3], &&str>(_80, _100) -> [return: bb62, unwind: bb84];
    }

    bb62: {
        _3 = Command::output(_79) -> [return: bb63, unwind: bb84];
    }

    bb63: {
        _104 = const false;
        drop(_83) -> [return: bb64, unwind continue];
    }

    bb64: {
        _84 = const "Failed to run 'compile' command.";
        _2 = Result::<Output, std::io::Error>::expect(move _3, _84) -> [return: bb65, unwind continue];
    }

    bb65: {
        _86 = &(_2.0: std::process::ExitStatus);
        _85 = ExitStatus::success(move _86) -> [return: bb66, unwind: bb83];
    }

    bb66: {
        switchInt(move _85) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _87 = CompiledExercise::<'_> { exercise: _1, _handle: const FileHandle };
        _0 = Result::<CompiledExercise<'_>, ExerciseOutput>::Ok(move _87);
        goto -> bb77;
    }

    bb68: {
        _88 = clean() -> [return: bb69, unwind: bb83];
    }

    bb69: {
        _94 = &(_2.1: std::vec::Vec<u8>);
        _93 = <Vec<u8> as Deref>::deref(_94) -> [return: bb70, unwind: bb83];
    }

    bb70: {
        _92 = std::string::String::from_utf8_lossy(_93) -> [return: bb71, unwind: bb83];
    }

    bb71: {
        _91 = &_92;
        _90 = <Cow<'_, str> as ToString>::to_string(move _91) -> [return: bb72, unwind: bb82];
    }

    bb72: {
        _99 = &(_2.2: std::vec::Vec<u8>);
        _98 = <Vec<u8> as Deref>::deref(_99) -> [return: bb73, unwind: bb81];
    }

    bb73: {
        _97 = std::string::String::from_utf8_lossy(_98) -> [return: bb74, unwind: bb81];
    }

    bb74: {
        _96 = &_97;
        _95 = <Cow<'_, str> as ToString>::to_string(move _96) -> [return: bb75, unwind: bb79];
    }

    bb75: {
        _89 = ExerciseOutput { stdout: move _90, stderr: move _95 };
        _0 = Result::<CompiledExercise<'_>, ExerciseOutput>::Err(move _89);
        drop(_97) -> [return: bb76, unwind: bb82];
    }

    bb76: {
        drop(_92) -> [return: bb77, unwind: bb83];
    }

    bb77: {
        drop(_2) -> [return: bb78, unwind continue];
    }

    bb78: {
        return;
    }

    bb79 (cleanup): {
        drop(_90) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_97) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_90) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_92) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_2) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_83) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_77) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_70) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_60) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_49) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_32) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_22) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_18) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_8) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        resume;
    }

    bb94 (cleanup): {
        drop(_33) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        switchInt(_104) -> [0: bb93, otherwise: bb94];
    }
}

promoted[0] in exercise::<impl at src/exercise.rs:108:1: 108:14>::compile: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "-D";
        _2 = &(*_3);
        _5 = const "warnings";
        _4 = &(*_5);
        _1 = [const "--", move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[1] in exercise::<impl at src/exercise.rs:108:1: 108:14>::compile: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "--manifest-path";
        _2 = &(*_3);
        _5 = const _;
        _4 = &(*_5);
        _1 = [const "clippy", move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[2] in exercise::<impl at src/exercise.rs:108:1: 108:14>::compile: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "--manifest-path";
        _2 = &(*_3);
        _5 = const _;
        _4 = &(*_5);
        _1 = [const "clean", move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[3] in exercise::<impl at src/exercise.rs:108:1: 108:14>::compile: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "[package]\nname = \"", const "\"\nversion = \"0.0.1\"\nedition = \"2018\"\n[[bin]]\nname = \"", const "\"\npath = \"", const ".rs\""];
        _0 = &_1;
        return;
    }
}

fn exercise::<impl at src/exercise.rs:108:1: 108:14>::run(_1: &Exercise) -> Result<ExerciseOutput, ExerciseOutput> {
    debug self => _1;
    let mut _0: std::result::Result<exercise::ExerciseOutput, exercise::ExerciseOutput>;
    let _2: &str;
    let mut _3: isize;
    let _4: &str;
    let mut _6: std::result::Result<std::process::Output, std::io::Error>;
    let mut _7: &mut std::process::Command;
    let mut _8: &mut std::process::Command;
    let mut _9: std::process::Command;
    let mut _10: &std::string::String;
    let _11: std::string::String;
    let mut _12: &str;
    let _13: &str;
    let mut _15: std::string::String;
    let mut _16: &std::borrow::Cow<'_, str>;
    let _17: std::borrow::Cow<'_, str>;
    let _18: &[u8];
    let _19: &std::vec::Vec<u8>;
    let mut _20: std::string::String;
    let mut _21: &std::borrow::Cow<'_, str>;
    let _22: std::borrow::Cow<'_, str>;
    let _23: &[u8];
    let _24: &std::vec::Vec<u8>;
    let mut _25: bool;
    let mut _26: &std::process::ExitStatus;
    let mut _27: exercise::ExerciseOutput;
    let mut _28: exercise::ExerciseOutput;
    scope 1 {
        debug arg => _2;
        let _5: std::process::Output;
        scope 2 {
            debug cmd => _5;
            let _14: exercise::ExerciseOutput;
            scope 3 {
                debug output => _14;
            }
        }
    }

    bb0: {
        _3 = discriminant(((*_1).2: exercise::Mode));
        switchInt(move _3) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = const "";
        _2 = _4;
        goto -> bb3;
    }

    bb2: {
        _2 = const "--show-output";
        goto -> bb3;
    }

    bb3: {
        _11 = temp_file() -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = &_11;
        _9 = Command::new::<&std::string::String>(move _10) -> [return: bb5, unwind: bb33];
    }

    bb5: {
        _8 = &mut _9;
        _12 = _2;
        _7 = Command::arg::<&str>(move _8, move _12) -> [return: bb6, unwind: bb32];
    }

    bb6: {
        _6 = Command::output(_7) -> [return: bb7, unwind: bb32];
    }

    bb7: {
        _13 = const "Failed to run 'run' command";
        _5 = Result::<Output, std::io::Error>::expect(move _6, _13) -> [return: bb8, unwind: bb32];
    }

    bb8: {
        drop(_9) -> [return: bb9, unwind: bb30];
    }

    bb9: {
        drop(_11) -> [return: bb10, unwind: bb31];
    }

    bb10: {
        _19 = &(_5.1: std::vec::Vec<u8>);
        _18 = <Vec<u8> as Deref>::deref(_19) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        _17 = std::string::String::from_utf8_lossy(_18) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _16 = &_17;
        _15 = <Cow<'_, str> as ToString>::to_string(move _16) -> [return: bb13, unwind: bb29];
    }

    bb13: {
        _24 = &(_5.2: std::vec::Vec<u8>);
        _23 = <Vec<u8> as Deref>::deref(_24) -> [return: bb14, unwind: bb28];
    }

    bb14: {
        _22 = std::string::String::from_utf8_lossy(_23) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        _21 = &_22;
        _20 = <Cow<'_, str> as ToString>::to_string(move _21) -> [return: bb16, unwind: bb26];
    }

    bb16: {
        _14 = ExerciseOutput { stdout: move _15, stderr: move _20 };
        drop(_22) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        drop(_17) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        _26 = &(_5.0: std::process::ExitStatus);
        _25 = ExitStatus::success(move _26) -> [return: bb19, unwind: bb25];
    }

    bb19: {
        switchInt(move _25) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _27 = move _14;
        _0 = Result::<ExerciseOutput, ExerciseOutput>::Ok(move _27);
        goto -> bb22;
    }

    bb21: {
        _28 = move _14;
        _0 = Result::<ExerciseOutput, ExerciseOutput>::Err(move _28);
        goto -> bb22;
    }

    bb22: {
        drop(_5) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_17) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_14) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_15) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_22) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_15) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_17) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_11) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_5) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_9) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_11) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }
}

fn exercise::<impl at src/exercise.rs:108:1: 108:14>::state(_1: &Exercise) -> State {
    debug self => _1;
    let mut _0: exercise::State;
    let mut _2: std::fs::File;
    let mut _3: std::result::Result<std::fs::File, std::io::Error>;
    let mut _4: &std::path::PathBuf;
    let _5: &str;
    let _8: usize;
    let mut _9: std::result::Result<usize, std::io::Error>;
    let mut _10: &mut std::fs::File;
    let mut _11: &mut std::string::String;
    let _12: &str;
    let mut _14: std::result::Result<regex::Regex, regex::Error>;
    let _15: &str;
    let mut _16: bool;
    let mut _17: &regex::Regex;
    let _18: &str;
    let _19: &std::string::String;
    let mut _21: std::option::Option<usize>;
    let mut _22: &mut std::iter::FilterMap<std::iter::Enumerate<std::str::Lines<'_>>, {closure@src/exercise.rs:220:25: 220:36}>;
    let mut _23: std::iter::FilterMap<std::iter::Enumerate<std::str::Lines<'_>>, {closure@src/exercise.rs:220:25: 220:36}>;
    let mut _24: std::iter::Enumerate<std::str::Lines<'_>>;
    let mut _25: std::str::Lines<'_>;
    let _26: &str;
    let mut _27: &std::string::String;
    let mut _28: {closure@src/exercise.rs:220:25: 220:36};
    let mut _29: &regex::Regex;
    let _30: &str;
    let mut _32: i32;
    let mut _33: i32;
    let mut _34: i32;
    let mut _35: usize;
    let mut _36: i32;
    let mut _37: (i32, bool);
    let mut _39: usize;
    let mut _40: (usize, bool);
    let mut _42: std::iter::Map<std::iter::Filter<std::iter::Enumerate<std::str::Lines<'_>>, {closure@src/exercise.rs:230:21: 230:30}>, {closure@src/exercise.rs:231:18: 231:29}>;
    let mut _43: std::iter::Filter<std::iter::Enumerate<std::str::Lines<'_>>, {closure@src/exercise.rs:230:21: 230:30}>;
    let mut _44: std::iter::Enumerate<std::str::Lines<'_>>;
    let mut _45: std::str::Lines<'_>;
    let _46: &str;
    let mut _47: &std::string::String;
    let mut _48: {closure@src/exercise.rs:230:21: 230:30};
    let mut _49: &usize;
    let mut _50: &usize;
    let mut _51: {closure@src/exercise.rs:231:18: 231:29};
    let mut _52: &usize;
    scope 1 {
        debug source_file => _2;
        let _6: std::string::String;
        let mut _7: std::string::String;
        scope 2 {
            debug source => _6;
            let _13: regex::Regex;
            scope 4 {
                debug re => _13;
                let _20: usize;
                scope 5 {
                    debug matched_line_index => _20;
                    let _31: usize;
                    scope 6 {
                        debug min_line => _31;
                        let _38: usize;
                        scope 7 {
                            debug max_line => _38;
                            let _41: std::vec::Vec<exercise::ContextLine>;
                            scope 8 {
                                debug context => _41;
                            }
                        }
                    }
                }
            }
        }
        scope 3 {
            debug s => _7;
        }
    }

    bb0: {
        _4 = &((*_1).1: std::path::PathBuf);
        _3 = std::fs::File::open::<&PathBuf>(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const "We were unable to open the exercise file!";
        _2 = Result::<std::fs::File, std::io::Error>::expect(move _3, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = std::string::String::new() -> [return: bb3, unwind: bb35];
    }

    bb3: {
        _10 = &mut _2;
        _11 = &mut _7;
        _9 = <std::fs::File as std::io::Read>::read_to_string(move _10, _11) -> [return: bb4, unwind: bb34];
    }

    bb4: {
        _12 = const "We were unable to read the exercise file!";
        _8 = Result::<usize, std::io::Error>::expect(move _9, _12) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        _6 = move _7;
        _15 = const _;
        _14 = regex::Regex::new(_15) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _13 = Result::<regex::Regex, regex::Error>::unwrap(move _14) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _17 = &_13;
        _19 = &_6;
        _18 = <std::string::String as Deref>::deref(_19) -> [return: bb8, unwind: bb32];
    }

    bb8: {
        _16 = regex::Regex::is_match(move _17, _18) -> [return: bb9, unwind: bb32];
    }

    bb9: {
        switchInt(move _16) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _27 = &_6;
        _26 = <std::string::String as Deref>::deref(move _27) -> [return: bb12, unwind: bb32];
    }

    bb11: {
        _0 = State::Done;
        drop(_13) -> [return: bb29, unwind: bb33];
    }

    bb12: {
        _25 = core::str::<impl str>::lines(_26) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _24 = <std::str::Lines<'_> as Iterator>::enumerate(move _25) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _29 = &_13;
        _28 = {closure@src/exercise.rs:220:25: 220:36} { re: move _29 };
        _23 = <Enumerate<std::str::Lines<'_>> as Iterator>::filter_map::<usize, {closure@src/exercise.rs:220:25: 220:36}>(move _24, move _28) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _22 = &mut _23;
        _21 = <FilterMap<Enumerate<std::str::Lines<'_>>, {closure@src/exercise.rs:220:25: 220:36}> as Iterator>::next(move _22) -> [return: bb16, unwind: bb32];
    }

    bb16: {
        _30 = const "This should not happen at all";
        _20 = std::option::Option::<usize>::expect(move _21, _30) -> [return: bb17, unwind: bb32];
    }

    bb17: {
        _35 = _20;
        _34 = move _35 as i32 (IntToInt);
        _36 = const _ as i32 (IntToInt);
        _37 = CheckedSub(_34, _36);
        assert(!move (_37.1: bool), "attempt to compute `{} - {}`, which would overflow", move _34, move _36) -> [success: bb18, unwind: bb32];
    }

    bb18: {
        _33 = move (_37.0: i32);
        _32 = <i32 as Ord>::max(move _33, const 0_i32) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _31 = move _32 as usize (IntToInt);
        _39 = _20;
        _40 = CheckedAdd(_39, const _);
        assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", move _39, const _) -> [success: bb20, unwind: bb32];
    }

    bb20: {
        _38 = move (_40.0: usize);
        _47 = &_6;
        _46 = <std::string::String as Deref>::deref(move _47) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _45 = core::str::<impl str>::lines(_46) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _44 = <std::str::Lines<'_> as Iterator>::enumerate(move _45) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        _49 = &_31;
        _50 = &_38;
        _48 = {closure@src/exercise.rs:230:21: 230:30} { min_line: move _49, max_line: move _50 };
        _43 = <Enumerate<std::str::Lines<'_>> as Iterator>::filter::<{closure@src/exercise.rs:230:21: 230:30}>(move _44, move _48) -> [return: bb24, unwind: bb32];
    }

    bb24: {
        _52 = &_20;
        _51 = {closure@src/exercise.rs:231:18: 231:29} { matched_line_index: move _52 };
        _42 = <Filter<Enumerate<std::str::Lines<'_>>, {closure@src/exercise.rs:230:21: 230:30}> as Iterator>::map::<ContextLine, {closure@src/exercise.rs:231:18: 231:29}>(move _43, move _51) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        _41 = <std::iter::Map<Filter<Enumerate<std::str::Lines<'_>>, {closure@src/exercise.rs:230:21: 230:30}>, {closure@src/exercise.rs:231:18: 231:29}> as Iterator>::collect::<Vec<ContextLine>>(move _42) -> [return: bb26, unwind: bb32];
    }

    bb26: {
        _0 = State::Pending(move _41);
        drop(_13) -> [return: bb27, unwind: bb33];
    }

    bb27: {
        drop(_6) -> [return: bb28, unwind: bb35];
    }

    bb28: {
        drop(_2) -> [return: bb31, unwind continue];
    }

    bb29: {
        drop(_6) -> [return: bb30, unwind: bb35];
    }

    bb30: {
        drop(_2) -> [return: bb31, unwind continue];
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_13) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_6) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_7) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_2) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }
}

fn exercise::<impl at src/exercise.rs:108:1: 108:14>::state::{closure#0}(_1: &mut {closure@src/exercise.rs:220:25: 220:36}, _2: (usize, &str)) -> std::option::Option<usize> {
    debug re => (*((*_1).0: &regex::Regex));
    let mut _0: std::option::Option<usize>;
    let _3: usize;
    let _4: &str;
    let mut _5: bool;
    let mut _6: &regex::Regex;
    scope 1 {
        debug i => _3;
        debug line => _4;
    }

    bb0: {
        _3 = (_2.0: usize);
        _4 = (_2.1: &str);
        _6 = deref_copy ((*_1).0: &regex::Regex);
        _5 = regex::Regex::is_match(_6, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = std::option::Option::<usize>::Some(_3);
        goto -> bb4;
    }

    bb3: {
        _0 = std::option::Option::<usize>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn exercise::<impl at src/exercise.rs:108:1: 108:14>::state::{closure#1}(_1: &mut {closure@src/exercise.rs:230:21: 230:30}, _2: &(usize, &str)) -> bool {
    debug min_line => (*((*_1).0: &usize));
    debug max_line => (*((*_1).1: &usize));
    let mut _0: bool;
    let _3: usize;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: &usize;
    let mut _8: &usize;
    scope 1 {
        debug i => _3;
    }

    bb0: {
        _3 = ((*_2).0: usize);
        _7 = deref_copy ((*_1).0: &usize);
        _5 = (*_7);
        _4 = Ge(_3, move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = deref_copy ((*_1).1: &usize);
        _6 = (*_8);
        _0 = Le(_3, move _6);
        goto -> bb3;
    }

    bb2: {
        _0 = const false;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn exercise::<impl at src/exercise.rs:108:1: 108:14>::state::{closure#2}(_1: &mut {closure@src/exercise.rs:231:18: 231:29}, _2: (usize, &str)) -> ContextLine {
    debug matched_line_index => (*((*_1).0: &usize));
    let mut _0: exercise::ContextLine;
    let _3: usize;
    let _4: &str;
    let mut _5: std::string::String;
    let mut _6: usize;
    let mut _7: (usize, bool);
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: &usize;
    scope 1 {
        debug i => _3;
        debug line => _4;
    }

    bb0: {
        _3 = (_2.0: usize);
        _4 = (_2.1: &str);
        _5 = <str as ToString>::to_string(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = CheckedAdd(_3, const 1_usize);
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_usize) -> [success: bb2, unwind: bb3];
    }

    bb2: {
        _6 = move (_7.0: usize);
        _10 = deref_copy ((*_1).0: &usize);
        _9 = (*_10);
        _8 = Eq(_3, move _9);
        _0 = ContextLine { line: move _5, number: move _6, important: move _8 };
        return;
    }

    bb3 (cleanup): {
        drop(_5) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn exercise::<impl at src/exercise.rs:108:1: 108:14>::looks_done(_1: &Exercise) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: &exercise::State;
    let _3: exercise::State;
    let mut _4: &exercise::State;

    bb0: {
        _3 = Exercise::state(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _4 = const _;
        _0 = <State as PartialEq>::eq(move _2, _4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

promoted[0] in exercise::<impl at src/exercise.rs:108:1: 108:14>::looks_done: &State = {
    let mut _0: &exercise::State;
    let mut _1: exercise::State;

    bb0: {
        _1 = State::Done;
        _0 = &_1;
        return;
    }
}

fn exercise::<impl at src/exercise.rs:252:1: 252:26>::fmt(_1: &Exercise, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&str;
    let _10: &str;
    let mut _11: std::option::Option<&str>;
    let _12: &std::path::Path;
    let mut _13: &std::path::PathBuf;
    let mut _14: &[&str; 1];

    bb0: {
        _14 = const _;
        _4 = _14 as &[&str] (PointerCoercion(Unsize));
        _13 = &((*_1).1: std::path::PathBuf);
        _12 = <PathBuf as Deref>::deref(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = Path::to_str(_12) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = std::option::Option::<&str>::unwrap(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

promoted[0] in exercise::<impl at src/exercise.rs:252:1: 252:26>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn clean() -> () {
    let mut _0: ();
    let _1: std::result::Result<(), std::io::Error>;
    let mut _2: &std::string::String;
    let _3: std::string::String;
    scope 1 {
        debug _ignored => _1;
    }

    bb0: {
        _3 = temp_file() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = remove_file::<&std::string::String>(move _2) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn run(_1: &Exercise, _2: bool) -> Result<(), ()> {
    debug exercise => _1;
    debug verbose => _2;
    let mut _0: std::result::Result<(), ()>;
    let mut _3: isize;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>>;
    let mut _5: std::result::Result<(), ()>;
    let mut _6: isize;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>>;
    let mut _8: std::result::Result<(), ()>;
    let mut _9: isize;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>>;
    let mut _11: std::result::Result<(), ()>;
    let mut _12: isize;
    scope 1 {
        debug residual => const Result::<Infallible, ()>::Err(());
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug residual => const Result::<Infallible, ()>::Err(());
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();
        scope 8 {
        }
    }
    scope 9 {
        debug residual => const Result::<Infallible, ()>::Err(());
        scope 10 {
        }
    }
    scope 11 {
        debug val => const ();
        scope 12 {
        }
    }

    bb0: {
        _3 = discriminant(((*_1).2: exercise::Mode));
        switchInt(move _3) -> [0: bb7, 1: bb3, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _11 = compile_and_run(_1) -> [return: bb11, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = test(_1, _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = <Result<(), ()> as Try>::branch(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb14, 1: bb6, otherwise: bb2];
    }

    bb6: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb15, unwind continue];
    }

    bb7: {
        _8 = compile_and_run(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        _7 = <Result<(), ()> as Try>::branch(move _8) -> [return: bb9, unwind continue];
    }

    bb9: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb14, 1: bb10, otherwise: bb2];
    }

    bb10: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb15, unwind continue];
    }

    bb11: {
        _10 = <Result<(), ()> as Try>::branch(move _11) -> [return: bb12, unwind continue];
    }

    bb12: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb14, 1: bb13, otherwise: bb2];
    }

    bb13: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb15, unwind continue];
    }

    bb14: {
        _0 = Result::<(), ()>::Ok(const ());
        goto -> bb15;
    }

    bb15: {
        return;
    }
}

fn compile_and_run(_1: &Exercise) -> Result<(), ()> {
    debug exercise => _1;
    let mut _0: std::result::Result<(), ()>;
    let _2: indicatif::ProgressBar;
    let _3: ();
    let mut _4: &indicatif::ProgressBar;
    let _5: &str;
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &&exercise::Exercise;
    let _16: ();
    let mut _17: &indicatif::ProgressBar;
    let mut _19: &exercise::Exercise;
    let mut _21: isize;
    let _24: ();
    let mut _25: &indicatif::ProgressBar;
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let mut _30: &[core::fmt::rt::Argument<'_>];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let _34: &&exercise::Exercise;
    let mut _35: bool;
    let mut _36: &std::result::Result<std::string::String, std::env::VarError>;
    let _37: std::result::Result<std::string::String, std::env::VarError>;
    let _38: ();
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let _42: &[core::fmt::rt::Argument<'_>; 2];
    let _43: [core::fmt::rt::Argument<'_>; 2];
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: &console::StyledObject<&str>;
    let _46: console::StyledObject<&str>;
    let mut _47: console::StyledObject<&str>;
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &console::StyledObject<std::string::String>;
    let _50: console::StyledObject<std::string::String>;
    let mut _51: console::StyledObject<std::string::String>;
    let mut _52: std::string::String;
    let _53: ();
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let _57: &[core::fmt::rt::Argument<'_>; 2];
    let _58: [core::fmt::rt::Argument<'_>; 2];
    let mut _59: core::fmt::rt::Argument<'_>;
    let _60: &console::StyledObject<console::Emoji<'_, '_>>;
    let _61: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _62: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _63: console::Emoji<'_, '_>;
    let _64: &str;
    let _65: &str;
    let mut _66: core::fmt::rt::Argument<'_>;
    let _67: &console::StyledObject<std::string::String>;
    let _68: console::StyledObject<std::string::String>;
    let mut _69: console::StyledObject<std::string::String>;
    let mut _70: std::string::String;
    let _71: ();
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let mut _74: &[core::fmt::rt::Argument<'_>];
    let _75: &[core::fmt::rt::Argument<'_>; 1];
    let _76: [core::fmt::rt::Argument<'_>; 1];
    let mut _77: core::fmt::rt::Argument<'_>;
    let _78: &std::string::String;
    let _79: ();
    let mut _80: &indicatif::ProgressBar;
    let _81: &str;
    let mut _82: &std::string::String;
    let _83: std::string::String;
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let _88: &[core::fmt::rt::Argument<'_>; 1];
    let _89: [core::fmt::rt::Argument<'_>; 1];
    let mut _90: core::fmt::rt::Argument<'_>;
    let _91: &&exercise::Exercise;
    let mut _93: &exercise::CompiledExercise<'_>;
    let _94: ();
    let mut _95: &indicatif::ProgressBar;
    let mut _96: isize;
    let _98: ();
    let mut _99: std::fmt::Arguments<'_>;
    let mut _100: &[&str];
    let mut _101: &[core::fmt::rt::Argument<'_>];
    let _102: &[core::fmt::rt::Argument<'_>; 1];
    let _103: [core::fmt::rt::Argument<'_>; 1];
    let mut _104: core::fmt::rt::Argument<'_>;
    let _105: &std::string::String;
    let mut _108: std::fmt::Arguments<'_>;
    let mut _109: &[&str];
    let mut _110: &[core::fmt::rt::Argument<'_>];
    let _111: &[core::fmt::rt::Argument<'_>; 1];
    let _112: [core::fmt::rt::Argument<'_>; 1];
    let mut _113: core::fmt::rt::Argument<'_>;
    let _114: &&exercise::Exercise;
    let mut _115: bool;
    let mut _116: &std::result::Result<std::string::String, std::env::VarError>;
    let _117: std::result::Result<std::string::String, std::env::VarError>;
    let _118: ();
    let mut _119: std::fmt::Arguments<'_>;
    let mut _120: &[&str];
    let mut _121: &[core::fmt::rt::Argument<'_>];
    let _122: &[core::fmt::rt::Argument<'_>; 2];
    let _123: [core::fmt::rt::Argument<'_>; 2];
    let mut _124: core::fmt::rt::Argument<'_>;
    let _125: &console::StyledObject<&str>;
    let _126: console::StyledObject<&str>;
    let mut _127: console::StyledObject<&str>;
    let mut _128: core::fmt::rt::Argument<'_>;
    let _129: &console::StyledObject<std::string::String>;
    let _130: console::StyledObject<std::string::String>;
    let mut _131: console::StyledObject<std::string::String>;
    let mut _132: std::string::String;
    let _133: ();
    let mut _134: std::fmt::Arguments<'_>;
    let mut _135: &[&str];
    let mut _136: &[core::fmt::rt::Argument<'_>];
    let _137: &[core::fmt::rt::Argument<'_>; 2];
    let _138: [core::fmt::rt::Argument<'_>; 2];
    let mut _139: core::fmt::rt::Argument<'_>;
    let _140: &console::StyledObject<console::Emoji<'_, '_>>;
    let _141: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _142: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _143: console::Emoji<'_, '_>;
    let _144: &str;
    let _145: &str;
    let mut _146: core::fmt::rt::Argument<'_>;
    let _147: &console::StyledObject<std::string::String>;
    let _148: console::StyledObject<std::string::String>;
    let mut _149: console::StyledObject<std::string::String>;
    let mut _150: std::string::String;
    let _152: ();
    let mut _153: std::fmt::Arguments<'_>;
    let mut _154: &[&str];
    let mut _155: &[core::fmt::rt::Argument<'_>];
    let _156: &[core::fmt::rt::Argument<'_>; 1];
    let _157: [core::fmt::rt::Argument<'_>; 1];
    let mut _158: core::fmt::rt::Argument<'_>;
    let _159: &std::string::String;
    let _160: ();
    let mut _161: std::fmt::Arguments<'_>;
    let mut _162: &[&str];
    let mut _163: &[core::fmt::rt::Argument<'_>];
    let _164: &[core::fmt::rt::Argument<'_>; 1];
    let _165: [core::fmt::rt::Argument<'_>; 1];
    let mut _166: core::fmt::rt::Argument<'_>;
    let _167: &std::string::String;
    let mut _170: std::fmt::Arguments<'_>;
    let mut _171: &[&str];
    let mut _172: &[core::fmt::rt::Argument<'_>];
    let _173: &[core::fmt::rt::Argument<'_>; 1];
    let _174: [core::fmt::rt::Argument<'_>; 1];
    let mut _175: core::fmt::rt::Argument<'_>;
    let _176: &&exercise::Exercise;
    let mut _177: bool;
    let mut _178: &std::result::Result<std::string::String, std::env::VarError>;
    let _179: std::result::Result<std::string::String, std::env::VarError>;
    let _180: ();
    let mut _181: std::fmt::Arguments<'_>;
    let mut _182: &[&str];
    let mut _183: &[core::fmt::rt::Argument<'_>];
    let _184: &[core::fmt::rt::Argument<'_>; 2];
    let _185: [core::fmt::rt::Argument<'_>; 2];
    let mut _186: core::fmt::rt::Argument<'_>;
    let _187: &console::StyledObject<&str>;
    let _188: console::StyledObject<&str>;
    let mut _189: console::StyledObject<&str>;
    let mut _190: core::fmt::rt::Argument<'_>;
    let _191: &console::StyledObject<std::string::String>;
    let _192: console::StyledObject<std::string::String>;
    let mut _193: console::StyledObject<std::string::String>;
    let mut _194: std::string::String;
    let _195: ();
    let mut _196: std::fmt::Arguments<'_>;
    let mut _197: &[&str];
    let mut _198: &[core::fmt::rt::Argument<'_>];
    let _199: &[core::fmt::rt::Argument<'_>; 2];
    let _200: [core::fmt::rt::Argument<'_>; 2];
    let mut _201: core::fmt::rt::Argument<'_>;
    let _202: &console::StyledObject<console::Emoji<'_, '_>>;
    let _203: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _204: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _205: console::Emoji<'_, '_>;
    let _206: &str;
    let _207: &str;
    let mut _208: core::fmt::rt::Argument<'_>;
    let _209: &console::StyledObject<std::string::String>;
    let _210: console::StyledObject<std::string::String>;
    let mut _211: console::StyledObject<std::string::String>;
    let mut _212: std::string::String;
    let mut _228: bool;
    let mut _229: bool;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: bool;
    let mut _233: isize;
    scope 1 {
        debug progress_bar => _2;
        let _8: std::string::String;
        let _18: std::result::Result<exercise::CompiledExercise<'_>, exercise::ExerciseOutput>;
        let mut _227: &[&str; 2];
        scope 2 {
            debug res => _8;
        }
        scope 3 {
            debug compilation_result => _18;
            let _20: exercise::CompiledExercise<'_>;
            let _22: exercise::CompiledExercise<'_>;
            let _23: exercise::ExerciseOutput;
            scope 4 {
                debug compilation => _20;
                let _84: std::string::String;
                let _92: std::result::Result<exercise::ExerciseOutput, exercise::ExerciseOutput>;
                let mut _226: &[&str; 2];
                scope 9 {
                    debug res => _84;
                }
                scope 10 {
                    debug result => _92;
                    let _97: exercise::ExerciseOutput;
                    let _151: exercise::ExerciseOutput;
                    scope 11 {
                        debug output => _97;
                        let _106: std::string::String;
                        let _107: std::string::String;
                        let mut _224: &[&str; 1];
                        let mut _225: &[&str; 2];
                        scope 12 {
                            debug formatstr => _106;
                            let mut _222: &[&str; 3];
                            let mut _223: &[&str; 3];
                        }
                        scope 13 {
                            debug res => _107;
                        }
                    }
                    scope 14 {
                        debug output => _151;
                        let _168: std::string::String;
                        let _169: std::string::String;
                        let mut _219: &[&str; 2];
                        let mut _220: &[&str; 2];
                        let mut _221: &[&str; 2];
                        scope 15 {
                            debug formatstr => _168;
                            let mut _217: &[&str; 3];
                            let mut _218: &[&str; 3];
                        }
                        scope 16 {
                            debug res => _169;
                        }
                    }
                }
            }
            scope 5 {
                debug compilation => _22;
            }
            scope 6 {
                debug output => _23;
                let _26: std::string::String;
                let _27: std::string::String;
                let mut _213: &[&str; 2];
                let mut _216: &[&str; 2];
                scope 7 {
                    debug formatstr => _26;
                    let mut _214: &[&str; 3];
                    let mut _215: &[&str; 3];
                }
                scope 8 {
                    debug res => _27;
                }
            }
        }
    }

    bb0: {
        _232 = const false;
        _229 = const false;
        _228 = const false;
        _231 = const false;
        _230 = const false;
        _2 = ProgressBar::new_spinner() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_2;
        _227 = const _;
        _10 = _227 as &[&str] (PointerCoercion(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_15) -> [return: bb2, unwind: bb144];
    }

    bb2: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb3, unwind: bb144];
    }

    bb3: {
        _8 = format(move _9) -> [return: bb4, unwind: bb144];
    }

    bb4: {
        _7 = move _8;
        _6 = &_7;
        _5 = std::string::String::as_str(move _6) -> [return: bb5, unwind: bb143];
    }

    bb5: {
        _3 = ProgressBar::set_message(move _4, _5) -> [return: bb6, unwind: bb143];
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb144];
    }

    bb7: {
        _17 = &_2;
        _16 = ProgressBar::enable_steady_tick(move _17, const 100_u64) -> [return: bb8, unwind: bb144];
    }

    bb8: {
        _19 = _1;
        _18 = Exercise::compile(move _19) -> [return: bb9, unwind: bb144];
    }

    bb9: {
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _23 = move ((_18 as Err).0: exercise::ExerciseOutput);
        _25 = &_2;
        _24 = ProgressBar::finish_and_clear(move _25) -> [return: bb13, unwind: bb142];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _22 = move ((_18 as Ok).0: exercise::CompiledExercise<'_>);
        _20 = move _22;
        _80 = &_2;
        _226 = const _;
        _86 = _226 as &[&str] (PointerCoercion(Unsize));
        _91 = &_1;
        _90 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_91) -> [return: bb45, unwind: bb136];
    }

    bb13: {
        _216 = const _;
        _29 = _216 as &[&str] (PointerCoercion(Unsize));
        _34 = &_1;
        _33 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_34) -> [return: bb14, unwind: bb142];
    }

    bb14: {
        _32 = [move _33];
        _31 = &_32;
        _30 = _31 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _28 = Arguments::<'_>::new_v1(move _29, move _30) -> [return: bb15, unwind: bb142];
    }

    bb15: {
        _27 = format(move _28) -> [return: bb16, unwind: bb142];
    }

    bb16: {
        _232 = const true;
        _26 = move _27;
        _37 = var::<&str>(const "NO_EMOJI") -> [return: bb17, unwind: bb157];
    }

    bb17: {
        _36 = &_37;
        _35 = Result::<std::string::String, VarError>::is_ok(move _36) -> [return: bb18, unwind: bb141];
    }

    bb18: {
        switchInt(move _35) -> [0: bb30, otherwise: bb19];
    }

    bb19: {
        drop(_37) -> [return: bb20, unwind: bb157];
    }

    bb20: {
        _214 = const _;
        _40 = _214 as &[&str] (PointerCoercion(Unsize));
        _47 = style::<&str>(const "!") -> [return: bb21, unwind: bb157];
    }

    bb21: {
        _46 = StyledObject::<&str>::red(move _47) -> [return: bb22, unwind: bb157];
    }

    bb22: {
        _45 = &_46;
        _44 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_45) -> [return: bb23, unwind: bb140];
    }

    bb23: {
        _232 = const false;
        _52 = move _26;
        _51 = style::<std::string::String>(move _52) -> [return: bb24, unwind: bb140];
    }

    bb24: {
        _50 = StyledObject::<std::string::String>::red(move _51) -> [return: bb25, unwind: bb140];
    }

    bb25: {
        _49 = &_50;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_49) -> [return: bb26, unwind: bb139];
    }

    bb26: {
        _43 = [move _44, move _48];
        _42 = &_43;
        _41 = _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _39 = Arguments::<'_>::new_v1(move _40, move _41) -> [return: bb27, unwind: bb139];
    }

    bb27: {
        _38 = _print(move _39) -> [return: bb28, unwind: bb139];
    }

    bb28: {
        drop(_50) -> [return: bb29, unwind: bb140];
    }

    bb29: {
        drop(_46) -> [return: bb41, unwind: bb157];
    }

    bb30: {
        drop(_37) -> [return: bb31, unwind: bb157];
    }

    bb31: {
        _215 = const _;
        _55 = _215 as &[&str] (PointerCoercion(Unsize));
        _64 = const "⚠\u{fe0f} ";
        _65 = const "!";
        _63 = Emoji::<'_, '_>(_64, _65);
        _62 = style::<Emoji<'_, '_>>(move _63) -> [return: bb32, unwind: bb157];
    }

    bb32: {
        _61 = StyledObject::<Emoji<'_, '_>>::red(move _62) -> [return: bb33, unwind: bb157];
    }

    bb33: {
        _60 = &_61;
        _59 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<Emoji<'_, '_>>>(_60) -> [return: bb34, unwind: bb138];
    }

    bb34: {
        _232 = const false;
        _70 = move _26;
        _69 = style::<std::string::String>(move _70) -> [return: bb35, unwind: bb138];
    }

    bb35: {
        _68 = StyledObject::<std::string::String>::red(move _69) -> [return: bb36, unwind: bb138];
    }

    bb36: {
        _67 = &_68;
        _66 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_67) -> [return: bb37, unwind: bb137];
    }

    bb37: {
        _58 = [move _59, move _66];
        _57 = &_58;
        _56 = _57 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _54 = Arguments::<'_>::new_v1(move _55, move _56) -> [return: bb38, unwind: bb137];
    }

    bb38: {
        _53 = _print(move _54) -> [return: bb39, unwind: bb137];
    }

    bb39: {
        drop(_68) -> [return: bb40, unwind: bb138];
    }

    bb40: {
        drop(_61) -> [return: bb41, unwind: bb157];
    }

    bb41: {
        _232 = const false;
        _213 = const _;
        _73 = _213 as &[&str] (PointerCoercion(Unsize));
        _78 = &(_23.1: std::string::String);
        _77 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_78) -> [return: bb42, unwind: bb142];
    }

    bb42: {
        _76 = [move _77];
        _75 = &_76;
        _74 = _75 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _72 = Arguments::<'_>::new_v1(move _73, move _74) -> [return: bb43, unwind: bb142];
    }

    bb43: {
        _71 = _print(move _72) -> [return: bb44, unwind: bb142];
    }

    bb44: {
        _0 = Result::<(), ()>::Err(const ());
        drop(_23) -> [return: bb121, unwind: bb144];
    }

    bb45: {
        _89 = [move _90];
        _88 = &_89;
        _87 = _88 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _85 = Arguments::<'_>::new_v1(move _86, move _87) -> [return: bb46, unwind: bb136];
    }

    bb46: {
        _84 = format(move _85) -> [return: bb47, unwind: bb136];
    }

    bb47: {
        _83 = move _84;
        _82 = &_83;
        _81 = std::string::String::as_str(move _82) -> [return: bb48, unwind: bb135];
    }

    bb48: {
        _79 = ProgressBar::set_message(move _80, _81) -> [return: bb49, unwind: bb135];
    }

    bb49: {
        drop(_83) -> [return: bb50, unwind: bb136];
    }

    bb50: {
        _93 = &_20;
        _92 = CompiledExercise::<'_>::run(move _93) -> [return: bb51, unwind: bb136];
    }

    bb51: {
        _230 = const true;
        _231 = const true;
        _95 = &_2;
        _94 = ProgressBar::finish_and_clear(move _95) -> [return: bb52, unwind: bb155];
    }

    bb52: {
        _96 = discriminant(_92);
        switchInt(move _96) -> [0: bb54, 1: bb53, otherwise: bb11];
    }

    bb53: {
        _231 = const false;
        _151 = move ((_92 as Err).0: exercise::ExerciseOutput);
        _221 = const _;
        _154 = _221 as &[&str] (PointerCoercion(Unsize));
        _159 = &(_151.0: std::string::String);
        _158 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_159) -> [return: bb86, unwind: bb128];
    }

    bb54: {
        _230 = const false;
        _97 = move ((_92 as Ok).0: exercise::ExerciseOutput);
        _225 = const _;
        _100 = _225 as &[&str] (PointerCoercion(Unsize));
        _105 = &(_97.0: std::string::String);
        _104 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_105) -> [return: bb55, unwind: bb134];
    }

    bb55: {
        _103 = [move _104];
        _102 = &_103;
        _101 = _102 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _99 = Arguments::<'_>::new_v1(move _100, move _101) -> [return: bb56, unwind: bb134];
    }

    bb56: {
        _98 = _print(move _99) -> [return: bb57, unwind: bb134];
    }

    bb57: {
        _224 = const _;
        _109 = _224 as &[&str] (PointerCoercion(Unsize));
        _114 = &_1;
        _113 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_114) -> [return: bb58, unwind: bb134];
    }

    bb58: {
        _112 = [move _113];
        _111 = &_112;
        _110 = _111 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _108 = Arguments::<'_>::new_v1(move _109, move _110) -> [return: bb59, unwind: bb134];
    }

    bb59: {
        _107 = format(move _108) -> [return: bb60, unwind: bb134];
    }

    bb60: {
        _229 = const true;
        _106 = move _107;
        _117 = var::<&str>(const "NO_EMOJI") -> [return: bb61, unwind: bb150];
    }

    bb61: {
        _116 = &_117;
        _115 = Result::<std::string::String, VarError>::is_ok(move _116) -> [return: bb62, unwind: bb133];
    }

    bb62: {
        switchInt(move _115) -> [0: bb74, otherwise: bb63];
    }

    bb63: {
        drop(_117) -> [return: bb64, unwind: bb150];
    }

    bb64: {
        _222 = const _;
        _120 = _222 as &[&str] (PointerCoercion(Unsize));
        _127 = style::<&str>(const "✓") -> [return: bb65, unwind: bb150];
    }

    bb65: {
        _126 = StyledObject::<&str>::green(move _127) -> [return: bb66, unwind: bb150];
    }

    bb66: {
        _125 = &_126;
        _124 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_125) -> [return: bb67, unwind: bb132];
    }

    bb67: {
        _229 = const false;
        _132 = move _106;
        _131 = style::<std::string::String>(move _132) -> [return: bb68, unwind: bb132];
    }

    bb68: {
        _130 = StyledObject::<std::string::String>::green(move _131) -> [return: bb69, unwind: bb132];
    }

    bb69: {
        _129 = &_130;
        _128 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_129) -> [return: bb70, unwind: bb131];
    }

    bb70: {
        _123 = [move _124, move _128];
        _122 = &_123;
        _121 = _122 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _119 = Arguments::<'_>::new_v1(move _120, move _121) -> [return: bb71, unwind: bb131];
    }

    bb71: {
        _118 = _print(move _119) -> [return: bb72, unwind: bb131];
    }

    bb72: {
        drop(_130) -> [return: bb73, unwind: bb132];
    }

    bb73: {
        drop(_126) -> [return: bb85, unwind: bb150];
    }

    bb74: {
        drop(_117) -> [return: bb75, unwind: bb150];
    }

    bb75: {
        _223 = const _;
        _135 = _223 as &[&str] (PointerCoercion(Unsize));
        _144 = const "✅";
        _145 = const "✓";
        _143 = Emoji::<'_, '_>(_144, _145);
        _142 = style::<Emoji<'_, '_>>(move _143) -> [return: bb76, unwind: bb150];
    }

    bb76: {
        _141 = StyledObject::<Emoji<'_, '_>>::green(move _142) -> [return: bb77, unwind: bb150];
    }

    bb77: {
        _140 = &_141;
        _139 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<Emoji<'_, '_>>>(_140) -> [return: bb78, unwind: bb130];
    }

    bb78: {
        _229 = const false;
        _150 = move _106;
        _149 = style::<std::string::String>(move _150) -> [return: bb79, unwind: bb130];
    }

    bb79: {
        _148 = StyledObject::<std::string::String>::green(move _149) -> [return: bb80, unwind: bb130];
    }

    bb80: {
        _147 = &_148;
        _146 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_147) -> [return: bb81, unwind: bb129];
    }

    bb81: {
        _138 = [move _139, move _146];
        _137 = &_138;
        _136 = _137 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _134 = Arguments::<'_>::new_v1(move _135, move _136) -> [return: bb82, unwind: bb129];
    }

    bb82: {
        _133 = _print(move _134) -> [return: bb83, unwind: bb129];
    }

    bb83: {
        drop(_148) -> [return: bb84, unwind: bb130];
    }

    bb84: {
        drop(_141) -> [return: bb85, unwind: bb150];
    }

    bb85: {
        _229 = const false;
        _0 = Result::<(), ()>::Ok(const ());
        drop(_97) -> [return: bb146, unwind: bb155];
    }

    bb86: {
        _157 = [move _158];
        _156 = &_157;
        _155 = _156 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _153 = Arguments::<'_>::new_v1(move _154, move _155) -> [return: bb87, unwind: bb128];
    }

    bb87: {
        _152 = _print(move _153) -> [return: bb88, unwind: bb128];
    }

    bb88: {
        _220 = const _;
        _162 = _220 as &[&str] (PointerCoercion(Unsize));
        _167 = &(_151.1: std::string::String);
        _166 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_167) -> [return: bb89, unwind: bb128];
    }

    bb89: {
        _165 = [move _166];
        _164 = &_165;
        _163 = _164 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _161 = Arguments::<'_>::new_v1(move _162, move _163) -> [return: bb90, unwind: bb128];
    }

    bb90: {
        _160 = _print(move _161) -> [return: bb91, unwind: bb128];
    }

    bb91: {
        _219 = const _;
        _171 = _219 as &[&str] (PointerCoercion(Unsize));
        _176 = &_1;
        _175 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_176) -> [return: bb92, unwind: bb128];
    }

    bb92: {
        _174 = [move _175];
        _173 = &_174;
        _172 = _173 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _170 = Arguments::<'_>::new_v1(move _171, move _172) -> [return: bb93, unwind: bb128];
    }

    bb93: {
        _169 = format(move _170) -> [return: bb94, unwind: bb128];
    }

    bb94: {
        _228 = const true;
        _168 = move _169;
        _179 = var::<&str>(const "NO_EMOJI") -> [return: bb95, unwind: bb148];
    }

    bb95: {
        _178 = &_179;
        _177 = Result::<std::string::String, VarError>::is_ok(move _178) -> [return: bb96, unwind: bb127];
    }

    bb96: {
        switchInt(move _177) -> [0: bb108, otherwise: bb97];
    }

    bb97: {
        drop(_179) -> [return: bb98, unwind: bb148];
    }

    bb98: {
        _217 = const _;
        _182 = _217 as &[&str] (PointerCoercion(Unsize));
        _189 = style::<&str>(const "!") -> [return: bb99, unwind: bb148];
    }

    bb99: {
        _188 = StyledObject::<&str>::red(move _189) -> [return: bb100, unwind: bb148];
    }

    bb100: {
        _187 = &_188;
        _186 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_187) -> [return: bb101, unwind: bb126];
    }

    bb101: {
        _228 = const false;
        _194 = move _168;
        _193 = style::<std::string::String>(move _194) -> [return: bb102, unwind: bb126];
    }

    bb102: {
        _192 = StyledObject::<std::string::String>::red(move _193) -> [return: bb103, unwind: bb126];
    }

    bb103: {
        _191 = &_192;
        _190 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_191) -> [return: bb104, unwind: bb125];
    }

    bb104: {
        _185 = [move _186, move _190];
        _184 = &_185;
        _183 = _184 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _181 = Arguments::<'_>::new_v1(move _182, move _183) -> [return: bb105, unwind: bb125];
    }

    bb105: {
        _180 = _print(move _181) -> [return: bb106, unwind: bb125];
    }

    bb106: {
        drop(_192) -> [return: bb107, unwind: bb126];
    }

    bb107: {
        drop(_188) -> [return: bb119, unwind: bb148];
    }

    bb108: {
        drop(_179) -> [return: bb109, unwind: bb148];
    }

    bb109: {
        _218 = const _;
        _197 = _218 as &[&str] (PointerCoercion(Unsize));
        _206 = const "⚠\u{fe0f} ";
        _207 = const "!";
        _205 = Emoji::<'_, '_>(_206, _207);
        _204 = style::<Emoji<'_, '_>>(move _205) -> [return: bb110, unwind: bb148];
    }

    bb110: {
        _203 = StyledObject::<Emoji<'_, '_>>::red(move _204) -> [return: bb111, unwind: bb148];
    }

    bb111: {
        _202 = &_203;
        _201 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<Emoji<'_, '_>>>(_202) -> [return: bb112, unwind: bb124];
    }

    bb112: {
        _228 = const false;
        _212 = move _168;
        _211 = style::<std::string::String>(move _212) -> [return: bb113, unwind: bb124];
    }

    bb113: {
        _210 = StyledObject::<std::string::String>::red(move _211) -> [return: bb114, unwind: bb124];
    }

    bb114: {
        _209 = &_210;
        _208 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_209) -> [return: bb115, unwind: bb123];
    }

    bb115: {
        _200 = [move _201, move _208];
        _199 = &_200;
        _198 = _199 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _196 = Arguments::<'_>::new_v1(move _197, move _198) -> [return: bb116, unwind: bb123];
    }

    bb116: {
        _195 = _print(move _196) -> [return: bb117, unwind: bb123];
    }

    bb117: {
        drop(_210) -> [return: bb118, unwind: bb124];
    }

    bb118: {
        drop(_203) -> [return: bb119, unwind: bb148];
    }

    bb119: {
        _228 = const false;
        _0 = Result::<(), ()>::Err(const ());
        drop(_151) -> [return: bb146, unwind: bb155];
    }

    bb120: {
        drop(_2) -> [return: bb122, unwind continue];
    }

    bb121: {
        drop(_2) -> [return: bb122, unwind continue];
    }

    bb122: {
        return;
    }

    bb123 (cleanup): {
        drop(_210) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop(_203) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_192) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_188) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        drop(_179) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        drop(_151) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop(_148) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop(_141) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        drop(_130) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        drop(_126) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        drop(_117) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        drop(_97) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        drop(_83) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        drop(_20) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        drop(_68) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_61) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        drop(_50) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_46) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        drop(_37) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_23) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_7) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_2) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        resume;
    }

    bb146: {
        _230 = const false;
        _231 = const false;
        drop(_20) -> [return: bb120, unwind: bb144];
    }

    bb147 (cleanup): {
        drop(_168) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        switchInt(_228) -> [0: bb128, otherwise: bb147];
    }

    bb149 (cleanup): {
        drop(_106) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        switchInt(_229) -> [0: bb134, otherwise: bb149];
    }

    bb151 (cleanup): {
        switchInt(_230) -> [0: bb136, otherwise: bb152];
    }

    bb152 (cleanup): {
        drop(((_92 as Ok).0: exercise::ExerciseOutput)) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        switchInt(_231) -> [0: bb136, otherwise: bb154];
    }

    bb154 (cleanup): {
        drop(((_92 as Err).0: exercise::ExerciseOutput)) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        _233 = discriminant(_92);
        switchInt(move _233) -> [0: bb151, otherwise: bb153];
    }

    bb156 (cleanup): {
        drop(_26) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        switchInt(_232) -> [0: bb142, otherwise: bb156];
    }
}

promoted[0] in compile_and_run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in compile_and_run: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in compile_and_run: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in compile_and_run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Compilation of ", const " failed!, Compiler error message:\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in compile_and_run: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in compile_and_run: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in compile_and_run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Ran ", const " with errors"];
        _0 = &_1;
        return;
    }
}

promoted[7] in compile_and_run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in compile_and_run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[9] in compile_and_run: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[10] in compile_and_run: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[11] in compile_and_run: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Successfully ran "];
        _0 = &_1;
        return;
    }
}

promoted[12] in compile_and_run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[13] in compile_and_run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Running ", const "..."];
        _0 = &_1;
        return;
    }
}

promoted[14] in compile_and_run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Compiling ", const "..."];
        _0 = &_1;
        return;
    }
}

fn verify(_1: impl IntoIterator<Item = &'a Exercise>, _2: bool) -> Result<(), &Exercise> {
    debug start_at => _1;
    debug verbose => _2;
    let mut _0: std::result::Result<(), &exercise::Exercise>;
    let mut _3: <impl IntoIterator<Item = &'a Exercise> as std::iter::IntoIterator>::IntoIter;
    let mut _4: <impl IntoIterator<Item = &'a Exercise> as std::iter::IntoIterator>::IntoIter;
    let mut _5: std::option::Option<&exercise::Exercise>;
    let mut _6: &mut <impl IntoIterator<Item = &'a Exercise> as std::iter::IntoIterator>::IntoIter;
    let mut _7: isize;
    let mut _10: isize;
    let mut _11: verify::RunMode;
    let mut _12: bool;
    let mut _13: std::result::Result<bool, ()>;
    scope 1 {
        debug iter => _4;
        let _8: &exercise::Exercise;
        scope 2 {
            debug exercise => _8;
            let _9: std::result::Result<bool, ()>;
            scope 3 {
                debug compile_result => _9;
            }
        }
    }

    bb0: {
        _3 = <impl IntoIterator<Item = &'a Exercise> as IntoIterator>::into_iter(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _3;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <<impl IntoIterator<Item = &'a Exercise> as IntoIterator>::IntoIter as Iterator>::next(_6) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = ((_5 as Some).0: &exercise::Exercise);
        _10 = discriminant(((*_8).2: exercise::Mode));
        switchInt(move _10) -> [0: bb9, 1: bb8, 2: bb7, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        drop(_4) -> [return: bb13, unwind continue];
    }

    bb7: {
        _9 = compile_only(_8) -> [return: bb17, unwind: bb15];
    }

    bb8: {
        _11 = RunMode::Interactive;
        _9 = compile_and_test(_8, move _11, _2) -> [return: bb18, unwind: bb15];
    }

    bb9: {
        _9 = compile_and_run_interactively(_8) -> [return: bb19, unwind: bb15];
    }

    bb10: {
        _13 = _9;
        _12 = Result::<bool, ()>::unwrap_or(move _13, const false) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        switchInt(move _12) -> [0: bb12, otherwise: bb2];
    }

    bb12: {
        _0 = Result::<(), &Exercise>::Err(_8);
        drop(_4) -> [return: bb14, unwind continue];
    }

    bb13: {
        _0 = Result::<(), &Exercise>::Ok(const ());
        goto -> bb14;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_4) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        goto -> bb10;
    }

    bb18: {
        goto -> bb10;
    }

    bb19: {
        goto -> bb10;
    }
}

fn test(_1: &Exercise, _2: bool) -> Result<(), ()> {
    debug exercise => _1;
    debug verbose => _2;
    let mut _0: std::result::Result<(), ()>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, bool>;
    let mut _4: std::result::Result<bool, ()>;
    let mut _5: verify::RunMode;
    let mut _6: isize;
    let _7: bool;
    scope 1 {
        debug residual => const Result::<Infallible, ()>::Err(());
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _5 = RunMode::NonInteractive;
        _4 = compile_and_test(_1, move _5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<bool, ()> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: bool);
        _0 = Result::<(), ()>::Ok(const ());
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn compile_only(_1: &Exercise) -> Result<bool, ()> {
    debug exercise => _1;
    let mut _0: std::result::Result<bool, ()>;
    let _2: indicatif::ProgressBar;
    let _3: ();
    let mut _4: &indicatif::ProgressBar;
    let _5: &str;
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &&exercise::Exercise;
    let _16: ();
    let mut _17: &indicatif::ProgressBar;
    let mut _18: exercise::CompiledExercise<'_>;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, exercise::CompiledExercise<'_>>;
    let mut _20: std::result::Result<exercise::CompiledExercise<'_>, ()>;
    let mut _21: &exercise::Exercise;
    let _22: &indicatif::ProgressBar;
    let mut _23: isize;
    let _25: ();
    let mut _26: &indicatif::ProgressBar;
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: [core::fmt::rt::Argument<'_>; 1];
    let mut _34: core::fmt::rt::Argument<'_>;
    let _35: &&exercise::Exercise;
    let mut _36: bool;
    let mut _37: &std::result::Result<std::string::String, std::env::VarError>;
    let _38: std::result::Result<std::string::String, std::env::VarError>;
    let _39: ();
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let _43: &[core::fmt::rt::Argument<'_>; 2];
    let _44: [core::fmt::rt::Argument<'_>; 2];
    let mut _45: core::fmt::rt::Argument<'_>;
    let _46: &console::StyledObject<&str>;
    let _47: console::StyledObject<&str>;
    let mut _48: console::StyledObject<&str>;
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &console::StyledObject<std::string::String>;
    let _51: console::StyledObject<std::string::String>;
    let mut _52: console::StyledObject<std::string::String>;
    let mut _53: std::string::String;
    let _54: ();
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 2];
    let _59: [core::fmt::rt::Argument<'_>; 2];
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &console::StyledObject<console::Emoji<'_, '_>>;
    let _62: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _63: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _64: console::Emoji<'_, '_>;
    let _65: &str;
    let _66: &str;
    let mut _67: core::fmt::rt::Argument<'_>;
    let _68: &console::StyledObject<std::string::String>;
    let _69: console::StyledObject<std::string::String>;
    let mut _70: console::StyledObject<std::string::String>;
    let mut _71: std::string::String;
    let mut _72: bool;
    let mut _73: &exercise::Exercise;
    let mut _74: std::option::Option<std::string::String>;
    let mut _79: bool;
    scope 1 {
        debug progress_bar => _2;
        let _8: std::string::String;
        let _24: exercise::CompiledExercise<'_>;
        let mut _78: &[&str; 2];
        scope 2 {
            debug res => _8;
        }
        scope 3 {
            let _27: std::string::String;
            let _28: std::string::String;
            let mut _77: &[&str; 2];
            scope 8 {
                debug formatstr => _27;
                let mut _75: &[&str; 3];
                let mut _76: &[&str; 3];
            }
            scope 9 {
                debug res => _28;
            }
        }
        scope 4 {
            debug residual => const Result::<Infallible, ()>::Err(());
            scope 5 {
            }
        }
        scope 6 {
            debug val => _24;
            scope 7 {
            }
        }
    }

    bb0: {
        _79 = const false;
        _2 = ProgressBar::new_spinner() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_2;
        _78 = const _;
        _10 = _78 as &[&str] (PointerCoercion(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_15) -> [return: bb2, unwind: bb53];
    }

    bb2: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb3, unwind: bb53];
    }

    bb3: {
        _8 = format(move _9) -> [return: bb4, unwind: bb53];
    }

    bb4: {
        _7 = move _8;
        _6 = &_7;
        _5 = std::string::String::as_str(move _6) -> [return: bb5, unwind: bb52];
    }

    bb5: {
        _3 = ProgressBar::set_message(move _4, _5) -> [return: bb6, unwind: bb52];
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb53];
    }

    bb7: {
        _17 = &_2;
        _16 = ProgressBar::enable_steady_tick(move _17, const 100_u64) -> [return: bb8, unwind: bb53];
    }

    bb8: {
        _21 = _1;
        _22 = &_2;
        _20 = compile(move _21, _22) -> [return: bb9, unwind: bb53];
    }

    bb9: {
        _19 = <Result<CompiledExercise<'_>, ()> as Try>::branch(move _20) -> [return: bb10, unwind: bb53];
    }

    bb10: {
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        _24 = move ((_19 as Continue).0: exercise::CompiledExercise<'_>);
        _18 = move _24;
        drop(_18) -> [return: bb15, unwind: bb53];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _0 = <Result<bool, ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb14, unwind: bb53];
    }

    bb14: {
        drop(_2) -> [return: bb46, unwind continue];
    }

    bb15: {
        _26 = &_2;
        _25 = ProgressBar::finish_and_clear(move _26) -> [return: bb16, unwind: bb53];
    }

    bb16: {
        _77 = const _;
        _30 = _77 as &[&str] (PointerCoercion(Unsize));
        _35 = &_1;
        _34 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_35) -> [return: bb17, unwind: bb53];
    }

    bb17: {
        _33 = [move _34];
        _32 = &_33;
        _31 = _32 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _29 = Arguments::<'_>::new_v1(move _30, move _31) -> [return: bb18, unwind: bb53];
    }

    bb18: {
        _28 = format(move _29) -> [return: bb19, unwind: bb53];
    }

    bb19: {
        _79 = const true;
        _27 = move _28;
        _38 = var::<&str>(const "NO_EMOJI") -> [return: bb20, unwind: bb56];
    }

    bb20: {
        _37 = &_38;
        _36 = Result::<std::string::String, VarError>::is_ok(move _37) -> [return: bb21, unwind: bb51];
    }

    bb21: {
        switchInt(move _36) -> [0: bb33, otherwise: bb22];
    }

    bb22: {
        drop(_38) -> [return: bb23, unwind: bb56];
    }

    bb23: {
        _75 = const _;
        _41 = _75 as &[&str] (PointerCoercion(Unsize));
        _48 = style::<&str>(const "✓") -> [return: bb24, unwind: bb56];
    }

    bb24: {
        _47 = StyledObject::<&str>::green(move _48) -> [return: bb25, unwind: bb56];
    }

    bb25: {
        _46 = &_47;
        _45 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_46) -> [return: bb26, unwind: bb50];
    }

    bb26: {
        _79 = const false;
        _53 = move _27;
        _52 = style::<std::string::String>(move _53) -> [return: bb27, unwind: bb50];
    }

    bb27: {
        _51 = StyledObject::<std::string::String>::green(move _52) -> [return: bb28, unwind: bb50];
    }

    bb28: {
        _50 = &_51;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_50) -> [return: bb29, unwind: bb49];
    }

    bb29: {
        _44 = [move _45, move _49];
        _43 = &_44;
        _42 = _43 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> [return: bb30, unwind: bb49];
    }

    bb30: {
        _39 = _print(move _40) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        drop(_51) -> [return: bb32, unwind: bb50];
    }

    bb32: {
        drop(_47) -> [return: bb44, unwind: bb56];
    }

    bb33: {
        drop(_38) -> [return: bb34, unwind: bb56];
    }

    bb34: {
        _76 = const _;
        _56 = _76 as &[&str] (PointerCoercion(Unsize));
        _65 = const "✅";
        _66 = const "✓";
        _64 = Emoji::<'_, '_>(_65, _66);
        _63 = style::<Emoji<'_, '_>>(move _64) -> [return: bb35, unwind: bb56];
    }

    bb35: {
        _62 = StyledObject::<Emoji<'_, '_>>::green(move _63) -> [return: bb36, unwind: bb56];
    }

    bb36: {
        _61 = &_62;
        _60 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<Emoji<'_, '_>>>(_61) -> [return: bb37, unwind: bb48];
    }

    bb37: {
        _79 = const false;
        _71 = move _27;
        _70 = style::<std::string::String>(move _71) -> [return: bb38, unwind: bb48];
    }

    bb38: {
        _69 = StyledObject::<std::string::String>::green(move _70) -> [return: bb39, unwind: bb48];
    }

    bb39: {
        _68 = &_69;
        _67 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_68) -> [return: bb40, unwind: bb47];
    }

    bb40: {
        _59 = [move _60, move _67];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _55 = Arguments::<'_>::new_v1(move _56, move _57) -> [return: bb41, unwind: bb47];
    }

    bb41: {
        _54 = _print(move _55) -> [return: bb42, unwind: bb47];
    }

    bb42: {
        drop(_69) -> [return: bb43, unwind: bb48];
    }

    bb43: {
        drop(_62) -> [return: bb44, unwind: bb56];
    }

    bb44: {
        _79 = const false;
        _73 = _1;
        _74 = std::option::Option::<std::string::String>::None;
        _72 = prompt_for_completion(move _73, move _74) -> [return: bb45, unwind: bb53];
    }

    bb45: {
        _0 = Result::<bool, ()>::Ok(move _72);
        drop(_2) -> [return: bb46, unwind continue];
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_69) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_62) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_51) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_47) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_38) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_7) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_2) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        resume;
    }

    bb55 (cleanup): {
        drop(_27) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_79) -> [0: bb53, otherwise: bb55];
    }
}

promoted[0] in compile_only: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in compile_only: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in compile_only: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Successfully compiled ", const "!"];
        _0 = &_1;
        return;
    }
}

promoted[3] in compile_only: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Compiling ", const "..."];
        _0 = &_1;
        return;
    }
}

fn compile_and_run_interactively(_1: &Exercise) -> Result<bool, ()> {
    debug exercise => _1;
    let mut _0: std::result::Result<bool, ()>;
    let _2: indicatif::ProgressBar;
    let _3: ();
    let mut _4: &indicatif::ProgressBar;
    let _5: &str;
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &&exercise::Exercise;
    let _16: ();
    let mut _17: &indicatif::ProgressBar;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, exercise::CompiledExercise<'_>>;
    let mut _20: std::result::Result<exercise::CompiledExercise<'_>, ()>;
    let mut _21: &exercise::Exercise;
    let _22: &indicatif::ProgressBar;
    let mut _23: isize;
    let _25: ();
    let mut _26: &indicatif::ProgressBar;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: std::string::String;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[core::fmt::rt::Argument<'_>];
    let _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: [core::fmt::rt::Argument<'_>; 1];
    let mut _36: core::fmt::rt::Argument<'_>;
    let _37: &&exercise::Exercise;
    let mut _39: &exercise::CompiledExercise<'_>;
    let _40: ();
    let mut _41: &indicatif::ProgressBar;
    let mut _43: isize;
    let mut _48: std::fmt::Arguments<'_>;
    let mut _49: &[&str];
    let mut _50: &[core::fmt::rt::Argument<'_>];
    let _51: &[core::fmt::rt::Argument<'_>; 1];
    let _52: [core::fmt::rt::Argument<'_>; 1];
    let mut _53: core::fmt::rt::Argument<'_>;
    let _54: &&exercise::Exercise;
    let mut _55: bool;
    let mut _56: &std::result::Result<std::string::String, std::env::VarError>;
    let _57: std::result::Result<std::string::String, std::env::VarError>;
    let _58: ();
    let mut _59: std::fmt::Arguments<'_>;
    let mut _60: &[&str];
    let mut _61: &[core::fmt::rt::Argument<'_>];
    let _62: &[core::fmt::rt::Argument<'_>; 2];
    let _63: [core::fmt::rt::Argument<'_>; 2];
    let mut _64: core::fmt::rt::Argument<'_>;
    let _65: &console::StyledObject<&str>;
    let _66: console::StyledObject<&str>;
    let mut _67: console::StyledObject<&str>;
    let mut _68: core::fmt::rt::Argument<'_>;
    let _69: &console::StyledObject<std::string::String>;
    let _70: console::StyledObject<std::string::String>;
    let mut _71: console::StyledObject<std::string::String>;
    let mut _72: std::string::String;
    let _73: ();
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[core::fmt::rt::Argument<'_>];
    let _77: &[core::fmt::rt::Argument<'_>; 2];
    let _78: [core::fmt::rt::Argument<'_>; 2];
    let mut _79: core::fmt::rt::Argument<'_>;
    let _80: &console::StyledObject<console::Emoji<'_, '_>>;
    let _81: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _82: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _83: console::Emoji<'_, '_>;
    let _84: &str;
    let _85: &str;
    let mut _86: core::fmt::rt::Argument<'_>;
    let _87: &console::StyledObject<std::string::String>;
    let _88: console::StyledObject<std::string::String>;
    let mut _89: console::StyledObject<std::string::String>;
    let mut _90: std::string::String;
    let _91: ();
    let mut _92: std::fmt::Arguments<'_>;
    let mut _93: &[&str];
    let mut _94: &[core::fmt::rt::Argument<'_>];
    let _95: &[core::fmt::rt::Argument<'_>; 1];
    let _96: [core::fmt::rt::Argument<'_>; 1];
    let mut _97: core::fmt::rt::Argument<'_>;
    let _98: &std::string::String;
    let _99: ();
    let mut _100: std::fmt::Arguments<'_>;
    let mut _101: &[&str];
    let mut _102: &[core::fmt::rt::Argument<'_>];
    let _103: &[core::fmt::rt::Argument<'_>; 1];
    let _104: [core::fmt::rt::Argument<'_>; 1];
    let mut _105: core::fmt::rt::Argument<'_>;
    let _106: &std::string::String;
    let mut _109: std::fmt::Arguments<'_>;
    let mut _110: &[&str];
    let mut _111: &[core::fmt::rt::Argument<'_>];
    let _112: &[core::fmt::rt::Argument<'_>; 1];
    let _113: [core::fmt::rt::Argument<'_>; 1];
    let mut _114: core::fmt::rt::Argument<'_>;
    let _115: &&exercise::Exercise;
    let mut _116: bool;
    let mut _117: &std::result::Result<std::string::String, std::env::VarError>;
    let _118: std::result::Result<std::string::String, std::env::VarError>;
    let _119: ();
    let mut _120: std::fmt::Arguments<'_>;
    let mut _121: &[&str];
    let mut _122: &[core::fmt::rt::Argument<'_>];
    let _123: &[core::fmt::rt::Argument<'_>; 2];
    let _124: [core::fmt::rt::Argument<'_>; 2];
    let mut _125: core::fmt::rt::Argument<'_>;
    let _126: &console::StyledObject<&str>;
    let _127: console::StyledObject<&str>;
    let mut _128: console::StyledObject<&str>;
    let mut _129: core::fmt::rt::Argument<'_>;
    let _130: &console::StyledObject<std::string::String>;
    let _131: console::StyledObject<std::string::String>;
    let mut _132: console::StyledObject<std::string::String>;
    let mut _133: std::string::String;
    let _134: ();
    let mut _135: std::fmt::Arguments<'_>;
    let mut _136: &[&str];
    let mut _137: &[core::fmt::rt::Argument<'_>];
    let _138: &[core::fmt::rt::Argument<'_>; 2];
    let _139: [core::fmt::rt::Argument<'_>; 2];
    let mut _140: core::fmt::rt::Argument<'_>;
    let _141: &console::StyledObject<console::Emoji<'_, '_>>;
    let _142: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _143: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _144: console::Emoji<'_, '_>;
    let _145: &str;
    let _146: &str;
    let mut _147: core::fmt::rt::Argument<'_>;
    let _148: &console::StyledObject<std::string::String>;
    let _149: console::StyledObject<std::string::String>;
    let mut _150: console::StyledObject<std::string::String>;
    let mut _151: std::string::String;
    let mut _152: bool;
    let mut _153: &exercise::Exercise;
    let mut _154: std::option::Option<std::string::String>;
    let mut _155: std::string::String;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: bool;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: isize;
    scope 1 {
        debug progress_bar => _2;
        let _8: std::string::String;
        let _18: exercise::CompiledExercise<'_>;
        let _24: exercise::CompiledExercise<'_>;
        let mut _165: &[&str; 2];
        scope 2 {
            debug res => _8;
        }
        scope 3 {
            debug compilation => _18;
            let _30: std::string::String;
            let _38: std::result::Result<exercise::ExerciseOutput, exercise::ExerciseOutput>;
            let mut _164: &[&str; 2];
            scope 8 {
                debug res => _30;
            }
            scope 9 {
                debug result => _38;
                let _42: exercise::ExerciseOutput;
                let _44: exercise::ExerciseOutput;
                let _45: exercise::ExerciseOutput;
                scope 10 {
                    debug output => _42;
                    let _107: std::string::String;
                    let _108: std::string::String;
                    let mut _163: &[&str; 2];
                    scope 15 {
                        debug formatstr => _107;
                        let mut _161: &[&str; 3];
                        let mut _162: &[&str; 3];
                    }
                    scope 16 {
                        debug res => _108;
                    }
                }
                scope 11 {
                    debug output => _44;
                }
                scope 12 {
                    debug output => _45;
                    let _46: std::string::String;
                    let _47: std::string::String;
                    let mut _156: &[&str; 2];
                    let mut _157: &[&str; 2];
                    let mut _160: &[&str; 2];
                    scope 13 {
                        debug formatstr => _46;
                        let mut _158: &[&str; 3];
                        let mut _159: &[&str; 3];
                    }
                    scope 14 {
                        debug res => _47;
                    }
                }
            }
        }
        scope 4 {
            debug residual => const Result::<Infallible, ()>::Err(());
            scope 5 {
            }
        }
        scope 6 {
            debug val => _24;
            scope 7 {
            }
        }
    }

    bb0: {
        _168 = const false;
        _166 = const false;
        _170 = const false;
        _169 = const false;
        _167 = const false;
        _2 = ProgressBar::new_spinner() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_2;
        _165 = const _;
        _10 = _165 as &[&str] (PointerCoercion(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_15) -> [return: bb2, unwind: bb105];
    }

    bb2: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb3, unwind: bb105];
    }

    bb3: {
        _8 = format(move _9) -> [return: bb4, unwind: bb105];
    }

    bb4: {
        _7 = move _8;
        _6 = &_7;
        _5 = std::string::String::as_str(move _6) -> [return: bb5, unwind: bb104];
    }

    bb5: {
        _3 = ProgressBar::set_message(move _4, _5) -> [return: bb6, unwind: bb104];
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb105];
    }

    bb7: {
        _17 = &_2;
        _16 = ProgressBar::enable_steady_tick(move _17, const 100_u64) -> [return: bb8, unwind: bb105];
    }

    bb8: {
        _21 = _1;
        _22 = &_2;
        _20 = compile(move _21, _22) -> [return: bb9, unwind: bb105];
    }

    bb9: {
        _19 = <Result<CompiledExercise<'_>, ()> as Try>::branch(move _20) -> [return: bb10, unwind: bb105];
    }

    bb10: {
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        _24 = move ((_19 as Continue).0: exercise::CompiledExercise<'_>);
        _18 = move _24;
        _26 = &_2;
        _164 = const _;
        _32 = _164 as &[&str] (PointerCoercion(Unsize));
        _37 = &_1;
        _36 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_37) -> [return: bb14, unwind: bb103];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _0 = <Result<bool, ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb120, unwind: bb105];
    }

    bb14: {
        _35 = [move _36];
        _34 = &_35;
        _33 = _34 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _31 = Arguments::<'_>::new_v1(move _32, move _33) -> [return: bb15, unwind: bb103];
    }

    bb15: {
        _30 = format(move _31) -> [return: bb16, unwind: bb103];
    }

    bb16: {
        _29 = move _30;
        _28 = &_29;
        _27 = std::string::String::as_str(move _28) -> [return: bb17, unwind: bb102];
    }

    bb17: {
        _25 = ProgressBar::set_message(move _26, _27) -> [return: bb18, unwind: bb102];
    }

    bb18: {
        drop(_29) -> [return: bb19, unwind: bb103];
    }

    bb19: {
        _39 = &_18;
        _38 = CompiledExercise::<'_>::run(move _39) -> [return: bb20, unwind: bb103];
    }

    bb20: {
        _169 = const true;
        _170 = const true;
        _41 = &_2;
        _40 = ProgressBar::finish_and_clear(move _41) -> [return: bb21, unwind: bb119];
    }

    bb21: {
        _43 = discriminant(_38);
        switchInt(move _43) -> [0: bb23, 1: bb22, otherwise: bb12];
    }

    bb22: {
        _170 = const false;
        _45 = move ((_38 as Err).0: exercise::ExerciseOutput);
        _160 = const _;
        _49 = _160 as &[&str] (PointerCoercion(Unsize));
        _54 = &_1;
        _53 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_54) -> [return: bb24, unwind: bb101];
    }

    bb23: {
        _169 = const false;
        _44 = move ((_38 as Ok).0: exercise::ExerciseOutput);
        _167 = const true;
        _42 = move _44;
        _163 = const _;
        _110 = _163 as &[&str] (PointerCoercion(Unsize));
        _115 = &_1;
        _114 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_115) -> [return: bb58, unwind: bb112];
    }

    bb24: {
        _52 = [move _53];
        _51 = &_52;
        _50 = _51 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _48 = Arguments::<'_>::new_v1(move _49, move _50) -> [return: bb25, unwind: bb101];
    }

    bb25: {
        _47 = format(move _48) -> [return: bb26, unwind: bb101];
    }

    bb26: {
        _168 = const true;
        _46 = move _47;
        _57 = var::<&str>(const "NO_EMOJI") -> [return: bb27, unwind: bb114];
    }

    bb27: {
        _56 = &_57;
        _55 = Result::<std::string::String, VarError>::is_ok(move _56) -> [return: bb28, unwind: bb100];
    }

    bb28: {
        switchInt(move _55) -> [0: bb40, otherwise: bb29];
    }

    bb29: {
        drop(_57) -> [return: bb30, unwind: bb114];
    }

    bb30: {
        _158 = const _;
        _60 = _158 as &[&str] (PointerCoercion(Unsize));
        _67 = style::<&str>(const "!") -> [return: bb31, unwind: bb114];
    }

    bb31: {
        _66 = StyledObject::<&str>::red(move _67) -> [return: bb32, unwind: bb114];
    }

    bb32: {
        _65 = &_66;
        _64 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_65) -> [return: bb33, unwind: bb99];
    }

    bb33: {
        _168 = const false;
        _72 = move _46;
        _71 = style::<std::string::String>(move _72) -> [return: bb34, unwind: bb99];
    }

    bb34: {
        _70 = StyledObject::<std::string::String>::red(move _71) -> [return: bb35, unwind: bb99];
    }

    bb35: {
        _69 = &_70;
        _68 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_69) -> [return: bb36, unwind: bb98];
    }

    bb36: {
        _63 = [move _64, move _68];
        _62 = &_63;
        _61 = _62 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _59 = Arguments::<'_>::new_v1(move _60, move _61) -> [return: bb37, unwind: bb98];
    }

    bb37: {
        _58 = _print(move _59) -> [return: bb38, unwind: bb98];
    }

    bb38: {
        drop(_70) -> [return: bb39, unwind: bb99];
    }

    bb39: {
        drop(_66) -> [return: bb51, unwind: bb114];
    }

    bb40: {
        drop(_57) -> [return: bb41, unwind: bb114];
    }

    bb41: {
        _159 = const _;
        _75 = _159 as &[&str] (PointerCoercion(Unsize));
        _84 = const "⚠\u{fe0f} ";
        _85 = const "!";
        _83 = Emoji::<'_, '_>(_84, _85);
        _82 = style::<Emoji<'_, '_>>(move _83) -> [return: bb42, unwind: bb114];
    }

    bb42: {
        _81 = StyledObject::<Emoji<'_, '_>>::red(move _82) -> [return: bb43, unwind: bb114];
    }

    bb43: {
        _80 = &_81;
        _79 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<Emoji<'_, '_>>>(_80) -> [return: bb44, unwind: bb97];
    }

    bb44: {
        _168 = const false;
        _90 = move _46;
        _89 = style::<std::string::String>(move _90) -> [return: bb45, unwind: bb97];
    }

    bb45: {
        _88 = StyledObject::<std::string::String>::red(move _89) -> [return: bb46, unwind: bb97];
    }

    bb46: {
        _87 = &_88;
        _86 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_87) -> [return: bb47, unwind: bb96];
    }

    bb47: {
        _78 = [move _79, move _86];
        _77 = &_78;
        _76 = _77 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _74 = Arguments::<'_>::new_v1(move _75, move _76) -> [return: bb48, unwind: bb96];
    }

    bb48: {
        _73 = _print(move _74) -> [return: bb49, unwind: bb96];
    }

    bb49: {
        drop(_88) -> [return: bb50, unwind: bb97];
    }

    bb50: {
        drop(_81) -> [return: bb51, unwind: bb114];
    }

    bb51: {
        _168 = const false;
        _157 = const _;
        _93 = _157 as &[&str] (PointerCoercion(Unsize));
        _98 = &(_45.0: std::string::String);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_98) -> [return: bb52, unwind: bb101];
    }

    bb52: {
        _96 = [move _97];
        _95 = &_96;
        _94 = _95 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _92 = Arguments::<'_>::new_v1(move _93, move _94) -> [return: bb53, unwind: bb101];
    }

    bb53: {
        _91 = _print(move _92) -> [return: bb54, unwind: bb101];
    }

    bb54: {
        _156 = const _;
        _101 = _156 as &[&str] (PointerCoercion(Unsize));
        _106 = &(_45.1: std::string::String);
        _105 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_106) -> [return: bb55, unwind: bb101];
    }

    bb55: {
        _104 = [move _105];
        _103 = &_104;
        _102 = _103 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _100 = Arguments::<'_>::new_v1(move _101, move _102) -> [return: bb56, unwind: bb101];
    }

    bb56: {
        _99 = _print(move _100) -> [return: bb57, unwind: bb101];
    }

    bb57: {
        _0 = Result::<bool, ()>::Err(const ());
        drop(_45) -> [return: bb88, unwind: bb119];
    }

    bb58: {
        _113 = [move _114];
        _112 = &_113;
        _111 = _112 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _109 = Arguments::<'_>::new_v1(move _110, move _111) -> [return: bb59, unwind: bb112];
    }

    bb59: {
        _108 = format(move _109) -> [return: bb60, unwind: bb112];
    }

    bb60: {
        _166 = const true;
        _107 = move _108;
        _118 = var::<&str>(const "NO_EMOJI") -> [return: bb61, unwind: bb109];
    }

    bb61: {
        _117 = &_118;
        _116 = Result::<std::string::String, VarError>::is_ok(move _117) -> [return: bb62, unwind: bb95];
    }

    bb62: {
        switchInt(move _116) -> [0: bb74, otherwise: bb63];
    }

    bb63: {
        drop(_118) -> [return: bb64, unwind: bb109];
    }

    bb64: {
        _161 = const _;
        _121 = _161 as &[&str] (PointerCoercion(Unsize));
        _128 = style::<&str>(const "✓") -> [return: bb65, unwind: bb109];
    }

    bb65: {
        _127 = StyledObject::<&str>::green(move _128) -> [return: bb66, unwind: bb109];
    }

    bb66: {
        _126 = &_127;
        _125 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_126) -> [return: bb67, unwind: bb94];
    }

    bb67: {
        _166 = const false;
        _133 = move _107;
        _132 = style::<std::string::String>(move _133) -> [return: bb68, unwind: bb94];
    }

    bb68: {
        _131 = StyledObject::<std::string::String>::green(move _132) -> [return: bb69, unwind: bb94];
    }

    bb69: {
        _130 = &_131;
        _129 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_130) -> [return: bb70, unwind: bb93];
    }

    bb70: {
        _124 = [move _125, move _129];
        _123 = &_124;
        _122 = _123 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _120 = Arguments::<'_>::new_v1(move _121, move _122) -> [return: bb71, unwind: bb93];
    }

    bb71: {
        _119 = _print(move _120) -> [return: bb72, unwind: bb93];
    }

    bb72: {
        drop(_131) -> [return: bb73, unwind: bb94];
    }

    bb73: {
        drop(_127) -> [return: bb85, unwind: bb109];
    }

    bb74: {
        drop(_118) -> [return: bb75, unwind: bb109];
    }

    bb75: {
        _162 = const _;
        _136 = _162 as &[&str] (PointerCoercion(Unsize));
        _145 = const "✅";
        _146 = const "✓";
        _144 = Emoji::<'_, '_>(_145, _146);
        _143 = style::<Emoji<'_, '_>>(move _144) -> [return: bb76, unwind: bb109];
    }

    bb76: {
        _142 = StyledObject::<Emoji<'_, '_>>::green(move _143) -> [return: bb77, unwind: bb109];
    }

    bb77: {
        _141 = &_142;
        _140 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<Emoji<'_, '_>>>(_141) -> [return: bb78, unwind: bb92];
    }

    bb78: {
        _166 = const false;
        _151 = move _107;
        _150 = style::<std::string::String>(move _151) -> [return: bb79, unwind: bb92];
    }

    bb79: {
        _149 = StyledObject::<std::string::String>::green(move _150) -> [return: bb80, unwind: bb92];
    }

    bb80: {
        _148 = &_149;
        _147 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_148) -> [return: bb81, unwind: bb91];
    }

    bb81: {
        _139 = [move _140, move _147];
        _138 = &_139;
        _137 = _138 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _135 = Arguments::<'_>::new_v1(move _136, move _137) -> [return: bb82, unwind: bb91];
    }

    bb82: {
        _134 = _print(move _135) -> [return: bb83, unwind: bb91];
    }

    bb83: {
        drop(_149) -> [return: bb84, unwind: bb92];
    }

    bb84: {
        drop(_142) -> [return: bb85, unwind: bb109];
    }

    bb85: {
        _166 = const false;
        _153 = _1;
        _167 = const false;
        _155 = move (_42.0: std::string::String);
        _154 = std::option::Option::<std::string::String>::Some(move _155);
        _152 = prompt_for_completion(move _153, move _154) -> [return: bb86, unwind: bb112];
    }

    bb86: {
        _0 = Result::<bool, ()>::Ok(move _152);
        drop((_42.1: std::string::String)) -> [return: bb107, unwind: bb119];
    }

    bb87: {
        drop(_2) -> [return: bb90, unwind continue];
    }

    bb88: {
        _167 = const false;
        _169 = const false;
        _170 = const false;
        drop(_18) -> [return: bb89, unwind: bb105];
    }

    bb89: {
        drop(_2) -> [return: bb90, unwind continue];
    }

    bb90: {
        return;
    }

    bb91 (cleanup): {
        drop(_149) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_142) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_131) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_127) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_118) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_88) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_81) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_70) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_66) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_57) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_45) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_29) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_18) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_7) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_2) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        resume;
    }

    bb107: {
        _167 = const false;
        _169 = const false;
        _170 = const false;
        drop(_18) -> [return: bb87, unwind: bb105];
    }

    bb108 (cleanup): {
        drop(_107) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        switchInt(_166) -> [0: bb112, otherwise: bb108];
    }

    bb110 (cleanup): {
        drop((_42.1: std::string::String)) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop((_42.0: std::string::String)) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        switchInt(_167) -> [0: bb110, otherwise: bb111];
    }

    bb113 (cleanup): {
        drop(_46) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        switchInt(_168) -> [0: bb101, otherwise: bb113];
    }

    bb115 (cleanup): {
        switchInt(_169) -> [0: bb103, otherwise: bb116];
    }

    bb116 (cleanup): {
        drop(((_38 as Ok).0: exercise::ExerciseOutput)) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        switchInt(_170) -> [0: bb103, otherwise: bb118];
    }

    bb118 (cleanup): {
        drop(((_38 as Err).0: exercise::ExerciseOutput)) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        _171 = discriminant(_38);
        switchInt(move _171) -> [0: bb115, otherwise: bb117];
    }

    bb120: {
        goto -> bb89;
    }
}

promoted[0] in compile_and_run_interactively: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in compile_and_run_interactively: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in compile_and_run_interactively: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in compile_and_run_interactively: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in compile_and_run_interactively: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Ran ", const " with errors"];
        _0 = &_1;
        return;
    }
}

promoted[5] in compile_and_run_interactively: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in compile_and_run_interactively: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in compile_and_run_interactively: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Successfully ran ", const "!"];
        _0 = &_1;
        return;
    }
}

promoted[8] in compile_and_run_interactively: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Running ", const "..."];
        _0 = &_1;
        return;
    }
}

promoted[9] in compile_and_run_interactively: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Compiling ", const "..."];
        _0 = &_1;
        return;
    }
}

fn compile_and_test(_1: &Exercise, _2: RunMode, _3: bool) -> Result<bool, ()> {
    debug exercise => _1;
    debug run_mode => _2;
    debug verbose => _3;
    let mut _0: std::result::Result<bool, ()>;
    let _4: indicatif::ProgressBar;
    let _5: ();
    let mut _6: &indicatif::ProgressBar;
    let _7: &str;
    let mut _8: &std::string::String;
    let _9: std::string::String;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &&exercise::Exercise;
    let _18: ();
    let mut _19: &indicatif::ProgressBar;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, exercise::CompiledExercise<'_>>;
    let mut _22: std::result::Result<exercise::CompiledExercise<'_>, ()>;
    let mut _23: &exercise::Exercise;
    let _24: &indicatif::ProgressBar;
    let mut _25: isize;
    let mut _28: &exercise::CompiledExercise<'_>;
    let _29: ();
    let mut _30: &indicatif::ProgressBar;
    let mut _31: isize;
    let _33: ();
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &std::string::String;
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &&&exercise::Exercise;
    let _50: &&exercise::Exercise;
    let mut _51: bool;
    let mut _52: &std::result::Result<std::string::String, std::env::VarError>;
    let _53: std::result::Result<std::string::String, std::env::VarError>;
    let _54: ();
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 2];
    let _59: [core::fmt::rt::Argument<'_>; 2];
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &console::StyledObject<&str>;
    let _62: console::StyledObject<&str>;
    let mut _63: console::StyledObject<&str>;
    let mut _64: core::fmt::rt::Argument<'_>;
    let _65: &console::StyledObject<std::string::String>;
    let _66: console::StyledObject<std::string::String>;
    let mut _67: console::StyledObject<std::string::String>;
    let mut _68: std::string::String;
    let _69: ();
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[core::fmt::rt::Argument<'_>];
    let _73: &[core::fmt::rt::Argument<'_>; 2];
    let _74: [core::fmt::rt::Argument<'_>; 2];
    let mut _75: core::fmt::rt::Argument<'_>;
    let _76: &console::StyledObject<console::Emoji<'_, '_>>;
    let _77: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _78: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _79: console::Emoji<'_, '_>;
    let _80: &str;
    let _81: &str;
    let mut _82: core::fmt::rt::Argument<'_>;
    let _83: &console::StyledObject<std::string::String>;
    let _84: console::StyledObject<std::string::String>;
    let mut _85: console::StyledObject<std::string::String>;
    let mut _86: std::string::String;
    let mut _87: isize;
    let mut _88: bool;
    let mut _89: &exercise::Exercise;
    let mut _90: std::option::Option<std::string::String>;
    let mut _94: std::fmt::Arguments<'_>;
    let mut _95: &[&str];
    let mut _96: &[core::fmt::rt::Argument<'_>];
    let _97: &[core::fmt::rt::Argument<'_>; 1];
    let _98: [core::fmt::rt::Argument<'_>; 1];
    let mut _99: core::fmt::rt::Argument<'_>;
    let _100: &&exercise::Exercise;
    let mut _101: bool;
    let mut _102: &std::result::Result<std::string::String, std::env::VarError>;
    let _103: std::result::Result<std::string::String, std::env::VarError>;
    let _104: ();
    let mut _105: std::fmt::Arguments<'_>;
    let mut _106: &[&str];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let _108: &[core::fmt::rt::Argument<'_>; 2];
    let _109: [core::fmt::rt::Argument<'_>; 2];
    let mut _110: core::fmt::rt::Argument<'_>;
    let _111: &console::StyledObject<&str>;
    let _112: console::StyledObject<&str>;
    let mut _113: console::StyledObject<&str>;
    let mut _114: core::fmt::rt::Argument<'_>;
    let _115: &console::StyledObject<std::string::String>;
    let _116: console::StyledObject<std::string::String>;
    let mut _117: console::StyledObject<std::string::String>;
    let mut _118: std::string::String;
    let _119: ();
    let mut _120: std::fmt::Arguments<'_>;
    let mut _121: &[&str];
    let mut _122: &[core::fmt::rt::Argument<'_>];
    let _123: &[core::fmt::rt::Argument<'_>; 2];
    let _124: [core::fmt::rt::Argument<'_>; 2];
    let mut _125: core::fmt::rt::Argument<'_>;
    let _126: &console::StyledObject<console::Emoji<'_, '_>>;
    let _127: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _128: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _129: console::Emoji<'_, '_>;
    let _130: &str;
    let _131: &str;
    let mut _132: core::fmt::rt::Argument<'_>;
    let _133: &console::StyledObject<std::string::String>;
    let _134: console::StyledObject<std::string::String>;
    let mut _135: console::StyledObject<std::string::String>;
    let mut _136: std::string::String;
    let _137: ();
    let mut _138: std::fmt::Arguments<'_>;
    let mut _139: &[&str];
    let mut _140: &[core::fmt::rt::Argument<'_>];
    let _141: &[core::fmt::rt::Argument<'_>; 1];
    let _142: [core::fmt::rt::Argument<'_>; 1];
    let mut _143: core::fmt::rt::Argument<'_>;
    let _144: &std::string::String;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: isize;
    scope 1 {
        debug progress_bar => _4;
        let _10: std::string::String;
        let _20: exercise::CompiledExercise<'_>;
        let _26: exercise::CompiledExercise<'_>;
        let mut _153: &[&str; 2];
        scope 2 {
            debug res => _10;
        }
        scope 3 {
            debug compilation => _20;
            let _27: std::result::Result<exercise::ExerciseOutput, exercise::ExerciseOutput>;
            scope 8 {
                debug result => _27;
                let _32: exercise::ExerciseOutput;
                let _91: exercise::ExerciseOutput;
                scope 9 {
                    debug output => _32;
                    let _41: std::string::String;
                    let _42: std::string::String;
                    let mut _151: &[&str; 1];
                    let mut _152: &[&str; 2];
                    scope 10 {
                        debug formatstr => _41;
                        let mut _149: &[&str; 3];
                        let mut _150: &[&str; 3];
                    }
                    scope 11 {
                        debug res => _42;
                    }
                    scope 12 {
                    }
                }
                scope 13 {
                    debug output => _91;
                    let _92: std::string::String;
                    let _93: std::string::String;
                    let mut _145: &[&str; 2];
                    let mut _148: &[&str; 2];
                    scope 14 {
                        debug formatstr => _92;
                        let mut _146: &[&str; 3];
                        let mut _147: &[&str; 3];
                    }
                    scope 15 {
                        debug res => _93;
                    }
                }
            }
        }
        scope 4 {
            debug residual => const Result::<Infallible, ()>::Err(());
            scope 5 {
            }
        }
        scope 6 {
            debug val => _26;
            scope 7 {
            }
        }
    }

    bb0: {
        _155 = const false;
        _154 = const false;
        _157 = const false;
        _156 = const false;
        _4 = ProgressBar::new_spinner() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_4;
        _153 = const _;
        _12 = _153 as &[&str] (PointerCoercion(Unsize));
        _17 = &_1;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_17) -> [return: bb2, unwind: bb102];
    }

    bb2: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb3, unwind: bb102];
    }

    bb3: {
        _10 = format(move _11) -> [return: bb4, unwind: bb102];
    }

    bb4: {
        _9 = move _10;
        _8 = &_9;
        _7 = std::string::String::as_str(move _8) -> [return: bb5, unwind: bb101];
    }

    bb5: {
        _5 = ProgressBar::set_message(move _6, _7) -> [return: bb6, unwind: bb101];
    }

    bb6: {
        drop(_9) -> [return: bb7, unwind: bb102];
    }

    bb7: {
        _19 = &_4;
        _18 = ProgressBar::enable_steady_tick(move _19, const 100_u64) -> [return: bb8, unwind: bb102];
    }

    bb8: {
        _23 = _1;
        _24 = &_4;
        _22 = compile(move _23, _24) -> [return: bb9, unwind: bb102];
    }

    bb9: {
        _21 = <Result<CompiledExercise<'_>, ()> as Try>::branch(move _22) -> [return: bb10, unwind: bb102];
    }

    bb10: {
        _25 = discriminant(_21);
        switchInt(move _25) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        _26 = move ((_21 as Continue).0: exercise::CompiledExercise<'_>);
        _20 = move _26;
        _28 = &_20;
        _27 = CompiledExercise::<'_>::run(move _28) -> [return: bb15, unwind: bb100];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _0 = <Result<bool, ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb14, unwind: bb102];
    }

    bb14: {
        drop(_4) -> [return: bb87, unwind continue];
    }

    bb15: {
        _156 = const true;
        _157 = const true;
        _30 = &_4;
        _29 = ProgressBar::finish_and_clear(move _30) -> [return: bb16, unwind: bb113];
    }

    bb16: {
        _31 = discriminant(_27);
        switchInt(move _31) -> [0: bb18, 1: bb17, otherwise: bb12];
    }

    bb17: {
        _157 = const false;
        _91 = move ((_27 as Err).0: exercise::ExerciseOutput);
        _148 = const _;
        _95 = _148 as &[&str] (PointerCoercion(Unsize));
        _100 = &_1;
        _99 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_100) -> [return: bb55, unwind: bb93];
    }

    bb18: {
        _156 = const false;
        _32 = move ((_27 as Ok).0: exercise::ExerciseOutput);
        switchInt(_3) -> [0: bb22, otherwise: bb19];
    }

    bb19: {
        _152 = const _;
        _35 = _152 as &[&str] (PointerCoercion(Unsize));
        _40 = &(_32.0: std::string::String);
        _39 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_40) -> [return: bb20, unwind: bb99];
    }

    bb20: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb21, unwind: bb99];
    }

    bb21: {
        _33 = _print(move _34) -> [return: bb114, unwind: bb99];
    }

    bb22: {
        _151 = const _;
        _44 = _151 as &[&str] (PointerCoercion(Unsize));
        _50 = &_1;
        _49 = &_50;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<&&Exercise>(_49) -> [return: bb23, unwind: bb99];
    }

    bb23: {
        _47 = [move _48];
        _46 = &_47;
        _45 = _46 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> [return: bb24, unwind: bb99];
    }

    bb24: {
        _42 = format(move _43) -> [return: bb25, unwind: bb99];
    }

    bb25: {
        _155 = const true;
        _41 = move _42;
        _53 = var::<&str>(const "NO_EMOJI") -> [return: bb26, unwind: bb108];
    }

    bb26: {
        _52 = &_53;
        _51 = Result::<std::string::String, VarError>::is_ok(move _52) -> [return: bb27, unwind: bb98];
    }

    bb27: {
        switchInt(move _51) -> [0: bb39, otherwise: bb28];
    }

    bb28: {
        drop(_53) -> [return: bb29, unwind: bb108];
    }

    bb29: {
        _149 = const _;
        _56 = _149 as &[&str] (PointerCoercion(Unsize));
        _63 = style::<&str>(const "✓") -> [return: bb30, unwind: bb108];
    }

    bb30: {
        _62 = StyledObject::<&str>::green(move _63) -> [return: bb31, unwind: bb108];
    }

    bb31: {
        _61 = &_62;
        _60 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_61) -> [return: bb32, unwind: bb97];
    }

    bb32: {
        _155 = const false;
        _68 = move _41;
        _67 = style::<std::string::String>(move _68) -> [return: bb33, unwind: bb97];
    }

    bb33: {
        _66 = StyledObject::<std::string::String>::green(move _67) -> [return: bb34, unwind: bb97];
    }

    bb34: {
        _65 = &_66;
        _64 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_65) -> [return: bb35, unwind: bb96];
    }

    bb35: {
        _59 = [move _60, move _64];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _55 = Arguments::<'_>::new_v1(move _56, move _57) -> [return: bb36, unwind: bb96];
    }

    bb36: {
        _54 = _print(move _55) -> [return: bb37, unwind: bb96];
    }

    bb37: {
        drop(_66) -> [return: bb38, unwind: bb97];
    }

    bb38: {
        drop(_62) -> [return: bb50, unwind: bb108];
    }

    bb39: {
        drop(_53) -> [return: bb40, unwind: bb108];
    }

    bb40: {
        _150 = const _;
        _71 = _150 as &[&str] (PointerCoercion(Unsize));
        _80 = const "✅";
        _81 = const "✓";
        _79 = Emoji::<'_, '_>(_80, _81);
        _78 = style::<Emoji<'_, '_>>(move _79) -> [return: bb41, unwind: bb108];
    }

    bb41: {
        _77 = StyledObject::<Emoji<'_, '_>>::green(move _78) -> [return: bb42, unwind: bb108];
    }

    bb42: {
        _76 = &_77;
        _75 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<Emoji<'_, '_>>>(_76) -> [return: bb43, unwind: bb95];
    }

    bb43: {
        _155 = const false;
        _86 = move _41;
        _85 = style::<std::string::String>(move _86) -> [return: bb44, unwind: bb95];
    }

    bb44: {
        _84 = StyledObject::<std::string::String>::green(move _85) -> [return: bb45, unwind: bb95];
    }

    bb45: {
        _83 = &_84;
        _82 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_83) -> [return: bb46, unwind: bb94];
    }

    bb46: {
        _74 = [move _75, move _82];
        _73 = &_74;
        _72 = _73 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _70 = Arguments::<'_>::new_v1(move _71, move _72) -> [return: bb47, unwind: bb94];
    }

    bb47: {
        _69 = _print(move _70) -> [return: bb48, unwind: bb94];
    }

    bb48: {
        drop(_84) -> [return: bb49, unwind: bb95];
    }

    bb49: {
        drop(_77) -> [return: bb50, unwind: bb108];
    }

    bb50: {
        _155 = const false;
        _87 = discriminant(_2);
        switchInt(move _87) -> [0: bb51, otherwise: bb53];
    }

    bb51: {
        _89 = _1;
        _90 = std::option::Option::<std::string::String>::None;
        _88 = prompt_for_completion(move _89, move _90) -> [return: bb52, unwind: bb99];
    }

    bb52: {
        _0 = Result::<bool, ()>::Ok(move _88);
        goto -> bb54;
    }

    bb53: {
        _0 = Result::<bool, ()>::Ok(const true);
        goto -> bb54;
    }

    bb54: {
        drop(_32) -> [return: bb104, unwind: bb113];
    }

    bb55: {
        _98 = [move _99];
        _97 = &_98;
        _96 = _97 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _94 = Arguments::<'_>::new_v1(move _95, move _96) -> [return: bb56, unwind: bb93];
    }

    bb56: {
        _93 = format(move _94) -> [return: bb57, unwind: bb93];
    }

    bb57: {
        _154 = const true;
        _92 = move _93;
        _103 = var::<&str>(const "NO_EMOJI") -> [return: bb58, unwind: bb106];
    }

    bb58: {
        _102 = &_103;
        _101 = Result::<std::string::String, VarError>::is_ok(move _102) -> [return: bb59, unwind: bb92];
    }

    bb59: {
        switchInt(move _101) -> [0: bb71, otherwise: bb60];
    }

    bb60: {
        drop(_103) -> [return: bb61, unwind: bb106];
    }

    bb61: {
        _146 = const _;
        _106 = _146 as &[&str] (PointerCoercion(Unsize));
        _113 = style::<&str>(const "!") -> [return: bb62, unwind: bb106];
    }

    bb62: {
        _112 = StyledObject::<&str>::red(move _113) -> [return: bb63, unwind: bb106];
    }

    bb63: {
        _111 = &_112;
        _110 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_111) -> [return: bb64, unwind: bb91];
    }

    bb64: {
        _154 = const false;
        _118 = move _92;
        _117 = style::<std::string::String>(move _118) -> [return: bb65, unwind: bb91];
    }

    bb65: {
        _116 = StyledObject::<std::string::String>::red(move _117) -> [return: bb66, unwind: bb91];
    }

    bb66: {
        _115 = &_116;
        _114 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_115) -> [return: bb67, unwind: bb90];
    }

    bb67: {
        _109 = [move _110, move _114];
        _108 = &_109;
        _107 = _108 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _105 = Arguments::<'_>::new_v1(move _106, move _107) -> [return: bb68, unwind: bb90];
    }

    bb68: {
        _104 = _print(move _105) -> [return: bb69, unwind: bb90];
    }

    bb69: {
        drop(_116) -> [return: bb70, unwind: bb91];
    }

    bb70: {
        drop(_112) -> [return: bb82, unwind: bb106];
    }

    bb71: {
        drop(_103) -> [return: bb72, unwind: bb106];
    }

    bb72: {
        _147 = const _;
        _121 = _147 as &[&str] (PointerCoercion(Unsize));
        _130 = const "⚠\u{fe0f} ";
        _131 = const "!";
        _129 = Emoji::<'_, '_>(_130, _131);
        _128 = style::<Emoji<'_, '_>>(move _129) -> [return: bb73, unwind: bb106];
    }

    bb73: {
        _127 = StyledObject::<Emoji<'_, '_>>::red(move _128) -> [return: bb74, unwind: bb106];
    }

    bb74: {
        _126 = &_127;
        _125 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<Emoji<'_, '_>>>(_126) -> [return: bb75, unwind: bb89];
    }

    bb75: {
        _154 = const false;
        _136 = move _92;
        _135 = style::<std::string::String>(move _136) -> [return: bb76, unwind: bb89];
    }

    bb76: {
        _134 = StyledObject::<std::string::String>::red(move _135) -> [return: bb77, unwind: bb89];
    }

    bb77: {
        _133 = &_134;
        _132 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_133) -> [return: bb78, unwind: bb88];
    }

    bb78: {
        _124 = [move _125, move _132];
        _123 = &_124;
        _122 = _123 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _120 = Arguments::<'_>::new_v1(move _121, move _122) -> [return: bb79, unwind: bb88];
    }

    bb79: {
        _119 = _print(move _120) -> [return: bb80, unwind: bb88];
    }

    bb80: {
        drop(_134) -> [return: bb81, unwind: bb89];
    }

    bb81: {
        drop(_127) -> [return: bb82, unwind: bb106];
    }

    bb82: {
        _154 = const false;
        _145 = const _;
        _139 = _145 as &[&str] (PointerCoercion(Unsize));
        _144 = &(_91.0: std::string::String);
        _143 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_144) -> [return: bb83, unwind: bb93];
    }

    bb83: {
        _142 = [move _143];
        _141 = &_142;
        _140 = _141 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _138 = Arguments::<'_>::new_v1(move _139, move _140) -> [return: bb84, unwind: bb93];
    }

    bb84: {
        _137 = _print(move _138) -> [return: bb85, unwind: bb93];
    }

    bb85: {
        _0 = Result::<bool, ()>::Err(const ());
        drop(_91) -> [return: bb104, unwind: bb113];
    }

    bb86: {
        drop(_4) -> [return: bb87, unwind continue];
    }

    bb87: {
        return;
    }

    bb88 (cleanup): {
        drop(_134) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_127) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_116) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_112) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_103) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_91) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_84) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_77) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_66) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_62) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_53) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_32) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_20) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_9) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_4) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        resume;
    }

    bb104: {
        _156 = const false;
        _157 = const false;
        drop(_20) -> [return: bb86, unwind: bb102];
    }

    bb105 (cleanup): {
        drop(_92) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        switchInt(_154) -> [0: bb93, otherwise: bb105];
    }

    bb107 (cleanup): {
        drop(_41) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_155) -> [0: bb99, otherwise: bb107];
    }

    bb109 (cleanup): {
        switchInt(_156) -> [0: bb100, otherwise: bb110];
    }

    bb110 (cleanup): {
        drop(((_27 as Ok).0: exercise::ExerciseOutput)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        switchInt(_157) -> [0: bb100, otherwise: bb112];
    }

    bb112 (cleanup): {
        drop(((_27 as Err).0: exercise::ExerciseOutput)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        _158 = discriminant(_27);
        switchInt(move _158) -> [0: bb109, otherwise: bb111];
    }

    bb114: {
        goto -> bb22;
    }
}

promoted[0] in compile_and_test: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in compile_and_test: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in compile_and_test: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in compile_and_test: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Testing of ", const " failed! Please try again. Here's the output:"];
        _0 = &_1;
        return;
    }
}

promoted[4] in compile_and_test: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in compile_and_test: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in compile_and_test: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Successfully tested "];
        _0 = &_1;
        return;
    }
}

promoted[7] in compile_and_test: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in compile_and_test: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Testing ", const "..."];
        _0 = &_1;
        return;
    }
}

fn compile(_1: &Exercise, _2: &ProgressBar) -> Result<CompiledExercise<'_>, ()> {
    debug exercise => _1;
    debug progress_bar => _2;
    let mut _0: std::result::Result<exercise::CompiledExercise<'_>, ()>;
    let _3: std::result::Result<exercise::CompiledExercise<'_>, exercise::ExerciseOutput>;
    let mut _4: &exercise::Exercise;
    let mut _5: isize;
    let _8: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &&exercise::Exercise;
    let mut _18: bool;
    let mut _19: &std::result::Result<std::string::String, std::env::VarError>;
    let _20: std::result::Result<std::string::String, std::env::VarError>;
    let _21: ();
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let _25: &[core::fmt::rt::Argument<'_>; 2];
    let _26: [core::fmt::rt::Argument<'_>; 2];
    let mut _27: core::fmt::rt::Argument<'_>;
    let _28: &console::StyledObject<&str>;
    let _29: console::StyledObject<&str>;
    let mut _30: console::StyledObject<&str>;
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &console::StyledObject<std::string::String>;
    let _33: console::StyledObject<std::string::String>;
    let mut _34: console::StyledObject<std::string::String>;
    let mut _35: std::string::String;
    let _36: ();
    let mut _37: std::fmt::Arguments<'_>;
    let mut _38: &[&str];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let _40: &[core::fmt::rt::Argument<'_>; 2];
    let _41: [core::fmt::rt::Argument<'_>; 2];
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &console::StyledObject<console::Emoji<'_, '_>>;
    let _44: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _45: console::StyledObject<console::Emoji<'_, '_>>;
    let mut _46: console::Emoji<'_, '_>;
    let _47: &str;
    let _48: &str;
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &console::StyledObject<std::string::String>;
    let _51: console::StyledObject<std::string::String>;
    let mut _52: console::StyledObject<std::string::String>;
    let mut _53: std::string::String;
    let _54: ();
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &std::string::String;
    let mut _66: bool;
    scope 1 {
        debug compilation_result => _3;
        let _6: exercise::CompiledExercise<'_>;
        let _7: exercise::ExerciseOutput;
        scope 2 {
            debug compilation => _6;
        }
        scope 3 {
            debug output => _7;
            let _9: std::string::String;
            let _10: std::string::String;
            let mut _62: &[&str; 2];
            let mut _65: &[&str; 2];
            scope 4 {
                debug formatstr => _9;
                let mut _63: &[&str; 3];
                let mut _64: &[&str; 3];
            }
            scope 5 {
                debug res => _10;
            }
        }
    }

    bb0: {
        _66 = const false;
        _4 = _1;
        _3 = Exercise::compile(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: exercise::ExerciseOutput);
        _8 = ProgressBar::finish_and_clear(_2) -> [return: bb5, unwind: bb42];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = move ((_3 as Ok).0: exercise::CompiledExercise<'_>);
        _0 = Result::<CompiledExercise<'_>, ()>::Ok(move _6);
        goto -> bb43;
    }

    bb5: {
        _65 = const _;
        _12 = _65 as &[&str] (PointerCoercion(Unsize));
        _17 = &_1;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<&Exercise>(_17) -> [return: bb6, unwind: bb42];
    }

    bb6: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        _10 = format(move _11) -> [return: bb8, unwind: bb42];
    }

    bb8: {
        _66 = const true;
        _9 = move _10;
        _20 = var::<&str>(const "NO_EMOJI") -> [return: bb9, unwind: bb45];
    }

    bb9: {
        _19 = &_20;
        _18 = Result::<std::string::String, VarError>::is_ok(move _19) -> [return: bb10, unwind: bb41];
    }

    bb10: {
        switchInt(move _18) -> [0: bb22, otherwise: bb11];
    }

    bb11: {
        drop(_20) -> [return: bb12, unwind: bb45];
    }

    bb12: {
        _63 = const _;
        _23 = _63 as &[&str] (PointerCoercion(Unsize));
        _30 = style::<&str>(const "!") -> [return: bb13, unwind: bb45];
    }

    bb13: {
        _29 = StyledObject::<&str>::red(move _30) -> [return: bb14, unwind: bb45];
    }

    bb14: {
        _28 = &_29;
        _27 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_28) -> [return: bb15, unwind: bb40];
    }

    bb15: {
        _66 = const false;
        _35 = move _9;
        _34 = style::<std::string::String>(move _35) -> [return: bb16, unwind: bb40];
    }

    bb16: {
        _33 = StyledObject::<std::string::String>::red(move _34) -> [return: bb17, unwind: bb40];
    }

    bb17: {
        _32 = &_33;
        _31 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_32) -> [return: bb18, unwind: bb39];
    }

    bb18: {
        _26 = [move _27, move _31];
        _25 = &_26;
        _24 = _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _22 = Arguments::<'_>::new_v1(move _23, move _24) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        _21 = _print(move _22) -> [return: bb20, unwind: bb39];
    }

    bb20: {
        drop(_33) -> [return: bb21, unwind: bb40];
    }

    bb21: {
        drop(_29) -> [return: bb33, unwind: bb45];
    }

    bb22: {
        drop(_20) -> [return: bb23, unwind: bb45];
    }

    bb23: {
        _64 = const _;
        _38 = _64 as &[&str] (PointerCoercion(Unsize));
        _47 = const "⚠\u{fe0f} ";
        _48 = const "!";
        _46 = Emoji::<'_, '_>(_47, _48);
        _45 = style::<Emoji<'_, '_>>(move _46) -> [return: bb24, unwind: bb45];
    }

    bb24: {
        _44 = StyledObject::<Emoji<'_, '_>>::red(move _45) -> [return: bb25, unwind: bb45];
    }

    bb25: {
        _43 = &_44;
        _42 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<Emoji<'_, '_>>>(_43) -> [return: bb26, unwind: bb38];
    }

    bb26: {
        _66 = const false;
        _53 = move _9;
        _52 = style::<std::string::String>(move _53) -> [return: bb27, unwind: bb38];
    }

    bb27: {
        _51 = StyledObject::<std::string::String>::red(move _52) -> [return: bb28, unwind: bb38];
    }

    bb28: {
        _50 = &_51;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_50) -> [return: bb29, unwind: bb37];
    }

    bb29: {
        _41 = [move _42, move _49];
        _40 = &_41;
        _39 = _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _37 = Arguments::<'_>::new_v1(move _38, move _39) -> [return: bb30, unwind: bb37];
    }

    bb30: {
        _36 = _print(move _37) -> [return: bb31, unwind: bb37];
    }

    bb31: {
        drop(_51) -> [return: bb32, unwind: bb38];
    }

    bb32: {
        drop(_44) -> [return: bb33, unwind: bb45];
    }

    bb33: {
        _66 = const false;
        _62 = const _;
        _56 = _62 as &[&str] (PointerCoercion(Unsize));
        _61 = &(_7.1: std::string::String);
        _60 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_61) -> [return: bb34, unwind: bb42];
    }

    bb34: {
        _59 = [move _60];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _55 = Arguments::<'_>::new_v1(move _56, move _57) -> [return: bb35, unwind: bb42];
    }

    bb35: {
        _54 = _print(move _55) -> [return: bb36, unwind: bb42];
    }

    bb36: {
        _0 = Result::<CompiledExercise<'_>, ()>::Err(const ());
        drop(_7) -> [return: bb43, unwind continue];
    }

    bb37 (cleanup): {
        drop(_51) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_44) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_33) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_29) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_20) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_7) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_9) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_66) -> [0: bb42, otherwise: bb44];
    }

    bb46 (cleanup): {
        resume;
    }
}

promoted[0] in compile: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in compile: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in compile: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in compile: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Compiling of ", const " failed! Please try again. Here's the output:"];
        _0 = &_1;
        return;
    }
}

fn prompt_for_completion(_1: &Exercise, _2: std::option::Option<std::string::String>) -> bool {
    debug exercise => _1;
    debug prompt_output => _2;
    let mut _0: bool;
    let _3: std::vec::Vec<exercise::ContextLine>;
    let mut _4: exercise::State;
    let mut _5: isize;
    let _6: std::vec::Vec<exercise::ContextLine>;
    let mut _8: &std::result::Result<std::string::String, std::env::VarError>;
    let _9: std::result::Result<std::string::String, std::env::VarError>;
    let _11: &str;
    let mut _13: isize;
    let _14: &str;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let _18: ();
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: [core::fmt::rt::Argument<'_>; 1];
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &&str;
    let _26: ();
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let _33: &&str;
    let _34: ();
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: isize;
    let _39: ();
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let _42: ();
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &console::StyledObject<&str>;
    let _50: console::StyledObject<&str>;
    let _51: ();
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let mut _54: &[core::fmt::rt::Argument<'_>];
    let _55: &[core::fmt::rt::Argument<'_>; 1];
    let _56: [core::fmt::rt::Argument<'_>; 1];
    let mut _57: core::fmt::rt::Argument<'_>;
    let _58: &std::string::String;
    let _59: ();
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let mut _62: &[core::fmt::rt::Argument<'_>];
    let _63: &[core::fmt::rt::Argument<'_>; 1];
    let _64: [core::fmt::rt::Argument<'_>; 1];
    let mut _65: core::fmt::rt::Argument<'_>;
    let _66: &console::StyledObject<&str>;
    let _67: console::StyledObject<&str>;
    let _68: ();
    let mut _69: std::fmt::Arguments<'_>;
    let mut _70: &[&str];
    let _71: ();
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let _74: ();
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: [core::fmt::rt::Argument<'_>; 1];
    let mut _80: core::fmt::rt::Argument<'_>;
    let _81: &console::StyledObject<&str>;
    let _82: console::StyledObject<&str>;
    let mut _83: console::StyledObject<&str>;
    let _84: ();
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: std::vec::IntoIter<exercise::ContextLine>;
    let mut _88: std::vec::Vec<exercise::ContextLine>;
    let mut _90: std::option::Option<exercise::ContextLine>;
    let mut _91: &mut std::vec::IntoIter<exercise::ContextLine>;
    let mut _92: isize;
    let mut _95: bool;
    let mut _97: std::fmt::Arguments<'_>;
    let mut _98: &[&str];
    let mut _99: &[core::fmt::rt::Argument<'_>];
    let _100: &[core::fmt::rt::Argument<'_>; 1];
    let _101: [core::fmt::rt::Argument<'_>; 1];
    let mut _102: core::fmt::rt::Argument<'_>;
    let _103: &console::StyledObject<std::string::String>;
    let _104: console::StyledObject<std::string::String>;
    let mut _105: console::StyledObject<std::string::String>;
    let mut _106: std::string::String;
    let mut _107: &std::string::String;
    let _108: ();
    let mut _109: std::fmt::Arguments<'_>;
    let mut _110: &[&str];
    let mut _111: &[core::fmt::rt::Argument<'_>];
    let _112: &[core::fmt::rt::Argument<'_>; 3];
    let _113: [core::fmt::rt::Argument<'_>; 3];
    let mut _114: core::fmt::rt::Argument<'_>;
    let _115: &console::StyledObject<usize>;
    let _116: console::StyledObject<usize>;
    let mut _117: console::StyledObject<usize>;
    let mut _118: console::StyledObject<usize>;
    let mut _119: usize;
    let mut _120: core::fmt::rt::Argument<'_>;
    let _121: &console::StyledObject<&str>;
    let _122: console::StyledObject<&str>;
    let mut _123: console::StyledObject<&str>;
    let mut _124: core::fmt::rt::Argument<'_>;
    let _125: &std::string::String;
    let mut _126: &[core::fmt::rt::Placeholder];
    let _127: &[core::fmt::rt::Placeholder; 3];
    let _128: [core::fmt::rt::Placeholder; 3];
    let mut _129: core::fmt::rt::Placeholder;
    let mut _130: core::fmt::rt::Alignment;
    let mut _131: core::fmt::rt::Count;
    let mut _132: core::fmt::rt::Count;
    let mut _133: core::fmt::rt::Placeholder;
    let mut _134: core::fmt::rt::Alignment;
    let mut _135: core::fmt::rt::Count;
    let mut _136: core::fmt::rt::Count;
    let mut _137: core::fmt::rt::Placeholder;
    let mut _138: core::fmt::rt::Alignment;
    let mut _139: core::fmt::rt::Count;
    let mut _140: core::fmt::rt::Count;
    let mut _141: core::fmt::rt::UnsafeArg;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: isize;
    let mut _160: isize;
    scope 1 {
        debug context => _3;
        let _7: bool;
        scope 3 {
            debug no_emoji => _7;
            let _10: &str;
            scope 4 {
                debug clippy_success_msg => _10;
                let _12: &str;
                scope 5 {
                    debug success_msg => _12;
                    let mut _89: std::vec::IntoIter<exercise::ContextLine>;
                    let mut _144: &[&str; 1];
                    let mut _145: &[&str; 2];
                    let mut _146: &[&str; 1];
                    let mut _152: &[&str; 1];
                    let mut _153: &[&str; 2];
                    let mut _154: &[&str; 2];
                    let mut _155: &[&str; 1];
                    scope 6 {
                        debug output => _38;
                        let _38: std::string::String;
                        let mut _147: &[&str; 1];
                        let mut _148: &[&str; 2];
                        let mut _149: &[&str; 2];
                        let mut _150: &[&str; 2];
                        let mut _151: &[&str; 1];
                    }
                    scope 7 {
                        debug iter => _89;
                        let _93: exercise::ContextLine;
                        scope 8 {
                            debug context_line => _93;
                            let _94: std::string::String;
                            let _96: std::string::String;
                            let mut _143: &[&str; 1];
                            scope 9 {
                                debug formatted_line => _94;
                                let mut _142: &[&str; 4];
                                scope 11 {
                                }
                            }
                            scope 10 {
                                debug res => _96;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug context => _6;
    }

    bb0: {
        _158 = const false;
        _157 = const false;
        _156 = const false;
        _157 = const true;
        _4 = Exercise::state(_1) -> [return: bb1, unwind: bb110];
    }

    bb1: {
        _5 = discriminant(_4);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_4 as Pending).0: std::vec::Vec<exercise::ContextLine>);
        _158 = const true;
        _3 = move _6;
        _9 = var::<&str>(const "NO_EMOJI") -> [return: bb5, unwind: bb107];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = const true;
        _158 = const false;
        drop(_2) -> [return: bb87, unwind continue];
    }

    bb5: {
        _8 = &_9;
        _7 = Result::<std::string::String, VarError>::is_ok(move _8) -> [return: bb6, unwind: bb98];
    }

    bb6: {
        drop(_9) -> [return: bb7, unwind: bb107];
    }

    bb7: {
        switchInt(_7) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _10 = const "The code is compiling, and Clippy is happy!";
        goto -> bb10;
    }

    bb9: {
        _11 = const "The code is compiling, and 📎 Clippy 📎 is happy!";
        _10 = _11;
        goto -> bb10;
    }

    bb10: {
        _13 = discriminant(((*_1).2: exercise::Mode));
        switchInt(move _13) -> [0: bb12, 1: bb13, 2: bb11, otherwise: bb3];
    }

    bb11: {
        _12 = _10;
        goto -> bb14;
    }

    bb12: {
        _12 = const "The code is compiling!";
        goto -> bb14;
    }

    bb13: {
        _14 = const "The code is compiling, and the tests pass!";
        _12 = _14;
        goto -> bb14;
    }

    bb14: {
        _155 = const _;
        _17 = _155 as &[&str] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_const(move _17) -> [return: bb15, unwind: bb107];
    }

    bb15: {
        _15 = _print(move _16) -> [return: bb16, unwind: bb107];
    }

    bb16: {
        switchInt(_7) -> [0: bb20, otherwise: bb17];
    }

    bb17: {
        _153 = const _;
        _20 = _153 as &[&str] (PointerCoercion(Unsize));
        _25 = &_12;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_25) -> [return: bb18, unwind: bb107];
    }

    bb18: {
        _23 = [move _24];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _19 = Arguments::<'_>::new_v1(move _20, move _21) -> [return: bb19, unwind: bb107];
    }

    bb19: {
        _18 = _print(move _19) -> [return: bb111, unwind: bb107];
    }

    bb20: {
        _154 = const _;
        _28 = _154 as &[&str] (PointerCoercion(Unsize));
        _33 = &_12;
        _32 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_33) -> [return: bb21, unwind: bb107];
    }

    bb21: {
        _31 = [move _32];
        _30 = &_31;
        _29 = _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _27 = Arguments::<'_>::new_v1(move _28, move _29) -> [return: bb22, unwind: bb107];
    }

    bb22: {
        _26 = _print(move _27) -> [return: bb112, unwind: bb107];
    }

    bb23: {
        _152 = const _;
        _36 = _152 as &[&str] (PointerCoercion(Unsize));
        _35 = Arguments::<'_>::new_const(move _36) -> [return: bb24, unwind: bb107];
    }

    bb24: {
        _34 = _print(move _35) -> [return: bb25, unwind: bb107];
    }

    bb25: {
        _37 = discriminant(_2);
        switchInt(move _37) -> [1: bb26, otherwise: bb44];
    }

    bb26: {
        _157 = const false;
        _38 = move ((_2 as Some).0: std::string::String);
        _151 = const _;
        _41 = _151 as &[&str] (PointerCoercion(Unsize));
        _40 = Arguments::<'_>::new_const(move _41) -> [return: bb27, unwind: bb97];
    }

    bb27: {
        _39 = _print(move _40) -> [return: bb28, unwind: bb97];
    }

    bb28: {
        _150 = const _;
        _44 = _150 as &[&str] (PointerCoercion(Unsize));
        _50 = separator() -> [return: bb29, unwind: bb97];
    }

    bb29: {
        _49 = &_50;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_49) -> [return: bb30, unwind: bb96];
    }

    bb30: {
        _47 = [move _48];
        _46 = &_47;
        _45 = _46 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> [return: bb31, unwind: bb96];
    }

    bb31: {
        _42 = _print(move _43) -> [return: bb32, unwind: bb96];
    }

    bb32: {
        drop(_50) -> [return: bb33, unwind: bb97];
    }

    bb33: {
        _149 = const _;
        _53 = _149 as &[&str] (PointerCoercion(Unsize));
        _58 = &_38;
        _57 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_58) -> [return: bb34, unwind: bb97];
    }

    bb34: {
        _56 = [move _57];
        _55 = &_56;
        _54 = _55 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _52 = Arguments::<'_>::new_v1(move _53, move _54) -> [return: bb35, unwind: bb97];
    }

    bb35: {
        _51 = _print(move _52) -> [return: bb36, unwind: bb97];
    }

    bb36: {
        _148 = const _;
        _61 = _148 as &[&str] (PointerCoercion(Unsize));
        _67 = separator() -> [return: bb37, unwind: bb97];
    }

    bb37: {
        _66 = &_67;
        _65 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_66) -> [return: bb38, unwind: bb95];
    }

    bb38: {
        _64 = [move _65];
        _63 = &_64;
        _62 = _63 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _60 = Arguments::<'_>::new_v1(move _61, move _62) -> [return: bb39, unwind: bb95];
    }

    bb39: {
        _59 = _print(move _60) -> [return: bb40, unwind: bb95];
    }

    bb40: {
        drop(_67) -> [return: bb41, unwind: bb97];
    }

    bb41: {
        _147 = const _;
        _70 = _147 as &[&str] (PointerCoercion(Unsize));
        _69 = Arguments::<'_>::new_const(move _70) -> [return: bb42, unwind: bb97];
    }

    bb42: {
        _68 = _print(move _69) -> [return: bb43, unwind: bb97];
    }

    bb43: {
        drop(_38) -> [return: bb44, unwind: bb107];
    }

    bb44: {
        _146 = const _;
        _73 = _146 as &[&str] (PointerCoercion(Unsize));
        _72 = Arguments::<'_>::new_const(move _73) -> [return: bb45, unwind: bb107];
    }

    bb45: {
        _71 = _print(move _72) -> [return: bb46, unwind: bb107];
    }

    bb46: {
        _145 = const _;
        _76 = _145 as &[&str] (PointerCoercion(Unsize));
        _83 = style::<&str>(const "`I AM NOT DONE`") -> [return: bb47, unwind: bb107];
    }

    bb47: {
        _82 = StyledObject::<&str>::bold(move _83) -> [return: bb48, unwind: bb107];
    }

    bb48: {
        _81 = &_82;
        _80 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_81) -> [return: bb49, unwind: bb94];
    }

    bb49: {
        _79 = [move _80];
        _78 = &_79;
        _77 = _78 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _75 = Arguments::<'_>::new_v1(move _76, move _77) -> [return: bb50, unwind: bb94];
    }

    bb50: {
        _74 = _print(move _75) -> [return: bb51, unwind: bb94];
    }

    bb51: {
        drop(_82) -> [return: bb52, unwind: bb107];
    }

    bb52: {
        _144 = const _;
        _86 = _144 as &[&str] (PointerCoercion(Unsize));
        _85 = Arguments::<'_>::new_const(move _86) -> [return: bb53, unwind: bb107];
    }

    bb53: {
        _84 = _print(move _85) -> [return: bb54, unwind: bb107];
    }

    bb54: {
        _158 = const false;
        _88 = move _3;
        _87 = <Vec<ContextLine> as IntoIterator>::into_iter(move _88) -> [return: bb55, unwind: bb107];
    }

    bb55: {
        _89 = move _87;
        goto -> bb56;
    }

    bb56: {
        _91 = &mut _89;
        _90 = <std::vec::IntoIter<ContextLine> as Iterator>::next(_91) -> [return: bb57, unwind: bb93];
    }

    bb57: {
        _92 = discriminant(_90);
        switchInt(move _92) -> [0: bb59, 1: bb58, otherwise: bb3];
    }

    bb58: {
        _156 = const true;
        _93 = move ((_90 as Some).0: exercise::ContextLine);
        _95 = (_93.2: bool);
        switchInt(move _95) -> [0: bb67, otherwise: bb60];
    }

    bb59: {
        drop(_89) -> [return: bb86, unwind: bb107];
    }

    bb60: {
        _143 = const _;
        _98 = _143 as &[&str] (PointerCoercion(Unsize));
        _156 = const false;
        _106 = move (_93.0: std::string::String);
        _105 = style::<std::string::String>(move _106) -> [return: bb61, unwind: bb105];
    }

    bb61: {
        _104 = StyledObject::<std::string::String>::bold(move _105) -> [return: bb62, unwind: bb105];
    }

    bb62: {
        _103 = &_104;
        _102 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<std::string::String>>(_103) -> [return: bb63, unwind: bb92];
    }

    bb63: {
        _101 = [move _102];
        _100 = &_101;
        _99 = _100 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _97 = Arguments::<'_>::new_v1(move _98, move _99) -> [return: bb64, unwind: bb92];
    }

    bb64: {
        _96 = format(move _97) -> [return: bb65, unwind: bb92];
    }

    bb65: {
        drop(_104) -> [return: bb66, unwind: bb91];
    }

    bb66: {
        _94 = move _96;
        goto -> bb68;
    }

    bb67: {
        _107 = &(_93.0: std::string::String);
        _94 = <std::string::String as ToString>::to_string(move _107) -> [return: bb113, unwind: bb105];
    }

    bb68: {
        _142 = const _;
        _110 = _142 as &[&str] (PointerCoercion(Unsize));
        _119 = (_93.1: usize);
        _118 = style::<usize>(move _119) -> [return: bb69, unwind: bb90];
    }

    bb69: {
        _117 = StyledObject::<usize>::blue(move _118) -> [return: bb70, unwind: bb90];
    }

    bb70: {
        _116 = StyledObject::<usize>::bold(move _117) -> [return: bb71, unwind: bb90];
    }

    bb71: {
        _115 = &_116;
        _114 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<usize>>(_115) -> [return: bb72, unwind: bb89];
    }

    bb72: {
        _123 = style::<&str>(const "|") -> [return: bb73, unwind: bb89];
    }

    bb73: {
        _122 = StyledObject::<&str>::blue(move _123) -> [return: bb74, unwind: bb89];
    }

    bb74: {
        _121 = &_122;
        _120 = core::fmt::rt::Argument::<'_>::new_display::<StyledObject<&str>>(_121) -> [return: bb75, unwind: bb88];
    }

    bb75: {
        _125 = &_94;
        _124 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_125) -> [return: bb76, unwind: bb88];
    }

    bb76: {
        _113 = [move _114, move _120, move _124];
        _112 = &_113;
        _111 = _112 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _130 = core::fmt::rt::Alignment::Right;
        _131 = core::fmt::rt::Count::Implied;
        _132 = core::fmt::rt::Count::Is(const 2_usize);
        _129 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _130, const 0_u32, move _131, move _132) -> [return: bb77, unwind: bb88];
    }

    bb77: {
        _134 = core::fmt::rt::Alignment::Unknown;
        _135 = core::fmt::rt::Count::Implied;
        _136 = core::fmt::rt::Count::Implied;
        _133 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _134, const 0_u32, move _135, move _136) -> [return: bb78, unwind: bb88];
    }

    bb78: {
        _138 = core::fmt::rt::Alignment::Unknown;
        _139 = core::fmt::rt::Count::Implied;
        _140 = core::fmt::rt::Count::Implied;
        _137 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _138, const 0_u32, move _139, move _140) -> [return: bb79, unwind: bb88];
    }

    bb79: {
        _128 = [move _129, move _133, move _137];
        _127 = &_128;
        _126 = _127 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _141 = core::fmt::rt::UnsafeArg::new() -> [return: bb80, unwind: bb88];
    }

    bb80: {
        _109 = Arguments::<'_>::new_v1_formatted(move _110, move _111, move _126, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb81, unwind: bb88];
    }

    bb81: {
        _108 = _print(move _109) -> [return: bb82, unwind: bb88];
    }

    bb82: {
        drop(_122) -> [return: bb83, unwind: bb89];
    }

    bb83: {
        drop(_116) -> [return: bb84, unwind: bb90];
    }

    bb84: {
        drop(_94) -> [return: bb85, unwind: bb105];
    }

    bb85: {
        switchInt(_156) -> [0: bb100, otherwise: bb101];
    }

    bb86: {
        _0 = const false;
        _158 = const false;
        _159 = discriminant(_2);
        switchInt(move _159) -> [1: bb102, otherwise: bb87];
    }

    bb87: {
        return;
    }

    bb88 (cleanup): {
        drop(_122) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_116) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_94) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_96) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_104) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_89) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_82) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_67) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_50) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_38) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_9) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        resume;
    }

    bb100: {
        _156 = const false;
        goto -> bb56;
    }

    bb101: {
        drop((_93.0: std::string::String)) -> [return: bb100, unwind: bb93];
    }

    bb102: {
        switchInt(_157) -> [0: bb87, otherwise: bb103];
    }

    bb103: {
        drop(((_2 as Some).0: std::string::String)) -> [return: bb87, unwind continue];
    }

    bb104 (cleanup): {
        drop((_93.0: std::string::String)) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_156) -> [0: bb93, otherwise: bb104];
    }

    bb106 (cleanup): {
        drop(_3) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        switchInt(_158) -> [0: bb110, otherwise: bb106];
    }

    bb108 (cleanup): {
        switchInt(_157) -> [0: bb99, otherwise: bb109];
    }

    bb109 (cleanup): {
        drop(((_2 as Some).0: std::string::String)) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        _160 = discriminant(_2);
        switchInt(move _160) -> [1: bb108, otherwise: bb99];
    }

    bb111: {
        goto -> bb23;
    }

    bb112: {
        goto -> bb23;
    }

    bb113: {
        goto -> bb68;
    }
}

promoted[0] in prompt_for_completion: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const " ", const "  ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in prompt_for_completion: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[2] in prompt_for_completion: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in prompt_for_completion: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "or jump into the next one by removing the ", const " comment:\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in prompt_for_completion: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "You can keep working on this exercise,\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in prompt_for_completion: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in prompt_for_completion: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in prompt_for_completion: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in prompt_for_completion: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[9] in prompt_for_completion: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Output:\n"];
        _0 = &_1;
        return;
    }
}

promoted[10] in prompt_for_completion: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[11] in prompt_for_completion: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "~*~ ", const " ~*~\n"];
        _0 = &_1;
        return;
    }
}

promoted[12] in prompt_for_completion: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "🎉 🎉  ", const " 🎉 🎉\n"];
        _0 = &_1;
        return;
    }
}

promoted[13] in prompt_for_completion: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

fn separator() -> StyledObject<&str> {
    let mut _0: console::StyledObject<&str>;
    let mut _1: console::StyledObject<&str>;

    bb0: {
        _1 = style::<&str>(const "====================") -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = StyledObject::<&str>::bold(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

const VERSION: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "4.6.0";
        return;
    }
}

fn <impl at src/main.rs:29:10: 29:18>::from_args(_1: &[&str], _2: &[&str]) -> Result<Args, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<Args, argh::EarlyExit>;
    let mut _3: bool;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _7: std::result::Result<(), argh::EarlyExit>;
    let mut _8: &[&str];
    let mut _9: argh::ParseStructOptions<'_>;
    let mut _10: &[(&str, usize)];
    let mut _11: &mut [argh::ParseStructOption<'_>];
    let mut _12: &mut [argh::ParseStructOption<'_>; 2];
    let mut _13: [argh::ParseStructOption<'_>; 2];
    let mut _14: argh::ParseStructOption<'_>;
    let mut _15: &mut dyn argh::ParseFlag;
    let mut _16: &mut bool;
    let mut _17: argh::ParseStructOption<'_>;
    let mut _18: &mut dyn argh::ParseFlag;
    let mut _19: &mut bool;
    let mut _20: argh::ParseStructPositionals<'_>;
    let mut _21: &mut [argh::ParseStructPositional<'_>];
    let mut _22: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _23: argh::ParseStructSubCommand<'_>;
    let mut _24: &mut dyn for<'a, 'b, 'c, 'd> std::ops::FnMut(&'a [&'b str], &'c [&'d str]) -> std::result::Result<(), argh::EarlyExit>;
    let mut _25: &mut {closure@src/main.rs:29:10: 29:18};
    let mut _26: {closure@src/main.rs:29:10: 29:18};
    let mut _27: &mut std::option::Option<Subcommands>;
    let mut _28: &dyn std::ops::Fn() -> std::string::String;
    let _29: &{closure@src/main.rs:29:10: 29:18};
    let _30: {closure@src/main.rs:29:10: 29:18};
    let mut _31: &&[&str];
    let mut _32: isize;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _36: std::result::Result<(), std::string::String>;
    let mut _37: &argh::MissingRequirements;
    let mut _38: isize;
    let mut _40: Args;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: std::option::Option<Subcommands>;
    let mut _46: bool;
    scope 1 {
        debug nocapture => _3;
        let mut _4: bool;
        scope 2 {
            debug version => _4;
            let mut _5: std::option::Option<Subcommands>;
            scope 3 {
                debug nested => _5;
                let _33: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
                let mut _34: argh::MissingRequirements;
                let mut _44: &mut [argh::ParseStructPositional<'_>; 0];
                let mut _45: &[(&str, usize); 3];
                scope 4 {
                    debug residual => _33;
                    scope 5 {
                    }
                }
                scope 6 {
                    debug val => const ();
                    scope 7 {
                    }
                }
                scope 8 {
                    debug __missing_requirements => _34;
                    let _39: std::result::Result<std::convert::Infallible, std::string::String>;
                    scope 9 {
                        debug residual => _39;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => const ();
                        scope 12 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _46 = const false;
        _3 = <bool as argh::Flag>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <bool as argh::Flag>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        _46 = const true;
        _5 = std::option::Option::<Subcommands>::None;
        _8 = _1;
        _45 = const _;
        _10 = _45 as &[(&str, usize)] (PointerCoercion(Unsize));
        _16 = &mut _3;
        _15 = _16 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _14 = ParseStructOption::<'_>::Flag(move _15);
        _19 = &mut _4;
        _18 = _19 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _17 = ParseStructOption::<'_>::Flag(move _18);
        _13 = [move _14, move _17];
        _12 = &mut _13;
        _11 = _12 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _9 = ParseStructOptions::<'_> { arg_to_slot: move _10, slots: move _11 };
        _44 = const _;
        _21 = _44 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _20 = ParseStructPositionals::<'_> { positionals: move _21, last_is_repeating: const false };
        _27 = &mut _5;
        _26 = {closure@src/main.rs:29:10: 29:18} { nested: move _27 };
        _25 = &mut _26;
        _24 = _25 as &mut dyn for<'a, 'b, 'c, 'd> std::ops::FnMut(&'a [&'b str], &'c [&'d str]) -> std::result::Result<(), argh::EarlyExit> (PointerCoercion(Unsize));
        _23 = ParseStructSubCommand::<'_> { subcommands: const _, parse_func: move _24 };
        _22 = std::option::Option::<ParseStructSubCommand<'_>>::Some(move _23);
        _31 = &_1;
        _30 = {closure@src/main.rs:29:10: 29:18} { __cmd_name: move _31 };
        _29 = &_30;
        _28 = _29 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _7 = parse_struct_args(move _8, _2, move _9, move _20, move _22, move _28) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _6 = <Result<(), EarlyExit> as Try>::branch(move _7) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _32 = discriminant(_6);
        switchInt(move _32) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _34 = <MissingRequirements as Default>::default() -> [return: bb8, unwind: bb21];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _33 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Args, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _33) -> [return: bb22, unwind: bb21];
    }

    bb8: {
        _37 = &_34;
        _36 = MissingRequirements::err_on_any(move _37) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _35 = <Result<(), std::string::String> as Try>::branch(move _36) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        _41 = _3;
        _42 = _4;
        _46 = const false;
        _43 = move _5;
        _40 = Args { nocapture: move _41, version: move _42, nested: move _43 };
        _0 = Result::<Args, EarlyExit>::Ok(move _40);
        drop(_34) -> [return: bb14, unwind: bb21];
    }

    bb12: {
        _39 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Args, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _39) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        drop(_34) -> [return: bb15, unwind: bb21];
    }

    bb14: {
        _46 = const false;
        goto -> bb17;
    }

    bb15: {
        drop(_5) -> [return: bb16, unwind continue];
    }

    bb16: {
        _46 = const false;
        goto -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_34) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        drop(_5) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_46) -> [0: bb19, otherwise: bb20];
    }

    bb22: {
        goto -> bb15;
    }
}

promoted[0] in <impl at src/main.rs:29:10: 29:18>::from_args: &mut [ParseStructPositional<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _1: [argh::ParseStructPositional<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:29:10: 29:18>::from_args: &[(&str, usize); 3] = {
    let mut _0: &[(&str, usize); 3];
    let mut _1: [(&str, usize); 3];
    let mut _2: (&str, usize);
    let mut _3: (&str, usize);
    let mut _4: (&str, usize);

    bb0: {
        _2 = (const "--nocapture", const 0_usize);
        _3 = (const "-v", const 1_usize);
        _4 = (const "--version", const 1_usize);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:29:10: 29:18>::from_args::{closure#0}(_1: &mut {closure@src/main.rs:29:10: 29:18}, _2: &[&str], _3: &[&str]) -> Result<(), EarlyExit> {
    debug __command => _2;
    debug __remaining_args => _3;
    debug nested => (*((*_1).0: &mut std::option::Option<Subcommands>));
    let mut _0: std::result::Result<(), argh::EarlyExit>;
    let mut _4: std::option::Option<Subcommands>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>, Subcommands>;
    let mut _6: std::result::Result<Subcommands, argh::EarlyExit>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
    let _9: Subcommands;
    let mut _10: &mut std::option::Option<Subcommands>;
    let mut _11: &mut std::option::Option<Subcommands>;
    let mut _12: &mut std::option::Option<Subcommands>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;
        scope 4 {
        }
    }

    bb0: {
        _6 = <Subcommands as FromArgs>::from_args(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <Result<Subcommands, EarlyExit> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_5 as Continue).0: Subcommands);
        _4 = std::option::Option::<Subcommands>::Some(move _9);
        _10 = deref_copy ((*_1).0: &mut std::option::Option<Subcommands>);
        drop((*_10)) -> [return: bb6, unwind: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<(), EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _8) -> [return: bb8, unwind continue];
    }

    bb6: {
        _11 = deref_copy ((*_1).0: &mut std::option::Option<Subcommands>);
        (*_11) = move _4;
        _0 = Result::<(), EarlyExit>::Ok(const ());
        goto -> bb8;
    }

    bb7 (cleanup): {
        _12 = deref_copy ((*_1).0: &mut std::option::Option<Subcommands>);
        (*_12) = move _4;
        resume;
    }

    bb8: {
        return;
    }
}

fn <impl at src/main.rs:29:10: 29:18>::from_args::{closure#1}(_1: &{closure@src/main.rs:29:10: 29:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let _3: &[&argh_shared::CommandInfo<'_>];
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 2];
    let _9: [core::fmt::rt::Argument<'_>; 2];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;
    let _12: std::string::String;
    let _13: &str;
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &std::string::String;
    let mut _17: &&[&str];
    let mut _18: &[&str];
    scope 1 {
        debug subcommands => _2;
        let _4: std::string::String;
        let mut _16: &[&str; 3];
        scope 2 {
            debug res => _4;
        }
    }

    bb0: {
        _3 = const _;
        _2 = print_subcommands(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _16 = const _;
        _6 = _16 as &[&str] (PointerCoercion(Unsize));
        _17 = deref_copy ((*_1).0: &&[&str]);
        _18 = deref_copy (*_17);
        _13 = const " ";
        _12 = slice::<impl [&str]>::join::<&str>(_18, _13) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_11) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _15 = &_2;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_15) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _9 = [move _10, move _14];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _4 = format(move _5) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        drop(_12) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = move _4;
        drop(_2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_12) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:29:10: 29:18>::from_args::{closure#1}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Usage: ", const " [--nocapture] [-v] [<command>] [<args>]\n\nRustlings is a collection of small exercises to get you used to writing and reading Rust code\n\nOptions:\n  --nocapture       show outputs from the test exercises\n  -v, --version     show the executable version\n  --help            display usage information\n\nCommands:", const "\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:29:10: 29:18>::redact_arg_values(_1: &[&str], _2: &[&str]) -> Result<Vec<std::string::String>, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::string::String>, argh::EarlyExit>;
    let mut _3: argh::RedactFlag;
    let mut _4: std::option::Option<std::string::String>;
    let mut _6: std::option::Option<std::string::String>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _9: std::result::Result<(), argh::EarlyExit>;
    let mut _10: &[&str];
    let mut _11: argh::ParseStructOptions<'_>;
    let mut _12: &[(&str, usize)];
    let mut _13: &mut [argh::ParseStructOption<'_>];
    let mut _14: &mut [argh::ParseStructOption<'_>; 2];
    let mut _15: [argh::ParseStructOption<'_>; 2];
    let mut _16: argh::ParseStructOption<'_>;
    let mut _17: &mut dyn argh::ParseFlag;
    let mut _18: &mut argh::RedactFlag;
    let mut _19: argh::ParseStructOption<'_>;
    let mut _20: &mut dyn argh::ParseFlag;
    let mut _21: &mut argh::RedactFlag;
    let mut _22: argh::ParseStructPositionals<'_>;
    let mut _23: &mut [argh::ParseStructPositional<'_>];
    let mut _24: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _25: argh::ParseStructSubCommand<'_>;
    let mut _26: &mut dyn for<'a, 'b, 'c, 'd> std::ops::FnMut(&'a [&'b str], &'c [&'d str]) -> std::result::Result<(), argh::EarlyExit>;
    let mut _27: &mut {closure@src/main.rs:29:10: 29:18};
    let mut _28: {closure@src/main.rs:29:10: 29:18};
    let mut _29: &mut std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _30: &dyn std::ops::Fn() -> std::string::String;
    let _31: &{closure@src/main.rs:29:10: 29:18};
    let _32: {closure@src/main.rs:29:10: 29:18};
    let mut _33: &&[&str];
    let mut _34: isize;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _38: std::result::Result<(), std::string::String>;
    let mut _39: &argh::MissingRequirements;
    let mut _40: isize;
    let mut _43: std::boxed::Box<[std::string::String]>;
    let mut _44: std::boxed::Box<[std::string::String; 1]>;
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: *mut u8;
    let mut _48: std::boxed::Box<[std::string::String; 1]>;
    let mut _49: std::string::String;
    let _50: &&str;
    let mut _51: std::option::Option<&&str>;
    let mut _52: &[&str];
    let _53: &str;
    let mut _54: isize;
    let _56: ();
    let mut _57: &mut std::vec::Vec<std::string::String>;
    let mut _58: isize;
    let _60: ();
    let mut _61: &mut std::vec::Vec<std::string::String>;
    let mut _62: isize;
    let _64: ();
    let mut _65: &mut std::vec::Vec<std::string::String>;
    let mut _66: std::vec::IntoIter<std::string::String>;
    let mut _67: std::vec::Vec<std::string::String>;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: &mut std::boxed::Box<[std::string::String; 1]>;
    let mut _77: ();
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: *const [std::string::String; 1];
    scope 1 {
        debug nocapture => _3;
        let mut _5: argh::RedactFlag;
        scope 2 {
            debug version => _5;
            let mut _7: std::option::Option<std::vec::Vec<std::string::String>>;
            scope 3 {
                debug nested => _7;
                let _35: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
                let mut _36: argh::MissingRequirements;
                let mut _68: &mut [argh::ParseStructPositional<'_>; 0];
                let mut _69: &[(&str, usize); 3];
                scope 4 {
                    debug residual => _35;
                    scope 5 {
                    }
                }
                scope 6 {
                    debug val => const ();
                    scope 7 {
                    }
                }
                scope 8 {
                    debug __missing_requirements => _36;
                    let _41: std::result::Result<std::convert::Infallible, std::string::String>;
                    let mut _42: std::vec::Vec<std::string::String>;
                    let mut _82: *const ();
                    let mut _83: usize;
                    let mut _84: usize;
                    let mut _85: usize;
                    let mut _86: usize;
                    let mut _87: bool;
                    scope 9 {
                        debug residual => _41;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => const ();
                        scope 12 {
                        }
                    }
                    scope 13 {
                        debug __redacted => _42;
                        scope 15 {
                            debug __field_name => _55;
                            let _55: std::string::String;
                        }
                        scope 16 {
                            debug __field_name => _59;
                            let _59: std::string::String;
                        }
                        scope 17 {
                            debug __subcommand_args => _63;
                            let _63: std::vec::Vec<std::string::String>;
                        }
                    }
                    scope 14 {
                    }
                }
            }
        }
    }

    bb0: {
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _4 = std::option::Option::<std::string::String>::None;
        _72 = const true;
        _3 = RedactFlag { slot: move _4 };
        _6 = std::option::Option::<std::string::String>::None;
        _71 = const true;
        _5 = RedactFlag { slot: move _6 };
        _70 = const true;
        _7 = std::option::Option::<Vec<std::string::String>>::None;
        _10 = _1;
        _69 = const _;
        _12 = _69 as &[(&str, usize)] (PointerCoercion(Unsize));
        _18 = &mut _3;
        _17 = _18 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _16 = ParseStructOption::<'_>::Flag(move _17);
        _21 = &mut _5;
        _20 = _21 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _19 = ParseStructOption::<'_>::Flag(move _20);
        _15 = [move _16, move _19];
        _14 = &mut _15;
        _13 = _14 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _11 = ParseStructOptions::<'_> { arg_to_slot: move _12, slots: move _13 };
        _68 = const _;
        _23 = _68 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _22 = ParseStructPositionals::<'_> { positionals: move _23, last_is_repeating: const false };
        _29 = &mut _7;
        _28 = {closure@src/main.rs:29:10: 29:18} { nested: move _29 };
        _27 = &mut _28;
        _26 = _27 as &mut dyn for<'a, 'b, 'c, 'd> std::ops::FnMut(&'a [&'b str], &'c [&'d str]) -> std::result::Result<(), argh::EarlyExit> (PointerCoercion(Unsize));
        _25 = ParseStructSubCommand::<'_> { subcommands: const _, parse_func: move _26 };
        _24 = std::option::Option::<ParseStructSubCommand<'_>>::Some(move _25);
        _33 = &_1;
        _32 = {closure@src/main.rs:29:10: 29:18} { __cmd_name: move _33 };
        _31 = &_32;
        _30 = _31 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _9 = parse_struct_args(move _10, _2, move _11, move _22, move _24, move _30) -> [return: bb1, unwind: bb45];
    }

    bb1: {
        _8 = <Result<(), EarlyExit> as Try>::branch(move _9) -> [return: bb2, unwind: bb45];
    }

    bb2: {
        _34 = discriminant(_8);
        switchInt(move _34) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _36 = <MissingRequirements as Default>::default() -> [return: bb6, unwind: bb45];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _35 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _35) -> [return: bb53, unwind: bb45];
    }

    bb6: {
        _39 = &_36;
        _38 = MissingRequirements::err_on_any(move _39) -> [return: bb7, unwind: bb31];
    }

    bb7: {
        _37 = <Result<(), std::string::String> as Try>::branch(move _38) -> [return: bb8, unwind: bb31];
    }

    bb8: {
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _45 = SizeOf([std::string::String; 1]);
        _46 = AlignOf([std::string::String; 1]);
        _47 = alloc::alloc::exchange_malloc(move _45, move _46) -> [return: bb12, unwind: bb31];
    }

    bb10: {
        _41 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _41) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        drop(_36) -> [return: bb25, unwind: bb45];
    }

    bb12: {
        _48 = ShallowInitBox(move _47, [std::string::String; 1]);
        _52 = _1;
        _51 = core::slice::<impl [&str]>::last(move _52) -> [return: bb13, unwind: bb42];
    }

    bb13: {
        _53 = const "no command name";
        _50 = std::option::Option::<&&str>::expect(move _51, _53) -> [return: bb14, unwind: bb42];
    }

    bb14: {
        _49 = <&str as ToString>::to_string(_50) -> [return: bb15, unwind: bb42];
    }

    bb15: {
        _81 = (((_48.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]);
        _82 = _81 as *const () (PtrToPtr);
        _83 = _82 as usize (Transmute);
        _84 = AlignOf([std::string::String; 1]);
        _85 = Sub(_84, const 1_usize);
        _86 = BitAnd(_83, _85);
        _87 = Eq(_86, const 0_usize);
        assert(_87, "misaligned pointer dereference: address must be a multiple of {} but is {}", _84, _83) -> [success: bb52, unwind unreachable];
    }

    bb16: {
        _54 = discriminant((_3.0: std::option::Option<std::string::String>));
        switchInt(move _54) -> [1: bb17, otherwise: bb18];
    }

    bb17: {
        _72 = const false;
        _55 = move (((_3.0: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _57 = &mut _42;
        _56 = Vec::<std::string::String>::push(move _57, move _55) -> [return: bb54, unwind: bb30];
    }

    bb18: {
        _58 = discriminant((_5.0: std::option::Option<std::string::String>));
        switchInt(move _58) -> [1: bb19, otherwise: bb20];
    }

    bb19: {
        _71 = const false;
        _59 = move (((_5.0: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _61 = &mut _42;
        _60 = Vec::<std::string::String>::push(move _61, move _59) -> [return: bb55, unwind: bb30];
    }

    bb20: {
        _62 = discriminant(_7);
        switchInt(move _62) -> [1: bb21, otherwise: bb23];
    }

    bb21: {
        _70 = const false;
        _63 = move ((_7 as Some).0: std::vec::Vec<std::string::String>);
        _65 = &mut _42;
        _66 = <Vec<std::string::String> as IntoIterator>::into_iter(move _63) -> [return: bb22, unwind: bb30];
    }

    bb22: {
        _64 = <Vec<std::string::String> as Extend<std::string::String>>::extend::<std::vec::IntoIter<std::string::String>>(move _65, move _66) -> [return: bb56, unwind: bb30];
    }

    bb23: {
        _67 = move _42;
        _0 = Result::<Vec<std::string::String>, EarlyExit>::Ok(move _67);
        drop(_36) -> [return: bb24, unwind: bb45];
    }

    bb24: {
        _73 = discriminant(_7);
        switchInt(move _73) -> [1: bb34, otherwise: bb33];
    }

    bb25: {
        drop(_7) -> [return: bb26, unwind: bb48];
    }

    bb26: {
        _70 = const false;
        drop(_5) -> [return: bb27, unwind: bb51];
    }

    bb27: {
        _71 = const false;
        drop(_3) -> [return: bb28, unwind continue];
    }

    bb28: {
        _72 = const false;
        goto -> bb29;
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_42) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_36) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        resume;
    }

    bb33: {
        _70 = const false;
        _74 = discriminant((_5.0: std::option::Option<std::string::String>));
        switchInt(move _74) -> [1: bb37, otherwise: bb36];
    }

    bb34: {
        switchInt(_70) -> [0: bb33, otherwise: bb35];
    }

    bb35: {
        drop(((_7 as Some).0: std::vec::Vec<std::string::String>)) -> [return: bb33, unwind: bb48];
    }

    bb36: {
        _71 = const false;
        _75 = discriminant((_3.0: std::option::Option<std::string::String>));
        switchInt(move _75) -> [1: bb40, otherwise: bb39];
    }

    bb37: {
        switchInt(_71) -> [0: bb36, otherwise: bb38];
    }

    bb38: {
        drop((((_5.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb36, unwind: bb51];
    }

    bb39: {
        _72 = const false;
        goto -> bb29;
    }

    bb40: {
        switchInt(_72) -> [0: bb39, otherwise: bb41];
    }

    bb41: {
        drop((((_3.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb39, unwind continue];
    }

    bb42 (cleanup): {
        _76 = &mut _48;
        _77 = <Box<[std::string::String; 1]> as Drop>::drop(move _76) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_70) -> [0: bb48, otherwise: bb44];
    }

    bb44 (cleanup): {
        drop(((_7 as Some).0: std::vec::Vec<std::string::String>)) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        _78 = discriminant(_7);
        switchInt(move _78) -> [1: bb43, otherwise: bb48];
    }

    bb46 (cleanup): {
        switchInt(_71) -> [0: bb51, otherwise: bb47];
    }

    bb47 (cleanup): {
        drop((((_5.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        _79 = discriminant((_5.0: std::option::Option<std::string::String>));
        switchInt(move _79) -> [1: bb46, otherwise: bb51];
    }

    bb49 (cleanup): {
        switchInt(_72) -> [0: bb32, otherwise: bb50];
    }

    bb50 (cleanup): {
        drop((((_3.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        _80 = discriminant((_3.0: std::option::Option<std::string::String>));
        switchInt(move _80) -> [1: bb49, otherwise: bb32];
    }

    bb52: {
        (*_81) = [move _49];
        _44 = move _48;
        _43 = move _44 as std::boxed::Box<[std::string::String]> (PointerCoercion(Unsize));
        _42 = slice::<impl [std::string::String]>::into_vec::<std::alloc::Global>(move _43) -> [return: bb16, unwind: bb31];
    }

    bb53: {
        goto -> bb25;
    }

    bb54: {
        goto -> bb18;
    }

    bb55: {
        goto -> bb20;
    }

    bb56: {
        goto -> bb23;
    }

    bb57 (cleanup): {
        goto -> bb31;
    }
}

promoted[0] in <impl at src/main.rs:29:10: 29:18>::redact_arg_values: &mut [ParseStructPositional<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _1: [argh::ParseStructPositional<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:29:10: 29:18>::redact_arg_values: &[(&str, usize); 3] = {
    let mut _0: &[(&str, usize); 3];
    let mut _1: [(&str, usize); 3];
    let mut _2: (&str, usize);
    let mut _3: (&str, usize);
    let mut _4: (&str, usize);

    bb0: {
        _2 = (const "--nocapture", const 0_usize);
        _3 = (const "-v", const 1_usize);
        _4 = (const "--version", const 1_usize);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:29:10: 29:18>::redact_arg_values::{closure#0}(_1: &mut {closure@src/main.rs:29:10: 29:18}, _2: &[&str], _3: &[&str]) -> Result<(), EarlyExit> {
    debug __command => _2;
    debug __remaining_args => _3;
    debug nested => (*((*_1).0: &mut std::option::Option<std::vec::Vec<std::string::String>>));
    let mut _0: std::result::Result<(), argh::EarlyExit>;
    let mut _4: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>, std::vec::Vec<std::string::String>>;
    let mut _6: std::result::Result<std::vec::Vec<std::string::String>, argh::EarlyExit>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
    let _9: std::vec::Vec<std::string::String>;
    let mut _10: &mut std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _11: &mut std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _12: &mut std::option::Option<std::vec::Vec<std::string::String>>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;
        scope 4 {
        }
    }

    bb0: {
        _6 = <Subcommands as FromArgs>::redact_arg_values(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <Result<Vec<std::string::String>, EarlyExit> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_5 as Continue).0: std::vec::Vec<std::string::String>);
        _4 = std::option::Option::<Vec<std::string::String>>::Some(move _9);
        _10 = deref_copy ((*_1).0: &mut std::option::Option<std::vec::Vec<std::string::String>>);
        drop((*_10)) -> [return: bb6, unwind: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<(), EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _8) -> [return: bb8, unwind continue];
    }

    bb6: {
        _11 = deref_copy ((*_1).0: &mut std::option::Option<std::vec::Vec<std::string::String>>);
        (*_11) = move _4;
        _0 = Result::<(), EarlyExit>::Ok(const ());
        goto -> bb8;
    }

    bb7 (cleanup): {
        _12 = deref_copy ((*_1).0: &mut std::option::Option<std::vec::Vec<std::string::String>>);
        (*_12) = move _4;
        resume;
    }

    bb8: {
        return;
    }
}

fn <impl at src/main.rs:29:10: 29:18>::redact_arg_values::{closure#1}(_1: &{closure@src/main.rs:29:10: 29:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let _3: &[&argh_shared::CommandInfo<'_>];
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 2];
    let _9: [core::fmt::rt::Argument<'_>; 2];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;
    let _12: std::string::String;
    let _13: &str;
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &std::string::String;
    let mut _17: &&[&str];
    let mut _18: &[&str];
    scope 1 {
        debug subcommands => _2;
        let _4: std::string::String;
        let mut _16: &[&str; 3];
        scope 2 {
            debug res => _4;
        }
    }

    bb0: {
        _3 = const _;
        _2 = print_subcommands(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _16 = const _;
        _6 = _16 as &[&str] (PointerCoercion(Unsize));
        _17 = deref_copy ((*_1).0: &&[&str]);
        _18 = deref_copy (*_17);
        _13 = const " ";
        _12 = slice::<impl [&str]>::join::<&str>(_18, _13) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_11) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _15 = &_2;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_15) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _9 = [move _10, move _14];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _4 = format(move _5) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        drop(_12) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = move _4;
        drop(_2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_12) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:29:10: 29:18>::redact_arg_values::{closure#1}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Usage: ", const " [--nocapture] [-v] [<command>] [<args>]\n\nRustlings is a collection of small exercises to get you used to writing and reading Rust code\n\nOptions:\n  --nocapture       show outputs from the test exercises\n  -v, --version     show the executable version\n  --help            display usage information\n\nCommands:", const "\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:29:20: 29:29>::eq(_1: &Args, _2: &Args) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: &std::option::Option<Subcommands>;
    let mut _10: &std::option::Option<Subcommands>;

    bb0: {
        _4 = ((*_1).0: bool);
        _5 = ((*_2).0: bool);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _7 = ((*_1).1: bool);
        _8 = ((*_2).1: bool);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = &((*_1).2: std::option::Option<Subcommands>);
        _10 = &((*_2).2: std::option::Option<Subcommands>);
        _0 = <std::option::Option<Subcommands> as PartialEq>::eq(move _9, move _10) -> [return: bb4, unwind continue];
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at src/main.rs:29:31: 29:36>::fmt(_1: &Args, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &bool;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &bool;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&std::option::Option<Subcommands>;
    let _13: &std::option::Option<Subcommands>;

    bb0: {
        _3 = const "Args";
        _4 = const "nocapture";
        _6 = &((*_1).0: bool);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "version";
        _9 = &((*_1).1: bool);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "nested";
        _13 = &((*_1).2: std::option::Option<Subcommands>);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:42:10: 42:18>::from_args(_1: &[&str], _2: &[&str]) -> Result<Subcommands, EarlyExit> {
    debug command_name => _1;
    debug args => _2;
    let mut _0: std::result::Result<Subcommands, argh::EarlyExit>;
    let _3: &str;
    let mut _4: &&str;
    let mut _5: std::option::Option<&&str>;
    let _6: &str;
    let mut _7: bool;
    let mut _8: &&str;
    let mut _9: &&str;
    let _10: &argh_shared::CommandInfo<'_>;
    let mut _11: Subcommands;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>, VerifyArgs>;
    let mut _13: std::result::Result<VerifyArgs, argh::EarlyExit>;
    let mut _14: isize;
    let mut _16: bool;
    let mut _17: &&str;
    let mut _18: &&str;
    let _19: &argh_shared::CommandInfo<'_>;
    let mut _20: Subcommands;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>, WatchArgs>;
    let mut _22: std::result::Result<WatchArgs, argh::EarlyExit>;
    let mut _23: isize;
    let mut _25: bool;
    let mut _26: &&str;
    let mut _27: &&str;
    let _28: &argh_shared::CommandInfo<'_>;
    let mut _29: Subcommands;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>, RunArgs>;
    let mut _31: std::result::Result<RunArgs, argh::EarlyExit>;
    let mut _32: isize;
    let mut _35: bool;
    let mut _36: &&str;
    let mut _37: &&str;
    let _38: &argh_shared::CommandInfo<'_>;
    let mut _39: Subcommands;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>, HintArgs>;
    let mut _41: std::result::Result<HintArgs, argh::EarlyExit>;
    let mut _42: isize;
    let mut _45: bool;
    let mut _46: &&str;
    let mut _47: &&str;
    let _48: &argh_shared::CommandInfo<'_>;
    let mut _49: Subcommands;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>, ListArgs>;
    let mut _51: std::result::Result<ListArgs, argh::EarlyExit>;
    let mut _52: isize;
    let _55: !;
    scope 1 {
        debug subcommand_name => _3;
        let _15: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
        let _24: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
        let _33: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
        let _34: RunArgs;
        let _43: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
        let _44: HintArgs;
        let _53: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
        let _54: ListArgs;
        let mut _56: &&str;
        scope 2 {
            debug residual => _15;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const VerifyArgs {{  }};
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _24;
            scope 7 {
            }
        }
        scope 8 {
            debug val => const WatchArgs {{  }};
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _33;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _34;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _43;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _44;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _53;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _54;
            scope 21 {
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [&str]>::last(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = const "no subcommand name";
        _4 = std::option::Option::<&&str>::expect(move _5, _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = (*_4);
        _8 = &_3;
        _10 = const _;
        _9 = &((*_10).0: &str);
        _7 = <&str as PartialEq>::eq(move _8, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _7) -> [0: bb10, otherwise: bb4];
    }

    bb4: {
        _13 = <VerifyArgs as FromArgs>::from_args(_1, _2) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = <Result<VerifyArgs, EarlyExit> as Try>::branch(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        _11 = Subcommands::Verify(const VerifyArgs {{  }});
        _0 = Result::<Subcommands, EarlyExit>::Ok(move _11);
        goto -> bb39;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _15 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Subcommands, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _15) -> [return: bb39, unwind continue];
    }

    bb10: {
        _17 = &_3;
        _19 = const _;
        _18 = &((*_19).0: &str);
        _16 = <&str as PartialEq>::eq(move _17, move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _16) -> [0: bb17, otherwise: bb12];
    }

    bb12: {
        _22 = <WatchArgs as FromArgs>::from_args(_1, _2) -> [return: bb13, unwind continue];
    }

    bb13: {
        _21 = <Result<WatchArgs, EarlyExit> as Try>::branch(move _22) -> [return: bb14, unwind continue];
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb15, 1: bb16, otherwise: bb8];
    }

    bb15: {
        _20 = Subcommands::Watch(const WatchArgs {{  }});
        _0 = Result::<Subcommands, EarlyExit>::Ok(move _20);
        goto -> bb39;
    }

    bb16: {
        _24 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Subcommands, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _24) -> [return: bb39, unwind continue];
    }

    bb17: {
        _26 = &_3;
        _28 = const _;
        _27 = &((*_28).0: &str);
        _25 = <&str as PartialEq>::eq(move _26, move _27) -> [return: bb18, unwind continue];
    }

    bb18: {
        switchInt(move _25) -> [0: bb24, otherwise: bb19];
    }

    bb19: {
        _31 = <RunArgs as FromArgs>::from_args(_1, _2) -> [return: bb20, unwind continue];
    }

    bb20: {
        _30 = <Result<RunArgs, EarlyExit> as Try>::branch(move _31) -> [return: bb21, unwind continue];
    }

    bb21: {
        _32 = discriminant(_30);
        switchInt(move _32) -> [0: bb22, 1: bb23, otherwise: bb8];
    }

    bb22: {
        _34 = move ((_30 as Continue).0: RunArgs);
        _29 = Subcommands::Run(move _34);
        _0 = Result::<Subcommands, EarlyExit>::Ok(move _29);
        goto -> bb39;
    }

    bb23: {
        _33 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Subcommands, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _33) -> [return: bb39, unwind continue];
    }

    bb24: {
        _36 = &_3;
        _38 = const _;
        _37 = &((*_38).0: &str);
        _35 = <&str as PartialEq>::eq(move _36, move _37) -> [return: bb25, unwind continue];
    }

    bb25: {
        switchInt(move _35) -> [0: bb31, otherwise: bb26];
    }

    bb26: {
        _41 = <HintArgs as FromArgs>::from_args(_1, _2) -> [return: bb27, unwind continue];
    }

    bb27: {
        _40 = <Result<HintArgs, EarlyExit> as Try>::branch(move _41) -> [return: bb28, unwind continue];
    }

    bb28: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb29, 1: bb30, otherwise: bb8];
    }

    bb29: {
        _44 = move ((_40 as Continue).0: HintArgs);
        _39 = Subcommands::Hint(move _44);
        _0 = Result::<Subcommands, EarlyExit>::Ok(move _39);
        goto -> bb39;
    }

    bb30: {
        _43 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Subcommands, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _43) -> [return: bb39, unwind continue];
    }

    bb31: {
        _46 = &_3;
        _48 = const _;
        _47 = &((*_48).0: &str);
        _45 = <&str as PartialEq>::eq(move _46, move _47) -> [return: bb32, unwind continue];
    }

    bb32: {
        switchInt(move _45) -> [0: bb38, otherwise: bb33];
    }

    bb33: {
        _51 = <ListArgs as FromArgs>::from_args(_1, _2) -> [return: bb34, unwind continue];
    }

    bb34: {
        _50 = <Result<ListArgs, EarlyExit> as Try>::branch(move _51) -> [return: bb35, unwind continue];
    }

    bb35: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb36, 1: bb37, otherwise: bb8];
    }

    bb36: {
        _54 = move ((_50 as Continue).0: ListArgs);
        _49 = Subcommands::List(move _54);
        _0 = Result::<Subcommands, EarlyExit>::Ok(move _49);
        goto -> bb39;
    }

    bb37: {
        _53 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Subcommands, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _53) -> [return: bb39, unwind continue];
    }

    bb38: {
        _56 = const _;
        _55 = core::panicking::unreachable_display::<&str>(_56) -> unwind continue;
    }

    bb39: {
        return;
    }
}

promoted[0] in <impl at src/main.rs:42:10: 42:18>::from_args: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "no subcommand matched";
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:42:10: 42:18>::redact_arg_values(_1: &[&str], _2: &[&str]) -> Result<Vec<std::string::String>, EarlyExit> {
    debug command_name => _1;
    debug args => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::string::String>, argh::EarlyExit>;
    let _3: &str;
    let mut _4: &&str;
    let mut _5: std::option::Option<&&str>;
    let _6: &str;
    let mut _7: bool;
    let mut _8: &&str;
    let mut _9: &&str;
    let _10: &argh_shared::CommandInfo<'_>;
    let mut _11: bool;
    let mut _12: &&str;
    let mut _13: &&str;
    let _14: &argh_shared::CommandInfo<'_>;
    let mut _15: bool;
    let mut _16: &&str;
    let mut _17: &&str;
    let _18: &argh_shared::CommandInfo<'_>;
    let mut _19: bool;
    let mut _20: &&str;
    let mut _21: &&str;
    let _22: &argh_shared::CommandInfo<'_>;
    let mut _23: bool;
    let mut _24: &&str;
    let mut _25: &&str;
    let _26: &argh_shared::CommandInfo<'_>;
    let _27: !;
    scope 1 {
        debug subcommand_name => _3;
        let mut _28: &&str;
    }

    bb0: {
        _5 = core::slice::<impl [&str]>::last(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = const "no subcommand name";
        _4 = std::option::Option::<&&str>::expect(move _5, _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = (*_4);
        _8 = &_3;
        _10 = const _;
        _9 = &((*_10).0: &str);
        _7 = <&str as PartialEq>::eq(move _8, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _0 = <VerifyArgs as FromArgs>::redact_arg_values(_1, _2) -> [return: bb18, unwind continue];
    }

    bb5: {
        _12 = &_3;
        _14 = const _;
        _13 = &((*_14).0: &str);
        _11 = <&str as PartialEq>::eq(move _12, move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _11) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _0 = <WatchArgs as FromArgs>::redact_arg_values(_1, _2) -> [return: bb18, unwind continue];
    }

    bb8: {
        _16 = &_3;
        _18 = const _;
        _17 = &((*_18).0: &str);
        _15 = <&str as PartialEq>::eq(move _16, move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _15) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _0 = <RunArgs as FromArgs>::redact_arg_values(_1, _2) -> [return: bb18, unwind continue];
    }

    bb11: {
        _20 = &_3;
        _22 = const _;
        _21 = &((*_22).0: &str);
        _19 = <&str as PartialEq>::eq(move _20, move _21) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt(move _19) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _0 = <HintArgs as FromArgs>::redact_arg_values(_1, _2) -> [return: bb18, unwind continue];
    }

    bb14: {
        _24 = &_3;
        _26 = const _;
        _25 = &((*_26).0: &str);
        _23 = <&str as PartialEq>::eq(move _24, move _25) -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _23) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _0 = <ListArgs as FromArgs>::redact_arg_values(_1, _2) -> [return: bb18, unwind continue];
    }

    bb17: {
        _28 = const _;
        _27 = core::panicking::unreachable_display::<&str>(_28) -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in <impl at src/main.rs:42:10: 42:18>::redact_arg_values: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "no subcommand matched";
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:42:10: 42:18>::COMMANDS: &[&argh_shared::CommandInfo<'_>] = {
    let mut _0: &[&argh_shared::CommandInfo<'_>];
    let mut _1: &[&argh_shared::CommandInfo<'_>; 5];
    let _2: &[&argh_shared::CommandInfo<'_>; 5];
    let _3: [&argh_shared::CommandInfo<'_>; 5];
    let mut _4: &[&argh_shared::CommandInfo<'_>; 5];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&argh_shared::CommandInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in <impl at src/main.rs:42:10: 42:18>::COMMANDS: &[&argh_shared::CommandInfo<'_>; 5] = {
    let mut _0: &[&argh_shared::CommandInfo<'_>; 5];
    let mut _1: [&argh_shared::CommandInfo<'_>; 5];

    bb0: {
        _1 = [const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:42:20: 42:29>::eq(_1: &Subcommands, _2: &Subcommands) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&Subcommands, &Subcommands);
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _11: isize;
    let mut _12: isize;
    let mut _23: &Subcommands;
    let mut _24: &Subcommands;
    let mut _25: &Subcommands;
    let mut _26: &Subcommands;
    let mut _27: &Subcommands;
    let mut _28: &Subcommands;
    let mut _29: &Subcommands;
    let mut _30: &Subcommands;
    let mut _31: &Subcommands;
    let mut _32: &Subcommands;
    let mut _33: &Subcommands;
    let mut _34: &Subcommands;
    let mut _35: &Subcommands;
    let mut _36: &Subcommands;
    let mut _37: &Subcommands;
    let mut _38: &Subcommands;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _13: &VerifyArgs;
            let _14: &VerifyArgs;
            let _15: &WatchArgs;
            let _16: &WatchArgs;
            let _17: &RunArgs;
            let _18: &RunArgs;
            let _19: &HintArgs;
            let _20: &HintArgs;
            let _21: &ListArgs;
            let _22: &ListArgs;
            scope 3 {
                debug __self_0 => _13;
                debug __arg1_0 => _14;
            }
            scope 4 {
                debug __self_0 => _15;
                debug __arg1_0 => _16;
            }
            scope 5 {
                debug __self_0 => _17;
                debug __arg1_0 => _18;
            }
            scope 6 {
                debug __self_0 => _19;
                debug __arg1_0 => _20;
            }
            scope 7 {
                debug __self_0 => _21;
                debug __arg1_0 => _22;
            }
            scope 8 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _23 = deref_copy (_6.0: &Subcommands);
        _12 = discriminant((*_23));
        switchInt(move _12) -> [0: bb3, 1: bb5, 2: bb6, 3: bb7, 4: bb8, otherwise: bb4];
    }

    bb2: {
        _0 = const false;
        goto -> bb14;
    }

    bb3: {
        _24 = deref_copy (_6.1: &Subcommands);
        _7 = discriminant((*_24));
        switchInt(move _7) -> [0: bb9, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _25 = deref_copy (_6.1: &Subcommands);
        _8 = discriminant((*_25));
        switchInt(move _8) -> [1: bb10, otherwise: bb4];
    }

    bb6: {
        _26 = deref_copy (_6.1: &Subcommands);
        _9 = discriminant((*_26));
        switchInt(move _9) -> [2: bb11, otherwise: bb4];
    }

    bb7: {
        _27 = deref_copy (_6.1: &Subcommands);
        _10 = discriminant((*_27));
        switchInt(move _10) -> [3: bb12, otherwise: bb4];
    }

    bb8: {
        _28 = deref_copy (_6.1: &Subcommands);
        _11 = discriminant((*_28));
        switchInt(move _11) -> [4: bb13, otherwise: bb4];
    }

    bb9: {
        _29 = deref_copy (_6.0: &Subcommands);
        _13 = &(((*_29) as Verify).0: VerifyArgs);
        _30 = deref_copy (_6.1: &Subcommands);
        _14 = &(((*_30) as Verify).0: VerifyArgs);
        _0 = <VerifyArgs as PartialEq>::eq(_13, _14) -> [return: bb14, unwind continue];
    }

    bb10: {
        _31 = deref_copy (_6.0: &Subcommands);
        _15 = &(((*_31) as Watch).0: WatchArgs);
        _32 = deref_copy (_6.1: &Subcommands);
        _16 = &(((*_32) as Watch).0: WatchArgs);
        _0 = <WatchArgs as PartialEq>::eq(_15, _16) -> [return: bb14, unwind continue];
    }

    bb11: {
        _33 = deref_copy (_6.0: &Subcommands);
        _17 = &(((*_33) as Run).0: RunArgs);
        _34 = deref_copy (_6.1: &Subcommands);
        _18 = &(((*_34) as Run).0: RunArgs);
        _0 = <RunArgs as PartialEq>::eq(_17, _18) -> [return: bb14, unwind continue];
    }

    bb12: {
        _35 = deref_copy (_6.0: &Subcommands);
        _19 = &(((*_35) as Hint).0: HintArgs);
        _36 = deref_copy (_6.1: &Subcommands);
        _20 = &(((*_36) as Hint).0: HintArgs);
        _0 = <HintArgs as PartialEq>::eq(_19, _20) -> [return: bb14, unwind continue];
    }

    bb13: {
        _37 = deref_copy (_6.0: &Subcommands);
        _21 = &(((*_37) as List).0: ListArgs);
        _38 = deref_copy (_6.1: &Subcommands);
        _22 = &(((*_38) as List).0: ListArgs);
        _0 = <ListArgs as PartialEq>::eq(_21, _22) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }
}

fn <impl at src/main.rs:42:31: 42:36>::fmt(_1: &Subcommands, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &VerifyArgs;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&VerifyArgs;
    let _8: &WatchArgs;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&WatchArgs;
    let _12: &RunArgs;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&RunArgs;
    let _16: &HintArgs;
    let _17: &str;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &&HintArgs;
    let _20: &ListArgs;
    let _21: &str;
    let mut _22: &dyn std::fmt::Debug;
    let _23: &&ListArgs;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }
    scope 3 {
        debug __self_0 => _12;
    }
    scope 4 {
        debug __self_0 => _16;
    }
    scope 5 {
        debug __self_0 => _20;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb1, otherwise: bb2];
    }

    bb1: {
        _20 = &(((*_1) as List).0: ListArgs);
        _21 = const "List";
        _23 = &_20;
        _22 = _23 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _21, move _22) -> [return: bb7, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Verify).0: VerifyArgs);
        _5 = const "Verify";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb7, unwind continue];
    }

    bb4: {
        _8 = &(((*_1) as Watch).0: WatchArgs);
        _9 = const "Watch";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb7, unwind continue];
    }

    bb5: {
        _12 = &(((*_1) as Run).0: RunArgs);
        _13 = const "Run";
        _15 = &_12;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _13, move _14) -> [return: bb7, unwind continue];
    }

    bb6: {
        _16 = &(((*_1) as Hint).0: HintArgs);
        _17 = const "Hint";
        _19 = &_16;
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _17, move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn <impl at src/main.rs:52:10: 52:18>::from_args(_1: &[&str], _2: &[&str]) -> Result<VerifyArgs, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<VerifyArgs, argh::EarlyExit>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _4: std::result::Result<(), argh::EarlyExit>;
    let mut _5: &[&str];
    let mut _6: argh::ParseStructOptions<'_>;
    let mut _7: &[(&str, usize)];
    let mut _8: &mut [argh::ParseStructOption<'_>];
    let mut _9: argh::ParseStructPositionals<'_>;
    let mut _10: &mut [argh::ParseStructPositional<'_>];
    let mut _11: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _12: &dyn std::ops::Fn() -> std::string::String;
    let _13: &{closure@src/main.rs:52:10: 52:18};
    let _14: {closure@src/main.rs:52:10: 52:18};
    let mut _15: &&[&str];
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
    let mut _18: argh::MissingRequirements;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _20: std::result::Result<(), std::string::String>;
    let mut _21: &argh::MissingRequirements;
    let mut _22: isize;
    let mut _24: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _25: &mut [argh::ParseStructOption<'_>; 0];
    let mut _26: &[(&str, usize); 0];
    scope 1 {
        debug residual => _17;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug __missing_requirements => _18;
        let _23: std::result::Result<std::convert::Infallible, std::string::String>;
        scope 6 {
            debug residual => _23;
            scope 7 {
            }
        }
        scope 8 {
            debug val => const ();
            scope 9 {
            }
        }
    }

    bb0: {
        _5 = _1;
        _26 = const _;
        _7 = _26 as &[(&str, usize)] (PointerCoercion(Unsize));
        _25 = const _;
        _8 = _25 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _6 = ParseStructOptions::<'_> { arg_to_slot: move _7, slots: move _8 };
        _24 = const _;
        _10 = _24 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _9 = ParseStructPositionals::<'_> { positionals: move _10, last_is_repeating: const false };
        _11 = std::option::Option::<ParseStructSubCommand<'_>>::None;
        _15 = &_1;
        _14 = {closure@src/main.rs:52:10: 52:18} { __cmd_name: move _15 };
        _13 = &_14;
        _12 = _13 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _4 = parse_struct_args(move _5, _2, move _6, move _9, move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), EarlyExit> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _16 = discriminant(_3);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _18 = <MissingRequirements as Default>::default() -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _17 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<VerifyArgs, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _17) -> [return: bb12, unwind continue];
    }

    bb6: {
        _21 = &_18;
        _20 = MissingRequirements::err_on_any(move _21) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _19 = <Result<(), std::string::String> as Try>::branch(move _20) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _0 = Result::<VerifyArgs, EarlyExit>::Ok(const VerifyArgs {{  }});
        drop(_18) -> [return: bb12, unwind continue];
    }

    bb10: {
        _23 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<VerifyArgs, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _23) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        drop(_18) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_18) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:52:10: 52:18>::from_args: &mut [ParseStructPositional<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _1: [argh::ParseStructPositional<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:52:10: 52:18>::from_args: &mut [ParseStructOption<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructOption<'_>; 0];
    let mut _1: [argh::ParseStructOption<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[2] in <impl at src/main.rs:52:10: 52:18>::from_args: &[(&str, usize); 0] = {
    let mut _0: &[(&str, usize); 0];
    let mut _1: [(&str, usize); 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:52:10: 52:18>::from_args::{closure#0}(_1: &{closure@src/main.rs:52:10: 52:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let _10: std::string::String;
    let _11: &str;
    let mut _12: &[&str; 2];
    let mut _13: &&[&str];
    let mut _14: &[&str];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (PointerCoercion(Unsize));
        _13 = deref_copy ((*_1).0: &&[&str]);
        _14 = deref_copy (*_13);
        _11 = const " ";
        _10 = slice::<impl [&str]>::join::<&str>(_14, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:52:10: 52:18>::from_args::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const "\n\nVerifies all exercises according to the recommended order\n\nOptions:\n  --help            display usage information\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:52:10: 52:18>::redact_arg_values(_1: &[&str], _2: &[&str]) -> Result<Vec<std::string::String>, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::string::String>, argh::EarlyExit>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _4: std::result::Result<(), argh::EarlyExit>;
    let mut _5: &[&str];
    let mut _6: argh::ParseStructOptions<'_>;
    let mut _7: &[(&str, usize)];
    let mut _8: &mut [argh::ParseStructOption<'_>];
    let mut _9: argh::ParseStructPositionals<'_>;
    let mut _10: &mut [argh::ParseStructPositional<'_>];
    let mut _11: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _12: &dyn std::ops::Fn() -> std::string::String;
    let _13: &{closure@src/main.rs:52:10: 52:18};
    let _14: {closure@src/main.rs:52:10: 52:18};
    let mut _15: &&[&str];
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
    let mut _18: argh::MissingRequirements;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _20: std::result::Result<(), std::string::String>;
    let mut _21: &argh::MissingRequirements;
    let mut _22: isize;
    let mut _25: std::boxed::Box<[std::string::String]>;
    let mut _26: std::boxed::Box<[std::string::String; 1]>;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: *mut u8;
    let mut _30: std::boxed::Box<[std::string::String; 1]>;
    let mut _31: std::string::String;
    let _32: &&str;
    let mut _33: std::option::Option<&&str>;
    let mut _34: &[&str];
    let _35: &str;
    let mut _36: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _37: &mut [argh::ParseStructOption<'_>; 0];
    let mut _38: &[(&str, usize); 0];
    let mut _39: &mut std::boxed::Box<[std::string::String; 1]>;
    let mut _40: ();
    let mut _41: *const [std::string::String; 1];
    scope 1 {
        debug residual => _17;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug __missing_requirements => _18;
        let _23: std::result::Result<std::convert::Infallible, std::string::String>;
        let mut _24: std::vec::Vec<std::string::String>;
        let mut _42: *const ();
        let mut _43: usize;
        let mut _44: usize;
        let mut _45: usize;
        let mut _46: usize;
        let mut _47: bool;
        scope 6 {
            debug residual => _23;
            scope 7 {
            }
        }
        scope 8 {
            debug val => const ();
            scope 9 {
            }
        }
        scope 10 {
            debug __redacted => _24;
        }
        scope 11 {
        }
    }

    bb0: {
        _5 = _1;
        _38 = const _;
        _7 = _38 as &[(&str, usize)] (PointerCoercion(Unsize));
        _37 = const _;
        _8 = _37 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _6 = ParseStructOptions::<'_> { arg_to_slot: move _7, slots: move _8 };
        _36 = const _;
        _10 = _36 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _9 = ParseStructPositionals::<'_> { positionals: move _10, last_is_repeating: const false };
        _11 = std::option::Option::<ParseStructSubCommand<'_>>::None;
        _15 = &_1;
        _14 = {closure@src/main.rs:52:10: 52:18} { __cmd_name: move _15 };
        _13 = &_14;
        _12 = _13 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _4 = parse_struct_args(move _5, _2, move _6, move _9, move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), EarlyExit> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _16 = discriminant(_3);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _18 = <MissingRequirements as Default>::default() -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _17 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _17) -> [return: bb17, unwind continue];
    }

    bb6: {
        _21 = &_18;
        _20 = MissingRequirements::err_on_any(move _21) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _19 = <Result<(), std::string::String> as Try>::branch(move _20) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _27 = SizeOf([std::string::String; 1]);
        _28 = AlignOf([std::string::String; 1]);
        _29 = alloc::alloc::exchange_malloc(move _27, move _28) -> [return: bb12, unwind: bb18];
    }

    bb10: {
        _23 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _23) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        drop(_18) -> [return: bb17, unwind continue];
    }

    bb12: {
        _30 = ShallowInitBox(move _29, [std::string::String; 1]);
        _34 = _1;
        _33 = core::slice::<impl [&str]>::last(move _34) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _35 = const "no subcommand name";
        _32 = std::option::Option::<&&str>::expect(move _33, _35) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _31 = <&str as ToString>::to_string(_32) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _41 = (((_30.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]);
        _42 = _41 as *const () (PtrToPtr);
        _43 = _42 as usize (Transmute);
        _44 = AlignOf([std::string::String; 1]);
        _45 = Sub(_44, const 1_usize);
        _46 = BitAnd(_43, _45);
        _47 = Eq(_46, const 0_usize);
        assert(_47, "misaligned pointer dereference: address must be a multiple of {} but is {}", _44, _43) -> [success: bb21, unwind unreachable];
    }

    bb16: {
        _0 = Result::<Vec<std::string::String>, EarlyExit>::Ok(move _24);
        drop(_18) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_18) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        _39 = &mut _30;
        _40 = <Box<[std::string::String; 1]> as Drop>::drop(move _39) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb21: {
        (*_41) = [move _31];
        _26 = move _30;
        _25 = move _26 as std::boxed::Box<[std::string::String]> (PointerCoercion(Unsize));
        _24 = slice::<impl [std::string::String]>::into_vec::<std::alloc::Global>(move _25) -> [return: bb16, unwind: bb18];
    }

    bb22 (cleanup): {
        goto -> bb18;
    }
}

promoted[0] in <impl at src/main.rs:52:10: 52:18>::redact_arg_values: &mut [ParseStructPositional<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _1: [argh::ParseStructPositional<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:52:10: 52:18>::redact_arg_values: &mut [ParseStructOption<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructOption<'_>; 0];
    let mut _1: [argh::ParseStructOption<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[2] in <impl at src/main.rs:52:10: 52:18>::redact_arg_values: &[(&str, usize); 0] = {
    let mut _0: &[(&str, usize); 0];
    let mut _1: [(&str, usize); 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:52:10: 52:18>::redact_arg_values::{closure#0}(_1: &{closure@src/main.rs:52:10: 52:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let _10: std::string::String;
    let _11: &str;
    let mut _12: &[&str; 2];
    let mut _13: &&[&str];
    let mut _14: &[&str];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (PointerCoercion(Unsize));
        _13 = deref_copy ((*_1).0: &&[&str]);
        _14 = deref_copy (*_13);
        _11 = const " ";
        _10 = slice::<impl [&str]>::join::<&str>(_14, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:52:10: 52:18>::redact_arg_values::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const "\n\nVerifies all exercises according to the recommended order\n\nOptions:\n  --help            display usage information\n"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:52:10: 52:18>::COMMAND: &argh_shared::CommandInfo<'_> = {
    let mut _0: &argh_shared::CommandInfo<'_>;
    let _1: &argh_shared::CommandInfo<'_>;
    let _2: argh_shared::CommandInfo<'_>;
    let mut _3: &argh_shared::CommandInfo<'_>;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in <impl at src/main.rs:52:10: 52:18>::COMMAND: &argh_shared::CommandInfo<'_> = {
    let mut _0: &argh_shared::CommandInfo<'_>;
    let mut _1: argh_shared::CommandInfo<'_>;

    bb0: {
        _1 = argh_shared::CommandInfo::<'_> { name: const "verify", description: const "Verifies all exercises according to the recommended order" };
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:52:20: 52:29>::eq(_1: &VerifyArgs, _2: &VerifyArgs) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at src/main.rs:52:31: 52:36>::fmt(_1: &VerifyArgs, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "VerifyArgs";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:57:10: 57:18>::from_args(_1: &[&str], _2: &[&str]) -> Result<WatchArgs, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<WatchArgs, argh::EarlyExit>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _4: std::result::Result<(), argh::EarlyExit>;
    let mut _5: &[&str];
    let mut _6: argh::ParseStructOptions<'_>;
    let mut _7: &[(&str, usize)];
    let mut _8: &mut [argh::ParseStructOption<'_>];
    let mut _9: argh::ParseStructPositionals<'_>;
    let mut _10: &mut [argh::ParseStructPositional<'_>];
    let mut _11: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _12: &dyn std::ops::Fn() -> std::string::String;
    let _13: &{closure@src/main.rs:57:10: 57:18};
    let _14: {closure@src/main.rs:57:10: 57:18};
    let mut _15: &&[&str];
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
    let mut _18: argh::MissingRequirements;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _20: std::result::Result<(), std::string::String>;
    let mut _21: &argh::MissingRequirements;
    let mut _22: isize;
    let mut _24: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _25: &mut [argh::ParseStructOption<'_>; 0];
    let mut _26: &[(&str, usize); 0];
    scope 1 {
        debug residual => _17;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug __missing_requirements => _18;
        let _23: std::result::Result<std::convert::Infallible, std::string::String>;
        scope 6 {
            debug residual => _23;
            scope 7 {
            }
        }
        scope 8 {
            debug val => const ();
            scope 9 {
            }
        }
    }

    bb0: {
        _5 = _1;
        _26 = const _;
        _7 = _26 as &[(&str, usize)] (PointerCoercion(Unsize));
        _25 = const _;
        _8 = _25 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _6 = ParseStructOptions::<'_> { arg_to_slot: move _7, slots: move _8 };
        _24 = const _;
        _10 = _24 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _9 = ParseStructPositionals::<'_> { positionals: move _10, last_is_repeating: const false };
        _11 = std::option::Option::<ParseStructSubCommand<'_>>::None;
        _15 = &_1;
        _14 = {closure@src/main.rs:57:10: 57:18} { __cmd_name: move _15 };
        _13 = &_14;
        _12 = _13 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _4 = parse_struct_args(move _5, _2, move _6, move _9, move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), EarlyExit> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _16 = discriminant(_3);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _18 = <MissingRequirements as Default>::default() -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _17 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<WatchArgs, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _17) -> [return: bb12, unwind continue];
    }

    bb6: {
        _21 = &_18;
        _20 = MissingRequirements::err_on_any(move _21) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _19 = <Result<(), std::string::String> as Try>::branch(move _20) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _0 = Result::<WatchArgs, EarlyExit>::Ok(const WatchArgs {{  }});
        drop(_18) -> [return: bb12, unwind continue];
    }

    bb10: {
        _23 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<WatchArgs, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _23) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        drop(_18) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_18) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:57:10: 57:18>::from_args: &mut [ParseStructPositional<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _1: [argh::ParseStructPositional<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:57:10: 57:18>::from_args: &mut [ParseStructOption<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructOption<'_>; 0];
    let mut _1: [argh::ParseStructOption<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[2] in <impl at src/main.rs:57:10: 57:18>::from_args: &[(&str, usize); 0] = {
    let mut _0: &[(&str, usize); 0];
    let mut _1: [(&str, usize); 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:57:10: 57:18>::from_args::{closure#0}(_1: &{closure@src/main.rs:57:10: 57:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let _10: std::string::String;
    let _11: &str;
    let mut _12: &[&str; 2];
    let mut _13: &&[&str];
    let mut _14: &[&str];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (PointerCoercion(Unsize));
        _13 = deref_copy ((*_1).0: &&[&str]);
        _14 = deref_copy (*_13);
        _11 = const " ";
        _10 = slice::<impl [&str]>::join::<&str>(_14, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:57:10: 57:18>::from_args::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const "\n\nReruns `verify` when files were edited\n\nOptions:\n  --help            display usage information\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:57:10: 57:18>::redact_arg_values(_1: &[&str], _2: &[&str]) -> Result<Vec<std::string::String>, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::string::String>, argh::EarlyExit>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _4: std::result::Result<(), argh::EarlyExit>;
    let mut _5: &[&str];
    let mut _6: argh::ParseStructOptions<'_>;
    let mut _7: &[(&str, usize)];
    let mut _8: &mut [argh::ParseStructOption<'_>];
    let mut _9: argh::ParseStructPositionals<'_>;
    let mut _10: &mut [argh::ParseStructPositional<'_>];
    let mut _11: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _12: &dyn std::ops::Fn() -> std::string::String;
    let _13: &{closure@src/main.rs:57:10: 57:18};
    let _14: {closure@src/main.rs:57:10: 57:18};
    let mut _15: &&[&str];
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
    let mut _18: argh::MissingRequirements;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _20: std::result::Result<(), std::string::String>;
    let mut _21: &argh::MissingRequirements;
    let mut _22: isize;
    let mut _25: std::boxed::Box<[std::string::String]>;
    let mut _26: std::boxed::Box<[std::string::String; 1]>;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: *mut u8;
    let mut _30: std::boxed::Box<[std::string::String; 1]>;
    let mut _31: std::string::String;
    let _32: &&str;
    let mut _33: std::option::Option<&&str>;
    let mut _34: &[&str];
    let _35: &str;
    let mut _36: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _37: &mut [argh::ParseStructOption<'_>; 0];
    let mut _38: &[(&str, usize); 0];
    let mut _39: &mut std::boxed::Box<[std::string::String; 1]>;
    let mut _40: ();
    let mut _41: *const [std::string::String; 1];
    scope 1 {
        debug residual => _17;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug __missing_requirements => _18;
        let _23: std::result::Result<std::convert::Infallible, std::string::String>;
        let mut _24: std::vec::Vec<std::string::String>;
        let mut _42: *const ();
        let mut _43: usize;
        let mut _44: usize;
        let mut _45: usize;
        let mut _46: usize;
        let mut _47: bool;
        scope 6 {
            debug residual => _23;
            scope 7 {
            }
        }
        scope 8 {
            debug val => const ();
            scope 9 {
            }
        }
        scope 10 {
            debug __redacted => _24;
        }
        scope 11 {
        }
    }

    bb0: {
        _5 = _1;
        _38 = const _;
        _7 = _38 as &[(&str, usize)] (PointerCoercion(Unsize));
        _37 = const _;
        _8 = _37 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _6 = ParseStructOptions::<'_> { arg_to_slot: move _7, slots: move _8 };
        _36 = const _;
        _10 = _36 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _9 = ParseStructPositionals::<'_> { positionals: move _10, last_is_repeating: const false };
        _11 = std::option::Option::<ParseStructSubCommand<'_>>::None;
        _15 = &_1;
        _14 = {closure@src/main.rs:57:10: 57:18} { __cmd_name: move _15 };
        _13 = &_14;
        _12 = _13 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _4 = parse_struct_args(move _5, _2, move _6, move _9, move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), EarlyExit> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _16 = discriminant(_3);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _18 = <MissingRequirements as Default>::default() -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _17 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _17) -> [return: bb17, unwind continue];
    }

    bb6: {
        _21 = &_18;
        _20 = MissingRequirements::err_on_any(move _21) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _19 = <Result<(), std::string::String> as Try>::branch(move _20) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _27 = SizeOf([std::string::String; 1]);
        _28 = AlignOf([std::string::String; 1]);
        _29 = alloc::alloc::exchange_malloc(move _27, move _28) -> [return: bb12, unwind: bb18];
    }

    bb10: {
        _23 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _23) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        drop(_18) -> [return: bb17, unwind continue];
    }

    bb12: {
        _30 = ShallowInitBox(move _29, [std::string::String; 1]);
        _34 = _1;
        _33 = core::slice::<impl [&str]>::last(move _34) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _35 = const "no subcommand name";
        _32 = std::option::Option::<&&str>::expect(move _33, _35) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _31 = <&str as ToString>::to_string(_32) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _41 = (((_30.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]);
        _42 = _41 as *const () (PtrToPtr);
        _43 = _42 as usize (Transmute);
        _44 = AlignOf([std::string::String; 1]);
        _45 = Sub(_44, const 1_usize);
        _46 = BitAnd(_43, _45);
        _47 = Eq(_46, const 0_usize);
        assert(_47, "misaligned pointer dereference: address must be a multiple of {} but is {}", _44, _43) -> [success: bb21, unwind unreachable];
    }

    bb16: {
        _0 = Result::<Vec<std::string::String>, EarlyExit>::Ok(move _24);
        drop(_18) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_18) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        _39 = &mut _30;
        _40 = <Box<[std::string::String; 1]> as Drop>::drop(move _39) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb21: {
        (*_41) = [move _31];
        _26 = move _30;
        _25 = move _26 as std::boxed::Box<[std::string::String]> (PointerCoercion(Unsize));
        _24 = slice::<impl [std::string::String]>::into_vec::<std::alloc::Global>(move _25) -> [return: bb16, unwind: bb18];
    }

    bb22 (cleanup): {
        goto -> bb18;
    }
}

promoted[0] in <impl at src/main.rs:57:10: 57:18>::redact_arg_values: &mut [ParseStructPositional<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _1: [argh::ParseStructPositional<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:57:10: 57:18>::redact_arg_values: &mut [ParseStructOption<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructOption<'_>; 0];
    let mut _1: [argh::ParseStructOption<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[2] in <impl at src/main.rs:57:10: 57:18>::redact_arg_values: &[(&str, usize); 0] = {
    let mut _0: &[(&str, usize); 0];
    let mut _1: [(&str, usize); 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:57:10: 57:18>::redact_arg_values::{closure#0}(_1: &{closure@src/main.rs:57:10: 57:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let _10: std::string::String;
    let _11: &str;
    let mut _12: &[&str; 2];
    let mut _13: &&[&str];
    let mut _14: &[&str];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (PointerCoercion(Unsize));
        _13 = deref_copy ((*_1).0: &&[&str]);
        _14 = deref_copy (*_13);
        _11 = const " ";
        _10 = slice::<impl [&str]>::join::<&str>(_14, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:57:10: 57:18>::redact_arg_values::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const "\n\nReruns `verify` when files were edited\n\nOptions:\n  --help            display usage information\n"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:57:10: 57:18>::COMMAND: &argh_shared::CommandInfo<'_> = {
    let mut _0: &argh_shared::CommandInfo<'_>;
    let _1: &argh_shared::CommandInfo<'_>;
    let _2: argh_shared::CommandInfo<'_>;
    let mut _3: &argh_shared::CommandInfo<'_>;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in <impl at src/main.rs:57:10: 57:18>::COMMAND: &argh_shared::CommandInfo<'_> = {
    let mut _0: &argh_shared::CommandInfo<'_>;
    let mut _1: argh_shared::CommandInfo<'_>;

    bb0: {
        _1 = argh_shared::CommandInfo::<'_> { name: const "watch", description: const "Reruns `verify` when files were edited" };
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:57:20: 57:29>::eq(_1: &WatchArgs, _2: &WatchArgs) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at src/main.rs:57:31: 57:36>::fmt(_1: &WatchArgs, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "WatchArgs";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:62:10: 62:18>::from_args(_1: &[&str], _2: &[&str]) -> Result<RunArgs, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<RunArgs, argh::EarlyExit>;
    let mut _3: argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
    let mut _4: std::option::Option<std::string::String>;
    let mut _5: for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _7: std::result::Result<(), argh::EarlyExit>;
    let mut _8: &[&str];
    let mut _9: argh::ParseStructOptions<'_>;
    let mut _10: &[(&str, usize)];
    let mut _11: &mut [argh::ParseStructOption<'_>];
    let mut _12: argh::ParseStructPositionals<'_>;
    let mut _13: &mut [argh::ParseStructPositional<'_>];
    let mut _14: &mut [argh::ParseStructPositional<'_>; 1];
    let mut _15: [argh::ParseStructPositional<'_>; 1];
    let mut _16: argh::ParseStructPositional<'_>;
    let mut _17: &mut dyn argh::ParseValueSlot;
    let mut _18: &mut argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
    let mut _19: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _20: &dyn std::ops::Fn() -> std::string::String;
    let _21: &{closure@src/main.rs:62:10: 62:18};
    let _22: {closure@src/main.rs:62:10: 62:18};
    let mut _23: &&[&str];
    let mut _24: isize;
    let _27: ();
    let mut _28: bool;
    let mut _29: &std::option::Option<std::string::String>;
    let mut _30: &mut argh::MissingRequirements;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _32: std::result::Result<(), std::string::String>;
    let mut _33: &argh::MissingRequirements;
    let mut _34: isize;
    let mut _36: RunArgs;
    let mut _37: std::string::String;
    let mut _38: std::option::Option<std::string::String>;
    let mut _41: bool;
    scope 1 {
        debug name => _3;
        let _25: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
        let mut _26: argh::MissingRequirements;
        let mut _39: &mut [argh::ParseStructOption<'_>; 0];
        let mut _40: &[(&str, usize); 0];
        scope 2 {
            debug residual => _25;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
        scope 6 {
            debug __missing_requirements => _26;
            let _35: std::result::Result<std::convert::Infallible, std::string::String>;
            scope 7 {
                debug residual => _35;
                scope 8 {
                }
            }
            scope 9 {
                debug val => const ();
                scope 10 {
                }
            }
        }
    }

    bb0: {
        _41 = const false;
        _4 = <std::option::Option<std::string::String> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const ZeroSized: {closure@src/main.rs:62:10: 62:18} as for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String> (PointerCoercion(ClosureFnPointer(Normal)));
        _41 = const true;
        _3 = ParseValueSlotTy::<std::option::Option<std::string::String>, std::string::String> { slot: move _4, parse_func: move _5 };
        _8 = _1;
        _40 = const _;
        _10 = _40 as &[(&str, usize)] (PointerCoercion(Unsize));
        _39 = const _;
        _11 = _39 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _9 = ParseStructOptions::<'_> { arg_to_slot: move _10, slots: move _11 };
        _18 = &mut _3;
        _17 = _18 as &mut dyn argh::ParseValueSlot (PointerCoercion(Unsize));
        _16 = ParseStructPositional::<'_> { name: const "name", slot: _17 };
        _15 = [move _16];
        _14 = &mut _15;
        _13 = _14 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _12 = ParseStructPositionals::<'_> { positionals: move _13, last_is_repeating: const false };
        _19 = std::option::Option::<ParseStructSubCommand<'_>>::None;
        _23 = &_1;
        _22 = {closure@src/main.rs:62:10: 62:18} { __cmd_name: move _23 };
        _21 = &_22;
        _20 = _21 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _7 = parse_struct_args(move _8, _2, move _9, move _12, move _19, move _20) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _6 = <Result<(), EarlyExit> as Try>::branch(move _7) -> [return: bb3, unwind: bb24];
    }

    bb3: {
        _24 = discriminant(_6);
        switchInt(move _24) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _26 = <MissingRequirements as Default>::default() -> [return: bb7, unwind: bb24];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _25 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<RunArgs, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _25) -> [return: bb25, unwind: bb24];
    }

    bb7: {
        _29 = &(_3.0: std::option::Option<std::string::String>);
        _28 = std::option::Option::<std::string::String>::is_none(move _29) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        switchInt(move _28) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _30 = &mut _26;
        _27 = MissingRequirements::missing_positional_arg(move _30, const "name") -> [return: bb26, unwind: bb21];
    }

    bb10: {
        _33 = &_26;
        _32 = MissingRequirements::err_on_any(move _33) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _31 = <Result<(), std::string::String> as Try>::branch(move _32) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb13, 1: bb14, otherwise: bb5];
    }

    bb13: {
        _41 = const false;
        _38 = move (_3.0: std::option::Option<std::string::String>);
        _37 = std::option::Option::<std::string::String>::unwrap(move _38) -> [return: bb16, unwind: bb21];
    }

    bb14: {
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<RunArgs, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _35) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        drop(_26) -> [return: bb18, unwind: bb24];
    }

    bb16: {
        _36 = RunArgs { name: move _37 };
        _0 = Result::<RunArgs, EarlyExit>::Ok(move _36);
        drop(_26) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        _41 = const false;
        goto -> bb20;
    }

    bb18: {
        drop(_3) -> [return: bb19, unwind continue];
    }

    bb19: {
        _41 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_26) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        drop((_3.0: std::option::Option<std::string::String>)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_41) -> [0: bb22, otherwise: bb23];
    }

    bb25: {
        goto -> bb18;
    }

    bb26: {
        goto -> bb10;
    }
}

promoted[0] in <impl at src/main.rs:62:10: 62:18>::from_args: &mut [ParseStructOption<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructOption<'_>; 0];
    let mut _1: [argh::ParseStructOption<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:62:10: 62:18>::from_args: &[(&str, usize); 0] = {
    let mut _0: &[(&str, usize); 0];
    let mut _1: [(&str, usize); 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:62:10: 62:18>::from_args::{closure#0}(_1: &{closure@src/main.rs:62:10: 62:18}, _2: &str, _3: &str) -> Result<std::string::String, std::string::String> {
    debug value => _3;
    let mut _0: std::result::Result<std::string::String, std::string::String>;

    bb0: {
        _0 = <std::string::String as FromArgValue>::from_arg_value(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:62:10: 62:18>::from_args::{closure#1}(_1: &{closure@src/main.rs:62:10: 62:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let _10: std::string::String;
    let _11: &str;
    let mut _12: &[&str; 2];
    let mut _13: &&[&str];
    let mut _14: &[&str];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (PointerCoercion(Unsize));
        _13 = deref_copy ((*_1).0: &&[&str]);
        _14 = deref_copy (*_13);
        _11 = const " ";
        _10 = slice::<impl [&str]>::join::<&str>(_14, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:62:10: 62:18>::from_args::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " <name>\n\nRuns/Tests a single exercise\n\nOptions:\n  --help            display usage information\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:62:10: 62:18>::redact_arg_values(_1: &[&str], _2: &[&str]) -> Result<Vec<std::string::String>, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::string::String>, argh::EarlyExit>;
    let mut _3: argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
    let mut _4: std::option::Option<std::string::String>;
    let mut _5: for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _7: std::result::Result<(), argh::EarlyExit>;
    let mut _8: &[&str];
    let mut _9: argh::ParseStructOptions<'_>;
    let mut _10: &[(&str, usize)];
    let mut _11: &mut [argh::ParseStructOption<'_>];
    let mut _12: argh::ParseStructPositionals<'_>;
    let mut _13: &mut [argh::ParseStructPositional<'_>];
    let mut _14: &mut [argh::ParseStructPositional<'_>; 1];
    let mut _15: [argh::ParseStructPositional<'_>; 1];
    let mut _16: argh::ParseStructPositional<'_>;
    let mut _17: &mut dyn argh::ParseValueSlot;
    let mut _18: &mut argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
    let mut _19: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _20: &dyn std::ops::Fn() -> std::string::String;
    let _21: &{closure@src/main.rs:62:10: 62:18};
    let _22: {closure@src/main.rs:62:10: 62:18};
    let mut _23: &&[&str];
    let mut _24: isize;
    let _27: ();
    let mut _28: bool;
    let mut _29: &std::option::Option<std::string::String>;
    let mut _30: &mut argh::MissingRequirements;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _32: std::result::Result<(), std::string::String>;
    let mut _33: &argh::MissingRequirements;
    let mut _34: isize;
    let mut _37: std::boxed::Box<[std::string::String]>;
    let mut _38: std::boxed::Box<[std::string::String; 1]>;
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: *mut u8;
    let mut _42: std::boxed::Box<[std::string::String; 1]>;
    let mut _43: std::string::String;
    let _44: &&str;
    let mut _45: std::option::Option<&&str>;
    let mut _46: &[&str];
    let _47: &str;
    let _48: ();
    let mut _49: &mut std::vec::Vec<std::string::String>;
    let mut _50: std::option::IntoIter<std::string::String>;
    let mut _51: std::option::Option<std::string::String>;
    let mut _52: std::vec::Vec<std::string::String>;
    let mut _55: bool;
    let mut _56: &mut std::boxed::Box<[std::string::String; 1]>;
    let mut _57: ();
    let mut _58: *const [std::string::String; 1];
    scope 1 {
        debug name => _3;
        let _25: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
        let mut _26: argh::MissingRequirements;
        let mut _53: &mut [argh::ParseStructOption<'_>; 0];
        let mut _54: &[(&str, usize); 0];
        scope 2 {
            debug residual => _25;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
        scope 6 {
            debug __missing_requirements => _26;
            let _35: std::result::Result<std::convert::Infallible, std::string::String>;
            let mut _36: std::vec::Vec<std::string::String>;
            let mut _59: *const ();
            let mut _60: usize;
            let mut _61: usize;
            let mut _62: usize;
            let mut _63: usize;
            let mut _64: bool;
            scope 7 {
                debug residual => _35;
                scope 8 {
                }
            }
            scope 9 {
                debug val => const ();
                scope 10 {
                }
            }
            scope 11 {
                debug __redacted => _36;
            }
            scope 12 {
            }
        }
    }

    bb0: {
        _55 = const false;
        _4 = <std::option::Option<std::string::String> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const ZeroSized: {closure@src/main.rs:62:10: 62:18} as for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String> (PointerCoercion(ClosureFnPointer(Normal)));
        _55 = const true;
        _3 = ParseValueSlotTy::<std::option::Option<std::string::String>, std::string::String> { slot: move _4, parse_func: move _5 };
        _8 = _1;
        _54 = const _;
        _10 = _54 as &[(&str, usize)] (PointerCoercion(Unsize));
        _53 = const _;
        _11 = _53 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _9 = ParseStructOptions::<'_> { arg_to_slot: move _10, slots: move _11 };
        _18 = &mut _3;
        _17 = _18 as &mut dyn argh::ParseValueSlot (PointerCoercion(Unsize));
        _16 = ParseStructPositional::<'_> { name: const "name", slot: _17 };
        _15 = [move _16];
        _14 = &mut _15;
        _13 = _14 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _12 = ParseStructPositionals::<'_> { positionals: move _13, last_is_repeating: const false };
        _19 = std::option::Option::<ParseStructSubCommand<'_>>::None;
        _23 = &_1;
        _22 = {closure@src/main.rs:62:10: 62:18} { __cmd_name: move _23 };
        _21 = &_22;
        _20 = _21 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _7 = parse_struct_args(move _8, _2, move _9, move _12, move _19, move _20) -> [return: bb2, unwind: bb32];
    }

    bb2: {
        _6 = <Result<(), EarlyExit> as Try>::branch(move _7) -> [return: bb3, unwind: bb32];
    }

    bb3: {
        _24 = discriminant(_6);
        switchInt(move _24) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _26 = <MissingRequirements as Default>::default() -> [return: bb7, unwind: bb32];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _25 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _25) -> [return: bb34, unwind: bb32];
    }

    bb7: {
        _29 = &(_3.0: std::option::Option<std::string::String>);
        _28 = std::option::Option::<std::string::String>::is_none(move _29) -> [return: bb8, unwind: bb28];
    }

    bb8: {
        switchInt(move _28) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _30 = &mut _26;
        _27 = MissingRequirements::missing_positional_arg(move _30, const "name") -> [return: bb35, unwind: bb28];
    }

    bb10: {
        _33 = &_26;
        _32 = MissingRequirements::err_on_any(move _33) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _31 = <Result<(), std::string::String> as Try>::branch(move _32) -> [return: bb12, unwind: bb28];
    }

    bb12: {
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb13, 1: bb14, otherwise: bb5];
    }

    bb13: {
        _39 = SizeOf([std::string::String; 1]);
        _40 = AlignOf([std::string::String; 1]);
        _41 = alloc::alloc::exchange_malloc(move _39, move _40) -> [return: bb16, unwind: bb28];
    }

    bb14: {
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _35) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        drop(_26) -> [return: bb24, unwind: bb32];
    }

    bb16: {
        _42 = ShallowInitBox(move _41, [std::string::String; 1]);
        _46 = _1;
        _45 = core::slice::<impl [&str]>::last(move _46) -> [return: bb17, unwind: bb30];
    }

    bb17: {
        _47 = const "no subcommand name";
        _44 = std::option::Option::<&&str>::expect(move _45, _47) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        _43 = <&str as ToString>::to_string(_44) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _58 = (((_42.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]);
        _59 = _58 as *const () (PtrToPtr);
        _60 = _59 as usize (Transmute);
        _61 = AlignOf([std::string::String; 1]);
        _62 = Sub(_61, const 1_usize);
        _63 = BitAnd(_60, _62);
        _64 = Eq(_63, const 0_usize);
        assert(_64, "misaligned pointer dereference: address must be a multiple of {} but is {}", _61, _60) -> [success: bb33, unwind unreachable];
    }

    bb20: {
        _49 = &mut _36;
        _55 = const false;
        _51 = move (_3.0: std::option::Option<std::string::String>);
        _50 = <std::option::Option<std::string::String> as IntoIterator>::into_iter(move _51) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        _48 = <Vec<std::string::String> as Extend<std::string::String>>::extend::<std::option::IntoIter<std::string::String>>(move _49, move _50) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        _52 = move _36;
        _0 = Result::<Vec<std::string::String>, EarlyExit>::Ok(move _52);
        drop(_26) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        _55 = const false;
        goto -> bb26;
    }

    bb24: {
        drop(_3) -> [return: bb25, unwind continue];
    }

    bb25: {
        _55 = const false;
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_36) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_26) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30 (cleanup): {
        _56 = &mut _42;
        _57 = <Box<[std::string::String; 1]> as Drop>::drop(move _56) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop((_3.0: std::option::Option<std::string::String>)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_55) -> [0: bb29, otherwise: bb31];
    }

    bb33: {
        (*_58) = [move _43];
        _38 = move _42;
        _37 = move _38 as std::boxed::Box<[std::string::String]> (PointerCoercion(Unsize));
        _36 = slice::<impl [std::string::String]>::into_vec::<std::alloc::Global>(move _37) -> [return: bb20, unwind: bb28];
    }

    bb34: {
        goto -> bb24;
    }

    bb35: {
        goto -> bb10;
    }

    bb36 (cleanup): {
        goto -> bb28;
    }
}

promoted[0] in <impl at src/main.rs:62:10: 62:18>::redact_arg_values: &mut [ParseStructOption<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructOption<'_>; 0];
    let mut _1: [argh::ParseStructOption<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:62:10: 62:18>::redact_arg_values: &[(&str, usize); 0] = {
    let mut _0: &[(&str, usize); 0];
    let mut _1: [(&str, usize); 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:62:10: 62:18>::redact_arg_values::{closure#0}(_1: &{closure@src/main.rs:62:10: 62:18}, _2: &str, _3: &str) -> Result<std::string::String, std::string::String> {
    let mut _0: std::result::Result<std::string::String, std::string::String>;
    let mut _4: std::string::String;
    let _5: &str;

    bb0: {
        _5 = const "name";
        _4 = <str as ToString>::to_string(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<std::string::String, std::string::String>::Ok(move _4);
        return;
    }
}

fn <impl at src/main.rs:62:10: 62:18>::redact_arg_values::{closure#1}(_1: &{closure@src/main.rs:62:10: 62:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let _10: std::string::String;
    let _11: &str;
    let mut _12: &[&str; 2];
    let mut _13: &&[&str];
    let mut _14: &[&str];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (PointerCoercion(Unsize));
        _13 = deref_copy ((*_1).0: &&[&str]);
        _14 = deref_copy (*_13);
        _11 = const " ";
        _10 = slice::<impl [&str]>::join::<&str>(_14, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:62:10: 62:18>::redact_arg_values::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " <name>\n\nRuns/Tests a single exercise\n\nOptions:\n  --help            display usage information\n"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:62:10: 62:18>::COMMAND: &argh_shared::CommandInfo<'_> = {
    let mut _0: &argh_shared::CommandInfo<'_>;
    let _1: &argh_shared::CommandInfo<'_>;
    let _2: argh_shared::CommandInfo<'_>;
    let mut _3: &argh_shared::CommandInfo<'_>;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in <impl at src/main.rs:62:10: 62:18>::COMMAND: &argh_shared::CommandInfo<'_> = {
    let mut _0: &argh_shared::CommandInfo<'_>;
    let mut _1: argh_shared::CommandInfo<'_>;

    bb0: {
        _1 = argh_shared::CommandInfo::<'_> { name: const "run", description: const "Runs/Tests a single exercise" };
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:62:20: 62:29>::eq(_1: &RunArgs, _2: &RunArgs) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::string::String;
    let mut _4: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _4 = &((*_2).0: std::string::String);
        _0 = <std::string::String as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:62:31: 62:36>::fmt(_1: &RunArgs, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&std::string::String;
    let _7: &std::string::String;

    bb0: {
        _3 = const "RunArgs";
        _4 = const "name";
        _7 = &((*_1).0: std::string::String);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:71:10: 71:18>::from_args(_1: &[&str], _2: &[&str]) -> Result<HintArgs, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<HintArgs, argh::EarlyExit>;
    let mut _3: argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
    let mut _4: std::option::Option<std::string::String>;
    let mut _5: for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _7: std::result::Result<(), argh::EarlyExit>;
    let mut _8: &[&str];
    let mut _9: argh::ParseStructOptions<'_>;
    let mut _10: &[(&str, usize)];
    let mut _11: &mut [argh::ParseStructOption<'_>];
    let mut _12: argh::ParseStructPositionals<'_>;
    let mut _13: &mut [argh::ParseStructPositional<'_>];
    let mut _14: &mut [argh::ParseStructPositional<'_>; 1];
    let mut _15: [argh::ParseStructPositional<'_>; 1];
    let mut _16: argh::ParseStructPositional<'_>;
    let mut _17: &mut dyn argh::ParseValueSlot;
    let mut _18: &mut argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
    let mut _19: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _20: &dyn std::ops::Fn() -> std::string::String;
    let _21: &{closure@src/main.rs:71:10: 71:18};
    let _22: {closure@src/main.rs:71:10: 71:18};
    let mut _23: &&[&str];
    let mut _24: isize;
    let _27: ();
    let mut _28: bool;
    let mut _29: &std::option::Option<std::string::String>;
    let mut _30: &mut argh::MissingRequirements;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _32: std::result::Result<(), std::string::String>;
    let mut _33: &argh::MissingRequirements;
    let mut _34: isize;
    let mut _36: HintArgs;
    let mut _37: std::string::String;
    let mut _38: std::option::Option<std::string::String>;
    let mut _41: bool;
    scope 1 {
        debug name => _3;
        let _25: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
        let mut _26: argh::MissingRequirements;
        let mut _39: &mut [argh::ParseStructOption<'_>; 0];
        let mut _40: &[(&str, usize); 0];
        scope 2 {
            debug residual => _25;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
        scope 6 {
            debug __missing_requirements => _26;
            let _35: std::result::Result<std::convert::Infallible, std::string::String>;
            scope 7 {
                debug residual => _35;
                scope 8 {
                }
            }
            scope 9 {
                debug val => const ();
                scope 10 {
                }
            }
        }
    }

    bb0: {
        _41 = const false;
        _4 = <std::option::Option<std::string::String> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const ZeroSized: {closure@src/main.rs:71:10: 71:18} as for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String> (PointerCoercion(ClosureFnPointer(Normal)));
        _41 = const true;
        _3 = ParseValueSlotTy::<std::option::Option<std::string::String>, std::string::String> { slot: move _4, parse_func: move _5 };
        _8 = _1;
        _40 = const _;
        _10 = _40 as &[(&str, usize)] (PointerCoercion(Unsize));
        _39 = const _;
        _11 = _39 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _9 = ParseStructOptions::<'_> { arg_to_slot: move _10, slots: move _11 };
        _18 = &mut _3;
        _17 = _18 as &mut dyn argh::ParseValueSlot (PointerCoercion(Unsize));
        _16 = ParseStructPositional::<'_> { name: const "name", slot: _17 };
        _15 = [move _16];
        _14 = &mut _15;
        _13 = _14 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _12 = ParseStructPositionals::<'_> { positionals: move _13, last_is_repeating: const false };
        _19 = std::option::Option::<ParseStructSubCommand<'_>>::None;
        _23 = &_1;
        _22 = {closure@src/main.rs:71:10: 71:18} { __cmd_name: move _23 };
        _21 = &_22;
        _20 = _21 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _7 = parse_struct_args(move _8, _2, move _9, move _12, move _19, move _20) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _6 = <Result<(), EarlyExit> as Try>::branch(move _7) -> [return: bb3, unwind: bb24];
    }

    bb3: {
        _24 = discriminant(_6);
        switchInt(move _24) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _26 = <MissingRequirements as Default>::default() -> [return: bb7, unwind: bb24];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _25 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<HintArgs, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _25) -> [return: bb25, unwind: bb24];
    }

    bb7: {
        _29 = &(_3.0: std::option::Option<std::string::String>);
        _28 = std::option::Option::<std::string::String>::is_none(move _29) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        switchInt(move _28) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _30 = &mut _26;
        _27 = MissingRequirements::missing_positional_arg(move _30, const "name") -> [return: bb26, unwind: bb21];
    }

    bb10: {
        _33 = &_26;
        _32 = MissingRequirements::err_on_any(move _33) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _31 = <Result<(), std::string::String> as Try>::branch(move _32) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb13, 1: bb14, otherwise: bb5];
    }

    bb13: {
        _41 = const false;
        _38 = move (_3.0: std::option::Option<std::string::String>);
        _37 = std::option::Option::<std::string::String>::unwrap(move _38) -> [return: bb16, unwind: bb21];
    }

    bb14: {
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<HintArgs, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _35) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        drop(_26) -> [return: bb18, unwind: bb24];
    }

    bb16: {
        _36 = HintArgs { name: move _37 };
        _0 = Result::<HintArgs, EarlyExit>::Ok(move _36);
        drop(_26) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        _41 = const false;
        goto -> bb20;
    }

    bb18: {
        drop(_3) -> [return: bb19, unwind continue];
    }

    bb19: {
        _41 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_26) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        drop((_3.0: std::option::Option<std::string::String>)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_41) -> [0: bb22, otherwise: bb23];
    }

    bb25: {
        goto -> bb18;
    }

    bb26: {
        goto -> bb10;
    }
}

promoted[0] in <impl at src/main.rs:71:10: 71:18>::from_args: &mut [ParseStructOption<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructOption<'_>; 0];
    let mut _1: [argh::ParseStructOption<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:71:10: 71:18>::from_args: &[(&str, usize); 0] = {
    let mut _0: &[(&str, usize); 0];
    let mut _1: [(&str, usize); 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:71:10: 71:18>::from_args::{closure#0}(_1: &{closure@src/main.rs:71:10: 71:18}, _2: &str, _3: &str) -> Result<std::string::String, std::string::String> {
    debug value => _3;
    let mut _0: std::result::Result<std::string::String, std::string::String>;

    bb0: {
        _0 = <std::string::String as FromArgValue>::from_arg_value(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:71:10: 71:18>::from_args::{closure#1}(_1: &{closure@src/main.rs:71:10: 71:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let _10: std::string::String;
    let _11: &str;
    let mut _12: &[&str; 2];
    let mut _13: &&[&str];
    let mut _14: &[&str];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (PointerCoercion(Unsize));
        _13 = deref_copy ((*_1).0: &&[&str]);
        _14 = deref_copy (*_13);
        _11 = const " ";
        _10 = slice::<impl [&str]>::join::<&str>(_14, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:71:10: 71:18>::from_args::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " <name>\n\nReturns a hint for the given exercise\n\nOptions:\n  --help            display usage information\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:71:10: 71:18>::redact_arg_values(_1: &[&str], _2: &[&str]) -> Result<Vec<std::string::String>, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::string::String>, argh::EarlyExit>;
    let mut _3: argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
    let mut _4: std::option::Option<std::string::String>;
    let mut _5: for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _7: std::result::Result<(), argh::EarlyExit>;
    let mut _8: &[&str];
    let mut _9: argh::ParseStructOptions<'_>;
    let mut _10: &[(&str, usize)];
    let mut _11: &mut [argh::ParseStructOption<'_>];
    let mut _12: argh::ParseStructPositionals<'_>;
    let mut _13: &mut [argh::ParseStructPositional<'_>];
    let mut _14: &mut [argh::ParseStructPositional<'_>; 1];
    let mut _15: [argh::ParseStructPositional<'_>; 1];
    let mut _16: argh::ParseStructPositional<'_>;
    let mut _17: &mut dyn argh::ParseValueSlot;
    let mut _18: &mut argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
    let mut _19: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _20: &dyn std::ops::Fn() -> std::string::String;
    let _21: &{closure@src/main.rs:71:10: 71:18};
    let _22: {closure@src/main.rs:71:10: 71:18};
    let mut _23: &&[&str];
    let mut _24: isize;
    let _27: ();
    let mut _28: bool;
    let mut _29: &std::option::Option<std::string::String>;
    let mut _30: &mut argh::MissingRequirements;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _32: std::result::Result<(), std::string::String>;
    let mut _33: &argh::MissingRequirements;
    let mut _34: isize;
    let mut _37: std::boxed::Box<[std::string::String]>;
    let mut _38: std::boxed::Box<[std::string::String; 1]>;
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: *mut u8;
    let mut _42: std::boxed::Box<[std::string::String; 1]>;
    let mut _43: std::string::String;
    let _44: &&str;
    let mut _45: std::option::Option<&&str>;
    let mut _46: &[&str];
    let _47: &str;
    let _48: ();
    let mut _49: &mut std::vec::Vec<std::string::String>;
    let mut _50: std::option::IntoIter<std::string::String>;
    let mut _51: std::option::Option<std::string::String>;
    let mut _52: std::vec::Vec<std::string::String>;
    let mut _55: bool;
    let mut _56: &mut std::boxed::Box<[std::string::String; 1]>;
    let mut _57: ();
    let mut _58: *const [std::string::String; 1];
    scope 1 {
        debug name => _3;
        let _25: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
        let mut _26: argh::MissingRequirements;
        let mut _53: &mut [argh::ParseStructOption<'_>; 0];
        let mut _54: &[(&str, usize); 0];
        scope 2 {
            debug residual => _25;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
        scope 6 {
            debug __missing_requirements => _26;
            let _35: std::result::Result<std::convert::Infallible, std::string::String>;
            let mut _36: std::vec::Vec<std::string::String>;
            let mut _59: *const ();
            let mut _60: usize;
            let mut _61: usize;
            let mut _62: usize;
            let mut _63: usize;
            let mut _64: bool;
            scope 7 {
                debug residual => _35;
                scope 8 {
                }
            }
            scope 9 {
                debug val => const ();
                scope 10 {
                }
            }
            scope 11 {
                debug __redacted => _36;
            }
            scope 12 {
            }
        }
    }

    bb0: {
        _55 = const false;
        _4 = <std::option::Option<std::string::String> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const ZeroSized: {closure@src/main.rs:71:10: 71:18} as for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String> (PointerCoercion(ClosureFnPointer(Normal)));
        _55 = const true;
        _3 = ParseValueSlotTy::<std::option::Option<std::string::String>, std::string::String> { slot: move _4, parse_func: move _5 };
        _8 = _1;
        _54 = const _;
        _10 = _54 as &[(&str, usize)] (PointerCoercion(Unsize));
        _53 = const _;
        _11 = _53 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _9 = ParseStructOptions::<'_> { arg_to_slot: move _10, slots: move _11 };
        _18 = &mut _3;
        _17 = _18 as &mut dyn argh::ParseValueSlot (PointerCoercion(Unsize));
        _16 = ParseStructPositional::<'_> { name: const "name", slot: _17 };
        _15 = [move _16];
        _14 = &mut _15;
        _13 = _14 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _12 = ParseStructPositionals::<'_> { positionals: move _13, last_is_repeating: const false };
        _19 = std::option::Option::<ParseStructSubCommand<'_>>::None;
        _23 = &_1;
        _22 = {closure@src/main.rs:71:10: 71:18} { __cmd_name: move _23 };
        _21 = &_22;
        _20 = _21 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _7 = parse_struct_args(move _8, _2, move _9, move _12, move _19, move _20) -> [return: bb2, unwind: bb32];
    }

    bb2: {
        _6 = <Result<(), EarlyExit> as Try>::branch(move _7) -> [return: bb3, unwind: bb32];
    }

    bb3: {
        _24 = discriminant(_6);
        switchInt(move _24) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _26 = <MissingRequirements as Default>::default() -> [return: bb7, unwind: bb32];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _25 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _25) -> [return: bb34, unwind: bb32];
    }

    bb7: {
        _29 = &(_3.0: std::option::Option<std::string::String>);
        _28 = std::option::Option::<std::string::String>::is_none(move _29) -> [return: bb8, unwind: bb28];
    }

    bb8: {
        switchInt(move _28) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _30 = &mut _26;
        _27 = MissingRequirements::missing_positional_arg(move _30, const "name") -> [return: bb35, unwind: bb28];
    }

    bb10: {
        _33 = &_26;
        _32 = MissingRequirements::err_on_any(move _33) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _31 = <Result<(), std::string::String> as Try>::branch(move _32) -> [return: bb12, unwind: bb28];
    }

    bb12: {
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb13, 1: bb14, otherwise: bb5];
    }

    bb13: {
        _39 = SizeOf([std::string::String; 1]);
        _40 = AlignOf([std::string::String; 1]);
        _41 = alloc::alloc::exchange_malloc(move _39, move _40) -> [return: bb16, unwind: bb28];
    }

    bb14: {
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _35) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        drop(_26) -> [return: bb24, unwind: bb32];
    }

    bb16: {
        _42 = ShallowInitBox(move _41, [std::string::String; 1]);
        _46 = _1;
        _45 = core::slice::<impl [&str]>::last(move _46) -> [return: bb17, unwind: bb30];
    }

    bb17: {
        _47 = const "no subcommand name";
        _44 = std::option::Option::<&&str>::expect(move _45, _47) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        _43 = <&str as ToString>::to_string(_44) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _58 = (((_42.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]);
        _59 = _58 as *const () (PtrToPtr);
        _60 = _59 as usize (Transmute);
        _61 = AlignOf([std::string::String; 1]);
        _62 = Sub(_61, const 1_usize);
        _63 = BitAnd(_60, _62);
        _64 = Eq(_63, const 0_usize);
        assert(_64, "misaligned pointer dereference: address must be a multiple of {} but is {}", _61, _60) -> [success: bb33, unwind unreachable];
    }

    bb20: {
        _49 = &mut _36;
        _55 = const false;
        _51 = move (_3.0: std::option::Option<std::string::String>);
        _50 = <std::option::Option<std::string::String> as IntoIterator>::into_iter(move _51) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        _48 = <Vec<std::string::String> as Extend<std::string::String>>::extend::<std::option::IntoIter<std::string::String>>(move _49, move _50) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        _52 = move _36;
        _0 = Result::<Vec<std::string::String>, EarlyExit>::Ok(move _52);
        drop(_26) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        _55 = const false;
        goto -> bb26;
    }

    bb24: {
        drop(_3) -> [return: bb25, unwind continue];
    }

    bb25: {
        _55 = const false;
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_36) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_26) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30 (cleanup): {
        _56 = &mut _42;
        _57 = <Box<[std::string::String; 1]> as Drop>::drop(move _56) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop((_3.0: std::option::Option<std::string::String>)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_55) -> [0: bb29, otherwise: bb31];
    }

    bb33: {
        (*_58) = [move _43];
        _38 = move _42;
        _37 = move _38 as std::boxed::Box<[std::string::String]> (PointerCoercion(Unsize));
        _36 = slice::<impl [std::string::String]>::into_vec::<std::alloc::Global>(move _37) -> [return: bb20, unwind: bb28];
    }

    bb34: {
        goto -> bb24;
    }

    bb35: {
        goto -> bb10;
    }

    bb36 (cleanup): {
        goto -> bb28;
    }
}

promoted[0] in <impl at src/main.rs:71:10: 71:18>::redact_arg_values: &mut [ParseStructOption<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructOption<'_>; 0];
    let mut _1: [argh::ParseStructOption<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:71:10: 71:18>::redact_arg_values: &[(&str, usize); 0] = {
    let mut _0: &[(&str, usize); 0];
    let mut _1: [(&str, usize); 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:71:10: 71:18>::redact_arg_values::{closure#0}(_1: &{closure@src/main.rs:71:10: 71:18}, _2: &str, _3: &str) -> Result<std::string::String, std::string::String> {
    let mut _0: std::result::Result<std::string::String, std::string::String>;
    let mut _4: std::string::String;
    let _5: &str;

    bb0: {
        _5 = const "name";
        _4 = <str as ToString>::to_string(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<std::string::String, std::string::String>::Ok(move _4);
        return;
    }
}

fn <impl at src/main.rs:71:10: 71:18>::redact_arg_values::{closure#1}(_1: &{closure@src/main.rs:71:10: 71:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let _10: std::string::String;
    let _11: &str;
    let mut _12: &[&str; 2];
    let mut _13: &&[&str];
    let mut _14: &[&str];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (PointerCoercion(Unsize));
        _13 = deref_copy ((*_1).0: &&[&str]);
        _14 = deref_copy (*_13);
        _11 = const " ";
        _10 = slice::<impl [&str]>::join::<&str>(_14, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:71:10: 71:18>::redact_arg_values::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " <name>\n\nReturns a hint for the given exercise\n\nOptions:\n  --help            display usage information\n"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:71:10: 71:18>::COMMAND: &argh_shared::CommandInfo<'_> = {
    let mut _0: &argh_shared::CommandInfo<'_>;
    let _1: &argh_shared::CommandInfo<'_>;
    let _2: argh_shared::CommandInfo<'_>;
    let mut _3: &argh_shared::CommandInfo<'_>;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in <impl at src/main.rs:71:10: 71:18>::COMMAND: &argh_shared::CommandInfo<'_> = {
    let mut _0: &argh_shared::CommandInfo<'_>;
    let mut _1: argh_shared::CommandInfo<'_>;

    bb0: {
        _1 = argh_shared::CommandInfo::<'_> { name: const "hint", description: const "Returns a hint for the given exercise" };
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:71:20: 71:29>::eq(_1: &HintArgs, _2: &HintArgs) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::string::String;
    let mut _4: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _4 = &((*_2).0: std::string::String);
        _0 = <std::string::String as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:71:31: 71:36>::fmt(_1: &HintArgs, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&std::string::String;
    let _7: &std::string::String;

    bb0: {
        _3 = const "HintArgs";
        _4 = const "name";
        _7 = &((*_1).0: std::string::String);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:80:10: 80:18>::from_args(_1: &[&str], _2: &[&str]) -> Result<ListArgs, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<ListArgs, argh::EarlyExit>;
    let mut _3: bool;
    let mut _6: std::option::Option<std::string::String>;
    let mut _7: for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String>;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _11: std::result::Result<(), argh::EarlyExit>;
    let mut _12: &[&str];
    let mut _13: argh::ParseStructOptions<'_>;
    let mut _14: &[(&str, usize)];
    let mut _15: &mut [argh::ParseStructOption<'_>];
    let mut _16: &mut [argh::ParseStructOption<'_>; 5];
    let mut _17: [argh::ParseStructOption<'_>; 5];
    let mut _18: argh::ParseStructOption<'_>;
    let mut _19: &mut dyn argh::ParseFlag;
    let mut _20: &mut bool;
    let mut _21: argh::ParseStructOption<'_>;
    let mut _22: &mut dyn argh::ParseFlag;
    let mut _23: &mut bool;
    let mut _24: argh::ParseStructOption<'_>;
    let mut _25: &mut dyn argh::ParseValueSlot;
    let mut _26: &mut argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
    let mut _27: argh::ParseStructOption<'_>;
    let mut _28: &mut dyn argh::ParseFlag;
    let mut _29: &mut bool;
    let mut _30: argh::ParseStructOption<'_>;
    let mut _31: &mut dyn argh::ParseFlag;
    let mut _32: &mut bool;
    let mut _33: argh::ParseStructPositionals<'_>;
    let mut _34: &mut [argh::ParseStructPositional<'_>];
    let mut _35: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _36: &dyn std::ops::Fn() -> std::string::String;
    let _37: &{closure@src/main.rs:80:10: 80:18};
    let _38: {closure@src/main.rs:80:10: 80:18};
    let mut _39: &&[&str];
    let mut _40: isize;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _44: std::result::Result<(), std::string::String>;
    let mut _45: &argh::MissingRequirements;
    let mut _46: isize;
    let mut _48: ListArgs;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: std::option::Option<std::string::String>;
    let mut _52: bool;
    let mut _53: bool;
    let mut _56: bool;
    scope 1 {
        debug paths => _3;
        let mut _4: bool;
        scope 2 {
            debug names => _4;
            let mut _5: argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
            scope 3 {
                debug filter => _5;
                let mut _8: bool;
                scope 4 {
                    debug unsolved => _8;
                    let mut _9: bool;
                    scope 5 {
                        debug solved => _9;
                        let _41: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
                        let mut _42: argh::MissingRequirements;
                        let mut _54: &mut [argh::ParseStructPositional<'_>; 0];
                        let mut _55: &[(&str, usize); 10];
                        scope 6 {
                            debug residual => _41;
                            scope 7 {
                            }
                        }
                        scope 8 {
                            debug val => const ();
                            scope 9 {
                            }
                        }
                        scope 10 {
                            debug __missing_requirements => _42;
                            let _47: std::result::Result<std::convert::Infallible, std::string::String>;
                            scope 11 {
                                debug residual => _47;
                                scope 12 {
                                }
                            }
                            scope 13 {
                                debug val => const ();
                                scope 14 {
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _56 = const false;
        _3 = <bool as argh::Flag>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <bool as argh::Flag>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <std::option::Option<std::string::String> as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = const ZeroSized: {closure@src/main.rs:80:10: 80:18} as for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String> (PointerCoercion(ClosureFnPointer(Normal)));
        _56 = const true;
        _5 = ParseValueSlotTy::<std::option::Option<std::string::String>, std::string::String> { slot: move _6, parse_func: move _7 };
        _8 = <bool as argh::Flag>::default() -> [return: bb4, unwind: bb24];
    }

    bb4: {
        _9 = <bool as argh::Flag>::default() -> [return: bb5, unwind: bb24];
    }

    bb5: {
        _12 = _1;
        _55 = const _;
        _14 = _55 as &[(&str, usize)] (PointerCoercion(Unsize));
        _20 = &mut _3;
        _19 = _20 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _18 = ParseStructOption::<'_>::Flag(move _19);
        _23 = &mut _4;
        _22 = _23 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _21 = ParseStructOption::<'_>::Flag(move _22);
        _26 = &mut _5;
        _25 = _26 as &mut dyn argh::ParseValueSlot (PointerCoercion(Unsize));
        _24 = ParseStructOption::<'_>::Value(move _25);
        _29 = &mut _8;
        _28 = _29 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _27 = ParseStructOption::<'_>::Flag(move _28);
        _32 = &mut _9;
        _31 = _32 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _30 = ParseStructOption::<'_>::Flag(move _31);
        _17 = [move _18, move _21, move _24, move _27, move _30];
        _16 = &mut _17;
        _15 = _16 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _13 = ParseStructOptions::<'_> { arg_to_slot: move _14, slots: move _15 };
        _54 = const _;
        _34 = _54 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _33 = ParseStructPositionals::<'_> { positionals: move _34, last_is_repeating: const false };
        _35 = std::option::Option::<ParseStructSubCommand<'_>>::None;
        _39 = &_1;
        _38 = {closure@src/main.rs:80:10: 80:18} { __cmd_name: move _39 };
        _37 = &_38;
        _36 = _37 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _11 = parse_struct_args(move _12, _2, move _13, move _33, move _35, move _36) -> [return: bb6, unwind: bb24];
    }

    bb6: {
        _10 = <Result<(), EarlyExit> as Try>::branch(move _11) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _40 = discriminant(_10);
        switchInt(move _40) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _42 = <MissingRequirements as Default>::default() -> [return: bb11, unwind: bb24];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _41 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<ListArgs, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _41) -> [return: bb25, unwind: bb24];
    }

    bb11: {
        _45 = &_42;
        _44 = MissingRequirements::err_on_any(move _45) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        _43 = <Result<(), std::string::String> as Try>::branch(move _44) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        _49 = _3;
        _50 = _4;
        _56 = const false;
        _51 = move (_5.0: std::option::Option<std::string::String>);
        _52 = _8;
        _53 = _9;
        _48 = ListArgs { paths: move _49, names: move _50, filter: move _51, unsolved: move _52, solved: move _53 };
        _0 = Result::<ListArgs, EarlyExit>::Ok(move _48);
        drop(_42) -> [return: bb17, unwind: bb24];
    }

    bb15: {
        _47 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<ListArgs, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _47) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        drop(_42) -> [return: bb18, unwind: bb24];
    }

    bb17: {
        _56 = const false;
        goto -> bb20;
    }

    bb18: {
        drop(_5) -> [return: bb19, unwind continue];
    }

    bb19: {
        _56 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_42) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        drop((_5.0: std::option::Option<std::string::String>)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_56) -> [0: bb22, otherwise: bb23];
    }

    bb25: {
        goto -> bb18;
    }
}

promoted[0] in <impl at src/main.rs:80:10: 80:18>::from_args: &mut [ParseStructPositional<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _1: [argh::ParseStructPositional<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:80:10: 80:18>::from_args: &[(&str, usize); 10] = {
    let mut _0: &[(&str, usize); 10];
    let mut _1: [(&str, usize); 10];
    let mut _2: (&str, usize);
    let mut _3: (&str, usize);
    let mut _4: (&str, usize);
    let mut _5: (&str, usize);
    let mut _6: (&str, usize);
    let mut _7: (&str, usize);
    let mut _8: (&str, usize);
    let mut _9: (&str, usize);
    let mut _10: (&str, usize);
    let mut _11: (&str, usize);

    bb0: {
        _2 = (const "-p", const 0_usize);
        _3 = (const "--paths", const 0_usize);
        _4 = (const "-n", const 1_usize);
        _5 = (const "--names", const 1_usize);
        _6 = (const "-f", const 2_usize);
        _7 = (const "--filter", const 2_usize);
        _8 = (const "-u", const 3_usize);
        _9 = (const "--unsolved", const 3_usize);
        _10 = (const "-s", const 4_usize);
        _11 = (const "--solved", const 4_usize);
        _1 = [move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:80:10: 80:18>::from_args::{closure#0}(_1: &{closure@src/main.rs:80:10: 80:18}, _2: &str, _3: &str) -> Result<std::string::String, std::string::String> {
    debug value => _3;
    let mut _0: std::result::Result<std::string::String, std::string::String>;

    bb0: {
        _0 = <std::string::String as FromArgValue>::from_arg_value(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:80:10: 80:18>::from_args::{closure#1}(_1: &{closure@src/main.rs:80:10: 80:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let _10: std::string::String;
    let _11: &str;
    let mut _12: &[&str; 2];
    let mut _13: &&[&str];
    let mut _14: &[&str];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (PointerCoercion(Unsize));
        _13 = deref_copy ((*_1).0: &&[&str]);
        _14 = deref_copy (*_13);
        _11 = const " ";
        _10 = slice::<impl [&str]>::join::<&str>(_14, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:80:10: 80:18>::from_args::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " [-p] [-n] [-f <filter>] [-u] [-s]\n\nLists the exercises available in Rustlings\n\nOptions:\n  -p, --paths       show only the paths of the exercises\n  -n, --names       show only the names of the exercises\n  -f, --filter      provide a string to match exercise names comma separated\n                    patterns are acceptable\n  -u, --unsolved    display only exercises not yet solved\n  -s, --solved      display only exercises that have been solved\n  --help            display usage information\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:80:10: 80:18>::redact_arg_values(_1: &[&str], _2: &[&str]) -> Result<Vec<std::string::String>, EarlyExit> {
    debug __cmd_name => _1;
    debug __args => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::string::String>, argh::EarlyExit>;
    let mut _3: argh::RedactFlag;
    let mut _4: std::option::Option<std::string::String>;
    let mut _6: std::option::Option<std::string::String>;
    let mut _8: std::option::Option<std::string::String>;
    let mut _9: for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String>;
    let mut _11: std::option::Option<std::string::String>;
    let mut _13: std::option::Option<std::string::String>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, argh::EarlyExit>>;
    let mut _15: std::result::Result<(), argh::EarlyExit>;
    let mut _16: &[&str];
    let mut _17: argh::ParseStructOptions<'_>;
    let mut _18: &[(&str, usize)];
    let mut _19: &mut [argh::ParseStructOption<'_>];
    let mut _20: &mut [argh::ParseStructOption<'_>; 5];
    let mut _21: [argh::ParseStructOption<'_>; 5];
    let mut _22: argh::ParseStructOption<'_>;
    let mut _23: &mut dyn argh::ParseFlag;
    let mut _24: &mut argh::RedactFlag;
    let mut _25: argh::ParseStructOption<'_>;
    let mut _26: &mut dyn argh::ParseFlag;
    let mut _27: &mut argh::RedactFlag;
    let mut _28: argh::ParseStructOption<'_>;
    let mut _29: &mut dyn argh::ParseValueSlot;
    let mut _30: &mut argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
    let mut _31: argh::ParseStructOption<'_>;
    let mut _32: &mut dyn argh::ParseFlag;
    let mut _33: &mut argh::RedactFlag;
    let mut _34: argh::ParseStructOption<'_>;
    let mut _35: &mut dyn argh::ParseFlag;
    let mut _36: &mut argh::RedactFlag;
    let mut _37: argh::ParseStructPositionals<'_>;
    let mut _38: &mut [argh::ParseStructPositional<'_>];
    let mut _39: std::option::Option<argh::ParseStructSubCommand<'_>>;
    let mut _40: &dyn std::ops::Fn() -> std::string::String;
    let _41: &{closure@src/main.rs:80:10: 80:18};
    let _42: {closure@src/main.rs:80:10: 80:18};
    let mut _43: &&[&str];
    let mut _44: isize;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _48: std::result::Result<(), std::string::String>;
    let mut _49: &argh::MissingRequirements;
    let mut _50: isize;
    let mut _53: std::boxed::Box<[std::string::String]>;
    let mut _54: std::boxed::Box<[std::string::String; 1]>;
    let mut _55: usize;
    let mut _56: usize;
    let mut _57: *mut u8;
    let mut _58: std::boxed::Box<[std::string::String; 1]>;
    let mut _59: std::string::String;
    let _60: &&str;
    let mut _61: std::option::Option<&&str>;
    let mut _62: &[&str];
    let _63: &str;
    let mut _64: isize;
    let _66: ();
    let mut _67: &mut std::vec::Vec<std::string::String>;
    let mut _68: isize;
    let _70: ();
    let mut _71: &mut std::vec::Vec<std::string::String>;
    let mut _72: isize;
    let _74: ();
    let mut _75: &mut std::vec::Vec<std::string::String>;
    let mut _76: isize;
    let _78: ();
    let mut _79: &mut std::vec::Vec<std::string::String>;
    let mut _80: isize;
    let _82: ();
    let mut _83: &mut std::vec::Vec<std::string::String>;
    let mut _84: std::vec::Vec<std::string::String>;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: &mut std::boxed::Box<[std::string::String; 1]>;
    let mut _98: ();
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: *const [std::string::String; 1];
    scope 1 {
        debug paths => _3;
        let mut _5: argh::RedactFlag;
        scope 2 {
            debug names => _5;
            let mut _7: argh::ParseValueSlotTy<std::option::Option<std::string::String>, std::string::String>;
            scope 3 {
                debug filter => _7;
                let mut _10: argh::RedactFlag;
                scope 4 {
                    debug unsolved => _10;
                    let mut _12: argh::RedactFlag;
                    scope 5 {
                        debug solved => _12;
                        let _45: std::result::Result<std::convert::Infallible, argh::EarlyExit>;
                        let mut _46: argh::MissingRequirements;
                        let mut _85: &mut [argh::ParseStructPositional<'_>; 0];
                        let mut _86: &[(&str, usize); 10];
                        scope 6 {
                            debug residual => _45;
                            scope 7 {
                            }
                        }
                        scope 8 {
                            debug val => const ();
                            scope 9 {
                            }
                        }
                        scope 10 {
                            debug __missing_requirements => _46;
                            let _51: std::result::Result<std::convert::Infallible, std::string::String>;
                            let mut _52: std::vec::Vec<std::string::String>;
                            let mut _105: *const ();
                            let mut _106: usize;
                            let mut _107: usize;
                            let mut _108: usize;
                            let mut _109: usize;
                            let mut _110: bool;
                            scope 11 {
                                debug residual => _51;
                                scope 12 {
                                }
                            }
                            scope 13 {
                                debug val => const ();
                                scope 14 {
                                }
                            }
                            scope 15 {
                                debug __redacted => _52;
                                scope 17 {
                                    debug __field_name => _65;
                                    let _65: std::string::String;
                                }
                                scope 18 {
                                    debug __field_name => _69;
                                    let _69: std::string::String;
                                }
                                scope 19 {
                                    debug __field_name => _73;
                                    let _73: std::string::String;
                                }
                                scope 20 {
                                    debug __field_name => _77;
                                    let _77: std::string::String;
                                }
                                scope 21 {
                                    debug __field_name => _81;
                                    let _81: std::string::String;
                                }
                            }
                            scope 16 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _4 = std::option::Option::<std::string::String>::None;
        _91 = const true;
        _3 = RedactFlag { slot: move _4 };
        _6 = std::option::Option::<std::string::String>::None;
        _90 = const true;
        _5 = RedactFlag { slot: move _6 };
        _8 = <std::option::Option<std::string::String> as Default>::default() -> [return: bb1, unwind: bb66];
    }

    bb1: {
        _9 = const ZeroSized: {closure@src/main.rs:80:10: 80:18} as for<'a, 'b> fn(&'a str, &'b str) -> std::result::Result<std::string::String, std::string::String> (PointerCoercion(ClosureFnPointer(Normal)));
        _89 = const true;
        _7 = ParseValueSlotTy::<std::option::Option<std::string::String>, std::string::String> { slot: move _8, parse_func: move _9 };
        _11 = std::option::Option::<std::string::String>::None;
        _88 = const true;
        _10 = RedactFlag { slot: move _11 };
        _13 = std::option::Option::<std::string::String>::None;
        _87 = const true;
        _12 = RedactFlag { slot: move _13 };
        _16 = _1;
        _86 = const _;
        _18 = _86 as &[(&str, usize)] (PointerCoercion(Unsize));
        _24 = &mut _3;
        _23 = _24 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _22 = ParseStructOption::<'_>::Flag(move _23);
        _27 = &mut _5;
        _26 = _27 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _25 = ParseStructOption::<'_>::Flag(move _26);
        _30 = &mut _7;
        _29 = _30 as &mut dyn argh::ParseValueSlot (PointerCoercion(Unsize));
        _28 = ParseStructOption::<'_>::Value(move _29);
        _33 = &mut _10;
        _32 = _33 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _31 = ParseStructOption::<'_>::Flag(move _32);
        _36 = &mut _12;
        _35 = _36 as &mut dyn argh::ParseFlag (PointerCoercion(Unsize));
        _34 = ParseStructOption::<'_>::Flag(move _35);
        _21 = [move _22, move _25, move _28, move _31, move _34];
        _20 = &mut _21;
        _19 = _20 as &mut [argh::ParseStructOption<'_>] (PointerCoercion(Unsize));
        _17 = ParseStructOptions::<'_> { arg_to_slot: move _18, slots: move _19 };
        _85 = const _;
        _38 = _85 as &mut [argh::ParseStructPositional<'_>] (PointerCoercion(Unsize));
        _37 = ParseStructPositionals::<'_> { positionals: move _38, last_is_repeating: const false };
        _39 = std::option::Option::<ParseStructSubCommand<'_>>::None;
        _43 = &_1;
        _42 = {closure@src/main.rs:80:10: 80:18} { __cmd_name: move _43 };
        _41 = &_42;
        _40 = _41 as &dyn std::ops::Fn() -> std::string::String (PointerCoercion(Unsize));
        _15 = parse_struct_args(move _16, _2, move _17, move _37, move _39, move _40) -> [return: bb2, unwind: bb57];
    }

    bb2: {
        _14 = <Result<(), EarlyExit> as Try>::branch(move _15) -> [return: bb3, unwind: bb57];
    }

    bb3: {
        _44 = discriminant(_14);
        switchInt(move _44) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _46 = <MissingRequirements as Default>::default() -> [return: bb7, unwind: bb57];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _45 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, argh::EarlyExit>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, EarlyExit>>>::from_residual(move _45) -> [return: bb71, unwind: bb57];
    }

    bb7: {
        _49 = &_46;
        _48 = MissingRequirements::err_on_any(move _49) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        _47 = <Result<(), std::string::String> as Try>::branch(move _48) -> [return: bb9, unwind: bb37];
    }

    bb9: {
        _50 = discriminant(_47);
        switchInt(move _50) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        _55 = SizeOf([std::string::String; 1]);
        _56 = AlignOf([std::string::String; 1]);
        _57 = alloc::alloc::exchange_malloc(move _55, move _56) -> [return: bb13, unwind: bb37];
    }

    bb11: {
        _51 = move ((_47 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Vec<std::string::String>, EarlyExit> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _51) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        drop(_46) -> [return: bb29, unwind: bb57];
    }

    bb13: {
        _58 = ShallowInitBox(move _57, [std::string::String; 1]);
        _62 = _1;
        _61 = core::slice::<impl [&str]>::last(move _62) -> [return: bb14, unwind: bb54];
    }

    bb14: {
        _63 = const "no subcommand name";
        _60 = std::option::Option::<&&str>::expect(move _61, _63) -> [return: bb15, unwind: bb54];
    }

    bb15: {
        _59 = <&str as ToString>::to_string(_60) -> [return: bb16, unwind: bb54];
    }

    bb16: {
        _104 = (((_58.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]);
        _105 = _104 as *const () (PtrToPtr);
        _106 = _105 as usize (Transmute);
        _107 = AlignOf([std::string::String; 1]);
        _108 = Sub(_107, const 1_usize);
        _109 = BitAnd(_106, _108);
        _110 = Eq(_109, const 0_usize);
        assert(_110, "misaligned pointer dereference: address must be a multiple of {} but is {}", _107, _106) -> [success: bb70, unwind unreachable];
    }

    bb17: {
        _64 = discriminant((_3.0: std::option::Option<std::string::String>));
        switchInt(move _64) -> [1: bb18, otherwise: bb19];
    }

    bb18: {
        _91 = const false;
        _65 = move (((_3.0: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _67 = &mut _52;
        _66 = Vec::<std::string::String>::push(move _67, move _65) -> [return: bb72, unwind: bb36];
    }

    bb19: {
        _68 = discriminant((_5.0: std::option::Option<std::string::String>));
        switchInt(move _68) -> [1: bb20, otherwise: bb21];
    }

    bb20: {
        _90 = const false;
        _69 = move (((_5.0: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _71 = &mut _52;
        _70 = Vec::<std::string::String>::push(move _71, move _69) -> [return: bb73, unwind: bb36];
    }

    bb21: {
        _72 = discriminant((_7.0: std::option::Option<std::string::String>));
        switchInt(move _72) -> [1: bb22, otherwise: bb23];
    }

    bb22: {
        _89 = const false;
        _73 = move (((_7.0: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _75 = &mut _52;
        _74 = Vec::<std::string::String>::push(move _75, move _73) -> [return: bb74, unwind: bb36];
    }

    bb23: {
        _76 = discriminant((_10.0: std::option::Option<std::string::String>));
        switchInt(move _76) -> [1: bb24, otherwise: bb25];
    }

    bb24: {
        _88 = const false;
        _77 = move (((_10.0: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _79 = &mut _52;
        _78 = Vec::<std::string::String>::push(move _79, move _77) -> [return: bb75, unwind: bb36];
    }

    bb25: {
        _80 = discriminant((_12.0: std::option::Option<std::string::String>));
        switchInt(move _80) -> [1: bb26, otherwise: bb27];
    }

    bb26: {
        _87 = const false;
        _81 = move (((_12.0: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _83 = &mut _52;
        _82 = Vec::<std::string::String>::push(move _83, move _81) -> [return: bb76, unwind: bb36];
    }

    bb27: {
        _84 = move _52;
        _0 = Result::<Vec<std::string::String>, EarlyExit>::Ok(move _84);
        drop(_46) -> [return: bb28, unwind: bb57];
    }

    bb28: {
        _92 = discriminant((_12.0: std::option::Option<std::string::String>));
        switchInt(move _92) -> [1: bb40, otherwise: bb39];
    }

    bb29: {
        drop(_12) -> [return: bb30, unwind: bb60];
    }

    bb30: {
        _87 = const false;
        drop(_10) -> [return: bb31, unwind: bb63];
    }

    bb31: {
        _88 = const false;
        drop(_7) -> [return: bb32, unwind: bb66];
    }

    bb32: {
        _89 = const false;
        drop(_5) -> [return: bb33, unwind: bb69];
    }

    bb33: {
        _90 = const false;
        drop(_3) -> [return: bb34, unwind continue];
    }

    bb34: {
        _91 = const false;
        goto -> bb35;
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_52) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_46) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        resume;
    }

    bb39: {
        _87 = const false;
        _93 = discriminant((_10.0: std::option::Option<std::string::String>));
        switchInt(move _93) -> [1: bb43, otherwise: bb42];
    }

    bb40: {
        switchInt(_87) -> [0: bb39, otherwise: bb41];
    }

    bb41: {
        drop((((_12.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb39, unwind: bb60];
    }

    bb42: {
        _88 = const false;
        _94 = discriminant((_7.0: std::option::Option<std::string::String>));
        switchInt(move _94) -> [1: bb46, otherwise: bb45];
    }

    bb43: {
        switchInt(_88) -> [0: bb42, otherwise: bb44];
    }

    bb44: {
        drop((((_10.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb42, unwind: bb63];
    }

    bb45: {
        _89 = const false;
        _95 = discriminant((_5.0: std::option::Option<std::string::String>));
        switchInt(move _95) -> [1: bb49, otherwise: bb48];
    }

    bb46: {
        switchInt(_89) -> [0: bb45, otherwise: bb47];
    }

    bb47: {
        drop((((_7.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb45, unwind: bb66];
    }

    bb48: {
        _90 = const false;
        _96 = discriminant((_3.0: std::option::Option<std::string::String>));
        switchInt(move _96) -> [1: bb52, otherwise: bb51];
    }

    bb49: {
        switchInt(_90) -> [0: bb48, otherwise: bb50];
    }

    bb50: {
        drop((((_5.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb48, unwind: bb69];
    }

    bb51: {
        _91 = const false;
        goto -> bb35;
    }

    bb52: {
        switchInt(_91) -> [0: bb51, otherwise: bb53];
    }

    bb53: {
        drop((((_3.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb51, unwind continue];
    }

    bb54 (cleanup): {
        _97 = &mut _58;
        _98 = <Box<[std::string::String; 1]> as Drop>::drop(move _97) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_87) -> [0: bb60, otherwise: bb56];
    }

    bb56 (cleanup): {
        drop((((_12.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        _99 = discriminant((_12.0: std::option::Option<std::string::String>));
        switchInt(move _99) -> [1: bb55, otherwise: bb60];
    }

    bb58 (cleanup): {
        switchInt(_88) -> [0: bb63, otherwise: bb59];
    }

    bb59 (cleanup): {
        drop((((_10.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        _100 = discriminant((_10.0: std::option::Option<std::string::String>));
        switchInt(move _100) -> [1: bb58, otherwise: bb63];
    }

    bb61 (cleanup): {
        switchInt(_89) -> [0: bb66, otherwise: bb62];
    }

    bb62 (cleanup): {
        drop((((_7.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        _101 = discriminant((_7.0: std::option::Option<std::string::String>));
        switchInt(move _101) -> [1: bb61, otherwise: bb66];
    }

    bb64 (cleanup): {
        switchInt(_90) -> [0: bb69, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop((((_5.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        _102 = discriminant((_5.0: std::option::Option<std::string::String>));
        switchInt(move _102) -> [1: bb64, otherwise: bb69];
    }

    bb67 (cleanup): {
        switchInt(_91) -> [0: bb38, otherwise: bb68];
    }

    bb68 (cleanup): {
        drop((((_3.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        _103 = discriminant((_3.0: std::option::Option<std::string::String>));
        switchInt(move _103) -> [1: bb67, otherwise: bb38];
    }

    bb70: {
        (*_104) = [move _59];
        _54 = move _58;
        _53 = move _54 as std::boxed::Box<[std::string::String]> (PointerCoercion(Unsize));
        _52 = slice::<impl [std::string::String]>::into_vec::<std::alloc::Global>(move _53) -> [return: bb17, unwind: bb37];
    }

    bb71: {
        goto -> bb29;
    }

    bb72: {
        goto -> bb19;
    }

    bb73: {
        goto -> bb21;
    }

    bb74: {
        goto -> bb23;
    }

    bb75: {
        goto -> bb25;
    }

    bb76: {
        goto -> bb27;
    }

    bb77 (cleanup): {
        goto -> bb37;
    }
}

promoted[0] in <impl at src/main.rs:80:10: 80:18>::redact_arg_values: &mut [ParseStructPositional<'_>; 0] = {
    let mut _0: &mut [argh::ParseStructPositional<'_>; 0];
    let mut _1: [argh::ParseStructPositional<'_>; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:80:10: 80:18>::redact_arg_values: &[(&str, usize); 10] = {
    let mut _0: &[(&str, usize); 10];
    let mut _1: [(&str, usize); 10];
    let mut _2: (&str, usize);
    let mut _3: (&str, usize);
    let mut _4: (&str, usize);
    let mut _5: (&str, usize);
    let mut _6: (&str, usize);
    let mut _7: (&str, usize);
    let mut _8: (&str, usize);
    let mut _9: (&str, usize);
    let mut _10: (&str, usize);
    let mut _11: (&str, usize);

    bb0: {
        _2 = (const "-p", const 0_usize);
        _3 = (const "--paths", const 0_usize);
        _4 = (const "-n", const 1_usize);
        _5 = (const "--names", const 1_usize);
        _6 = (const "-f", const 2_usize);
        _7 = (const "--filter", const 2_usize);
        _8 = (const "-u", const 3_usize);
        _9 = (const "--unsolved", const 3_usize);
        _10 = (const "-s", const 4_usize);
        _11 = (const "--solved", const 4_usize);
        _1 = [move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:80:10: 80:18>::redact_arg_values::{closure#0}(_1: &{closure@src/main.rs:80:10: 80:18}, _2: &str, _3: &str) -> Result<std::string::String, std::string::String> {
    debug arg => _2;
    let mut _0: std::result::Result<std::string::String, std::string::String>;
    let mut _4: std::string::String;

    bb0: {
        _4 = <str as ToString>::to_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<std::string::String, std::string::String>::Ok(move _4);
        return;
    }
}

fn <impl at src/main.rs:80:10: 80:18>::redact_arg_values::{closure#1}(_1: &{closure@src/main.rs:80:10: 80:18}) -> std::string::String {
    debug __cmd_name => (*((*_1).0: &&[&str]));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let _10: std::string::String;
    let _11: &str;
    let mut _12: &[&str; 2];
    let mut _13: &&[&str];
    let mut _14: &[&str];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (PointerCoercion(Unsize));
        _13 = deref_copy ((*_1).0: &&[&str]);
        _14 = deref_copy (*_13);
        _11 = const " ";
        _10 = slice::<impl [&str]>::join::<&str>(_14, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:80:10: 80:18>::redact_arg_values::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Usage: ", const " [-p] [-n] [-f <filter>] [-u] [-s]\n\nLists the exercises available in Rustlings\n\nOptions:\n  -p, --paths       show only the paths of the exercises\n  -n, --names       show only the names of the exercises\n  -f, --filter      provide a string to match exercise names comma separated\n                    patterns are acceptable\n  -u, --unsolved    display only exercises not yet solved\n  -s, --solved      display only exercises that have been solved\n  --help            display usage information\n"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:80:10: 80:18>::COMMAND: &argh_shared::CommandInfo<'_> = {
    let mut _0: &argh_shared::CommandInfo<'_>;
    let _1: &argh_shared::CommandInfo<'_>;
    let _2: argh_shared::CommandInfo<'_>;
    let mut _3: &argh_shared::CommandInfo<'_>;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in <impl at src/main.rs:80:10: 80:18>::COMMAND: &argh_shared::CommandInfo<'_> = {
    let mut _0: &argh_shared::CommandInfo<'_>;
    let mut _1: argh_shared::CommandInfo<'_>;

    bb0: {
        _1 = argh_shared::CommandInfo::<'_> { name: const "list", description: const "Lists the exercises available in Rustlings" };
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:80:20: 80:29>::eq(_1: &ListArgs, _2: &ListArgs) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: &std::option::Option<std::string::String>;
    let mut _11: &std::option::Option<std::string::String>;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;

    bb0: {
        _4 = ((*_1).0: bool);
        _5 = ((*_2).0: bool);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb6, otherwise: bb1];
    }

    bb1: {
        _7 = ((*_1).1: bool);
        _8 = ((*_2).1: bool);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        _10 = &((*_1).2: std::option::Option<std::string::String>);
        _11 = &((*_2).2: std::option::Option<std::string::String>);
        _9 = <std::option::Option<std::string::String> as PartialEq>::eq(move _10, move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _9) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        _13 = ((*_1).3: bool);
        _14 = ((*_2).3: bool);
        _12 = Eq(move _13, move _14);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = ((*_1).4: bool);
        _16 = ((*_2).4: bool);
        _0 = Eq(move _15, move _16);
        goto -> bb7;
    }

    bb6: {
        _0 = const false;
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn <impl at src/main.rs:80:31: 80:36>::fmt(_1: &ListArgs, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &bool;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &bool;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &std::option::Option<std::string::String>;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &bool;
    let _16: &str;
    let mut _17: &dyn std::fmt::Debug;
    let _18: &&bool;
    let _19: &bool;

    bb0: {
        _3 = const "ListArgs";
        _4 = const "paths";
        _6 = &((*_1).0: bool);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "names";
        _9 = &((*_1).1: bool);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "filter";
        _12 = &((*_1).2: std::option::Option<std::string::String>);
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = const "unsolved";
        _15 = &((*_1).3: bool);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _16 = const "solved";
        _19 = &((*_1).4: bool);
        _18 = &_19;
        _17 = _18 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field5_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14, _16, move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Args;
    let mut _2: bool;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: !;
    let mut _11: bool;
    let mut _12: &std::option::Option<Subcommands>;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let _22: ();
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let _25: ();
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let _28: ();
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let _31: ();
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let _34: ();
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let _37: ();
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: bool;
    let _41: &std::path::Path;
    let _42: &str;
    let _43: ();
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: [core::fmt::rt::Argument<'_>; 1];
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &&str;
    let _51: &str;
    let mut _52: std::option::Option<&str>;
    let _53: &std::path::Path;
    let mut _54: &std::path::PathBuf;
    let _55: std::path::PathBuf;
    let mut _56: std::result::Result<std::path::PathBuf, std::io::Error>;
    let _57: ();
    let mut _58: std::fmt::Arguments<'_>;
    let mut _59: &[&str];
    let _60: !;
    let mut _61: bool;
    let _62: ();
    let mut _63: std::fmt::Arguments<'_>;
    let mut _64: &[&str];
    let _65: ();
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let _68: ();
    let mut _69: std::fmt::Arguments<'_>;
    let mut _70: &[&str];
    let _71: !;
    let _73: std::string::String;
    let mut _74: std::result::Result<std::string::String, std::io::Error>;
    let mut _76: exercise::ExerciseList;
    let mut _77: std::result::Result<exercise::ExerciseList, toml::de::Error>;
    let _78: &str;
    let mut _81: std::option::Option<Subcommands>;
    let mut _82: isize;
    let mut _84: bool;
    let mut _85: bool;
    let _86: ();
    let mut _87: std::fmt::Arguments<'_>;
    let mut _88: &[&str];
    let mut _89: &[core::fmt::rt::Argument<'_>];
    let _90: &[core::fmt::rt::Argument<'_>; 3];
    let _91: [core::fmt::rt::Argument<'_>; 3];
    let mut _92: core::fmt::rt::Argument<'_>;
    let mut _93: core::fmt::rt::Argument<'_>;
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &[core::fmt::rt::Placeholder];
    let _96: &[core::fmt::rt::Placeholder; 3];
    let _97: [core::fmt::rt::Placeholder; 3];
    let mut _98: core::fmt::rt::Placeholder;
    let mut _99: core::fmt::rt::Alignment;
    let mut _100: core::fmt::rt::Count;
    let mut _101: core::fmt::rt::Count;
    let mut _102: core::fmt::rt::Placeholder;
    let mut _103: core::fmt::rt::Alignment;
    let mut _104: core::fmt::rt::Count;
    let mut _105: core::fmt::rt::Count;
    let mut _106: core::fmt::rt::Placeholder;
    let mut _107: core::fmt::rt::Alignment;
    let mut _108: core::fmt::rt::Count;
    let mut _109: core::fmt::rt::Count;
    let mut _110: core::fmt::rt::UnsafeArg;
    let _113: &str;
    let mut _114: &std::string::String;
    let _115: std::string::String;
    let mut _116: std::option::Option<std::string::String>;
    let mut _117: &std::option::Option<std::string::String>;
    let _118: ();
    let mut _119: std::slice::Iter<'_, exercise::Exercise>;
    let _120: &[exercise::Exercise];
    let mut _121: &std::vec::Vec<exercise::Exercise>;
    let mut _122: {closure@src/main.rs:154:39: 154:42};
    let mut _123: &std::string::String;
    let mut _124: &mut u16;
    let mut _125: &ListArgs;
    let mut _127: f32;
    let mut _128: f32;
    let mut _129: u16;
    let mut _130: f32;
    let mut _131: usize;
    let mut _132: &std::vec::Vec<exercise::Exercise>;
    let _133: ();
    let mut _134: std::fmt::Arguments<'_>;
    let mut _135: &[&str];
    let mut _136: &[core::fmt::rt::Argument<'_>];
    let _137: &[core::fmt::rt::Argument<'_>; 3];
    let _138: [core::fmt::rt::Argument<'_>; 3];
    let mut _139: core::fmt::rt::Argument<'_>;
    let _140: &u16;
    let mut _141: core::fmt::rt::Argument<'_>;
    let _142: &usize;
    let _143: usize;
    let mut _144: &std::vec::Vec<exercise::Exercise>;
    let mut _145: core::fmt::rt::Argument<'_>;
    let _146: &f32;
    let mut _147: &[core::fmt::rt::Placeholder];
    let _148: &[core::fmt::rt::Placeholder; 3];
    let _149: [core::fmt::rt::Placeholder; 3];
    let mut _150: core::fmt::rt::Placeholder;
    let mut _151: core::fmt::rt::Alignment;
    let mut _152: core::fmt::rt::Count;
    let mut _153: core::fmt::rt::Count;
    let mut _154: core::fmt::rt::Placeholder;
    let mut _155: core::fmt::rt::Alignment;
    let mut _156: core::fmt::rt::Count;
    let mut _157: core::fmt::rt::Count;
    let mut _158: core::fmt::rt::Placeholder;
    let mut _159: core::fmt::rt::Alignment;
    let mut _160: core::fmt::rt::Count;
    let mut _161: core::fmt::rt::Count;
    let mut _162: core::fmt::rt::UnsafeArg;
    let _163: !;
    let _166: &str;
    let _167: &std::string::String;
    let _168: &[exercise::Exercise];
    let _169: &std::vec::Vec<exercise::Exercise>;
    let _170: ();
    let mut _171: std::result::Result<(), ()>;
    let _174: &str;
    let _175: &std::string::String;
    let _176: &[exercise::Exercise];
    let _177: &std::vec::Vec<exercise::Exercise>;
    let _178: ();
    let mut _179: std::fmt::Arguments<'_>;
    let mut _180: &[&str];
    let mut _181: &[core::fmt::rt::Argument<'_>];
    let _182: &[core::fmt::rt::Argument<'_>; 1];
    let _183: [core::fmt::rt::Argument<'_>; 1];
    let mut _184: core::fmt::rt::Argument<'_>;
    let _185: &std::string::String;
    let _186: ();
    let mut _187: std::result::Result<(), &exercise::Exercise>;
    let mut _188: &std::vec::Vec<exercise::Exercise>;
    let mut _189: std::result::Result<WatchStatus, notify::Error>;
    let _190: &[exercise::Exercise];
    let _191: &std::vec::Vec<exercise::Exercise>;
    let mut _192: isize;
    let mut _193: isize;
    let _195: ();
    let mut _196: std::fmt::Arguments<'_>;
    let mut _197: &[&str];
    let mut _198: &[core::fmt::rt::Argument<'_>];
    let _199: &[core::fmt::rt::Argument<'_>; 1];
    let _200: [core::fmt::rt::Argument<'_>; 1];
    let mut _201: core::fmt::rt::Argument<'_>;
    let _202: &notify::Error;
    let _203: ();
    let mut _204: std::fmt::Arguments<'_>;
    let mut _205: &[&str];
    let _206: !;
    let _207: ();
    let mut _208: std::fmt::Arguments<'_>;
    let mut _209: &[&str];
    let mut _210: &[core::fmt::rt::Argument<'_>];
    let _211: &[core::fmt::rt::Argument<'_>; 1];
    let _212: [core::fmt::rt::Argument<'_>; 1];
    let mut _213: core::fmt::rt::Argument<'_>;
    let mut _214: &[core::fmt::rt::Placeholder];
    let _215: &[core::fmt::rt::Placeholder; 2];
    let _216: [core::fmt::rt::Placeholder; 2];
    let mut _217: core::fmt::rt::Placeholder;
    let mut _218: core::fmt::rt::Alignment;
    let mut _219: core::fmt::rt::Count;
    let mut _220: core::fmt::rt::Count;
    let mut _221: core::fmt::rt::Placeholder;
    let mut _222: core::fmt::rt::Alignment;
    let mut _223: core::fmt::rt::Count;
    let mut _224: core::fmt::rt::Count;
    let mut _225: core::fmt::rt::UnsafeArg;
    let _226: ();
    let mut _227: std::fmt::Arguments<'_>;
    let mut _228: &[&str];
    let _229: ();
    let mut _230: std::fmt::Arguments<'_>;
    let mut _231: &[&str];
    let _232: ();
    let mut _233: std::fmt::Arguments<'_>;
    let mut _234: &[&str];
    let _235: ();
    let mut _236: std::fmt::Arguments<'_>;
    let mut _237: &[&str];
    let _238: ();
    let mut _239: std::fmt::Arguments<'_>;
    let mut _240: &[&str];
    let _241: ();
    let mut _242: std::fmt::Arguments<'_>;
    let mut _243: &[&str];
    let _244: ();
    let mut _245: std::fmt::Arguments<'_>;
    let mut _246: &[&str];
    let _247: ();
    let mut _248: std::fmt::Arguments<'_>;
    let mut _249: &[&str];
    let _250: ();
    let mut _251: std::fmt::Arguments<'_>;
    let mut _252: &[&str];
    let _253: ();
    let mut _254: std::fmt::Arguments<'_>;
    let mut _255: &[&str];
    let _256: ();
    let mut _257: std::fmt::Arguments<'_>;
    let mut _258: &[&str];
    let _259: ();
    let mut _260: std::fmt::Arguments<'_>;
    let mut _261: &[&str];
    let _262: ();
    let mut _263: std::fmt::Arguments<'_>;
    let mut _264: &[&str];
    let _265: ();
    let mut _266: std::fmt::Arguments<'_>;
    let mut _267: &[&str];
    let _268: ();
    let mut _269: std::fmt::Arguments<'_>;
    let mut _270: &[&str];
    let _271: ();
    let mut _272: std::fmt::Arguments<'_>;
    let mut _273: &[&str];
    let _274: ();
    let mut _275: std::fmt::Arguments<'_>;
    let mut _276: &[&str];
    let _277: ();
    let mut _278: std::fmt::Arguments<'_>;
    let mut _279: &[&str];
    let _280: ();
    let mut _281: std::fmt::Arguments<'_>;
    let mut _282: &[&str];
    let _283: ();
    let mut _284: std::fmt::Arguments<'_>;
    let mut _285: &[&str];
    let _286: ();
    let mut _287: std::fmt::Arguments<'_>;
    let mut _288: &[&str];
    let _289: ();
    let mut _290: std::fmt::Arguments<'_>;
    let mut _291: &[&str];
    let _292: ();
    let mut _293: std::fmt::Arguments<'_>;
    let mut _294: &[&str];
    let _295: ();
    let mut _296: std::fmt::Arguments<'_>;
    let mut _297: &[&str];
    let _298: ();
    let mut _299: std::fmt::Arguments<'_>;
    let mut _300: &[&str];
    let _301: ();
    let mut _302: std::fmt::Arguments<'_>;
    let mut _303: &[&str];
    let _304: ();
    let mut _305: std::fmt::Arguments<'_>;
    let mut _306: &[&str];
    let _307: ();
    let mut _308: std::fmt::Arguments<'_>;
    let mut _309: &[&str];
    let _310: ();
    let mut _311: std::fmt::Arguments<'_>;
    let mut _312: &[&str];
    let mut _368: bool;
    scope 1 {
        debug args => _1;
        let _72: &std::string::String;
        let mut _313: &&str;
        let mut _314: &[&str; 2];
        let mut _354: &[&str; 1];
        let mut _355: &[&str; 1];
        let mut _356: &[&str; 1];
        let mut _357: &[&str; 1];
        let mut _358: &[&str; 2];
        let mut _359: &[&str; 1];
        let mut _360: &[&str; 1];
        let mut _361: &[&str; 1];
        let mut _362: &[&str; 1];
        let mut _363: &[&str; 1];
        let mut _364: &[&str; 1];
        let mut _365: &[&str; 1];
        let mut _366: &[&str; 1];
        let mut _367: &[&str; 1];
        scope 2 {
            debug toml_str => _72;
            let _75: std::vec::Vec<exercise::Exercise>;
            scope 3 {
                debug exercises => _75;
                let _79: bool;
                scope 4 {
                    debug verbose => _79;
                    let _80: Subcommands;
                    scope 5 {
                        debug command => _80;
                        let _83: ListArgs;
                        let _164: RunArgs;
                        let _172: HintArgs;
                        scope 6 {
                            debug subargs => _83;
                            let mut _111: u16;
                            let mut _350: &&str;
                            let mut _351: &&str;
                            let mut _352: &&str;
                            let mut _353: &[&str; 4];
                            scope 7 {
                            }
                            scope 8 {
                                debug exercises_done => _111;
                                let _112: std::string::String;
                                scope 9 {
                                    debug filters => _112;
                                    let _126: f32;
                                    scope 10 {
                                        debug percentage_progress => _126;
                                        let mut _349: &[&str; 4];
                                        scope 11 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 12 {
                            debug subargs => _164;
                            let _165: &exercise::Exercise;
                            scope 13 {
                                debug exercise => _165;
                            }
                        }
                        scope 14 {
                            debug subargs => _172;
                            let _173: &exercise::Exercise;
                            scope 15 {
                                debug exercise => _173;
                                let mut _348: &[&str; 2];
                            }
                        }
                        scope 16 {
                            debug _subargs => const VerifyArgs {{  }};
                        }
                        scope 17 {
                            debug _subargs => const WatchArgs {{  }};
                            let _194: notify::Error;
                            let mut _315: &[&str; 1];
                            let mut _316: &[&str; 1];
                            let mut _317: &[&str; 1];
                            let mut _318: &[&str; 1];
                            let mut _319: &[&str; 1];
                            let mut _320: &[&str; 1];
                            let mut _321: &[&str; 1];
                            let mut _322: &[&str; 1];
                            let mut _323: &[&str; 1];
                            let mut _324: &[&str; 1];
                            let mut _325: &[&str; 1];
                            let mut _326: &[&str; 1];
                            let mut _327: &[&str; 1];
                            let mut _328: &[&str; 1];
                            let mut _329: &[&str; 1];
                            let mut _330: &[&str; 1];
                            let mut _331: &[&str; 1];
                            let mut _332: &[&str; 1];
                            let mut _333: &[&str; 1];
                            let mut _334: &[&str; 1];
                            let mut _335: &[&str; 1];
                            let mut _336: &[&str; 1];
                            let mut _337: &[&str; 1];
                            let mut _338: &[&str; 1];
                            let mut _339: &[&str; 1];
                            let mut _340: &[&str; 1];
                            let mut _341: &[&str; 1];
                            let mut _342: &[&str; 1];
                            let mut _343: &[&str; 1];
                            let mut _344: &console::Emoji<'_, '_>;
                            let mut _345: &[&str; 3];
                            scope 18 {
                                debug e => _194;
                                let mut _346: &[&str; 1];
                                let mut _347: &[&str; 2];
                            }
                            scope 19 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _368 = const false;
        _368 = const true;
        _1 = from_env::<Args>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_1.1: bool);
        switchInt(move _2) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        _314 = const _;
        _5 = _314 as &[&str] (PointerCoercion(Unsize));
        _313 = const _;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_313) -> [return: bb3, unwind: bb192];
    }

    bb3: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb4, unwind: bb192];
    }

    bb4: {
        _3 = _print(move _4) -> [return: bb5, unwind: bb192];
    }

    bb5: {
        _10 = exit(const 0_i32) -> bb192;
    }

    bb6: {
        _12 = &(_1.2: std::option::Option<Subcommands>);
        _11 = std::option::Option::<Subcommands>::is_none(move _12) -> [return: bb7, unwind: bb192];
    }

    bb7: {
        switchInt(move _11) -> [0: bb26, otherwise: bb8];
    }

    bb8: {
        _367 = const _;
        _15 = _367 as &[&str] (PointerCoercion(Unsize));
        _14 = Arguments::<'_>::new_const(move _15) -> [return: bb9, unwind: bb192];
    }

    bb9: {
        _13 = _print(move _14) -> [return: bb10, unwind: bb192];
    }

    bb10: {
        _366 = const _;
        _18 = _366 as &[&str] (PointerCoercion(Unsize));
        _17 = Arguments::<'_>::new_const(move _18) -> [return: bb11, unwind: bb192];
    }

    bb11: {
        _16 = _print(move _17) -> [return: bb12, unwind: bb192];
    }

    bb12: {
        _365 = const _;
        _21 = _365 as &[&str] (PointerCoercion(Unsize));
        _20 = Arguments::<'_>::new_const(move _21) -> [return: bb13, unwind: bb192];
    }

    bb13: {
        _19 = _print(move _20) -> [return: bb14, unwind: bb192];
    }

    bb14: {
        _364 = const _;
        _24 = _364 as &[&str] (PointerCoercion(Unsize));
        _23 = Arguments::<'_>::new_const(move _24) -> [return: bb15, unwind: bb192];
    }

    bb15: {
        _22 = _print(move _23) -> [return: bb16, unwind: bb192];
    }

    bb16: {
        _363 = const _;
        _27 = _363 as &[&str] (PointerCoercion(Unsize));
        _26 = Arguments::<'_>::new_const(move _27) -> [return: bb17, unwind: bb192];
    }

    bb17: {
        _25 = _print(move _26) -> [return: bb18, unwind: bb192];
    }

    bb18: {
        _362 = const _;
        _30 = _362 as &[&str] (PointerCoercion(Unsize));
        _29 = Arguments::<'_>::new_const(move _30) -> [return: bb19, unwind: bb192];
    }

    bb19: {
        _28 = _print(move _29) -> [return: bb20, unwind: bb192];
    }

    bb20: {
        _361 = const _;
        _33 = _361 as &[&str] (PointerCoercion(Unsize));
        _32 = Arguments::<'_>::new_const(move _33) -> [return: bb21, unwind: bb192];
    }

    bb21: {
        _31 = _print(move _32) -> [return: bb22, unwind: bb192];
    }

    bb22: {
        _360 = const _;
        _36 = _360 as &[&str] (PointerCoercion(Unsize));
        _35 = Arguments::<'_>::new_const(move _36) -> [return: bb23, unwind: bb192];
    }

    bb23: {
        _34 = _print(move _35) -> [return: bb24, unwind: bb192];
    }

    bb24: {
        _359 = const _;
        _39 = _359 as &[&str] (PointerCoercion(Unsize));
        _38 = Arguments::<'_>::new_const(move _39) -> [return: bb25, unwind: bb192];
    }

    bb25: {
        _37 = _print(move _38) -> [return: bb193, unwind: bb192];
    }

    bb26: {
        _42 = const "info.toml";
        _41 = Path::new::<str>(_42) -> [return: bb27, unwind: bb192];
    }

    bb27: {
        _40 = Path::exists(_41) -> [return: bb28, unwind: bb192];
    }

    bb28: {
        switchInt(move _40) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _61 = rustc_exists() -> [return: bb42, unwind: bb192];
    }

    bb30: {
        _358 = const _;
        _45 = _358 as &[&str] (PointerCoercion(Unsize));
        _56 = current_exe() -> [return: bb31, unwind: bb192];
    }

    bb31: {
        _55 = Result::<PathBuf, std::io::Error>::unwrap(move _56) -> [return: bb32, unwind: bb192];
    }

    bb32: {
        _54 = &_55;
        _53 = <PathBuf as Deref>::deref(move _54) -> [return: bb33, unwind: bb188];
    }

    bb33: {
        _52 = Path::to_str(_53) -> [return: bb34, unwind: bb188];
    }

    bb34: {
        _51 = std::option::Option::<&str>::unwrap(move _52) -> [return: bb35, unwind: bb188];
    }

    bb35: {
        _50 = &_51;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_50) -> [return: bb36, unwind: bb188];
    }

    bb36: {
        _48 = [move _49];
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _44 = Arguments::<'_>::new_v1(move _45, move _46) -> [return: bb37, unwind: bb188];
    }

    bb37: {
        _43 = _print(move _44) -> [return: bb38, unwind: bb188];
    }

    bb38: {
        drop(_55) -> [return: bb39, unwind: bb192];
    }

    bb39: {
        _357 = const _;
        _59 = _357 as &[&str] (PointerCoercion(Unsize));
        _58 = Arguments::<'_>::new_const(move _59) -> [return: bb40, unwind: bb192];
    }

    bb40: {
        _57 = _print(move _58) -> [return: bb41, unwind: bb192];
    }

    bb41: {
        _60 = exit(const 1_i32) -> bb192;
    }

    bb42: {
        switchInt(move _61) -> [0: bb43, otherwise: bb50];
    }

    bb43: {
        _356 = const _;
        _64 = _356 as &[&str] (PointerCoercion(Unsize));
        _63 = Arguments::<'_>::new_const(move _64) -> [return: bb44, unwind: bb192];
    }

    bb44: {
        _62 = _print(move _63) -> [return: bb45, unwind: bb192];
    }

    bb45: {
        _355 = const _;
        _67 = _355 as &[&str] (PointerCoercion(Unsize));
        _66 = Arguments::<'_>::new_const(move _67) -> [return: bb46, unwind: bb192];
    }

    bb46: {
        _65 = _print(move _66) -> [return: bb47, unwind: bb192];
    }

    bb47: {
        _354 = const _;
        _70 = _354 as &[&str] (PointerCoercion(Unsize));
        _69 = Arguments::<'_>::new_const(move _70) -> [return: bb48, unwind: bb192];
    }

    bb48: {
        _68 = _print(move _69) -> [return: bb49, unwind: bb192];
    }

    bb49: {
        _71 = exit(const 1_i32) -> bb192;
    }

    bb50: {
        _74 = std::fs::read_to_string::<&str>(const "info.toml") -> [return: bb51, unwind: bb192];
    }

    bb51: {
        _73 = Result::<std::string::String, std::io::Error>::unwrap(move _74) -> [return: bb52, unwind: bb192];
    }

    bb52: {
        _72 = &_73;
        _78 = <std::string::String as Deref>::deref(_72) -> [return: bb53, unwind: bb187];
    }

    bb53: {
        _77 = toml::from_str::<'_, ExerciseList>(_78) -> [return: bb54, unwind: bb187];
    }

    bb54: {
        _76 = Result::<ExerciseList, toml::de::Error>::unwrap(move _77) -> [return: bb55, unwind: bb187];
    }

    bb55: {
        _75 = move (_76.0: std::vec::Vec<exercise::Exercise>);
        _79 = (_1.0: bool);
        _368 = const false;
        _81 = move (_1.2: std::option::Option<Subcommands>);
        _80 = std::option::Option::<Subcommands>::unwrap_or_else::<{closure@src/main.rs:142:46: 142:48}>(move _81, const ZeroSized: {closure@src/main.rs:142:46: 142:48}) -> [return: bb56, unwind: bb186];
    }

    bb56: {
        _82 = discriminant(_80);
        switchInt(move _82) -> [0: bb103, 1: bb57, 2: bb90, 3: bb96, 4: bb59, otherwise: bb58];
    }

    bb57: {
        _191 = &_75;
        _190 = <Vec<Exercise> as Deref>::deref(_191) -> [return: bb105, unwind: bb186];
    }

    bb58: {
        unreachable;
    }

    bb59: {
        _83 = move ((_80 as List).0: ListArgs);
        _84 = (_83.0: bool);
        switchInt(move _84) -> [0: bb60, otherwise: bb70];
    }

    bb60: {
        _85 = (_83.1: bool);
        switchInt(move _85) -> [0: bb61, otherwise: bb70];
    }

    bb61: {
        _353 = const _;
        _88 = _353 as &[&str] (PointerCoercion(Unsize));
        _352 = const _;
        _92 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_352) -> [return: bb62, unwind: bb185];
    }

    bb62: {
        _351 = const _;
        _93 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_351) -> [return: bb63, unwind: bb185];
    }

    bb63: {
        _350 = const _;
        _94 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_350) -> [return: bb64, unwind: bb185];
    }

    bb64: {
        _91 = [move _92, move _93, move _94];
        _90 = &_91;
        _89 = _90 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _99 = core::fmt::rt::Alignment::Left;
        _100 = core::fmt::rt::Count::Implied;
        _101 = core::fmt::rt::Count::Is(const 17_usize);
        _98 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _99, const 0_u32, move _100, move _101) -> [return: bb65, unwind: bb185];
    }

    bb65: {
        _103 = core::fmt::rt::Alignment::Left;
        _104 = core::fmt::rt::Count::Implied;
        _105 = core::fmt::rt::Count::Is(const 46_usize);
        _102 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _103, const 0_u32, move _104, move _105) -> [return: bb66, unwind: bb185];
    }

    bb66: {
        _107 = core::fmt::rt::Alignment::Left;
        _108 = core::fmt::rt::Count::Implied;
        _109 = core::fmt::rt::Count::Is(const 7_usize);
        _106 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _107, const 0_u32, move _108, move _109) -> [return: bb67, unwind: bb185];
    }

    bb67: {
        _97 = [move _98, move _102, move _106];
        _96 = &_97;
        _95 = _96 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _110 = core::fmt::rt::UnsafeArg::new() -> [return: bb68, unwind: bb185];
    }

    bb68: {
        _87 = Arguments::<'_>::new_v1_formatted(move _88, move _89, move _95, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb69, unwind: bb185];
    }

    bb69: {
        _86 = _print(move _87) -> [return: bb194, unwind: bb185];
    }

    bb70: {
        _111 = const 0_u16;
        _117 = &(_83.2: std::option::Option<std::string::String>);
        _116 = <std::option::Option<std::string::String> as Clone>::clone(move _117) -> [return: bb71, unwind: bb185];
    }

    bb71: {
        _115 = std::option::Option::<std::string::String>::unwrap_or_default(move _116) -> [return: bb72, unwind: bb185];
    }

    bb72: {
        _114 = &_115;
        _113 = <std::string::String as Deref>::deref(move _114) -> [return: bb73, unwind: bb184];
    }

    bb73: {
        _112 = str::<impl str>::to_lowercase(_113) -> [return: bb74, unwind: bb184];
    }

    bb74: {
        drop(_115) -> [return: bb75, unwind: bb183];
    }

    bb75: {
        _121 = &_75;
        _120 = <Vec<Exercise> as Deref>::deref(move _121) -> [return: bb76, unwind: bb183];
    }

    bb76: {
        _119 = core::slice::<impl [Exercise]>::iter(_120) -> [return: bb77, unwind: bb183];
    }

    bb77: {
        _123 = &_112;
        _124 = &mut _111;
        _125 = &_83;
        _122 = {closure@src/main.rs:154:39: 154:42} { filters: move _123, exercises_done: move _124, subargs: move _125 };
        _118 = <std::slice::Iter<'_, Exercise> as Iterator>::for_each::<{closure@src/main.rs:154:39: 154:42}>(move _119, move _122) -> [return: bb78, unwind: bb183];
    }

    bb78: {
        _129 = _111;
        _128 = move _129 as f32 (IntToFloat);
        _132 = &_75;
        _131 = Vec::<Exercise>::len(move _132) -> [return: bb79, unwind: bb183];
    }

    bb79: {
        _130 = move _131 as f32 (IntToFloat);
        _127 = Div(move _128, move _130);
        _126 = Mul(move _127, const 100f32);
        _349 = const _;
        _135 = _349 as &[&str] (PointerCoercion(Unsize));
        _140 = &_111;
        _139 = core::fmt::rt::Argument::<'_>::new_display::<u16>(_140) -> [return: bb80, unwind: bb183];
    }

    bb80: {
        _144 = &_75;
        _143 = Vec::<Exercise>::len(move _144) -> [return: bb81, unwind: bb183];
    }

    bb81: {
        _142 = &_143;
        _141 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_142) -> [return: bb82, unwind: bb183];
    }

    bb82: {
        _146 = &_126;
        _145 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_146) -> [return: bb83, unwind: bb183];
    }

    bb83: {
        _138 = [move _139, move _141, move _145];
        _137 = &_138;
        _136 = _137 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _151 = core::fmt::rt::Alignment::Unknown;
        _152 = core::fmt::rt::Count::Implied;
        _153 = core::fmt::rt::Count::Implied;
        _150 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _151, const 0_u32, move _152, move _153) -> [return: bb84, unwind: bb183];
    }

    bb84: {
        _155 = core::fmt::rt::Alignment::Unknown;
        _156 = core::fmt::rt::Count::Implied;
        _157 = core::fmt::rt::Count::Implied;
        _154 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _155, const 0_u32, move _156, move _157) -> [return: bb85, unwind: bb183];
    }

    bb85: {
        _159 = core::fmt::rt::Alignment::Unknown;
        _160 = core::fmt::rt::Count::Is(const 2_usize);
        _161 = core::fmt::rt::Count::Implied;
        _158 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _159, const 0_u32, move _160, move _161) -> [return: bb86, unwind: bb183];
    }

    bb86: {
        _149 = [move _150, move _154, move _158];
        _148 = &_149;
        _147 = _148 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _162 = core::fmt::rt::UnsafeArg::new() -> [return: bb87, unwind: bb183];
    }

    bb87: {
        _134 = Arguments::<'_>::new_v1_formatted(move _135, move _136, move _147, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb88, unwind: bb183];
    }

    bb88: {
        _133 = _print(move _134) -> [return: bb89, unwind: bb183];
    }

    bb89: {
        _163 = exit(const 0_i32) -> bb183;
    }

    bb90: {
        _164 = move ((_80 as Run).0: RunArgs);
        _167 = &(_164.0: std::string::String);
        _166 = <std::string::String as Deref>::deref(_167) -> [return: bb91, unwind: bb182];
    }

    bb91: {
        _169 = &_75;
        _168 = <Vec<Exercise> as Deref>::deref(_169) -> [return: bb92, unwind: bb182];
    }

    bb92: {
        _165 = find_exercise(_166, _168) -> [return: bb93, unwind: bb182];
    }

    bb93: {
        _171 = run(_165, _79) -> [return: bb94, unwind: bb182];
    }

    bb94: {
        _170 = Result::<(), ()>::unwrap_or_else::<{closure@src/main.rs:207:51: 207:54}>(move _171, const ZeroSized: {closure@src/main.rs:207:51: 207:54}) -> [return: bb95, unwind: bb182];
    }

    bb95: {
        drop(_164) -> [return: bb190, unwind: bb186];
    }

    bb96: {
        _172 = move ((_80 as Hint).0: HintArgs);
        _175 = &(_172.0: std::string::String);
        _174 = <std::string::String as Deref>::deref(_175) -> [return: bb97, unwind: bb181];
    }

    bb97: {
        _177 = &_75;
        _176 = <Vec<Exercise> as Deref>::deref(_177) -> [return: bb98, unwind: bb181];
    }

    bb98: {
        _173 = find_exercise(_174, _176) -> [return: bb99, unwind: bb181];
    }

    bb99: {
        _348 = const _;
        _180 = _348 as &[&str] (PointerCoercion(Unsize));
        _185 = &((*_173).3: std::string::String);
        _184 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_185) -> [return: bb100, unwind: bb181];
    }

    bb100: {
        _183 = [move _184];
        _182 = &_183;
        _181 = _182 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _179 = Arguments::<'_>::new_v1(move _180, move _181) -> [return: bb101, unwind: bb181];
    }

    bb101: {
        _178 = _print(move _179) -> [return: bb102, unwind: bb181];
    }

    bb102: {
        drop(_172) -> [return: bb190, unwind: bb186];
    }

    bb103: {
        _188 = &_75;
        _187 = verify::<'_, &Vec<Exercise>>(move _188, _79) -> [return: bb104, unwind: bb186];
    }

    bb104: {
        _186 = Result::<(), &Exercise>::unwrap_or_else::<{closure@src/main.rs:217:56: 217:59}>(move _187, const ZeroSized: {closure@src/main.rs:217:56: 217:59}) -> [return: bb195, unwind: bb186];
    }

    bb105: {
        _189 = watch(_190, _79) -> [return: bb106, unwind: bb186];
    }

    bb106: {
        _193 = discriminant(_189);
        switchInt(move _193) -> [0: bb107, 1: bb109, otherwise: bb58];
    }

    bb107: {
        _192 = discriminant(((_189 as Ok).0: WatchStatus));
        switchInt(move _192) -> [0: bb115, 1: bb108, otherwise: bb58];
    }

    bb108: {
        _316 = const _;
        _309 = _316 as &[&str] (PointerCoercion(Unsize));
        _308 = Arguments::<'_>::new_const(move _309) -> [return: bb175, unwind: bb186];
    }

    bb109: {
        _194 = move ((_189 as Err).0: notify::Error);
        _347 = const _;
        _197 = _347 as &[&str] (PointerCoercion(Unsize));
        _202 = &_194;
        _201 = core::fmt::rt::Argument::<'_>::new_debug::<notify::Error>(_202) -> [return: bb110, unwind: bb180];
    }

    bb110: {
        _200 = [move _201];
        _199 = &_200;
        _198 = _199 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _196 = Arguments::<'_>::new_v1(move _197, move _198) -> [return: bb111, unwind: bb180];
    }

    bb111: {
        _195 = _print(move _196) -> [return: bb112, unwind: bb180];
    }

    bb112: {
        _346 = const _;
        _205 = _346 as &[&str] (PointerCoercion(Unsize));
        _204 = Arguments::<'_>::new_const(move _205) -> [return: bb113, unwind: bb180];
    }

    bb113: {
        _203 = _print(move _204) -> [return: bb114, unwind: bb180];
    }

    bb114: {
        _206 = exit(const 1_i32) -> bb180;
    }

    bb115: {
        _345 = const _;
        _209 = _345 as &[&str] (PointerCoercion(Unsize));
        _344 = const _;
        _213 = core::fmt::rt::Argument::<'_>::new_display::<Emoji<'_, '_>>(_344) -> [return: bb116, unwind: bb186];
    }

    bb116: {
        _212 = [move _213];
        _211 = &_212;
        _210 = _211 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _218 = core::fmt::rt::Alignment::Unknown;
        _219 = core::fmt::rt::Count::Implied;
        _220 = core::fmt::rt::Count::Implied;
        _217 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _218, const 0_u32, move _219, move _220) -> [return: bb117, unwind: bb186];
    }

    bb117: {
        _222 = core::fmt::rt::Alignment::Unknown;
        _223 = core::fmt::rt::Count::Implied;
        _224 = core::fmt::rt::Count::Implied;
        _221 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _222, const 0_u32, move _223, move _224) -> [return: bb118, unwind: bb186];
    }

    bb118: {
        _216 = [move _217, move _221];
        _215 = &_216;
        _214 = _215 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _225 = core::fmt::rt::UnsafeArg::new() -> [return: bb119, unwind: bb186];
    }

    bb119: {
        _208 = Arguments::<'_>::new_v1_formatted(move _209, move _210, move _214, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb120, unwind: bb186];
    }

    bb120: {
        _207 = _print(move _208) -> [return: bb121, unwind: bb186];
    }

    bb121: {
        _343 = const _;
        _228 = _343 as &[&str] (PointerCoercion(Unsize));
        _227 = Arguments::<'_>::new_const(move _228) -> [return: bb122, unwind: bb186];
    }

    bb122: {
        _226 = _print(move _227) -> [return: bb123, unwind: bb186];
    }

    bb123: {
        _342 = const _;
        _231 = _342 as &[&str] (PointerCoercion(Unsize));
        _230 = Arguments::<'_>::new_const(move _231) -> [return: bb124, unwind: bb186];
    }

    bb124: {
        _229 = _print(move _230) -> [return: bb125, unwind: bb186];
    }

    bb125: {
        _341 = const _;
        _234 = _341 as &[&str] (PointerCoercion(Unsize));
        _233 = Arguments::<'_>::new_const(move _234) -> [return: bb126, unwind: bb186];
    }

    bb126: {
        _232 = _print(move _233) -> [return: bb127, unwind: bb186];
    }

    bb127: {
        _340 = const _;
        _237 = _340 as &[&str] (PointerCoercion(Unsize));
        _236 = Arguments::<'_>::new_const(move _237) -> [return: bb128, unwind: bb186];
    }

    bb128: {
        _235 = _print(move _236) -> [return: bb129, unwind: bb186];
    }

    bb129: {
        _339 = const _;
        _240 = _339 as &[&str] (PointerCoercion(Unsize));
        _239 = Arguments::<'_>::new_const(move _240) -> [return: bb130, unwind: bb186];
    }

    bb130: {
        _238 = _print(move _239) -> [return: bb131, unwind: bb186];
    }

    bb131: {
        _338 = const _;
        _243 = _338 as &[&str] (PointerCoercion(Unsize));
        _242 = Arguments::<'_>::new_const(move _243) -> [return: bb132, unwind: bb186];
    }

    bb132: {
        _241 = _print(move _242) -> [return: bb133, unwind: bb186];
    }

    bb133: {
        _337 = const _;
        _246 = _337 as &[&str] (PointerCoercion(Unsize));
        _245 = Arguments::<'_>::new_const(move _246) -> [return: bb134, unwind: bb186];
    }

    bb134: {
        _244 = _print(move _245) -> [return: bb135, unwind: bb186];
    }

    bb135: {
        _336 = const _;
        _249 = _336 as &[&str] (PointerCoercion(Unsize));
        _248 = Arguments::<'_>::new_const(move _249) -> [return: bb136, unwind: bb186];
    }

    bb136: {
        _247 = _print(move _248) -> [return: bb137, unwind: bb186];
    }

    bb137: {
        _335 = const _;
        _252 = _335 as &[&str] (PointerCoercion(Unsize));
        _251 = Arguments::<'_>::new_const(move _252) -> [return: bb138, unwind: bb186];
    }

    bb138: {
        _250 = _print(move _251) -> [return: bb139, unwind: bb186];
    }

    bb139: {
        _334 = const _;
        _255 = _334 as &[&str] (PointerCoercion(Unsize));
        _254 = Arguments::<'_>::new_const(move _255) -> [return: bb140, unwind: bb186];
    }

    bb140: {
        _253 = _print(move _254) -> [return: bb141, unwind: bb186];
    }

    bb141: {
        _333 = const _;
        _258 = _333 as &[&str] (PointerCoercion(Unsize));
        _257 = Arguments::<'_>::new_const(move _258) -> [return: bb142, unwind: bb186];
    }

    bb142: {
        _256 = _print(move _257) -> [return: bb143, unwind: bb186];
    }

    bb143: {
        _332 = const _;
        _261 = _332 as &[&str] (PointerCoercion(Unsize));
        _260 = Arguments::<'_>::new_const(move _261) -> [return: bb144, unwind: bb186];
    }

    bb144: {
        _259 = _print(move _260) -> [return: bb145, unwind: bb186];
    }

    bb145: {
        _331 = const _;
        _264 = _331 as &[&str] (PointerCoercion(Unsize));
        _263 = Arguments::<'_>::new_const(move _264) -> [return: bb146, unwind: bb186];
    }

    bb146: {
        _262 = _print(move _263) -> [return: bb147, unwind: bb186];
    }

    bb147: {
        _330 = const _;
        _267 = _330 as &[&str] (PointerCoercion(Unsize));
        _266 = Arguments::<'_>::new_const(move _267) -> [return: bb148, unwind: bb186];
    }

    bb148: {
        _265 = _print(move _266) -> [return: bb149, unwind: bb186];
    }

    bb149: {
        _329 = const _;
        _270 = _329 as &[&str] (PointerCoercion(Unsize));
        _269 = Arguments::<'_>::new_const(move _270) -> [return: bb150, unwind: bb186];
    }

    bb150: {
        _268 = _print(move _269) -> [return: bb151, unwind: bb186];
    }

    bb151: {
        _328 = const _;
        _273 = _328 as &[&str] (PointerCoercion(Unsize));
        _272 = Arguments::<'_>::new_const(move _273) -> [return: bb152, unwind: bb186];
    }

    bb152: {
        _271 = _print(move _272) -> [return: bb153, unwind: bb186];
    }

    bb153: {
        _327 = const _;
        _276 = _327 as &[&str] (PointerCoercion(Unsize));
        _275 = Arguments::<'_>::new_const(move _276) -> [return: bb154, unwind: bb186];
    }

    bb154: {
        _274 = _print(move _275) -> [return: bb155, unwind: bb186];
    }

    bb155: {
        _326 = const _;
        _279 = _326 as &[&str] (PointerCoercion(Unsize));
        _278 = Arguments::<'_>::new_const(move _279) -> [return: bb156, unwind: bb186];
    }

    bb156: {
        _277 = _print(move _278) -> [return: bb157, unwind: bb186];
    }

    bb157: {
        _325 = const _;
        _282 = _325 as &[&str] (PointerCoercion(Unsize));
        _281 = Arguments::<'_>::new_const(move _282) -> [return: bb158, unwind: bb186];
    }

    bb158: {
        _280 = _print(move _281) -> [return: bb159, unwind: bb186];
    }

    bb159: {
        _324 = const _;
        _285 = _324 as &[&str] (PointerCoercion(Unsize));
        _284 = Arguments::<'_>::new_const(move _285) -> [return: bb160, unwind: bb186];
    }

    bb160: {
        _283 = _print(move _284) -> [return: bb161, unwind: bb186];
    }

    bb161: {
        _323 = const _;
        _288 = _323 as &[&str] (PointerCoercion(Unsize));
        _287 = Arguments::<'_>::new_const(move _288) -> [return: bb162, unwind: bb186];
    }

    bb162: {
        _286 = _print(move _287) -> [return: bb163, unwind: bb186];
    }

    bb163: {
        _322 = const _;
        _291 = _322 as &[&str] (PointerCoercion(Unsize));
        _290 = Arguments::<'_>::new_const(move _291) -> [return: bb164, unwind: bb186];
    }

    bb164: {
        _289 = _print(move _290) -> [return: bb165, unwind: bb186];
    }

    bb165: {
        _321 = const _;
        _294 = _321 as &[&str] (PointerCoercion(Unsize));
        _293 = Arguments::<'_>::new_const(move _294) -> [return: bb166, unwind: bb186];
    }

    bb166: {
        _292 = _print(move _293) -> [return: bb167, unwind: bb186];
    }

    bb167: {
        _320 = const _;
        _297 = _320 as &[&str] (PointerCoercion(Unsize));
        _296 = Arguments::<'_>::new_const(move _297) -> [return: bb168, unwind: bb186];
    }

    bb168: {
        _295 = _print(move _296) -> [return: bb169, unwind: bb186];
    }

    bb169: {
        _319 = const _;
        _300 = _319 as &[&str] (PointerCoercion(Unsize));
        _299 = Arguments::<'_>::new_const(move _300) -> [return: bb170, unwind: bb186];
    }

    bb170: {
        _298 = _print(move _299) -> [return: bb171, unwind: bb186];
    }

    bb171: {
        _318 = const _;
        _303 = _318 as &[&str] (PointerCoercion(Unsize));
        _302 = Arguments::<'_>::new_const(move _303) -> [return: bb172, unwind: bb186];
    }

    bb172: {
        _301 = _print(move _302) -> [return: bb173, unwind: bb186];
    }

    bb173: {
        _317 = const _;
        _306 = _317 as &[&str] (PointerCoercion(Unsize));
        _305 = Arguments::<'_>::new_const(move _306) -> [return: bb174, unwind: bb186];
    }

    bb174: {
        _304 = _print(move _305) -> [return: bb196, unwind: bb186];
    }

    bb175: {
        _307 = _print(move _308) -> [return: bb176, unwind: bb186];
    }

    bb176: {
        _315 = const _;
        _312 = _315 as &[&str] (PointerCoercion(Unsize));
        _311 = Arguments::<'_>::new_const(move _312) -> [return: bb177, unwind: bb186];
    }

    bb177: {
        _310 = _print(move _311) -> [return: bb197, unwind: bb186];
    }

    bb178: {
        drop(_73) -> [return: bb179, unwind: bb192];
    }

    bb179: {
        _368 = const false;
        return;
    }

    bb180 (cleanup): {
        drop(_194) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        drop(_172) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        drop(_164) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        drop(_112) -> [return: bb185, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        drop(_115) -> [return: bb185, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_83) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_75) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_73) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_55) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        resume;
    }

    bb190: {
        drop(_75) -> [return: bb178, unwind: bb187];
    }

    bb191 (cleanup): {
        drop((_1.2: std::option::Option<Subcommands>)) -> [return: bb189, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        switchInt(_368) -> [0: bb189, otherwise: bb191];
    }

    bb193: {
        goto -> bb26;
    }

    bb194: {
        goto -> bb70;
    }

    bb195: {
        goto -> bb190;
    }

    bb196: {
        goto -> bb190;
    }

    bb197: {
        goto -> bb190;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "v", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "If you want to continue working on the exercises at a later point, you can simply run `rustlings watch` again\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "We hope you're enjoying learning about Rust!\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "https://github.com/rust-lang/rustlings/blob/main/CONTRIBUTING.md\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Before reporting an issue or contributing, please read our guidelines:\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "You can also contribute your own exercises to help the greater community!\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "If you noticed any issues, please don't hesitate to report them to our repo.\n"];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "We hope you enjoyed learning about the various aspects of Rust!\n"];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "           ▒▒  ▒▒                      ▒▒  ▒▒         \n"];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "       ▒▒  ▒▒    ▒▒                  ▒▒    ▒▒  ▒▒     \n"];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "       ▒▒    ▒▒    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    ▒▒    ▒▒     \n"];
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "         ▒▒    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    ▒▒       \n"];
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "           ▒▒  ▒▒▒▒▒▒▒▒▒▒██████▒▒▒▒▒▒▒▒▒▒  ▒▒         \n"];
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "             ▒▒▒▒▒▒▒▒▒▒██▒▒▒▒▒▒██▒▒▒▒▒▒▒▒▒▒           \n"];
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "           ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒         \n"];
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "         ▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒▒▒▓▓▒▒▓▓▒▒▒▒▒▒▒▒       \n"];
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "       ▒▒  ▒▒▒▒▒▒        ▒▒▒▒▒▒        ▒▒▒▒▒▒  ▒▒     \n"];
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "     ▒▒▒▒    ▒▒      ████  ▒▒  ████      ▒▒░░  ▒▒▒▒   \n"];
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "   ▓▓▓▓▓▓▓▓  ▓▓      ▓▓██  ▓▓  ▓▓██      ▓▓  ▓▓▓▓▓▓▓▓ \n"];
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const " ░░▒▒▒▒░░▒▒  ▒▒            ▒▒            ▒▒  ▒▒░░▒▒▒▒ \n"];
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "   ▒▒▒▒  ▒▒  ▒▒            ▒▒            ▒▒  ▒▒  ▒▒▒▒ \n"];
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "   ▒▒▒▒  ▒▒    ▒▒        ▒▒  ▒▒        ▒▒    ▒▒  ▒▒▒▒ \n"];
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "     ▒▒          ▒▒▒▒▒▒▒▒      ▒▒▒▒▒▒▒▒          ▒▒   \n"];
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "                          \\/                         \n"];
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "+--------------------------  ------------------------+\n"];
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "|          You made it to the Fe-nish line!          |\n"];
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "+----------------------------------------------------+\n"];
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &Emoji<'_, '_> = {
    let mut _0: &console::Emoji<'_, '_>;
    let mut _1: console::Emoji<'_, '_>;
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "🎉";
        _2 = &(*_3);
        _5 = const "★";
        _4 = &(*_5);
        _1 = Emoji::<'_, '_>(move _2, move _4);
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " All exercises completed! ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Most likely you've run out of disk space or your 'inotify limit' has been reached.\n"];
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Error: Could not watch your progress. Error message was ", const ".\n"];
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "Progress: You completed ", const " / ", const " exercises (", const " %).\n"];
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Status";
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Path";
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Name";
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const "\t", const "\t", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "For instructions on how to install Rust, check the README.\n"];
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Try running `rustc --version` to diagnose your problem.\n"];
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "We cannot find `rustc`.\n"];
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Try `cd rustlings/`!\n"];
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const " must be run from the rustlings directory\n"];
        _0 = &_1;
        return;
    }
}

promoted[46] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[47] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "                               |___/      \n"];
        _0 = &_1;
        return;
    }
}

promoted[48] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const " |_|   \\__,_|___/\\__|_|_|_| |_|\\__, |___/ \n"];
        _0 = &_1;
        return;
    }
}

promoted[49] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const " | |  | |_| \\__ \\ |_| | | | | | (_| \\__ \\ \n"];
        _0 = &_1;
        return;
    }
}

promoted[50] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const " | '__| | | / __| __| | | '_ \\ / _` / __| \n"];
        _0 = &_1;
        return;
    }
}

promoted[51] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "  _ __ _   _ ___| |_| (_)_ __   __ _ ___  \n"];
        _0 = &_1;
        return;
    }
}

promoted[52] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "                 _   _ _                  \n"];
        _0 = &_1;
        return;
    }
}

promoted[53] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "       welcome to...                      \n"];
        _0 = &_1;
        return;
    }
}

promoted[54] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: {closure@src/main.rs:142:46: 142:48}) -> Subcommands {
    let mut _0: Subcommands;
    let _2: std::string::String;
    let mut _3: std::result::Result<std::string::String, std::io::Error>;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;
    let _12: !;
    scope 1 {
        debug text => _2;
        let mut _13: &[&str; 2];
    }

    bb0: {
        _3 = std::fs::read_to_string::<&str>(const "default_out.txt") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Result::<std::string::String, std::io::Error>::unwrap(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _13 = const _;
        _6 = _13 as &[&str] (PointerCoercion(Unsize));
        _11 = &_2;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_11) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _4 = _print(move _5) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _12 = exit(const 0_i32) -> bb6;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#1}(_1: &mut {closure@src/main.rs:154:39: 154:42}, _2: &Exercise) -> () {
    debug e => _2;
    debug filters => (*((*_1).0: &std::string::String));
    debug exercises_done => (*((*_1).1: &mut u16));
    debug subargs => (*((*_1).2: &ListArgs));
    let mut _0: ();
    let _3: std::string::String;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::path::Display<'_>;
    let _12: std::path::Display<'_>;
    let _13: &std::path::Path;
    let mut _14: &std::path::PathBuf;
    let mut _16: &mut std::iter::Filter<std::str::Split<'_, char>, {closure@src/main.rs:158:29: 158:32}>;
    let mut _17: std::iter::Filter<std::str::Split<'_, char>, {closure@src/main.rs:158:29: 158:32}>;
    let mut _18: std::str::Split<'_, char>;
    let _19: &str;
    let mut _20: {closure@src/main.rs:159:26: 159:29};
    let mut _21: &&exercise::Exercise;
    let mut _22: &std::string::String;
    let mut _24: bool;
    let mut _25: &exercise::Exercise;
    let mut _26: (u16, bool);
    let _27: &str;
    let mut _29: bool;
    let mut _30: &exercise::Exercise;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: &exercise::Exercise;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: &std::option::Option<std::string::String>;
    let mut _41: bool;
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &std::string::String;
    let mut _50: bool;
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let mut _54: &[core::fmt::rt::Argument<'_>];
    let _55: &[core::fmt::rt::Argument<'_>; 1];
    let _56: [core::fmt::rt::Argument<'_>; 1];
    let mut _57: core::fmt::rt::Argument<'_>;
    let _58: &std::string::String;
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let mut _62: &[core::fmt::rt::Argument<'_>];
    let _63: &[core::fmt::rt::Argument<'_>; 3];
    let _64: [core::fmt::rt::Argument<'_>; 3];
    let mut _65: core::fmt::rt::Argument<'_>;
    let _66: &std::string::String;
    let mut _67: core::fmt::rt::Argument<'_>;
    let _68: &std::string::String;
    let mut _69: core::fmt::rt::Argument<'_>;
    let _70: &&str;
    let mut _71: &[core::fmt::rt::Placeholder];
    let _72: &[core::fmt::rt::Placeholder; 3];
    let _73: [core::fmt::rt::Placeholder; 3];
    let mut _74: core::fmt::rt::Placeholder;
    let mut _75: core::fmt::rt::Alignment;
    let mut _76: core::fmt::rt::Count;
    let mut _77: core::fmt::rt::Count;
    let mut _78: core::fmt::rt::Placeholder;
    let mut _79: core::fmt::rt::Alignment;
    let mut _80: core::fmt::rt::Count;
    let mut _81: core::fmt::rt::Count;
    let mut _82: core::fmt::rt::Placeholder;
    let mut _83: core::fmt::rt::Alignment;
    let mut _84: core::fmt::rt::Count;
    let mut _85: core::fmt::rt::Count;
    let mut _86: core::fmt::rt::UnsafeArg;
    let mut _89: &std::io::Stdout;
    let _90: ();
    let mut _91: std::result::Result<(), std::io::Error>;
    let mut _92: &mut std::io::StdoutLock<'_>;
    let _93: &[u8];
    let mut _94: &std::string::String;
    let mut _98: &[&str; 1];
    let mut _99: &std::string::String;
    let mut _100: &mut u16;
    let mut _101: &mut u16;
    let mut _102: &mut u16;
    let mut _103: &ListArgs;
    let mut _104: &ListArgs;
    let mut _105: &ListArgs;
    let mut _106: &ListArgs;
    let mut _107: &ListArgs;
    let mut _108: &ListArgs;
    let mut _109: &ListArgs;
    scope 1 {
        debug fname => _3;
        let _15: bool;
        scope 3 {
            debug filter_cond => _15;
            let _23: &str;
            scope 4 {
                debug status => _23;
                let _28: bool;
                scope 5 {
                    debug solve_cond => _28;
                    let _40: std::string::String;
                    let _42: std::string::String;
                    let _51: std::string::String;
                    let _59: std::string::String;
                    let mut _95: &[&str; 2];
                    let mut _96: &[&str; 2];
                    let mut _97: &[&str; 4];
                    scope 6 {
                        debug line => _40;
                        let _87: std::io::Stdout;
                        scope 11 {
                            debug stdout => _87;
                            let mut _88: std::io::StdoutLock<'_>;
                            scope 12 {
                                debug handle => _88;
                            }
                        }
                    }
                    scope 7 {
                        debug res => _42;
                    }
                    scope 8 {
                        debug res => _51;
                    }
                    scope 9 {
                        debug res => _59;
                    }
                    scope 10 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug res => _4;
    }

    bb0: {
        _98 = const _;
        _6 = _98 as &[&str] (PointerCoercion(Unsize));
        _14 = &((*_2).1: std::path::PathBuf);
        _13 = <PathBuf as Deref>::deref(move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = Path::display(_13) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<std::path::Display<'_>>(_11) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = format(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _3 = move _4;
        _99 = deref_copy ((*_1).0: &std::string::String);
        _19 = <std::string::String as Deref>::deref(_99) -> [return: bb6, unwind: bb59];
    }

    bb6: {
        _18 = core::str::<impl str>::split::<'_, char>(_19, const ',') -> [return: bb7, unwind: bb59];
    }

    bb7: {
        _17 = <std::str::Split<'_, char> as Iterator>::filter::<{closure@src/main.rs:158:29: 158:32}>(move _18, const ZeroSized: {closure@src/main.rs:158:29: 158:32}) -> [return: bb8, unwind: bb59];
    }

    bb8: {
        _16 = &mut _17;
        _21 = &_2;
        _22 = &_3;
        _20 = {closure@src/main.rs:159:26: 159:29} { e: move _21, fname: move _22 };
        _15 = <Filter<std::str::Split<'_, char>, {closure@src/main.rs:158:29: 158:32}> as Iterator>::any::<{closure@src/main.rs:159:26: 159:29}>(move _16, move _20) -> [return: bb9, unwind: bb59];
    }

    bb9: {
        _25 = _2;
        _24 = Exercise::looks_done(move _25) -> [return: bb10, unwind: bb59];
    }

    bb10: {
        switchInt(move _24) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _100 = deref_copy ((*_1).1: &mut u16);
        _26 = CheckedAdd((*_100), const 1_u16);
        _101 = deref_copy ((*_1).1: &mut u16);
        assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_101), const 1_u16) -> [success: bb12, unwind: bb59];
    }

    bb12: {
        _102 = deref_copy ((*_1).1: &mut u16);
        (*_102) = move (_26.0: u16);
        _23 = const "Done";
        goto -> bb14;
    }

    bb13: {
        _27 = const "Pending";
        _23 = _27;
        goto -> bb14;
    }

    bb14: {
        _30 = _2;
        _29 = Exercise::looks_done(move _30) -> [return: bb15, unwind: bb59];
    }

    bb15: {
        switchInt(move _29) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _103 = deref_copy ((*_1).2: &ListArgs);
        _31 = ((*_103).4: bool);
        switchInt(move _31) -> [0: bb17, otherwise: bb20];
    }

    bb17: {
        _33 = _2;
        _32 = Exercise::looks_done(move _33) -> [return: bb18, unwind: bb59];
    }

    bb18: {
        switchInt(move _32) -> [0: bb19, otherwise: bb21];
    }

    bb19: {
        _104 = deref_copy ((*_1).2: &ListArgs);
        _34 = ((*_104).3: bool);
        switchInt(move _34) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _28 = const true;
        goto -> bb24;
    }

    bb21: {
        _105 = deref_copy ((*_1).2: &ListArgs);
        _35 = ((*_105).4: bool);
        switchInt(move _35) -> [0: bb22, otherwise: bb23];
    }

    bb22: {
        _106 = deref_copy ((*_1).2: &ListArgs);
        _36 = ((*_106).3: bool);
        _28 = Not(move _36);
        goto -> bb24;
    }

    bb23: {
        _28 = const false;
        goto -> bb24;
    }

    bb24: {
        _37 = _28;
        switchInt(move _37) -> [0: bb55, otherwise: bb25];
    }

    bb25: {
        switchInt(_15) -> [0: bb26, otherwise: bb28];
    }

    bb26: {
        _107 = deref_copy ((*_1).2: &ListArgs);
        _39 = &((*_107).2: std::option::Option<std::string::String>);
        _38 = std::option::Option::<std::string::String>::is_none(move _39) -> [return: bb27, unwind: bb59];
    }

    bb27: {
        switchInt(move _38) -> [0: bb55, otherwise: bb28];
    }

    bb28: {
        _108 = deref_copy ((*_1).2: &ListArgs);
        _41 = ((*_108).0: bool);
        switchInt(move _41) -> [0: bb33, otherwise: bb29];
    }

    bb29: {
        _95 = const _;
        _44 = _95 as &[&str] (PointerCoercion(Unsize));
        _49 = &_3;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_49) -> [return: bb30, unwind: bb59];
    }

    bb30: {
        _47 = [move _48];
        _46 = &_47;
        _45 = _46 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> [return: bb31, unwind: bb59];
    }

    bb31: {
        _42 = format(move _43) -> [return: bb32, unwind: bb59];
    }

    bb32: {
        _40 = move _42;
        goto -> bb48;
    }

    bb33: {
        _109 = deref_copy ((*_1).2: &ListArgs);
        _50 = ((*_109).1: bool);
        switchInt(move _50) -> [0: bb38, otherwise: bb34];
    }

    bb34: {
        _96 = const _;
        _53 = _96 as &[&str] (PointerCoercion(Unsize));
        _58 = &((*_2).0: std::string::String);
        _57 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_58) -> [return: bb35, unwind: bb59];
    }

    bb35: {
        _56 = [move _57];
        _55 = &_56;
        _54 = _55 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _52 = Arguments::<'_>::new_v1(move _53, move _54) -> [return: bb36, unwind: bb59];
    }

    bb36: {
        _51 = format(move _52) -> [return: bb37, unwind: bb59];
    }

    bb37: {
        _40 = move _51;
        goto -> bb48;
    }

    bb38: {
        _97 = const _;
        _61 = _97 as &[&str] (PointerCoercion(Unsize));
        _66 = &((*_2).0: std::string::String);
        _65 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_66) -> [return: bb39, unwind: bb59];
    }

    bb39: {
        _68 = &_3;
        _67 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_68) -> [return: bb40, unwind: bb59];
    }

    bb40: {
        _70 = &_23;
        _69 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_70) -> [return: bb41, unwind: bb59];
    }

    bb41: {
        _64 = [move _65, move _67, move _69];
        _63 = &_64;
        _62 = _63 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _75 = core::fmt::rt::Alignment::Left;
        _76 = core::fmt::rt::Count::Implied;
        _77 = core::fmt::rt::Count::Is(const 17_usize);
        _74 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _75, const 0_u32, move _76, move _77) -> [return: bb42, unwind: bb59];
    }

    bb42: {
        _79 = core::fmt::rt::Alignment::Left;
        _80 = core::fmt::rt::Count::Implied;
        _81 = core::fmt::rt::Count::Is(const 46_usize);
        _78 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _79, const 0_u32, move _80, move _81) -> [return: bb43, unwind: bb59];
    }

    bb43: {
        _83 = core::fmt::rt::Alignment::Left;
        _84 = core::fmt::rt::Count::Implied;
        _85 = core::fmt::rt::Count::Is(const 7_usize);
        _82 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _83, const 0_u32, move _84, move _85) -> [return: bb44, unwind: bb59];
    }

    bb44: {
        _73 = [move _74, move _78, move _82];
        _72 = &_73;
        _71 = _72 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _86 = core::fmt::rt::UnsafeArg::new() -> [return: bb45, unwind: bb59];
    }

    bb45: {
        _60 = Arguments::<'_>::new_v1_formatted(move _61, move _62, move _71, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb46, unwind: bb59];
    }

    bb46: {
        _59 = format(move _60) -> [return: bb47, unwind: bb59];
    }

    bb47: {
        _40 = move _59;
        goto -> bb48;
    }

    bb48: {
        _87 = stdout() -> [return: bb49, unwind: bb58];
    }

    bb49: {
        _89 = &_87;
        _88 = std::io::Stdout::lock(move _89) -> [return: bb50, unwind: bb58];
    }

    bb50: {
        _92 = &mut _88;
        _94 = &_40;
        _93 = std::string::String::as_bytes(move _94) -> [return: bb51, unwind: bb57];
    }

    bb51: {
        _91 = <StdoutLock<'_> as std::io::Write>::write_all(move _92, _93) -> [return: bb52, unwind: bb57];
    }

    bb52: {
        _90 = Result::<(), std::io::Error>::unwrap_or_else::<{closure@src/main.rs:185:74: 185:77}>(move _91, const ZeroSized: {closure@src/main.rs:185:74: 185:77}) -> [return: bb53, unwind: bb57];
    }

    bb53: {
        drop(_88) -> [return: bb54, unwind: bb58];
    }

    bb54: {
        drop(_40) -> [return: bb55, unwind: bb59];
    }

    bb55: {
        drop(_3) -> [return: bb56, unwind continue];
    }

    bb56: {
        return;
    }

    bb57 (cleanup): {
        drop(_88) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_40) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_3) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        resume;
    }
}

promoted[0] in main::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main::{closure#1}: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const "\t", const "\t", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn main::{closure#1}::{closure#0}(_1: &mut {closure@src/main.rs:158:29: 158:32}, _2: &&str) -> bool {
    debug f => _2;
    let mut _0: bool;
    let mut _3: bool;
    let _4: &str;
    let mut _5: &str;

    bb0: {
        _5 = deref_copy (*_2);
        _4 = core::str::<impl str>::trim(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = core::str::<impl str>::is_empty(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Not(move _3);
        return;
    }
}

fn main::{closure#1}::{closure#1}(_1: &mut {closure@src/main.rs:159:26: 159:29}, _2: &str) -> bool {
    debug f => _2;
    debug e => (*((*_1).0: &&exercise::Exercise));
    debug fname => (*((*_1).1: &std::string::String));
    let mut _0: bool;
    let mut _3: bool;
    let _4: &str;
    let mut _5: &std::string::String;
    let mut _6: &&str;
    let _7: &str;
    let mut _8: &&str;
    let mut _9: &&exercise::Exercise;
    let mut _10: &exercise::Exercise;
    let mut _11: &std::string::String;

    bb0: {
        _9 = deref_copy ((*_1).0: &&exercise::Exercise);
        _10 = deref_copy (*_9);
        _5 = &((*_10).0: std::string::String);
        _4 = <std::string::String as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_2;
        _3 = core::str::<impl str>::contains::<'_, &&str>(_4, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = const true;
        goto -> bb6;
    }

    bb4: {
        _11 = deref_copy ((*_1).1: &std::string::String);
        _7 = <std::string::String as Deref>::deref(_11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = &_2;
        _0 = core::str::<impl str>::contains::<'_, &&str>(_7, move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn main::{closure#1}::{closure#2}(_1: {closure@src/main.rs:185:74: 185:77}, _2: std::io::Error) -> () {
    debug e => _2;
    let mut _0: ();
    let mut _3: std::io::ErrorKind;
    let mut _4: &std::io::Error;
    let mut _5: isize;
    let mut _6: !;
    let mut _7: !;

    bb0: {
        _4 = &_2;
        _3 = std::io::Error::kind(move _4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [11: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = exit(const 1_i32) -> bb4;
    }

    bb3: {
        _6 = exit(const 0_i32) -> bb4;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main::{closure#2}(_1: {closure@src/main.rs:207:51: 207:54}, _2: ()) -> () {
    let mut _0: ();
    let mut _3: !;

    bb0: {
        _3 = exit(const 1_i32) -> unwind continue;
    }
}

fn main::{closure#3}(_1: {closure@src/main.rs:217:56: 217:59}, _2: &Exercise) -> () {
    let mut _0: ();
    let mut _3: !;

    bb0: {
        _3 = exit(const 1_i32) -> unwind continue;
    }
}

fn spawn_watch_shell(_1: &Arc<Mutex<std::option::Option<std::string::String>>>, _2: Arc<AtomicBool>) -> () {
    debug failed_exercise_hint => _1;
    debug should_quit => _2;
    let mut _0: ();
    let _3: std::sync::Arc<std::sync::Mutex<std::option::Option<std::string::String>>>;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: std::thread::JoinHandle<()>;
    let mut _8: {closure@src/main.rs:280:19: 280:26};
    let mut _10: bool;
    let mut _11: bool;
    scope 1 {
        debug failed_exercise_hint => _3;
        let mut _9: &[&str; 1];
    }

    bb0: {
        _11 = const false;
        _10 = const false;
        _11 = const true;
        _3 = <Arc<Mutex<std::option::Option<std::string::String>>> as Clone>::clone(_1) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _10 = const true;
        _9 = const _;
        _6 = _9 as &[&str] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_const(move _6) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _4 = _print(move _5) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _10 = const false;
        _11 = const false;
        _8 = {closure@src/main.rs:280:19: 280:26} { failed_exercise_hint: move _3, should_quit: move _2 };
        _7 = spawn::<{closure@src/main.rs:280:19: 280:26}, ()>(move _8) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        drop(_7) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _10 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_10) -> [0: bb10, otherwise: bb7];
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_11) -> [0: bb6, otherwise: bb9];
    }
}

promoted[0] in spawn_watch_shell: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Welcome to watch mode! You can type 'help' to get an overview of the commands you can use here.\n"];
        _0 = &_1;
        return;
    }
}

fn spawn_watch_shell::{closure#0}(_1: {closure@src/main.rs:280:19: 280:26}) -> () {
    debug failed_exercise_hint => (_1.0: std::sync::Arc<std::sync::Mutex<std::option::Option<std::string::String>>>);
    debug should_quit => (_1.1: std::sync::Arc<std::sync::atomic::AtomicBool>);
    let mut _0: ();
    let mut _2: std::string::String;
    let mut _3: std::result::Result<usize, std::io::Error>;
    let mut _4: &std::io::Stdin;
    let _5: std::io::Stdin;
    let mut _6: &mut std::string::String;
    let mut _7: isize;
    let _9: &str;
    let mut _10: &std::string::String;
    let mut _11: bool;
    let mut _12: &&str;
    let _13: &std::option::Option<std::string::String>;
    let mut _14: &std::sync::MutexGuard<'_, std::option::Option<std::string::String>>;
    let _15: std::sync::MutexGuard<'_, std::option::Option<std::string::String>>;
    let mut _16: std::result::Result<std::sync::MutexGuard<'_, std::option::Option<std::string::String>>, std::sync::PoisonError<std::sync::MutexGuard<'_, std::option::Option<std::string::String>>>>;
    let _17: &std::sync::Mutex<std::option::Option<std::string::String>>;
    let mut _18: &std::sync::Arc<std::sync::Mutex<std::option::Option<std::string::String>>>;
    let mut _19: isize;
    let _21: ();
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: [core::fmt::rt::Argument<'_>; 1];
    let mut _27: core::fmt::rt::Argument<'_>;
    let _28: &&std::string::String;
    let mut _29: bool;
    let mut _30: &&str;
    let _31: ();
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: bool;
    let mut _35: &str;
    let _36: &str;
    let _37: ();
    let _38: &std::sync::atomic::AtomicBool;
    let mut _39: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _40: std::sync::atomic::Ordering;
    let _41: ();
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let mut _44: bool;
    let mut _45: &str;
    let _46: &str;
    let _47: ();
    let mut _48: std::fmt::Arguments<'_>;
    let mut _49: &[&str];
    let _50: ();
    let mut _51: std::fmt::Arguments<'_>;
    let mut _52: &[&str];
    let _53: ();
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let _56: ();
    let mut _57: std::fmt::Arguments<'_>;
    let mut _58: &[&str];
    let _59: ();
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let _62: ();
    let mut _63: std::fmt::Arguments<'_>;
    let mut _64: &[&str];
    let _65: ();
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let _68: ();
    let mut _69: std::fmt::Arguments<'_>;
    let mut _70: &[&str];
    let _71: ();
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let mut _74: &[core::fmt::rt::Argument<'_>];
    let _75: &[core::fmt::rt::Argument<'_>; 1];
    let _76: [core::fmt::rt::Argument<'_>; 1];
    let mut _77: core::fmt::rt::Argument<'_>;
    let _78: &&str;
    let _80: ();
    let mut _81: std::fmt::Arguments<'_>;
    let mut _82: &[&str];
    let mut _83: &[core::fmt::rt::Argument<'_>];
    let _84: &[core::fmt::rt::Argument<'_>; 1];
    let _85: [core::fmt::rt::Argument<'_>; 1];
    let mut _86: core::fmt::rt::Argument<'_>;
    let _87: &std::io::Error;
    scope 1 {
        debug input => _2;
        let _8: &str;
        let _79: std::io::Error;
        scope 2 {
            debug input => _8;
            let mut _90: &[&str; 1];
            let mut _91: &[&str; 1];
            let mut _92: &[&str; 1];
            let mut _93: &[&str; 1];
            let mut _94: &[&str; 1];
            let mut _95: &[&str; 1];
            let mut _96: &[&str; 1];
            let mut _97: &[&str; 1];
            let mut _98: &[&str; 1];
            let mut _99: &[&str; 1];
            let mut _100: &[&str; 2];
            let mut _101: &&str;
            let mut _102: &&str;
            scope 3 {
                debug hint => _20;
                let _20: &std::string::String;
                let mut _89: &[&str; 2];
            }
        }
        scope 4 {
            debug error => _79;
            let mut _88: &[&str; 2];
        }
    }

    bb0: {
        goto -> bb1;
    }

    bb1: {
        _2 = std::string::String::new() -> [return: bb2, unwind: bb59];
    }

    bb2: {
        _5 = stdin() -> [return: bb3, unwind: bb58];
    }

    bb3: {
        _4 = &_5;
        _6 = &mut _2;
        _3 = Stdin::read_line(move _4, _6) -> [return: bb4, unwind: bb58];
    }

    bb4: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _79 = move ((_3 as Err).0: std::io::Error);
        _88 = const _;
        _82 = _88 as &[&str] (PointerCoercion(Unsize));
        _87 = &_79;
        _86 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_87) -> [return: bb51, unwind: bb55];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _10 = &_2;
        _9 = <std::string::String as Deref>::deref(move _10) -> [return: bb8, unwind: bb57];
    }

    bb8: {
        _8 = core::str::<impl str>::trim(_9) -> [return: bb9, unwind: bb57];
    }

    bb9: {
        _12 = &_8;
        _102 = const _;
        _11 = <&str as PartialEq>::eq(move _12, _102) -> [return: bb10, unwind: bb57];
    }

    bb10: {
        switchInt(move _11) -> [0: bb20, otherwise: bb11];
    }

    bb11: {
        _18 = &(_1.0: std::sync::Arc<std::sync::Mutex<std::option::Option<std::string::String>>>);
        _17 = <Arc<Mutex<std::option::Option<std::string::String>>> as Deref>::deref(move _18) -> [return: bb12, unwind: bb57];
    }

    bb12: {
        _16 = Mutex::<std::option::Option<std::string::String>>::lock(_17) -> [return: bb13, unwind: bb57];
    }

    bb13: {
        _15 = Result::<MutexGuard<'_, std::option::Option<std::string::String>>, PoisonError<MutexGuard<'_, std::option::Option<std::string::String>>>>::unwrap(move _16) -> [return: bb14, unwind: bb57];
    }

    bb14: {
        _14 = &_15;
        _13 = <MutexGuard<'_, std::option::Option<std::string::String>> as Deref>::deref(move _14) -> [return: bb15, unwind: bb56];
    }

    bb15: {
        _19 = discriminant((*_13));
        switchInt(move _19) -> [1: bb16, otherwise: bb19];
    }

    bb16: {
        _20 = &(((*_13) as Some).0: std::string::String);
        _89 = const _;
        _23 = _89 as &[&str] (PointerCoercion(Unsize));
        _28 = &_20;
        _27 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_28) -> [return: bb17, unwind: bb56];
    }

    bb17: {
        _26 = [move _27];
        _25 = &_26;
        _24 = _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _22 = Arguments::<'_>::new_v1(move _23, move _24) -> [return: bb18, unwind: bb56];
    }

    bb18: {
        _21 = _print(move _22) -> [return: bb61, unwind: bb56];
    }

    bb19: {
        drop(_15) -> [return: bb54, unwind: bb57];
    }

    bb20: {
        _30 = &_8;
        _101 = const _;
        _29 = <&str as PartialEq>::eq(move _30, _101) -> [return: bb21, unwind: bb57];
    }

    bb21: {
        switchInt(move _29) -> [0: bb24, otherwise: bb22];
    }

    bb22: {
        _90 = const _;
        _33 = _90 as &[&str] (PointerCoercion(Unsize));
        _32 = Arguments::<'_>::new_const(move _33) -> [return: bb23, unwind: bb57];
    }

    bb23: {
        _31 = _print(move _32) -> [return: bb62, unwind: bb57];
    }

    bb24: {
        _35 = _8;
        _36 = const "quit";
        _34 = <str as PartialEq>::eq(move _35, _36) -> [return: bb25, unwind: bb57];
    }

    bb25: {
        switchInt(move _34) -> [0: bb30, otherwise: bb26];
    }

    bb26: {
        _39 = &(_1.1: std::sync::Arc<std::sync::atomic::AtomicBool>);
        _38 = <Arc<AtomicBool> as Deref>::deref(move _39) -> [return: bb27, unwind: bb57];
    }

    bb27: {
        _40 = SeqCst;
        _37 = AtomicBool::store(_38, const true, move _40) -> [return: bb28, unwind: bb57];
    }

    bb28: {
        _91 = const _;
        _43 = _91 as &[&str] (PointerCoercion(Unsize));
        _42 = Arguments::<'_>::new_const(move _43) -> [return: bb29, unwind: bb57];
    }

    bb29: {
        _41 = _print(move _42) -> [return: bb63, unwind: bb57];
    }

    bb30: {
        _45 = _8;
        _46 = const "help";
        _44 = <str as PartialEq>::eq(move _45, _46) -> [return: bb31, unwind: bb57];
    }

    bb31: {
        switchInt(move _44) -> [0: bb48, otherwise: bb32];
    }

    bb32: {
        _99 = const _;
        _49 = _99 as &[&str] (PointerCoercion(Unsize));
        _48 = Arguments::<'_>::new_const(move _49) -> [return: bb33, unwind: bb57];
    }

    bb33: {
        _47 = _print(move _48) -> [return: bb34, unwind: bb57];
    }

    bb34: {
        _98 = const _;
        _52 = _98 as &[&str] (PointerCoercion(Unsize));
        _51 = Arguments::<'_>::new_const(move _52) -> [return: bb35, unwind: bb57];
    }

    bb35: {
        _50 = _print(move _51) -> [return: bb36, unwind: bb57];
    }

    bb36: {
        _97 = const _;
        _55 = _97 as &[&str] (PointerCoercion(Unsize));
        _54 = Arguments::<'_>::new_const(move _55) -> [return: bb37, unwind: bb57];
    }

    bb37: {
        _53 = _print(move _54) -> [return: bb38, unwind: bb57];
    }

    bb38: {
        _96 = const _;
        _58 = _96 as &[&str] (PointerCoercion(Unsize));
        _57 = Arguments::<'_>::new_const(move _58) -> [return: bb39, unwind: bb57];
    }

    bb39: {
        _56 = _print(move _57) -> [return: bb40, unwind: bb57];
    }

    bb40: {
        _95 = const _;
        _61 = _95 as &[&str] (PointerCoercion(Unsize));
        _60 = Arguments::<'_>::new_const(move _61) -> [return: bb41, unwind: bb57];
    }

    bb41: {
        _59 = _print(move _60) -> [return: bb42, unwind: bb57];
    }

    bb42: {
        _94 = const _;
        _64 = _94 as &[&str] (PointerCoercion(Unsize));
        _63 = Arguments::<'_>::new_const(move _64) -> [return: bb43, unwind: bb57];
    }

    bb43: {
        _62 = _print(move _63) -> [return: bb44, unwind: bb57];
    }

    bb44: {
        _93 = const _;
        _67 = _93 as &[&str] (PointerCoercion(Unsize));
        _66 = Arguments::<'_>::new_const(move _67) -> [return: bb45, unwind: bb57];
    }

    bb45: {
        _65 = _print(move _66) -> [return: bb46, unwind: bb57];
    }

    bb46: {
        _92 = const _;
        _70 = _92 as &[&str] (PointerCoercion(Unsize));
        _69 = Arguments::<'_>::new_const(move _70) -> [return: bb47, unwind: bb57];
    }

    bb47: {
        _68 = _print(move _69) -> [return: bb64, unwind: bb57];
    }

    bb48: {
        _100 = const _;
        _73 = _100 as &[&str] (PointerCoercion(Unsize));
        _78 = &_8;
        _77 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_78) -> [return: bb49, unwind: bb57];
    }

    bb49: {
        _76 = [move _77];
        _75 = &_76;
        _74 = _75 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _72 = Arguments::<'_>::new_v1(move _73, move _74) -> [return: bb50, unwind: bb57];
    }

    bb50: {
        _71 = _print(move _72) -> [return: bb65, unwind: bb57];
    }

    bb51: {
        _85 = [move _86];
        _84 = &_85;
        _83 = _84 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _81 = Arguments::<'_>::new_v1(move _82, move _83) -> [return: bb52, unwind: bb55];
    }

    bb52: {
        _80 = _print(move _81) -> [return: bb53, unwind: bb55];
    }

    bb53: {
        drop(_79) -> [return: bb54, unwind: bb57];
    }

    bb54: {
        drop(_2) -> [return: bb1, unwind: bb59];
    }

    bb55 (cleanup): {
        drop(_79) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_15) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_2) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_2) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_1) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        resume;
    }

    bb61: {
        goto -> bb19;
    }

    bb62: {
        goto -> bb54;
    }

    bb63: {
        goto -> bb54;
    }

    bb64: {
        goto -> bb54;
    }

    bb65: {
        goto -> bb54;
    }
}

promoted[0] in spawn_watch_shell::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "error reading command: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in spawn_watch_shell::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in spawn_watch_shell::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\u{1b}[2J\u{1b}[1;1H\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in spawn_watch_shell::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Bye!\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in spawn_watch_shell::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "when you edit a file's contents.\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in spawn_watch_shell::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Watch mode automatically re-evaluates the current exercise\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in spawn_watch_shell::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in spawn_watch_shell::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "  help  - displays this help message\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in spawn_watch_shell::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "  quit  - quits watch mode\n"];
        _0 = &_1;
        return;
    }
}

promoted[9] in spawn_watch_shell::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "  clear - clears the screen\n"];
        _0 = &_1;
        return;
    }
}

promoted[10] in spawn_watch_shell::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "  hint  - prints the current exercise's hint\n"];
        _0 = &_1;
        return;
    }
}

promoted[11] in spawn_watch_shell::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Commands available to you in watch mode:\n"];
        _0 = &_1;
        return;
    }
}

promoted[12] in spawn_watch_shell::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "unknown command: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[13] in spawn_watch_shell::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "clear";
        _0 = &_1;
        return;
    }
}

promoted[14] in spawn_watch_shell::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "hint";
        _0 = &_1;
        return;
    }
}

fn find_exercise(_1: &str, _2: &[Exercise]) -> &Exercise {
    debug name => _1;
    debug exercises => _2;
    let mut _0: &exercise::Exercise;
    let mut _3: bool;
    let mut _4: &str;
    let _5: &str;
    let _6: &exercise::Exercise;
    let mut _7: std::option::Option<&exercise::Exercise>;
    let mut _8: &mut std::slice::Iter<'_, exercise::Exercise>;
    let mut _9: std::slice::Iter<'_, exercise::Exercise>;
    let _10: &exercise::Exercise;
    let mut _11: std::option::Option<&exercise::Exercise>;
    let mut _12: &mut std::slice::Iter<'_, exercise::Exercise>;
    let mut _13: std::slice::Iter<'_, exercise::Exercise>;
    let mut _14: {closure@src/main.rs:325:19: 325:22};
    let mut _15: &&str;
    let mut _16: {closure@src/main.rs:326:29: 326:31};
    let mut _17: &&str;

    bb0: {
        _4 = _1;
        _5 = const "next";
        _3 = <str as PartialEq>::eq(move _4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        _9 = core::slice::<impl [Exercise]>::iter(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = &mut _9;
        _7 = <std::slice::Iter<'_, Exercise> as Iterator>::find::<{closure@src/main.rs:316:19: 316:22}>(move _8, const ZeroSized: {closure@src/main.rs:316:19: 316:22}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = std::option::Option::<&Exercise>::unwrap_or_else::<{closure@src/main.rs:317:29: 317:31}>(move _7, const ZeroSized: {closure@src/main.rs:317:29: 317:31}) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = _6;
        goto -> bb10;
    }

    bb6: {
        _13 = core::slice::<impl [Exercise]>::iter(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        _12 = &mut _13;
        _15 = &_1;
        _14 = {closure@src/main.rs:325:19: 325:22} { name: move _15 };
        _11 = <std::slice::Iter<'_, Exercise> as Iterator>::find::<{closure@src/main.rs:325:19: 325:22}>(move _12, move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = &_1;
        _16 = {closure@src/main.rs:326:29: 326:31} { name: move _17 };
        _10 = std::option::Option::<&Exercise>::unwrap_or_else::<{closure@src/main.rs:326:29: 326:31}>(move _11, move _16) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = _10;
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn find_exercise::{closure#0}(_1: &mut {closure@src/main.rs:316:19: 316:22}, _2: &&Exercise) -> bool {
    debug e => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &exercise::Exercise;

    bb0: {
        _4 = deref_copy (*_2);
        _3 = Exercise::looks_done(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

fn find_exercise::{closure#1}(_1: {closure@src/main.rs:317:29: 317:31}) -> &Exercise {
    let mut _0: &exercise::Exercise;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: !;
    let mut _9: &[&str; 1];
    let mut _10: &[&str; 1];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = const _;
        _7 = _9 as &[&str] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_const(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = _print(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = exit(const 1_i32) -> unwind continue;
    }
}

promoted[0] in find_exercise::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "🔚 There are no more exercises to do next!\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in find_exercise::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "🎉 Congratulations! You have done all the exercises!\n"];
        _0 = &_1;
        return;
    }
}

fn find_exercise::{closure#2}(_1: &mut {closure@src/main.rs:325:19: 325:22}, _2: &&Exercise) -> bool {
    debug e => _2;
    debug name => (*((*_1).0: &&str));
    let mut _0: bool;
    let mut _3: &std::string::String;
    let mut _4: &exercise::Exercise;
    let mut _5: &&str;

    bb0: {
        _4 = deref_copy (*_2);
        _3 = &((*_4).0: std::string::String);
        _5 = deref_copy ((*_1).0: &&str);
        _0 = <std::string::String as PartialEq<&str>>::eq(move _3, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn find_exercise::{closure#3}(_1: {closure@src/main.rs:326:29: 326:31}) -> &Exercise {
    debug name => (*(_1.0: &&str));
    let mut _0: &exercise::Exercise;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: !;
    let mut _10: &[&str; 2];
    let mut _11: &&str;

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (PointerCoercion(Unsize));
        _11 = deref_copy (_1.0: &&str);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = exit(const 1_i32) -> unwind continue;
    }
}

promoted[0] in find_exercise::{closure#3}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "No exercise found for '", const "'!\n"];
        _0 = &_1;
        return;
    }
}

fn watch(_1: &[Exercise], _2: bool) -> Result<WatchStatus, notify::Error> {
    debug exercises => _1;
    debug verbose => _2;
    let mut _0: std::result::Result<WatchStatus, notify::Error>;
    let _3: std::sync::mpsc::Sender<notify::DebouncedEvent>;
    let _4: std::sync::mpsc::Receiver<notify::DebouncedEvent>;
    let mut _5: (std::sync::mpsc::Sender<notify::DebouncedEvent>, std::sync::mpsc::Receiver<notify::DebouncedEvent>);
    let mut _7: std::sync::atomic::AtomicBool;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, notify::Error>, notify::INotifyWatcher>;
    let mut _10: std::result::Result<notify::INotifyWatcher, notify::Error>;
    let mut _11: std::sync::mpsc::Sender<notify::DebouncedEvent>;
    let mut _12: std::time::Duration;
    let mut _13: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, notify::Error>>;
    let mut _17: std::result::Result<(), notify::Error>;
    let mut _18: &mut notify::INotifyWatcher;
    let mut _19: &std::path::Path;
    let _20: &str;
    let mut _21: notify::RecursiveMode;
    let mut _22: isize;
    let _24: ();
    let mut _27: std::result::Result<(), &exercise::Exercise>;
    let mut _28: std::slice::Iter<'_, exercise::Exercise>;
    let mut _29: isize;
    let mut _30: WatchStatus;
    let mut _32: std::sync::Mutex<std::option::Option<std::string::String>>;
    let mut _33: std::option::Option<std::string::String>;
    let mut _34: std::string::String;
    let mut _35: &{closure@src/main.rs:353:25: 353:39};
    let mut _36: (&exercise::Exercise,);
    let _37: ();
    let _38: &std::sync::Arc<std::sync::Mutex<std::option::Option<std::string::String>>>;
    let mut _39: std::sync::Arc<std::sync::atomic::AtomicBool>;
    let _40: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _41: std::result::Result<notify::DebouncedEvent, std::sync::mpsc::RecvTimeoutError>;
    let mut _42: &std::sync::mpsc::Receiver<notify::DebouncedEvent>;
    let mut _43: std::time::Duration;
    let mut _44: isize;
    let mut _45: isize;
    let mut _47: isize;
    let mut _49: bool;
    let mut _50: &std::option::Option<&std::ffi::OsStr>;
    let _51: std::option::Option<&std::ffi::OsStr>;
    let _52: &std::path::Path;
    let mut _53: &std::path::PathBuf;
    let mut _54: &std::option::Option<&std::ffi::OsStr>;
    let _55: std::option::Option<&std::ffi::OsStr>;
    let _56: &std::ffi::OsStr;
    let _57: &str;
    let mut _58: bool;
    let _59: &std::path::Path;
    let mut _60: &std::path::PathBuf;
    let mut _62: std::result::Result<std::path::PathBuf, std::io::Error>;
    let _63: &std::path::Path;
    let mut _64: &std::path::PathBuf;
    let mut _66: std::iter::SkipWhile<std::slice::Iter<'_, exercise::Exercise>, {closure@src/main.rs:367:41: 367:44}>;
    let mut _67: std::slice::Iter<'_, exercise::Exercise>;
    let mut _68: {closure@src/main.rs:367:41: 367:44};
    let mut _69: &std::path::PathBuf;
    let mut _70: std::iter::Filter<std::slice::Iter<'_, exercise::Exercise>, {closure@src/main.rs:372:45: 372:48}>;
    let mut _71: std::slice::Iter<'_, exercise::Exercise>;
    let mut _72: {closure@src/main.rs:372:45: 372:48};
    let mut _73: &std::path::PathBuf;
    let _74: ();
    let mut _75: std::result::Result<(), &exercise::Exercise>;
    let mut _76: isize;
    let mut _77: WatchStatus;
    let mut _80: std::result::Result<std::sync::MutexGuard<'_, std::option::Option<std::string::String>>, std::sync::PoisonError<std::sync::MutexGuard<'_, std::option::Option<std::string::String>>>>;
    let _81: &std::sync::Mutex<std::option::Option<std::string::String>>;
    let mut _82: &std::sync::Arc<std::sync::Mutex<std::option::Option<std::string::String>>>;
    let mut _83: std::option::Option<std::string::String>;
    let mut _84: std::string::String;
    let mut _85: &{closure@src/main.rs:353:25: 353:39};
    let mut _86: (&exercise::Exercise,);
    let mut _87: &mut std::option::Option<std::string::String>;
    let mut _88: &mut std::sync::MutexGuard<'_, std::option::Option<std::string::String>>;
    let _90: ();
    let mut _91: std::fmt::Arguments<'_>;
    let mut _92: &[&str];
    let mut _93: &[core::fmt::rt::Argument<'_>];
    let _94: &[core::fmt::rt::Argument<'_>; 1];
    let _95: [core::fmt::rt::Argument<'_>; 1];
    let mut _96: core::fmt::rt::Argument<'_>;
    let _97: &std::sync::mpsc::RecvTimeoutError;
    let mut _98: bool;
    let _99: &std::sync::atomic::AtomicBool;
    let mut _100: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _101: std::sync::atomic::Ordering;
    let mut _102: WatchStatus;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    scope 1 {
        debug tx => _3;
        debug rx => _4;
        let _6: std::sync::Arc<std::sync::atomic::AtomicBool>;
        scope 2 {
            debug should_quit => _6;
            let mut _8: notify::INotifyWatcher;
            let _14: std::result::Result<std::convert::Infallible, notify::Error>;
            let _15: notify::INotifyWatcher;
            scope 3 {
                debug watcher => _8;
                let _23: std::result::Result<std::convert::Infallible, notify::Error>;
                let _25: {closure@src/main.rs:353:25: 353:39};
                scope 8 {
                    debug residual => _23;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => const ();
                    scope 11 {
                    }
                }
                scope 12 {
                    debug to_owned_hint => const ZeroSized: {closure@src/main.rs:353:25: 353:39};
                    let _26: std::sync::Arc<std::sync::Mutex<std::option::Option<std::string::String>>>;
                    let _31: &exercise::Exercise;
                    scope 13 {
                        debug failed_exercise_hint => _26;
                        let _46: notify::DebouncedEvent;
                        let _89: std::sync::mpsc::RecvTimeoutError;
                        scope 15 {
                            debug event => _46;
                            let _48: std::path::PathBuf;
                            scope 16 {
                                debug b => _48;
                                let _61: std::path::PathBuf;
                                scope 17 {
                                    debug filepath => _61;
                                    let _65: std::iter::Chain<std::iter::SkipWhile<std::slice::Iter<'_, exercise::Exercise>, {closure@src/main.rs:367:41: 367:44}>, std::iter::Filter<std::slice::Iter<'_, exercise::Exercise>, {closure@src/main.rs:372:45: 372:48}>>;
                                    scope 18 {
                                        debug pending_exercises => _65;
                                        let _78: &exercise::Exercise;
                                        scope 19 {
                                            debug exercise => _78;
                                            let mut _79: std::sync::MutexGuard<'_, std::option::Option<std::string::String>>;
                                            scope 20 {
                                                debug failed_exercise_hint => _79;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 21 {
                            debug e => _89;
                            let mut _103: &[&str; 2];
                        }
                    }
                    scope 14 {
                        debug exercise => _31;
                    }
                }
            }
            scope 4 {
                debug residual => _14;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _15;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _109 = const false;
        _108 = const false;
        _107 = const false;
        _106 = const false;
        _105 = const false;
        _104 = const false;
        _5 = channel::<DebouncedEvent>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _109 = const true;
        _3 = move (_5.0: std::sync::mpsc::Sender<notify::DebouncedEvent>);
        _4 = move (_5.1: std::sync::mpsc::Receiver<notify::DebouncedEvent>);
        _7 = AtomicBool::new(const false) -> [return: bb2, unwind: bb81];
    }

    bb2: {
        _6 = Arc::<AtomicBool>::new(move _7) -> [return: bb3, unwind: bb81];
    }

    bb3: {
        _109 = const false;
        _108 = const true;
        _11 = move _3;
        _12 = Duration::from_secs(const 2_u64) -> [return: bb4, unwind: bb100];
    }

    bb4: {
        _108 = const false;
        _10 = <INotifyWatcher as Watcher>::new(move _11, move _12) -> [return: bb5, unwind: bb100];
    }

    bb5: {
        _108 = const false;
        _9 = <Result<INotifyWatcher, notify::Error> as Try>::branch(move _10) -> [return: bb6, unwind: bb80];
    }

    bb6: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        _15 = move ((_9 as Continue).0: notify::INotifyWatcher);
        _8 = move _15;
        _18 = &mut _8;
        _20 = const "./exercises";
        _19 = Path::new::<str>(_20) -> [return: bb10, unwind: bb79];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _14 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, notify::Error>);
        _0 = <Result<WatchStatus, notify::Error> as FromResidual<Result<Infallible, notify::Error>>>::from_residual(move _14) -> [return: bb103, unwind: bb80];
    }

    bb10: {
        _21 = Recursive;
        _17 = <INotifyWatcher as Watcher>::watch::<&Path>(move _18, move _19, move _21) -> [return: bb11, unwind: bb79];
    }

    bb11: {
        _16 = <Result<(), notify::Error> as Try>::branch(move _17) -> [return: bb12, unwind: bb79];
    }

    bb12: {
        _22 = discriminant(_16);
        switchInt(move _22) -> [0: bb13, 1: bb14, otherwise: bb8];
    }

    bb13: {
        _24 = clear_screen() -> [return: bb15, unwind: bb79];
    }

    bb14: {
        _23 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, notify::Error>);
        _0 = <Result<WatchStatus, notify::Error> as FromResidual<Result<Infallible, notify::Error>>>::from_residual(move _23) -> [return: bb104, unwind: bb79];
    }

    bb15: {
        _28 = core::slice::<impl [Exercise]>::iter(_1) -> [return: bb16, unwind: bb79];
    }

    bb16: {
        _27 = verify::<'_, std::slice::Iter<'_, Exercise>>(move _28, _2) -> [return: bb17, unwind: bb79];
    }

    bb17: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb19, 1: bb18, otherwise: bb8];
    }

    bb18: {
        _31 = ((_27 as Err).0: &exercise::Exercise);
        _35 = &_25;
        _36 = (_31,);
        _34 = <{closure@src/main.rs:353:25: 353:39} as Fn<(&Exercise,)>>::call(move _35, move _36) -> [return: bb20, unwind: bb79];
    }

    bb19: {
        _30 = WatchStatus::Finished;
        _0 = Result::<WatchStatus, notify::Error>::Ok(move _30);
        goto -> bb71;
    }

    bb20: {
        _33 = std::option::Option::<std::string::String>::Some(move _34);
        _32 = Mutex::<std::option::Option<std::string::String>>::new(move _33) -> [return: bb21, unwind: bb79];
    }

    bb21: {
        _26 = Arc::<Mutex<std::option::Option<std::string::String>>>::new(move _32) -> [return: bb22, unwind: bb79];
    }

    bb22: {
        _38 = &_26;
        _40 = &_6;
        _39 = <Arc<AtomicBool> as Clone>::clone(_40) -> [return: bb23, unwind: bb78];
    }

    bb23: {
        _37 = spawn_watch_shell(_38, move _39) -> [return: bb105, unwind: bb78];
    }

    bb24: {
        _42 = &_4;
        _43 = Duration::from_secs(const 1_u64) -> [return: bb25, unwind: bb78];
    }

    bb25: {
        _41 = std::sync::mpsc::Receiver::<DebouncedEvent>::recv_timeout(move _42, move _43) -> [return: bb26, unwind: bb78];
    }

    bb26: {
        _45 = discriminant(_41);
        switchInt(move _45) -> [0: bb29, 1: bb27, otherwise: bb8];
    }

    bb27: {
        _44 = discriminant(((_41 as Err).0: std::sync::mpsc::RecvTimeoutError));
        switchInt(move _44) -> [0: bb92, otherwise: bb28];
    }

    bb28: {
        _89 = ((_41 as Err).0: std::sync::mpsc::RecvTimeoutError);
        _103 = const _;
        _92 = _103 as &[&str] (PointerCoercion(Unsize));
        _97 = &_89;
        _96 = core::fmt::rt::Argument::<'_>::new_debug::<RecvTimeoutError>(_97) -> [return: bb63, unwind: bb78];
    }

    bb29: {
        _104 = const true;
        _105 = const true;
        _106 = const true;
        _46 = move ((_41 as Ok).0: notify::DebouncedEvent);
        _47 = discriminant(_46);
        switchInt(move _47) -> [2: bb31, 3: bb33, 4: bb32, otherwise: bb91];
    }

    bb30: {
        _53 = &_48;
        _52 = <PathBuf as Deref>::deref(move _53) -> [return: bb34, unwind: bb77];
    }

    bb31: {
        _106 = const false;
        _48 = move ((_46 as Create).0: std::path::PathBuf);
        goto -> bb30;
    }

    bb32: {
        _105 = const false;
        _48 = move ((_46 as Chmod).0: std::path::PathBuf);
        goto -> bb30;
    }

    bb33: {
        _104 = const false;
        _48 = move ((_46 as Write).0: std::path::PathBuf);
        goto -> bb30;
    }

    bb34: {
        _51 = Path::extension(_52) -> [return: bb35, unwind: bb77];
    }

    bb35: {
        _50 = &_51;
        _57 = const "rs";
        _56 = OsStr::new::<str>(_57) -> [return: bb36, unwind: bb77];
    }

    bb36: {
        _55 = std::option::Option::<&OsStr>::Some(_56);
        _54 = &_55;
        _49 = <std::option::Option<&OsStr> as PartialEq>::eq(move _50, move _54) -> [return: bb37, unwind: bb77];
    }

    bb37: {
        switchInt(move _49) -> [0: bb62, otherwise: bb38];
    }

    bb38: {
        _60 = &_48;
        _59 = <PathBuf as Deref>::deref(move _60) -> [return: bb39, unwind: bb77];
    }

    bb39: {
        _58 = Path::exists(_59) -> [return: bb40, unwind: bb77];
    }

    bb40: {
        switchInt(move _58) -> [0: bb62, otherwise: bb41];
    }

    bb41: {
        _64 = &_48;
        _63 = PathBuf::as_path(move _64) -> [return: bb42, unwind: bb77];
    }

    bb42: {
        _62 = Path::canonicalize(_63) -> [return: bb43, unwind: bb77];
    }

    bb43: {
        _61 = Result::<PathBuf, std::io::Error>::unwrap(move _62) -> [return: bb44, unwind: bb77];
    }

    bb44: {
        _67 = core::slice::<impl [Exercise]>::iter(_1) -> [return: bb45, unwind: bb76];
    }

    bb45: {
        _69 = &_61;
        _68 = {closure@src/main.rs:367:41: 367:44} { filepath: move _69 };
        _66 = <std::slice::Iter<'_, Exercise> as Iterator>::skip_while::<{closure@src/main.rs:367:41: 367:44}>(move _67, move _68) -> [return: bb46, unwind: bb76];
    }

    bb46: {
        _71 = core::slice::<impl [Exercise]>::iter(_1) -> [return: bb47, unwind: bb76];
    }

    bb47: {
        _73 = &_61;
        _72 = {closure@src/main.rs:372:45: 372:48} { filepath: move _73 };
        _70 = <std::slice::Iter<'_, Exercise> as Iterator>::filter::<{closure@src/main.rs:372:45: 372:48}>(move _71, move _72) -> [return: bb48, unwind: bb76];
    }

    bb48: {
        _65 = <SkipWhile<std::slice::Iter<'_, Exercise>, {closure@src/main.rs:367:41: 367:44}> as Iterator>::chain::<Filter<std::slice::Iter<'_, Exercise>, {closure@src/main.rs:372:45: 372:48}>>(move _66, move _70) -> [return: bb49, unwind: bb76];
    }

    bb49: {
        _74 = clear_screen() -> [return: bb50, unwind: bb76];
    }

    bb50: {
        _75 = verify::<'_, std::iter::Chain<SkipWhile<std::slice::Iter<'_, Exercise>, {closure@src/main.rs:367:41: 367:44}>, Filter<std::slice::Iter<'_, Exercise>, {closure@src/main.rs:372:45: 372:48}>>>(move _65, _2) -> [return: bb51, unwind: bb76];
    }

    bb51: {
        _76 = discriminant(_75);
        switchInt(move _76) -> [0: bb53, 1: bb52, otherwise: bb8];
    }

    bb52: {
        _78 = ((_75 as Err).0: &exercise::Exercise);
        _82 = &_26;
        _81 = <Arc<Mutex<std::option::Option<std::string::String>>> as Deref>::deref(move _82) -> [return: bb54, unwind: bb76];
    }

    bb53: {
        _77 = WatchStatus::Finished;
        _0 = Result::<WatchStatus, notify::Error>::Ok(move _77);
        drop(_61) -> [return: bb68, unwind: bb77];
    }

    bb54: {
        _80 = Mutex::<std::option::Option<std::string::String>>::lock(_81) -> [return: bb55, unwind: bb76];
    }

    bb55: {
        _79 = Result::<MutexGuard<'_, std::option::Option<std::string::String>>, PoisonError<MutexGuard<'_, std::option::Option<std::string::String>>>>::unwrap(move _80) -> [return: bb56, unwind: bb76];
    }

    bb56: {
        _85 = &_25;
        _86 = (_78,);
        _84 = <{closure@src/main.rs:353:25: 353:39} as Fn<(&Exercise,)>>::call(move _85, move _86) -> [return: bb57, unwind: bb75];
    }

    bb57: {
        _107 = const true;
        _83 = std::option::Option::<std::string::String>::Some(move _84);
        _88 = &mut _79;
        _87 = <MutexGuard<'_, std::option::Option<std::string::String>> as DerefMut>::deref_mut(move _88) -> [return: bb58, unwind: bb96];
    }

    bb58: {
        drop((*_87)) -> [return: bb59, unwind: bb60];
    }

    bb59: {
        _107 = const false;
        (*_87) = move _83;
        _107 = const false;
        drop(_79) -> [return: bb61, unwind: bb76];
    }

    bb60 (cleanup): {
        _107 = const false;
        (*_87) = move _83;
        goto -> bb96;
    }

    bb61: {
        drop(_61) -> [return: bb62, unwind: bb77];
    }

    bb62: {
        drop(_48) -> [return: bb91, unwind: bb98];
    }

    bb63: {
        _95 = [move _96];
        _94 = &_95;
        _93 = _94 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _91 = Arguments::<'_>::new_v1(move _92, move _93) -> [return: bb64, unwind: bb78];
    }

    bb64: {
        _90 = _print(move _91) -> [return: bb106, unwind: bb78];
    }

    bb65: {
        _101 = SeqCst;
        _98 = AtomicBool::load(_99, move _101) -> [return: bb66, unwind: bb78];
    }

    bb66: {
        switchInt(move _98) -> [0: bb24, otherwise: bb67];
    }

    bb67: {
        _102 = WatchStatus::Unfinished;
        _0 = Result::<WatchStatus, notify::Error>::Ok(move _102);
        goto -> bb70;
    }

    bb68: {
        drop(_48) -> [return: bb69, unwind: bb98];
    }

    bb69: {
        _111 = discriminant(_46);
        switchInt(move _111) -> [2: bb93, 3: bb93, 4: bb93, otherwise: bb94];
    }

    bb70: {
        drop(_26) -> [return: bb71, unwind: bb79];
    }

    bb71: {
        drop(_8) -> [return: bb72, unwind: bb80];
    }

    bb72: {
        drop(_6) -> [return: bb73, unwind: bb81];
    }

    bb73: {
        drop(_4) -> [return: bb74, unwind: bb102];
    }

    bb74: {
        _109 = const false;
        return;
    }

    bb75 (cleanup): {
        drop(_79) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_61) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_48) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_26) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_8) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_6) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_4) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        resume;
    }

    bb83: {
        _104 = const false;
        _105 = const false;
        _106 = const false;
        goto -> bb92;
    }

    bb84: {
        switchInt(_106) -> [0: bb83, otherwise: bb85];
    }

    bb85: {
        drop(((_46 as Create).0: std::path::PathBuf)) -> [return: bb83, unwind: bb78];
    }

    bb86: {
        switchInt(_104) -> [0: bb83, otherwise: bb87];
    }

    bb87: {
        drop(((_46 as Write).0: std::path::PathBuf)) -> [return: bb83, unwind: bb78];
    }

    bb88: {
        switchInt(_105) -> [0: bb83, otherwise: bb89];
    }

    bb89: {
        drop(((_46 as Chmod).0: std::path::PathBuf)) -> [return: bb83, unwind: bb78];
    }

    bb90: {
        drop(_46) -> [return: bb83, unwind: bb78];
    }

    bb91: {
        _110 = discriminant(_46);
        switchInt(move _110) -> [2: bb84, 3: bb86, 4: bb88, otherwise: bb90];
    }

    bb92: {
        _100 = &_6;
        _99 = <Arc<AtomicBool> as Deref>::deref(move _100) -> [return: bb65, unwind: bb78];
    }

    bb93: {
        _104 = const false;
        _105 = const false;
        _106 = const false;
        goto -> bb70;
    }

    bb94: {
        drop(_46) -> [return: bb93, unwind: bb78];
    }

    bb95 (cleanup): {
        drop(_83) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        switchInt(_107) -> [0: bb75, otherwise: bb95];
    }

    bb97 (cleanup): {
        drop(_46) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        _112 = discriminant(_46);
        switchInt(move _112) -> [2: bb78, 3: bb78, 4: bb78, otherwise: bb97];
    }

    bb99 (cleanup): {
        drop(_11) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        switchInt(_108) -> [0: bb80, otherwise: bb99];
    }

    bb101 (cleanup): {
        drop(_3) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_109) -> [0: bb82, otherwise: bb101];
    }

    bb103: {
        goto -> bb72;
    }

    bb104: {
        goto -> bb71;
    }

    bb105: {
        goto -> bb24;
    }

    bb106: {
        goto -> bb92;
    }
}

promoted[0] in watch: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "watch error: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn clear_screen() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[&str; 1];

    bb0: {
        _4 = const _;
        _3 = _4 as &[&str] (PointerCoercion(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in clear_screen: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\u{1b}c\n"];
        _0 = &_1;
        return;
    }
}

fn watch::{closure#0}(_1: &{closure@src/main.rs:353:25: 353:39}, _2: &Exercise) -> std::string::String {
    debug t => _2;
    let mut _0: std::string::String;
    let mut _3: &std::string::String;

    bb0: {
        _3 = &((*_2).3: std::string::String);
        _0 = <std::string::String as ToOwned>::to_owned(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn watch::{closure#1}(_1: &mut {closure@src/main.rs:367:41: 367:44}, _2: &&Exercise) -> bool {
    debug e => _2;
    debug filepath => (*((*_1).0: &std::path::PathBuf));
    let mut _0: bool;
    let mut _3: bool;
    let _4: &std::path::Path;
    let mut _5: &std::path::PathBuf;
    let mut _6: &std::path::PathBuf;
    let mut _7: &exercise::Exercise;

    bb0: {
        _6 = deref_copy ((*_1).0: &std::path::PathBuf);
        _4 = <PathBuf as Deref>::deref(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = deref_copy (*_2);
        _5 = &((*_7).1: std::path::PathBuf);
        _3 = Path::ends_with::<&PathBuf>(_4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Not(move _3);
        return;
    }
}

fn watch::{closure#2}(_1: &mut {closure@src/main.rs:372:45: 372:48}, _2: &&Exercise) -> bool {
    debug e => _2;
    debug filepath => (*((*_1).0: &std::path::PathBuf));
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let _5: &std::path::Path;
    let mut _6: &std::path::PathBuf;
    let mut _7: &exercise::Exercise;
    let mut _8: &std::path::PathBuf;
    let mut _9: &exercise::Exercise;

    bb0: {
        _7 = deref_copy (*_2);
        _3 = Exercise::looks_done(_7) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const false;
        goto -> bb6;
    }

    bb3: {
        _8 = deref_copy ((*_1).0: &std::path::PathBuf);
        _5 = <PathBuf as Deref>::deref(_8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = deref_copy (*_2);
        _6 = &((*_9).1: std::path::PathBuf);
        _4 = Path::ends_with::<&PathBuf>(_5, move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = Not(move _4);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn rustc_exists() -> bool {
    let mut _0: bool;
    let mut _1: std::result::Result<bool, std::io::Error>;
    let mut _2: std::result::Result<std::process::ExitStatus, std::io::Error>;
    let mut _3: std::result::Result<std::process::Child, std::io::Error>;
    let mut _4: &mut std::process::Command;
    let mut _5: &mut std::process::Command;
    let mut _6: &mut std::process::Command;
    let mut _7: std::process::Command;
    let mut _8: std::process::Stdio;
    let mut _9: &[&str; 1];

    bb0: {
        _7 = Command::new::<&str>(const "rustc") -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut _7;
        _9 = const _;
        _5 = Command::args::<&[&str; 1], &&str>(move _6, _9) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _8 = Stdio::null() -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _4 = Command::stdout::<Stdio>(_5, move _8) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _3 = Command::spawn(_4) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _2 = Result::<Child, std::io::Error>::and_then::<ExitStatus, {closure@src/main.rs:403:19: 403:30}>(move _3, const ZeroSized: {closure@src/main.rs:403:19: 403:30}) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _1 = Result::<ExitStatus, std::io::Error>::map::<bool, {closure@src/main.rs:404:14: 404:22}>(move _2, const ZeroSized: {closure@src/main.rs:404:14: 404:22}) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _0 = Result::<bool, std::io::Error>::unwrap_or(move _1, const false) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_7) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_7) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in rustc_exists: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "--version"];
        _0 = &_1;
        return;
    }
}

fn rustc_exists::{closure#0}(_1: {closure@src/main.rs:403:19: 403:30}, _2: Child) -> Result<ExitStatus, std::io::Error> {
    debug child => _2;
    let mut _0: std::result::Result<std::process::ExitStatus, std::io::Error>;
    let mut _3: &mut std::process::Child;

    bb0: {
        _3 = &mut _2;
        _0 = Child::wait(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn rustc_exists::{closure#1}(_1: {closure@src/main.rs:404:14: 404:22}, _2: ExitStatus) -> bool {
    debug status => _2;
    let mut _0: bool;
    let mut _3: &std::process::ExitStatus;

    bb0: {
        _3 = &_2;
        _0 = ExitStatus::success(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn State::Pending(_1: Vec<ContextLine>) -> State {
    let mut _0: exercise::State;

    bb0: {
        _0 = State::Pending(move _1);
        return;
    }
}

// MIR FOR CTFE
fn State::Pending(_1: Vec<ContextLine>) -> State {
    let mut _0: exercise::State;

    bb0: {
        _0 = State::Pending(move _1);
        return;
    }
}

fn Subcommands::Verify(_1: VerifyArgs) -> Subcommands {
    let mut _0: Subcommands;

    bb0: {
        _0 = Subcommands::Verify(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Subcommands::Verify(_1: VerifyArgs) -> Subcommands {
    let mut _0: Subcommands;

    bb0: {
        _0 = Subcommands::Verify(move _1);
        return;
    }
}

fn Subcommands::Watch(_1: WatchArgs) -> Subcommands {
    let mut _0: Subcommands;

    bb0: {
        _0 = Subcommands::Watch(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Subcommands::Watch(_1: WatchArgs) -> Subcommands {
    let mut _0: Subcommands;

    bb0: {
        _0 = Subcommands::Watch(move _1);
        return;
    }
}

fn Subcommands::Run(_1: RunArgs) -> Subcommands {
    let mut _0: Subcommands;

    bb0: {
        _0 = Subcommands::Run(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Subcommands::Run(_1: RunArgs) -> Subcommands {
    let mut _0: Subcommands;

    bb0: {
        _0 = Subcommands::Run(move _1);
        return;
    }
}

fn Subcommands::Hint(_1: HintArgs) -> Subcommands {
    let mut _0: Subcommands;

    bb0: {
        _0 = Subcommands::Hint(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Subcommands::Hint(_1: HintArgs) -> Subcommands {
    let mut _0: Subcommands;

    bb0: {
        _0 = Subcommands::Hint(move _1);
        return;
    }
}

fn Subcommands::List(_1: ListArgs) -> Subcommands {
    let mut _0: Subcommands;

    bb0: {
        _0 = Subcommands::List(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Subcommands::List(_1: ListArgs) -> Subcommands {
    let mut _0: Subcommands;

    bb0: {
        _0 = Subcommands::List(move _1);
        return;
    }
}
