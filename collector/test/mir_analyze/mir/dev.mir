// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn _1() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at src\main.rs:10:1: 10:7>::add(_1: i32, _2: i32) -> i32 {
    debug x => _1;
    debug y => _2;
    let mut _0: i32;
    let mut _3: (i32, bool);

    bb0: {
        _3 = CheckedAdd(_1, _2);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_3.0: i32);
        return;
    }
}

static cmd::fmt::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nFormats CSV data with a custom delimiter or CRLF line endings.\n\nGenerally, all commands in xsv output CSV data in a default format, which is\nthe same as the default format for reading CSV data. This makes it easy to\npipe multiple xsv commands together. However, you may want the final result to\nhave a specific delimiter or record separator, and this is where 'xsv fmt' is\nuseful.\n\nUsage:\n    xsv fmt [options] [<input>]\n\nfmt options:\n    -t, --out-delimiter <arg>  The field delimiter for writing CSV data.\n                               [default: ,]\n    --crlf                     Use '\\r\\n' line endings in the output.\n    --ascii                    Use ASCII field and record separators.\n    --quote <arg>              The quote character to use. [default: \"]\n    --quote-always             Put quotes around every value.\n    --escape <arg>             The escape character to use. When not specified,\n                               quotes are escaped by doubling them.\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize(_1: __D) -> Result<cmd::fmt::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::fmt::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::fmt::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::expecting(_1: &cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_u64(_1: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E> {
    debug self => const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _4: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _5: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _6: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _7: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _8: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _9: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _10: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _11: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _12: __E;
    let mut _13: serde::de::Unexpected<'_>;
    let mut _14: &dyn serde::de::Expected;
    let mut _15: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, otherwise: bb1];
    }

    bb1: {
        _13 = Unexpected::<'_>::Unsigned(_2);
        _15 = const _;
        _14 = _15 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _12 = <__E as serde::de::Error>::invalid_value(move _13, move _14) -> [return: bb11, unwind continue];
    }

    bb2: {
        _3 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb12;
    }

    bb3: {
        _4 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb12;
    }

    bb4: {
        _5 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb12;
    }

    bb5: {
        _6 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb12;
    }

    bb6: {
        _7 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb12;
    }

    bb7: {
        _8 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb12;
    }

    bb8: {
        _9 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb12;
    }

    bb9: {
        _10 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb12;
    }

    bb10: {
        _11 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field8;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb12;
    }

    bb11: {
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Err(move _12);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

promoted[0] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 9";
        _0 = &_1;
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_str(_1: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E> {
    debug self => const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _13: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _14: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _15: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _16: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _17: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _18: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _19: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _20: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _21: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;

    bb0: {
        _11 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb27, unwind continue];
    }

    bb1: {
        _12 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb28;
    }

    bb2: {
        _10 = <str as PartialEq>::eq(_2, const "flag_out_delimiter") -> [return: bb26, unwind continue];
    }

    bb3: {
        _13 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb28;
    }

    bb4: {
        _9 = <str as PartialEq>::eq(_2, const "flag_crlf") -> [return: bb25, unwind continue];
    }

    bb5: {
        _14 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb28;
    }

    bb6: {
        _8 = <str as PartialEq>::eq(_2, const "flag_ascii") -> [return: bb24, unwind continue];
    }

    bb7: {
        _15 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb28;
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb23, unwind continue];
    }

    bb9: {
        _16 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb28;
    }

    bb10: {
        _6 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb22, unwind continue];
    }

    bb11: {
        _17 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb28;
    }

    bb12: {
        _5 = <str as PartialEq>::eq(_2, const "flag_quote") -> [return: bb21, unwind continue];
    }

    bb13: {
        _18 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb28;
    }

    bb14: {
        _4 = <str as PartialEq>::eq(_2, const "flag_quote_always") -> [return: bb20, unwind continue];
    }

    bb15: {
        _19 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb28;
    }

    bb16: {
        _3 = <str as PartialEq>::eq(_2, const "flag_escape") -> [return: bb19, unwind continue];
    }

    bb17: {
        _20 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field8;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb28;
    }

    bb18: {
        _21 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb28;
    }

    bb19: {
        switchInt(move _3) -> [0: bb18, otherwise: bb17];
    }

    bb20: {
        switchInt(move _4) -> [0: bb16, otherwise: bb15];
    }

    bb21: {
        switchInt(move _5) -> [0: bb14, otherwise: bb13];
    }

    bb22: {
        switchInt(move _6) -> [0: bb12, otherwise: bb11];
    }

    bb23: {
        switchInt(move _7) -> [0: bb10, otherwise: bb9];
    }

    bb24: {
        switchInt(move _8) -> [0: bb8, otherwise: bb7];
    }

    bb25: {
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb26: {
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb27: {
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb28: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_bytes(_1: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E> {
    debug self => const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _22: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _23: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _24: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _25: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _26: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _27: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _28: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _29: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _30: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;

    bb0: {
        _18 = Len((*_2));
        _19 = const 9_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb19, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, 102: bb11, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb103, otherwise: bb10];
    }

    bb10: {
        _30 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb112;
    }

    bb11: {
        switchInt((*_2)[1 of 9]) -> [108: bb12, otherwise: bb10];
    }

    bb12: {
        switchInt((*_2)[2 of 9]) -> [97: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[3 of 9]) -> [103: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[4 of 9]) -> [95: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[5 of 9]) -> [99: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[6 of 9]) -> [114: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[7 of 9]) -> [108: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[8 of 9]) -> [102: bb105, otherwise: bb10];
    }

    bb19: {
        _15 = Len((*_2));
        _16 = const 18_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb38, otherwise: bb20];
    }

    bb20: {
        switchInt((*_2)[0 of 18]) -> [102: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[1 of 18]) -> [108: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[2 of 18]) -> [97: bb23, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[3 of 18]) -> [103: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[4 of 18]) -> [95: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[5 of 18]) -> [111: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[6 of 18]) -> [117: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[7 of 18]) -> [116: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[8 of 18]) -> [95: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[9 of 18]) -> [100: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[10 of 18]) -> [101: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[11 of 18]) -> [108: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[12 of 18]) -> [105: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[13 of 18]) -> [109: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[14 of 18]) -> [105: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[15 of 18]) -> [116: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[16 of 18]) -> [101: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[17 of 18]) -> [114: bb104, otherwise: bb10];
    }

    bb38: {
        _12 = Len((*_2));
        _13 = const 10_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb53, otherwise: bb39];
    }

    bb39: {
        switchInt((*_2)[0 of 10]) -> [102: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[1 of 10]) -> [108: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[2 of 10]) -> [97: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[3 of 10]) -> [103: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[4 of 10]) -> [95: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[5 of 10]) -> [97: bb45, 113: bb49, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[6 of 10]) -> [115: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[7 of 10]) -> [99: bb47, otherwise: bb10];
    }

    bb47: {
        switchInt((*_2)[8 of 10]) -> [105: bb48, otherwise: bb10];
    }

    bb48: {
        switchInt((*_2)[9 of 10]) -> [105: bb106, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[6 of 10]) -> [117: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[7 of 10]) -> [111: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[8 of 10]) -> [116: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[9 of 10]) -> [101: bb109, otherwise: bb10];
    }

    bb53: {
        _9 = Len((*_2));
        _10 = const 11_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb70, otherwise: bb54];
    }

    bb54: {
        switchInt((*_2)[0 of 11]) -> [102: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[1 of 11]) -> [108: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[2 of 11]) -> [97: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[3 of 11]) -> [103: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[4 of 11]) -> [95: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[5 of 11]) -> [111: bb60, 101: bb65, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[6 of 11]) -> [117: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[7 of 11]) -> [116: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[8 of 11]) -> [112: bb63, otherwise: bb10];
    }

    bb63: {
        switchInt((*_2)[9 of 11]) -> [117: bb64, otherwise: bb10];
    }

    bb64: {
        switchInt((*_2)[10 of 11]) -> [116: bb107, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[6 of 11]) -> [115: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[7 of 11]) -> [99: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[8 of 11]) -> [97: bb68, otherwise: bb10];
    }

    bb68: {
        switchInt((*_2)[9 of 11]) -> [112: bb69, otherwise: bb10];
    }

    bb69: {
        switchInt((*_2)[10 of 11]) -> [101: bb111, otherwise: bb10];
    }

    bb70: {
        _6 = Len((*_2));
        _7 = const 14_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb85, otherwise: bb71];
    }

    bb71: {
        switchInt((*_2)[0 of 14]) -> [102: bb72, otherwise: bb10];
    }

    bb72: {
        switchInt((*_2)[1 of 14]) -> [108: bb73, otherwise: bb10];
    }

    bb73: {
        switchInt((*_2)[2 of 14]) -> [97: bb74, otherwise: bb10];
    }

    bb74: {
        switchInt((*_2)[3 of 14]) -> [103: bb75, otherwise: bb10];
    }

    bb75: {
        switchInt((*_2)[4 of 14]) -> [95: bb76, otherwise: bb10];
    }

    bb76: {
        switchInt((*_2)[5 of 14]) -> [100: bb77, otherwise: bb10];
    }

    bb77: {
        switchInt((*_2)[6 of 14]) -> [101: bb78, otherwise: bb10];
    }

    bb78: {
        switchInt((*_2)[7 of 14]) -> [108: bb79, otherwise: bb10];
    }

    bb79: {
        switchInt((*_2)[8 of 14]) -> [105: bb80, otherwise: bb10];
    }

    bb80: {
        switchInt((*_2)[9 of 14]) -> [109: bb81, otherwise: bb10];
    }

    bb81: {
        switchInt((*_2)[10 of 14]) -> [105: bb82, otherwise: bb10];
    }

    bb82: {
        switchInt((*_2)[11 of 14]) -> [116: bb83, otherwise: bb10];
    }

    bb83: {
        switchInt((*_2)[12 of 14]) -> [101: bb84, otherwise: bb10];
    }

    bb84: {
        switchInt((*_2)[13 of 14]) -> [114: bb108, otherwise: bb10];
    }

    bb85: {
        _3 = Len((*_2));
        _4 = const 17_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb86];
    }

    bb86: {
        switchInt((*_2)[0 of 17]) -> [102: bb87, otherwise: bb10];
    }

    bb87: {
        switchInt((*_2)[1 of 17]) -> [108: bb88, otherwise: bb10];
    }

    bb88: {
        switchInt((*_2)[2 of 17]) -> [97: bb89, otherwise: bb10];
    }

    bb89: {
        switchInt((*_2)[3 of 17]) -> [103: bb90, otherwise: bb10];
    }

    bb90: {
        switchInt((*_2)[4 of 17]) -> [95: bb91, otherwise: bb10];
    }

    bb91: {
        switchInt((*_2)[5 of 17]) -> [113: bb92, otherwise: bb10];
    }

    bb92: {
        switchInt((*_2)[6 of 17]) -> [117: bb93, otherwise: bb10];
    }

    bb93: {
        switchInt((*_2)[7 of 17]) -> [111: bb94, otherwise: bb10];
    }

    bb94: {
        switchInt((*_2)[8 of 17]) -> [116: bb95, otherwise: bb10];
    }

    bb95: {
        switchInt((*_2)[9 of 17]) -> [101: bb96, otherwise: bb10];
    }

    bb96: {
        switchInt((*_2)[10 of 17]) -> [95: bb97, otherwise: bb10];
    }

    bb97: {
        switchInt((*_2)[11 of 17]) -> [97: bb98, otherwise: bb10];
    }

    bb98: {
        switchInt((*_2)[12 of 17]) -> [108: bb99, otherwise: bb10];
    }

    bb99: {
        switchInt((*_2)[13 of 17]) -> [119: bb100, otherwise: bb10];
    }

    bb100: {
        switchInt((*_2)[14 of 17]) -> [97: bb101, otherwise: bb10];
    }

    bb101: {
        switchInt((*_2)[15 of 17]) -> [121: bb102, otherwise: bb10];
    }

    bb102: {
        switchInt((*_2)[16 of 17]) -> [115: bb110, otherwise: bb10];
    }

    bb103: {
        _21 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb112;
    }

    bb104: {
        _22 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb112;
    }

    bb105: {
        _23 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb112;
    }

    bb106: {
        _24 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb112;
    }

    bb107: {
        _25 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb112;
    }

    bb108: {
        _26 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb112;
    }

    bb109: {
        _27 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb112;
    }

    bb110: {
        _28 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb112;
    }

    bb111: {
        _29 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field8;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb112;
    }

    bb112: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize(_1: __D) -> Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor>(move _1, const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::expecting(_1: &cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq(_1: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::fmt::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::fmt::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn serde::de::Expected;
    let mut _22: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: isize;
    let mut _29: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _30: &dyn serde::de::Expected;
    let mut _31: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: isize;
    let mut _38: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _39: &dyn serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn serde::de::Expected;
    let mut _50: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: isize;
    let mut _57: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _58: &dyn serde::de::Expected;
    let mut _59: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _60: &mut __A;
    let mut _61: isize;
    let mut _64: isize;
    let mut _66: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _67: &dyn serde::de::Expected;
    let mut _68: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _69: &mut __A;
    let mut _70: isize;
    let mut _73: isize;
    let mut _75: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _76: &dyn serde::de::Expected;
    let mut _77: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _78: &mut __A;
    let mut _79: isize;
    let mut _82: isize;
    let mut _84: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _85: &dyn serde::de::Expected;
    let mut _86: cmd::fmt::Args;
    let mut _87: std::option::Option<std::string::String>;
    let mut _88: std::option::Option<std::string::String>;
    let mut _89: &&str;
    scope 1 {
        debug __field0 => _3;
        let _16: std::option::Option<std::option::Option<config::Delimiter>>;
        let _17: <__A as serde::de::SeqAccess<'_>>::Error;
        let _19: std::option::Option<config::Delimiter>;
        let mut _90: &&str;
        scope 5 {
            debug __field1 => _19;
            let _25: std::option::Option<bool>;
            let _26: <__A as serde::de::SeqAccess<'_>>::Error;
            let _28: bool;
            let mut _91: &&str;
            scope 9 {
                debug __field2 => _28;
                let _34: std::option::Option<bool>;
                let _35: <__A as serde::de::SeqAccess<'_>>::Error;
                let _37: bool;
                let mut _92: &&str;
                scope 13 {
                    debug __field3 => _37;
                    let _40: std::option::Option<std::string::String>;
                    let _44: std::option::Option<std::option::Option<std::string::String>>;
                    let _45: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _47: std::option::Option<std::string::String>;
                    let mut _93: &&str;
                    scope 17 {
                        debug __field4 => _40;
                        let _53: std::option::Option<std::option::Option<config::Delimiter>>;
                        let _54: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _56: std::option::Option<config::Delimiter>;
                        let mut _94: &&str;
                        scope 21 {
                            debug __field5 => _56;
                            let _62: std::option::Option<config::Delimiter>;
                            let _63: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _65: config::Delimiter;
                            let mut _95: &&str;
                            scope 25 {
                                debug __field6 => _65;
                                let _71: std::option::Option<bool>;
                                let _72: <__A as serde::de::SeqAccess<'_>>::Error;
                                let _74: bool;
                                let mut _96: &&str;
                                scope 29 {
                                    debug __field7 => _74;
                                    let _80: std::option::Option<std::option::Option<config::Delimiter>>;
                                    let _81: <__A as serde::de::SeqAccess<'_>>::Error;
                                    let _83: std::option::Option<config::Delimiter>;
                                    let mut _97: &&str;
                                    scope 33 {
                                        debug __field8 => _83;
                                    }
                                    scope 34 {
                                        debug __val => _80;
                                    }
                                    scope 35 {
                                        debug __err => _81;
                                    }
                                    scope 36 {
                                        debug __value => _83;
                                    }
                                }
                                scope 30 {
                                    debug __val => _71;
                                }
                                scope 31 {
                                    debug __err => _72;
                                }
                                scope 32 {
                                    debug __value => _74;
                                }
                            }
                            scope 26 {
                                debug __val => _62;
                            }
                            scope 27 {
                                debug __err => _63;
                            }
                            scope 28 {
                                debug __value => _65;
                            }
                        }
                        scope 22 {
                            debug __val => _53;
                        }
                        scope 23 {
                            debug __err => _54;
                        }
                        scope 24 {
                            debug __value => _56;
                        }
                    }
                    scope 18 {
                        debug __val => _44;
                    }
                    scope 19 {
                        debug __err => _45;
                    }
                    scope 20 {
                        debug __value => _47;
                    }
                }
                scope 14 {
                    debug __val => _34;
                }
                scope 15 {
                    debug __err => _35;
                }
                scope 16 {
                    debug __value => _37;
                }
            }
            scope 10 {
                debug __val => _25;
            }
            scope 11 {
                debug __err => _26;
            }
            scope 12 {
                debug __value => _28;
            }
        }
        scope 6 {
            debug __val => _16;
        }
        scope 7 {
            debug __err => _17;
        }
        scope 8 {
            debug __value => _19;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb62];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb58;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _89 = const _;
        _12 = _89 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb62];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_14) -> [return: bb8, unwind: bb61];
    }

    bb7: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb58;
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _17 = move ((_13 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb57;
    }

    bb10: {
        _16 = ((_13 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _90 = const _;
        _21 = _90 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb13, unwind: bb61];
    }

    bb12: {
        _19 = ((_16 as Some).0: std::option::Option<config::Delimiter>);
        _23 = &mut _2;
        _22 = <__A as SeqAccess<'_>>::next_element::<bool>(_23) -> [return: bb14, unwind: bb61];
    }

    bb13: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb57;
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _26);
        goto -> bb57;
    }

    bb16: {
        _25 = ((_22 as Ok).0: std::option::Option<bool>);
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _91 = const _;
        _30 = _91 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _29 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb19, unwind: bb61];
    }

    bb18: {
        _28 = ((_25 as Some).0: bool);
        _32 = &mut _2;
        _31 = <__A as SeqAccess<'_>>::next_element::<bool>(_32) -> [return: bb20, unwind: bb61];
    }

    bb19: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _29);
        goto -> bb57;
    }

    bb20: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _35 = move ((_31 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _35);
        goto -> bb57;
    }

    bb22: {
        _34 = ((_31 as Ok).0: std::option::Option<bool>);
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _92 = const _;
        _39 = _92 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _38 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _39) -> [return: bb25, unwind: bb61];
    }

    bb24: {
        _37 = ((_34 as Some).0: bool);
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_42) -> [return: bb26, unwind: bb61];
    }

    bb25: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _38);
        goto -> bb57;
    }

    bb26: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _45 = move ((_41 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb57;
    }

    bb28: {
        _44 = move ((_41 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _93 = const _;
        _49 = _93 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb31, unwind: bb61];
    }

    bb30: {
        _47 = move ((_44 as Some).0: std::option::Option<std::string::String>);
        _40 = move _47;
        _51 = &mut _2;
        _50 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_51) -> [return: bb32, unwind: bb60];
    }

    bb31: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb57;
    }

    bb32: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _54 = move ((_50 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _54);
        goto -> bb56;
    }

    bb34: {
        _53 = ((_50 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _94 = const _;
        _58 = _94 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _57 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb37, unwind: bb60];
    }

    bb36: {
        _56 = ((_53 as Some).0: std::option::Option<config::Delimiter>);
        _60 = &mut _2;
        _59 = <__A as SeqAccess<'_>>::next_element::<Delimiter>(_60) -> [return: bb38, unwind: bb60];
    }

    bb37: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _57);
        goto -> bb56;
    }

    bb38: {
        _61 = discriminant(_59);
        switchInt(move _61) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _63 = move ((_59 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _63);
        goto -> bb56;
    }

    bb40: {
        _62 = ((_59 as Ok).0: std::option::Option<config::Delimiter>);
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _95 = const _;
        _67 = _95 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _66 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _67) -> [return: bb43, unwind: bb60];
    }

    bb42: {
        _65 = ((_62 as Some).0: config::Delimiter);
        _69 = &mut _2;
        _68 = <__A as SeqAccess<'_>>::next_element::<bool>(_69) -> [return: bb44, unwind: bb60];
    }

    bb43: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _66);
        goto -> bb56;
    }

    bb44: {
        _70 = discriminant(_68);
        switchInt(move _70) -> [0: bb46, 1: bb45, otherwise: bb3];
    }

    bb45: {
        _72 = move ((_68 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _72);
        goto -> bb56;
    }

    bb46: {
        _71 = ((_68 as Ok).0: std::option::Option<bool>);
        _73 = discriminant(_71);
        switchInt(move _73) -> [0: bb47, 1: bb48, otherwise: bb3];
    }

    bb47: {
        _96 = const _;
        _76 = _96 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _75 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 7_usize, move _76) -> [return: bb49, unwind: bb60];
    }

    bb48: {
        _74 = ((_71 as Some).0: bool);
        _78 = &mut _2;
        _77 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_78) -> [return: bb50, unwind: bb60];
    }

    bb49: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _75);
        goto -> bb56;
    }

    bb50: {
        _79 = discriminant(_77);
        switchInt(move _79) -> [0: bb52, 1: bb51, otherwise: bb3];
    }

    bb51: {
        _81 = move ((_77 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _81);
        goto -> bb56;
    }

    bb52: {
        _80 = ((_77 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _82 = discriminant(_80);
        switchInt(move _82) -> [0: bb53, 1: bb54, otherwise: bb3];
    }

    bb53: {
        _97 = const _;
        _85 = _97 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _84 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 8_usize, move _85) -> [return: bb55, unwind: bb60];
    }

    bb54: {
        _83 = ((_80 as Some).0: std::option::Option<config::Delimiter>);
        _87 = move _3;
        _88 = move _40;
        _86 = cmd::fmt::Args { arg_input: move _87, flag_out_delimiter: _19, flag_crlf: _28, flag_ascii: _37, flag_output: move _88, flag_delimiter: _56, flag_quote: _65, flag_quote_always: _74, flag_escape: _83 };
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _86);
        drop(_2) -> [return: bb59, unwind continue];
    }

    bb55: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _84);
        goto -> bb56;
    }

    bb56: {
        drop(_40) -> [return: bb57, unwind: bb61];
    }

    bb57: {
        drop(_3) -> [return: bb58, unwind: bb62];
    }

    bb58: {
        drop(_2) -> [return: bb59, unwind continue];
    }

    bb59: {
        return;
    }

    bb60 (cleanup): {
        drop(_40) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_3) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_2) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }
}

promoted[0] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[7] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[8] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_map(_1: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::fmt::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::fmt::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::fmt::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _12: std::result::Result<std::option::Option<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: isize;
    let mut _20: bool;
    let _21: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _22: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _23: std::option::Option<std::option::Option<std::string::String>>;
    let mut _24: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _25: &mut __A;
    let mut _26: isize;
    let mut _29: bool;
    let _30: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _31: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _32: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _33: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _34: &mut __A;
    let mut _35: isize;
    let mut _38: bool;
    let _39: &std::option::Option<bool>;
    let mut _40: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _41: std::option::Option<bool>;
    let mut _42: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _43: &mut __A;
    let mut _44: isize;
    let mut _47: bool;
    let _48: &std::option::Option<bool>;
    let mut _49: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _50: std::option::Option<bool>;
    let mut _51: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: bool;
    let _57: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _58: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _59: std::option::Option<std::option::Option<std::string::String>>;
    let mut _60: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: isize;
    let mut _65: bool;
    let _66: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _67: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _68: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _69: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _70: &mut __A;
    let mut _71: isize;
    let mut _74: bool;
    let _75: &std::option::Option<config::Delimiter>;
    let mut _76: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _77: std::option::Option<config::Delimiter>;
    let mut _78: std::result::Result<config::Delimiter, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _79: &mut __A;
    let mut _80: isize;
    let mut _83: bool;
    let _84: &std::option::Option<bool>;
    let mut _85: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _86: std::option::Option<bool>;
    let mut _87: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _88: &mut __A;
    let mut _89: isize;
    let mut _92: bool;
    let _93: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _94: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _95: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _96: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _97: &mut __A;
    let mut _98: isize;
    let mut _101: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _102: &mut __A;
    let mut _103: isize;
    let mut _106: isize;
    let mut _108: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _109: isize;
    let mut _113: isize;
    let mut _115: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _116: isize;
    let mut _120: isize;
    let mut _122: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _123: isize;
    let mut _127: isize;
    let mut _129: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _130: isize;
    let mut _134: isize;
    let mut _136: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _137: isize;
    let mut _141: isize;
    let mut _143: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _144: isize;
    let mut _148: isize;
    let mut _150: std::result::Result<config::Delimiter, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _151: isize;
    let mut _155: isize;
    let mut _157: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _158: isize;
    let mut _162: isize;
    let mut _164: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _165: isize;
    let mut _168: cmd::fmt::Args;
    let mut _169: std::option::Option<std::string::String>;
    let mut _170: std::option::Option<config::Delimiter>;
    let mut _171: bool;
    let mut _172: bool;
    let mut _173: std::option::Option<std::string::String>;
    let mut _174: std::option::Option<config::Delimiter>;
    let mut _175: config::Delimiter;
    let mut _176: bool;
    let mut _177: std::option::Option<config::Delimiter>;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<config::Delimiter>>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<bool>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<bool>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<std::string::String>>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<std::option::Option<config::Delimiter>>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<config::Delimiter>;
                            scope 7 {
                                debug __field6 => _9;
                                let mut _10: std::option::Option<bool>;
                                scope 8 {
                                    debug __field7 => _10;
                                    let mut _11: std::option::Option<std::option::Option<config::Delimiter>>;
                                    scope 9 {
                                        debug __field8 => _11;
                                        let _105: std::option::Option<std::string::String>;
                                        let _107: std::option::Option<std::string::String>;
                                        let _110: std::option::Option<std::string::String>;
                                        let _111: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 10 {
                                            debug __key => _18;
                                            let _15: std::option::Option<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field>;
                                            let _16: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _18: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
                                            let _27: std::option::Option<std::string::String>;
                                            let _28: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _36: std::option::Option<config::Delimiter>;
                                            let _37: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _45: bool;
                                            let _46: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _54: bool;
                                            let _55: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _63: std::option::Option<std::string::String>;
                                            let _64: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _72: std::option::Option<config::Delimiter>;
                                            let _73: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _81: config::Delimiter;
                                            let _82: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _90: bool;
                                            let _91: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _99: std::option::Option<config::Delimiter>;
                                            let _100: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _104: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 11 {
                                                debug __val => _15;
                                            }
                                            scope 12 {
                                                debug __err => _16;
                                            }
                                            scope 13 {
                                                debug __val => _27;
                                            }
                                            scope 14 {
                                                debug __err => _28;
                                            }
                                            scope 15 {
                                                debug __val => _36;
                                            }
                                            scope 16 {
                                                debug __err => _37;
                                            }
                                            scope 17 {
                                                debug __val => _45;
                                            }
                                            scope 18 {
                                                debug __err => _46;
                                            }
                                            scope 19 {
                                                debug __val => _54;
                                            }
                                            scope 20 {
                                                debug __err => _55;
                                            }
                                            scope 21 {
                                                debug __val => _63;
                                            }
                                            scope 22 {
                                                debug __err => _64;
                                            }
                                            scope 23 {
                                                debug __val => _72;
                                            }
                                            scope 24 {
                                                debug __err => _73;
                                            }
                                            scope 25 {
                                                debug __val => _81;
                                            }
                                            scope 26 {
                                                debug __err => _82;
                                            }
                                            scope 27 {
                                                debug __val => _90;
                                            }
                                            scope 28 {
                                                debug __err => _91;
                                            }
                                            scope 29 {
                                                debug __val => _99;
                                            }
                                            scope 30 {
                                                debug __err => _100;
                                            }
                                            scope 31 {
                                            }
                                            scope 32 {
                                                debug __val => const IgnoredAny;
                                            }
                                            scope 33 {
                                                debug __err => _104;
                                            }
                                        }
                                        scope 34 {
                                            debug __field0 => _105;
                                            let _112: std::option::Option<config::Delimiter>;
                                            let _114: std::option::Option<config::Delimiter>;
                                            let _117: std::option::Option<config::Delimiter>;
                                            let _118: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 38 {
                                                debug __field1 => _112;
                                                let _119: bool;
                                                let _121: bool;
                                                let _124: bool;
                                                let _125: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 42 {
                                                    debug __field2 => _119;
                                                    let _126: bool;
                                                    let _128: bool;
                                                    let _131: bool;
                                                    let _132: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 46 {
                                                        debug __field3 => _126;
                                                        let _133: std::option::Option<std::string::String>;
                                                        let _135: std::option::Option<std::string::String>;
                                                        let _138: std::option::Option<std::string::String>;
                                                        let _139: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 50 {
                                                            debug __field4 => _133;
                                                            let _140: std::option::Option<config::Delimiter>;
                                                            let _142: std::option::Option<config::Delimiter>;
                                                            let _145: std::option::Option<config::Delimiter>;
                                                            let _146: <__A as serde::de::MapAccess<'_>>::Error;
                                                            scope 54 {
                                                                debug __field5 => _140;
                                                                let _147: config::Delimiter;
                                                                let _149: config::Delimiter;
                                                                let _152: config::Delimiter;
                                                                let _153: <__A as serde::de::MapAccess<'_>>::Error;
                                                                scope 58 {
                                                                    debug __field6 => _147;
                                                                    let _154: bool;
                                                                    let _156: bool;
                                                                    let _159: bool;
                                                                    let _160: <__A as serde::de::MapAccess<'_>>::Error;
                                                                    scope 62 {
                                                                        debug __field7 => _154;
                                                                        let _161: std::option::Option<config::Delimiter>;
                                                                        let _163: std::option::Option<config::Delimiter>;
                                                                        let _166: std::option::Option<config::Delimiter>;
                                                                        let _167: <__A as serde::de::MapAccess<'_>>::Error;
                                                                        scope 66 {
                                                                            debug __field8 => _161;
                                                                        }
                                                                        scope 67 {
                                                                            debug __field8 => _163;
                                                                        }
                                                                        scope 68 {
                                                                            debug __val => _166;
                                                                        }
                                                                        scope 69 {
                                                                            debug __err => _167;
                                                                        }
                                                                    }
                                                                    scope 63 {
                                                                        debug __field7 => _156;
                                                                    }
                                                                    scope 64 {
                                                                        debug __val => _159;
                                                                    }
                                                                    scope 65 {
                                                                        debug __err => _160;
                                                                    }
                                                                }
                                                                scope 59 {
                                                                    debug __field6 => _149;
                                                                }
                                                                scope 60 {
                                                                    debug __val => _152;
                                                                }
                                                                scope 61 {
                                                                    debug __err => _153;
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug __field5 => _142;
                                                            }
                                                            scope 56 {
                                                                debug __val => _145;
                                                            }
                                                            scope 57 {
                                                                debug __err => _146;
                                                            }
                                                        }
                                                        scope 51 {
                                                            debug __field4 => _135;
                                                        }
                                                        scope 52 {
                                                            debug __val => _138;
                                                        }
                                                        scope 53 {
                                                            debug __err => _139;
                                                        }
                                                    }
                                                    scope 47 {
                                                        debug __field3 => _128;
                                                    }
                                                    scope 48 {
                                                        debug __val => _131;
                                                    }
                                                    scope 49 {
                                                        debug __err => _132;
                                                    }
                                                }
                                                scope 43 {
                                                    debug __field2 => _121;
                                                }
                                                scope 44 {
                                                    debug __val => _124;
                                                }
                                                scope 45 {
                                                    debug __err => _125;
                                                }
                                            }
                                            scope 39 {
                                                debug __field1 => _114;
                                            }
                                            scope 40 {
                                                debug __val => _117;
                                            }
                                            scope 41 {
                                                debug __err => _118;
                                            }
                                        }
                                        scope 35 {
                                            debug __field0 => _107;
                                        }
                                        scope 36 {
                                            debug __val => _110;
                                        }
                                        scope 37 {
                                            debug __err => _111;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _179 = const false;
        _178 = const false;
        _179 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _4 = std::option::Option::<std::option::Option<Delimiter>>::None;
        _5 = std::option::Option::<bool>::None;
        _6 = std::option::Option::<bool>::None;
        _178 = const true;
        _7 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _8 = std::option::Option::<std::option::Option<Delimiter>>::None;
        _9 = std::option::Option::<Delimiter>::None;
        _10 = std::option::Option::<bool>::None;
        _11 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _13 = &mut _2;
        _12 = <__A as MapAccess<'_>>::next_key::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field>(_13) -> [return: bb2, unwind: bb158];
    }

    bb2: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _16 = move ((_12 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _16);
        goto -> bb143;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _15 = move ((_12 as Ok).0: std::option::Option<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _106 = discriminant(_3);
        switchInt(move _106) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb7: {
        _18 = move ((_15 as Some).0: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field);
        _19 = discriminant(_18);
        switchInt(move _19) -> [0: bb9, 1: bb19, 2: bb27, 3: bb35, 4: bb43, 5: bb53, 6: bb61, 7: bb69, 8: bb77, otherwise: bb8];
    }

    bb8: {
        _102 = &mut _2;
        _101 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_102) -> [return: bb85, unwind: bb158];
    }

    bb9: {
        _21 = &_3;
        _20 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_21) -> [return: bb10, unwind: bb158];
    }

    bb10: {
        switchInt(move _20) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _22 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb158];
    }

    bb12: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb143;
    }

    bb13: {
        _25 = &mut _2;
        _24 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_25) -> [return: bb14, unwind: bb158];
    }

    bb14: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _28 = move ((_24 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _28);
        goto -> bb143;
    }

    bb16: {
        _27 = move ((_24 as Ok).0: std::option::Option<std::string::String>);
        _23 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _27);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _179 = const true;
        _3 = move _23;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _179 = const true;
        _3 = move _23;
        goto -> bb158;
    }

    bb19: {
        _30 = &_4;
        _29 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_30) -> [return: bb20, unwind: bb158];
    }

    bb20: {
        switchInt(move _29) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _31 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_out_delimiter") -> [return: bb22, unwind: bb158];
    }

    bb22: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb143;
    }

    bb23: {
        _34 = &mut _2;
        _33 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_34) -> [return: bb24, unwind: bb158];
    }

    bb24: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _37 = move ((_33 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _37);
        goto -> bb143;
    }

    bb26: {
        _36 = ((_33 as Ok).0: std::option::Option<config::Delimiter>);
        _32 = std::option::Option::<std::option::Option<Delimiter>>::Some(_36);
        _4 = move _32;
        goto -> bb1;
    }

    bb27: {
        _39 = &_5;
        _38 = std::option::Option::<bool>::is_some(_39) -> [return: bb28, unwind: bb158];
    }

    bb28: {
        switchInt(move _38) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _40 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_crlf") -> [return: bb30, unwind: bb158];
    }

    bb30: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _40);
        goto -> bb143;
    }

    bb31: {
        _43 = &mut _2;
        _42 = <__A as MapAccess<'_>>::next_value::<bool>(_43) -> [return: bb32, unwind: bb158];
    }

    bb32: {
        _44 = discriminant(_42);
        switchInt(move _44) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _46 = move ((_42 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _46);
        goto -> bb143;
    }

    bb34: {
        _45 = ((_42 as Ok).0: bool);
        _41 = std::option::Option::<bool>::Some(_45);
        _5 = move _41;
        goto -> bb1;
    }

    bb35: {
        _48 = &_6;
        _47 = std::option::Option::<bool>::is_some(_48) -> [return: bb36, unwind: bb158];
    }

    bb36: {
        switchInt(move _47) -> [0: bb39, otherwise: bb37];
    }

    bb37: {
        _49 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_ascii") -> [return: bb38, unwind: bb158];
    }

    bb38: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _49);
        goto -> bb143;
    }

    bb39: {
        _52 = &mut _2;
        _51 = <__A as MapAccess<'_>>::next_value::<bool>(_52) -> [return: bb40, unwind: bb158];
    }

    bb40: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb42, 1: bb41, otherwise: bb4];
    }

    bb41: {
        _55 = move ((_51 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _55);
        goto -> bb143;
    }

    bb42: {
        _54 = ((_51 as Ok).0: bool);
        _50 = std::option::Option::<bool>::Some(_54);
        _6 = move _50;
        goto -> bb1;
    }

    bb43: {
        _57 = &_7;
        _56 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_57) -> [return: bb44, unwind: bb158];
    }

    bb44: {
        switchInt(move _56) -> [0: bb47, otherwise: bb45];
    }

    bb45: {
        _58 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb46, unwind: bb158];
    }

    bb46: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _58);
        goto -> bb143;
    }

    bb47: {
        _61 = &mut _2;
        _60 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_61) -> [return: bb48, unwind: bb158];
    }

    bb48: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb50, 1: bb49, otherwise: bb4];
    }

    bb49: {
        _64 = move ((_60 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _64);
        goto -> bb143;
    }

    bb50: {
        _63 = move ((_60 as Ok).0: std::option::Option<std::string::String>);
        _59 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _63);
        drop(_7) -> [return: bb51, unwind: bb52];
    }

    bb51: {
        _178 = const true;
        _7 = move _59;
        goto -> bb1;
    }

    bb52 (cleanup): {
        _178 = const true;
        _7 = move _59;
        goto -> bb158;
    }

    bb53: {
        _66 = &_8;
        _65 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_66) -> [return: bb54, unwind: bb158];
    }

    bb54: {
        switchInt(move _65) -> [0: bb57, otherwise: bb55];
    }

    bb55: {
        _67 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb56, unwind: bb158];
    }

    bb56: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _67);
        goto -> bb143;
    }

    bb57: {
        _70 = &mut _2;
        _69 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_70) -> [return: bb58, unwind: bb158];
    }

    bb58: {
        _71 = discriminant(_69);
        switchInt(move _71) -> [0: bb60, 1: bb59, otherwise: bb4];
    }

    bb59: {
        _73 = move ((_69 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _73);
        goto -> bb143;
    }

    bb60: {
        _72 = ((_69 as Ok).0: std::option::Option<config::Delimiter>);
        _68 = std::option::Option::<std::option::Option<Delimiter>>::Some(_72);
        _8 = move _68;
        goto -> bb1;
    }

    bb61: {
        _75 = &_9;
        _74 = std::option::Option::<Delimiter>::is_some(_75) -> [return: bb62, unwind: bb158];
    }

    bb62: {
        switchInt(move _74) -> [0: bb65, otherwise: bb63];
    }

    bb63: {
        _76 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_quote") -> [return: bb64, unwind: bb158];
    }

    bb64: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _76);
        goto -> bb143;
    }

    bb65: {
        _79 = &mut _2;
        _78 = <__A as MapAccess<'_>>::next_value::<Delimiter>(_79) -> [return: bb66, unwind: bb158];
    }

    bb66: {
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb68, 1: bb67, otherwise: bb4];
    }

    bb67: {
        _82 = move ((_78 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _82);
        goto -> bb143;
    }

    bb68: {
        _81 = ((_78 as Ok).0: config::Delimiter);
        _77 = std::option::Option::<Delimiter>::Some(_81);
        _9 = move _77;
        goto -> bb1;
    }

    bb69: {
        _84 = &_10;
        _83 = std::option::Option::<bool>::is_some(_84) -> [return: bb70, unwind: bb158];
    }

    bb70: {
        switchInt(move _83) -> [0: bb73, otherwise: bb71];
    }

    bb71: {
        _85 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_quote_always") -> [return: bb72, unwind: bb158];
    }

    bb72: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _85);
        goto -> bb143;
    }

    bb73: {
        _88 = &mut _2;
        _87 = <__A as MapAccess<'_>>::next_value::<bool>(_88) -> [return: bb74, unwind: bb158];
    }

    bb74: {
        _89 = discriminant(_87);
        switchInt(move _89) -> [0: bb76, 1: bb75, otherwise: bb4];
    }

    bb75: {
        _91 = move ((_87 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _91);
        goto -> bb143;
    }

    bb76: {
        _90 = ((_87 as Ok).0: bool);
        _86 = std::option::Option::<bool>::Some(_90);
        _10 = move _86;
        goto -> bb1;
    }

    bb77: {
        _93 = &_11;
        _92 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_93) -> [return: bb78, unwind: bb158];
    }

    bb78: {
        switchInt(move _92) -> [0: bb81, otherwise: bb79];
    }

    bb79: {
        _94 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_escape") -> [return: bb80, unwind: bb158];
    }

    bb80: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _94);
        goto -> bb143;
    }

    bb81: {
        _97 = &mut _2;
        _96 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_97) -> [return: bb82, unwind: bb158];
    }

    bb82: {
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb84, 1: bb83, otherwise: bb4];
    }

    bb83: {
        _100 = move ((_96 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _100);
        goto -> bb143;
    }

    bb84: {
        _99 = ((_96 as Ok).0: std::option::Option<config::Delimiter>);
        _95 = std::option::Option::<std::option::Option<Delimiter>>::Some(_99);
        _11 = move _95;
        goto -> bb1;
    }

    bb85: {
        _103 = discriminant(_101);
        switchInt(move _103) -> [0: bb1, 1: bb86, otherwise: bb4];
    }

    bb86: {
        _104 = move ((_101 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _104);
        goto -> bb143;
    }

    bb87: {
        _108 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb89, unwind: bb158];
    }

    bb88: {
        _179 = const false;
        _107 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _105 = move _107;
        goto -> bb92;
    }

    bb89: {
        _109 = discriminant(_108);
        switchInt(move _109) -> [0: bb91, 1: bb90, otherwise: bb4];
    }

    bb90: {
        _111 = move ((_108 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _111);
        goto -> bb143;
    }

    bb91: {
        _110 = move ((_108 as Ok).0: std::option::Option<std::string::String>);
        _105 = move _110;
        goto -> bb92;
    }

    bb92: {
        _113 = discriminant(_4);
        switchInt(move _113) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        _115 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_out_delimiter") -> [return: bb95, unwind: bb146];
    }

    bb94: {
        _114 = ((_4 as Some).0: std::option::Option<config::Delimiter>);
        _112 = _114;
        goto -> bb98;
    }

    bb95: {
        _116 = discriminant(_115);
        switchInt(move _116) -> [0: bb97, 1: bb96, otherwise: bb4];
    }

    bb96: {
        _118 = move ((_115 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _118);
        goto -> bb142;
    }

    bb97: {
        _117 = ((_115 as Ok).0: std::option::Option<config::Delimiter>);
        _112 = _117;
        goto -> bb98;
    }

    bb98: {
        _120 = discriminant(_5);
        switchInt(move _120) -> [0: bb99, 1: bb100, otherwise: bb4];
    }

    bb99: {
        _122 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_crlf") -> [return: bb101, unwind: bb146];
    }

    bb100: {
        _121 = ((_5 as Some).0: bool);
        _119 = _121;
        goto -> bb104;
    }

    bb101: {
        _123 = discriminant(_122);
        switchInt(move _123) -> [0: bb103, 1: bb102, otherwise: bb4];
    }

    bb102: {
        _125 = move ((_122 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _125);
        goto -> bb142;
    }

    bb103: {
        _124 = ((_122 as Ok).0: bool);
        _119 = _124;
        goto -> bb104;
    }

    bb104: {
        _127 = discriminant(_6);
        switchInt(move _127) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb105: {
        _129 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_ascii") -> [return: bb107, unwind: bb146];
    }

    bb106: {
        _128 = ((_6 as Some).0: bool);
        _126 = _128;
        goto -> bb110;
    }

    bb107: {
        _130 = discriminant(_129);
        switchInt(move _130) -> [0: bb109, 1: bb108, otherwise: bb4];
    }

    bb108: {
        _132 = move ((_129 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _132);
        goto -> bb142;
    }

    bb109: {
        _131 = ((_129 as Ok).0: bool);
        _126 = _131;
        goto -> bb110;
    }

    bb110: {
        _134 = discriminant(_7);
        switchInt(move _134) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        _136 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb113, unwind: bb146];
    }

    bb112: {
        _178 = const false;
        _135 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _133 = move _135;
        goto -> bb116;
    }

    bb113: {
        _137 = discriminant(_136);
        switchInt(move _137) -> [0: bb115, 1: bb114, otherwise: bb4];
    }

    bb114: {
        _139 = move ((_136 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _139);
        goto -> bb142;
    }

    bb115: {
        _138 = move ((_136 as Ok).0: std::option::Option<std::string::String>);
        _133 = move _138;
        goto -> bb116;
    }

    bb116: {
        _141 = discriminant(_8);
        switchInt(move _141) -> [0: bb117, 1: bb118, otherwise: bb4];
    }

    bb117: {
        _143 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb119, unwind: bb145];
    }

    bb118: {
        _142 = ((_8 as Some).0: std::option::Option<config::Delimiter>);
        _140 = _142;
        goto -> bb122;
    }

    bb119: {
        _144 = discriminant(_143);
        switchInt(move _144) -> [0: bb121, 1: bb120, otherwise: bb4];
    }

    bb120: {
        _146 = move ((_143 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _146);
        goto -> bb141;
    }

    bb121: {
        _145 = ((_143 as Ok).0: std::option::Option<config::Delimiter>);
        _140 = _145;
        goto -> bb122;
    }

    bb122: {
        _148 = discriminant(_9);
        switchInt(move _148) -> [0: bb123, 1: bb124, otherwise: bb4];
    }

    bb123: {
        _150 = serde::private::de::missing_field::<'_, Delimiter, <__A as MapAccess<'_>>::Error>(const "flag_quote") -> [return: bb125, unwind: bb145];
    }

    bb124: {
        _149 = ((_9 as Some).0: config::Delimiter);
        _147 = _149;
        goto -> bb128;
    }

    bb125: {
        _151 = discriminant(_150);
        switchInt(move _151) -> [0: bb127, 1: bb126, otherwise: bb4];
    }

    bb126: {
        _153 = move ((_150 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _153);
        goto -> bb141;
    }

    bb127: {
        _152 = ((_150 as Ok).0: config::Delimiter);
        _147 = _152;
        goto -> bb128;
    }

    bb128: {
        _155 = discriminant(_10);
        switchInt(move _155) -> [0: bb129, 1: bb130, otherwise: bb4];
    }

    bb129: {
        _157 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_quote_always") -> [return: bb131, unwind: bb145];
    }

    bb130: {
        _156 = ((_10 as Some).0: bool);
        _154 = _156;
        goto -> bb134;
    }

    bb131: {
        _158 = discriminant(_157);
        switchInt(move _158) -> [0: bb133, 1: bb132, otherwise: bb4];
    }

    bb132: {
        _160 = move ((_157 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _160);
        goto -> bb141;
    }

    bb133: {
        _159 = ((_157 as Ok).0: bool);
        _154 = _159;
        goto -> bb134;
    }

    bb134: {
        _162 = discriminant(_11);
        switchInt(move _162) -> [0: bb135, 1: bb136, otherwise: bb4];
    }

    bb135: {
        _164 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_escape") -> [return: bb137, unwind: bb145];
    }

    bb136: {
        _163 = ((_11 as Some).0: std::option::Option<config::Delimiter>);
        _161 = _163;
        goto -> bb140;
    }

    bb137: {
        _165 = discriminant(_164);
        switchInt(move _165) -> [0: bb139, 1: bb138, otherwise: bb4];
    }

    bb138: {
        _167 = move ((_164 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _167);
        goto -> bb141;
    }

    bb139: {
        _166 = ((_164 as Ok).0: std::option::Option<config::Delimiter>);
        _161 = _166;
        goto -> bb140;
    }

    bb140: {
        _169 = move _105;
        _170 = _112;
        _171 = _119;
        _172 = _126;
        _173 = move _133;
        _174 = _140;
        _175 = _147;
        _176 = _154;
        _177 = _161;
        _168 = cmd::fmt::Args { arg_input: move _169, flag_out_delimiter: move _170, flag_crlf: move _171, flag_ascii: move _172, flag_output: move _173, flag_delimiter: move _174, flag_quote: move _175, flag_quote_always: move _176, flag_escape: move _177 };
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Ok(move _168);
        _178 = const false;
        _179 = const false;
        drop(_2) -> [return: bb144, unwind continue];
    }

    bb141: {
        drop(_133) -> [return: bb142, unwind: bb146];
    }

    bb142: {
        drop(_105) -> [return: bb143, unwind: bb158];
    }

    bb143: {
        _180 = discriminant(_7);
        switchInt(move _180) -> [1: bb151, otherwise: bb150];
    }

    bb144: {
        return;
    }

    bb145 (cleanup): {
        drop(_133) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_105) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        _183 = discriminant(_3);
        switchInt(move _183) -> [1: bb159, otherwise: bb148];
    }

    bb148 (cleanup): {
        drop(_2) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        resume;
    }

    bb150: {
        _178 = const false;
        _181 = discriminant(_3);
        switchInt(move _181) -> [1: bb154, otherwise: bb153];
    }

    bb151: {
        switchInt(_178) -> [0: bb150, otherwise: bb152];
    }

    bb152: {
        drop(((_7 as Some).0: std::option::Option<std::string::String>)) -> [return: bb150, unwind: bb147];
    }

    bb153: {
        _179 = const false;
        drop(_2) -> [return: bb144, unwind continue];
    }

    bb154: {
        switchInt(_179) -> [0: bb153, otherwise: bb155];
    }

    bb155: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb153, unwind: bb148];
    }

    bb156 (cleanup): {
        switchInt(_178) -> [0: bb147, otherwise: bb157];
    }

    bb157 (cleanup): {
        drop(((_7 as Some).0: std::option::Option<std::string::String>)) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        _182 = discriminant(_7);
        switchInt(move _182) -> [1: bb156, otherwise: bb147];
    }

    bb159 (cleanup): {
        switchInt(_179) -> [0: bb148, otherwise: bb160];
    }

    bb160 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb148, unwind terminate(cleanup)];
    }
}

const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 9];
    let _2: &[&str; 9];
    let _3: [&str; 9];
    let mut _4: &[&str; 9];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::FIELDS: &[&str; 9] = {
    let mut _0: &[&str; 9];
    let mut _1: [&str; 9];

    bb0: {
        _1 = [const "arg_input", const "flag_out_delimiter", const "flag_crlf", const "flag_ascii", const "flag_output", const "flag_delimiter", const "flag_quote", const "flag_quote_always", const "flag_escape"];
        _0 = &_1;
        return;
    }
}

fn cmd::fmt::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::fmt::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::fmt::Args>;
    let mut _4: std::result::Result<cmd::fmt::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::fmt::Args;
    let mut _10: config::Config;
    let mut _11: config::Config;
    let _12: &std::option::Option<std::string::String>;
    let mut _13: std::option::Option<config::Delimiter>;
    let mut _15: config::Config;
    let mut _16: config::Config;
    let _17: &std::option::Option<std::string::String>;
    let mut _18: std::option::Option<config::Delimiter>;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: config::Config;
    let mut _22: config::Config;
    let mut _23: config::Config;
    let mut _24: std::option::Option<config::Delimiter>;
    let mut _25: config::Delimiter;
    let mut _26: csv::Terminator;
    let mut _27: bool;
    let mut _28: config::Config;
    let mut _29: config::Config;
    let mut _30: csv::QuoteStyle;
    let mut _31: isize;
    let mut _33: config::Config;
    let mut _34: config::Config;
    let mut _35: config::Config;
    let mut _36: std::option::Option<u8>;
    let mut _37: u8;
    let mut _38: config::Config;
    let mut _39: config::Config;
    let mut _40: u8;
    let mut _41: config::Delimiter;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _44: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _45: &config::Config;
    let mut _46: isize;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _51: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _52: &config::Config;
    let mut _53: isize;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _58: std::result::Result<bool, csv::Error>;
    let mut _59: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _60: &mut csv::ByteRecord;
    let mut _61: isize;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _65: std::result::Result<(), csv::Error>;
    let mut _66: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _67: &csv::ByteRecord;
    let mut _68: isize;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _71: std::result::Result<(), std::io::Error>;
    let mut _72: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _73: isize;
    let mut _75: &str;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    scope 1 {
        debug args => _2;
        let _9: config::Config;
        scope 6 {
            debug rconfig => _9;
            let mut _14: config::Config;
            scope 7 {
                debug wconfig => _14;
                let mut _42: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                let _47: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _48: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                scope 8 {
                    debug escape => _32;
                    let _32: config::Delimiter;
                }
                scope 9 {
                    debug rdr => _42;
                    let mut _49: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                    let _54: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _55: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                    scope 14 {
                        debug wtr => _49;
                        let mut _56: csv::ByteRecord;
                        scope 19 {
                            debug r => _56;
                            let _62: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _63: bool;
                            let _69: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _74: std::result::Result<std::convert::Infallible, std::io::Error>;
                            scope 20 {
                                debug residual => _62;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _63;
                                scope 23 {
                                }
                            }
                            scope 24 {
                                debug residual => _69;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => const ();
                                scope 27 {
                                }
                            }
                            scope 28 {
                                debug residual => _74;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => const ();
                                scope 31 {
                                }
                            }
                        }
                    }
                    scope 15 {
                        debug residual => _54;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _55;
                        scope 18 {
                        }
                    }
                }
                scope 10 {
                    debug residual => _47;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _48;
                    scope 13 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _5 = const {alloc9: &&str};
        _75 = deref_copy (*_5);
        _4 = get_args::<cmd::fmt::Args>(_75, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<cmd::fmt::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::fmt::Args);
        _2 = move _8;
        _12 = &(_2.0: std::option::Option<std::string::String>);
        _11 = Config::new(_12) -> [return: bb6, unwind: bb62];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb57, unwind continue];
    }

    bb6: {
        _13 = (_2.5: std::option::Option<config::Delimiter>);
        _10 = Config::delimiter(move _11, move _13) -> [return: bb7, unwind: bb62];
    }

    bb7: {
        _9 = Config::no_headers(move _10, const true) -> [return: bb8, unwind: bb62];
    }

    bb8: {
        _17 = &(_2.4: std::option::Option<std::string::String>);
        _16 = Config::new(_17) -> [return: bb9, unwind: bb61];
    }

    bb9: {
        _18 = (_2.1: std::option::Option<config::Delimiter>);
        _15 = Config::delimiter(move _16, move _18) -> [return: bb10, unwind: bb61];
    }

    bb10: {
        _19 = (_2.2: bool);
        _14 = Config::crlf(move _15, move _19) -> [return: bb11, unwind: bb61];
    }

    bb11: {
        _78 = const true;
        _20 = (_2.3: bool);
        switchInt(move _20) -> [0: bb15, otherwise: bb12];
    }

    bb12: {
        _78 = const false;
        _23 = move _14;
        _25 = Delimiter(const 31_u8);
        _24 = std::option::Option::<Delimiter>::Some(move _25);
        _22 = Config::delimiter(move _23, move _24) -> [return: bb13, unwind: bb71];
    }

    bb13: {
        _26 = csv::Terminator::Any(const 30_u8);
        _21 = Config::terminator(move _22, move _26) -> [return: bb14, unwind: bb71];
    }

    bb14: {
        _78 = const true;
        _14 = move _21;
        goto -> bb15;
    }

    bb15: {
        _27 = (_2.7: bool);
        switchInt(move _27) -> [0: bb18, otherwise: bb16];
    }

    bb16: {
        _78 = const false;
        _29 = move _14;
        _30 = Always;
        _28 = Config::quote_style(move _29, move _30) -> [return: bb17, unwind: bb71];
    }

    bb17: {
        _78 = const true;
        _14 = move _28;
        goto -> bb18;
    }

    bb18: {
        _31 = discriminant((_2.8: std::option::Option<config::Delimiter>));
        switchInt(move _31) -> [1: bb19, otherwise: bb23];
    }

    bb19: {
        _32 = (((_2.8: std::option::Option<config::Delimiter>) as Some).0: config::Delimiter);
        _78 = const false;
        _77 = const true;
        _35 = move _14;
        _37 = Delimiter::as_byte(_32) -> [return: bb20, unwind: bb69];
    }

    bb20: {
        _36 = std::option::Option::<u8>::Some(move _37);
        _77 = const false;
        _34 = Config::escape(move _35, move _36) -> [return: bb21, unwind: bb69];
    }

    bb21: {
        _77 = const false;
        _33 = Config::double_quote(move _34, const false) -> [return: bb22, unwind: bb71];
    }

    bb22: {
        _78 = const true;
        _14 = move _33;
        goto -> bb23;
    }

    bb23: {
        _78 = const false;
        _76 = const true;
        _39 = move _14;
        _41 = (_2.6: config::Delimiter);
        _40 = Delimiter::as_byte(move _41) -> [return: bb24, unwind: bb67];
    }

    bb24: {
        _76 = const false;
        _38 = Config::quote(move _39, move _40) -> [return: bb25, unwind: bb67];
    }

    bb25: {
        _76 = const false;
        _78 = const true;
        _14 = move _38;
        _45 = &_9;
        _44 = Config::reader(move _45) -> [return: bb26, unwind: bb71];
    }

    bb26: {
        _43 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _44) -> [return: bb27, unwind: bb71];
    }

    bb27: {
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        _48 = move ((_43 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _42 = move _48;
        _52 = &_14;
        _51 = Config::writer(move _52) -> [return: bb30, unwind: bb60];
    }

    bb29: {
        _47 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _47) -> [return: bb72, unwind: bb71];
    }

    bb30: {
        _50 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _51) -> [return: bb31, unwind: bb60];
    }

    bb31: {
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        _55 = move ((_50 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _49 = move _55;
        _56 = ByteRecord::new() -> [return: bb73, unwind: bb59];
    }

    bb33: {
        _54 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _54) -> [return: bb74, unwind: bb60];
    }

    bb34: {
        _59 = &mut _42;
        _60 = &mut _56;
        _58 = Reader::<Box<dyn std::io::Read>>::read_byte_record(move _59, _60) -> [return: bb35, unwind: bb58];
    }

    bb35: {
        _57 = <Result<bool, csv::Error> as Try>::branch(move _58) -> [return: bb36, unwind: bb58];
    }

    bb36: {
        _61 = discriminant(_57);
        switchInt(move _61) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        _63 = ((_57 as Continue).0: bool);
        switchInt(_63) -> [0: bb65, otherwise: bb64];
    }

    bb38: {
        _62 = move ((_57 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _62) -> [return: bb75, unwind: bb58];
    }

    bb39: {
        _64 = <Result<(), csv::Error> as Try>::branch(move _65) -> [return: bb40, unwind: bb58];
    }

    bb40: {
        _68 = discriminant(_64);
        switchInt(move _68) -> [0: bb34, 1: bb41, otherwise: bb4];
    }

    bb41: {
        _69 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _69) -> [return: bb76, unwind: bb58];
    }

    bb42: {
        _70 = <Result<(), std::io::Error> as Try>::branch(move _71) -> [return: bb43, unwind: bb58];
    }

    bb43: {
        _73 = discriminant(_70);
        switchInt(move _73) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_56) -> [return: bb46, unwind: bb59];
    }

    bb45: {
        _74 = move ((_70 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _74) -> [return: bb77, unwind: bb58];
    }

    bb46: {
        drop(_49) -> [return: bb47, unwind: bb60];
    }

    bb47: {
        drop(_42) -> [return: bb48, unwind: bb71];
    }

    bb48: {
        drop(_14) -> [return: bb49, unwind: bb61];
    }

    bb49: {
        _78 = const false;
        drop(_9) -> [return: bb50, unwind: bb62];
    }

    bb50: {
        drop(_2) -> [return: bb57, unwind continue];
    }

    bb51: {
        drop(_56) -> [return: bb52, unwind: bb59];
    }

    bb52: {
        drop(_49) -> [return: bb53, unwind: bb60];
    }

    bb53: {
        drop(_42) -> [return: bb54, unwind: bb71];
    }

    bb54: {
        drop(_14) -> [return: bb55, unwind: bb61];
    }

    bb55: {
        _78 = const false;
        drop(_9) -> [return: bb56, unwind: bb62];
    }

    bb56: {
        drop(_2) -> [return: bb57, unwind continue];
    }

    bb57: {
        return;
    }

    bb58 (cleanup): {
        drop(_56) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_49) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_42) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_9) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_2) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }

    bb64: {
        _66 = &mut _49;
        _67 = &_56;
        _65 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _66, _67) -> [return: bb39, unwind: bb58];
    }

    bb65: {
        _72 = &mut _49;
        _71 = Writer::<Box<dyn std::io::Write>>::flush(move _72) -> [return: bb42, unwind: bb58];
    }

    bb66 (cleanup): {
        drop(_39) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_76) -> [0: bb71, otherwise: bb66];
    }

    bb68 (cleanup): {
        drop(_35) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_77) -> [0: bb71, otherwise: bb68];
    }

    bb70 (cleanup): {
        drop(_14) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_78) -> [0: bb61, otherwise: bb70];
    }

    bb72: {
        goto -> bb54;
    }

    bb73: {
        goto -> bb34;
    }

    bb74: {
        goto -> bb53;
    }

    bb75: {
        goto -> bb51;
    }

    bb76: {
        goto -> bb51;
    }

    bb77: {
        goto -> bb51;
    }
}

alloc9 (static: cmd::fmt::USAGE, size: 16, align: 8) {
    ╾────alloc433<imm>────╼ de 04 00 00 00 00 00 00 │ ╾──────╼........
}

alloc433 (size: 1246, align: 1) {
    0x000 │ 0a 46 6f 72 6d 61 74 73 20 43 53 56 20 64 61 74 │ .Formats CSV dat
    0x010 │ 61 20 77 69 74 68 20 61 20 63 75 73 74 6f 6d 20 │ a with a custom 
    0x020 │ 64 65 6c 69 6d 69 74 65 72 20 6f 72 20 43 52 4c │ delimiter or CRL
    0x030 │ 46 20 6c 69 6e 65 20 65 6e 64 69 6e 67 73 2e 0a │ F line endings..
    0x040 │ 0a 47 65 6e 65 72 61 6c 6c 79 2c 20 61 6c 6c 20 │ .Generally, all 
    0x050 │ 63 6f 6d 6d 61 6e 64 73 20 69 6e 20 78 73 76 20 │ commands in xsv 
    0x060 │ 6f 75 74 70 75 74 20 43 53 56 20 64 61 74 61 20 │ output CSV data 
    0x070 │ 69 6e 20 61 20 64 65 66 61 75 6c 74 20 66 6f 72 │ in a default for
    0x080 │ 6d 61 74 2c 20 77 68 69 63 68 20 69 73 0a 74 68 │ mat, which is.th
    0x090 │ 65 20 73 61 6d 65 20 61 73 20 74 68 65 20 64 65 │ e same as the de
    0x0a0 │ 66 61 75 6c 74 20 66 6f 72 6d 61 74 20 66 6f 72 │ fault format for
    0x0b0 │ 20 72 65 61 64 69 6e 67 20 43 53 56 20 64 61 74 │  reading CSV dat
    0x0c0 │ 61 2e 20 54 68 69 73 20 6d 61 6b 65 73 20 69 74 │ a. This makes it
    0x0d0 │ 20 65 61 73 79 20 74 6f 0a 70 69 70 65 20 6d 75 │  easy to.pipe mu
    0x0e0 │ 6c 74 69 70 6c 65 20 78 73 76 20 63 6f 6d 6d 61 │ ltiple xsv comma
    0x0f0 │ 6e 64 73 20 74 6f 67 65 74 68 65 72 2e 20 48 6f │ nds together. Ho
    0x100 │ 77 65 76 65 72 2c 20 79 6f 75 20 6d 61 79 20 77 │ wever, you may w
    0x110 │ 61 6e 74 20 74 68 65 20 66 69 6e 61 6c 20 72 65 │ ant the final re
    0x120 │ 73 75 6c 74 20 74 6f 0a 68 61 76 65 20 61 20 73 │ sult to.have a s
    0x130 │ 70 65 63 69 66 69 63 20 64 65 6c 69 6d 69 74 65 │ pecific delimite
    0x140 │ 72 20 6f 72 20 72 65 63 6f 72 64 20 73 65 70 61 │ r or record sepa
    0x150 │ 72 61 74 6f 72 2c 20 61 6e 64 20 74 68 69 73 20 │ rator, and this 
    0x160 │ 69 73 20 77 68 65 72 65 20 27 78 73 76 20 66 6d │ is where 'xsv fm
    0x170 │ 74 27 20 69 73 0a 75 73 65 66 75 6c 2e 0a 0a 55 │ t' is.useful...U
    0x180 │ 73 61 67 65 3a 0a 20 20 20 20 78 73 76 20 66 6d │ sage:.    xsv fm
    0x190 │ 74 20 5b 6f 70 74 69 6f 6e 73 5d 20 5b 3c 69 6e │ t [options] [<in
    0x1a0 │ 70 75 74 3e 5d 0a 0a 66 6d 74 20 6f 70 74 69 6f │ put>]..fmt optio
    0x1b0 │ 6e 73 3a 0a 20 20 20 20 2d 74 2c 20 2d 2d 6f 75 │ ns:.    -t, --ou
    0x1c0 │ 74 2d 64 65 6c 69 6d 69 74 65 72 20 3c 61 72 67 │ t-delimiter <arg
    0x1d0 │ 3e 20 20 54 68 65 20 66 69 65 6c 64 20 64 65 6c │ >  The field del
    0x1e0 │ 69 6d 69 74 65 72 20 66 6f 72 20 77 72 69 74 69 │ imiter for writi
    0x1f0 │ 6e 67 20 43 53 56 20 64 61 74 61 2e 0a 20 20 20 │ ng CSV data..   
    0x200 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x210 │ 20 20 20 20 20 20 20 20 20 20 20 20 5b 64 65 66 │             [def
    0x220 │ 61 75 6c 74 3a 20 2c 5d 0a 20 20 20 20 2d 2d 63 │ ault: ,].    --c
    0x230 │ 72 6c 66 20 20 20 20 20 20 20 20 20 20 20 20 20 │ rlf             
    0x240 │ 20 20 20 20 20 20 20 20 55 73 65 20 27 5c 72 5c │         Use '\r\
    0x250 │ 6e 27 20 6c 69 6e 65 20 65 6e 64 69 6e 67 73 20 │ n' line endings 
    0x260 │ 69 6e 20 74 68 65 20 6f 75 74 70 75 74 2e 0a 20 │ in the output.. 
    0x270 │ 20 20 20 2d 2d 61 73 63 69 69 20 20 20 20 20 20 │    --ascii      
    0x280 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 73 │               Us
    0x290 │ 65 20 41 53 43 49 49 20 66 69 65 6c 64 20 61 6e │ e ASCII field an
    0x2a0 │ 64 20 72 65 63 6f 72 64 20 73 65 70 61 72 61 74 │ d record separat
    0x2b0 │ 6f 72 73 2e 0a 20 20 20 20 2d 2d 71 75 6f 74 65 │ ors..    --quote
    0x2c0 │ 20 3c 61 72 67 3e 20 20 20 20 20 20 20 20 20 20 │  <arg>          
    0x2d0 │ 20 20 20 20 54 68 65 20 71 75 6f 74 65 20 63 68 │     The quote ch
    0x2e0 │ 61 72 61 63 74 65 72 20 74 6f 20 75 73 65 2e 20 │ aracter to use. 
    0x2f0 │ 5b 64 65 66 61 75 6c 74 3a 20 22 5d 0a 20 20 20 │ [default: "].   
    0x300 │ 20 2d 2d 71 75 6f 74 65 2d 61 6c 77 61 79 73 20 │  --quote-always 
    0x310 │ 20 20 20 20 20 20 20 20 20 20 20 20 50 75 74 20 │             Put 
    0x320 │ 71 75 6f 74 65 73 20 61 72 6f 75 6e 64 20 65 76 │ quotes around ev
    0x330 │ 65 72 79 20 76 61 6c 75 65 2e 0a 20 20 20 20 2d │ ery value..    -
    0x340 │ 2d 65 73 63 61 70 65 20 3c 61 72 67 3e 20 20 20 │ -escape <arg>   
    0x350 │ 20 20 20 20 20 20 20 20 20 20 54 68 65 20 65 73 │           The es
    0x360 │ 63 61 70 65 20 63 68 61 72 61 63 74 65 72 20 74 │ cape character t
    0x370 │ 6f 20 75 73 65 2e 20 57 68 65 6e 20 6e 6f 74 20 │ o use. When not 
    0x380 │ 73 70 65 63 69 66 69 65 64 2c 0a 20 20 20 20 20 │ specified,.     
    0x390 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x3a0 │ 20 20 20 20 20 20 20 20 20 20 71 75 6f 74 65 73 │           quotes
    0x3b0 │ 20 61 72 65 20 65 73 63 61 70 65 64 20 62 79 20 │  are escaped by 
    0x3c0 │ 64 6f 75 62 6c 69 6e 67 20 74 68 65 6d 2e 0a 0a │ doubling them...
    0x3d0 │ 43 6f 6d 6d 6f 6e 20 6f 70 74 69 6f 6e 73 3a 0a │ Common options:.
    0x3e0 │ 20 20 20 20 2d 68 2c 20 2d 2d 68 65 6c 70 20 20 │     -h, --help  
    0x3f0 │ 20 20 20 20 20 20 20 20 20 20 20 44 69 73 70 6c │            Displ
    0x400 │ 61 79 20 74 68 69 73 20 6d 65 73 73 61 67 65 0a │ ay this message.
    0x410 │ 20 20 20 20 2d 6f 2c 20 2d 2d 6f 75 74 70 75 74 │     -o, --output
    0x420 │ 20 3c 66 69 6c 65 3e 20 20 20 20 57 72 69 74 65 │  <file>    Write
    0x430 │ 20 6f 75 74 70 75 74 20 74 6f 20 3c 66 69 6c 65 │  output to <file
    0x440 │ 3e 20 69 6e 73 74 65 61 64 20 6f 66 20 73 74 64 │ > instead of std
    0x450 │ 6f 75 74 2e 0a 20 20 20 20 2d 64 2c 20 2d 2d 64 │ out..    -d, --d
    0x460 │ 65 6c 69 6d 69 74 65 72 20 3c 61 72 67 3e 20 20 │ elimiter <arg>  
    0x470 │ 54 68 65 20 66 69 65 6c 64 20 64 65 6c 69 6d 69 │ The field delimi
    0x480 │ 74 65 72 20 66 6f 72 20 72 65 61 64 69 6e 67 20 │ ter for reading 
    0x490 │ 43 53 56 20 64 61 74 61 2e 0a 20 20 20 20 20 20 │ CSV data..      
    0x4a0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x4b0 │ 20 20 20 20 20 4d 75 73 74 20 62 65 20 61 20 73 │      Must be a s
    0x4c0 │ 69 6e 67 6c 65 20 63 68 61 72 61 63 74 65 72 2e │ ingle character.
    0x4d0 │ 20 28 64 65 66 61 75 6c 74 3a 20 2c 29 0a       │  (default: ,).
}

static frequency::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nCompute a frequency table on CSV data.\n\nThe frequency table is formatted as CSV data:\n\n    field,value,count\n\nBy default, there is a row for the N most frequent values for each field in the\ndata. The order and number of values can be tweaked with --asc and --limit,\nrespectively.\n\nSince this computes an exact frequency table, memory proportional to the\ncardinality of each column is required.\n\nUsage:\n    xsv frequency [options] [<input>]\n\nfrequency options:\n    -s, --select <arg>     Select a subset of columns to compute frequencies\n                           for. See 'xsv select --help' for the format\n                           details. This is provided here because piping 'xsv\n                           select' into 'xsv frequency' will disable the use\n                           of indexing.\n    -l, --limit <arg>      Limit the frequency table to the N most common\n                           items. Set to '0' to disable a limit.\n                           [default: 10]\n    -a, --asc              Sort the frequency tables in ascending order by\n                           count. The default is descending order.\n    --no-nulls             Don't include NULLs in the frequency table.\n    -j, --jobs <arg>       The number of jobs to run in parallel.\n                           This works better when the given CSV data has\n                           an index already created. Note that a file handle\n                           is opened for each job.\n                           When set to '0', the number of jobs is set to the\n                           number of CPUs detected.\n                           [default: 0]\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -n, --no-headers       When set, the first row will NOT be included\n                           in the frequency table. Additionally, the 'field'\n                           column will be 1-based indices instead of header\n                           names.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

fn frequency::<impl at src/cmd/frequency.rs:63:10: 63:15>::clone(_1: &frequency::Args) -> frequency::Args {
    debug self => _1;
    let mut _0: cmd::frequency::Args;
    let mut _2: std::option::Option<std::string::String>;
    let _3: &std::option::Option<std::string::String>;
    let mut _4: select::SelectColumns;
    let _5: &select::SelectColumns;
    let mut _6: usize;
    let _7: &usize;
    let mut _8: bool;
    let _9: &bool;
    let mut _10: bool;
    let _11: &bool;
    let mut _12: usize;
    let _13: &usize;
    let mut _14: std::option::Option<std::string::String>;
    let _15: &std::option::Option<std::string::String>;
    let mut _16: bool;
    let _17: &bool;
    let mut _18: std::option::Option<config::Delimiter>;
    let _19: &std::option::Option<config::Delimiter>;

    bb0: {
        _3 = &((*_1).0: std::option::Option<std::string::String>);
        _2 = <std::option::Option<std::string::String> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: select::SelectColumns);
        _4 = <SelectColumns as Clone>::clone(_5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = &((*_1).2: usize);
        _6 = (*_7);
        _9 = &((*_1).3: bool);
        _8 = (*_9);
        _11 = &((*_1).4: bool);
        _10 = (*_11);
        _13 = &((*_1).5: usize);
        _12 = (*_13);
        _15 = &((*_1).6: std::option::Option<std::string::String>);
        _14 = <std::option::Option<std::string::String> as Clone>::clone(_15) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _17 = &((*_1).7: bool);
        _16 = (*_17);
        _19 = &((*_1).8: std::option::Option<config::Delimiter>);
        _18 = <std::option::Option<Delimiter> as Clone>::clone(_19) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = frequency::Args { arg_input: move _2, flag_select: move _4, flag_limit: move _6, flag_asc: move _8, flag_no_nulls: move _10, flag_jobs: move _12, flag_output: move _14, flag_no_headers: move _16, flag_delimiter: move _18 };
        return;
    }

    bb5 (cleanup): {
        drop(_14) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

const frequency::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize(_1: __D) -> Result<frequency::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::frequency::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<frequency::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::expecting(_1: &frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_u64(_1: frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E> {
    debug self => const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _4: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _5: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _6: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _7: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _8: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _9: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _10: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _11: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _12: __E;
    let mut _13: serde::de::Unexpected<'_>;
    let mut _14: &dyn serde::de::Expected;
    let mut _15: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, otherwise: bb1];
    }

    bb1: {
        _13 = Unexpected::<'_>::Unsigned(_2);
        _15 = const _;
        _14 = _15 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _12 = <__E as serde::de::Error>::invalid_value(move _13, move _14) -> [return: bb11, unwind continue];
    }

    bb2: {
        _3 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field0;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb12;
    }

    bb3: {
        _4 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field1;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb12;
    }

    bb4: {
        _5 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field2;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb12;
    }

    bb5: {
        _6 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field3;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb12;
    }

    bb6: {
        _7 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field4;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb12;
    }

    bb7: {
        _8 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field5;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb12;
    }

    bb8: {
        _9 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field6;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb12;
    }

    bb9: {
        _10 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field7;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb12;
    }

    bb10: {
        _11 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field8;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb12;
    }

    bb11: {
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Err(move _12);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

promoted[0] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 9";
        _0 = &_1;
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_str(_1: frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E> {
    debug self => const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _13: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _14: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _15: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _16: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _17: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _18: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _19: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _20: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _21: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;

    bb0: {
        _11 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb27, unwind continue];
    }

    bb1: {
        _12 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field0;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb28;
    }

    bb2: {
        _10 = <str as PartialEq>::eq(_2, const "flag_select") -> [return: bb26, unwind continue];
    }

    bb3: {
        _13 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field1;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb28;
    }

    bb4: {
        _9 = <str as PartialEq>::eq(_2, const "flag_limit") -> [return: bb25, unwind continue];
    }

    bb5: {
        _14 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field2;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb28;
    }

    bb6: {
        _8 = <str as PartialEq>::eq(_2, const "flag_asc") -> [return: bb24, unwind continue];
    }

    bb7: {
        _15 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field3;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb28;
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "flag_no_nulls") -> [return: bb23, unwind continue];
    }

    bb9: {
        _16 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field4;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb28;
    }

    bb10: {
        _6 = <str as PartialEq>::eq(_2, const "flag_jobs") -> [return: bb22, unwind continue];
    }

    bb11: {
        _17 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field5;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb28;
    }

    bb12: {
        _5 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb21, unwind continue];
    }

    bb13: {
        _18 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field6;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb28;
    }

    bb14: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb20, unwind continue];
    }

    bb15: {
        _19 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field7;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb28;
    }

    bb16: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb19, unwind continue];
    }

    bb17: {
        _20 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field8;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb28;
    }

    bb18: {
        _21 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__ignore;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb28;
    }

    bb19: {
        switchInt(move _3) -> [0: bb18, otherwise: bb17];
    }

    bb20: {
        switchInt(move _4) -> [0: bb16, otherwise: bb15];
    }

    bb21: {
        switchInt(move _5) -> [0: bb14, otherwise: bb13];
    }

    bb22: {
        switchInt(move _6) -> [0: bb12, otherwise: bb11];
    }

    bb23: {
        switchInt(move _7) -> [0: bb10, otherwise: bb9];
    }

    bb24: {
        switchInt(move _8) -> [0: bb8, otherwise: bb7];
    }

    bb25: {
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb26: {
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb27: {
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb28: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_bytes(_1: frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E> {
    debug self => const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _25: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _26: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _27: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _28: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _29: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _30: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _31: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _32: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _33: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;

    bb0: {
        _21 = Len((*_2));
        _22 = const 9_usize;
        _23 = Eq(move _21, move _22);
        switchInt(move _23) -> [0: bb19, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, 102: bb11, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb101, otherwise: bb10];
    }

    bb10: {
        _33 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__ignore;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _33);
        goto -> bb110;
    }

    bb11: {
        switchInt((*_2)[1 of 9]) -> [108: bb12, otherwise: bb10];
    }

    bb12: {
        switchInt((*_2)[2 of 9]) -> [97: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[3 of 9]) -> [103: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[4 of 9]) -> [95: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[5 of 9]) -> [106: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[6 of 9]) -> [111: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[7 of 9]) -> [98: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[8 of 9]) -> [115: bb106, otherwise: bb10];
    }

    bb19: {
        _18 = Len((*_2));
        _19 = const 11_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb36, otherwise: bb20];
    }

    bb20: {
        switchInt((*_2)[0 of 11]) -> [102: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[1 of 11]) -> [108: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[2 of 11]) -> [97: bb23, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[3 of 11]) -> [103: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[4 of 11]) -> [95: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[5 of 11]) -> [115: bb26, 111: bb31, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[6 of 11]) -> [101: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[7 of 11]) -> [108: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[8 of 11]) -> [101: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[9 of 11]) -> [99: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[10 of 11]) -> [116: bb102, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[6 of 11]) -> [117: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[7 of 11]) -> [116: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[8 of 11]) -> [112: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[9 of 11]) -> [117: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[10 of 11]) -> [116: bb107, otherwise: bb10];
    }

    bb36: {
        _15 = Len((*_2));
        _16 = const 10_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb47, otherwise: bb37];
    }

    bb37: {
        switchInt((*_2)[0 of 10]) -> [102: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[1 of 10]) -> [108: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[2 of 10]) -> [97: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[3 of 10]) -> [103: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[4 of 10]) -> [95: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[5 of 10]) -> [108: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[6 of 10]) -> [105: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[7 of 10]) -> [109: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[8 of 10]) -> [105: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[9 of 10]) -> [116: bb103, otherwise: bb10];
    }

    bb47: {
        _12 = Len((*_2));
        _13 = const 8_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb56, otherwise: bb48];
    }

    bb48: {
        switchInt((*_2)[0 of 8]) -> [102: bb49, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[1 of 8]) -> [108: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[2 of 8]) -> [97: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[3 of 8]) -> [103: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[4 of 8]) -> [95: bb53, otherwise: bb10];
    }

    bb53: {
        switchInt((*_2)[5 of 8]) -> [97: bb54, otherwise: bb10];
    }

    bb54: {
        switchInt((*_2)[6 of 8]) -> [115: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[7 of 8]) -> [99: bb104, otherwise: bb10];
    }

    bb56: {
        _9 = Len((*_2));
        _10 = const 13_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb70, otherwise: bb57];
    }

    bb57: {
        switchInt((*_2)[0 of 13]) -> [102: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[1 of 13]) -> [108: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[2 of 13]) -> [97: bb60, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[3 of 13]) -> [103: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[4 of 13]) -> [95: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[5 of 13]) -> [110: bb63, otherwise: bb10];
    }

    bb63: {
        switchInt((*_2)[6 of 13]) -> [111: bb64, otherwise: bb10];
    }

    bb64: {
        switchInt((*_2)[7 of 13]) -> [95: bb65, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[8 of 13]) -> [110: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[9 of 13]) -> [117: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[10 of 13]) -> [108: bb68, otherwise: bb10];
    }

    bb68: {
        switchInt((*_2)[11 of 13]) -> [108: bb69, otherwise: bb10];
    }

    bb69: {
        switchInt((*_2)[12 of 13]) -> [115: bb105, otherwise: bb10];
    }

    bb70: {
        _6 = Len((*_2));
        _7 = const 15_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb86, otherwise: bb71];
    }

    bb71: {
        switchInt((*_2)[0 of 15]) -> [102: bb72, otherwise: bb10];
    }

    bb72: {
        switchInt((*_2)[1 of 15]) -> [108: bb73, otherwise: bb10];
    }

    bb73: {
        switchInt((*_2)[2 of 15]) -> [97: bb74, otherwise: bb10];
    }

    bb74: {
        switchInt((*_2)[3 of 15]) -> [103: bb75, otherwise: bb10];
    }

    bb75: {
        switchInt((*_2)[4 of 15]) -> [95: bb76, otherwise: bb10];
    }

    bb76: {
        switchInt((*_2)[5 of 15]) -> [110: bb77, otherwise: bb10];
    }

    bb77: {
        switchInt((*_2)[6 of 15]) -> [111: bb78, otherwise: bb10];
    }

    bb78: {
        switchInt((*_2)[7 of 15]) -> [95: bb79, otherwise: bb10];
    }

    bb79: {
        switchInt((*_2)[8 of 15]) -> [104: bb80, otherwise: bb10];
    }

    bb80: {
        switchInt((*_2)[9 of 15]) -> [101: bb81, otherwise: bb10];
    }

    bb81: {
        switchInt((*_2)[10 of 15]) -> [97: bb82, otherwise: bb10];
    }

    bb82: {
        switchInt((*_2)[11 of 15]) -> [100: bb83, otherwise: bb10];
    }

    bb83: {
        switchInt((*_2)[12 of 15]) -> [101: bb84, otherwise: bb10];
    }

    bb84: {
        switchInt((*_2)[13 of 15]) -> [114: bb85, otherwise: bb10];
    }

    bb85: {
        switchInt((*_2)[14 of 15]) -> [115: bb108, otherwise: bb10];
    }

    bb86: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb87];
    }

    bb87: {
        switchInt((*_2)[0 of 14]) -> [102: bb88, otherwise: bb10];
    }

    bb88: {
        switchInt((*_2)[1 of 14]) -> [108: bb89, otherwise: bb10];
    }

    bb89: {
        switchInt((*_2)[2 of 14]) -> [97: bb90, otherwise: bb10];
    }

    bb90: {
        switchInt((*_2)[3 of 14]) -> [103: bb91, otherwise: bb10];
    }

    bb91: {
        switchInt((*_2)[4 of 14]) -> [95: bb92, otherwise: bb10];
    }

    bb92: {
        switchInt((*_2)[5 of 14]) -> [100: bb93, otherwise: bb10];
    }

    bb93: {
        switchInt((*_2)[6 of 14]) -> [101: bb94, otherwise: bb10];
    }

    bb94: {
        switchInt((*_2)[7 of 14]) -> [108: bb95, otherwise: bb10];
    }

    bb95: {
        switchInt((*_2)[8 of 14]) -> [105: bb96, otherwise: bb10];
    }

    bb96: {
        switchInt((*_2)[9 of 14]) -> [109: bb97, otherwise: bb10];
    }

    bb97: {
        switchInt((*_2)[10 of 14]) -> [105: bb98, otherwise: bb10];
    }

    bb98: {
        switchInt((*_2)[11 of 14]) -> [116: bb99, otherwise: bb10];
    }

    bb99: {
        switchInt((*_2)[12 of 14]) -> [101: bb100, otherwise: bb10];
    }

    bb100: {
        switchInt((*_2)[13 of 14]) -> [114: bb109, otherwise: bb10];
    }

    bb101: {
        _24 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field0;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb110;
    }

    bb102: {
        _25 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field1;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb110;
    }

    bb103: {
        _26 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field2;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb110;
    }

    bb104: {
        _27 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field3;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb110;
    }

    bb105: {
        _28 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field4;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb110;
    }

    bb106: {
        _29 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field5;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb110;
    }

    bb107: {
        _30 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field6;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb110;
    }

    bb108: {
        _31 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field7;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb110;
    }

    bb109: {
        _32 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field8;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _32);
        goto -> bb110;
    }

    bb110: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize(_1: __D) -> Result<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor>(move _1, const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::expecting(_1: &frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq(_1: frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<frequency::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<frequency::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::frequency::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<select::SelectColumns>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<usize>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn serde::de::Expected;
    let mut _50: std::result::Result<std::option::Option<usize>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: isize;
    let mut _57: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _58: &dyn serde::de::Expected;
    let mut _60: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: isize;
    let mut _65: isize;
    let mut _67: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _68: &dyn serde::de::Expected;
    let mut _69: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _70: &mut __A;
    let mut _71: isize;
    let mut _74: isize;
    let mut _76: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _77: &dyn serde::de::Expected;
    let mut _78: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _79: &mut __A;
    let mut _80: isize;
    let mut _83: isize;
    let mut _85: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _86: &dyn serde::de::Expected;
    let mut _87: cmd::frequency::Args;
    let mut _88: std::option::Option<std::string::String>;
    let mut _89: select::SelectColumns;
    let mut _90: std::option::Option<std::string::String>;
    let mut _91: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: select::SelectColumns;
        let _17: std::option::Option<select::SelectColumns>;
        let _18: <__A as serde::de::SeqAccess<'_>>::Error;
        let _20: select::SelectColumns;
        let mut _92: &&str;
        scope 5 {
            debug __field1 => _13;
            let _26: std::option::Option<usize>;
            let _27: <__A as serde::de::SeqAccess<'_>>::Error;
            let _29: usize;
            let mut _93: &&str;
            scope 9 {
                debug __field2 => _29;
                let _35: std::option::Option<bool>;
                let _36: <__A as serde::de::SeqAccess<'_>>::Error;
                let _38: bool;
                let mut _94: &&str;
                scope 13 {
                    debug __field3 => _38;
                    let _44: std::option::Option<bool>;
                    let _45: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _47: bool;
                    let mut _95: &&str;
                    scope 17 {
                        debug __field4 => _47;
                        let _53: std::option::Option<usize>;
                        let _54: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _56: usize;
                        let mut _96: &&str;
                        scope 21 {
                            debug __field5 => _56;
                            let _59: std::option::Option<std::string::String>;
                            let _63: std::option::Option<std::option::Option<std::string::String>>;
                            let _64: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _66: std::option::Option<std::string::String>;
                            let mut _97: &&str;
                            scope 25 {
                                debug __field6 => _59;
                                let _72: std::option::Option<bool>;
                                let _73: <__A as serde::de::SeqAccess<'_>>::Error;
                                let _75: bool;
                                let mut _98: &&str;
                                scope 29 {
                                    debug __field7 => _75;
                                    let _81: std::option::Option<std::option::Option<config::Delimiter>>;
                                    let _82: <__A as serde::de::SeqAccess<'_>>::Error;
                                    let _84: std::option::Option<config::Delimiter>;
                                    let mut _99: &&str;
                                    scope 33 {
                                        debug __field8 => _84;
                                    }
                                    scope 34 {
                                        debug __val => _81;
                                    }
                                    scope 35 {
                                        debug __err => _82;
                                    }
                                    scope 36 {
                                        debug __value => _84;
                                    }
                                }
                                scope 30 {
                                    debug __val => _72;
                                }
                                scope 31 {
                                    debug __err => _73;
                                }
                                scope 32 {
                                    debug __value => _75;
                                }
                            }
                            scope 26 {
                                debug __val => _63;
                            }
                            scope 27 {
                                debug __err => _64;
                            }
                            scope 28 {
                                debug __value => _66;
                            }
                        }
                        scope 22 {
                            debug __val => _53;
                        }
                        scope 23 {
                            debug __err => _54;
                        }
                        scope 24 {
                            debug __value => _56;
                        }
                    }
                    scope 18 {
                        debug __val => _44;
                    }
                    scope 19 {
                        debug __err => _45;
                    }
                    scope 20 {
                        debug __value => _47;
                    }
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb64];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb59;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _91 = const _;
        _12 = _91 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb64];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<SelectColumns>(_15) -> [return: bb8, unwind: bb63];
    }

    bb7: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb59;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb58;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<select::SelectColumns>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _92 = const _;
        _22 = _92 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb63];
    }

    bb12: {
        _20 = move ((_17 as Some).0: select::SelectColumns);
        _13 = move _20;
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<usize>(_24) -> [return: bb14, unwind: bb62];
    }

    bb13: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb58;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb57;
    }

    bb16: {
        _26 = ((_23 as Ok).0: std::option::Option<usize>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _93 = const _;
        _31 = _93 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb62];
    }

    bb18: {
        _29 = ((_26 as Some).0: usize);
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<bool>(_33) -> [return: bb20, unwind: bb62];
    }

    bb19: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb57;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb57;
    }

    bb22: {
        _35 = ((_32 as Ok).0: std::option::Option<bool>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _94 = const _;
        _40 = _94 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb62];
    }

    bb24: {
        _38 = ((_35 as Some).0: bool);
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<bool>(_42) -> [return: bb26, unwind: bb62];
    }

    bb25: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb57;
    }

    bb26: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _45 = move ((_41 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb57;
    }

    bb28: {
        _44 = ((_41 as Ok).0: std::option::Option<bool>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _95 = const _;
        _49 = _95 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb31, unwind: bb62];
    }

    bb30: {
        _47 = ((_44 as Some).0: bool);
        _51 = &mut _2;
        _50 = <__A as SeqAccess<'_>>::next_element::<usize>(_51) -> [return: bb32, unwind: bb62];
    }

    bb31: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb57;
    }

    bb32: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _54 = move ((_50 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _54);
        goto -> bb57;
    }

    bb34: {
        _53 = ((_50 as Ok).0: std::option::Option<usize>);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _96 = const _;
        _58 = _96 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _57 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb37, unwind: bb62];
    }

    bb36: {
        _56 = ((_53 as Some).0: usize);
        _61 = &mut _2;
        _60 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_61) -> [return: bb38, unwind: bb62];
    }

    bb37: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _57);
        goto -> bb57;
    }

    bb38: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _64 = move ((_60 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _64);
        goto -> bb57;
    }

    bb40: {
        _63 = move ((_60 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _65 = discriminant(_63);
        switchInt(move _65) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _97 = const _;
        _68 = _97 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _67 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _68) -> [return: bb43, unwind: bb62];
    }

    bb42: {
        _66 = move ((_63 as Some).0: std::option::Option<std::string::String>);
        _59 = move _66;
        _70 = &mut _2;
        _69 = <__A as SeqAccess<'_>>::next_element::<bool>(_70) -> [return: bb44, unwind: bb61];
    }

    bb43: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _67);
        goto -> bb57;
    }

    bb44: {
        _71 = discriminant(_69);
        switchInt(move _71) -> [0: bb46, 1: bb45, otherwise: bb3];
    }

    bb45: {
        _73 = move ((_69 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _73);
        goto -> bb56;
    }

    bb46: {
        _72 = ((_69 as Ok).0: std::option::Option<bool>);
        _74 = discriminant(_72);
        switchInt(move _74) -> [0: bb47, 1: bb48, otherwise: bb3];
    }

    bb47: {
        _98 = const _;
        _77 = _98 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _76 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 7_usize, move _77) -> [return: bb49, unwind: bb61];
    }

    bb48: {
        _75 = ((_72 as Some).0: bool);
        _79 = &mut _2;
        _78 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_79) -> [return: bb50, unwind: bb61];
    }

    bb49: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _76);
        goto -> bb56;
    }

    bb50: {
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb52, 1: bb51, otherwise: bb3];
    }

    bb51: {
        _82 = move ((_78 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _82);
        goto -> bb56;
    }

    bb52: {
        _81 = ((_78 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb53, 1: bb54, otherwise: bb3];
    }

    bb53: {
        _99 = const _;
        _86 = _99 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _85 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 8_usize, move _86) -> [return: bb55, unwind: bb61];
    }

    bb54: {
        _84 = ((_81 as Some).0: std::option::Option<config::Delimiter>);
        _88 = move _3;
        _89 = move _13;
        _90 = move _59;
        _87 = frequency::Args { arg_input: move _88, flag_select: move _89, flag_limit: _29, flag_asc: _38, flag_no_nulls: _47, flag_jobs: _56, flag_output: move _90, flag_no_headers: _75, flag_delimiter: _84 };
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _87);
        drop(_2) -> [return: bb60, unwind continue];
    }

    bb55: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _85);
        goto -> bb56;
    }

    bb56: {
        drop(_59) -> [return: bb57, unwind: bb62];
    }

    bb57: {
        drop(_13) -> [return: bb58, unwind: bb63];
    }

    bb58: {
        drop(_3) -> [return: bb59, unwind: bb64];
    }

    bb59: {
        drop(_2) -> [return: bb60, unwind continue];
    }

    bb60: {
        return;
    }

    bb61 (cleanup): {
        drop(_59) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_13) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_3) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_2) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        resume;
    }
}

promoted[0] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[7] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[8] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_map(_1: frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<frequency::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<frequency::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::frequency::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _12: std::result::Result<std::option::Option<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: isize;
    let mut _20: bool;
    let _21: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _22: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _23: std::option::Option<std::option::Option<std::string::String>>;
    let mut _24: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _25: &mut __A;
    let mut _26: isize;
    let mut _29: bool;
    let _30: &std::option::Option<select::SelectColumns>;
    let mut _31: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _32: std::option::Option<select::SelectColumns>;
    let mut _33: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _34: &mut __A;
    let mut _35: isize;
    let mut _38: bool;
    let _39: &std::option::Option<usize>;
    let mut _40: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _41: std::option::Option<usize>;
    let mut _42: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _43: &mut __A;
    let mut _44: isize;
    let mut _47: bool;
    let _48: &std::option::Option<bool>;
    let mut _49: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _50: std::option::Option<bool>;
    let mut _51: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: bool;
    let _57: &std::option::Option<bool>;
    let mut _58: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _59: std::option::Option<bool>;
    let mut _60: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: isize;
    let mut _65: bool;
    let _66: &std::option::Option<usize>;
    let mut _67: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _68: std::option::Option<usize>;
    let mut _69: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _70: &mut __A;
    let mut _71: isize;
    let mut _74: bool;
    let _75: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _76: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _77: std::option::Option<std::option::Option<std::string::String>>;
    let mut _78: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _79: &mut __A;
    let mut _80: isize;
    let mut _83: bool;
    let _84: &std::option::Option<bool>;
    let mut _85: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _86: std::option::Option<bool>;
    let mut _87: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _88: &mut __A;
    let mut _89: isize;
    let mut _92: bool;
    let _93: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _94: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _95: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _96: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _97: &mut __A;
    let mut _98: isize;
    let mut _101: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _102: &mut __A;
    let mut _103: isize;
    let mut _106: isize;
    let mut _108: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _109: isize;
    let mut _113: isize;
    let mut _115: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _116: isize;
    let mut _120: isize;
    let mut _122: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _123: isize;
    let mut _127: isize;
    let mut _129: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _130: isize;
    let mut _134: isize;
    let mut _136: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _137: isize;
    let mut _141: isize;
    let mut _143: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _144: isize;
    let mut _148: isize;
    let mut _150: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _151: isize;
    let mut _155: isize;
    let mut _157: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _158: isize;
    let mut _162: isize;
    let mut _164: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _165: isize;
    let mut _168: cmd::frequency::Args;
    let mut _169: std::option::Option<std::string::String>;
    let mut _170: select::SelectColumns;
    let mut _171: usize;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: usize;
    let mut _175: std::option::Option<std::string::String>;
    let mut _176: bool;
    let mut _177: std::option::Option<config::Delimiter>;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<select::SelectColumns>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<usize>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<bool>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<bool>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<usize>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<std::option::Option<std::string::String>>;
                            scope 7 {
                                debug __field6 => _9;
                                let mut _10: std::option::Option<bool>;
                                scope 8 {
                                    debug __field7 => _10;
                                    let mut _11: std::option::Option<std::option::Option<config::Delimiter>>;
                                    scope 9 {
                                        debug __field8 => _11;
                                        let _105: std::option::Option<std::string::String>;
                                        let _107: std::option::Option<std::string::String>;
                                        let _110: std::option::Option<std::string::String>;
                                        let _111: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 10 {
                                            debug __key => _18;
                                            let _15: std::option::Option<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field>;
                                            let _16: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _18: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
                                            let _27: std::option::Option<std::string::String>;
                                            let _28: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _36: select::SelectColumns;
                                            let _37: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _45: usize;
                                            let _46: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _54: bool;
                                            let _55: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _63: bool;
                                            let _64: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _72: usize;
                                            let _73: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _81: std::option::Option<std::string::String>;
                                            let _82: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _90: bool;
                                            let _91: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _99: std::option::Option<config::Delimiter>;
                                            let _100: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _104: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 11 {
                                                debug __val => _15;
                                            }
                                            scope 12 {
                                                debug __err => _16;
                                            }
                                            scope 13 {
                                                debug __val => _27;
                                            }
                                            scope 14 {
                                                debug __err => _28;
                                            }
                                            scope 15 {
                                                debug __val => _36;
                                            }
                                            scope 16 {
                                                debug __err => _37;
                                            }
                                            scope 17 {
                                                debug __val => _45;
                                            }
                                            scope 18 {
                                                debug __err => _46;
                                            }
                                            scope 19 {
                                                debug __val => _54;
                                            }
                                            scope 20 {
                                                debug __err => _55;
                                            }
                                            scope 21 {
                                                debug __val => _63;
                                            }
                                            scope 22 {
                                                debug __err => _64;
                                            }
                                            scope 23 {
                                                debug __val => _72;
                                            }
                                            scope 24 {
                                                debug __err => _73;
                                            }
                                            scope 25 {
                                                debug __val => _81;
                                            }
                                            scope 26 {
                                                debug __err => _82;
                                            }
                                            scope 27 {
                                                debug __val => _90;
                                            }
                                            scope 28 {
                                                debug __err => _91;
                                            }
                                            scope 29 {
                                                debug __val => _99;
                                            }
                                            scope 30 {
                                                debug __err => _100;
                                            }
                                            scope 31 {
                                            }
                                            scope 32 {
                                                debug __val => const IgnoredAny;
                                            }
                                            scope 33 {
                                                debug __err => _104;
                                            }
                                        }
                                        scope 34 {
                                            debug __field0 => _105;
                                            let _112: select::SelectColumns;
                                            let _114: select::SelectColumns;
                                            let _117: select::SelectColumns;
                                            let _118: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 38 {
                                                debug __field1 => _112;
                                                let _119: usize;
                                                let _121: usize;
                                                let _124: usize;
                                                let _125: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 42 {
                                                    debug __field2 => _119;
                                                    let _126: bool;
                                                    let _128: bool;
                                                    let _131: bool;
                                                    let _132: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 46 {
                                                        debug __field3 => _126;
                                                        let _133: bool;
                                                        let _135: bool;
                                                        let _138: bool;
                                                        let _139: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 50 {
                                                            debug __field4 => _133;
                                                            let _140: usize;
                                                            let _142: usize;
                                                            let _145: usize;
                                                            let _146: <__A as serde::de::MapAccess<'_>>::Error;
                                                            scope 54 {
                                                                debug __field5 => _140;
                                                                let _147: std::option::Option<std::string::String>;
                                                                let _149: std::option::Option<std::string::String>;
                                                                let _152: std::option::Option<std::string::String>;
                                                                let _153: <__A as serde::de::MapAccess<'_>>::Error;
                                                                scope 58 {
                                                                    debug __field6 => _147;
                                                                    let _154: bool;
                                                                    let _156: bool;
                                                                    let _159: bool;
                                                                    let _160: <__A as serde::de::MapAccess<'_>>::Error;
                                                                    scope 62 {
                                                                        debug __field7 => _154;
                                                                        let _161: std::option::Option<config::Delimiter>;
                                                                        let _163: std::option::Option<config::Delimiter>;
                                                                        let _166: std::option::Option<config::Delimiter>;
                                                                        let _167: <__A as serde::de::MapAccess<'_>>::Error;
                                                                        scope 66 {
                                                                            debug __field8 => _161;
                                                                        }
                                                                        scope 67 {
                                                                            debug __field8 => _163;
                                                                        }
                                                                        scope 68 {
                                                                            debug __val => _166;
                                                                        }
                                                                        scope 69 {
                                                                            debug __err => _167;
                                                                        }
                                                                    }
                                                                    scope 63 {
                                                                        debug __field7 => _156;
                                                                    }
                                                                    scope 64 {
                                                                        debug __val => _159;
                                                                    }
                                                                    scope 65 {
                                                                        debug __err => _160;
                                                                    }
                                                                }
                                                                scope 59 {
                                                                    debug __field6 => _149;
                                                                }
                                                                scope 60 {
                                                                    debug __val => _152;
                                                                }
                                                                scope 61 {
                                                                    debug __err => _153;
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug __field5 => _142;
                                                            }
                                                            scope 56 {
                                                                debug __val => _145;
                                                            }
                                                            scope 57 {
                                                                debug __err => _146;
                                                            }
                                                        }
                                                        scope 51 {
                                                            debug __field4 => _135;
                                                        }
                                                        scope 52 {
                                                            debug __val => _138;
                                                        }
                                                        scope 53 {
                                                            debug __err => _139;
                                                        }
                                                    }
                                                    scope 47 {
                                                        debug __field3 => _128;
                                                    }
                                                    scope 48 {
                                                        debug __val => _131;
                                                    }
                                                    scope 49 {
                                                        debug __err => _132;
                                                    }
                                                }
                                                scope 43 {
                                                    debug __field2 => _121;
                                                }
                                                scope 44 {
                                                    debug __val => _124;
                                                }
                                                scope 45 {
                                                    debug __err => _125;
                                                }
                                            }
                                            scope 39 {
                                                debug __field1 => _114;
                                            }
                                            scope 40 {
                                                debug __val => _117;
                                            }
                                            scope 41 {
                                                debug __err => _118;
                                            }
                                        }
                                        scope 35 {
                                            debug __field0 => _107;
                                        }
                                        scope 36 {
                                            debug __val => _110;
                                        }
                                        scope 37 {
                                            debug __err => _111;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _180 = const false;
        _179 = const false;
        _178 = const false;
        _180 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _179 = const true;
        _4 = std::option::Option::<SelectColumns>::None;
        _5 = std::option::Option::<usize>::None;
        _6 = std::option::Option::<bool>::None;
        _7 = std::option::Option::<bool>::None;
        _8 = std::option::Option::<usize>::None;
        _178 = const true;
        _9 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _10 = std::option::Option::<bool>::None;
        _11 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _13 = &mut _2;
        _12 = <__A as MapAccess<'_>>::next_key::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field>(_13) -> [return: bb2, unwind: bb166];
    }

    bb2: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _16 = move ((_12 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _16);
        goto -> bb146;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _15 = move ((_12 as Ok).0: std::option::Option<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _106 = discriminant(_3);
        switchInt(move _106) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb7: {
        _18 = move ((_15 as Some).0: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field);
        _19 = discriminant(_18);
        switchInt(move _19) -> [0: bb9, 1: bb19, 2: bb29, 3: bb37, 4: bb45, 5: bb53, 6: bb61, 7: bb71, 8: bb79, otherwise: bb8];
    }

    bb8: {
        _102 = &mut _2;
        _101 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_102) -> [return: bb87, unwind: bb166];
    }

    bb9: {
        _21 = &_3;
        _20 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_21) -> [return: bb10, unwind: bb166];
    }

    bb10: {
        switchInt(move _20) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _22 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb166];
    }

    bb12: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb146;
    }

    bb13: {
        _25 = &mut _2;
        _24 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_25) -> [return: bb14, unwind: bb166];
    }

    bb14: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _28 = move ((_24 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _28);
        goto -> bb146;
    }

    bb16: {
        _27 = move ((_24 as Ok).0: std::option::Option<std::string::String>);
        _23 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _27);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _180 = const true;
        _3 = move _23;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _180 = const true;
        _3 = move _23;
        goto -> bb166;
    }

    bb19: {
        _30 = &_4;
        _29 = std::option::Option::<SelectColumns>::is_some(_30) -> [return: bb20, unwind: bb166];
    }

    bb20: {
        switchInt(move _29) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _31 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_select") -> [return: bb22, unwind: bb166];
    }

    bb22: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb146;
    }

    bb23: {
        _34 = &mut _2;
        _33 = <__A as MapAccess<'_>>::next_value::<SelectColumns>(_34) -> [return: bb24, unwind: bb166];
    }

    bb24: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _37 = move ((_33 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _37);
        goto -> bb146;
    }

    bb26: {
        _36 = move ((_33 as Ok).0: select::SelectColumns);
        _32 = std::option::Option::<SelectColumns>::Some(move _36);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _179 = const true;
        _4 = move _32;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _179 = const true;
        _4 = move _32;
        goto -> bb166;
    }

    bb29: {
        _39 = &_5;
        _38 = std::option::Option::<usize>::is_some(_39) -> [return: bb30, unwind: bb166];
    }

    bb30: {
        switchInt(move _38) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _40 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_limit") -> [return: bb32, unwind: bb166];
    }

    bb32: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _40);
        goto -> bb146;
    }

    bb33: {
        _43 = &mut _2;
        _42 = <__A as MapAccess<'_>>::next_value::<usize>(_43) -> [return: bb34, unwind: bb166];
    }

    bb34: {
        _44 = discriminant(_42);
        switchInt(move _44) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _46 = move ((_42 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _46);
        goto -> bb146;
    }

    bb36: {
        _45 = ((_42 as Ok).0: usize);
        _41 = std::option::Option::<usize>::Some(_45);
        _5 = move _41;
        goto -> bb1;
    }

    bb37: {
        _48 = &_6;
        _47 = std::option::Option::<bool>::is_some(_48) -> [return: bb38, unwind: bb166];
    }

    bb38: {
        switchInt(move _47) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _49 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_asc") -> [return: bb40, unwind: bb166];
    }

    bb40: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _49);
        goto -> bb146;
    }

    bb41: {
        _52 = &mut _2;
        _51 = <__A as MapAccess<'_>>::next_value::<bool>(_52) -> [return: bb42, unwind: bb166];
    }

    bb42: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        _55 = move ((_51 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _55);
        goto -> bb146;
    }

    bb44: {
        _54 = ((_51 as Ok).0: bool);
        _50 = std::option::Option::<bool>::Some(_54);
        _6 = move _50;
        goto -> bb1;
    }

    bb45: {
        _57 = &_7;
        _56 = std::option::Option::<bool>::is_some(_57) -> [return: bb46, unwind: bb166];
    }

    bb46: {
        switchInt(move _56) -> [0: bb49, otherwise: bb47];
    }

    bb47: {
        _58 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_nulls") -> [return: bb48, unwind: bb166];
    }

    bb48: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _58);
        goto -> bb146;
    }

    bb49: {
        _61 = &mut _2;
        _60 = <__A as MapAccess<'_>>::next_value::<bool>(_61) -> [return: bb50, unwind: bb166];
    }

    bb50: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb52, 1: bb51, otherwise: bb4];
    }

    bb51: {
        _64 = move ((_60 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _64);
        goto -> bb146;
    }

    bb52: {
        _63 = ((_60 as Ok).0: bool);
        _59 = std::option::Option::<bool>::Some(_63);
        _7 = move _59;
        goto -> bb1;
    }

    bb53: {
        _66 = &_8;
        _65 = std::option::Option::<usize>::is_some(_66) -> [return: bb54, unwind: bb166];
    }

    bb54: {
        switchInt(move _65) -> [0: bb57, otherwise: bb55];
    }

    bb55: {
        _67 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_jobs") -> [return: bb56, unwind: bb166];
    }

    bb56: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _67);
        goto -> bb146;
    }

    bb57: {
        _70 = &mut _2;
        _69 = <__A as MapAccess<'_>>::next_value::<usize>(_70) -> [return: bb58, unwind: bb166];
    }

    bb58: {
        _71 = discriminant(_69);
        switchInt(move _71) -> [0: bb60, 1: bb59, otherwise: bb4];
    }

    bb59: {
        _73 = move ((_69 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _73);
        goto -> bb146;
    }

    bb60: {
        _72 = ((_69 as Ok).0: usize);
        _68 = std::option::Option::<usize>::Some(_72);
        _8 = move _68;
        goto -> bb1;
    }

    bb61: {
        _75 = &_9;
        _74 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_75) -> [return: bb62, unwind: bb166];
    }

    bb62: {
        switchInt(move _74) -> [0: bb65, otherwise: bb63];
    }

    bb63: {
        _76 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb64, unwind: bb166];
    }

    bb64: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _76);
        goto -> bb146;
    }

    bb65: {
        _79 = &mut _2;
        _78 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_79) -> [return: bb66, unwind: bb166];
    }

    bb66: {
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb68, 1: bb67, otherwise: bb4];
    }

    bb67: {
        _82 = move ((_78 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _82);
        goto -> bb146;
    }

    bb68: {
        _81 = move ((_78 as Ok).0: std::option::Option<std::string::String>);
        _77 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _81);
        drop(_9) -> [return: bb69, unwind: bb70];
    }

    bb69: {
        _178 = const true;
        _9 = move _77;
        goto -> bb1;
    }

    bb70 (cleanup): {
        _178 = const true;
        _9 = move _77;
        goto -> bb166;
    }

    bb71: {
        _84 = &_10;
        _83 = std::option::Option::<bool>::is_some(_84) -> [return: bb72, unwind: bb166];
    }

    bb72: {
        switchInt(move _83) -> [0: bb75, otherwise: bb73];
    }

    bb73: {
        _85 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb74, unwind: bb166];
    }

    bb74: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _85);
        goto -> bb146;
    }

    bb75: {
        _88 = &mut _2;
        _87 = <__A as MapAccess<'_>>::next_value::<bool>(_88) -> [return: bb76, unwind: bb166];
    }

    bb76: {
        _89 = discriminant(_87);
        switchInt(move _89) -> [0: bb78, 1: bb77, otherwise: bb4];
    }

    bb77: {
        _91 = move ((_87 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _91);
        goto -> bb146;
    }

    bb78: {
        _90 = ((_87 as Ok).0: bool);
        _86 = std::option::Option::<bool>::Some(_90);
        _10 = move _86;
        goto -> bb1;
    }

    bb79: {
        _93 = &_11;
        _92 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_93) -> [return: bb80, unwind: bb166];
    }

    bb80: {
        switchInt(move _92) -> [0: bb83, otherwise: bb81];
    }

    bb81: {
        _94 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb82, unwind: bb166];
    }

    bb82: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _94);
        goto -> bb146;
    }

    bb83: {
        _97 = &mut _2;
        _96 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_97) -> [return: bb84, unwind: bb166];
    }

    bb84: {
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb86, 1: bb85, otherwise: bb4];
    }

    bb85: {
        _100 = move ((_96 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _100);
        goto -> bb146;
    }

    bb86: {
        _99 = ((_96 as Ok).0: std::option::Option<config::Delimiter>);
        _95 = std::option::Option::<std::option::Option<Delimiter>>::Some(_99);
        _11 = move _95;
        goto -> bb1;
    }

    bb87: {
        _103 = discriminant(_101);
        switchInt(move _103) -> [0: bb1, 1: bb88, otherwise: bb4];
    }

    bb88: {
        _104 = move ((_101 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _104);
        goto -> bb146;
    }

    bb89: {
        _108 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb91, unwind: bb166];
    }

    bb90: {
        _180 = const false;
        _107 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _105 = move _107;
        goto -> bb94;
    }

    bb91: {
        _109 = discriminant(_108);
        switchInt(move _109) -> [0: bb93, 1: bb92, otherwise: bb4];
    }

    bb92: {
        _111 = move ((_108 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _111);
        goto -> bb146;
    }

    bb93: {
        _110 = move ((_108 as Ok).0: std::option::Option<std::string::String>);
        _105 = move _110;
        goto -> bb94;
    }

    bb94: {
        _113 = discriminant(_4);
        switchInt(move _113) -> [0: bb95, 1: bb96, otherwise: bb4];
    }

    bb95: {
        _115 = serde::private::de::missing_field::<'_, SelectColumns, <__A as MapAccess<'_>>::Error>(const "flag_select") -> [return: bb97, unwind: bb150];
    }

    bb96: {
        _179 = const false;
        _114 = move ((_4 as Some).0: select::SelectColumns);
        _112 = move _114;
        goto -> bb100;
    }

    bb97: {
        _116 = discriminant(_115);
        switchInt(move _116) -> [0: bb99, 1: bb98, otherwise: bb4];
    }

    bb98: {
        _118 = move ((_115 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _118);
        goto -> bb145;
    }

    bb99: {
        _117 = move ((_115 as Ok).0: select::SelectColumns);
        _112 = move _117;
        goto -> bb100;
    }

    bb100: {
        _120 = discriminant(_5);
        switchInt(move _120) -> [0: bb101, 1: bb102, otherwise: bb4];
    }

    bb101: {
        _122 = serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "flag_limit") -> [return: bb103, unwind: bb149];
    }

    bb102: {
        _121 = ((_5 as Some).0: usize);
        _119 = _121;
        goto -> bb106;
    }

    bb103: {
        _123 = discriminant(_122);
        switchInt(move _123) -> [0: bb105, 1: bb104, otherwise: bb4];
    }

    bb104: {
        _125 = move ((_122 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _125);
        goto -> bb144;
    }

    bb105: {
        _124 = ((_122 as Ok).0: usize);
        _119 = _124;
        goto -> bb106;
    }

    bb106: {
        _127 = discriminant(_6);
        switchInt(move _127) -> [0: bb107, 1: bb108, otherwise: bb4];
    }

    bb107: {
        _129 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_asc") -> [return: bb109, unwind: bb149];
    }

    bb108: {
        _128 = ((_6 as Some).0: bool);
        _126 = _128;
        goto -> bb112;
    }

    bb109: {
        _130 = discriminant(_129);
        switchInt(move _130) -> [0: bb111, 1: bb110, otherwise: bb4];
    }

    bb110: {
        _132 = move ((_129 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _132);
        goto -> bb144;
    }

    bb111: {
        _131 = ((_129 as Ok).0: bool);
        _126 = _131;
        goto -> bb112;
    }

    bb112: {
        _134 = discriminant(_7);
        switchInt(move _134) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        _136 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_nulls") -> [return: bb115, unwind: bb149];
    }

    bb114: {
        _135 = ((_7 as Some).0: bool);
        _133 = _135;
        goto -> bb118;
    }

    bb115: {
        _137 = discriminant(_136);
        switchInt(move _137) -> [0: bb117, 1: bb116, otherwise: bb4];
    }

    bb116: {
        _139 = move ((_136 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _139);
        goto -> bb144;
    }

    bb117: {
        _138 = ((_136 as Ok).0: bool);
        _133 = _138;
        goto -> bb118;
    }

    bb118: {
        _141 = discriminant(_8);
        switchInt(move _141) -> [0: bb119, 1: bb120, otherwise: bb4];
    }

    bb119: {
        _143 = serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "flag_jobs") -> [return: bb121, unwind: bb149];
    }

    bb120: {
        _142 = ((_8 as Some).0: usize);
        _140 = _142;
        goto -> bb124;
    }

    bb121: {
        _144 = discriminant(_143);
        switchInt(move _144) -> [0: bb123, 1: bb122, otherwise: bb4];
    }

    bb122: {
        _146 = move ((_143 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _146);
        goto -> bb144;
    }

    bb123: {
        _145 = ((_143 as Ok).0: usize);
        _140 = _145;
        goto -> bb124;
    }

    bb124: {
        _148 = discriminant(_9);
        switchInt(move _148) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb125: {
        _150 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb127, unwind: bb149];
    }

    bb126: {
        _178 = const false;
        _149 = move ((_9 as Some).0: std::option::Option<std::string::String>);
        _147 = move _149;
        goto -> bb130;
    }

    bb127: {
        _151 = discriminant(_150);
        switchInt(move _151) -> [0: bb129, 1: bb128, otherwise: bb4];
    }

    bb128: {
        _153 = move ((_150 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _153);
        goto -> bb144;
    }

    bb129: {
        _152 = move ((_150 as Ok).0: std::option::Option<std::string::String>);
        _147 = move _152;
        goto -> bb130;
    }

    bb130: {
        _155 = discriminant(_10);
        switchInt(move _155) -> [0: bb131, 1: bb132, otherwise: bb4];
    }

    bb131: {
        _157 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb133, unwind: bb148];
    }

    bb132: {
        _156 = ((_10 as Some).0: bool);
        _154 = _156;
        goto -> bb136;
    }

    bb133: {
        _158 = discriminant(_157);
        switchInt(move _158) -> [0: bb135, 1: bb134, otherwise: bb4];
    }

    bb134: {
        _160 = move ((_157 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _160);
        goto -> bb143;
    }

    bb135: {
        _159 = ((_157 as Ok).0: bool);
        _154 = _159;
        goto -> bb136;
    }

    bb136: {
        _162 = discriminant(_11);
        switchInt(move _162) -> [0: bb137, 1: bb138, otherwise: bb4];
    }

    bb137: {
        _164 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb139, unwind: bb148];
    }

    bb138: {
        _163 = ((_11 as Some).0: std::option::Option<config::Delimiter>);
        _161 = _163;
        goto -> bb142;
    }

    bb139: {
        _165 = discriminant(_164);
        switchInt(move _165) -> [0: bb141, 1: bb140, otherwise: bb4];
    }

    bb140: {
        _167 = move ((_164 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _167);
        goto -> bb143;
    }

    bb141: {
        _166 = ((_164 as Ok).0: std::option::Option<config::Delimiter>);
        _161 = _166;
        goto -> bb142;
    }

    bb142: {
        _169 = move _105;
        _170 = move _112;
        _171 = _119;
        _172 = _126;
        _173 = _133;
        _174 = _140;
        _175 = move _147;
        _176 = _154;
        _177 = _161;
        _168 = frequency::Args { arg_input: move _169, flag_select: move _170, flag_limit: move _171, flag_asc: move _172, flag_no_nulls: move _173, flag_jobs: move _174, flag_output: move _175, flag_no_headers: move _176, flag_delimiter: move _177 };
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Ok(move _168);
        _178 = const false;
        _179 = const false;
        _180 = const false;
        drop(_2) -> [return: bb147, unwind continue];
    }

    bb143: {
        drop(_147) -> [return: bb144, unwind: bb149];
    }

    bb144: {
        drop(_112) -> [return: bb145, unwind: bb150];
    }

    bb145: {
        drop(_105) -> [return: bb146, unwind: bb166];
    }

    bb146: {
        _181 = discriminant(_9);
        switchInt(move _181) -> [1: bb156, otherwise: bb155];
    }

    bb147: {
        return;
    }

    bb148 (cleanup): {
        drop(_147) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_112) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_105) -> [return: bb166, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        _185 = discriminant(_4);
        switchInt(move _185) -> [1: bb167, otherwise: bb152];
    }

    bb152 (cleanup): {
        _186 = discriminant(_3);
        switchInt(move _186) -> [1: bb169, otherwise: bb153];
    }

    bb153 (cleanup): {
        drop(_2) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        resume;
    }

    bb155: {
        _178 = const false;
        _182 = discriminant(_4);
        switchInt(move _182) -> [1: bb159, otherwise: bb158];
    }

    bb156: {
        switchInt(_178) -> [0: bb155, otherwise: bb157];
    }

    bb157: {
        drop(((_9 as Some).0: std::option::Option<std::string::String>)) -> [return: bb155, unwind: bb151];
    }

    bb158: {
        _179 = const false;
        _183 = discriminant(_3);
        switchInt(move _183) -> [1: bb162, otherwise: bb161];
    }

    bb159: {
        switchInt(_179) -> [0: bb158, otherwise: bb160];
    }

    bb160: {
        drop(((_4 as Some).0: select::SelectColumns)) -> [return: bb158, unwind: bb152];
    }

    bb161: {
        _180 = const false;
        drop(_2) -> [return: bb147, unwind continue];
    }

    bb162: {
        switchInt(_180) -> [0: bb161, otherwise: bb163];
    }

    bb163: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb161, unwind: bb153];
    }

    bb164 (cleanup): {
        switchInt(_178) -> [0: bb151, otherwise: bb165];
    }

    bb165 (cleanup): {
        drop(((_9 as Some).0: std::option::Option<std::string::String>)) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        _184 = discriminant(_9);
        switchInt(move _184) -> [1: bb164, otherwise: bb151];
    }

    bb167 (cleanup): {
        switchInt(_179) -> [0: bb152, otherwise: bb168];
    }

    bb168 (cleanup): {
        drop(((_4 as Some).0: select::SelectColumns)) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        switchInt(_180) -> [0: bb153, otherwise: bb170];
    }

    bb170 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb153, unwind terminate(cleanup)];
    }
}

const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 9];
    let _2: &[&str; 9];
    let _3: [&str; 9];
    let mut _4: &[&str; 9];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::FIELDS: &[&str; 9] = {
    let mut _0: &[&str; 9];
    let mut _1: [&str; 9];

    bb0: {
        _1 = [const "arg_input", const "flag_select", const "flag_limit", const "flag_asc", const "flag_no_nulls", const "flag_jobs", const "flag_output", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn frequency::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::frequency::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::frequency::Args>;
    let mut _4: std::result::Result<cmd::frequency::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::frequency::Args;
    let mut _10: &cmd::frequency::Args;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _13: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _14: &config::Config;
    let _15: config::Config;
    let _16: &std::option::Option<std::string::String>;
    let mut _17: isize;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>)>;
    let mut _23: std::result::Result<(csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>), CliError>;
    let mut _24: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::option::Option<index::Indexed<std::fs::File, std::fs::File>>>;
    let mut _26: std::result::Result<std::option::Option<index::Indexed<std::fs::File, std::fs::File>>, CliError>;
    let mut _27: &config::Config;
    let _28: config::Config;
    let mut _29: &cmd::frequency::Args;
    let mut _30: isize;
    let mut _33: isize;
    let mut _36: bool;
    let mut _37: usize;
    let mut _38: &cmd::frequency::Args;
    let mut _39: &cmd::frequency::Args;
    let mut _40: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _41: &cmd::frequency::Args;
    let mut _42: isize;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _46: std::result::Result<(), csv::Error>;
    let mut _47: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _48: std::vec::Vec<&str>;
    let mut _49: std::boxed::Box<[&str]>;
    let mut _50: usize;
    let mut _51: usize;
    let mut _52: *mut u8;
    let mut _53: std::boxed::Box<[&str; 3]>;
    let _54: &str;
    let _55: &str;
    let mut _56: isize;
    let mut _59: csv::ByteRecordIter<'_>;
    let mut _60: &csv::ByteRecord;
    let mut _61: std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _62: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _63: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>>>;
    let mut _64: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>>>;
    let mut _66: std::option::Option<(usize, (&[u8], stats::Frequencies<std::vec::Vec<u8>>))>;
    let mut _67: &mut std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>>>;
    let mut _68: isize;
    let mut _73: bool;
    let mut _74: std::vec::Vec<u8>;
    let mut _75: std::string::String;
    let mut _76: &usize;
    let _77: usize;
    let mut _78: (usize, bool);
    let mut _79: std::vec::IntoIter<(std::vec::Vec<u8>, u64)>;
    let mut _80: std::vec::IntoIter<(std::vec::Vec<u8>, u64)>;
    let mut _81: std::vec::Vec<(std::vec::Vec<u8>, u64)>;
    let mut _82: &cmd::frequency::Args;
    let _83: &stats::Frequencies<std::vec::Vec<u8>>;
    let mut _85: std::option::Option<(std::vec::Vec<u8>, u64)>;
    let mut _86: &mut std::vec::IntoIter<(std::vec::Vec<u8>, u64)>;
    let mut _87: isize;
    let mut _91: &u64;
    let mut _93: std::boxed::Box<[&[u8]]>;
    let mut _94: std::boxed::Box<[&[u8]; 3]>;
    let mut _95: usize;
    let mut _96: usize;
    let mut _97: *mut u8;
    let mut _98: std::boxed::Box<[&[u8]; 3]>;
    let _99: &[u8];
    let mut _100: &std::vec::Vec<u8>;
    let _101: &[u8];
    let mut _102: &std::vec::Vec<u8>;
    let _103: &[u8];
    let mut _104: &std::string::String;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _106: std::result::Result<(), csv::Error>;
    let mut _107: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _108: isize;
    let mut _110: &str;
    let mut _111: bool;
    let mut _112: *const [&str; 3];
    let mut _113: *const [&[u8]; 3];
    scope 1 {
        debug args => _2;
        let _9: config::Config;
        scope 6 {
            debug rconfig => _9;
            let mut _11: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
            let _18: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _19: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
            scope 7 {
                debug wtr => _11;
                let _20: csv::ByteRecord;
                let _21: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
                let _31: std::result::Result<std::convert::Infallible, CliError>;
                let _32: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
                let _34: &mut index::Indexed<std::fs::File, std::fs::File>;
                let _35: &&mut index::Indexed<std::fs::File, std::fs::File>;
                let _43: std::result::Result<std::convert::Infallible, CliError>;
                let _44: (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
                scope 12 {
                    debug headers => _20;
                    debug tables => _21;
                    let _57: std::result::Result<std::convert::Infallible, csv::Error>;
                    let _58: std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>>;
                    let mut _120: *const ();
                    let mut _121: usize;
                    let mut _122: usize;
                    let mut _123: usize;
                    let mut _124: usize;
                    let mut _125: bool;
                    scope 22 {
                    }
                    scope 23 {
                        debug residual => _57;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug val => const ();
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug head_ftables => _58;
                        let mut _65: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>>>;
                        scope 28 {
                            debug iter => _65;
                            let _69: usize;
                            let _70: &[u8];
                            let _71: stats::Frequencies<std::vec::Vec<u8>>;
                            scope 29 {
                                debug i => _69;
                                debug header => _70;
                                debug ftab => _71;
                                let mut _72: std::vec::Vec<u8>;
                                scope 30 {
                                    debug header => _72;
                                    let mut _84: std::vec::IntoIter<(std::vec::Vec<u8>, u64)>;
                                    scope 31 {
                                        debug iter => _84;
                                        let _88: std::vec::Vec<u8>;
                                        let _89: u64;
                                        scope 32 {
                                            debug value => _88;
                                            debug count => _89;
                                            let _90: std::string::String;
                                            scope 33 {
                                                debug count => _90;
                                                let _92: std::vec::Vec<&[u8]>;
                                                let mut _114: *const ();
                                                let mut _115: usize;
                                                let mut _116: usize;
                                                let mut _117: usize;
                                                let mut _118: usize;
                                                let mut _119: bool;
                                                scope 34 {
                                                    debug row => _92;
                                                    let _109: std::result::Result<std::convert::Infallible, csv::Error>;
                                                    scope 36 {
                                                        debug residual => _109;
                                                        scope 37 {
                                                        }
                                                    }
                                                    scope 38 {
                                                        debug val => const ();
                                                        scope 39 {
                                                        }
                                                    }
                                                }
                                                scope 35 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _31;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _32;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug idx => _34;
                    debug idx => _35;
                }
                scope 18 {
                    debug residual => _43;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug val => _44;
                    scope 21 {
                    }
                }
            }
            scope 8 {
                debug residual => _18;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _19;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _111 = const false;
        _5 = const {alloc10: &&str};
        _110 = deref_copy (*_5);
        _4 = get_args::<frequency::Args>(_110, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<frequency::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::frequency::Args);
        _2 = move _8;
        _10 = &_2;
        _9 = frequency::Args::rconfig(move _10) -> [return: bb6, unwind: bb100];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb86, unwind continue];
    }

    bb6: {
        _16 = &(_2.6: std::option::Option<std::string::String>);
        _15 = Config::new(_16) -> [return: bb7, unwind: bb99];
    }

    bb7: {
        _14 = &_15;
        _13 = Config::writer(move _14) -> [return: bb8, unwind: bb98];
    }

    bb8: {
        _12 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _13) -> [return: bb9, unwind: bb98];
    }

    bb9: {
        _17 = discriminant(_12);
        switchInt(move _17) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        _19 = move ((_12 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _11 = move _19;
        drop(_15) -> [return: bb13, unwind: bb97];
    }

    bb11: {
        _18 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _18) -> [return: bb12, unwind: bb98];
    }

    bb12: {
        drop(_15) -> [return: bb84, unwind: bb99];
    }

    bb13: {
        _29 = &_2;
        _28 = frequency::Args::rconfig(move _29) -> [return: bb14, unwind: bb97];
    }

    bb14: {
        _27 = &_28;
        _26 = Config::indexed(move _27) -> [return: bb15, unwind: bb96];
    }

    bb15: {
        _25 = <Result<std::option::Option<Indexed<File, File>>, CliError> as Try>::branch(move _26) -> [return: bb16, unwind: bb96];
    }

    bb16: {
        _30 = discriminant(_25);
        switchInt(move _30) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        _32 = move ((_25 as Continue).0: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>);
        _24 = move _32;
        _33 = discriminant(_24);
        switchInt(move _33) -> [1: bb20, otherwise: bb19];
    }

    bb18: {
        _31 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _31) -> [return: bb111, unwind: bb96];
    }

    bb19: {
        _41 = &_2;
        _23 = frequency::Args::sequential_ftables(move _41) -> [return: bb112, unwind: bb95];
    }

    bb20: {
        _34 = &mut ((_24 as Some).0: index::Indexed<std::fs::File, std::fs::File>);
        _35 = &_34;
        _38 = &_2;
        _37 = frequency::Args::njobs(move _38) -> [return: bb21, unwind: bb95];
    }

    bb21: {
        _36 = Gt(move _37, const 1_usize);
        switchInt(move _36) -> [0: bb19, otherwise: bb22];
    }

    bb22: {
        _39 = &_2;
        _40 = _34;
        _23 = frequency::Args::parallel_ftables(move _39, move _40) -> [return: bb113, unwind: bb95];
    }

    bb23: {
        _22 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as Try>::branch(move _23) -> [return: bb24, unwind: bb95];
    }

    bb24: {
        _42 = discriminant(_22);
        switchInt(move _42) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        _44 = move ((_22 as Continue).0: (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>));
        _20 = move (_44.0: csv::ByteRecord);
        _111 = const true;
        _21 = move (_44.1: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
        drop(_24) -> [return: bb102, unwind: bb106];
    }

    bb26: {
        _43 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _43) -> [return: bb27, unwind: bb95];
    }

    bb27: {
        drop(_24) -> [return: bb105, unwind: bb96];
    }

    bb28: {
        _47 = &mut _11;
        _50 = SizeOf([&str; 3]);
        _51 = AlignOf([&str; 3]);
        _52 = alloc::alloc::exchange_malloc(move _50, move _51) -> [return: bb29, unwind: bb108];
    }

    bb29: {
        _53 = ShallowInitBox(move _52, [&str; 3]);
        _54 = const "value";
        _55 = const "count";
        _112 = (((_53.0: std::ptr::Unique<[&str; 3]>).0: std::ptr::NonNull<[&str; 3]>).0: *const [&str; 3]);
        _120 = _112 as *const () (PtrToPtr);
        _121 = _120 as usize (Transmute);
        _122 = AlignOf([&str; 3]);
        _123 = Sub(_122, const 1_usize);
        _124 = BitAnd(_121, _123);
        _125 = Eq(_124, const 0_usize);
        assert(_125, "misaligned pointer dereference: address must be a multiple of {} but is {}", _122, _121) -> [success: bb110, unwind unreachable];
    }

    bb30: {
        _46 = Writer::<Box<dyn std::io::Write>>::write_record::<Vec<&str>, &str>(move _47, move _48) -> [return: bb31, unwind: bb108];
    }

    bb31: {
        _45 = <Result<(), csv::Error> as Try>::branch(move _46) -> [return: bb32, unwind: bb108];
    }

    bb32: {
        _56 = discriminant(_45);
        switchInt(move _56) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        _60 = &_20;
        _59 = <&ByteRecord as IntoIterator>::into_iter(move _60) -> [return: bb35, unwind: bb108];
    }

    bb34: {
        _57 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _57) -> [return: bb114, unwind: bb108];
    }

    bb35: {
        _111 = const false;
        _62 = move _21;
        _61 = <Vec<Frequencies<Vec<u8>>> as IntoIterator>::into_iter(move _62) -> [return: bb36, unwind: bb108];
    }

    bb36: {
        _58 = <ByteRecordIter<'_> as Iterator>::zip::<std::vec::IntoIter<Frequencies<Vec<u8>>>>(move _59, move _61) -> [return: bb37, unwind: bb108];
    }

    bb37: {
        _64 = <Zip<ByteRecordIter<'_>, std::vec::IntoIter<Frequencies<Vec<u8>>>> as Iterator>::enumerate(move _58) -> [return: bb38, unwind: bb108];
    }

    bb38: {
        _63 = <Enumerate<Zip<ByteRecordIter<'_>, std::vec::IntoIter<Frequencies<Vec<u8>>>>> as IntoIterator>::into_iter(move _64) -> [return: bb39, unwind: bb108];
    }

    bb39: {
        _65 = move _63;
        goto -> bb40;
    }

    bb40: {
        _67 = &mut _65;
        _66 = <Enumerate<Zip<ByteRecordIter<'_>, std::vec::IntoIter<Frequencies<Vec<u8>>>>> as Iterator>::next(_67) -> [return: bb41, unwind: bb93];
    }

    bb41: {
        _68 = discriminant(_66);
        switchInt(move _68) -> [0: bb43, 1: bb42, otherwise: bb4];
    }

    bb42: {
        _70 = ((((_66 as Some).0: (usize, (&[u8], stats::Frequencies<std::vec::Vec<u8>>))).1: (&[u8], stats::Frequencies<std::vec::Vec<u8>>)).0: &[u8]);
        _71 = move ((((_66 as Some).0: (usize, (&[u8], stats::Frequencies<std::vec::Vec<u8>>))).1: (&[u8], stats::Frequencies<std::vec::Vec<u8>>)).1: stats::Frequencies<std::vec::Vec<u8>>);
        _69 = (((_66 as Some).0: (usize, (&[u8], stats::Frequencies<std::vec::Vec<u8>>))).0: usize);
        _72 = std::slice::<impl [u8]>::to_vec(_70) -> [return: bb44, unwind: bb92];
    }

    bb43: {
        drop(_65) -> [return: bb73, unwind: bb108];
    }

    bb44: {
        _73 = (_9.4: bool);
        switchInt(move _73) -> [0: bb51, otherwise: bb45];
    }

    bb45: {
        _78 = CheckedAdd(_69, const 1_usize);
        assert(!move (_78.1: bool), "attempt to compute `{} + {}`, which would overflow", _69, const 1_usize) -> [success: bb46, unwind: bb91];
    }

    bb46: {
        _77 = move (_78.0: usize);
        _76 = &_77;
        _75 = <usize as ToString>::to_string(move _76) -> [return: bb47, unwind: bb91];
    }

    bb47: {
        _74 = std::string::String::into_bytes(move _75) -> [return: bb48, unwind: bb91];
    }

    bb48: {
        drop(_72) -> [return: bb49, unwind: bb50];
    }

    bb49: {
        _72 = move _74;
        goto -> bb51;
    }

    bb50 (cleanup): {
        _72 = move _74;
        goto -> bb91;
    }

    bb51: {
        _82 = &_2;
        _83 = &_71;
        _81 = frequency::Args::counts(move _82, _83) -> [return: bb52, unwind: bb91];
    }

    bb52: {
        _80 = <Vec<(Vec<u8>, u64)> as IntoIterator>::into_iter(move _81) -> [return: bb53, unwind: bb91];
    }

    bb53: {
        _79 = <std::vec::IntoIter<(Vec<u8>, u64)> as IntoIterator>::into_iter(move _80) -> [return: bb54, unwind: bb91];
    }

    bb54: {
        _84 = move _79;
        goto -> bb55;
    }

    bb55: {
        _86 = &mut _84;
        _85 = <std::vec::IntoIter<(Vec<u8>, u64)> as Iterator>::next(_86) -> [return: bb56, unwind: bb90];
    }

    bb56: {
        _87 = discriminant(_85);
        switchInt(move _87) -> [0: bb58, 1: bb57, otherwise: bb4];
    }

    bb57: {
        _88 = move (((_85 as Some).0: (std::vec::Vec<u8>, u64)).0: std::vec::Vec<u8>);
        _89 = (((_85 as Some).0: (std::vec::Vec<u8>, u64)).1: u64);
        _91 = &_89;
        _90 = <u64 as ToString>::to_string(move _91) -> [return: bb59, unwind: bb89];
    }

    bb58: {
        drop(_84) -> [return: bb71, unwind: bb91];
    }

    bb59: {
        _95 = SizeOf([&[u8]; 3]);
        _96 = AlignOf([&[u8]; 3]);
        _97 = alloc::alloc::exchange_malloc(move _95, move _96) -> [return: bb60, unwind: bb88];
    }

    bb60: {
        _98 = ShallowInitBox(move _97, [&[u8]; 3]);
        _100 = &_72;
        _99 = <Vec<u8> as Deref>::deref(move _100) -> [return: bb61, unwind: bb87];
    }

    bb61: {
        _102 = &_88;
        _101 = <Vec<u8> as Deref>::deref(move _102) -> [return: bb62, unwind: bb87];
    }

    bb62: {
        _104 = &_90;
        _103 = std::string::String::as_bytes(move _104) -> [return: bb63, unwind: bb87];
    }

    bb63: {
        _113 = (((_98.0: std::ptr::Unique<[&[u8]; 3]>).0: std::ptr::NonNull<[&[u8]; 3]>).0: *const [&[u8]; 3]);
        _114 = _113 as *const () (PtrToPtr);
        _115 = _114 as usize (Transmute);
        _116 = AlignOf([&[u8]; 3]);
        _117 = Sub(_116, const 1_usize);
        _118 = BitAnd(_115, _117);
        _119 = Eq(_118, const 0_usize);
        assert(_119, "misaligned pointer dereference: address must be a multiple of {} but is {}", _116, _115) -> [success: bb109, unwind unreachable];
    }

    bb64: {
        _107 = &mut _11;
        _106 = Writer::<Box<dyn std::io::Write>>::write_record::<Vec<&[u8]>, &[u8]>(move _107, move _92) -> [return: bb65, unwind: bb88];
    }

    bb65: {
        _105 = <Result<(), csv::Error> as Try>::branch(move _106) -> [return: bb66, unwind: bb88];
    }

    bb66: {
        _108 = discriminant(_105);
        switchInt(move _108) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        drop(_90) -> [return: bb70, unwind: bb89];
    }

    bb68: {
        _109 = move ((_105 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _109) -> [return: bb69, unwind: bb88];
    }

    bb69: {
        drop(_90) -> [return: bb77, unwind: bb89];
    }

    bb70: {
        drop(_88) -> [return: bb55, unwind: bb90];
    }

    bb71: {
        drop(_72) -> [return: bb72, unwind: bb92];
    }

    bb72: {
        drop(_71) -> [return: bb40, unwind: bb93];
    }

    bb73: {
        _0 = Result::<(), CliError>::Ok(const ());
        _111 = const false;
        drop(_20) -> [return: bb74, unwind: bb97];
    }

    bb74: {
        drop(_11) -> [return: bb75, unwind: bb99];
    }

    bb75: {
        drop(_9) -> [return: bb76, unwind: bb100];
    }

    bb76: {
        drop(_2) -> [return: bb86, unwind continue];
    }

    bb77: {
        drop(_88) -> [return: bb78, unwind: bb90];
    }

    bb78: {
        drop(_84) -> [return: bb79, unwind: bb91];
    }

    bb79: {
        drop(_72) -> [return: bb80, unwind: bb92];
    }

    bb80: {
        drop(_71) -> [return: bb81, unwind: bb93];
    }

    bb81: {
        drop(_65) -> [return: bb104, unwind: bb108];
    }

    bb82: {
        _111 = const false;
        drop(_20) -> [return: bb83, unwind: bb97];
    }

    bb83: {
        drop(_11) -> [return: bb84, unwind: bb99];
    }

    bb84: {
        drop(_9) -> [return: bb85, unwind: bb100];
    }

    bb85: {
        drop(_2) -> [return: bb86, unwind continue];
    }

    bb86: {
        return;
    }

    bb87 (cleanup): {
        drop(_98) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_90) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_88) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_84) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_72) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_71) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_65) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_20) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_24) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_28) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_11) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_15) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_9) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_2) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        resume;
    }

    bb102: {
        drop(_28) -> [return: bb28, unwind: bb108];
    }

    bb103: {
        drop(_21) -> [return: bb82, unwind: bb94];
    }

    bb104: {
        switchInt(_111) -> [0: bb82, otherwise: bb103];
    }

    bb105: {
        drop(_28) -> [return: bb83, unwind: bb97];
    }

    bb106 (cleanup): {
        drop(_28) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_21) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_111) -> [0: bb94, otherwise: bb107];
    }

    bb109: {
        (*_113) = [_99, _101, _103];
        _94 = move _98;
        _93 = move _94 as std::boxed::Box<[&[u8]]> (PointerCoercion(Unsize));
        _92 = std::slice::<impl [&[u8]]>::into_vec::<std::alloc::Global>(move _93) -> [return: bb64, unwind: bb88];
    }

    bb110: {
        (*_112) = [const "field", _54, _55];
        _49 = move _53 as std::boxed::Box<[&str]> (PointerCoercion(Unsize));
        _48 = std::slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _49) -> [return: bb30, unwind: bb108];
    }

    bb111: {
        goto -> bb105;
    }

    bb112: {
        goto -> bb23;
    }

    bb113: {
        goto -> bb23;
    }

    bb114: {
        goto -> bb104;
    }
}

alloc10 (static: frequency::USAGE, size: 16, align: 8) {
    ╾────alloc544<imm>────╼ 73 08 00 00 00 00 00 00 │ ╾──────╼s.......
}

alloc544 (size: 2163, align: 1) {
    0x000 │ 0a 43 6f 6d 70 75 74 65 20 61 20 66 72 65 71 75 │ .Compute a frequ
    0x010 │ 65 6e 63 79 20 74 61 62 6c 65 20 6f 6e 20 43 53 │ ency table on CS
    0x020 │ 56 20 64 61 74 61 2e 0a 0a 54 68 65 20 66 72 65 │ V data...The fre
    0x030 │ 71 75 65 6e 63 79 20 74 61 62 6c 65 20 69 73 20 │ quency table is 
    0x040 │ 66 6f 72 6d 61 74 74 65 64 20 61 73 20 43 53 56 │ formatted as CSV
    0x050 │ 20 64 61 74 61 3a 0a 0a 20 20 20 20 66 69 65 6c │  data:..    fiel
    0x060 │ 64 2c 76 61 6c 75 65 2c 63 6f 75 6e 74 0a 0a 42 │ d,value,count..B
    0x070 │ 79 20 64 65 66 61 75 6c 74 2c 20 74 68 65 72 65 │ y default, there
    0x080 │ 20 69 73 20 61 20 72 6f 77 20 66 6f 72 20 74 68 │  is a row for th
    0x090 │ 65 20 4e 20 6d 6f 73 74 20 66 72 65 71 75 65 6e │ e N most frequen
    0x0a0 │ 74 20 76 61 6c 75 65 73 20 66 6f 72 20 65 61 63 │ t values for eac
    0x0b0 │ 68 20 66 69 65 6c 64 20 69 6e 20 74 68 65 0a 64 │ h field in the.d
    0x0c0 │ 61 74 61 2e 20 54 68 65 20 6f 72 64 65 72 20 61 │ ata. The order a
    0x0d0 │ 6e 64 20 6e 75 6d 62 65 72 20 6f 66 20 76 61 6c │ nd number of val
    0x0e0 │ 75 65 73 20 63 61 6e 20 62 65 20 74 77 65 61 6b │ ues can be tweak
    0x0f0 │ 65 64 20 77 69 74 68 20 2d 2d 61 73 63 20 61 6e │ ed with --asc an
    0x100 │ 64 20 2d 2d 6c 69 6d 69 74 2c 0a 72 65 73 70 65 │ d --limit,.respe
    0x110 │ 63 74 69 76 65 6c 79 2e 0a 0a 53 69 6e 63 65 20 │ ctively...Since 
    0x120 │ 74 68 69 73 20 63 6f 6d 70 75 74 65 73 20 61 6e │ this computes an
    0x130 │ 20 65 78 61 63 74 20 66 72 65 71 75 65 6e 63 79 │  exact frequency
    0x140 │ 20 74 61 62 6c 65 2c 20 6d 65 6d 6f 72 79 20 70 │  table, memory p
    0x150 │ 72 6f 70 6f 72 74 69 6f 6e 61 6c 20 74 6f 20 74 │ roportional to t
    0x160 │ 68 65 0a 63 61 72 64 69 6e 61 6c 69 74 79 20 6f │ he.cardinality o
    0x170 │ 66 20 65 61 63 68 20 63 6f 6c 75 6d 6e 20 69 73 │ f each column is
    0x180 │ 20 72 65 71 75 69 72 65 64 2e 0a 0a 55 73 61 67 │  required...Usag
    0x190 │ 65 3a 0a 20 20 20 20 78 73 76 20 66 72 65 71 75 │ e:.    xsv frequ
    0x1a0 │ 65 6e 63 79 20 5b 6f 70 74 69 6f 6e 73 5d 20 5b │ ency [options] [
    0x1b0 │ 3c 69 6e 70 75 74 3e 5d 0a 0a 66 72 65 71 75 65 │ <input>]..freque
    0x1c0 │ 6e 63 79 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 │ ncy options:.   
    0x1d0 │ 20 2d 73 2c 20 2d 2d 73 65 6c 65 63 74 20 3c 61 │  -s, --select <a
    0x1e0 │ 72 67 3e 20 20 20 20 20 53 65 6c 65 63 74 20 61 │ rg>     Select a
    0x1f0 │ 20 73 75 62 73 65 74 20 6f 66 20 63 6f 6c 75 6d │  subset of colum
    0x200 │ 6e 73 20 74 6f 20 63 6f 6d 70 75 74 65 20 66 72 │ ns to compute fr
    0x210 │ 65 71 75 65 6e 63 69 65 73 0a 20 20 20 20 20 20 │ equencies.      
    0x220 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x230 │ 20 20 20 20 20 66 6f 72 2e 20 53 65 65 20 27 78 │      for. See 'x
    0x240 │ 73 76 20 73 65 6c 65 63 74 20 2d 2d 68 65 6c 70 │ sv select --help
    0x250 │ 27 20 66 6f 72 20 74 68 65 20 66 6f 72 6d 61 74 │ ' for the format
    0x260 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0x270 │ 20 20 20 20 20 20 20 20 20 20 20 20 64 65 74 61 │             deta
    0x280 │ 69 6c 73 2e 20 54 68 69 73 20 69 73 20 70 72 6f │ ils. This is pro
    0x290 │ 76 69 64 65 64 20 68 65 72 65 20 62 65 63 61 75 │ vided here becau
    0x2a0 │ 73 65 20 70 69 70 69 6e 67 20 27 78 73 76 0a 20 │ se piping 'xsv. 
    0x2b0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x2c0 │ 20 20 20 20 20 20 20 20 20 20 73 65 6c 65 63 74 │           select
    0x2d0 │ 27 20 69 6e 74 6f 20 27 78 73 76 20 66 72 65 71 │ ' into 'xsv freq
    0x2e0 │ 75 65 6e 63 79 27 20 77 69 6c 6c 20 64 69 73 61 │ uency' will disa
    0x2f0 │ 62 6c 65 20 74 68 65 20 75 73 65 0a 20 20 20 20 │ ble the use.    
    0x300 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x310 │ 20 20 20 20 20 20 20 6f 66 20 69 6e 64 65 78 69 │        of indexi
    0x320 │ 6e 67 2e 0a 20 20 20 20 2d 6c 2c 20 2d 2d 6c 69 │ ng..    -l, --li
    0x330 │ 6d 69 74 20 3c 61 72 67 3e 20 20 20 20 20 20 4c │ mit <arg>      L
    0x340 │ 69 6d 69 74 20 74 68 65 20 66 72 65 71 75 65 6e │ imit the frequen
    0x350 │ 63 79 20 74 61 62 6c 65 20 74 6f 20 74 68 65 20 │ cy table to the 
    0x360 │ 4e 20 6d 6f 73 74 20 63 6f 6d 6d 6f 6e 0a 20 20 │ N most common.  
    0x370 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x380 │ 20 20 20 20 20 20 20 20 20 69 74 65 6d 73 2e 20 │          items. 
    0x390 │ 53 65 74 20 74 6f 20 27 30 27 20 74 6f 20 64 69 │ Set to '0' to di
    0x3a0 │ 73 61 62 6c 65 20 61 20 6c 69 6d 69 74 2e 0a 20 │ sable a limit.. 
    0x3b0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x3c0 │ 20 20 20 20 20 20 20 20 20 20 5b 64 65 66 61 75 │           [defau
    0x3d0 │ 6c 74 3a 20 31 30 5d 0a 20 20 20 20 2d 61 2c 20 │ lt: 10].    -a, 
    0x3e0 │ 2d 2d 61 73 63 20 20 20 20 20 20 20 20 20 20 20 │ --asc           
    0x3f0 │ 20 20 20 53 6f 72 74 20 74 68 65 20 66 72 65 71 │    Sort the freq
    0x400 │ 75 65 6e 63 79 20 74 61 62 6c 65 73 20 69 6e 20 │ uency tables in 
    0x410 │ 61 73 63 65 6e 64 69 6e 67 20 6f 72 64 65 72 20 │ ascending order 
    0x420 │ 62 79 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 │ by.             
    0x430 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 63 6f │               co
    0x440 │ 75 6e 74 2e 20 54 68 65 20 64 65 66 61 75 6c 74 │ unt. The default
    0x450 │ 20 69 73 20 64 65 73 63 65 6e 64 69 6e 67 20 6f │  is descending o
    0x460 │ 72 64 65 72 2e 0a 20 20 20 20 2d 2d 6e 6f 2d 6e │ rder..    --no-n
    0x470 │ 75 6c 6c 73 20 20 20 20 20 20 20 20 20 20 20 20 │ ulls            
    0x480 │ 20 44 6f 6e 27 74 20 69 6e 63 6c 75 64 65 20 4e │  Don't include N
    0x490 │ 55 4c 4c 73 20 69 6e 20 74 68 65 20 66 72 65 71 │ ULLs in the freq
    0x4a0 │ 75 65 6e 63 79 20 74 61 62 6c 65 2e 0a 20 20 20 │ uency table..   
    0x4b0 │ 20 2d 6a 2c 20 2d 2d 6a 6f 62 73 20 3c 61 72 67 │  -j, --jobs <arg
    0x4c0 │ 3e 20 20 20 20 20 20 20 54 68 65 20 6e 75 6d 62 │ >       The numb
    0x4d0 │ 65 72 20 6f 66 20 6a 6f 62 73 20 74 6f 20 72 75 │ er of jobs to ru
    0x4e0 │ 6e 20 69 6e 20 70 61 72 61 6c 6c 65 6c 2e 0a 20 │ n in parallel.. 
    0x4f0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x500 │ 20 20 20 20 20 20 20 20 20 20 54 68 69 73 20 77 │           This w
    0x510 │ 6f 72 6b 73 20 62 65 74 74 65 72 20 77 68 65 6e │ orks better when
    0x520 │ 20 74 68 65 20 67 69 76 65 6e 20 43 53 56 20 64 │  the given CSV d
    0x530 │ 61 74 61 20 68 61 73 0a 20 20 20 20 20 20 20 20 │ ata has.        
    0x540 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x550 │ 20 20 20 61 6e 20 69 6e 64 65 78 20 61 6c 72 65 │    an index alre
    0x560 │ 61 64 79 20 63 72 65 61 74 65 64 2e 20 4e 6f 74 │ ady created. Not
    0x570 │ 65 20 74 68 61 74 20 61 20 66 69 6c 65 20 68 61 │ e that a file ha
    0x580 │ 6e 64 6c 65 0a 20 20 20 20 20 20 20 20 20 20 20 │ ndle.           
    0x590 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x5a0 │ 69 73 20 6f 70 65 6e 65 64 20 66 6f 72 20 65 61 │ is opened for ea
    0x5b0 │ 63 68 20 6a 6f 62 2e 0a 20 20 20 20 20 20 20 20 │ ch job..        
    0x5c0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x5d0 │ 20 20 20 57 68 65 6e 20 73 65 74 20 74 6f 20 27 │    When set to '
    0x5e0 │ 30 27 2c 20 74 68 65 20 6e 75 6d 62 65 72 20 6f │ 0', the number o
    0x5f0 │ 66 20 6a 6f 62 73 20 69 73 20 73 65 74 20 74 6f │ f jobs is set to
    0x600 │ 20 74 68 65 0a 20 20 20 20 20 20 20 20 20 20 20 │  the.           
    0x610 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x620 │ 6e 75 6d 62 65 72 20 6f 66 20 43 50 55 73 20 64 │ number of CPUs d
    0x630 │ 65 74 65 63 74 65 64 2e 0a 20 20 20 20 20 20 20 │ etected..       
    0x640 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x650 │ 20 20 20 20 5b 64 65 66 61 75 6c 74 3a 20 30 5d │     [default: 0]
    0x660 │ 0a 0a 43 6f 6d 6d 6f 6e 20 6f 70 74 69 6f 6e 73 │ ..Common options
    0x670 │ 3a 0a 20 20 20 20 2d 68 2c 20 2d 2d 68 65 6c 70 │ :.    -h, --help
    0x680 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 44 69 73 │              Dis
    0x690 │ 70 6c 61 79 20 74 68 69 73 20 6d 65 73 73 61 67 │ play this messag
    0x6a0 │ 65 0a 20 20 20 20 2d 6f 2c 20 2d 2d 6f 75 74 70 │ e.    -o, --outp
    0x6b0 │ 75 74 20 3c 66 69 6c 65 3e 20 20 20 20 57 72 69 │ ut <file>    Wri
    0x6c0 │ 74 65 20 6f 75 74 70 75 74 20 74 6f 20 3c 66 69 │ te output to <fi
    0x6d0 │ 6c 65 3e 20 69 6e 73 74 65 61 64 20 6f 66 20 73 │ le> instead of s
    0x6e0 │ 74 64 6f 75 74 2e 0a 20 20 20 20 2d 6e 2c 20 2d │ tdout..    -n, -
    0x6f0 │ 2d 6e 6f 2d 68 65 61 64 65 72 73 20 20 20 20 20 │ -no-headers     
    0x700 │ 20 20 57 68 65 6e 20 73 65 74 2c 20 74 68 65 20 │   When set, the 
    0x710 │ 66 69 72 73 74 20 72 6f 77 20 77 69 6c 6c 20 4e │ first row will N
    0x720 │ 4f 54 20 62 65 20 69 6e 63 6c 75 64 65 64 0a 20 │ OT be included. 
    0x730 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x740 │ 20 20 20 20 20 20 20 20 20 20 69 6e 20 74 68 65 │           in the
    0x750 │ 20 66 72 65 71 75 65 6e 63 79 20 74 61 62 6c 65 │  frequency table
    0x760 │ 2e 20 41 64 64 69 74 69 6f 6e 61 6c 6c 79 2c 20 │ . Additionally, 
    0x770 │ 74 68 65 20 27 66 69 65 6c 64 27 0a 20 20 20 20 │ the 'field'.    
    0x780 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x790 │ 20 20 20 20 20 20 20 63 6f 6c 75 6d 6e 20 77 69 │        column wi
    0x7a0 │ 6c 6c 20 62 65 20 31 2d 62 61 73 65 64 20 69 6e │ ll be 1-based in
    0x7b0 │ 64 69 63 65 73 20 69 6e 73 74 65 61 64 20 6f 66 │ dices instead of
    0x7c0 │ 20 68 65 61 64 65 72 0a 20 20 20 20 20 20 20 20 │  header.        
    0x7d0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x7e0 │ 20 20 20 6e 61 6d 65 73 2e 0a 20 20 20 20 2d 64 │    names..    -d
    0x7f0 │ 2c 20 2d 2d 64 65 6c 69 6d 69 74 65 72 20 3c 61 │ , --delimiter <a
    0x800 │ 72 67 3e 20 20 54 68 65 20 66 69 65 6c 64 20 64 │ rg>  The field d
    0x810 │ 65 6c 69 6d 69 74 65 72 20 66 6f 72 20 72 65 61 │ elimiter for rea
    0x820 │ 64 69 6e 67 20 43 53 56 20 64 61 74 61 2e 0a 20 │ ding CSV data.. 
    0x830 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x840 │ 20 20 20 20 20 20 20 20 20 20 4d 75 73 74 20 62 │           Must b
    0x850 │ 65 20 61 20 73 69 6e 67 6c 65 20 63 68 61 72 61 │ e a single chara
    0x860 │ 63 74 65 72 2e 20 28 64 65 66 61 75 6c 74 3a 20 │ cter. (default: 
    0x870 │ 2c 29 0a                                        │ ,).
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::rconfig(_1: &frequency::Args) -> Config {
    debug self => _1;
    let mut _0: config::Config;
    let mut _2: config::Config;
    let mut _3: config::Config;
    let mut _4: config::Config;
    let _5: &std::option::Option<std::string::String>;
    let mut _6: std::option::Option<config::Delimiter>;
    let mut _7: bool;
    let mut _8: select::SelectColumns;
    let mut _9: &select::SelectColumns;
    let mut _10: bool;

    bb0: {
        _10 = const false;
        _5 = &((*_1).0: std::option::Option<std::string::String>);
        _4 = Config::new(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ((*_1).8: std::option::Option<config::Delimiter>);
        _3 = Config::delimiter(move _4, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = ((*_1).7: bool);
        _2 = Config::no_headers(move _3, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = const true;
        _9 = &((*_1).1: select::SelectColumns);
        _8 = <SelectColumns as Clone>::clone(move _9) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _10 = const false;
        _0 = Config::select(move _2, move _8) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _10 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_10) -> [0: bb6, otherwise: bb7];
    }
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::counts(_1: &frequency::Args, _2: &Frequencies<Vec<u8>>) -> Vec<(Vec<u8>, u64)> {
    debug self => _1;
    debug ftab => _2;
    let mut _0: std::vec::Vec<(std::vec::Vec<u8>, u64)>;
    let mut _3: std::vec::Vec<(&std::vec::Vec<u8>, u64)>;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: std::vec::Vec<(&std::vec::Vec<u8>, u64)>;
    let mut _8: std::iter::Take<std::vec::IntoIter<(&std::vec::Vec<u8>, u64)>>;
    let mut _9: std::vec::IntoIter<(&std::vec::Vec<u8>, u64)>;
    let mut _10: std::vec::Vec<(&std::vec::Vec<u8>, u64)>;
    let mut _11: usize;
    let mut _12: std::iter::Map<std::vec::IntoIter<(&std::vec::Vec<u8>, u64)>, {closure@src/cmd/frequency.rs:124:32: 124:41}>;
    let mut _13: std::vec::IntoIter<(&std::vec::Vec<u8>, u64)>;
    let mut _14: std::vec::Vec<(&std::vec::Vec<u8>, u64)>;
    scope 1 {
        debug counts => _3;
    }

    bb0: {
        _4 = ((*_1).3: bool);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = Frequencies::<Vec<u8>>::least_frequent(_2) -> [return: bb3, unwind continue];
    }

    bb2: {
        _3 = Frequencies::<Vec<u8>>::most_frequent(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = ((*_1).2: usize);
        _5 = Gt(move _6, const 0_usize);
        switchInt(move _5) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        _10 = move _3;
        _9 = <Vec<(&Vec<u8>, u64)> as IntoIterator>::into_iter(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = ((*_1).2: usize);
        _8 = <std::vec::IntoIter<(&Vec<u8>, u64)> as Iterator>::take(move _9, move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = <std::iter::Take<std::vec::IntoIter<(&Vec<u8>, u64)>> as Iterator>::collect::<Vec<(&Vec<u8>, u64)>>(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _3 = move _7;
        goto -> bb8;
    }

    bb8: {
        _14 = move _3;
        _13 = <Vec<(&Vec<u8>, u64)> as IntoIterator>::into_iter(move _14) -> [return: bb9, unwind continue];
    }

    bb9: {
        _12 = <std::vec::IntoIter<(&Vec<u8>, u64)> as Iterator>::map::<(Vec<u8>, u64), {closure@src/cmd/frequency.rs:124:32: 124:41}>(move _13, const ZeroSized: {closure@src/cmd/frequency.rs:124:32: 124:41}) -> [return: bb10, unwind continue];
    }

    bb10: {
        _0 = <std::iter::Map<std::vec::IntoIter<(&Vec<u8>, u64)>, {closure@src/cmd/frequency.rs:124:32: 124:41}> as Iterator>::collect::<Vec<(Vec<u8>, u64)>>(move _12) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::counts::{closure#0}(_1: &mut {closure@src/cmd/frequency.rs:124:32: 124:41}, _2: (&Vec<u8>, u64)) -> (Vec<u8>, u64) {
    let mut _0: (std::vec::Vec<u8>, u64);
    let _3: &std::vec::Vec<u8>;
    let _4: u64;
    let mut _5: bool;
    let mut _6: &&[u8];
    let _7: &[u8];
    let _8: &[u8];
    let mut _9: std::vec::Vec<u8>;
    let _10: &[u8];
    let _11: &[u8; 6];
    let mut _12: std::vec::Vec<u8>;
    scope 1 {
        debug bs => _3;
        debug c => _4;
        let mut _13: &&[u8; 0];
    }

    bb0: {
        _3 = (_2.0: &std::vec::Vec<u8>);
        _4 = (_2.1: u64);
        _13 = const _;
        _8 = <Vec<u8> as Deref>::deref(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = _8;
        _6 = &_7;
        _5 = <&[u8; 0] as PartialEq<&[u8]>>::eq(_13, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        _11 = const b"(NULL)";
        _10 = <[u8; 6] as Index<RangeFull>>::index(_11, const RangeFull) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = std::slice::<impl [u8]>::to_vec(_10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = (move _9, _4);
        goto -> bb8;
    }

    bb6: {
        _12 = <Vec<u8> as Clone>::clone(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = (move _12, _4);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

alloc12 (size: 6, align: 1) {
    28 4e 55 4c 4c 29                               │ (NULL)
}

promoted[0] in frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::counts::{closure#0}: &&[u8; 0] = {
    let mut _0: &&[u8; 0];
    let mut _1: &[u8; 0];

    bb0: {
        _1 = const b"";
        _0 = &_1;
        return;
    }
}

alloc11 (size: 0, align: 1) {}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::sequential_ftables(_1: &frequency::Args) -> Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>), CliError>;
    let mut _2: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _4: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _5: &config::Config;
    let _6: config::Config;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _9: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (csv::ByteRecord, select::Selection)>;
    let mut _13: std::result::Result<(csv::ByteRecord, select::Selection), CliError>;
    let mut _14: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _15: isize;
    let mut _18: (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
    let mut _19: csv::ByteRecord;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _21: std::result::Result<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>, CliError>;
    let _22: &select::Selection;
    let mut _23: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
    let mut _24: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _25: isize;
    let mut _28: bool;
    scope 1 {
        debug rdr => _2;
        let _10: csv::ByteRecord;
        let _11: select::Selection;
        let _16: std::result::Result<std::convert::Infallible, CliError>;
        let _17: (csv::ByteRecord, select::Selection);
        scope 6 {
            debug headers => _10;
            debug sel => _11;
            let _26: std::result::Result<std::convert::Infallible, CliError>;
            let _27: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
            scope 11 {
                debug residual => _26;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _27;
                scope 14 {
                }
            }
        }
        scope 7 {
            debug residual => _16;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _17;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _28 = const false;
        _6 = frequency::Args::rconfig(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = Config::reader(move _5) -> [return: bb2, unwind: bb30];
    }

    bb2: {
        _3 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _4) -> [return: bb3, unwind: bb30];
    }

    bb3: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_3 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _2 = move _9;
        drop(_6) -> [return: bb8, unwind: bb29];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        drop(_6) -> [return: bb23, unwind continue];
    }

    bb8: {
        _14 = &mut _2;
        _13 = frequency::Args::sel_headers::<Box<dyn std::io::Read>>(_1, _14) -> [return: bb9, unwind: bb29];
    }

    bb9: {
        _12 = <Result<(ByteRecord, Selection), CliError> as Try>::branch(move _13) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        _17 = move ((_12 as Continue).0: (csv::ByteRecord, select::Selection));
        _28 = const true;
        _10 = move (_17.0: csv::ByteRecord);
        _11 = move (_17.1: select::Selection);
        _28 = const false;
        _19 = move _10;
        _22 = &_11;
        _24 = &mut _2;
        _23 = Reader::<Box<dyn std::io::Read>>::byte_records(move _24) -> [return: bb14, unwind: bb27];
    }

    bb12: {
        _16 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _16) -> [return: bb13, unwind: bb29];
    }

    bb13: {
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb14: {
        _21 = frequency::Args::ftables::<ByteRecordsIter<'_, Box<dyn std::io::Read>>>(_1, _22, move _23) -> [return: bb15, unwind: bb27];
    }

    bb15: {
        _20 = <Result<Vec<Frequencies<Vec<u8>>>, CliError> as Try>::branch(move _21) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _25 = discriminant(_20);
        switchInt(move _25) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        _27 = move ((_20 as Continue).0: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
        _18 = (move _19, move _27);
        _0 = Result::<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError>::Ok(move _18);
        drop(_11) -> [return: bb20, unwind: bb26];
    }

    bb18: {
        _26 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _26) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        drop(_19) -> [return: bb21, unwind: bb25];
    }

    bb20: {
        _28 = const false;
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb21: {
        drop(_11) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        _28 = const false;
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_19) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_11) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_19) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_11) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_6) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32 (cleanup): {
        drop(_10) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_28) -> [0: bb29, otherwise: bb32];
    }
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::parallel_ftables(_1: &frequency::Args, _2: &mut Indexed<File, File>) -> Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> {
    debug self => _1;
    debug idx => _2;
    let mut _0: std::result::Result<(csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>), CliError>;
    let mut _3: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _5: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _6: &config::Config;
    let _7: config::Config;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _10: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (csv::ByteRecord, select::Selection)>;
    let mut _14: std::result::Result<(csv::ByteRecord, select::Selection), CliError>;
    let mut _15: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _16: isize;
    let mut _19: u64;
    let mut _20: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _21: (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
    let mut _22: csv::ByteRecord;
    let mut _23: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _25: usize;
    let mut _26: u64;
    let mut _27: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _28: usize;
    let mut _30: usize;
    let mut _31: u64;
    let mut _32: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _34: usize;
    let mut _37: (chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>, chan::Receiver<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>);
    let mut _38: std::ops::Range<usize>;
    let mut _39: std::ops::Range<usize>;
    let mut _41: std::option::Option<usize>;
    let mut _42: &mut std::ops::Range<usize>;
    let mut _43: isize;
    let mut _48: (chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>, cmd::frequency::Args, select::Selection);
    let mut _49: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _50: &chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _51: cmd::frequency::Args;
    let mut _52: select::Selection;
    let mut _53: &select::Selection;
    let _54: ();
    let mut _55: &threadpool::ThreadPool;
    let mut _56: {closure@src/cmd/frequency.rs:155:26: 155:33};
    let _57: ();
    let mut _58: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _59: (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
    let mut _60: csv::ByteRecord;
    let mut _61: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _62: std::option::Option<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _63: chan::Iter<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _64: &chan::Receiver<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    scope 1 {
        debug rdr => _3;
        let _11: csv::ByteRecord;
        let _12: select::Selection;
        let _17: std::result::Result<std::convert::Infallible, CliError>;
        let _18: (csv::ByteRecord, select::Selection);
        scope 6 {
            debug headers => _11;
            debug sel => _12;
            let _24: usize;
            scope 11 {
                debug chunk_size => _24;
                let _29: usize;
                scope 12 {
                    debug nchunks => _29;
                    let _33: threadpool::ThreadPool;
                    scope 13 {
                        debug pool => _33;
                        let _35: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
                        let _36: chan::Receiver<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
                        scope 14 {
                            debug send => _35;
                            debug recv => _36;
                            let mut _40: std::ops::Range<usize>;
                            scope 15 {
                                debug iter => _40;
                                let _44: usize;
                                scope 16 {
                                    debug i => _44;
                                    let _45: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
                                    let _46: cmd::frequency::Args;
                                    let _47: select::Selection;
                                    scope 17 {
                                        debug send => _45;
                                        debug args => _46;
                                        debug sel => _47;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _17;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _18;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _7 = frequency::Args::rconfig(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_7;
        _5 = Config::reader(move _6) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        _4 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb55];
    }

    bb3: {
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _10 = move ((_4 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _3 = move _10;
        drop(_7) -> [return: bb8, unwind: bb54];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _9) -> [return: bb7, unwind: bb55];
    }

    bb7: {
        drop(_7) -> [return: bb43, unwind continue];
    }

    bb8: {
        _15 = &mut _3;
        _14 = frequency::Args::sel_headers::<Box<dyn std::io::Read>>(_1, _15) -> [return: bb9, unwind: bb54];
    }

    bb9: {
        _13 = <Result<(ByteRecord, Selection), CliError> as Try>::branch(move _14) -> [return: bb10, unwind: bb54];
    }

    bb10: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        _18 = move ((_13 as Continue).0: (csv::ByteRecord, select::Selection));
        _69 = const true;
        _11 = move (_18.0: csv::ByteRecord);
        _12 = move (_18.1: select::Selection);
        _20 = &(*_2);
        _19 = Indexed::<File, File>::count(move _20) -> [return: bb13, unwind: bb53];
    }

    bb12: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _17) -> [return: bb64, unwind: bb54];
    }

    bb13: {
        switchInt(move _19) -> [0: bb14, otherwise: bb16];
    }

    bb14: {
        _69 = const false;
        _22 = move _11;
        _23 = Vec::<Frequencies<Vec<u8>>>::new() -> [return: bb15, unwind: bb52];
    }

    bb15: {
        _21 = (move _22, move _23);
        _0 = Result::<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError>::Ok(move _21);
        drop(_12) -> [return: bb41, unwind: bb63];
    }

    bb16: {
        _27 = &(*_2);
        _26 = Indexed::<File, File>::count(move _27) -> [return: bb17, unwind: bb53];
    }

    bb17: {
        _25 = move _26 as usize (IntToInt);
        _28 = frequency::Args::njobs(_1) -> [return: bb18, unwind: bb53];
    }

    bb18: {
        _24 = chunk_size(move _25, move _28) -> [return: bb19, unwind: bb53];
    }

    bb19: {
        _32 = &(*_2);
        _31 = Indexed::<File, File>::count(move _32) -> [return: bb20, unwind: bb53];
    }

    bb20: {
        _30 = move _31 as usize (IntToInt);
        _29 = num_of_chunks(move _30, _24) -> [return: bb21, unwind: bb53];
    }

    bb21: {
        _34 = frequency::Args::njobs(_1) -> [return: bb22, unwind: bb53];
    }

    bb22: {
        _33 = ThreadPool::new(move _34) -> [return: bb23, unwind: bb53];
    }

    bb23: {
        _37 = sync::<Vec<Frequencies<Vec<u8>>>>(const 0_usize) -> [return: bb24, unwind: bb51];
    }

    bb24: {
        _68 = const true;
        _35 = move (_37.0: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>);
        _36 = move (_37.1: chan::Receiver<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>);
        _39 = std::ops::Range::<usize> { start: const 0_usize, end: _29 };
        _38 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _39) -> [return: bb25, unwind: bb50];
    }

    bb25: {
        _40 = move _38;
        goto -> bb26;
    }

    bb26: {
        _42 = &mut _40;
        _41 = <std::ops::Range<usize> as Iterator>::next(_42) -> [return: bb27, unwind: bb50];
    }

    bb27: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb29, 1: bb28, otherwise: bb5];
    }

    bb28: {
        _44 = ((_41 as Some).0: usize);
        _50 = &_35;
        _49 = <chan::Sender<Vec<Frequencies<Vec<u8>>>> as Clone>::clone(move _50) -> [return: bb30, unwind: bb50];
    }

    bb29: {
        _68 = const false;
        _58 = move _35;
        _57 = std::mem::drop::<chan::Sender<Vec<Frequencies<Vec<u8>>>>>(move _58) -> [return: bb34, unwind: bb50];
    }

    bb30: {
        _51 = <frequency::Args as Clone>::clone(_1) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        _53 = &_12;
        _52 = <Selection as Clone>::clone(move _53) -> [return: bb32, unwind: bb48];
    }

    bb32: {
        _48 = (move _49, move _51, move _52);
        _67 = const true;
        _45 = move (_48.0: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>);
        _66 = const true;
        _46 = move (_48.1: cmd::frequency::Args);
        _65 = const true;
        _47 = move (_48.2: select::Selection);
        _55 = &_33;
        _66 = const false;
        _67 = const false;
        _65 = const false;
        _56 = {closure@src/cmd/frequency.rs:155:26: 155:33} { args: move _46, i: _44, chunk_size: _24, send: move _45, sel: move _47 };
        _54 = ThreadPool::execute::<{closure@src/cmd/frequency.rs:155:26: 155:33}>(move _55, move _56) -> [return: bb33, unwind: bb45];
    }

    bb33: {
        _65 = const false;
        _66 = const false;
        _67 = const false;
        goto -> bb26;
    }

    bb34: {
        _69 = const false;
        _60 = move _11;
        _64 = &_36;
        _63 = chan::Receiver::<Vec<Frequencies<Vec<u8>>>>::iter(move _64) -> [return: bb35, unwind: bb44];
    }

    bb35: {
        _62 = merge_all::<Vec<Frequencies<Vec<u8>>>, chan::Iter<Vec<Frequencies<Vec<u8>>>>>(move _63) -> [return: bb36, unwind: bb44];
    }

    bb36: {
        _61 = std::option::Option::<Vec<Frequencies<Vec<u8>>>>::unwrap(move _62) -> [return: bb37, unwind: bb44];
    }

    bb37: {
        _59 = (move _60, move _61);
        _0 = Result::<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError>::Ok(move _59);
        drop(_36) -> [return: bb38, unwind: bb61];
    }

    bb38: {
        _68 = const false;
        drop(_33) -> [return: bb39, unwind: bb53];
    }

    bb39: {
        drop(_12) -> [return: bb40, unwind: bb63];
    }

    bb40: {
        _69 = const false;
        drop(_3) -> [return: bb43, unwind continue];
    }

    bb41: {
        _69 = const false;
        goto -> bb42;
    }

    bb42: {
        drop(_3) -> [return: bb43, unwind continue];
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_60) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_65) -> [0: bb46, otherwise: bb57];
    }

    bb46 (cleanup): {
        switchInt(_66) -> [0: bb47, otherwise: bb58];
    }

    bb47 (cleanup): {
        switchInt(_67) -> [0: bb50, otherwise: bb59];
    }

    bb48 (cleanup): {
        drop(_51) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_49) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_36) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_33) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_22) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_12) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_3) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_7) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57 (cleanup): {
        drop(_47) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_46) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_45) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_35) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_68) -> [0: bb51, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_11) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_69) -> [0: bb54, otherwise: bb62];
    }

    bb64: {
        goto -> bb42;
    }
}