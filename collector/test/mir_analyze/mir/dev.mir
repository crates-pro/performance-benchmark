// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:6:1: 6:16>::add(_1: &Calculator) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: i32;
    let mut _3: i32;
    let mut _4: (i32, bool);

    bb0: {
        _2 = ((*_1).0: i32);
        _3 = ((*_1).1: i32);
        _4 = CheckedAdd(_2, _3);
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_4.0: i32);
        return;
    }
}

fn <impl at src/main.rs:6:1: 6:16>::subtract(_1: &Calculator) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let _2: i32;
    let mut _3: i32;
    let mut _4: (i32, bool);
    scope 1 {
        debug sum => _2;
    }

    bb0: {
        _2 = Calculator::add(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = ((*_1).0: i32);
        _4 = CheckedSub(_3, _2);
        assert(!move (_4.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, _2) -> [success: bb2, unwind continue];
    }

    bb2: {
        _0 = move (_4.0: i32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Calculator;
    let mut _3: &Calculator;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &i32;
    scope 1 {
        debug calc => _1;
        let _2: i32;
        scope 2 {
            debug result => _2;
            let mut _12: &[&str; 2];
        }
    }

    bb0: {
        _1 = Calculator { num1: const 10_i32, num2: const 5_i32 };
        _3 = &_1;
        _2 = Calculator::subtract(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = const _;
        _6 = _12 as &[&str] (PointerCoercion(Unsize));
        _11 = &_2;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = _print(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Result: ", const "\n"];
        _0 = &_1;
        return;
    }
}