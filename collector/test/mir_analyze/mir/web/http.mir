// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn build_spec(_1: Option<Color>, _2: bool) -> ColorSpec {
    debug fg => _1;
    debug bold => _2;
    let mut _0: termcolor::ColorSpec;
    let mut _3: termcolor::ColorSpec;
    let _4: &mut termcolor::ColorSpec;
    let mut _5: &mut termcolor::ColorSpec;
    let _6: &mut termcolor::ColorSpec;
    let mut _7: &mut termcolor::ColorSpec;
    scope 1 {
        debug spec => _3;
    }

    bb0: {
        _3 = ColorSpec::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &mut _3;
        _4 = ColorSpec::set_fg(move _5, _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &mut _3;
        _6 = ColorSpec::set_bold(move _7, _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = move _3;
        return;
    }
}

fn color::<impl at src/color.rs:20:1: 20:13>::new() -> Printer {
    let mut _0: color::Printer;
    let mut _1: termcolor::BufferWriter;
    let mut _2: termcolor::ColorChoice;
    let mut _3: termcolor::BufferWriter;
    let mut _4: termcolor::ColorChoice;

    bb0: {
        _2 = termcolor::ColorChoice::Always;
        _1 = BufferWriter::stdout(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = termcolor::ColorChoice::Always;
        _3 = BufferWriter::stderr(move _4) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = Printer { outwriter: move _1, errwriter: move _3 };
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn color::<impl at src/color.rs:20:1: 20:13>::print_out(_1: &Printer, _2: &str, _3: &[(&str, &Option<ColorSpec>)]) -> Result<(), StringError> {
    debug self => _1;
    debug fmtstr => _2;
    debug args => _3;
    let mut _0: std::result::Result<(), util::StringError>;
    let _4: &termcolor::BufferWriter;

    bb0: {
        _4 = &((*_1).0: termcolor::BufferWriter);
        _0 = Printer::print(_1, _4, _2, _3, const false) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn color::<impl at src/color.rs:20:1: 20:13>::println_out(_1: &Printer, _2: &str, _3: &[(&str, &Option<ColorSpec>)]) -> Result<(), StringError> {
    debug self => _1;
    debug fmtstr => _2;
    debug args => _3;
    let mut _0: std::result::Result<(), util::StringError>;
    let _4: &termcolor::BufferWriter;

    bb0: {
        _4 = &((*_1).0: termcolor::BufferWriter);
        _0 = Printer::print(_1, _4, _2, _3, const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn color::<impl at src/color.rs:20:1: 20:13>::print_err(_1: &Printer, _2: &str, _3: &[(&str, &Option<ColorSpec>)]) -> Result<(), StringError> {
    debug self => _1;
    debug fmtstr => _2;
    debug args => _3;
    let mut _0: std::result::Result<(), util::StringError>;
    let _4: &termcolor::BufferWriter;

    bb0: {
        _4 = &((*_1).1: termcolor::BufferWriter);
        _0 = Printer::print(_1, _4, _2, _3, const false) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn color::<impl at src/color.rs:20:1: 20:13>::println_err(_1: &Printer, _2: &str, _3: &[(&str, &Option<ColorSpec>)]) -> Result<(), StringError> {
    debug self => _1;
    debug fmtstr => _2;
    debug args => _3;
    let mut _0: std::result::Result<(), util::StringError>;
    let _4: &termcolor::BufferWriter;

    bb0: {
        _4 = &((*_1).1: termcolor::BufferWriter);
        _0 = Printer::print(_1, _4, _2, _3, const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn color::<impl at src/color.rs:20:1: 20:13>::print(_1: &Printer, _2: &BufferWriter, _3: &str, _4: &[(&str, &Option<ColorSpec>)], _5: bool) -> Result<(), StringError> {
    debug self => _1;
    debug writer => _2;
    debug fmtstr => _3;
    debug args => _4;
    debug newline => _5;
    let mut _0: std::result::Result<(), util::StringError>;
    let mut _6: termcolor::Buffer;
    let mut _10: &mut std::str::Chars<'_>;
    let mut _12: isize;
    let mut _15: &mut std::str::Chars<'_>;
    let mut _16: isize;
    let mut _17: std::option::Option<&(&str, &std::option::Option<termcolor::ColorSpec>)>;
    let mut _18: &mut std::slice::Iter<'_, (&str, &std::option::Option<termcolor::ColorSpec>)>;
    let mut _19: isize;
    let mut _22: bool;
    let mut _23: isize;
    let _25: ();
    let mut _26: std::result::Result<(), std::io::Error>;
    let mut _27: &mut termcolor::Buffer;
    let _28: ();
    let mut _29: std::result::Result<(), std::io::Error>;
    let mut _30: &mut termcolor::Buffer;
    let _31: &[u8];
    let mut _32: bool;
    let _33: ();
    let mut _34: std::result::Result<(), std::io::Error>;
    let mut _35: &mut termcolor::Buffer;
    let mut _36: (i32, bool);
    let mut _37: util::StringError;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: &i32;
    let _46: ();
    let mut _47: std::result::Result<(), std::io::Error>;
    let mut _48: &mut termcolor::Buffer;
    let mut _49: &[u8];
    let _50: &[u8; 1];
    let mut _51: util::StringError;
    let mut _52: std::string::String;
    let _53: &str;
    let mut _55: &mut std::str::Chars<'_>;
    let mut _56: isize;
    let _57: ();
    let mut _58: std::result::Result<(), std::io::Error>;
    let mut _59: &mut termcolor::Buffer;
    let mut _60: &[u8];
    let _61: &[u8; 1];
    let mut _62: util::StringError;
    let mut _63: std::string::String;
    let _64: &str;
    let _66: ();
    let mut _67: std::result::Result<(), std::io::Error>;
    let mut _68: &mut termcolor::Buffer;
    let _69: &[u8];
    let mut _70: &str;
    let _71: &mut str;
    let mut _72: &mut [u8];
    let mut _73: &mut [u8; 4];
    let mut _74: std::option::Option<char>;
    let mut _75: &mut std::str::Chars<'_>;
    let _76: ();
    let mut _77: std::result::Result<(), std::io::Error>;
    let mut _78: &mut termcolor::Buffer;
    let mut _79: &[u8];
    let _80: &[u8; 1];
    let _81: ();
    let mut _82: std::result::Result<(), std::io::Error>;
    let _83: &termcolor::Buffer;
    let mut _85: &(&str, &std::option::Option<termcolor::ColorSpec>);
    let mut _86: &(&str, &std::option::Option<termcolor::ColorSpec>);
    scope 1 {
        debug buffer => _6;
        let mut _7: std::slice::Iter<'_, (&str, &std::option::Option<termcolor::ColorSpec>)>;
        scope 2 {
            debug arg_iter => _7;
            let mut _8: std::str::Chars<'_>;
            scope 3 {
                debug char_iter => _8;
                let mut _9: std::option::Option<char>;
                scope 4 {
                    debug current => _9;
                    let mut _11: i32;
                    scope 5 {
                        debug count => _11;
                        scope 6 {
                            debug c => _13;
                            let _13: char;
                            let _14: std::option::Option<char>;
                            let _54: std::option::Option<char>;
                            scope 7 {
                                debug c => _14;
                                let _38: std::string::String;
                                let mut _84: &[&str; 2];
                                scope 8 {
                                    debug s => _20;
                                    debug colorspec => _21;
                                    let _20: &str;
                                    let _21: &std::option::Option<termcolor::ColorSpec>;
                                    scope 9 {
                                        debug colorspec => _24;
                                        let _24: &termcolor::ColorSpec;
                                    }
                                }
                                scope 10 {
                                    debug res => _38;
                                }
                            }
                            scope 11 {
                                debug c => _54;
                            }
                            scope 12 {
                                debug c => _13;
                                let mut _65: [u8; 4];
                                scope 13 {
                                    debug buf => _65;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _6 = BufferWriter::buffer(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = core::slice::<impl [(&str, &Option<ColorSpec>)]>::iter(_4) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        _8 = core::str::<impl str>::chars(_3) -> [return: bb3, unwind: bb55];
    }

    bb3: {
        _10 = &mut _8;
        _9 = <Chars<'_> as Iterator>::next(move _10) -> [return: bb4, unwind: bb55];
    }

    bb4: {
        _11 = const 0_i32;
        goto -> bb5;
    }

    bb5: {
        _12 = discriminant(_9);
        switchInt(move _12) -> [1: bb6, otherwise: bb47];
    }

    bb6: {
        _13 = ((_9 as Some).0: char);
        switchInt(_13) -> [123: bb8, 125: bb35, otherwise: bb7];
    }

    bb7: {
        _65 = [const 0_u8; 4];
        _68 = &mut _6;
        _73 = &mut _65;
        _72 = _73 as &mut [u8] (PointerCoercion(Unsize));
        _71 = char::methods::<impl char>::encode_utf8(_13, move _72) -> [return: bb42, unwind: bb55];
    }

    bb8: {
        _15 = &mut _8;
        _14 = <Chars<'_> as Iterator>::next(move _15) -> [return: bb9, unwind: bb55];
    }

    bb9: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [1: bb11, otherwise: bb10];
    }

    bb10: {
        _53 = const "{{ not closed";
        _52 = <str as ToOwned>::to_owned(_53) -> [return: bb34, unwind: bb55];
    }

    bb11: {
        switchInt(((_14 as Some).0: char)) -> [125: bb12, 123: bb32, otherwise: bb10];
    }

    bb12: {
        _18 = &mut _7;
        _17 = <std::slice::Iter<'_, (&str, &Option<ColorSpec>)> as Iterator>::next(move _18) -> [return: bb13, unwind: bb55];
    }

    bb13: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [1: bb14, otherwise: bb28];
    }

    bb14: {
        _85 = deref_copy ((_17 as Some).0: &(&str, &std::option::Option<termcolor::ColorSpec>));
        _20 = ((*_85).0: &str);
        _86 = deref_copy ((_17 as Some).0: &(&str, &std::option::Option<termcolor::ColorSpec>));
        _21 = ((*_86).1: &std::option::Option<termcolor::ColorSpec>);
        _22 = core::str::<impl str>::is_empty(_20) -> [return: bb15, unwind: bb55];
    }

    bb15: {
        switchInt(move _22) -> [0: bb16, otherwise: bb26];
    }

    bb16: {
        _23 = discriminant((*_21));
        switchInt(move _23) -> [1: bb17, otherwise: bb19];
    }

    bb17: {
        _24 = &(((*_21) as Some).0: termcolor::ColorSpec);
        _27 = &mut _6;
        _26 = <termcolor::Buffer as WriteColor>::set_color(move _27, _24) -> [return: bb18, unwind: bb55];
    }

    bb18: {
        _25 = Result::<(), std::io::Error>::unwrap(move _26) -> [return: bb57, unwind: bb55];
    }

    bb19: {
        _30 = &mut _6;
        _31 = core::str::<impl str>::as_bytes(_20) -> [return: bb20, unwind: bb55];
    }

    bb20: {
        _29 = <termcolor::Buffer as std::io::Write>::write_all(move _30, _31) -> [return: bb21, unwind: bb55];
    }

    bb21: {
        _28 = Result::<(), std::io::Error>::unwrap(move _29) -> [return: bb22, unwind: bb55];
    }

    bb22: {
        _32 = Option::<ColorSpec>::is_some(_21) -> [return: bb23, unwind: bb55];
    }

    bb23: {
        switchInt(move _32) -> [0: bb26, otherwise: bb24];
    }

    bb24: {
        _35 = &mut _6;
        _34 = <termcolor::Buffer as WriteColor>::reset(move _35) -> [return: bb25, unwind: bb55];
    }

    bb25: {
        _33 = Result::<(), std::io::Error>::unwrap(move _34) -> [return: bb58, unwind: bb55];
    }

    bb26: {
        _36 = CheckedAdd(_11, const 1_i32);
        assert(!move (_36.1: bool), "attempt to compute `{} + {}`, which would overflow", _11, const 1_i32) -> [success: bb27, unwind: bb55];
    }

    bb27: {
        _11 = move (_36.0: i32);
        goto -> bb45;
    }

    bb28: {
        _84 = const _;
        _40 = _84 as &[&str] (PointerCoercion(Unsize));
        _45 = &_11;
        _44 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_45) -> [return: bb29, unwind: bb55];
    }

    bb29: {
        _43 = [move _44];
        _42 = &_43;
        _41 = _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _39 = Arguments::<'_>::new_v1(move _40, move _41) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        _38 = std::fmt::format(move _39) -> [return: bb31, unwind: bb55];
    }

    bb31: {
        _37 = StringError(move _38);
        _0 = Result::<(), StringError>::Err(move _37);
        goto -> bb53;
    }

    bb32: {
        _48 = &mut _6;
        _50 = const b"{";
        _49 = _50 as &[u8] (PointerCoercion(Unsize));
        _47 = <termcolor::Buffer as std::io::Write>::write_all(move _48, move _49) -> [return: bb33, unwind: bb55];
    }

    bb33: {
        _46 = Result::<(), std::io::Error>::unwrap(move _47) -> [return: bb59, unwind: bb55];
    }

    bb34: {
        _51 = StringError(move _52);
        _0 = Result::<(), StringError>::Err(move _51);
        goto -> bb53;
    }

    bb35: {
        _55 = &mut _8;
        _54 = <Chars<'_> as Iterator>::next(move _55) -> [return: bb36, unwind: bb55];
    }

    bb36: {
        _56 = discriminant(_54);
        switchInt(move _56) -> [1: bb38, otherwise: bb37];
    }

    bb37: {
        _64 = const "}} not closed";
        _63 = <str as ToOwned>::to_owned(_64) -> [return: bb41, unwind: bb55];
    }

    bb38: {
        switchInt(((_54 as Some).0: char)) -> [125: bb39, otherwise: bb37];
    }

    bb39: {
        _59 = &mut _6;
        _61 = const b"}";
        _60 = _61 as &[u8] (PointerCoercion(Unsize));
        _58 = <termcolor::Buffer as std::io::Write>::write_all(move _59, move _60) -> [return: bb40, unwind: bb55];
    }

    bb40: {
        _57 = Result::<(), std::io::Error>::unwrap(move _58) -> [return: bb60, unwind: bb55];
    }

    bb41: {
        _62 = StringError(move _63);
        _0 = Result::<(), StringError>::Err(move _62);
        goto -> bb53;
    }

    bb42: {
        _70 = &(*_71);
        _69 = core::str::<impl str>::as_bytes(move _70) -> [return: bb43, unwind: bb55];
    }

    bb43: {
        _67 = <termcolor::Buffer as std::io::Write>::write_all(move _68, _69) -> [return: bb44, unwind: bb55];
    }

    bb44: {
        _66 = Result::<(), std::io::Error>::unwrap(move _67) -> [return: bb61, unwind: bb55];
    }

    bb45: {
        _75 = &mut _8;
        _74 = <Chars<'_> as Iterator>::next(move _75) -> [return: bb46, unwind: bb55];
    }

    bb46: {
        _9 = move _74;
        goto -> bb5;
    }

    bb47: {
        switchInt(_5) -> [0: bb50, otherwise: bb48];
    }

    bb48: {
        _78 = &mut _6;
        _80 = const b"\n";
        _79 = _80 as &[u8] (PointerCoercion(Unsize));
        _77 = <termcolor::Buffer as std::io::Write>::write_all(move _78, move _79) -> [return: bb49, unwind: bb55];
    }

    bb49: {
        _76 = Result::<(), std::io::Error>::unwrap(move _77) -> [return: bb62, unwind: bb55];
    }

    bb50: {
        _83 = &_6;
        _82 = BufferWriter::print(_2, _83) -> [return: bb51, unwind: bb55];
    }

    bb51: {
        _81 = Result::<(), std::io::Error>::unwrap(move _82) -> [return: bb52, unwind: bb55];
    }

    bb52: {
        _0 = Result::<(), StringError>::Ok(const ());
        drop(_6) -> [return: bb54, unwind continue];
    }

    bb53: {
        drop(_6) -> [return: bb54, unwind continue];
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_6) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57: {
        goto -> bb19;
    }

    bb58: {
        goto -> bb26;
    }

    bb59: {
        goto -> bb45;
    }

    bb60: {
        goto -> bb45;
    }

    bb61: {
        goto -> bb45;
    }

    bb62: {
        goto -> bb50;
    }
}

alloc3 (size: 1, align: 1) {
    0a                                              │ .
}

alloc2 (size: 1, align: 1) {
    7d                                              │ }
}

alloc1 (size: 1, align: 1) {
    7b                                              │ {
}

promoted[0] in color::<impl at src/color.rs:20:1: 20:13>::print: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Not enough arguments (need more than ", const ")"];
        _0 = &_1;
        return;
    }
}

color::<impl at src/color.rs:20:1: 20:13>::print::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn auth::<impl at src/middlewares/auth.rs:11:1: 11:17>::new(_1: &str) -> Result<AuthChecker, StringError> {
    debug s => _1;
    let mut _0: std::result::Result<middlewares::auth::AuthChecker, util::StringError>;
    let _2: std::vec::Vec<&str>;
    let mut _3: std::str::SplitN<'_, char>;
    let mut _4: usize;
    let mut _5: &std::vec::Vec<&str>;
    let mut _6: middlewares::auth::AuthChecker;
    let mut _7: std::string::String;
    let _8: &&str;
    let mut _9: &std::vec::Vec<&str>;
    let mut _10: std::string::String;
    let _11: &&str;
    let mut _12: &std::vec::Vec<&str>;
    let mut _13: util::StringError;
    let mut _14: std::string::String;
    let _15: &str;
    let mut _16: &str;
    let mut _17: &str;
    scope 1 {
        debug parts => _2;
    }

    bb0: {
        _3 = core::str::<impl str>::splitn::<'_, char>(_1, const 2_usize, const ':') -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <std::str::SplitN<'_, char> as Iterator>::collect::<Vec<&str>>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &_2;
        _4 = Vec::<&str>::len(move _5) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        switchInt(move _4) -> [2: bb4, otherwise: bb9];
    }

    bb4: {
        _9 = &_2;
        _8 = <Vec<&str> as std::ops::Index<usize>>::index(move _9, const 0_usize) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _16 = deref_copy (*_8);
        _7 = <str as ToOwned>::to_owned(_16) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _12 = &_2;
        _11 = <Vec<&str> as std::ops::Index<usize>>::index(move _12, const 1_usize) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _17 = deref_copy (*_11);
        _10 = <str as ToOwned>::to_owned(_17) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _6 = AuthChecker { username: move _7, password: move _10 };
        _0 = Result::<AuthChecker, StringError>::Ok(move _6);
        goto -> bb11;
    }

    bb9: {
        _15 = const "not valid format user & password";
        _14 = <str as ToOwned>::to_owned(_15) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _13 = StringError(move _14);
        _0 = Result::<AuthChecker, StringError>::Err(move _13);
        goto -> bb11;
    }

    bb11: {
        drop(_2) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_7) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_2) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn auth::<impl at src/middlewares/auth.rs:25:1: 25:38>::before(_1: &AuthChecker, _2: &mut iron::Request<'_, '_>) -> Result<(), IronError> {
    debug self => _1;
    debug req => _2;
    let mut _0: std::result::Result<(), iron::IronError>;
    let mut _3: std::option::Option<&iron::headers::Authorization<iron::headers::Basic>>;
    let mut _4: &iron::Headers;
    let mut _5: isize;
    let _6: &std::string::String;
    let _7: &std::option::Option<std::string::String>;
    let mut _8: bool;
    let mut _9: &&std::string::String;
    let mut _10: &&str;
    let _11: &str;
    let mut _12: &std::string::String;
    let mut _13: bool;
    let mut _14: &&std::option::Option<std::string::String>;
    let mut _15: &&std::option::Option<std::string::String>;
    let _16: &std::option::Option<std::string::String>;
    let _17: std::option::Option<std::string::String>;
    let mut _18: std::string::String;
    let mut _19: &std::string::String;
    let mut _20: iron::IronError;
    let mut _21: std::boxed::Box<dyn iron::Error + std::marker::Send>;
    let mut _22: std::boxed::Box<util::StringError>;
    let mut _23: util::StringError;
    let mut _24: std::string::String;
    let _25: &str;
    let mut _26: iron::Response;
    let mut _27: (iron::status::Status, &str);
    let mut _28: iron::status::Status;
    let mut _29: iron::Response;
    let mut _30: iron::status::Status;
    let _31: ();
    let mut _32: &mut iron::Headers;
    let mut _33: std::vec::Vec<std::vec::Vec<u8>>;
    let mut _34: std::boxed::Box<[std::vec::Vec<u8>]>;
    let mut _35: std::boxed::Box<[std::vec::Vec<u8>; 1]>;
    let mut _36: usize;
    let mut _37: usize;
    let mut _38: *mut u8;
    let mut _39: std::boxed::Box<[std::vec::Vec<u8>; 1]>;
    let mut _40: std::vec::Vec<u8>;
    let mut _41: &[u8];
    let _42: &[u8; 18];
    let mut _43: iron::IronError;
    let mut _44: std::boxed::Box<dyn iron::Error + std::marker::Send>;
    let mut _45: std::boxed::Box<util::StringError>;
    let mut _46: util::StringError;
    let mut _47: std::string::String;
    let _48: &str;
    let mut _49: iron::Response;
    let mut _50: &iron::headers::Authorization<iron::headers::Basic>;
    let mut _51: &iron::headers::Authorization<iron::headers::Basic>;
    let mut _52: &mut std::boxed::Box<[std::vec::Vec<u8>; 1]>;
    let mut _53: ();
    let mut _54: *const [std::vec::Vec<u8>; 1];
    scope 1 {
        debug username => _6;
        debug password => _7;
    }
    scope 2 {
        debug resp => _29;
        let mut _55: *const ();
        let mut _56: usize;
        let mut _57: usize;
        let mut _58: usize;
        let mut _59: usize;
        let mut _60: bool;
        scope 3 {
        }
    }

    bb0: {
        _4 = &((*_2).3: iron::Headers);
        _3 = Headers::get::<Authorization<Basic>>(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _30 = Unauthorized;
        _29 = iron::Response::with::<StatusCode>(move _30) -> [return: bb17, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _50 = deref_copy ((_3 as Some).0: &iron::headers::Authorization<iron::headers::Basic>);
        _6 = &(((*_50).0: iron::headers::Basic).0: std::string::String);
        _51 = deref_copy ((_3 as Some).0: &iron::headers::Authorization<iron::headers::Basic>);
        _7 = &(((*_51).0: iron::headers::Basic).1: std::option::Option<std::string::String>);
        _9 = &_6;
        _12 = &((*_1).0: std::string::String);
        _11 = String::as_str(move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = &_11;
        _8 = <&String as PartialEq<&str>>::eq(move _9, move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _8) -> [0: bb13, otherwise: bb7];
    }

    bb7: {
        _14 = &_7;
        _19 = &((*_1).1: std::string::String);
        _18 = <String as Clone>::clone(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = Option::<String>::Some(move _18);
        _16 = &_17;
        _15 = &_16;
        _13 = <&Option<String> as PartialEq>::eq(move _14, move _15) -> [return: bb9, unwind: bb27];
    }

    bb9: {
        switchInt(move _13) -> [0: bb12, otherwise: bb10];
    }

    bb10: {
        drop(_17) -> [return: bb11, unwind continue];
    }

    bb11: {
        _0 = Result::<(), IronError>::Ok(const ());
        goto -> bb24;
    }

    bb12: {
        drop(_17) -> [return: bb13, unwind continue];
    }

    bb13: {
        _25 = const "authorization error";
        _24 = <str as ToOwned>::to_owned(_25) -> [return: bb14, unwind continue];
    }

    bb14: {
        _23 = StringError(move _24);
        _22 = std::boxed::Box::<StringError>::new(move _23) -> [return: bb15, unwind continue];
    }

    bb15: {
        _21 = move _22 as std::boxed::Box<dyn iron::Error + std::marker::Send> (PointerCoercion(Unsize));
        _28 = Unauthorized;
        _27 = (move _28, const "Wrong username or password.");
        _26 = iron::Response::with::<(StatusCode, &str)>(move _27) -> [return: bb16, unwind: bb26];
    }

    bb16: {
        _20 = IronError { error: move _21, response: move _26 };
        _0 = Result::<(), IronError>::Err(move _20);
        goto -> bb24;
    }

    bb17: {
        _32 = &mut (_29.1: iron::Headers);
        _36 = SizeOf([std::vec::Vec<u8>; 1]);
        _37 = AlignOf([std::vec::Vec<u8>; 1]);
        _38 = alloc::alloc::exchange_malloc(move _36, move _37) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        _39 = ShallowInitBox(move _38, [std::vec::Vec<u8>; 1]);
        _42 = const b"Basic realm=\"main\"";
        _41 = _42 as &[u8] (PointerCoercion(Unsize));
        _40 = slice::<impl [u8]>::to_vec(move _41) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        _54 = (((_39.0: std::ptr::Unique<[std::vec::Vec<u8>; 1]>).0: std::ptr::NonNull<[std::vec::Vec<u8>; 1]>).0: *const [std::vec::Vec<u8>; 1]);
        _55 = _54 as *const () (PtrToPtr);
        _56 = _55 as usize (Transmute);
        _57 = AlignOf([std::vec::Vec<u8>; 1]);
        _58 = Sub(_57, const 1_usize);
        _59 = BitAnd(_56, _58);
        _60 = Eq(_59, const 0_usize);
        assert(_60, "misaligned pointer dereference: address must be a multiple of {} but is {}", _57, _56) -> [success: bb30, unwind unreachable];
    }

    bb20: {
        _31 = Headers::set_raw::<&str>(move _32, const "WWW-Authenticate", move _33) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        _48 = const "authorization error";
        _47 = <str as ToOwned>::to_owned(_48) -> [return: bb22, unwind: bb25];
    }

    bb22: {
        _46 = StringError(move _47);
        _45 = std::boxed::Box::<StringError>::new(move _46) -> [return: bb23, unwind: bb25];
    }

    bb23: {
        _44 = move _45 as std::boxed::Box<dyn iron::Error + std::marker::Send> (PointerCoercion(Unsize));
        _49 = move _29;
        _43 = IronError { error: move _44, response: move _49 };
        _0 = Result::<(), IronError>::Err(move _43);
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_29) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_21) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_17) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        _52 = &mut _39;
        _53 = <std::boxed::Box<[Vec<u8>; 1]> as Drop>::drop(move _52) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb30: {
        (*_54) = [move _40];
        _35 = move _39;
        _34 = move _35 as std::boxed::Box<[std::vec::Vec<u8>]> (PointerCoercion(Unsize));
        _33 = slice::<impl [Vec<u8>]>::into_vec::<std::alloc::Global>(move _34) -> [return: bb20, unwind: bb25];
    }

    bb31 (cleanup): {
        goto -> bb25;
    }
}

alloc4 (size: 18, align: 1) {
    0x00 │ 42 61 73 69 63 20 72 65 61 6c 6d 3d 22 6d 61 69 │ Basic realm="mai
    0x10 │ 6e 22                                           │ n"
}

fn compress::<impl at src/middlewares/compress.rs:15:1: 15:28>::write_body(_1: &mut GzipBody, _2: &mut dyn std::io::Write) -> Result<(), std::io::Error> {
    debug self => _1;
    debug w => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: flate2::write::GzEncoder<&mut dyn std::io::Write>;
    let mut _4: flate2::Compression;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _6: std::result::Result<(), std::io::Error>;
    let mut _7: &mut dyn iron::response::WriteBody;
    let mut _8: &mut dyn std::io::Write;
    let mut _9: &mut flate2::write::GzEncoder<&mut dyn std::io::Write>;
    let mut _10: isize;
    let mut _12: std::result::Result<&mut dyn std::io::Write, std::io::Error>;
    let mut _13: flate2::write::GzEncoder<&mut dyn std::io::Write>;
    let mut _14: std::boxed::Box<dyn iron::response::WriteBody>;
    let mut _15: bool;
    let mut _16: *const dyn iron::response::WriteBody;
    scope 1 {
        debug w => _3;
        let _11: std::result::Result<std::convert::Infallible, std::io::Error>;
        scope 2 {
            debug residual => _11;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
    }

    bb0: {
        _15 = const false;
        _4 = <Compression as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _15 = const true;
        _3 = flate2::write::GzEncoder::<&mut dyn std::io::Write>::new(move _2, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _14 = deref_copy ((*_1).0: std::boxed::Box<dyn iron::response::WriteBody>);
        _16 = (((_14.0: std::ptr::Unique<dyn iron::response::WriteBody>).0: std::ptr::NonNull<dyn iron::response::WriteBody>).0: *const dyn iron::response::WriteBody);
        _7 = &mut (*_16);
        _9 = &mut _3;
        _8 = _9 as &mut dyn std::io::Write (PointerCoercion(Unsize));
        _6 = <dyn WriteBody as WriteBody>::write_body(move _7, move _8) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _5 = <Result<(), std::io::Error> as Try>::branch(move _6) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _15 = const false;
        _13 = move _3;
        _12 = flate2::write::GzEncoder::<&mut dyn std::io::Write>::finish(move _13) -> [return: bb9, unwind: bb15];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _11 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _11) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        drop(_3) -> [return: bb11, unwind continue];
    }

    bb9: {
        _0 = Result::<&mut dyn std::io::Write, std::io::Error>::map::<(), {closure@src/middlewares/compress.rs:19:24: 19:27}>(move _12, const ZeroSized: {closure@src/middlewares/compress.rs:19:24: 19:27}) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _15 = const false;
        goto -> bb12;
    }

    bb11: {
        _15 = const false;
        goto -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_15) -> [0: bb13, otherwise: bb14];
    }
}

fn compress::<impl at src/middlewares/compress.rs:15:1: 15:28>::write_body::{closure#0}(_1: {closure@src/middlewares/compress.rs:19:24: 19:27}, _2: &mut dyn std::io::Write) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn compress::<impl at src/middlewares/compress.rs:23:1: 23:31>::write_body(_1: &mut DeflateBody, _2: &mut dyn std::io::Write) -> Result<(), std::io::Error> {
    debug self => _1;
    debug w => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: flate2::write::DeflateEncoder<&mut dyn std::io::Write>;
    let mut _4: flate2::Compression;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _6: std::result::Result<(), std::io::Error>;
    let mut _7: &mut dyn iron::response::WriteBody;
    let mut _8: &mut dyn std::io::Write;
    let mut _9: &mut flate2::write::DeflateEncoder<&mut dyn std::io::Write>;
    let mut _10: isize;
    let mut _12: std::result::Result<&mut dyn std::io::Write, std::io::Error>;
    let mut _13: flate2::write::DeflateEncoder<&mut dyn std::io::Write>;
    let mut _14: std::boxed::Box<dyn iron::response::WriteBody>;
    let mut _15: bool;
    let mut _16: *const dyn iron::response::WriteBody;
    scope 1 {
        debug w => _3;
        let _11: std::result::Result<std::convert::Infallible, std::io::Error>;
        scope 2 {
            debug residual => _11;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
    }

    bb0: {
        _15 = const false;
        _4 = <Compression as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _15 = const true;
        _3 = flate2::write::DeflateEncoder::<&mut dyn std::io::Write>::new(move _2, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _14 = deref_copy ((*_1).0: std::boxed::Box<dyn iron::response::WriteBody>);
        _16 = (((_14.0: std::ptr::Unique<dyn iron::response::WriteBody>).0: std::ptr::NonNull<dyn iron::response::WriteBody>).0: *const dyn iron::response::WriteBody);
        _7 = &mut (*_16);
        _9 = &mut _3;
        _8 = _9 as &mut dyn std::io::Write (PointerCoercion(Unsize));
        _6 = <dyn WriteBody as WriteBody>::write_body(move _7, move _8) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _5 = <Result<(), std::io::Error> as Try>::branch(move _6) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _15 = const false;
        _13 = move _3;
        _12 = flate2::write::DeflateEncoder::<&mut dyn std::io::Write>::finish(move _13) -> [return: bb9, unwind: bb15];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _11 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _11) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        drop(_3) -> [return: bb11, unwind continue];
    }

    bb9: {
        _0 = Result::<&mut dyn std::io::Write, std::io::Error>::map::<(), {closure@src/middlewares/compress.rs:27:24: 27:27}>(move _12, const ZeroSized: {closure@src/middlewares/compress.rs:27:24: 27:27}) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _15 = const false;
        goto -> bb12;
    }

    bb11: {
        _15 = const false;
        goto -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_15) -> [0: bb13, otherwise: bb14];
    }
}

fn compress::<impl at src/middlewares/compress.rs:23:1: 23:31>::write_body::{closure#0}(_1: {closure@src/middlewares/compress.rs:27:24: 27:27}, _2: &mut dyn std::io::Write) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn compress::<impl at src/middlewares/compress.rs:33:1: 33:44>::after(_1: &CompressionHandler, _2: &mut iron::Request<'_, '_>, _3: iron::Response) -> Result<iron::Response, IronError> {
    debug self => _1;
    debug resp => _3;
    let mut _0: std::result::Result<iron::Response, iron::IronError>;
    let mut _4: std::option::Option<&iron::headers::ContentLength>;
    let mut _5: &iron::Headers;
    let mut _6: isize;
    let mut _8: bool;
    let _9: bool;
    let mut _10: &mut iron::Headers;
    let mut _11: iron::Response;
    let mut _12: std::option::Option<iron::headers::Encoding>;
    let mut _13: std::option::Option<&iron::headers::ContentEncoding>;
    let mut _14: &iron::Headers;
    let mut _15: isize;
    let mut _17: std::option::Option<iron::headers::Encoding>;
    let mut _18: std::option::Option<&iron::headers::Encoding>;
    let mut _19: &mut std::slice::Iter<'_, iron::headers::Encoding>;
    let mut _20: std::slice::Iter<'_, iron::headers::Encoding>;
    let _21: &[iron::headers::Encoding];
    let mut _22: bool;
    let mut _23: &std::option::Option<iron::headers::Encoding>;
    let mut _24: std::option::Option<&iron::headers::TransferEncoding>;
    let mut _25: &iron::Headers;
    let mut _26: isize;
    let mut _28: std::option::Option<iron::headers::Encoding>;
    let mut _29: std::option::Option<&iron::headers::Encoding>;
    let mut _30: &mut std::slice::Iter<'_, iron::headers::Encoding>;
    let mut _31: std::slice::Iter<'_, iron::headers::Encoding>;
    let _32: &[iron::headers::Encoding];
    let mut _33: bool;
    let mut _34: &std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>;
    let mut _35: isize;
    let mut _36: isize;
    let _37: bool;
    let mut _38: &mut iron::Headers;
    let mut _39: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>;
    let mut _40: std::boxed::Box<dyn iron::response::WriteBody>;
    let mut _41: std::boxed::Box<middlewares::compress::GzipBody>;
    let mut _42: middlewares::compress::GzipBody;
    let mut _43: std::boxed::Box<dyn iron::response::WriteBody>;
    let mut _44: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>;
    let mut _45: &mut std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>;
    let _46: bool;
    let mut _47: &mut iron::Headers;
    let mut _48: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>;
    let mut _49: std::boxed::Box<dyn iron::response::WriteBody>;
    let mut _50: std::boxed::Box<middlewares::compress::DeflateBody>;
    let mut _51: middlewares::compress::DeflateBody;
    let mut _52: std::boxed::Box<dyn iron::response::WriteBody>;
    let mut _53: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>;
    let mut _54: &mut std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>;
    let mut _55: iron::Response;
    let mut _56: &iron::headers::ContentLength;
    let mut _57: &iron::headers::ContentEncoding;
    let mut _58: &iron::headers::TransferEncoding;
    let mut _59: bool;
    let mut _60: bool;
    scope 1 {
        debug length => _7;
        let _7: u64;
    }
    scope 2 {
        debug encoding => _12;
        scope 3 {
            debug objs => _16;
            let _16: &std::vec::Vec<iron::headers::Encoding>;
        }
        scope 4 {
            debug objs => _27;
            let _27: &std::vec::Vec<iron::headers::Encoding>;
        }
    }

    bb0: {
        _59 = const false;
        _60 = const false;
        _59 = const true;
        _60 = const true;
        _5 = &(_3.1: iron::Headers);
        _4 = Headers::get::<ContentLength>(move _5) -> [return: bb1, unwind: bb52];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [1: bb2, otherwise: bb5];
    }

    bb2: {
        _56 = deref_copy ((_4 as Some).0: &iron::headers::ContentLength);
        _7 = ((*_56).0: u64);
        _8 = Le(_7, const 256_u64);
        switchInt(move _8) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _10 = &mut (_3.1: iron::Headers);
        _9 = Headers::remove::<ContentEncoding>(move _10) -> [return: bb4, unwind: bb52];
    }

    bb4: {
        _59 = const false;
        _60 = const false;
        _11 = move _3;
        _0 = Result::<iron::Response, IronError>::Ok(move _11);
        goto -> bb44;
    }

    bb5: {
        _12 = Option::<Encoding>::None;
        _14 = &(_3.1: iron::Headers);
        _13 = Headers::get::<ContentEncoding>(move _14) -> [return: bb6, unwind: bb45];
    }

    bb6: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [1: bb7, otherwise: bb14];
    }

    bb7: {
        _57 = deref_copy ((_13 as Some).0: &iron::headers::ContentEncoding);
        _16 = &((*_57).0: std::vec::Vec<iron::headers::Encoding>);
        _21 = <Vec<Encoding> as Deref>::deref(_16) -> [return: bb8, unwind: bb45];
    }

    bb8: {
        _20 = core::slice::<impl [Encoding]>::iter(_21) -> [return: bb9, unwind: bb45];
    }

    bb9: {
        _19 = &mut _20;
        _18 = <std::slice::Iter<'_, Encoding> as Iterator>::find::<{closure@src/middlewares/compress.rs:46:23: 46:28}>(move _19, const ZeroSized: {closure@src/middlewares/compress.rs:46:23: 46:28}) -> [return: bb10, unwind: bb45];
    }

    bb10: {
        _17 = Option::<&Encoding>::cloned(move _18) -> [return: bb11, unwind: bb45];
    }

    bb11: {
        drop(_12) -> [return: bb12, unwind: bb13];
    }

    bb12: {
        _12 = move _17;
        goto -> bb14;
    }

    bb13 (cleanup): {
        _12 = move _17;
        goto -> bb45;
    }

    bb14: {
        _23 = &_12;
        _22 = Option::<Encoding>::is_none(move _23) -> [return: bb15, unwind: bb45];
    }

    bb15: {
        switchInt(move _22) -> [0: bb25, otherwise: bb16];
    }

    bb16: {
        _25 = &(_3.1: iron::Headers);
        _24 = Headers::get::<TransferEncoding>(move _25) -> [return: bb17, unwind: bb45];
    }

    bb17: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [1: bb18, otherwise: bb25];
    }

    bb18: {
        _58 = deref_copy ((_24 as Some).0: &iron::headers::TransferEncoding);
        _27 = &((*_58).0: std::vec::Vec<iron::headers::Encoding>);
        _32 = <Vec<Encoding> as Deref>::deref(_27) -> [return: bb19, unwind: bb45];
    }

    bb19: {
        _31 = core::slice::<impl [Encoding]>::iter(_32) -> [return: bb20, unwind: bb45];
    }

    bb20: {
        _30 = &mut _31;
        _29 = <std::slice::Iter<'_, Encoding> as Iterator>::find::<{closure@src/middlewares/compress.rs:53:27: 53:32}>(move _30, const ZeroSized: {closure@src/middlewares/compress.rs:53:27: 53:32}) -> [return: bb21, unwind: bb45];
    }

    bb21: {
        _28 = Option::<&Encoding>::cloned(move _29) -> [return: bb22, unwind: bb45];
    }

    bb22: {
        drop(_12) -> [return: bb23, unwind: bb24];
    }

    bb23: {
        _12 = move _28;
        goto -> bb25;
    }

    bb24 (cleanup): {
        _12 = move _28;
        goto -> bb45;
    }

    bb25: {
        _34 = &(_3.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>);
        _33 = Option::<std::boxed::Box<dyn WriteBody>>::is_some(move _34) -> [return: bb26, unwind: bb45];
    }

    bb26: {
        switchInt(move _33) -> [0: bb43, otherwise: bb27];
    }

    bb27: {
        _36 = discriminant(_12);
        switchInt(move _36) -> [1: bb28, otherwise: bb43];
    }

    bb28: {
        _35 = discriminant(((_12 as Some).0: iron::headers::Encoding));
        switchInt(move _35) -> [1: bb29, 2: bb36, otherwise: bb43];
    }

    bb29: {
        _38 = &mut (_3.1: iron::Headers);
        _37 = Headers::remove::<ContentLength>(move _38) -> [return: bb30, unwind: bb45];
    }

    bb30: {
        _45 = &mut (_3.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>);
        _44 = Option::<std::boxed::Box<dyn WriteBody>>::take(move _45) -> [return: bb31, unwind: bb45];
    }

    bb31: {
        _43 = Option::<std::boxed::Box<dyn WriteBody>>::unwrap(move _44) -> [return: bb32, unwind: bb45];
    }

    bb32: {
        _42 = GzipBody(move _43);
        _41 = std::boxed::Box::<GzipBody>::new(move _42) -> [return: bb33, unwind: bb45];
    }

    bb33: {
        _40 = move _41 as std::boxed::Box<dyn iron::response::WriteBody> (PointerCoercion(Unsize));
        _39 = Option::<std::boxed::Box<dyn WriteBody>>::Some(move _40);
        drop((_3.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>)) -> [return: bb34, unwind: bb35];
    }

    bb34: {
        _60 = const true;
        (_3.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>) = move _39;
        goto -> bb43;
    }

    bb35 (cleanup): {
        _60 = const true;
        (_3.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>) = move _39;
        goto -> bb45;
    }

    bb36: {
        _47 = &mut (_3.1: iron::Headers);
        _46 = Headers::remove::<ContentLength>(move _47) -> [return: bb37, unwind: bb45];
    }

    bb37: {
        _54 = &mut (_3.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>);
        _53 = Option::<std::boxed::Box<dyn WriteBody>>::take(move _54) -> [return: bb38, unwind: bb45];
    }

    bb38: {
        _52 = Option::<std::boxed::Box<dyn WriteBody>>::unwrap(move _53) -> [return: bb39, unwind: bb45];
    }

    bb39: {
        _51 = DeflateBody(move _52);
        _50 = std::boxed::Box::<DeflateBody>::new(move _51) -> [return: bb40, unwind: bb45];
    }

    bb40: {
        _49 = move _50 as std::boxed::Box<dyn iron::response::WriteBody> (PointerCoercion(Unsize));
        _48 = Option::<std::boxed::Box<dyn WriteBody>>::Some(move _49);
        drop((_3.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>)) -> [return: bb41, unwind: bb42];
    }

    bb41: {
        _60 = const true;
        (_3.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>) = move _48;
        goto -> bb43;
    }

    bb42 (cleanup): {
        _60 = const true;
        (_3.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>) = move _48;
        goto -> bb45;
    }

    bb43: {
        _59 = const false;
        _60 = const false;
        _55 = move _3;
        _0 = Result::<iron::Response, IronError>::Ok(move _55);
        drop(_12) -> [return: bb44, unwind: bb52];
    }

    bb44: {
        return;
    }

    bb45 (cleanup): {
        drop(_12) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        resume;
    }

    bb47 (cleanup): {
        switchInt(_60) -> [0: bb46, otherwise: bb48];
    }

    bb48 (cleanup): {
        drop((_3.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>)) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop((_3.2: iron::TypeMap<dyn unsafe_any::UnsafeAny>)) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_59) -> [0: bb47, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop((_3.1: iron::Headers)) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_59) -> [0: bb50, otherwise: bb51];
    }
}

fn compress::<impl at src/middlewares/compress.rs:33:1: 33:44>::after::{closure#0}(_1: &mut {closure@src/middlewares/compress.rs:46:23: 46:28}, _2: &&Encoding) -> bool {
    debug obj => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &&iron::headers::Encoding;
    let mut _5: &&iron::headers::Encoding;

    bb0: {
        _5 = const _;
        _3 = <&Encoding as PartialEq>::eq(_2, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const true;
        goto -> bb4;
    }

    bb3: {
        _4 = const _;
        _0 = <&Encoding as PartialEq>::eq(_2, _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in compress::<impl at src/middlewares/compress.rs:33:1: 33:44>::after::{closure#0}: &&Encoding = {
    let mut _0: &&iron::headers::Encoding;
    let mut _1: &iron::headers::Encoding;
    let mut _2: iron::headers::Encoding;

    bb0: {
        _2 = Gzip;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in compress::<impl at src/middlewares/compress.rs:33:1: 33:44>::after::{closure#0}: &&Encoding = {
    let mut _0: &&iron::headers::Encoding;
    let mut _1: &iron::headers::Encoding;
    let mut _2: iron::headers::Encoding;

    bb0: {
        _2 = Deflate;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

fn compress::<impl at src/middlewares/compress.rs:33:1: 33:44>::after::{closure#1}(_1: &mut {closure@src/middlewares/compress.rs:53:27: 53:32}, _2: &&Encoding) -> bool {
    debug obj => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &&iron::headers::Encoding;
    let mut _5: &&iron::headers::Encoding;

    bb0: {
        _5 = const _;
        _3 = <&Encoding as PartialEq>::eq(_2, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const true;
        goto -> bb4;
    }

    bb3: {
        _4 = const _;
        _0 = <&Encoding as PartialEq>::eq(_2, _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in compress::<impl at src/middlewares/compress.rs:33:1: 33:44>::after::{closure#1}: &&Encoding = {
    let mut _0: &&iron::headers::Encoding;
    let mut _1: &iron::headers::Encoding;
    let mut _2: iron::headers::Encoding;

    bb0: {
        _2 = Gzip;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in compress::<impl at src/middlewares/compress.rs:33:1: 33:44>::after::{closure#1}: &&Encoding = {
    let mut _0: &&iron::headers::Encoding;
    let mut _1: &iron::headers::Encoding;
    let mut _2: iron::headers::Encoding;

    bb0: {
        _2 = Deflate;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

static C_BOLD_GREEN: C_BOLD_GREEN = {
    let mut _0: middlewares::logger::C_BOLD_GREEN;
    let mut _1: ();

    bb0: {
        StorageLive(_1);
        _1 = ();
        _0 = C_BOLD_GREEN { __private_field: move _1 };
        StorageDead(_1);
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref(_1: &C_BOLD_GREEN) -> &Option<ColorSpec> {
    debug self => _1;
    let mut _0: &std::option::Option<termcolor::ColorSpec>;

    bb0: {
        _0 = <C_BOLD_GREEN as Deref>::deref::__stability() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__static_ref_initialize() -> Option<ColorSpec> {
    let mut _0: std::option::Option<termcolor::ColorSpec>;
    let mut _1: termcolor::ColorSpec;
    let mut _2: std::option::Option<termcolor::Color>;
    let mut _3: termcolor::Color;

    bb0: {
        _3 = Green;
        _2 = Option::<Color>::Some(move _3);
        _1 = build_spec(move _2, const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Option::<ColorSpec>::Some(move _1);
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability() -> &Option<ColorSpec> {
    let mut _0: &std::option::Option<termcolor::ColorSpec>;
    let _1: &lazy_static::lazy::Lazy<std::option::Option<termcolor::ColorSpec>>;

    bb0: {
        _1 = const {alloc5: &Lazy<Option<ColorSpec>>};
        _0 = Lazy::<Option<ColorSpec>>::get::<fn() -> Option<ColorSpec> {<C_BOLD_GREEN as Deref>::deref::__static_ref_initialize}>(_1, <C_BOLD_GREEN as Deref>::deref::__static_ref_initialize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc5 (static: <C_BOLD_GREEN as Deref>::deref::__stability::LAZY, size: 16, align: 4) {
    00 00 00 00 03 __ __ __ __ __ __ __ __ __ __ __ │ .....░░░░░░░░░░░
}

static logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability::LAZY: Lazy<Option<ColorSpec>> = {
    let mut _0: lazy_static::lazy::Lazy<std::option::Option<termcolor::ColorSpec>>;

    bb0: {
        _0 = const _;
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:147:9: 147:39>::initialize(_1: &C_BOLD_GREEN) -> () {
    debug lazy => _1;
    let mut _0: ();
    let _2: &std::option::Option<termcolor::ColorSpec>;
    scope 1 {
    }

    bb0: {
        _2 = <C_BOLD_GREEN as Deref>::deref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

static C_BOLD_YELLOW: C_BOLD_YELLOW = {
    let mut _0: middlewares::logger::C_BOLD_YELLOW;
    let mut _1: ();

    bb0: {
        StorageLive(_1);
        _1 = ();
        _0 = C_BOLD_YELLOW { __private_field: move _1 };
        StorageDead(_1);
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref(_1: &C_BOLD_YELLOW) -> &Option<ColorSpec> {
    debug self => _1;
    let mut _0: &std::option::Option<termcolor::ColorSpec>;

    bb0: {
        _0 = <C_BOLD_YELLOW as Deref>::deref::__stability() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__static_ref_initialize() -> Option<ColorSpec> {
    let mut _0: std::option::Option<termcolor::ColorSpec>;
    let mut _1: termcolor::ColorSpec;
    let mut _2: std::option::Option<termcolor::Color>;
    let mut _3: termcolor::Color;

    bb0: {
        _3 = Yellow;
        _2 = Option::<Color>::Some(move _3);
        _1 = build_spec(move _2, const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Option::<ColorSpec>::Some(move _1);
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability() -> &Option<ColorSpec> {
    let mut _0: &std::option::Option<termcolor::ColorSpec>;
    let _1: &lazy_static::lazy::Lazy<std::option::Option<termcolor::ColorSpec>>;

    bb0: {
        _1 = const {alloc6: &Lazy<Option<ColorSpec>>};
        _0 = Lazy::<Option<ColorSpec>>::get::<fn() -> Option<ColorSpec> {<C_BOLD_YELLOW as Deref>::deref::__static_ref_initialize}>(_1, <C_BOLD_YELLOW as Deref>::deref::__static_ref_initialize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc6 (static: <C_BOLD_YELLOW as Deref>::deref::__stability::LAZY, size: 16, align: 4) {
    00 00 00 00 03 __ __ __ __ __ __ __ __ __ __ __ │ .....░░░░░░░░░░░
}

static logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability::LAZY: Lazy<Option<ColorSpec>> = {
    let mut _0: lazy_static::lazy::Lazy<std::option::Option<termcolor::ColorSpec>>;

    bb0: {
        _0 = const _;
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:147:9: 147:39>::initialize(_1: &C_BOLD_YELLOW) -> () {
    debug lazy => _1;
    let mut _0: ();
    let _2: &std::option::Option<termcolor::ColorSpec>;
    scope 1 {
    }

    bb0: {
        _2 = <C_BOLD_YELLOW as Deref>::deref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

static C_BOLD_RED: C_BOLD_RED = {
    let mut _0: middlewares::logger::C_BOLD_RED;
    let mut _1: ();

    bb0: {
        StorageLive(_1);
        _1 = ();
        _0 = C_BOLD_RED { __private_field: move _1 };
        StorageDead(_1);
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref(_1: &C_BOLD_RED) -> &Option<ColorSpec> {
    debug self => _1;
    let mut _0: &std::option::Option<termcolor::ColorSpec>;

    bb0: {
        _0 = <C_BOLD_RED as Deref>::deref::__stability() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__static_ref_initialize() -> Option<ColorSpec> {
    let mut _0: std::option::Option<termcolor::ColorSpec>;
    let mut _1: termcolor::ColorSpec;
    let mut _2: std::option::Option<termcolor::Color>;
    let mut _3: termcolor::Color;

    bb0: {
        _3 = Red;
        _2 = Option::<Color>::Some(move _3);
        _1 = build_spec(move _2, const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Option::<ColorSpec>::Some(move _1);
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability() -> &Option<ColorSpec> {
    let mut _0: &std::option::Option<termcolor::ColorSpec>;
    let _1: &lazy_static::lazy::Lazy<std::option::Option<termcolor::ColorSpec>>;

    bb0: {
        _1 = const {alloc7: &Lazy<Option<ColorSpec>>};
        _0 = Lazy::<Option<ColorSpec>>::get::<fn() -> Option<ColorSpec> {<C_BOLD_RED as Deref>::deref::__static_ref_initialize}>(_1, <C_BOLD_RED as Deref>::deref::__static_ref_initialize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc7 (static: <C_BOLD_RED as Deref>::deref::__stability::LAZY, size: 16, align: 4) {
    00 00 00 00 03 __ __ __ __ __ __ __ __ __ __ __ │ .....░░░░░░░░░░░
}

static logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability::LAZY: Lazy<Option<ColorSpec>> = {
    let mut _0: lazy_static::lazy::Lazy<std::option::Option<termcolor::ColorSpec>>;

    bb0: {
        _0 = const _;
        return;
    }
}

fn logger::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:147:9: 147:39>::initialize(_1: &C_BOLD_RED) -> () {
    debug lazy => _1;
    let mut _0: ();
    let _2: &std::option::Option<termcolor::ColorSpec>;
    scope 1 {
    }

    bb0: {
        _2 = <C_BOLD_RED as Deref>::deref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn logger::<impl at src/middlewares/logger.rs:22:1: 22:19>::log(_1: &RequestLogger, _2: &iron::Request<'_, '_>, _3: &iron::Response) -> () {
    debug self => _1;
    debug req => _2;
    debug resp => _3;
    let mut _0: ();
    let mut _4: isize;
    let mut _7: bool;
    let mut _8: &iron::status::Status;
    let _9: &middlewares::logger::C_BOLD_GREEN;
    let _10: &std::option::Option<termcolor::ColorSpec>;
    let mut _11: bool;
    let mut _12: &iron::status::Status;
    let mut _13: bool;
    let mut _14: &iron::status::Status;
    let _15: &middlewares::logger::C_BOLD_YELLOW;
    let _16: &std::option::Option<termcolor::ColorSpec>;
    let _17: &middlewares::logger::C_BOLD_RED;
    let _18: ();
    let mut _19: std::result::Result<(), util::StringError>;
    let mut _20: &color::Printer;
    let _21: &str;
    let mut _22: &[(&str, &std::option::Option<termcolor::ColorSpec>)];
    let _23: &[(&str, &std::option::Option<termcolor::ColorSpec>); 5];
    let _24: [(&str, &std::option::Option<termcolor::ColorSpec>); 5];
    let mut _25: (&str, &std::option::Option<termcolor::ColorSpec>);
    let _26: &str;
    let mut _27: &std::string::String;
    let _28: std::string::String;
    let mut _29: (&str, &std::option::Option<termcolor::ColorSpec>);
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: std::string::String;
    let mut _33: &std::net::IpAddr;
    let _34: std::net::IpAddr;
    let mut _35: &std::net::SocketAddr;
    let mut _36: (&str, &std::option::Option<termcolor::ColorSpec>);
    let _37: &str;
    let mut _38: &std::string::String;
    let _39: std::string::String;
    let mut _40: &u16;
    let _41: u16;
    let mut _42: &iron::status::Status;
    let mut _43: &std::option::Option<termcolor::ColorSpec>;
    let mut _44: (&str, &std::option::Option<termcolor::ColorSpec>);
    let _45: &str;
    let mut _46: &std::string::String;
    let _47: std::string::String;
    let mut _48: &iron::method::Method;
    let mut _49: (&str, &std::option::Option<termcolor::ColorSpec>);
    let _50: &str;
    let mut _51: &std::string::String;
    let _52: std::string::String;
    let mut _53: &std::borrow::Cow<'_, str>;
    let _54: std::borrow::Cow<'_, str>;
    let mut _55: std::result::Result<std::borrow::Cow<'_, str>, std::str::Utf8Error>;
    let mut _56: percent_encoding::PercentDecode<'_>;
    let _57: &[u8];
    let _58: &str;
    let _59: &iron::url::Url;
    let mut _60: &iron::Url;
    let _61: ();
    let mut _62: std::fmt::Arguments<'_>;
    let mut _63: &[&str];
    let mut _64: &[&str; 1];
    scope 1 {
        debug status => _5;
        let _5: iron::status::Status;
        let _6: &std::option::Option<termcolor::ColorSpec>;
        scope 2 {
            debug status_color => _6;
            let mut _65: &std::option::Option<termcolor::ColorSpec>;
            let mut _66: &std::option::Option<termcolor::ColorSpec>;
            let mut _67: &std::option::Option<termcolor::ColorSpec>;
            let mut _68: &std::option::Option<termcolor::ColorSpec>;
        }
    }

    bb0: {
        _4 = discriminant(((*_3).0: std::option::Option<iron::status::Status>));
        switchInt(move _4) -> [1: bb1, otherwise: bb38];
    }

    bb1: {
        _5 = ((((*_3).0: std::option::Option<iron::status::Status>) as Some).0: iron::status::Status);
        _8 = &_5;
        _7 = StatusCode::is_success(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = const {alloc8: &C_BOLD_GREEN};
        _6 = <C_BOLD_GREEN as Deref>::deref(_9) -> [return: bb12, unwind continue];
    }

    bb4: {
        _12 = &_5;
        _11 = StatusCode::is_informational(move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _11) -> [0: bb6, otherwise: bb8];
    }

    bb6: {
        _14 = &_5;
        _13 = StatusCode::is_redirection(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _13) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _15 = const {alloc9: &C_BOLD_YELLOW};
        _10 = <C_BOLD_YELLOW as Deref>::deref(_15) -> [return: bb11, unwind continue];
    }

    bb9: {
        _17 = const {alloc10: &C_BOLD_RED};
        _16 = <C_BOLD_RED as Deref>::deref(_17) -> [return: bb10, unwind continue];
    }

    bb10: {
        _10 = _16;
        goto -> bb11;
    }

    bb11: {
        _6 = _10;
        goto -> bb12;
    }

    bb12: {
        _20 = &((*_1).0: color::Printer);
        _21 = const "[{}] - {} - {} - {} {}";
        _28 = now_string() -> [return: bb13, unwind continue];
    }

    bb13: {
        _27 = &_28;
        _26 = String::as_str(move _27) -> [return: bb14, unwind: bb46];
    }

    bb14: {
        _68 = const _;
        _25 = (_26, _68);
        _35 = &((*_2).1: std::net::SocketAddr);
        _34 = std::net::SocketAddr::ip(move _35) -> [return: bb15, unwind: bb46];
    }

    bb15: {
        _33 = &_34;
        _32 = <IpAddr as ToString>::to_string(move _33) -> [return: bb16, unwind: bb46];
    }

    bb16: {
        _31 = &_32;
        _30 = String::as_str(move _31) -> [return: bb17, unwind: bb45];
    }

    bb17: {
        _67 = const _;
        _29 = (_30, _67);
        _42 = &_5;
        _41 = StatusCode::to_u16(move _42) -> [return: bb18, unwind: bb45];
    }

    bb18: {
        _40 = &_41;
        _39 = <u16 as ToString>::to_string(move _40) -> [return: bb19, unwind: bb45];
    }

    bb19: {
        _38 = &_39;
        _37 = String::as_str(move _38) -> [return: bb20, unwind: bb44];
    }

    bb20: {
        _43 = _6;
        _36 = (_37, move _43);
        _48 = &((*_2).5: iron::method::Method);
        _47 = <iron::method::Method as ToString>::to_string(move _48) -> [return: bb21, unwind: bb44];
    }

    bb21: {
        _46 = &_47;
        _45 = String::as_str(move _46) -> [return: bb22, unwind: bb43];
    }

    bb22: {
        _66 = const _;
        _44 = (_45, _66);
        _60 = &((*_2).0: iron::Url);
        _59 = <iron::Url as AsRef<iron::url::Url>>::as_ref(move _60) -> [return: bb23, unwind: bb43];
    }

    bb23: {
        _58 = iron::url::Url::path(_59) -> [return: bb24, unwind: bb43];
    }

    bb24: {
        _57 = core::str::<impl str>::as_bytes(_58) -> [return: bb25, unwind: bb43];
    }

    bb25: {
        _56 = percent_encoding::percent_decode(_57) -> [return: bb26, unwind: bb43];
    }

    bb26: {
        _55 = percent_encoding::PercentDecode::<'_>::decode_utf8(move _56) -> [return: bb27, unwind: bb43];
    }

    bb27: {
        _54 = Result::<Cow<'_, str>, std::str::Utf8Error>::unwrap(move _55) -> [return: bb28, unwind: bb43];
    }

    bb28: {
        _53 = &_54;
        _52 = <Cow<'_, str> as ToString>::to_string(move _53) -> [return: bb29, unwind: bb42];
    }

    bb29: {
        _51 = &_52;
        _50 = String::as_str(move _51) -> [return: bb30, unwind: bb41];
    }

    bb30: {
        _65 = const _;
        _49 = (_50, _65);
        _24 = [move _25, move _29, move _36, move _44, move _49];
        _23 = &_24;
        _22 = _23 as &[(&str, &std::option::Option<termcolor::ColorSpec>)] (PointerCoercion(Unsize));
        _19 = Printer::println_out(move _20, _21, move _22) -> [return: bb31, unwind: bb41];
    }

    bb31: {
        _18 = Result::<(), StringError>::unwrap(move _19) -> [return: bb32, unwind: bb41];
    }

    bb32: {
        drop(_52) -> [return: bb33, unwind: bb42];
    }

    bb33: {
        drop(_54) -> [return: bb34, unwind: bb43];
    }

    bb34: {
        drop(_47) -> [return: bb35, unwind: bb44];
    }

    bb35: {
        drop(_39) -> [return: bb36, unwind: bb45];
    }

    bb36: {
        drop(_32) -> [return: bb37, unwind: bb46];
    }

    bb37: {
        drop(_28) -> [return: bb40, unwind continue];
    }

    bb38: {
        _64 = const _;
        _63 = _64 as &[&str] (PointerCoercion(Unsize));
        _62 = Arguments::<'_>::new_const(move _63) -> [return: bb39, unwind continue];
    }

    bb39: {
        _61 = _print(move _62) -> [return: bb40, unwind continue];
    }

    bb40: {
        return;
    }

    bb41 (cleanup): {
        drop(_52) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_54) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_47) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_39) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_32) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_28) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }
}

alloc10 (static: C_BOLD_RED, size: 0, align: 1) {}

alloc9 (static: C_BOLD_YELLOW, size: 0, align: 1) {}

alloc8 (static: C_BOLD_GREEN, size: 0, align: 1) {}

promoted[0] in logger::<impl at src/middlewares/logger.rs:22:1: 22:19>::log: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "ERROR: StatusCode missing\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in logger::<impl at src/middlewares/logger.rs:22:1: 22:19>::log: &Option<ColorSpec> = {
    let mut _0: &std::option::Option<termcolor::ColorSpec>;
    let mut _1: std::option::Option<termcolor::ColorSpec>;

    bb0: {
        _1 = Option::<ColorSpec>::None;
        _0 = &_1;
        return;
    }
}

promoted[2] in logger::<impl at src/middlewares/logger.rs:22:1: 22:19>::log: &Option<ColorSpec> = {
    let mut _0: &std::option::Option<termcolor::ColorSpec>;
    let mut _1: std::option::Option<termcolor::ColorSpec>;

    bb0: {
        _1 = Option::<ColorSpec>::None;
        _0 = &_1;
        return;
    }
}

promoted[3] in logger::<impl at src/middlewares/logger.rs:22:1: 22:19>::log: &Option<ColorSpec> = {
    let mut _0: &std::option::Option<termcolor::ColorSpec>;
    let mut _1: std::option::Option<termcolor::ColorSpec>;

    bb0: {
        _1 = Option::<ColorSpec>::None;
        _0 = &_1;
        return;
    }
}

promoted[4] in logger::<impl at src/middlewares/logger.rs:22:1: 22:19>::log: &Option<ColorSpec> = {
    let mut _0: &std::option::Option<termcolor::ColorSpec>;
    let mut _1: std::option::Option<termcolor::ColorSpec>;

    bb0: {
        _1 = Option::<ColorSpec>::None;
        _0 = &_1;
        return;
    }
}

fn logger::<impl at src/middlewares/logger.rs:58:1: 58:39>::after(_1: &RequestLogger, _2: &mut iron::Request<'_, '_>, _3: iron::Response) -> Result<iron::Response, IronError> {
    debug self => _1;
    debug req => _2;
    debug resp => _3;
    let mut _0: std::result::Result<iron::Response, iron::IronError>;
    let _4: ();
    let mut _5: &iron::Request<'_, '_>;
    let _6: &iron::Response;
    let mut _7: iron::Response;

    bb0: {
        _5 = &(*_2);
        _6 = &_3;
        _4 = RequestLogger::log(_1, move _5, _6) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _7 = move _3;
        _0 = Result::<iron::Response, IronError>::Ok(move _7);
        return;
    }

    bb2 (cleanup): {
        drop(_3) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn logger::<impl at src/middlewares/logger.rs:58:1: 58:39>::catch(_1: &RequestLogger, _2: &mut iron::Request<'_, '_>, _3: IronError) -> Result<iron::Response, IronError> {
    debug self => _1;
    debug req => _2;
    debug err => _3;
    let mut _0: std::result::Result<iron::Response, iron::IronError>;
    let _4: ();
    let mut _5: &iron::Request<'_, '_>;
    let _6: &iron::Response;
    let mut _7: bool;
    let mut _8: &std::option::Option<iron::status::Status>;
    let mut _9: iron::IronError;
    let mut _10: iron::Response;
    let mut _11: iron::status::Status;
    let mut _12: std::option::Option<iron::status::Status>;
    let mut _13: iron::status::Status;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: std::string::String;
    let mut _17: &std::boxed::Box<dyn iron::Error + std::marker::Send>;
    let mut _18: &std::option::Option<iron::status::Status>;
    let mut _19: bool;

    bb0: {
        _19 = const false;
        _19 = const true;
        _5 = &(*_2);
        _6 = &(_3.1: iron::Response);
        _4 = RequestLogger::log(_1, move _5, _6) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _8 = &((_3.1: iron::Response).0: std::option::Option<iron::status::Status>);
        _18 = const _;
        _7 = <Option<StatusCode> as PartialEq>::eq(move _8, _18) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _19 = const false;
        _9 = move _3;
        _0 = Result::<iron::Response, IronError>::Err(move _9);
        goto -> bb9;
    }

    bb4: {
        _12 = ((_3.1: iron::Response).0: std::option::Option<iron::status::Status>);
        _13 = InternalServerError;
        _11 = Option::<StatusCode>::unwrap_or(move _12, move _13) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _17 = &(_3.0: std::boxed::Box<dyn iron::Error + std::marker::Send>);
        _16 = <std::boxed::Box<dyn iron::Error + Send> as ToString>::to_string(move _17) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _15 = &_16;
        _14 = String::as_str(move _15) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _10 = error_resp(move _11, _14) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        _0 = Result::<iron::Response, IronError>::Ok(move _10);
        drop(_16) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        switchInt(_19) -> [0: bb10, otherwise: bb14];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_16) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14: {
        drop(_3) -> [return: bb10, unwind continue];
    }
}

promoted[0] in logger::<impl at src/middlewares/logger.rs:58:1: 58:39>::catch: &Option<StatusCode> = {
    let mut _0: &std::option::Option<iron::status::Status>;
    let mut _1: std::option::Option<iron::status::Status>;
    let mut _2: iron::status::Status;

    bb0: {
        _2 = Unauthorized;
        _1 = Option::<StatusCode>::Some(move _2);
        _0 = &_1;
        return;
    }
}

const FRAGMENT_ENCODE_SET: &AsciiSet = {
    let mut _0: &percent_encoding::AsciiSet;
    let _1: &percent_encoding::AsciiSet;
    let _2: percent_encoding::AsciiSet;
    let mut _3: &percent_encoding::AsciiSet;
    let _4: percent_encoding::AsciiSet;
    let mut _5: &percent_encoding::AsciiSet;
    let _6: percent_encoding::AsciiSet;
    let mut _7: &percent_encoding::AsciiSet;
    let _8: percent_encoding::AsciiSet;
    let mut _9: &percent_encoding::AsciiSet;
    let _10: percent_encoding::AsciiSet;
    let mut _11: &percent_encoding::AsciiSet;
    let _12: &percent_encoding::AsciiSet;
    let mut _13: &percent_encoding::AsciiSet;

    bb0: {
        StorageLive(_1);
        _13 = const _;
        _1 = &(*_13);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in FRAGMENT_ENCODE_SET: &AsciiSet = {
    let mut _0: &percent_encoding::AsciiSet;
    let mut _1: percent_encoding::AsciiSet;
    let mut _2: &percent_encoding::AsciiSet;
    let mut _3: percent_encoding::AsciiSet;
    let mut _4: &percent_encoding::AsciiSet;
    let mut _5: percent_encoding::AsciiSet;
    let mut _6: &percent_encoding::AsciiSet;
    let mut _7: percent_encoding::AsciiSet;
    let mut _8: &percent_encoding::AsciiSet;
    let mut _9: percent_encoding::AsciiSet;
    let mut _10: &percent_encoding::AsciiSet;
    let mut _11: &percent_encoding::AsciiSet;

    bb0: {
        _11 = const _;
        _10 = &(*_11);
        _9 = AsciiSet::add(move _10, const 32_u8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        _7 = AsciiSet::add(move _8, const 34_u8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _5 = AsciiSet::add(move _6, const 60_u8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = &_5;
        _3 = AsciiSet::add(move _4, const 62_u8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _2 = &_3;
        _1 = AsciiSet::add(move _2, const 96_u8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = &_1;
        return;
    }
}

const PATH_ENCODE_SET: &AsciiSet = {
    let mut _0: &percent_encoding::AsciiSet;
    let _1: &percent_encoding::AsciiSet;
    let _2: percent_encoding::AsciiSet;
    let mut _3: &percent_encoding::AsciiSet;
    let _4: percent_encoding::AsciiSet;
    let mut _5: &percent_encoding::AsciiSet;
    let _6: percent_encoding::AsciiSet;
    let mut _7: &percent_encoding::AsciiSet;
    let _8: percent_encoding::AsciiSet;
    let mut _9: &percent_encoding::AsciiSet;
    let _10: &percent_encoding::AsciiSet;
    let mut _11: &percent_encoding::AsciiSet;

    bb0: {
        StorageLive(_1);
        _11 = const _;
        _1 = &(*_11);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in PATH_ENCODE_SET: &AsciiSet = {
    let mut _0: &percent_encoding::AsciiSet;
    let mut _1: percent_encoding::AsciiSet;
    let mut _2: &percent_encoding::AsciiSet;
    let mut _3: percent_encoding::AsciiSet;
    let mut _4: &percent_encoding::AsciiSet;
    let mut _5: percent_encoding::AsciiSet;
    let mut _6: &percent_encoding::AsciiSet;
    let mut _7: percent_encoding::AsciiSet;
    let mut _8: &percent_encoding::AsciiSet;
    let mut _9: &percent_encoding::AsciiSet;

    bb0: {
        _9 = const _;
        _8 = &(*_9);
        _7 = AsciiSet::add(move _8, const 35_u8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_7;
        _5 = AsciiSet::add(move _6, const 63_u8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_5;
        _3 = AsciiSet::add(move _4, const 123_u8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = &_3;
        _1 = AsciiSet::add(move _2, const 125_u8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = &_1;
        return;
    }
}

const util::PATH_SEGMENT_ENCODE_SET: &AsciiSet = {
    let mut _0: &percent_encoding::AsciiSet;
    let _1: &percent_encoding::AsciiSet;
    let _2: percent_encoding::AsciiSet;
    let mut _3: &percent_encoding::AsciiSet;
    let _4: percent_encoding::AsciiSet;
    let mut _5: &percent_encoding::AsciiSet;
    let _6: &percent_encoding::AsciiSet;
    let mut _7: &percent_encoding::AsciiSet;

    bb0: {
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in util::PATH_SEGMENT_ENCODE_SET: &AsciiSet = {
    let mut _0: &percent_encoding::AsciiSet;
    let mut _1: percent_encoding::AsciiSet;
    let mut _2: &percent_encoding::AsciiSet;
    let mut _3: percent_encoding::AsciiSet;
    let mut _4: &percent_encoding::AsciiSet;
    let mut _5: &percent_encoding::AsciiSet;

    bb0: {
        _5 = const _;
        _4 = &(*_5);
        _3 = AsciiSet::add(move _4, const 47_u8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = AsciiSet::add(move _2, const 37_u8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = &_1;
        return;
    }
}

const ROOT_LINK: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "<a href=\"/\"><strong>[Root]</strong></a>";
        return;
    }
}

fn util::<impl at src/util.rs:26:10: 26:15>::fmt(_1: &StringError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::string::String;
    let _6: &std::string::String;

    bb0: {
        _3 = const "StringError";
        _6 = &((*_1).0: std::string::String);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn util::<impl at src/util.rs:29:1: 29:34>::fmt(_1: &StringError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _0 = <String as std::fmt::Display>::fmt(_3, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn util::<impl at src/util.rs:35:1: 35:27>::description(_1: &StringError) -> &str {
    debug self => _1;
    let mut _0: &str;
    let _2: &std::string::String;

    bb0: {
        _2 = &((*_1).0: std::string::String);
        _0 = <String as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn util::<impl at src/util.rs:41:1: 41:27>::deref(_1: &StringError) -> &str {
    debug self => _1;
    let mut _0: &str;
    let mut _2: &std::string::String;

    bb0: {
        _2 = &((*_1).0: std::string::String);
        _0 = <String as Deref>::deref(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn enable_string(_1: bool) -> String {
    debug value => _1;
    let mut _0: std::string::String;
    let mut _2: &str;
    let _3: &str;
    let _4: &str;

    bb0: {
        switchInt(_1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = const "enabled";
        goto -> bb3;
    }

    bb2: {
        _4 = const "disabled";
        _3 = _4;
        goto -> bb3;
    }

    bb3: {
        _2 = _3;
        _0 = <str as ToOwned>::to_owned(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn encode_link_path(_1: &[String]) -> String {
    debug path => _1;
    let mut _0: std::string::String;
    let _2: &[std::string::String];
    let mut _3: &std::vec::Vec<std::string::String>;
    let _4: std::vec::Vec<std::string::String>;
    let mut _5: std::iter::Map<std::slice::Iter<'_, std::string::String>, {closure@src/util.rs:55:14: 55:17}>;
    let mut _6: std::slice::Iter<'_, std::string::String>;
    let _7: &str;

    bb0: {
        _6 = core::slice::<impl [String]>::iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <std::slice::Iter<'_, String> as Iterator>::map::<String, {closure@src/util.rs:55:14: 55:17}>(move _6, const ZeroSized: {closure@src/util.rs:55:14: 55:17}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = <Map<std::slice::Iter<'_, String>, {closure@src/util.rs:55:14: 55:17}> as Iterator>::collect::<Vec<String>>(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = &_4;
        _2 = <Vec<String> as Deref>::deref(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _7 = const "/";
        _0 = slice::<impl [String]>::join::<&str>(_2, _7) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn encode_link_path::{closure#0}(_1: &mut {closure@src/util.rs:55:14: 55:17}, _2: &String) -> String {
    debug s => _2;
    let mut _0: std::string::String;
    let mut _3: &percent_encoding::PercentEncode<'_>;
    let _4: percent_encoding::PercentEncode<'_>;
    let _5: &str;

    bb0: {
        _5 = <String as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = percent_encoding::utf8_percent_encode(_5, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _0 = <percent_encoding::PercentEncode<'_> as ToString>::to_string(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn error_io2iron(_1: std::io::Error) -> IronError {
    debug err => _1;
    let mut _0: iron::IronError;
    let _2: iron::status::Status;
    let mut _3: std::io::ErrorKind;
    let mut _4: &std::io::Error;
    let mut _5: isize;
    let mut _6: std::io::Error;
    let mut _7: iron::status::Status;
    let mut _8: bool;
    scope 1 {
        debug status => _2;
    }

    bb0: {
        _8 = const false;
        _8 = const true;
        _4 = &_1;
        _3 = std::io::Error::kind(move _4) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb3, otherwise: bb2];
    }

    bb2: {
        _2 = InternalServerError;
        goto -> bb5;
    }

    bb3: {
        _2 = Forbidden;
        goto -> bb5;
    }

    bb4: {
        _2 = iron::status::NotFound;
        goto -> bb5;
    }

    bb5: {
        _8 = const false;
        _6 = move _1;
        _7 = _2;
        _0 = IronError::new::<std::io::Error, StatusCode>(move _6, move _7) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_8) -> [0: bb7, otherwise: bb8];
    }
}

fn now_string() -> String {
    let mut _0: std::string::String;
    let mut _1: &chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let _2: chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let mut _3: &chrono::DateTime<chrono::Local>;
    let _4: chrono::DateTime<chrono::Local>;
    let _5: &str;

    bb0: {
        _4 = Local::now() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _5 = const "%Y-%m-%d %H:%M:%S";
        _2 = DateTime::<Local>::format(move _3, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = &_2;
        _0 = <DelayedFormat<StrftimeItems<'_>> as ToString>::to_string(move _1) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn system_time_to_date_time(_1: SystemTime) -> DateTime<Local> {
    debug t => _1;
    let mut _0: chrono::DateTime<chrono::Local>;
    let _2: i64;
    let _3: u32;
    let mut _4: (i64, u32);
    let mut _5: std::result::Result<std::time::Duration, std::time::SystemTimeError>;
    let mut _6: &std::time::SystemTime;
    let mut _7: isize;
    let _8: std::time::Duration;
    let mut _9: i64;
    let mut _10: u64;
    let mut _11: &std::time::Duration;
    let mut _12: u32;
    let mut _13: &std::time::Duration;
    let _14: std::time::SystemTimeError;
    let mut _16: &std::time::SystemTimeError;
    let mut _19: (i64, u32);
    let mut _20: i64;
    let mut _21: u64;
    let mut _22: &std::time::Duration;
    let mut _23: u32;
    let mut _24: &std::time::Duration;
    let mut _25: i64;
    let mut _26: bool;
    let mut _27: i64;
    let mut _28: i64;
    let mut _29: bool;
    let mut _30: (i64, bool);
    let mut _31: u32;
    let mut _32: (u32, bool);
    scope 1 {
        debug sec => _2;
        debug nsec => _3;
        let mut _33: &chrono::Local;
    }
    scope 2 {
        debug dur => _8;
    }
    scope 3 {
        debug e => _14;
        let _15: std::time::Duration;
        scope 4 {
            debug dur => _15;
            let _17: i64;
            let _18: u32;
            scope 5 {
                debug sec => _17;
                debug nsec => _18;
            }
        }
    }

    bb0: {
        _6 = &_1;
        _5 = SystemTime::duration_since(move _6, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _14 = move ((_5 as Err).0: std::time::SystemTimeError);
        _16 = &_14;
        _15 = SystemTimeError::duration(move _16) -> [return: bb7, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _8 = ((_5 as Ok).0: std::time::Duration);
        _11 = &_8;
        _10 = std::time::Duration::as_secs(move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = move _10 as i64 (IntToInt);
        _13 = &_8;
        _12 = std::time::Duration::subsec_nanos(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _4 = (move _9, move _12);
        goto -> bb16;
    }

    bb7: {
        _22 = &_15;
        _21 = std::time::Duration::as_secs(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = move _21 as i64 (IntToInt);
        _24 = &_15;
        _23 = std::time::Duration::subsec_nanos(move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        _19 = (move _20, move _23);
        _17 = (_19.0: i64);
        _18 = (_19.1: u32);
        switchInt(move _18) -> [0: bb10, otherwise: bb12];
    }

    bb10: {
        _26 = Eq(_17, const i64::MIN);
        assert(!move _26, "attempt to negate `{}`, which would overflow", _17) -> [success: bb11, unwind continue];
    }

    bb11: {
        _25 = Neg(_17);
        _4 = (move _25, const 0_u32);
        goto -> bb16;
    }

    bb12: {
        _29 = Eq(_17, const i64::MIN);
        assert(!move _29, "attempt to negate `{}`, which would overflow", _17) -> [success: bb13, unwind continue];
    }

    bb13: {
        _28 = Neg(_17);
        _30 = CheckedSub(_28, const 1_i64);
        assert(!move (_30.1: bool), "attempt to compute `{} - {}`, which would overflow", move _28, const 1_i64) -> [success: bb14, unwind continue];
    }

    bb14: {
        _27 = move (_30.0: i64);
        _32 = CheckedSub(const 1000000000_u32, _18);
        assert(!move (_32.1: bool), "attempt to compute `{} - {}`, which would overflow", const 1000000000_u32, _18) -> [success: bb15, unwind continue];
    }

    bb15: {
        _31 = move (_32.0: u32);
        _4 = (move _27, move _31);
        goto -> bb16;
    }

    bb16: {
        _2 = (_4.0: i64);
        _3 = (_4.1: u32);
        _33 = const _;
        _0 = <Local as TimeZone>::timestamp(_33, _2, _3) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }
}

promoted[0] in system_time_to_date_time: &Local = {
    let mut _0: &chrono::Local;
    let mut _1: chrono::Local;

    bb0: {
        _1 = Local;
        _0 = &_1;
        return;
    }
}

fn error_resp(_1: StatusCode, _2: &str) -> iron::Response {
    debug s => _1;
    debug msg => _2;
    let mut _0: iron::Response;
    let mut _3: iron::Response;
    let mut _4: (iron::status::Status, std::string::String);
    let mut _5: iron::status::Status;
    let _6: std::string::String;
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 3];
    let _11: [core::fmt::rt::Argument<'_>; 3];
    let mut _12: core::fmt::rt::Argument<'_>;
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &u16;
    let _15: u16;
    let mut _16: &iron::status::Status;
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &&str;
    let _19: ();
    let mut _20: &mut iron::Headers;
    let mut _21: iron::headers::ContentType;
    let mut _22: &&str;
    let mut _23: &[&str; 4];
    scope 1 {
        debug resp => _3;
    }
    scope 2 {
        debug res => _6;
    }

    bb0: {
        _5 = _1;
        _23 = const _;
        _8 = _23 as &[&str] (PointerCoercion(Unsize));
        _22 = const _;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_22) -> [return: bb1, unwind continue];
    }

    bb1: {
        _16 = &_1;
        _15 = StatusCode::to_u16(move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        _14 = &_15;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<u16>(_14) -> [return: bb3, unwind continue];
    }

    bb3: {
        _18 = &_2;
        _17 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = [move _12, move _13, move _17];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = std::fmt::format(move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        _4 = (move _5, move _6);
        _3 = iron::Response::with::<(StatusCode, String)>(move _4) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = &mut (_3.1: iron::Headers);
        _21 = ContentType::html() -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _19 = Headers::set::<ContentType>(move _20, move _21) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _0 = move _3;
        return;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in error_resp: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in error_resp: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n</head>\n<body>\n  ", const "\n  <hr />\n  <div>[<strong style=color:red;>ERROR ", const "</strong>]: ", const "</div>\n</body>\n</html>\n"];
        _0 = &_1;
        return;
    }
}

const ORDER_ASC: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "asc";
        return;
    }
}

const ORDER_DESC: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "desc";
        return;
    }
}

const DEFAULT_ORDER: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const _;
        return;
    }
}

static SORT_FIELDS: SORT_FIELDS = {
    let mut _0: SORT_FIELDS;
    let mut _1: ();

    bb0: {
        StorageLive(_1);
        _1 = ();
        _0 = SORT_FIELDS { __private_field: move _1 };
        StorageDead(_1);
        return;
    }
}

fn <impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref(_1: &SORT_FIELDS) -> &Vec<&str> {
    debug self => _1;
    let mut _0: &std::vec::Vec<&str>;

    bb0: {
        _0 = <SORT_FIELDS as Deref>::deref::__stability() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__static_ref_initialize() -> Vec<&str> {
    let mut _0: std::vec::Vec<&str>;
    let mut _1: std::boxed::Box<[&str]>;
    let mut _2: usize;
    let mut _3: usize;
    let mut _4: *mut u8;
    let mut _5: std::boxed::Box<[&str; 3]>;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let mut _9: *const [&str; 3];
    let mut _10: *const ();
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    scope 1 {
    }

    bb0: {
        _2 = SizeOf([&str; 3]);
        _3 = AlignOf([&str; 3]);
        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = ShallowInitBox(move _4, [&str; 3]);
        _6 = const "name";
        _7 = const "modified";
        _8 = const "size";
        _9 = (((_5.0: std::ptr::Unique<[&str; 3]>).0: std::ptr::NonNull<[&str; 3]>).0: *const [&str; 3]);
        _10 = _9 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf([&str; 3]);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb3, unwind unreachable];
    }

    bb2: {
        return;
    }

    bb3: {
        (*_9) = [_6, _7, _8];
        _1 = move _5 as std::boxed::Box<[&str]> (PointerCoercion(Unsize));
        _0 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _1) -> [return: bb2, unwind continue];
    }
}

fn <impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability() -> &Vec<&str> {
    let mut _0: &std::vec::Vec<&str>;
    let _1: &lazy_static::lazy::Lazy<std::vec::Vec<&str>>;

    bb0: {
        _1 = const {alloc14: &Lazy<Vec<&str>>};
        _0 = Lazy::<Vec<&str>>::get::<fn() -> Vec<&'static str> {<SORT_FIELDS as Deref>::deref::__static_ref_initialize}>(_1, <SORT_FIELDS as Deref>::deref::__static_ref_initialize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc14 (static: <SORT_FIELDS as Deref>::deref::__stability::LAZY, size: 32, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 80 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
    0x10 │ __ __ __ __ __ __ __ __ 00 00 00 00 __ __ __ __ │ ░░░░░░░░....░░░░
}

static <impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability::LAZY: Lazy<Vec<&str>> = {
    let mut _0: lazy_static::lazy::Lazy<std::vec::Vec<&str>>;

    bb0: {
        _0 = const _;
        return;
    }
}

fn <impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:147:9: 147:39>::initialize(_1: &SORT_FIELDS) -> () {
    debug lazy => _1;
    let mut _0: ();
    let _2: &std::vec::Vec<&str>;
    scope 1 {
    }

    bb0: {
        _2 = <SORT_FIELDS as Deref>::deref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: clap::ArgMatches<'_>;
    let mut _2: clap::App<'_, '_>;
    let mut _3: clap::App<'_, '_>;
    let mut _4: clap::App<'_, '_>;
    let mut _5: clap::App<'_, '_>;
    let mut _6: clap::App<'_, '_>;
    let mut _7: clap::App<'_, '_>;
    let mut _8: clap::App<'_, '_>;
    let mut _9: clap::App<'_, '_>;
    let mut _10: clap::App<'_, '_>;
    let mut _11: clap::App<'_, '_>;
    let mut _12: clap::App<'_, '_>;
    let mut _13: clap::App<'_, '_>;
    let mut _14: clap::App<'_, '_>;
    let mut _15: clap::App<'_, '_>;
    let mut _16: clap::App<'_, '_>;
    let mut _17: clap::App<'_, '_>;
    let mut _18: clap::App<'_, '_>;
    let mut _19: clap::App<'_, '_>;
    let mut _20: clap::App<'_, '_>;
    let mut _21: clap::App<'_, '_>;
    let mut _22: clap::App<'_, '_>;
    let mut _23: clap::AppSettings;
    let mut _24: clap::Arg<'_, '_>;
    let mut _25: clap::Arg<'_, '_>;
    let mut _26: clap::Arg<'_, '_>;
    let mut _27: clap::Arg<'_, '_>;
    let _28: &str;
    let _29: &str;
    let mut _30: clap::Arg<'_, '_>;
    let mut _31: clap::Arg<'_, '_>;
    let mut _32: clap::Arg<'_, '_>;
    let mut _33: clap::Arg<'_, '_>;
    let _34: &str;
    let _35: &str;
    let _36: &str;
    let mut _37: clap::Arg<'_, '_>;
    let mut _38: clap::Arg<'_, '_>;
    let mut _39: clap::Arg<'_, '_>;
    let mut _40: clap::Arg<'_, '_>;
    let _41: &str;
    let _42: &str;
    let _43: &str;
    let mut _44: clap::Arg<'_, '_>;
    let mut _45: clap::Arg<'_, '_>;
    let mut _46: clap::Arg<'_, '_>;
    let mut _47: clap::Arg<'_, '_>;
    let mut _48: clap::Arg<'_, '_>;
    let _49: &str;
    let _50: &str;
    let _51: &str;
    let mut _52: clap::Arg<'_, '_>;
    let mut _53: clap::Arg<'_, '_>;
    let mut _54: clap::Arg<'_, '_>;
    let _55: &str;
    let _56: &str;
    let _57: &str;
    let mut _58: clap::Arg<'_, '_>;
    let mut _59: clap::Arg<'_, '_>;
    let mut _60: clap::Arg<'_, '_>;
    let _61: &str;
    let _62: &str;
    let _63: &str;
    let mut _64: clap::Arg<'_, '_>;
    let mut _65: clap::Arg<'_, '_>;
    let mut _66: clap::Arg<'_, '_>;
    let _67: &str;
    let _68: &str;
    let _69: &str;
    let mut _70: clap::Arg<'_, '_>;
    let mut _71: clap::Arg<'_, '_>;
    let mut _72: clap::Arg<'_, '_>;
    let mut _73: clap::Arg<'_, '_>;
    let mut _74: clap::Arg<'_, '_>;
    let _75: &str;
    let _76: &str;
    let _77: &str;
    let mut _78: clap::Arg<'_, '_>;
    let mut _79: clap::Arg<'_, '_>;
    let mut _80: clap::Arg<'_, '_>;
    let _81: &str;
    let _82: &str;
    let _83: &str;
    let mut _84: clap::Arg<'_, '_>;
    let mut _85: clap::Arg<'_, '_>;
    let mut _86: clap::Arg<'_, '_>;
    let mut _87: clap::Arg<'_, '_>;
    let _88: &str;
    let _89: &str;
    let _90: &str;
    let mut _91: clap::Arg<'_, '_>;
    let mut _92: clap::Arg<'_, '_>;
    let mut _93: clap::Arg<'_, '_>;
    let mut _94: clap::Arg<'_, '_>;
    let mut _95: clap::Arg<'_, '_>;
    let mut _96: clap::Arg<'_, '_>;
    let mut _97: clap::Arg<'_, '_>;
    let mut _98: clap::Arg<'_, '_>;
    let _99: &str;
    let _100: &str;
    let _101: &str;
    let _102: &str;
    let _103: &str;
    let mut _104: clap::Arg<'_, '_>;
    let mut _105: clap::Arg<'_, '_>;
    let mut _106: clap::Arg<'_, '_>;
    let mut _107: clap::Arg<'_, '_>;
    let mut _108: clap::Arg<'_, '_>;
    let mut _109: clap::Arg<'_, '_>;
    let _110: &str;
    let _111: &str;
    let _112: &str;
    let _113: &str;
    let mut _114: clap::Arg<'_, '_>;
    let mut _115: clap::Arg<'_, '_>;
    let mut _116: clap::Arg<'_, '_>;
    let mut _117: clap::Arg<'_, '_>;
    let mut _118: clap::Arg<'_, '_>;
    let mut _119: clap::Arg<'_, '_>;
    let mut _120: clap::Arg<'_, '_>;
    let _121: &str;
    let _122: &str;
    let _123: &str;
    let _124: &str;
    let mut _125: clap::Arg<'_, '_>;
    let mut _126: clap::Arg<'_, '_>;
    let mut _127: clap::Arg<'_, '_>;
    let mut _128: clap::Arg<'_, '_>;
    let mut _129: clap::Arg<'_, '_>;
    let mut _130: clap::Arg<'_, '_>;
    let _131: &str;
    let _132: &str;
    let _133: &str;
    let mut _134: clap::Arg<'_, '_>;
    let mut _135: clap::Arg<'_, '_>;
    let mut _136: clap::Arg<'_, '_>;
    let mut _137: clap::Arg<'_, '_>;
    let mut _138: clap::Arg<'_, '_>;
    let mut _139: clap::Arg<'_, '_>;
    let mut _140: clap::Arg<'_, '_>;
    let _141: &str;
    let _142: &str;
    let _143: &str;
    let _144: &str;
    let mut _145: clap::Arg<'_, '_>;
    let mut _146: clap::Arg<'_, '_>;
    let mut _147: clap::Arg<'_, '_>;
    let mut _148: clap::Arg<'_, '_>;
    let mut _149: clap::Arg<'_, '_>;
    let mut _150: clap::Arg<'_, '_>;
    let mut _151: clap::Arg<'_, '_>;
    let _152: &str;
    let _153: &str;
    let _154: &str;
    let _155: &str;
    let mut _156: clap::Arg<'_, '_>;
    let mut _157: clap::Arg<'_, '_>;
    let mut _158: clap::Arg<'_, '_>;
    let mut _159: clap::Arg<'_, '_>;
    let mut _160: clap::Arg<'_, '_>;
    let mut _161: clap::Arg<'_, '_>;
    let mut _162: clap::Arg<'_, '_>;
    let _163: &str;
    let _164: &str;
    let _165: &str;
    let _166: &str;
    let mut _167: clap::Arg<'_, '_>;
    let mut _168: clap::Arg<'_, '_>;
    let mut _169: clap::Arg<'_, '_>;
    let mut _170: clap::Arg<'_, '_>;
    let mut _171: clap::Arg<'_, '_>;
    let _172: &str;
    let _173: &str;
    let _174: &str;
    let mut _176: std::option::Option<std::path::PathBuf>;
    let mut _177: std::option::Option<&str>;
    let mut _178: &clap::ArgMatches<'_>;
    let mut _180: &clap::ArgMatches<'_>;
    let mut _182: &clap::ArgMatches<'_>;
    let mut _184: std::option::Option<std::result::Result<iron::Url, std::string::String>>;
    let mut _185: std::option::Option<&str>;
    let mut _186: &clap::ArgMatches<'_>;
    let mut _188: bool;
    let mut _189: &clap::ArgMatches<'_>;
    let mut _191: bool;
    let mut _192: &clap::ArgMatches<'_>;
    let mut _194: bool;
    let mut _195: &clap::ArgMatches<'_>;
    let mut _197: &clap::ArgMatches<'_>;
    let mut _199: &clap::ArgMatches<'_>;
    let mut _201: &clap::ArgMatches<'_>;
    let mut _203: std::option::Option<&str>;
    let mut _204: &clap::ArgMatches<'_>;
    let mut _206: std::result::Result<u16, std::num::ParseIntError>;
    let _207: &str;
    let mut _208: std::option::Option<&str>;
    let mut _209: &clap::ArgMatches<'_>;
    let mut _211: std::result::Result<u64, std::num::ParseIntError>;
    let _212: &str;
    let mut _213: std::option::Option<&str>;
    let mut _214: &clap::ArgMatches<'_>;
    let mut _216: &clap::ArgMatches<'_>;
    let mut _218: &clap::ArgMatches<'_>;
    let mut _220: std::result::Result<u8, std::num::ParseIntError>;
    let _221: &str;
    let mut _222: std::option::Option<&str>;
    let mut _223: &clap::ArgMatches<'_>;
    let mut _225: &clap::ArgMatches<'_>;
    let mut _228: termcolor::ColorSpec;
    let mut _229: std::option::Option<termcolor::Color>;
    let mut _230: termcolor::Color;
    let mut _232: termcolor::ColorSpec;
    let mut _233: std::option::Option<termcolor::Color>;
    let mut _234: termcolor::Color;
    let mut _237: std::fmt::Arguments<'_>;
    let mut _238: &[&str];
    let mut _239: &[core::fmt::rt::Argument<'_>];
    let _240: &[core::fmt::rt::Argument<'_>; 2];
    let _241: [core::fmt::rt::Argument<'_>; 2];
    let mut _242: core::fmt::rt::Argument<'_>;
    let _243: &&str;
    let mut _244: core::fmt::rt::Argument<'_>;
    let _245: &u16;
    let mut _247: std::iter::Map<std::slice::Iter<'_, std::string::String>, {closure@src/main.rs:238:14: 238:17}>;
    let mut _248: std::slice::Iter<'_, std::string::String>;
    let _249: &[std::string::String];
    let mut _250: &std::vec::Vec<std::string::String>;
    let _251: std::vec::Vec<std::string::String>;
    let mut _252: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _253: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _255: bool;
    let mut _256: &std::vec::Vec<std::string::String>;
    let _257: &str;
    let mut _259: std::fmt::Arguments<'_>;
    let mut _260: &[&str];
    let mut _261: &[core::fmt::rt::Argument<'_>];
    let _262: &[core::fmt::rt::Argument<'_>; 1];
    let _263: [core::fmt::rt::Argument<'_>; 1];
    let mut _264: core::fmt::rt::Argument<'_>;
    let _265: &std::vec::Vec<std::string::String>;
    let mut _267: &clap::ArgMatches<'_>;
    let _268: ();
    let mut _269: std::result::Result<(), util::StringError>;
    let mut _270: &color::Printer;
    let _271: &str;
    let _272: &[(&str, &std::option::Option<termcolor::ColorSpec>)];
    let _273: &std::vec::Vec<(&str, &std::option::Option<termcolor::ColorSpec>)>;
    let _274: std::vec::Vec<(&str, &std::option::Option<termcolor::ColorSpec>)>;
    let mut _275: std::iter::Map<std::slice::Iter<'_, std::string::String>, {closure@src/main.rs:285:22: 285:25}>;
    let mut _276: std::slice::Iter<'_, std::string::String>;
    let _277: &[std::string::String];
    let mut _278: &std::vec::Vec<std::string::String>;
    let _279: std::vec::Vec<std::string::String>;
    let mut _280: std::boxed::Box<[std::string::String]>;
    let mut _281: std::boxed::Box<[std::string::String; 16]>;
    let mut _282: usize;
    let mut _283: usize;
    let mut _284: *mut u8;
    let mut _285: std::boxed::Box<[std::string::String; 16]>;
    let mut _286: std::string::String;
    let mut _287: std::string::String;
    let mut _288: std::string::String;
    let mut _289: std::string::String;
    let mut _290: std::string::String;
    let mut _291: std::string::String;
    let mut _292: std::string::String;
    let mut _293: &u8;
    let mut _294: std::string::String;
    let _295: &str;
    let _296: &str;
    let mut _297: std::string::String;
    let mut _298: std::string::String;
    let mut _299: &str;
    let _300: &str;
    let mut _301: bool;
    let mut _302: &std::option::Option<&str>;
    let _303: &str;
    let mut _304: std::string::String;
    let _305: &str;
    let mut _306: std::option::Option<&str>;
    let _307: &str;
    let mut _308: std::string::String;
    let _309: &str;
    let _310: &str;
    let mut _311: std::string::String;
    let _312: &str;
    let mut _313: std::option::Option<&str>;
    let _314: &std::path::Path;
    let mut _315: &std::path::PathBuf;
    let mut _316: std::string::String;
    let _317: &str;
    let _318: &str;
    let mut _319: std::string::String;
    let mut _321: std::fmt::Arguments<'_>;
    let mut _322: &[&str];
    let mut _323: &[core::fmt::rt::Argument<'_>];
    let _324: &[core::fmt::rt::Argument<'_>; 2];
    let _325: [core::fmt::rt::Argument<'_>; 2];
    let mut _326: core::fmt::rt::Argument<'_>;
    let _327: &&str;
    let _328: &str;
    let mut _329: bool;
    let mut _330: &std::option::Option<&str>;
    let _331: &str;
    let mut _332: core::fmt::rt::Argument<'_>;
    let _333: &std::string::String;
    let mut _334: std::string::String;
    let mut _335: {closure@src/main.rs:285:22: 285:25};
    let mut _336: &std::option::Option<termcolor::ColorSpec>;
    let mut _338: MainHandler;
    let mut _339: std::path::PathBuf;
    let mut _340: std::option::Option<iron::Url>;
    let mut _341: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _342: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _343: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _344: std::option::Option<std::path::PathBuf>;
    let _345: &mut iron::Chain;
    let mut _346: &mut iron::Chain;
    let mut _347: iron_cors::CorsMiddleware;
    let mut _348: isize;
    let mut _350: std::result::Result<middlewares::auth::AuthChecker, util::StringError>;
    let mut _351: isize;
    let _353: &mut iron::Chain;
    let mut _354: &mut iron::Chain;
    let _356: ();
    let mut _357: std::result::Result<(), util::StringError>;
    let mut _358: &color::Printer;
    let _359: &str;
    let mut _360: &[(&str, &std::option::Option<termcolor::ColorSpec>)];
    let _361: &[(&str, &std::option::Option<termcolor::ColorSpec>); 1];
    let _362: [(&str, &std::option::Option<termcolor::ColorSpec>); 1];
    let mut _363: (&str, &std::option::Option<termcolor::ColorSpec>);
    let _364: &str;
    let mut _365: &util::StringError;
    let _366: &std::option::Option<termcolor::ColorSpec>;
    let mut _367: isize;
    let mut _369: bool;
    let _370: &mut iron::Chain;
    let mut _371: &mut iron::Chain;
    let _372: &mut iron::Chain;
    let mut _373: &mut iron::Chain;
    let mut _374: middlewares::logger::RequestLogger;
    let mut _375: color::Printer;
    let mut _377: iron::Chain;
    let mut _378: u8;
    let mut _380: isize;
    let mut _383: std::result::Result<hyper_native_tls::NativeTlsServer, hyper_native_tls::ServerError>;
    let _384: &str;
    let _385: &str;
    let mut _386: iron::Iron<iron::Chain>;
    let mut _387: &std::string::String;
    let mut _388: iron::Iron<iron::Chain>;
    let mut _389: &std::string::String;
    let mut _390: isize;
    let _392: ();
    let mut _393: std::result::Result<(), util::StringError>;
    let mut _394: &color::Printer;
    let _395: &str;
    let mut _396: &[(&str, &std::option::Option<termcolor::ColorSpec>)];
    let _397: &[(&str, &std::option::Option<termcolor::ColorSpec>); 3];
    let _398: [(&str, &std::option::Option<termcolor::ColorSpec>); 3];
    let mut _399: (&str, &std::option::Option<termcolor::ColorSpec>);
    let _400: &str;
    let _401: &std::option::Option<termcolor::ColorSpec>;
    let _402: std::option::Option<termcolor::ColorSpec>;
    let mut _403: termcolor::ColorSpec;
    let mut _404: std::option::Option<termcolor::Color>;
    let mut _405: termcolor::Color;
    let mut _406: (&str, &std::option::Option<termcolor::ColorSpec>);
    let _407: &str;
    let mut _408: &std::string::String;
    let mut _409: (&str, &std::option::Option<termcolor::ColorSpec>);
    let _410: &str;
    let mut _411: &std::string::String;
    let _412: std::string::String;
    let mut _413: &iron::error::HttpError;
    let _414: !;
    let mut _420: bool;
    let mut _421: bool;
    let mut _422: bool;
    let mut _423: bool;
    let mut _424: bool;
    let mut _425: bool;
    let mut _426: bool;
    let mut _427: bool;
    let mut _428: bool;
    let mut _429: bool;
    let mut _430: bool;
    let mut _431: bool;
    let mut _432: bool;
    let mut _433: bool;
    let mut _434: bool;
    let mut _435: bool;
    let mut _436: bool;
    let mut _437: bool;
    let mut _438: bool;
    let mut _439: bool;
    let mut _440: bool;
    let mut _441: bool;
    let mut _442: bool;
    let mut _443: isize;
    let mut _444: &mut std::boxed::Box<[std::string::String; 16]>;
    let mut _445: ();
    let mut _446: *const [std::string::String; 16];
    scope 1 {
        debug matches => _1;
        let _175: std::path::PathBuf;
        scope 2 {
            debug root => _175;
            let _179: bool;
            scope 3 {
                debug index => _179;
                let _181: bool;
                scope 4 {
                    debug upload => _181;
                    let _183: std::option::Option<iron::Url>;
                    scope 5 {
                        debug redirect_to => _183;
                        let _187: bool;
                        scope 6 {
                            debug sort => _187;
                            let _190: bool;
                            scope 7 {
                                debug cache => _190;
                                let _193: bool;
                                scope 8 {
                                    debug range => _193;
                                    let _196: std::option::Option<&str>;
                                    scope 9 {
                                        debug cert => _196;
                                        let _198: std::option::Option<&str>;
                                        scope 10 {
                                            debug certpass => _198;
                                            let _200: bool;
                                            scope 11 {
                                                debug cors => _200;
                                                let _202: &str;
                                                scope 12 {
                                                    debug ip => _202;
                                                    let _205: u16;
                                                    scope 13 {
                                                        debug port => _205;
                                                        let _210: u64;
                                                        scope 14 {
                                                            debug upload_size_limit => _210;
                                                            let _215: std::option::Option<&str>;
                                                            scope 15 {
                                                                debug auth => _215;
                                                                let _217: std::option::Option<std::vec::Vec<std::string::String>>;
                                                                scope 16 {
                                                                    debug compress => _217;
                                                                    let _219: u8;
                                                                    scope 17 {
                                                                        debug threads => _219;
                                                                        let _224: std::option::Option<&str>;
                                                                        scope 18 {
                                                                            debug try_file_404 => _224;
                                                                            let _226: color::Printer;
                                                                            scope 19 {
                                                                                debug printer => _226;
                                                                                let _227: std::option::Option<termcolor::ColorSpec>;
                                                                                scope 20 {
                                                                                    debug color_blue => _227;
                                                                                    let _231: std::option::Option<termcolor::ColorSpec>;
                                                                                    scope 21 {
                                                                                        debug color_red => _231;
                                                                                        let _235: std::string::String;
                                                                                        let _236: std::string::String;
                                                                                        let mut _419: &[&str; 2];
                                                                                        scope 22 {
                                                                                            debug addr => _235;
                                                                                            let _246: std::vec::Vec<std::string::String>;
                                                                                            scope 24 {
                                                                                                debug compression_exts => _246;
                                                                                                let _254: std::string::String;
                                                                                                let _258: std::string::String;
                                                                                                let mut _418: &[&str; 1];
                                                                                                scope 25 {
                                                                                                    debug compression_string => _254;
                                                                                                    let _266: bool;
                                                                                                    scope 27 {
                                                                                                        debug silent => _266;
                                                                                                        let _320: std::string::String;
                                                                                                        let mut _337: iron::Chain;
                                                                                                        let mut _417: &[&str; 2];
                                                                                                        let mut _447: *const ();
                                                                                                        let mut _448: usize;
                                                                                                        let mut _449: usize;
                                                                                                        let mut _450: usize;
                                                                                                        let mut _451: usize;
                                                                                                        let mut _452: bool;
                                                                                                        scope 28 {
                                                                                                        }
                                                                                                        scope 29 {
                                                                                                            debug res => _320;
                                                                                                        }
                                                                                                        scope 30 {
                                                                                                            debug chain => _337;
                                                                                                            let mut _376: iron::Iron<iron::Chain>;
                                                                                                            scope 31 {
                                                                                                                debug auth => _349;
                                                                                                                let _349: &str;
                                                                                                                let _352: middlewares::auth::AuthChecker;
                                                                                                                let _355: util::StringError;
                                                                                                                scope 32 {
                                                                                                                    debug auth_checker => _352;
                                                                                                                }
                                                                                                                scope 33 {
                                                                                                                    debug e => _355;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 34 {
                                                                                                                debug exts => _368;
                                                                                                                let _368: &std::vec::Vec<std::string::String>;
                                                                                                            }
                                                                                                            scope 35 {
                                                                                                                debug server => _376;
                                                                                                                let _379: std::result::Result<iron::Listening, iron::error::HttpError>;
                                                                                                                scope 36 {
                                                                                                                    debug rv => _379;
                                                                                                                    scope 39 {
                                                                                                                        debug e => _391;
                                                                                                                        let _391: iron::error::HttpError;
                                                                                                                        let mut _415: &std::option::Option<termcolor::ColorSpec>;
                                                                                                                        let mut _416: &std::option::Option<termcolor::ColorSpec>;
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 37 {
                                                                                                                    debug cert => _381;
                                                                                                                    let _381: &str;
                                                                                                                    let _382: hyper_native_tls::NativeTlsServer;
                                                                                                                    scope 38 {
                                                                                                                        debug ssl => _382;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 26 {
                                                                                                    debug res => _258;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 23 {
                                                                                            debug res => _236;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _425 = const false;
        _426 = const false;
        _427 = const false;
        _428 = const false;
        _429 = const false;
        _430 = const false;
        _431 = const false;
        _432 = const false;
        _433 = const false;
        _434 = const false;
        _435 = const false;
        _436 = const false;
        _437 = const false;
        _438 = const false;
        _439 = const false;
        _440 = const false;
        _441 = const false;
        _442 = const false;
        _424 = const false;
        _423 = const false;
        _420 = const false;
        _422 = const false;
        _421 = const false;
        _22 = App::<'_, '_>::new::<&str>(const "Simple HTTP(s) Server") -> [return: bb1, unwind continue];
    }

    bb1: {
        _23 = ColoredHelp;
        _21 = App::<'_, '_>::setting(move _22, move _23) -> [return: bb2, unwind continue];
    }

    bb2: {
        _20 = App::<'_, '_>::version::<&str>(move _21, const "0.6.0") -> [return: bb3, unwind continue];
    }

    bb3: {
        _442 = const true;
        _28 = const "root";
        _27 = Arg::<'_, '_>::with_name(_28) -> [return: bb4, unwind: bb346];
    }

    bb4: {
        _26 = Arg::<'_, '_>::index(move _27, const 1_u64) -> [return: bb5, unwind: bb346];
    }

    bb5: {
        _25 = Arg::<'_, '_>::validator::<{closure@src/main.rs:53:25: 53:28}>(move _26, const ZeroSized: {closure@src/main.rs:53:25: 53:28}) -> [return: bb6, unwind: bb346];
    }

    bb6: {
        _29 = const "Root directory";
        _24 = Arg::<'_, '_>::help(move _25, _29) -> [return: bb7, unwind: bb346];
    }

    bb7: {
        _442 = const false;
        _19 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _20, move _24) -> [return: bb8, unwind: bb346];
    }

    bb8: {
        _441 = const true;
        _442 = const false;
        _34 = const "index";
        _33 = Arg::<'_, '_>::with_name(_34) -> [return: bb9, unwind: bb344];
    }

    bb9: {
        _32 = Arg::<'_, '_>::short::<&str>(move _33, const "i") -> [return: bb10, unwind: bb344];
    }

    bb10: {
        _35 = const "index";
        _31 = Arg::<'_, '_>::long(move _32, _35) -> [return: bb11, unwind: bb344];
    }

    bb11: {
        _36 = const "Enable automatic render index page [index.html, index.htm]";
        _30 = Arg::<'_, '_>::help(move _31, _36) -> [return: bb12, unwind: bb344];
    }

    bb12: {
        _441 = const false;
        _18 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _19, move _30) -> [return: bb13, unwind: bb344];
    }

    bb13: {
        _440 = const true;
        _441 = const false;
        _41 = const "upload";
        _40 = Arg::<'_, '_>::with_name(_41) -> [return: bb14, unwind: bb342];
    }

    bb14: {
        _39 = Arg::<'_, '_>::short::<&str>(move _40, const "u") -> [return: bb15, unwind: bb342];
    }

    bb15: {
        _42 = const "upload";
        _38 = Arg::<'_, '_>::long(move _39, _42) -> [return: bb16, unwind: bb342];
    }

    bb16: {
        _43 = const "Enable upload files (multiple select)";
        _37 = Arg::<'_, '_>::help(move _38, _43) -> [return: bb17, unwind: bb342];
    }

    bb17: {
        _440 = const false;
        _17 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _18, move _37) -> [return: bb18, unwind: bb342];
    }

    bb18: {
        _439 = const true;
        _440 = const false;
        _49 = const "redirect";
        _48 = Arg::<'_, '_>::with_name(_49) -> [return: bb19, unwind: bb340];
    }

    bb19: {
        _50 = const "redirect";
        _47 = Arg::<'_, '_>::long(move _48, _50) -> [return: bb20, unwind: bb340];
    }

    bb20: {
        _46 = Arg::<'_, '_>::takes_value(move _47, const true) -> [return: bb21, unwind: bb340];
    }

    bb21: {
        _45 = Arg::<'_, '_>::validator::<{closure@src/main.rs:74:25: 74:37}>(move _46, const ZeroSized: {closure@src/main.rs:74:25: 74:37}) -> [return: bb22, unwind: bb340];
    }

    bb22: {
        _51 = const "takes a URL to redirect to using HTTP 301 Moved Permanently";
        _44 = Arg::<'_, '_>::help(move _45, _51) -> [return: bb23, unwind: bb340];
    }

    bb23: {
        _439 = const false;
        _16 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _17, move _44) -> [return: bb24, unwind: bb340];
    }

    bb24: {
        _438 = const true;
        _439 = const false;
        _55 = const "nosort";
        _54 = Arg::<'_, '_>::with_name(_55) -> [return: bb25, unwind: bb338];
    }

    bb25: {
        _56 = const "nosort";
        _53 = Arg::<'_, '_>::long(move _54, _56) -> [return: bb26, unwind: bb338];
    }

    bb26: {
        _57 = const "Disable directory entries sort (by: name, modified, size)";
        _52 = Arg::<'_, '_>::help(move _53, _57) -> [return: bb27, unwind: bb338];
    }

    bb27: {
        _438 = const false;
        _15 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _16, move _52) -> [return: bb28, unwind: bb338];
    }

    bb28: {
        _437 = const true;
        _438 = const false;
        _61 = const "nocache";
        _60 = Arg::<'_, '_>::with_name(_61) -> [return: bb29, unwind: bb336];
    }

    bb29: {
        _62 = const "nocache";
        _59 = Arg::<'_, '_>::long(move _60, _62) -> [return: bb30, unwind: bb336];
    }

    bb30: {
        _63 = const "Disable http cache";
        _58 = Arg::<'_, '_>::help(move _59, _63) -> [return: bb31, unwind: bb336];
    }

    bb31: {
        _437 = const false;
        _14 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _15, move _58) -> [return: bb32, unwind: bb336];
    }

    bb32: {
        _436 = const true;
        _437 = const false;
        _67 = const "norange";
        _66 = Arg::<'_, '_>::with_name(_67) -> [return: bb33, unwind: bb334];
    }

    bb33: {
        _68 = const "norange";
        _65 = Arg::<'_, '_>::long(move _66, _68) -> [return: bb34, unwind: bb334];
    }

    bb34: {
        _69 = const "Disable header::Range support (partial request)";
        _64 = Arg::<'_, '_>::help(move _65, _69) -> [return: bb35, unwind: bb334];
    }

    bb35: {
        _436 = const false;
        _13 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _14, move _64) -> [return: bb36, unwind: bb334];
    }

    bb36: {
        _435 = const true;
        _436 = const false;
        _75 = const "cert";
        _74 = Arg::<'_, '_>::with_name(_75) -> [return: bb37, unwind: bb332];
    }

    bb37: {
        _76 = const "cert";
        _73 = Arg::<'_, '_>::long(move _74, _76) -> [return: bb38, unwind: bb332];
    }

    bb38: {
        _72 = Arg::<'_, '_>::takes_value(move _73, const true) -> [return: bb39, unwind: bb332];
    }

    bb39: {
        _71 = Arg::<'_, '_>::validator::<{closure@src/main.rs:88:25: 88:28}>(move _72, const ZeroSized: {closure@src/main.rs:88:25: 88:28}) -> [return: bb40, unwind: bb332];
    }

    bb40: {
        _77 = const "TLS/SSL certificate (pkcs#12 format)";
        _70 = Arg::<'_, '_>::help(move _71, _77) -> [return: bb41, unwind: bb332];
    }

    bb41: {
        _435 = const false;
        _12 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _13, move _70) -> [return: bb42, unwind: bb332];
    }

    bb42: {
        _434 = const true;
        _435 = const false;
        _81 = const "cors";
        _80 = Arg::<'_, '_>::with_name(_81) -> [return: bb43, unwind: bb330];
    }

    bb43: {
        _82 = const "cors";
        _79 = Arg::<'_, '_>::long(move _80, _82) -> [return: bb44, unwind: bb330];
    }

    bb44: {
        _83 = const "Enable CORS via the \"Access-Control-Allow-Origin\" header";
        _78 = Arg::<'_, '_>::help(move _79, _83) -> [return: bb45, unwind: bb330];
    }

    bb45: {
        _434 = const false;
        _11 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _12, move _78) -> [return: bb46, unwind: bb330];
    }

    bb46: {
        _433 = const true;
        _434 = const false;
        _88 = const "certpass";
        _87 = Arg::<'_, '_>::with_name(_88) -> [return: bb47, unwind: bb328];
    }

    bb47: {
        _89 = const "certpass";
        _86 = Arg::<'_, '_>::long(move _87, _89) -> [return: bb48, unwind: bb328];
    }

    bb48: {
        _85 = Arg::<'_, '_>::takes_value(move _86, const true) -> [return: bb49, unwind: bb328];
    }

    bb49: {
        _90 = const "TLS/SSL certificate password";
        _84 = Arg::<'_, '_>::help(move _85, _90) -> [return: bb50, unwind: bb328];
    }

    bb50: {
        _433 = const false;
        _10 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _11, move _84) -> [return: bb51, unwind: bb328];
    }

    bb51: {
        _432 = const true;
        _433 = const false;
        _99 = const "upload_size_limit";
        _98 = Arg::<'_, '_>::with_name(_99) -> [return: bb52, unwind: bb326];
    }

    bb52: {
        _97 = Arg::<'_, '_>::short::<&str>(move _98, const "l") -> [return: bb53, unwind: bb326];
    }

    bb53: {
        _100 = const "upload-size-limit";
        _96 = Arg::<'_, '_>::long(move _97, _100) -> [return: bb54, unwind: bb326];
    }

    bb54: {
        _95 = Arg::<'_, '_>::takes_value(move _96, const true) -> [return: bb55, unwind: bb326];
    }

    bb55: {
        _101 = const "8000000";
        _94 = Arg::<'_, '_>::default_value(move _95, _101) -> [return: bb56, unwind: bb326];
    }

    bb56: {
        _102 = const "NUM";
        _93 = Arg::<'_, '_>::value_name(move _94, _102) -> [return: bb57, unwind: bb326];
    }

    bb57: {
        _92 = Arg::<'_, '_>::validator::<{closure@src/main.rs:112:25: 112:28}>(move _93, const ZeroSized: {closure@src/main.rs:112:25: 112:28}) -> [return: bb58, unwind: bb326];
    }

    bb58: {
        _103 = const "Upload file size limit [bytes]";
        _91 = Arg::<'_, '_>::help(move _92, _103) -> [return: bb59, unwind: bb326];
    }

    bb59: {
        _432 = const false;
        _9 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _10, move _91) -> [return: bb60, unwind: bb326];
    }

    bb60: {
        _431 = const true;
        _432 = const false;
        _110 = const "ip";
        _109 = Arg::<'_, '_>::with_name(_110) -> [return: bb61, unwind: bb324];
    }

    bb61: {
        _111 = const "ip";
        _108 = Arg::<'_, '_>::long(move _109, _111) -> [return: bb62, unwind: bb324];
    }

    bb62: {
        _107 = Arg::<'_, '_>::takes_value(move _108, const true) -> [return: bb63, unwind: bb324];
    }

    bb63: {
        _112 = const "0.0.0.0";
        _106 = Arg::<'_, '_>::default_value(move _107, _112) -> [return: bb64, unwind: bb324];
    }

    bb64: {
        _105 = Arg::<'_, '_>::validator::<{closure@src/main.rs:122:25: 122:28}>(move _106, const ZeroSized: {closure@src/main.rs:122:25: 122:28}) -> [return: bb65, unwind: bb324];
    }

    bb65: {
        _113 = const "IP address to bind";
        _104 = Arg::<'_, '_>::help(move _105, _113) -> [return: bb66, unwind: bb324];
    }

    bb66: {
        _431 = const false;
        _8 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _9, move _104) -> [return: bb67, unwind: bb324];
    }

    bb67: {
        _430 = const true;
        _431 = const false;
        _121 = const "port";
        _120 = Arg::<'_, '_>::with_name(_121) -> [return: bb68, unwind: bb322];
    }

    bb68: {
        _119 = Arg::<'_, '_>::short::<&str>(move _120, const "p") -> [return: bb69, unwind: bb322];
    }

    bb69: {
        _122 = const "port";
        _118 = Arg::<'_, '_>::long(move _119, _122) -> [return: bb70, unwind: bb322];
    }

    bb70: {
        _117 = Arg::<'_, '_>::takes_value(move _118, const true) -> [return: bb71, unwind: bb322];
    }

    bb71: {
        _123 = const "8000";
        _116 = Arg::<'_, '_>::default_value(move _117, _123) -> [return: bb72, unwind: bb322];
    }

    bb72: {
        _115 = Arg::<'_, '_>::validator::<{closure@src/main.rs:134:25: 134:28}>(move _116, const ZeroSized: {closure@src/main.rs:134:25: 134:28}) -> [return: bb73, unwind: bb322];
    }

    bb73: {
        _124 = const "Port number";
        _114 = Arg::<'_, '_>::help(move _115, _124) -> [return: bb74, unwind: bb322];
    }

    bb74: {
        _430 = const false;
        _7 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _8, move _114) -> [return: bb75, unwind: bb322];
    }

    bb75: {
        _429 = const true;
        _430 = const false;
        _131 = const "auth";
        _130 = Arg::<'_, '_>::with_name(_131) -> [return: bb76, unwind: bb320];
    }

    bb76: {
        _129 = Arg::<'_, '_>::short::<&str>(move _130, const "a") -> [return: bb77, unwind: bb320];
    }

    bb77: {
        _132 = const "auth";
        _128 = Arg::<'_, '_>::long(move _129, _132) -> [return: bb78, unwind: bb320];
    }

    bb78: {
        _127 = Arg::<'_, '_>::takes_value(move _128, const true) -> [return: bb79, unwind: bb320];
    }

    bb79: {
        _126 = Arg::<'_, '_>::validator::<{closure@src/main.rs:145:25: 145:28}>(move _127, const ZeroSized: {closure@src/main.rs:145:25: 145:28}) -> [return: bb80, unwind: bb320];
    }

    bb80: {
        _133 = const "HTTP Basic Auth (username:password)";
        _125 = Arg::<'_, '_>::help(move _126, _133) -> [return: bb81, unwind: bb320];
    }

    bb81: {
        _429 = const false;
        _6 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _7, move _125) -> [return: bb82, unwind: bb320];
    }

    bb82: {
        _428 = const true;
        _429 = const false;
        _141 = const "compress";
        _140 = Arg::<'_, '_>::with_name(_141) -> [return: bb83, unwind: bb318];
    }

    bb83: {
        _139 = Arg::<'_, '_>::short::<&str>(move _140, const "c") -> [return: bb84, unwind: bb318];
    }

    bb84: {
        _142 = const "compress";
        _138 = Arg::<'_, '_>::long(move _139, _142) -> [return: bb85, unwind: bb318];
    }

    bb85: {
        _137 = Arg::<'_, '_>::multiple(move _138, const true) -> [return: bb86, unwind: bb318];
    }

    bb86: {
        _143 = const ",";
        _136 = Arg::<'_, '_>::value_delimiter(move _137, _143) -> [return: bb87, unwind: bb318];
    }

    bb87: {
        _135 = Arg::<'_, '_>::takes_value(move _136, const true) -> [return: bb88, unwind: bb318];
    }

    bb88: {
        _144 = const "Enable file compression: gzip/deflate\n    Example: -c=js,d.ts\n    Note: disabled on partial request!";
        _134 = Arg::<'_, '_>::help(move _135, _144) -> [return: bb89, unwind: bb318];
    }

    bb89: {
        _428 = const false;
        _5 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _6, move _134) -> [return: bb90, unwind: bb318];
    }

    bb90: {
        _427 = const true;
        _428 = const false;
        _152 = const "threads";
        _151 = Arg::<'_, '_>::with_name(_152) -> [return: bb91, unwind: bb316];
    }

    bb91: {
        _150 = Arg::<'_, '_>::short::<&str>(move _151, const "t") -> [return: bb92, unwind: bb316];
    }

    bb92: {
        _153 = const "threads";
        _149 = Arg::<'_, '_>::long(move _150, _153) -> [return: bb93, unwind: bb316];
    }

    bb93: {
        _148 = Arg::<'_, '_>::takes_value(move _149, const true) -> [return: bb94, unwind: bb316];
    }

    bb94: {
        _154 = const "3";
        _147 = Arg::<'_, '_>::default_value(move _148, _154) -> [return: bb95, unwind: bb316];
    }

    bb95: {
        _146 = Arg::<'_, '_>::validator::<{closure@src/main.rs:168:25: 168:28}>(move _147, const ZeroSized: {closure@src/main.rs:168:25: 168:28}) -> [return: bb96, unwind: bb316];
    }

    bb96: {
        _155 = const "How many worker threads";
        _145 = Arg::<'_, '_>::help(move _146, _155) -> [return: bb97, unwind: bb316];
    }

    bb97: {
        _427 = const false;
        _4 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _5, move _145) -> [return: bb98, unwind: bb316];
    }

    bb98: {
        _426 = const true;
        _427 = const false;
        _163 = const "try-file-404";
        _162 = Arg::<'_, '_>::with_name(_163) -> [return: bb99, unwind: bb314];
    }

    bb99: {
        _164 = const "try-file";
        _161 = Arg::<'_, '_>::long(move _162, _164) -> [return: bb100, unwind: bb314];
    }

    bb100: {
        _160 = Arg::<'_, '_>::visible_alias::<&str>(move _161, const "try-file-404") -> [return: bb101, unwind: bb314];
    }

    bb101: {
        _159 = Arg::<'_, '_>::takes_value(move _160, const true) -> [return: bb102, unwind: bb314];
    }

    bb102: {
        _165 = const "PATH";
        _158 = Arg::<'_, '_>::value_name(move _159, _165) -> [return: bb103, unwind: bb314];
    }

    bb103: {
        _157 = Arg::<'_, '_>::validator::<{closure@src/main.rs:184:25: 184:28}>(move _158, const ZeroSized: {closure@src/main.rs:184:25: 184:28}) -> [return: bb104, unwind: bb314];
    }

    bb104: {
        _166 = const "serve this file (server root relative) in place of missing files (useful for single page apps)";
        _156 = Arg::<'_, '_>::help(move _157, _166) -> [return: bb105, unwind: bb314];
    }

    bb105: {
        _426 = const false;
        _3 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _4, move _156) -> [return: bb106, unwind: bb314];
    }

    bb106: {
        _425 = const true;
        _426 = const false;
        _172 = const "silent";
        _171 = Arg::<'_, '_>::with_name(_172) -> [return: bb107, unwind: bb312];
    }

    bb107: {
        _173 = const "silent";
        _170 = Arg::<'_, '_>::long(move _171, _173) -> [return: bb108, unwind: bb312];
    }

    bb108: {
        _169 = Arg::<'_, '_>::short::<&str>(move _170, const "s") -> [return: bb109, unwind: bb312];
    }

    bb109: {
        _168 = Arg::<'_, '_>::takes_value(move _169, const false) -> [return: bb110, unwind: bb312];
    }

    bb110: {
        _174 = const "Disable all outputs";
        _167 = Arg::<'_, '_>::help(move _168, _174) -> [return: bb111, unwind: bb312];
    }

    bb111: {
        _425 = const false;
        _2 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _3, move _167) -> [return: bb112, unwind: bb312];
    }

    bb112: {
        _425 = const false;
        _1 = App::<'_, '_>::get_matches(move _2) -> [return: bb113, unwind continue];
    }

    bb113: {
        _178 = &_1;
        _177 = ArgMatches::<'_>::value_of::<&str>(move _178, const "root") -> [return: bb114, unwind: bb294];
    }

    bb114: {
        _176 = Option::<&str>::map::<PathBuf, {closure@src/main.rs:204:14: 204:17}>(move _177, const ZeroSized: {closure@src/main.rs:204:14: 204:17}) -> [return: bb115, unwind: bb294];
    }

    bb115: {
        _175 = Option::<PathBuf>::unwrap_or_else::<{closure@src/main.rs:205:25: 205:27}>(move _176, const ZeroSized: {closure@src/main.rs:205:25: 205:27}) -> [return: bb116, unwind: bb294];
    }

    bb116: {
        _424 = const true;
        _180 = &_1;
        _179 = ArgMatches::<'_>::is_present::<&str>(move _180, const "index") -> [return: bb117, unwind: bb310];
    }

    bb117: {
        _182 = &_1;
        _181 = ArgMatches::<'_>::is_present::<&str>(move _182, const "upload") -> [return: bb118, unwind: bb310];
    }

    bb118: {
        _186 = &_1;
        _185 = ArgMatches::<'_>::value_of::<&str>(move _186, const "redirect") -> [return: bb119, unwind: bb310];
    }

    bb119: {
        _184 = Option::<&str>::map::<Result<iron::Url, String>, for<'a> fn(&'a str) -> Result<iron::Url, String> {iron::Url::parse}>(move _185, iron::Url::parse) -> [return: bb120, unwind: bb310];
    }

    bb120: {
        _183 = Option::<Result<iron::Url, String>>::map::<iron::Url, fn(Result<iron::Url, String>) -> iron::Url {Result::<iron::Url, String>::unwrap}>(move _184, Result::<iron::Url, String>::unwrap) -> [return: bb121, unwind: bb310];
    }

    bb121: {
        _423 = const true;
        _189 = &_1;
        _188 = ArgMatches::<'_>::is_present::<&str>(move _189, const "nosort") -> [return: bb122, unwind: bb308];
    }

    bb122: {
        _187 = Not(move _188);
        _192 = &_1;
        _191 = ArgMatches::<'_>::is_present::<&str>(move _192, const "nocache") -> [return: bb123, unwind: bb308];
    }

    bb123: {
        _190 = Not(move _191);
        _195 = &_1;
        _194 = ArgMatches::<'_>::is_present::<&str>(move _195, const "norange") -> [return: bb124, unwind: bb308];
    }

    bb124: {
        _193 = Not(move _194);
        _197 = &_1;
        _196 = ArgMatches::<'_>::value_of::<&str>(move _197, const "cert") -> [return: bb125, unwind: bb308];
    }

    bb125: {
        _199 = &_1;
        _198 = ArgMatches::<'_>::value_of::<&str>(move _199, const "certpass") -> [return: bb126, unwind: bb308];
    }

    bb126: {
        _201 = &_1;
        _200 = ArgMatches::<'_>::is_present::<&str>(move _201, const "cors") -> [return: bb127, unwind: bb308];
    }

    bb127: {
        _204 = &_1;
        _203 = ArgMatches::<'_>::value_of::<&str>(move _204, const "ip") -> [return: bb128, unwind: bb308];
    }

    bb128: {
        _202 = Option::<&str>::unwrap(move _203) -> [return: bb129, unwind: bb308];
    }

    bb129: {
        _209 = &_1;
        _208 = ArgMatches::<'_>::value_of::<&str>(move _209, const "port") -> [return: bb130, unwind: bb308];
    }

    bb130: {
        _207 = Option::<&str>::unwrap(move _208) -> [return: bb131, unwind: bb308];
    }

    bb131: {
        _206 = core::str::<impl str>::parse::<u16>(_207) -> [return: bb132, unwind: bb308];
    }

    bb132: {
        _205 = Result::<u16, ParseIntError>::unwrap(move _206) -> [return: bb133, unwind: bb308];
    }

    bb133: {
        _214 = &_1;
        _213 = ArgMatches::<'_>::value_of::<&str>(move _214, const "upload_size_limit") -> [return: bb134, unwind: bb308];
    }

    bb134: {
        _212 = Option::<&str>::unwrap(move _213) -> [return: bb135, unwind: bb308];
    }

    bb135: {
        _211 = core::str::<impl str>::parse::<u64>(_212) -> [return: bb136, unwind: bb308];
    }

    bb136: {
        _210 = Result::<u64, ParseIntError>::unwrap(move _211) -> [return: bb137, unwind: bb308];
    }

    bb137: {
        _216 = &_1;
        _215 = ArgMatches::<'_>::value_of::<&str>(move _216, const "auth") -> [return: bb138, unwind: bb308];
    }

    bb138: {
        _218 = &_1;
        _217 = ArgMatches::<'_>::values_of_lossy::<&str>(move _218, const "compress") -> [return: bb139, unwind: bb308];
    }

    bb139: {
        _223 = &_1;
        _222 = ArgMatches::<'_>::value_of::<&str>(move _223, const "threads") -> [return: bb140, unwind: bb293];
    }

    bb140: {
        _221 = Option::<&str>::unwrap(move _222) -> [return: bb141, unwind: bb293];
    }

    bb141: {
        _220 = core::str::<impl str>::parse::<u8>(_221) -> [return: bb142, unwind: bb293];
    }

    bb142: {
        _219 = Result::<u8, ParseIntError>::unwrap(move _220) -> [return: bb143, unwind: bb293];
    }

    bb143: {
        _225 = &_1;
        _224 = ArgMatches::<'_>::value_of::<&str>(move _225, const "try-file-404") -> [return: bb144, unwind: bb293];
    }

    bb144: {
        _226 = Printer::new() -> [return: bb145, unwind: bb293];
    }

    bb145: {
        _230 = Blue;
        _229 = Option::<Color>::Some(move _230);
        _228 = build_spec(move _229, const false) -> [return: bb146, unwind: bb292];
    }

    bb146: {
        _227 = Option::<ColorSpec>::Some(move _228);
        _234 = Red;
        _233 = Option::<Color>::Some(move _234);
        _232 = build_spec(move _233, const false) -> [return: bb147, unwind: bb292];
    }

    bb147: {
        _231 = Option::<ColorSpec>::Some(move _232);
        _419 = const _;
        _238 = _419 as &[&str] (PointerCoercion(Unsize));
        _243 = &_202;
        _242 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_243) -> [return: bb148, unwind: bb292];
    }

    bb148: {
        _245 = &_205;
        _244 = core::fmt::rt::Argument::<'_>::new_display::<u16>(_245) -> [return: bb149, unwind: bb292];
    }

    bb149: {
        _241 = [move _242, move _244];
        _240 = &_241;
        _239 = _240 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _237 = Arguments::<'_>::new_v1(move _238, move _239) -> [return: bb150, unwind: bb292];
    }

    bb150: {
        _236 = std::fmt::format(move _237) -> [return: bb151, unwind: bb292];
    }

    bb151: {
        _235 = move _236;
        _253 = &_217;
        _252 = <Option<Vec<String>> as Clone>::clone(move _253) -> [return: bb152, unwind: bb291];
    }

    bb152: {
        _251 = Option::<Vec<String>>::unwrap_or_default(move _252) -> [return: bb153, unwind: bb291];
    }

    bb153: {
        _250 = &_251;
        _249 = <Vec<String> as Deref>::deref(move _250) -> [return: bb154, unwind: bb290];
    }

    bb154: {
        _248 = core::slice::<impl [String]>::iter(_249) -> [return: bb155, unwind: bb290];
    }

    bb155: {
        _247 = <std::slice::Iter<'_, String> as Iterator>::map::<String, {closure@src/main.rs:238:14: 238:17}>(move _248, const ZeroSized: {closure@src/main.rs:238:14: 238:17}) -> [return: bb156, unwind: bb290];
    }

    bb156: {
        _246 = <Map<std::slice::Iter<'_, String>, {closure@src/main.rs:238:14: 238:17}> as Iterator>::collect::<Vec<String>>(move _247) -> [return: bb157, unwind: bb290];
    }

    bb157: {
        drop(_251) -> [return: bb158, unwind: bb289];
    }

    bb158: {
        _256 = &_246;
        _255 = Vec::<String>::is_empty(move _256) -> [return: bb159, unwind: bb289];
    }

    bb159: {
        switchInt(move _255) -> [0: bb162, otherwise: bb160];
    }

    bb160: {
        _257 = const "disabled";
        _254 = <str as ToOwned>::to_owned(_257) -> [return: bb161, unwind: bb289];
    }

    bb161: {
        _420 = const true;
        goto -> bb166;
    }

    bb162: {
        _418 = const _;
        _260 = _418 as &[&str] (PointerCoercion(Unsize));
        _265 = &_246;
        _264 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<String>>(_265) -> [return: bb163, unwind: bb289];
    }

    bb163: {
        _263 = [move _264];
        _262 = &_263;
        _261 = _262 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _259 = Arguments::<'_>::new_v1(move _260, move _261) -> [return: bb164, unwind: bb289];
    }

    bb164: {
        _258 = std::fmt::format(move _259) -> [return: bb165, unwind: bb289];
    }

    bb165: {
        _420 = const true;
        _254 = move _258;
        goto -> bb166;
    }

    bb166: {
        _267 = &_1;
        _266 = ArgMatches::<'_>::is_present::<&str>(move _267, const "silent") -> [return: bb167, unwind: bb306];
    }

    bb167: {
        switchInt(_266) -> [0: bb168, otherwise: bb212];
    }

    bb168: {
        _270 = &_226;
        _271 = const "     Index: {}, Upload: {}, Cache: {}, Cors: {}, Range: {}, Sort: {}, Threads: {}\n          Auth: {}, Compression: {}\n         https: {}, Cert: {}, Cert-Password: {}\n          Root: {},\n    TryFile404: {}\n       Address: {}\n    ======== [{}] ========";
        _282 = SizeOf([std::string::String; 16]);
        _283 = AlignOf([std::string::String; 16]);
        _284 = alloc::alloc::exchange_malloc(move _282, move _283) -> [return: bb169, unwind: bb306];
    }

    bb169: {
        _285 = ShallowInitBox(move _284, [std::string::String; 16]);
        _286 = enable_string(_179) -> [return: bb170, unwind: bb304];
    }

    bb170: {
        _287 = enable_string(_181) -> [return: bb171, unwind: bb288];
    }

    bb171: {
        _288 = enable_string(_190) -> [return: bb172, unwind: bb287];
    }

    bb172: {
        _289 = enable_string(_200) -> [return: bb173, unwind: bb286];
    }

    bb173: {
        _290 = enable_string(_193) -> [return: bb174, unwind: bb285];
    }

    bb174: {
        _291 = enable_string(_187) -> [return: bb175, unwind: bb284];
    }

    bb175: {
        _293 = &_219;
        _292 = <u8 as ToString>::to_string(move _293) -> [return: bb176, unwind: bb283];
    }

    bb176: {
        _296 = const "disabled";
        _295 = Option::<&str>::unwrap_or(_215, _296) -> [return: bb177, unwind: bb282];
    }

    bb177: {
        _294 = <str as ToString>::to_string(_295) -> [return: bb178, unwind: bb282];
    }

    bb178: {
        _420 = const false;
        _297 = move _254;
        _302 = &_196;
        _301 = Option::<&str>::is_some(move _302) -> [return: bb179, unwind: bb280];
    }

    bb179: {
        switchInt(move _301) -> [0: bb181, otherwise: bb180];
    }

    bb180: {
        _300 = const "enabled";
        goto -> bb182;
    }

    bb181: {
        _303 = const "disabled";
        _300 = _303;
        goto -> bb182;
    }

    bb182: {
        _299 = _300;
        _298 = <str as ToString>::to_string(move _299) -> [return: bb183, unwind: bb280];
    }

    bb183: {
        _306 = _196;
        _307 = const "";
        _305 = Option::<&str>::unwrap_or(move _306, _307) -> [return: bb184, unwind: bb279];
    }

    bb184: {
        _304 = <str as ToOwned>::to_owned(_305) -> [return: bb185, unwind: bb279];
    }

    bb185: {
        _310 = const "";
        _309 = Option::<&str>::unwrap_or(_198, _310) -> [return: bb186, unwind: bb278];
    }

    bb186: {
        _308 = <str as ToOwned>::to_owned(_309) -> [return: bb187, unwind: bb278];
    }

    bb187: {
        _315 = &_175;
        _314 = <PathBuf as Deref>::deref(move _315) -> [return: bb188, unwind: bb277];
    }

    bb188: {
        _313 = Path::to_str(_314) -> [return: bb189, unwind: bb277];
    }

    bb189: {
        _312 = Option::<&str>::unwrap(move _313) -> [return: bb190, unwind: bb277];
    }

    bb190: {
        _311 = <str as ToOwned>::to_owned(_312) -> [return: bb191, unwind: bb277];
    }

    bb191: {
        _318 = const "";
        _317 = Option::<&str>::unwrap_or(_224, _318) -> [return: bb192, unwind: bb276];
    }

    bb192: {
        _316 = <str as ToOwned>::to_owned(_317) -> [return: bb193, unwind: bb276];
    }

    bb193: {
        _417 = const _;
        _322 = _417 as &[&str] (PointerCoercion(Unsize));
        _330 = &_196;
        _329 = Option::<&str>::is_some(move _330) -> [return: bb194, unwind: bb275];
    }

    bb194: {
        switchInt(move _329) -> [0: bb196, otherwise: bb195];
    }

    bb195: {
        _328 = const "https";
        goto -> bb197;
    }

    bb196: {
        _331 = const "http";
        _328 = _331;
        goto -> bb197;
    }

    bb197: {
        _327 = &_328;
        _326 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_327) -> [return: bb198, unwind: bb275];
    }

    bb198: {
        _333 = &_235;
        _332 = core::fmt::rt::Argument::<'_>::new_display::<String>(_333) -> [return: bb199, unwind: bb275];
    }

    bb199: {
        _325 = [move _326, move _332];
        _324 = &_325;
        _323 = _324 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _321 = Arguments::<'_>::new_v1(move _322, move _323) -> [return: bb200, unwind: bb275];
    }

    bb200: {
        _320 = std::fmt::format(move _321) -> [return: bb201, unwind: bb275];
    }

    bb201: {
        _319 = move _320;
        _334 = now_string() -> [return: bb202, unwind: bb274];
    }

    bb202: {
        _446 = (((_285.0: std::ptr::Unique<[std::string::String; 16]>).0: std::ptr::NonNull<[std::string::String; 16]>).0: *const [std::string::String; 16]);
        _447 = _446 as *const () (PtrToPtr);
        _448 = _447 as usize (Transmute);
        _449 = AlignOf([std::string::String; 16]);
        _450 = Sub(_449, const 1_usize);
        _451 = BitAnd(_448, _450);
        _452 = Eq(_451, const 0_usize);
        assert(_452, "misaligned pointer dereference: address must be a multiple of {} but is {}", _449, _448) -> [success: bb347, unwind unreachable];
    }

    bb203: {
        _278 = &_279;
        _277 = <Vec<String> as Deref>::deref(move _278) -> [return: bb204, unwind: bb273];
    }

    bb204: {
        _276 = core::slice::<impl [String]>::iter(_277) -> [return: bb205, unwind: bb273];
    }

    bb205: {
        _336 = &_227;
        _335 = {closure@src/main.rs:285:22: 285:25} { color_blue: move _336 };
        _275 = <std::slice::Iter<'_, String> as Iterator>::map::<(&str, &Option<ColorSpec>), {closure@src/main.rs:285:22: 285:25}>(move _276, move _335) -> [return: bb206, unwind: bb273];
    }

    bb206: {
        _274 = <Map<std::slice::Iter<'_, String>, {closure@src/main.rs:285:22: 285:25}> as Iterator>::collect::<Vec<(&str, &Option<ColorSpec>)>>(move _275) -> [return: bb207, unwind: bb273];
    }

    bb207: {
        _273 = &_274;
        _272 = <Vec<(&str, &Option<ColorSpec>)> as Deref>::deref(_273) -> [return: bb208, unwind: bb272];
    }

    bb208: {
        _269 = Printer::println_out(move _270, _271, _272) -> [return: bb209, unwind: bb272];
    }

    bb209: {
        _268 = Result::<(), StringError>::unwrap(move _269) -> [return: bb210, unwind: bb272];
    }

    bb210: {
        drop(_274) -> [return: bb211, unwind: bb273];
    }

    bb211: {
        drop(_279) -> [return: bb212, unwind: bb306];
    }

    bb212: {
        _424 = const false;
        _339 = move _175;
        _423 = const false;
        _340 = move _183;
        _343 = &_217;
        _342 = <Option<Vec<String>> as Clone>::clone(move _343) -> [return: bb213, unwind: bb270];
    }

    bb213: {
        _341 = Option::<Vec<String>>::map::<Vec<String>, {closure@src/main.rs:301:18: 301:24}>(move _342, const ZeroSized: {closure@src/main.rs:301:18: 301:24}) -> [return: bb214, unwind: bb270];
    }

    bb214: {
        _344 = Option::<&str>::map::<PathBuf, fn(&str) -> PathBuf {<PathBuf as std::convert::From<&str>>::from}>(_224, <PathBuf as std::convert::From<&str>>::from) -> [return: bb215, unwind: bb269];
    }

    bb215: {
        _338 = MainHandler { root: move _339, index: _179, upload: _181, cache: _190, range: _193, redirect_to: move _340, sort: _187, compress: move _341, try_file_404: move _344, upload_size_limit: _210 };
        _337 = iron::Chain::new::<MainHandler>(move _338) -> [return: bb216, unwind: bb306];
    }

    bb216: {
        _422 = const true;
        switchInt(_200) -> [0: bb219, otherwise: bb217];
    }

    bb217: {
        _346 = &mut _337;
        _347 = CorsMiddleware::with_allow_any() -> [return: bb218, unwind: bb303];
    }

    bb218: {
        _345 = iron::Chain::link_around::<CorsMiddleware>(move _346, move _347) -> [return: bb348, unwind: bb303];
    }

    bb219: {
        _348 = discriminant(_215);
        switchInt(move _348) -> [1: bb220, otherwise: bb228];
    }

    bb220: {
        _349 = ((_215 as Some).0: &str);
        _350 = AuthChecker::new(_349) -> [return: bb221, unwind: bb303];
    }

    bb221: {
        _351 = discriminant(_350);
        switchInt(move _351) -> [0: bb224, 1: bb222, otherwise: bb223];
    }

    bb222: {
        _355 = move ((_350 as Err).0: util::StringError);
        _358 = &_226;
        _359 = const "{}";
        _365 = &_355;
        _364 = <StringError as Deref>::deref(move _365) -> [return: bb225, unwind: bb268];
    }

    bb223: {
        unreachable;
    }

    bb224: {
        _352 = move ((_350 as Ok).0: middlewares::auth::AuthChecker);
        _354 = &mut _337;
        _353 = iron::Chain::link_before::<AuthChecker>(move _354, move _352) -> [return: bb349, unwind: bb303];
    }

    bb225: {
        _366 = &_231;
        _363 = (_364, _366);
        _362 = [move _363];
        _361 = &_362;
        _360 = _361 as &[(&str, &std::option::Option<termcolor::ColorSpec>)] (PointerCoercion(Unsize));
        _357 = Printer::print_err(move _358, _359, move _360) -> [return: bb226, unwind: bb268];
    }

    bb226: {
        _356 = Result::<(), StringError>::unwrap(move _357) -> [return: bb227, unwind: bb268];
    }

    bb227: {
        drop(_355) -> [return: bb258, unwind: bb303];
    }

    bb228: {
        _367 = discriminant(_217);
        switchInt(move _367) -> [1: bb229, otherwise: bb232];
    }

    bb229: {
        _368 = &((_217 as Some).0: std::vec::Vec<std::string::String>);
        _369 = Vec::<String>::is_empty(_368) -> [return: bb230, unwind: bb303];
    }

    bb230: {
        switchInt(move _369) -> [0: bb231, otherwise: bb232];
    }

    bb231: {
        _371 = &mut _337;
        _370 = iron::Chain::link_after::<CompressionHandler>(move _371, const CompressionHandler) -> [return: bb350, unwind: bb303];
    }

    bb232: {
        switchInt(_266) -> [0: bb233, otherwise: bb235];
    }

    bb233: {
        _373 = &mut _337;
        _375 = Printer::new() -> [return: bb234, unwind: bb303];
    }

    bb234: {
        _374 = RequestLogger { printer: move _375 };
        _372 = iron::Chain::link_after::<RequestLogger>(move _373, move _374) -> [return: bb351, unwind: bb303];
    }

    bb235: {
        _422 = const false;
        _377 = move _337;
        _376 = Iron::<iron::Chain>::new(move _377) -> [return: bb236, unwind: bb303];
    }

    bb236: {
        _421 = const true;
        _378 = _219;
        (_376.2: usize) = move _378 as usize (IntToInt);
        _380 = discriminant(_196);
        switchInt(move _380) -> [1: bb237, otherwise: bb241];
    }

    bb237: {
        _381 = ((_196 as Some).0: &str);
        _385 = const "";
        _384 = Option::<&str>::unwrap_or(_198, _385) -> [return: bb238, unwind: bb301];
    }

    bb238: {
        _383 = NativeTlsServer::new::<&str>(_381, _384) -> [return: bb239, unwind: bb301];
    }

    bb239: {
        _382 = Result::<NativeTlsServer, hyper_native_tls::ServerError>::unwrap(move _383) -> [return: bb240, unwind: bb301];
    }

    bb240: {
        _421 = const false;
        _386 = move _376;
        _387 = &_235;
        _379 = Iron::<iron::Chain>::https::<&String, NativeTlsServer>(move _386, move _387, move _382) -> [return: bb352, unwind: bb301];
    }

    bb241: {
        _421 = const false;
        _388 = move _376;
        _389 = &_235;
        _379 = Iron::<iron::Chain>::http::<&String>(move _388, move _389) -> [return: bb353, unwind: bb301];
    }

    bb242: {
        _390 = discriminant(_379);
        switchInt(move _390) -> [1: bb243, otherwise: bb251];
    }

    bb243: {
        _391 = move ((_379 as Err).0: iron::error::HttpError);
        _394 = &_226;
        _395 = const "{}: Can not bind on {}, {}";
        _400 = const "ERROR";
        _405 = Red;
        _404 = Option::<Color>::Some(move _405);
        _403 = build_spec(move _404, const true) -> [return: bb244, unwind: bb267];
    }

    bb244: {
        _402 = Option::<ColorSpec>::Some(move _403);
        _401 = &_402;
        _399 = (_400, _401);
        _408 = &_235;
        _407 = String::as_str(move _408) -> [return: bb245, unwind: bb267];
    }

    bb245: {
        _416 = const _;
        _406 = (_407, _416);
        _413 = &_391;
        _412 = <HttpError as ToString>::to_string(move _413) -> [return: bb246, unwind: bb267];
    }

    bb246: {
        _411 = &_412;
        _410 = String::as_str(move _411) -> [return: bb247, unwind: bb266];
    }

    bb247: {
        _415 = const _;
        _409 = (_410, _415);
        _398 = [move _399, move _406, move _409];
        _397 = &_398;
        _396 = _397 as &[(&str, &std::option::Option<termcolor::ColorSpec>)] (PointerCoercion(Unsize));
        _393 = Printer::println_err(move _394, _395, move _396) -> [return: bb248, unwind: bb266];
    }

    bb248: {
        _392 = Result::<(), StringError>::unwrap(move _393) -> [return: bb249, unwind: bb266];
    }

    bb249: {
        drop(_412) -> [return: bb250, unwind: bb267];
    }

    bb250: {
        _414 = exit(const 1_i32) -> bb267;
    }

    bb251: {
        drop(_379) -> [return: bb252, unwind: bb301];
    }

    bb252: {
        _421 = const false;
        _422 = const false;
        switchInt(_420) -> [0: bb253, otherwise: bb296];
    }

    bb253: {
        _420 = const false;
        drop(_246) -> [return: bb254, unwind: bb291];
    }

    bb254: {
        drop(_235) -> [return: bb255, unwind: bb292];
    }

    bb255: {
        drop(_226) -> [return: bb256, unwind: bb293];
    }

    bb256: {
        drop(_217) -> [return: bb257, unwind: bb308];
    }

    bb257: {
        _423 = const false;
        _424 = const false;
        drop(_1) -> [return: bb265, unwind continue];
    }

    bb258: {
        drop(_337) -> [return: bb259, unwind: bb306];
    }

    bb259: {
        _422 = const false;
        switchInt(_420) -> [0: bb260, otherwise: bb297];
    }

    bb260: {
        _420 = const false;
        drop(_246) -> [return: bb261, unwind: bb291];
    }

    bb261: {
        drop(_235) -> [return: bb262, unwind: bb292];
    }

    bb262: {
        drop(_226) -> [return: bb263, unwind: bb293];
    }

    bb263: {
        drop(_217) -> [return: bb264, unwind: bb308];
    }

    bb264: {
        _423 = const false;
        _424 = const false;
        drop(_1) -> [return: bb265, unwind continue];
    }

    bb265: {
        return;
    }

    bb266 (cleanup): {
        drop(_412) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        drop(_391) -> [return: bb299, unwind terminate(cleanup)];
    }

    bb268 (cleanup): {
        drop(_355) -> [return: bb303, unwind terminate(cleanup)];
    }

    bb269 (cleanup): {
        drop(_341) -> [return: bb270, unwind terminate(cleanup)];
    }

    bb270 (cleanup): {
        drop(_340) -> [return: bb271, unwind terminate(cleanup)];
    }

    bb271 (cleanup): {
        drop(_339) -> [return: bb306, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        drop(_274) -> [return: bb273, unwind terminate(cleanup)];
    }

    bb273 (cleanup): {
        drop(_279) -> [return: bb306, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        drop(_319) -> [return: bb275, unwind terminate(cleanup)];
    }

    bb275 (cleanup): {
        drop(_316) -> [return: bb276, unwind terminate(cleanup)];
    }

    bb276 (cleanup): {
        drop(_311) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb277 (cleanup): {
        drop(_308) -> [return: bb278, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        drop(_304) -> [return: bb279, unwind terminate(cleanup)];
    }

    bb279 (cleanup): {
        drop(_298) -> [return: bb280, unwind terminate(cleanup)];
    }

    bb280 (cleanup): {
        drop(_297) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb281 (cleanup): {
        drop(_294) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb282 (cleanup): {
        drop(_292) -> [return: bb283, unwind terminate(cleanup)];
    }

    bb283 (cleanup): {
        drop(_291) -> [return: bb284, unwind terminate(cleanup)];
    }

    bb284 (cleanup): {
        drop(_290) -> [return: bb285, unwind terminate(cleanup)];
    }

    bb285 (cleanup): {
        drop(_289) -> [return: bb286, unwind terminate(cleanup)];
    }

    bb286 (cleanup): {
        drop(_288) -> [return: bb287, unwind terminate(cleanup)];
    }

    bb287 (cleanup): {
        drop(_287) -> [return: bb288, unwind terminate(cleanup)];
    }

    bb288 (cleanup): {
        drop(_286) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb289 (cleanup): {
        drop(_246) -> [return: bb291, unwind terminate(cleanup)];
    }

    bb290 (cleanup): {
        drop(_251) -> [return: bb291, unwind terminate(cleanup)];
    }

    bb291 (cleanup): {
        drop(_235) -> [return: bb292, unwind terminate(cleanup)];
    }

    bb292 (cleanup): {
        drop(_226) -> [return: bb293, unwind terminate(cleanup)];
    }

    bb293 (cleanup): {
        drop(_217) -> [return: bb308, unwind terminate(cleanup)];
    }

    bb294 (cleanup): {
        drop(_1) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb295 (cleanup): {
        resume;
    }

    bb296: {
        drop(_254) -> [return: bb253, unwind: bb289];
    }

    bb297: {
        drop(_254) -> [return: bb260, unwind: bb289];
    }

    bb298 (cleanup): {
        drop(_379) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb299 (cleanup): {
        _443 = discriminant(_379);
        switchInt(move _443) -> [1: bb301, otherwise: bb298];
    }

    bb300 (cleanup): {
        drop(_376) -> [return: bb303, unwind terminate(cleanup)];
    }

    bb301 (cleanup): {
        switchInt(_421) -> [0: bb303, otherwise: bb300];
    }

    bb302 (cleanup): {
        drop(_337) -> [return: bb306, unwind terminate(cleanup)];
    }

    bb303 (cleanup): {
        switchInt(_422) -> [0: bb306, otherwise: bb302];
    }

    bb304 (cleanup): {
        _444 = &mut _285;
        _445 = <std::boxed::Box<[String; 16]> as Drop>::drop(move _444) -> [return: bb354, unwind terminate(cleanup)];
    }

    bb305 (cleanup): {
        drop(_254) -> [return: bb289, unwind terminate(cleanup)];
    }

    bb306 (cleanup): {
        switchInt(_420) -> [0: bb289, otherwise: bb305];
    }

    bb307 (cleanup): {
        drop(_183) -> [return: bb310, unwind terminate(cleanup)];
    }

    bb308 (cleanup): {
        switchInt(_423) -> [0: bb310, otherwise: bb307];
    }

    bb309 (cleanup): {
        drop(_175) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb310 (cleanup): {
        switchInt(_424) -> [0: bb294, otherwise: bb309];
    }

    bb311 (cleanup): {
        drop(_3) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb312 (cleanup): {
        switchInt(_425) -> [0: bb295, otherwise: bb311];
    }

    bb313 (cleanup): {
        drop(_4) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb314 (cleanup): {
        switchInt(_426) -> [0: bb295, otherwise: bb313];
    }

    bb315 (cleanup): {
        drop(_5) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb316 (cleanup): {
        switchInt(_427) -> [0: bb295, otherwise: bb315];
    }

    bb317 (cleanup): {
        drop(_6) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb318 (cleanup): {
        switchInt(_428) -> [0: bb295, otherwise: bb317];
    }

    bb319 (cleanup): {
        drop(_7) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb320 (cleanup): {
        switchInt(_429) -> [0: bb295, otherwise: bb319];
    }

    bb321 (cleanup): {
        drop(_8) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb322 (cleanup): {
        switchInt(_430) -> [0: bb295, otherwise: bb321];
    }

    bb323 (cleanup): {
        drop(_9) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb324 (cleanup): {
        switchInt(_431) -> [0: bb295, otherwise: bb323];
    }

    bb325 (cleanup): {
        drop(_10) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb326 (cleanup): {
        switchInt(_432) -> [0: bb295, otherwise: bb325];
    }

    bb327 (cleanup): {
        drop(_11) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb328 (cleanup): {
        switchInt(_433) -> [0: bb295, otherwise: bb327];
    }

    bb329 (cleanup): {
        drop(_12) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb330 (cleanup): {
        switchInt(_434) -> [0: bb295, otherwise: bb329];
    }

    bb331 (cleanup): {
        drop(_13) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb332 (cleanup): {
        switchInt(_435) -> [0: bb295, otherwise: bb331];
    }

    bb333 (cleanup): {
        drop(_14) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb334 (cleanup): {
        switchInt(_436) -> [0: bb295, otherwise: bb333];
    }

    bb335 (cleanup): {
        drop(_15) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb336 (cleanup): {
        switchInt(_437) -> [0: bb295, otherwise: bb335];
    }

    bb337 (cleanup): {
        drop(_16) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb338 (cleanup): {
        switchInt(_438) -> [0: bb295, otherwise: bb337];
    }

    bb339 (cleanup): {
        drop(_17) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb340 (cleanup): {
        switchInt(_439) -> [0: bb295, otherwise: bb339];
    }

    bb341 (cleanup): {
        drop(_18) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb342 (cleanup): {
        switchInt(_440) -> [0: bb295, otherwise: bb341];
    }

    bb343 (cleanup): {
        drop(_19) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb344 (cleanup): {
        switchInt(_441) -> [0: bb295, otherwise: bb343];
    }

    bb345 (cleanup): {
        drop(_20) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb346 (cleanup): {
        switchInt(_442) -> [0: bb295, otherwise: bb345];
    }

    bb347: {
        (*_446) = [move _286, move _287, move _288, move _289, move _290, move _291, move _292, move _294, move _297, move _298, move _304, move _308, move _311, move _316, move _319, move _334];
        _281 = move _285;
        _280 = move _281 as std::boxed::Box<[std::string::String]> (PointerCoercion(Unsize));
        _279 = slice::<impl [String]>::into_vec::<std::alloc::Global>(move _280) -> [return: bb203, unwind: bb306];
    }

    bb348: {
        goto -> bb219;
    }

    bb349: {
        goto -> bb228;
    }

    bb350: {
        goto -> bb232;
    }

    bb351: {
        goto -> bb235;
    }

    bb352: {
        goto -> bb242;
    }

    bb353: {
        goto -> bb242;
    }

    bb354 (cleanup): {
        goto -> bb306;
    }
}

promoted[0] in main: &Option<ColorSpec> = {
    let mut _0: &std::option::Option<termcolor::ColorSpec>;
    let mut _1: std::option::Option<termcolor::ColorSpec>;

    bb0: {
        _1 = Option::<ColorSpec>::None;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<ColorSpec> = {
    let mut _0: &std::option::Option<termcolor::ColorSpec>;
    let mut _1: std::option::Option<termcolor::ColorSpec>;

    bb0: {
        _1 = Option::<ColorSpec>::None;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "://"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const ":"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &{closure@src/main.rs:53:25: 53:28}, _2: String) -> Result<(), String> {
    debug s => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _3: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _4: isize;
    let _5: std::fs::Metadata;
    let mut _6: bool;
    let mut _7: &std::fs::Metadata;
    let mut _8: std::string::String;
    let _9: &str;
    let _10: std::io::Error;
    let mut _11: std::string::String;
    let mut _12: &std::io::Error;
    scope 1 {
        debug metadata => _5;
    }
    scope 2 {
        debug e => _10;
    }

    bb0: {
        _3 = std::fs::metadata::<String>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _10 = move ((_3 as Err).0: std::io::Error);
        _12 = &_10;
        _11 = <std::io::Error as ToString>::to_string(move _12) -> [return: bb9, unwind: bb10];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: std::fs::Metadata);
        _7 = &_5;
        _6 = Metadata::is_dir(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _6) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = Result::<(), String>::Ok(const ());
        goto -> bb12;
    }

    bb7: {
        _9 = const "Not directory";
        _8 = <str as ToOwned>::to_owned(_9) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = Result::<(), String>::Err(move _8);
        goto -> bb12;
    }

    bb9: {
        _0 = Result::<(), String>::Err(move _11);
        drop(_10) -> [return: bb12, unwind continue];
    }

    bb10 (cleanup): {
        drop(_10) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        return;
    }
}

fn main::{closure#1}(_1: &{closure@src/main.rs:74:25: 74:37}, _2: String) -> Result<(), String> {
    debug url_string => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _3: std::result::Result<iron::Url, std::string::String>;
    let _4: &str;
    let mut _5: &std::string::String;

    bb0: {
        _5 = &_2;
        _4 = String::as_str(move _5) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _3 = iron::Url::parse(_4) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = Result::<iron::Url, String>::map::<(), {closure@src/main.rs:74:80: 74:83}>(move _3, const ZeroSized: {closure@src/main.rs:74:80: 74:83}) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn main::{closure#1}::{closure#0}(_1: {closure@src/main.rs:74:80: 74:83}, _2: iron::Url) -> () {
    let mut _0: ();

    bb0: {
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#2}(_1: &{closure@src/main.rs:88:25: 88:28}, _2: String) -> Result<(), String> {
    debug s => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _3: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _4: isize;
    let _5: std::fs::Metadata;
    let mut _6: bool;
    let mut _7: &std::fs::Metadata;
    let mut _8: std::string::String;
    let _9: &str;
    let _10: std::io::Error;
    let mut _11: std::string::String;
    let mut _12: &std::io::Error;
    scope 1 {
        debug metadata => _5;
    }
    scope 2 {
        debug e => _10;
    }

    bb0: {
        _3 = std::fs::metadata::<String>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _10 = move ((_3 as Err).0: std::io::Error);
        _12 = &_10;
        _11 = <std::io::Error as ToString>::to_string(move _12) -> [return: bb9, unwind: bb10];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: std::fs::Metadata);
        _7 = &_5;
        _6 = Metadata::is_file(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _6) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = Result::<(), String>::Ok(const ());
        goto -> bb12;
    }

    bb7: {
        _9 = const "Not a regular file";
        _8 = <str as ToOwned>::to_owned(_9) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = Result::<(), String>::Err(move _8);
        goto -> bb12;
    }

    bb9: {
        _0 = Result::<(), String>::Err(move _11);
        drop(_10) -> [return: bb12, unwind continue];
    }

    bb10 (cleanup): {
        drop(_10) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        return;
    }
}

fn main::{closure#3}(_1: &{closure@src/main.rs:112:25: 112:28}, _2: String) -> Result<(), String> {
    debug s => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _3: std::result::Result<u64, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: &std::string::String;
    let mut _6: isize;
    let _7: std::num::ParseIntError;
    let mut _8: std::string::String;
    let mut _9: &std::num::ParseIntError;
    scope 1 {
        debug e => _7;
    }

    bb0: {
        _5 = &_2;
        _4 = <String as Deref>::deref(move _5) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _3 = core::str::<impl str>::parse::<u64>(_4) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Err).0: std::num::ParseIntError);
        _9 = &_7;
        _8 = <ParseIntError as ToString>::to_string(move _9) -> [return: bb6, unwind: bb9];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = Result::<(), String>::Ok(const ());
        goto -> bb7;
    }

    bb6: {
        _0 = Result::<(), String>::Err(move _8);
        goto -> bb7;
    }

    bb7: {
        drop(_2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn main::{closure#4}(_1: &{closure@src/main.rs:122:25: 122:28}, _2: String) -> Result<(), String> {
    debug s => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _3: std::result::Result<std::net::IpAddr, std::net::AddrParseError>;
    let _4: &str;
    let _5: &std::string::String;
    let mut _6: isize;
    let _7: std::net::AddrParseError;
    let mut _8: std::string::String;
    let mut _9: &std::net::AddrParseError;
    scope 1 {
        debug e => _7;
    }

    bb0: {
        _5 = &_2;
        _4 = <String as Deref>::deref(_5) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _3 = <IpAddr as FromStr>::from_str(_4) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Err).0: std::net::AddrParseError);
        _9 = &_7;
        _8 = <AddrParseError as ToString>::to_string(move _9) -> [return: bb6, unwind: bb9];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = Result::<(), String>::Ok(const ());
        goto -> bb7;
    }

    bb6: {
        _0 = Result::<(), String>::Err(move _8);
        goto -> bb7;
    }

    bb7: {
        drop(_2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn main::{closure#5}(_1: &{closure@src/main.rs:134:25: 134:28}, _2: String) -> Result<(), String> {
    debug s => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _3: std::result::Result<u16, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: &std::string::String;
    let mut _6: isize;
    let _7: std::num::ParseIntError;
    let mut _8: std::string::String;
    let mut _9: &std::num::ParseIntError;
    scope 1 {
        debug e => _7;
    }

    bb0: {
        _5 = &_2;
        _4 = <String as Deref>::deref(move _5) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _3 = core::str::<impl str>::parse::<u16>(_4) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Err).0: std::num::ParseIntError);
        _9 = &_7;
        _8 = <ParseIntError as ToString>::to_string(move _9) -> [return: bb6, unwind: bb9];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = Result::<(), String>::Ok(const ());
        goto -> bb7;
    }

    bb6: {
        _0 = Result::<(), String>::Err(move _8);
        goto -> bb7;
    }

    bb7: {
        drop(_2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn main::{closure#6}(_1: &{closure@src/main.rs:145:25: 145:28}, _2: String) -> Result<(), String> {
    debug s => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let _3: std::vec::Vec<&str>;
    let mut _4: std::str::SplitN<'_, char>;
    let _5: &str;
    let mut _6: &std::string::String;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: &std::vec::Vec<&str>;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: &std::vec::Vec<&str>;
    let mut _13: bool;
    let _14: &&str;
    let mut _15: &std::vec::Vec<&str>;
    let mut _16: std::string::String;
    let _17: &str;
    let mut _18: bool;
    let _19: &&str;
    let mut _20: &std::vec::Vec<&str>;
    let mut _21: std::string::String;
    let _22: &str;
    let mut _23: &str;
    let mut _24: &str;
    scope 1 {
        debug parts => _3;
    }

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(move _6) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _4 = core::str::<impl str>::splitn::<'_, char>(_5, const 2_usize, const ':') -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _3 = <std::str::SplitN<'_, char> as Iterator>::collect::<Vec<&str>>(move _4) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _9 = &_3;
        _8 = Vec::<&str>::len(move _9) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _7 = Lt(move _8, const 2_usize);
        switchInt(move _7) -> [0: bb5, otherwise: bb10];
    }

    bb5: {
        _12 = &_3;
        _11 = Vec::<&str>::len(move _12) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _10 = Ge(move _11, const 2_usize);
        switchInt(move _10) -> [0: bb12, otherwise: bb7];
    }

    bb7: {
        _15 = &_3;
        _14 = <Vec<&str> as std::ops::Index<usize>>::index(move _15, const 1_usize) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _23 = deref_copy (*_14);
        _13 = core::str::<impl str>::is_empty(_23) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        switchInt(move _13) -> [0: bb12, otherwise: bb10];
    }

    bb10: {
        _17 = const "no password found";
        _16 = <str as ToOwned>::to_owned(_17) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _0 = Result::<(), String>::Err(move _16);
        goto -> bb18;
    }

    bb12: {
        _20 = &_3;
        _19 = <Vec<&str> as std::ops::Index<usize>>::index(move _20, const 0_usize) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        _24 = deref_copy (*_19);
        _18 = core::str::<impl str>::is_empty(_24) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        switchInt(move _18) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        _22 = const "no username found";
        _21 = <str as ToOwned>::to_owned(_22) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _0 = Result::<(), String>::Err(move _21);
        goto -> bb18;
    }

    bb17: {
        _0 = Result::<(), String>::Ok(const ());
        goto -> bb18;
    }

    bb18: {
        drop(_3) -> [return: bb19, unwind: bb22];
    }

    bb19: {
        drop(_2) -> [return: bb20, unwind continue];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_3) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

fn main::{closure#7}(_1: &{closure@src/main.rs:168:25: 168:28}, _2: String) -> Result<(), String> {
    debug s => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _3: std::result::Result<u8, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: &std::string::String;
    let mut _6: isize;
    let _7: u8;
    let mut _8: bool;
    let mut _9: std::string::String;
    let _10: &str;
    let _11: std::num::ParseIntError;
    let mut _12: std::string::String;
    let mut _13: &std::num::ParseIntError;
    scope 1 {
        debug v => _7;
    }
    scope 2 {
        debug e => _11;
    }

    bb0: {
        _5 = &_2;
        _4 = <String as Deref>::deref(move _5) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _3 = core::str::<impl str>::parse::<u8>(_4) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_3 as Err).0: std::num::ParseIntError);
        _13 = &_11;
        _12 = <ParseIntError as ToString>::to_string(move _13) -> [return: bb9, unwind: bb12];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_3 as Ok).0: u8);
        _8 = Gt(_7, const 0_u8);
        switchInt(move _8) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = Result::<(), String>::Ok(const ());
        goto -> bb10;
    }

    bb7: {
        _10 = const "Not positive number";
        _9 = <str as ToOwned>::to_owned(_10) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _0 = Result::<(), String>::Err(move _9);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<(), String>::Err(move _12);
        goto -> bb10;
    }

    bb10: {
        drop(_2) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn main::{closure#8}(_1: &{closure@src/main.rs:184:25: 184:28}, _2: String) -> Result<(), String> {
    debug s => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _3: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _4: isize;
    let _5: std::fs::Metadata;
    let mut _6: bool;
    let mut _7: &std::fs::Metadata;
    let mut _8: std::string::String;
    let _9: &str;
    let _10: std::io::Error;
    let mut _11: std::string::String;
    let mut _12: &std::io::Error;
    scope 1 {
        debug metadata => _5;
    }
    scope 2 {
        debug e => _10;
    }

    bb0: {
        _3 = std::fs::metadata::<String>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _10 = move ((_3 as Err).0: std::io::Error);
        _12 = &_10;
        _11 = <std::io::Error as ToString>::to_string(move _12) -> [return: bb9, unwind: bb10];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: std::fs::Metadata);
        _7 = &_5;
        _6 = Metadata::is_file(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _6) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = Result::<(), String>::Ok(const ());
        goto -> bb12;
    }

    bb7: {
        _9 = const "Not a file";
        _8 = <str as ToOwned>::to_owned(_9) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = Result::<(), String>::Err(move _8);
        goto -> bb12;
    }

    bb9: {
        _0 = Result::<(), String>::Err(move _11);
        drop(_10) -> [return: bb12, unwind continue];
    }

    bb10 (cleanup): {
        drop(_10) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        return;
    }
}

fn main::{closure#9}(_1: {closure@src/main.rs:204:14: 204:17}, _2: &str) -> PathBuf {
    debug s => _2;
    let mut _0: std::path::PathBuf;
    let mut _3: std::result::Result<std::path::PathBuf, std::io::Error>;
    let _4: &std::path::Path;
    let mut _5: &std::path::PathBuf;
    let _6: std::path::PathBuf;

    bb0: {
        _6 = <PathBuf as std::convert::From<&str>>::from(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = <PathBuf as Deref>::deref(move _5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = Path::canonicalize(_4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = Result::<PathBuf, std::io::Error>::unwrap(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_6) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_6) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main::{closure#10}(_1: {closure@src/main.rs:205:25: 205:27}) -> PathBuf {
    let mut _0: std::path::PathBuf;
    let mut _2: std::result::Result<std::path::PathBuf, std::io::Error>;

    bb0: {
        _2 = current_dir() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<PathBuf, std::io::Error>::unwrap(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn main::{closure#11}(_1: &mut {closure@src/main.rs:238:14: 238:17}, _2: &String) -> String {
    debug s => _2;
    let mut _0: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&std::string::String;
    let mut _10: &[&str; 1];
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (PointerCoercion(Unsize));
        _9 = &_2;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&String>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::fmt::format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main::{closure#11}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "*."];
        _0 = &_1;
        return;
    }
}

fn main::{closure#12}(_1: &mut {closure@src/main.rs:285:22: 285:25}, _2: &String) -> (&str, &Option<ColorSpec>) {
    debug s => _2;
    debug color_blue => (*((*_1).0: &std::option::Option<termcolor::ColorSpec>));
    let mut _0: (&str, &std::option::Option<termcolor::ColorSpec>);
    let mut _3: &str;
    let mut _4: &std::option::Option<termcolor::ColorSpec>;

    bb0: {
        _3 = String::as_str(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = deref_copy ((*_1).0: &std::option::Option<termcolor::ColorSpec>);
        _0 = (move _3, _4);
        return;
    }
}

fn main::{closure#13}(_1: {closure@src/main.rs:301:18: 301:24}, _2: Vec<String>) -> Vec<String> {
    debug exts => _2;
    let mut _0: std::vec::Vec<std::string::String>;
    let mut _3: std::iter::Map<std::slice::Iter<'_, std::string::String>, {closure@src/main.rs:301:41: 301:44}>;
    let mut _4: std::slice::Iter<'_, std::string::String>;
    let _5: &[std::string::String];
    let mut _6: &std::vec::Vec<std::string::String>;

    bb0: {
        _6 = &_2;
        _5 = <Vec<String> as Deref>::deref(move _6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = core::slice::<impl [String]>::iter(_5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = <std::slice::Iter<'_, String> as Iterator>::map::<String, {closure@src/main.rs:301:41: 301:44}>(move _4, const ZeroSized: {closure@src/main.rs:301:41: 301:44}) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = <Map<std::slice::Iter<'_, String>, {closure@src/main.rs:301:41: 301:44}> as Iterator>::collect::<Vec<String>>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main::{closure#13}::{closure#0}(_1: &mut {closure@src/main.rs:301:41: 301:44}, _2: &String) -> String {
    debug s => _2;
    let mut _0: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&std::string::String;
    let mut _10: &[&str; 1];
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (PointerCoercion(Unsize));
        _9 = &_2;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&String>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::fmt::format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main::{closure#13}::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "."];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:366:1: 366:29>::handle(_1: &MainHandler, _2: &mut iron::Request<'_, '_>) -> Result<iron::Response, IronError> {
    debug self => _1;
    debug req => _2;
    let mut _0: std::result::Result<iron::Response, iron::IronError>;
    let mut _3: std::path::PathBuf;
    let mut _4: &std::path::PathBuf;
    let mut _5: &std::option::Option<iron::Url>;
    let mut _6: isize;
    let mut _8: iron::Response;
    let mut _9: (iron::status::Status, iron::modifiers::Redirect);
    let mut _10: iron::status::Status;
    let mut _11: iron::modifiers::Redirect;
    let mut _12: iron::Url;
    let mut _14: std::iter::Map<std::iter::Filter<std::vec::IntoIter<&str>, {closure@src/main.rs:379:21: 379:24}>, {closure@src/main.rs:380:18: 380:21}>;
    let mut _15: std::iter::Filter<std::vec::IntoIter<&str>, {closure@src/main.rs:379:21: 379:24}>;
    let mut _16: std::vec::IntoIter<&str>;
    let mut _17: std::vec::Vec<&str>;
    let mut _18: &iron::Url;
    let _19: ();
    let mut _20: &mut std::path::PathBuf;
    let mut _21: &std::path::PathBuf;
    let mut _23: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _24: &std::path::PathBuf;
    let mut _25: bool;
    let _26: &std::path::Path;
    let mut _27: &std::path::PathBuf;
    let mut _28: &std::path::PathBuf;
    let mut _29: iron::IronError;
    let mut _30: std::io::Error;
    let mut _31: std::io::ErrorKind;
    let mut _32: iron::status::Status;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: &iron::method::Method;
    let mut _36: std::result::Result<(), (iron::status::Status, std::string::String)>;
    let _37: &std::path::PathBuf;
    let mut _38: isize;
    let mut _41: iron::Response;
    let _42: &str;
    let _43: &std::string::String;
    let mut _44: iron::Response;
    let mut _45: (iron::status::Status, iron::modifiers::Redirect);
    let mut _46: iron::status::Status;
    let mut _47: iron::modifiers::Redirect;
    let mut _48: iron::Url;
    let mut _49: &iron::Url;
    let mut _51: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _52: &std::path::PathBuf;
    let mut _53: isize;
    let mut _57: std::io::ErrorKind;
    let mut _58: &std::io::Error;
    let mut _59: isize;
    let mut _60: isize;
    let mut _62: bool;
    let mut _63: &std::option::Option<bool>;
    let _64: std::option::Option<bool>;
    let mut _65: std::option::Option<std::fs::Metadata>;
    let mut _66: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _67: &iron::Request<'_, '_>;
    let mut _68: iron::IronError;
    let mut _69: std::io::Error;
    let mut _70: iron::status::Status;
    let mut _71: bool;
    let mut _72: &std::fs::Metadata;
    let mut _74: std::iter::Map<std::path::Iter<'_>, {closure@src/main.rs:422:22: 422:25}>;
    let mut _75: std::path::Iter<'_>;
    let _76: &std::path::Path;
    let mut _77: &std::path::PathBuf;
    let _78: &std::path::PathBuf;
    let _79: &[std::string::String];
    let _80: &std::vec::Vec<std::string::String>;
    let mut _81: &iron::Request<'_, '_>;
    let mut _82: &std::path::PathBuf;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: isize;
    let mut _88: isize;
    scope 1 {
        debug fs_path => _3;
        let _13: std::path::PathBuf;
        scope 2 {
            debug url => _7;
            let _7: &iron::Url;
        }
        scope 3 {
            debug path_prefix => _13;
            let _22: std::path::PathBuf;
            scope 4 {
                debug fs_path => _22;
                let _50: std::fs::Metadata;
                let _54: std::fs::Metadata;
                let _55: std::io::Error;
                let mut _84: &iron::method::Method;
                scope 5 {
                    debug s => _39;
                    debug msg => _40;
                    let _39: iron::status::Status;
                    let _40: std::string::String;
                }
                scope 6 {
                    debug path_metadata => _50;
                    let _73: std::vec::Vec<std::string::String>;
                    scope 11 {
                        debug path_prefix => _73;
                    }
                }
                scope 7 {
                    debug value => _54;
                }
                scope 8 {
                    debug err => _55;
                    let _56: iron::status::Status;
                    scope 9 {
                        debug status => _56;
                    }
                    scope 10 {
                        debug p => _61;
                        let _61: &std::path::PathBuf;
                        let mut _83: &std::option::Option<bool>;
                    }
                }
            }
        }
    }

    bb0: {
        _85 = const false;
        _86 = const false;
        _4 = &((*_1).0: std::path::PathBuf);
        _3 = <PathBuf as Clone>::clone(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).5: std::option::Option<iron::Url>);
        _6 = discriminant((*_5));
        switchInt(move _6) -> [1: bb2, otherwise: bb5];
    }

    bb2: {
        _7 = &(((*_5) as Some).0: iron::Url);
        _10 = PermanentRedirect;
        _12 = <iron::Url as Clone>::clone(_7) -> [return: bb3, unwind: bb70];
    }

    bb3: {
        _11 = iron::modifiers::Redirect(move _12);
        _9 = (move _10, move _11);
        _8 = iron::Response::with::<(StatusCode, iron::modifiers::Redirect)>(move _9) -> [return: bb4, unwind: bb70];
    }

    bb4: {
        _0 = Result::<iron::Response, IronError>::Ok(move _8);
        goto -> bb64;
    }

    bb5: {
        _18 = &((*_2).0: iron::Url);
        _17 = iron::Url::path(move _18) -> [return: bb6, unwind: bb70];
    }

    bb6: {
        _16 = <Vec<&str> as IntoIterator>::into_iter(move _17) -> [return: bb7, unwind: bb70];
    }

    bb7: {
        _15 = <std::vec::IntoIter<&str> as Iterator>::filter::<{closure@src/main.rs:379:21: 379:24}>(move _16, const ZeroSized: {closure@src/main.rs:379:21: 379:24}) -> [return: bb8, unwind: bb70];
    }

    bb8: {
        _14 = <Filter<std::vec::IntoIter<&str>, {closure@src/main.rs:379:21: 379:24}> as Iterator>::map::<PathBuf, {closure@src/main.rs:380:18: 380:21}>(move _15, const ZeroSized: {closure@src/main.rs:380:18: 380:21}) -> [return: bb9, unwind: bb70];
    }

    bb9: {
        _13 = <Map<Filter<std::vec::IntoIter<&str>, {closure@src/main.rs:379:21: 379:24}>, {closure@src/main.rs:380:18: 380:21}> as Iterator>::collect::<PathBuf>(move _14) -> [return: bb10, unwind: bb70];
    }

    bb10: {
        _20 = &mut _3;
        _21 = &_13;
        _19 = PathBuf::push::<&PathBuf>(move _20, move _21) -> [return: bb11, unwind: bb69];
    }

    bb11: {
        _24 = &_3;
        _23 = <PathBuf as ParseDot>::parse_dot(move _24) -> [return: bb12, unwind: bb69];
    }

    bb12: {
        _22 = Result::<PathBuf, std::io::Error>::unwrap(move _23) -> [return: bb13, unwind: bb69];
    }

    bb13: {
        _27 = &_22;
        _26 = <PathBuf as Deref>::deref(move _27) -> [return: bb14, unwind: bb68];
    }

    bb14: {
        _28 = &((*_1).0: std::path::PathBuf);
        _25 = Path::starts_with::<&PathBuf>(_26, move _28) -> [return: bb15, unwind: bb68];
    }

    bb15: {
        switchInt(move _25) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _33 = ((*_1).2: bool);
        switchInt(move _33) -> [0: bb30, otherwise: bb20];
    }

    bb17: {
        _31 = PermissionDenied;
        _30 = std::io::Error::new::<&str>(move _31, const "Permission Denied") -> [return: bb18, unwind: bb68];
    }

    bb18: {
        _32 = Forbidden;
        _29 = IronError::new::<std::io::Error, StatusCode>(move _30, move _32) -> [return: bb19, unwind: bb68];
    }

    bb19: {
        _0 = Result::<iron::Response, IronError>::Err(move _29);
        goto -> bb62;
    }

    bb20: {
        _35 = &((*_2).5: iron::method::Method);
        _84 = const _;
        _34 = <iron::method::Method as PartialEq>::eq(move _35, _84) -> [return: bb21, unwind: bb68];
    }

    bb21: {
        switchInt(move _34) -> [0: bb30, otherwise: bb22];
    }

    bb22: {
        _37 = &_22;
        _36 = MainHandler::save_files(_1, _2, _37) -> [return: bb23, unwind: bb68];
    }

    bb23: {
        _86 = const true;
        _38 = discriminant(_36);
        switchInt(move _38) -> [1: bb24, otherwise: bb27];
    }

    bb24: {
        _39 = (((_36 as Err).0: (iron::status::Status, std::string::String)).0: iron::status::Status);
        _86 = const false;
        _40 = move (((_36 as Err).0: (iron::status::Status, std::string::String)).1: std::string::String);
        _43 = &_40;
        _42 = <String as Deref>::deref(_43) -> [return: bb25, unwind: bb67];
    }

    bb25: {
        _41 = error_resp(_39, _42) -> [return: bb26, unwind: bb67];
    }

    bb26: {
        _0 = Result::<iron::Response, IronError>::Ok(move _41);
        drop(_40) -> [return: bb76, unwind: bb81];
    }

    bb27: {
        _46 = Found;
        _49 = &((*_2).0: iron::Url);
        _48 = <iron::Url as Clone>::clone(move _49) -> [return: bb28, unwind: bb81];
    }

    bb28: {
        _47 = iron::modifiers::Redirect(move _48);
        _45 = (move _46, move _47);
        _44 = iron::Response::with::<(StatusCode, iron::modifiers::Redirect)>(move _45) -> [return: bb29, unwind: bb81];
    }

    bb29: {
        _0 = Result::<iron::Response, IronError>::Ok(move _44);
        goto -> bb76;
    }

    bb30: {
        _52 = &_22;
        _51 = std::fs::metadata::<&PathBuf>(move _52) -> [return: bb31, unwind: bb68];
    }

    bb31: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb34, 1: bb32, otherwise: bb33];
    }

    bb32: {
        _85 = const true;
        _55 = move ((_51 as Err).0: std::io::Error);
        _58 = &_55;
        _57 = std::io::Error::kind(move _58) -> [return: bb35, unwind: bb78];
    }

    bb33: {
        unreachable;
    }

    bb34: {
        _54 = move ((_51 as Ok).0: std::fs::Metadata);
        _50 = move _54;
        _72 = &_50;
        _71 = Metadata::is_dir(move _72) -> [return: bb48, unwind: bb68];
    }

    bb35: {
        _59 = discriminant(_57);
        switchInt(move _59) -> [0: bb38, 1: bb37, otherwise: bb36];
    }

    bb36: {
        _56 = InternalServerError;
        goto -> bb46;
    }

    bb37: {
        _56 = Forbidden;
        goto -> bb46;
    }

    bb38: {
        _60 = discriminant(((*_1).8: std::option::Option<std::path::PathBuf>));
        switchInt(move _60) -> [1: bb39, otherwise: bb45];
    }

    bb39: {
        _61 = &((((*_1).8: std::option::Option<std::path::PathBuf>) as Some).0: std::path::PathBuf);
        _83 = const _;
        _66 = std::fs::metadata::<&PathBuf>(_61) -> [return: bb40, unwind: bb78];
    }

    bb40: {
        _65 = Result::<Metadata, std::io::Error>::ok(move _66) -> [return: bb41, unwind: bb78];
    }

    bb41: {
        _64 = Option::<Metadata>::map::<bool, {closure@src/main.rs:407:71: 407:77}>(move _65, const ZeroSized: {closure@src/main.rs:407:71: 407:77}) -> [return: bb42, unwind: bb78];
    }

    bb42: {
        _63 = &_64;
        _62 = <Option<bool> as PartialEq>::eq(_83, move _63) -> [return: bb43, unwind: bb78];
    }

    bb43: {
        switchInt(move _62) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _67 = &(*_2);
        _0 = MainHandler::send_file::<&PathBuf>(_1, move _67, _61) -> [return: bb82, unwind: bb78];
    }

    bb45: {
        _56 = iron::status::NotFound;
        goto -> bb46;
    }

    bb46: {
        _85 = const false;
        _69 = move _55;
        _70 = _56;
        _68 = IronError::new::<std::io::Error, StatusCode>(move _69, move _70) -> [return: bb47, unwind: bb78];
    }

    bb47: {
        _0 = Result::<iron::Response, IronError>::Err(move _68);
        goto -> bb60;
    }

    bb48: {
        switchInt(move _71) -> [0: bb56, otherwise: bb49];
    }

    bb49: {
        _77 = &_13;
        _76 = <PathBuf as Deref>::deref(move _77) -> [return: bb50, unwind: bb68];
    }

    bb50: {
        _75 = Path::iter(_76) -> [return: bb51, unwind: bb68];
    }

    bb51: {
        _74 = <std::path::Iter<'_> as Iterator>::map::<String, {closure@src/main.rs:422:22: 422:25}>(move _75, const ZeroSized: {closure@src/main.rs:422:22: 422:25}) -> [return: bb52, unwind: bb68];
    }

    bb52: {
        _73 = <Map<std::path::Iter<'_>, {closure@src/main.rs:422:22: 422:25}> as Iterator>::collect::<Vec<String>>(move _74) -> [return: bb53, unwind: bb68];
    }

    bb53: {
        _78 = &_22;
        _80 = &_73;
        _79 = <Vec<String> as Deref>::deref(_80) -> [return: bb54, unwind: bb66];
    }

    bb54: {
        _0 = MainHandler::list_directory(_1, _2, _78, _79) -> [return: bb55, unwind: bb66];
    }

    bb55: {
        drop(_73) -> [return: bb57, unwind: bb68];
    }

    bb56: {
        _81 = &(*_2);
        _82 = &_22;
        _0 = MainHandler::send_file::<&PathBuf>(_1, move _81, move _82) -> [return: bb83, unwind: bb68];
    }

    bb57: {
        drop(_22) -> [return: bb58, unwind: bb69];
    }

    bb58: {
        drop(_13) -> [return: bb59, unwind: bb70];
    }

    bb59: {
        drop(_3) -> [return: bb65, unwind continue];
    }

    bb60: {
        switchInt(_85) -> [0: bb61, otherwise: bb72];
    }

    bb61: {
        _85 = const false;
        goto -> bb62;
    }

    bb62: {
        drop(_22) -> [return: bb63, unwind: bb69];
    }

    bb63: {
        drop(_13) -> [return: bb64, unwind: bb70];
    }

    bb64: {
        drop(_3) -> [return: bb65, unwind continue];
    }

    bb65: {
        return;
    }

    bb66 (cleanup): {
        drop(_73) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_40) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_22) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_13) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_3) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        resume;
    }

    bb72: {
        drop(_55) -> [return: bb61, unwind: bb68];
    }

    bb73: {
        _86 = const false;
        goto -> bb62;
    }

    bb74: {
        switchInt(_86) -> [0: bb73, otherwise: bb75];
    }

    bb75: {
        drop((((_36 as Err).0: (iron::status::Status, std::string::String)).1: std::string::String)) -> [return: bb73, unwind: bb68];
    }

    bb76: {
        _87 = discriminant(_36);
        switchInt(move _87) -> [1: bb74, otherwise: bb73];
    }

    bb77 (cleanup): {
        drop(_55) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_85) -> [0: bb68, otherwise: bb77];
    }

    bb79 (cleanup): {
        switchInt(_86) -> [0: bb68, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop((((_36 as Err).0: (iron::status::Status, std::string::String)).1: std::string::String)) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        _88 = discriminant(_36);
        switchInt(move _88) -> [1: bb79, otherwise: bb68];
    }

    bb82: {
        goto -> bb60;
    }

    bb83: {
        goto -> bb57;
    }
}

promoted[0] in <impl at src/main.rs:366:1: 366:29>::handle: &Option<bool> = {
    let mut _0: &std::option::Option<bool>;
    let mut _1: std::option::Option<bool>;

    bb0: {
        _1 = Option::<bool>::Some(const true);
        _0 = &_1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:366:1: 366:29>::handle: &iron::method::Method = {
    let mut _0: &iron::method::Method;
    let mut _1: iron::method::Method;

    bb0: {
        _1 = Post;
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:366:1: 366:29>::handle::{closure#0}(_1: &mut {closure@src/main.rs:379:21: 379:24}, _2: &&str) -> bool {
    debug s => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &str;

    bb0: {
        _4 = deref_copy (*_2);
        _3 = core::str::<impl str>::is_empty(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

fn <impl at src/main.rs:366:1: 366:29>::handle::{closure#1}(_1: &mut {closure@src/main.rs:380:18: 380:21}, _2: &str) -> PathBuf {
    debug s => _2;
    let mut _0: std::path::PathBuf;
    let _3: &str;
    let mut _4: &std::borrow::Cow<'_, str>;
    let _5: std::borrow::Cow<'_, str>;
    let mut _6: std::result::Result<std::borrow::Cow<'_, str>, std::str::Utf8Error>;
    let mut _7: percent_encoding::PercentDecode<'_>;
    let _8: &[u8];

    bb0: {
        _8 = core::str::<impl str>::as_bytes(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = percent_encoding::percent_decode(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = percent_encoding::PercentDecode::<'_>::decode_utf8(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = Result::<Cow<'_, str>, std::str::Utf8Error>::unwrap(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = &_5;
        _3 = <Cow<'_, str> as Deref>::deref(move _4) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _0 = <PathBuf as std::convert::From<&str>>::from(_3) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_5) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn <impl at src/main.rs:366:1: 366:29>::handle::{closure#2}(_1: {closure@src/main.rs:407:71: 407:77}, _2: Metadata) -> bool {
    debug meta => _2;
    let mut _0: bool;
    let mut _3: &std::fs::Metadata;

    bb0: {
        _3 = &_2;
        _0 = Metadata::is_file(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:366:1: 366:29>::handle::{closure#3}(_1: &mut {closure@src/main.rs:422:22: 422:25}, _2: &OsStr) -> String {
    debug s => _2;
    let mut _0: std::string::String;
    let mut _3: &std::borrow::Cow<'_, str>;
    let _4: std::borrow::Cow<'_, str>;

    bb0: {
        _4 = OsStr::to_string_lossy(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _0 = <Cow<'_, str> as ToString>::to_string(move _3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_4) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn <impl at src/main.rs:431:1: 431:17>::save_files(_1: &MainHandler, _2: &mut iron::Request<'_, '_>, _3: &PathBuf) -> Result<(), (StatusCode, String)> {
    debug self => _1;
    debug req => _2;
    debug path => _3;
    let mut _0: std::result::Result<(), (iron::status::Status, std::string::String)>;
    let mut _4: std::result::Result<multipart::server::Multipart<&mut iron::request::Body<'_, '_>>, &mut iron::Request<'_, '_>>;
    let mut _5: isize;
    let mut _6: multipart::server::Multipart<&mut iron::request::Body<'_, '_>>;
    let mut _7: multipart::server::SaveResult<multipart::server::Entries, multipart::server::save::PartialEntries<&mut multipart::server::Multipart<&mut iron::request::Body<'_, '_>>>>;
    let mut _8: multipart::server::save::SaveBuilder<&mut multipart::server::Multipart<&mut iron::request::Body<'_, '_>>>;
    let mut _9: multipart::server::save::SaveBuilder<&mut multipart::server::Multipart<&mut iron::request::Body<'_, '_>>>;
    let mut _10: &mut multipart::server::Multipart<&mut iron::request::Body<'_, '_>>;
    let mut _11: u64;
    let mut _12: isize;
    let mut _14: std::collections::hash_map::IntoIter<std::sync::Arc<str>, std::vec::Vec<multipart::server::SavedField>>;
    let mut _15: std::collections::HashMap<std::sync::Arc<str>, std::vec::Vec<multipart::server::SavedField>>;
    let mut _17: std::option::Option<(std::sync::Arc<str>, std::vec::Vec<multipart::server::SavedField>)>;
    let mut _18: &mut std::collections::hash_map::IntoIter<std::sync::Arc<str>, std::vec::Vec<multipart::server::SavedField>>;
    let mut _19: isize;
    let mut _21: std::vec::IntoIter<multipart::server::SavedField>;
    let mut _23: std::option::Option<multipart::server::SavedField>;
    let mut _24: &mut std::vec::IntoIter<multipart::server::SavedField>;
    let mut _25: isize;
    let mut _28: std::result::Result<multipart::server::save::DataReader<'_>, std::io::Error>;
    let mut _29: &multipart::server::save::SavedData;
    let _32: ();
    let mut _33: &mut std::path::PathBuf;
    let mut _34: std::string::String;
    let mut _35: std::option::Option<std::string::String>;
    let mut _36: &std::option::Option<std::string::String>;
    let mut _37: std::result::Result<u64, std::io::Error>;
    let mut _38: std::result::Result<std::fs::File, std::io::Error>;
    let mut _39: std::path::PathBuf;
    let mut _40: {closure@src/main.rs:452:47: 452:57};
    let mut _41: &mut multipart::server::save::DataReader<'_>;
    let mut _42: isize;
    let mut _44: (iron::status::Status, std::string::String);
    let mut _45: iron::status::Status;
    let mut _47: std::fmt::Arguments<'_>;
    let mut _48: &[&str];
    let mut _49: &[core::fmt::rt::Argument<'_>];
    let _50: &[core::fmt::rt::Argument<'_>; 1];
    let _51: [core::fmt::rt::Argument<'_>; 1];
    let mut _52: core::fmt::rt::Argument<'_>;
    let _53: &std::io::Error;
    let _54: ();
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &std::string::String;
    let _62: std::string::String;
    let mut _63: std::option::Option<std::string::String>;
    let mut _64: &std::option::Option<std::string::String>;
    let mut _67: (iron::status::Status, std::string::String);
    let mut _68: iron::status::Status;
    let mut _69: std::string::String;
    let mut _70: &std::io::Error;
    let _71: std::io::Error;
    let mut _73: (iron::status::Status, std::string::String);
    let mut _74: iron::status::Status;
    let mut _75: std::string::String;
    let mut _76: &std::io::Error;
    let mut _77: (iron::status::Status, std::string::String);
    let mut _78: iron::status::Status;
    let mut _79: std::string::String;
    let _80: &str;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    scope 1 {
        debug multipart => _6;
        let _13: multipart::server::Entries;
        let _65: multipart::server::save::PartialEntries<&mut multipart::server::Multipart<&mut iron::request::Body<'_, '_>>>;
        let _66: multipart::server::save::PartialReason;
        let _72: std::io::Error;
        scope 2 {
            debug entries => _13;
            let mut _16: std::collections::hash_map::IntoIter<std::sync::Arc<str>, std::vec::Vec<multipart::server::SavedField>>;
            scope 3 {
                debug iter => _16;
                let _20: std::vec::Vec<multipart::server::SavedField>;
                scope 4 {
                    debug fields => _20;
                    let mut _22: std::vec::IntoIter<multipart::server::SavedField>;
                    scope 5 {
                        debug iter => _22;
                        let _26: multipart::server::SavedField;
                        scope 6 {
                            debug field => _26;
                            let mut _27: multipart::server::save::DataReader<'_>;
                            scope 7 {
                                debug data => _27;
                                let _30: &multipart::server::FieldHeaders;
                                scope 8 {
                                    debug headers => _30;
                                    let mut _31: std::path::PathBuf;
                                    scope 9 {
                                        debug target_path => _31;
                                        let mut _81: &[&str; 2];
                                        scope 10 {
                                            debug errno => _43;
                                            let _43: std::io::Error;
                                            let _46: std::string::String;
                                            let mut _82: &[&str; 1];
                                            scope 11 {
                                                debug res => _46;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 12 {
            debug _entries => _65;
            debug reason => _66;
        }
        scope 13 {
            debug error => _72;
        }
    }

    bb0: {
        _84 = const false;
        _83 = const false;
        _4 = multipart::server::Multipart::<()>::from_request::<&mut iron::Request<'_, '_>>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_4);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _78 = BadRequest;
        _80 = const "The request is not multipart";
        _79 = <str as ToOwned>::to_owned(_80) -> [return: bb48, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = move ((_4 as Ok).0: multipart::server::Multipart<&mut iron::request::Body<'_, '_>>);
        _10 = &mut _6;
        _9 = multipart::server::Multipart::<&mut iron::request::Body<'_, '_>>::save(move _10) -> [return: bb5, unwind: bb65];
    }

    bb5: {
        _11 = ((*_1).9: u64);
        _8 = SaveBuilder::<&mut multipart::server::Multipart<&mut iron::request::Body<'_, '_>>>::size_limit::<u64>(move _9, move _11) -> [return: bb6, unwind: bb65];
    }

    bb6: {
        _7 = SaveBuilder::<&mut multipart::server::Multipart<&mut iron::request::Body<'_, '_>>>::temp(move _8) -> [return: bb7, unwind: bb65];
    }

    bb7: {
        _12 = discriminant(_7);
        switchInt(move _12) -> [0: bb9, 1: bb43, 2: bb8, otherwise: bb3];
    }

    bb8: {
        _72 = move ((_7 as Error).0: std::io::Error);
        _74 = InternalServerError;
        _76 = &_72;
        _75 = <std::io::Error as ToString>::to_string(move _76) -> [return: bb47, unwind: bb55];
    }

    bb9: {
        _13 = move ((_7 as Full).0: multipart::server::Entries);
        _15 = move (_13.0: std::collections::HashMap<std::sync::Arc<str>, std::vec::Vec<multipart::server::SavedField>>);
        _14 = <HashMap<std::sync::Arc<str>, Vec<SavedField>> as IntoIterator>::into_iter(move _15) -> [return: bb10, unwind: bb78];
    }

    bb10: {
        _16 = move _14;
        goto -> bb11;
    }

    bb11: {
        _18 = &mut _16;
        _17 = <std::collections::hash_map::IntoIter<std::sync::Arc<str>, Vec<SavedField>> as Iterator>::next(_18) -> [return: bb12, unwind: bb64];
    }

    bb12: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb14, 1: bb13, otherwise: bb3];
    }

    bb13: {
        _20 = move (((_17 as Some).0: (std::sync::Arc<str>, std::vec::Vec<multipart::server::SavedField>)).1: std::vec::Vec<multipart::server::SavedField>);
        _21 = <Vec<SavedField> as IntoIterator>::into_iter(move _20) -> [return: bb15, unwind: bb77];
    }

    bb14: {
        drop(_16) -> [return: bb42, unwind: bb78];
    }

    bb15: {
        _22 = move _21;
        goto -> bb16;
    }

    bb16: {
        _24 = &mut _22;
        _23 = <std::vec::IntoIter<SavedField> as Iterator>::next(_24) -> [return: bb17, unwind: bb63];
    }

    bb17: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb19, 1: bb18, otherwise: bb3];
    }

    bb18: {
        _26 = move ((_23 as Some).0: multipart::server::SavedField);
        _29 = &(_26.1: multipart::server::save::SavedData);
        _28 = SavedData::readable(move _29) -> [return: bb20, unwind: bb62];
    }

    bb19: {
        drop(_22) -> [return: bb41, unwind: bb77];
    }

    bb20: {
        _27 = Result::<DataReader<'_>, std::io::Error>::unwrap(move _28) -> [return: bb21, unwind: bb62];
    }

    bb21: {
        _30 = &(_26.0: multipart::server::FieldHeaders);
        _31 = <PathBuf as Clone>::clone(_3) -> [return: bb22, unwind: bb61];
    }

    bb22: {
        _84 = const true;
        _33 = &mut _31;
        _36 = &((*_30).1: std::option::Option<std::string::String>);
        _35 = <Option<String> as Clone>::clone(move _36) -> [return: bb23, unwind: bb75];
    }

    bb23: {
        _34 = Option::<String>::unwrap(move _35) -> [return: bb24, unwind: bb75];
    }

    bb24: {
        _32 = PathBuf::push::<String>(move _33, move _34) -> [return: bb25, unwind: bb75];
    }

    bb25: {
        _84 = const false;
        _39 = move _31;
        _38 = std::fs::File::create::<PathBuf>(move _39) -> [return: bb26, unwind: bb75];
    }

    bb26: {
        _41 = &mut _27;
        _40 = {closure@src/main.rs:452:47: 452:57} { data: move _41 };
        _37 = Result::<std::fs::File, std::io::Error>::and_then::<u64, {closure@src/main.rs:452:47: 452:57}>(move _38, move _40) -> [return: bb27, unwind: bb75];
    }

    bb27: {
        _83 = const true;
        _42 = discriminant(_37);
        switchInt(move _42) -> [1: bb28, otherwise: bb32];
    }

    bb28: {
        _83 = const false;
        _43 = move ((_37 as Err).0: std::io::Error);
        _45 = InternalServerError;
        _82 = const _;
        _48 = _82 as &[&str] (PointerCoercion(Unsize));
        _53 = &_43;
        _52 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_53) -> [return: bb29, unwind: bb59];
    }

    bb29: {
        _51 = [move _52];
        _50 = &_51;
        _49 = _50 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _47 = Arguments::<'_>::new_v1(move _48, move _49) -> [return: bb30, unwind: bb59];
    }

    bb30: {
        _46 = std::fmt::format(move _47) -> [return: bb31, unwind: bb59];
    }

    bb31: {
        _44 = (move _45, move _46);
        _0 = Result::<(), (StatusCode, String)>::Err(move _44);
        drop(_43) -> [return: bb49, unwind: bb60];
    }

    bb32: {
        _81 = const _;
        _56 = _81 as &[&str] (PointerCoercion(Unsize));
        _64 = &((*_30).1: std::option::Option<std::string::String>);
        _63 = <Option<String> as Clone>::clone(move _64) -> [return: bb33, unwind: bb60];
    }

    bb33: {
        _62 = Option::<String>::unwrap(move _63) -> [return: bb34, unwind: bb60];
    }

    bb34: {
        _61 = &_62;
        _60 = core::fmt::rt::Argument::<'_>::new_display::<String>(_61) -> [return: bb35, unwind: bb58];
    }

    bb35: {
        _59 = [move _60];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _55 = Arguments::<'_>::new_v1(move _56, move _57) -> [return: bb36, unwind: bb58];
    }

    bb36: {
        _54 = _print(move _55) -> [return: bb37, unwind: bb58];
    }

    bb37: {
        drop(_62) -> [return: bb38, unwind: bb60];
    }

    bb38: {
        _84 = const false;
        drop(_27) -> [return: bb39, unwind: bb73];
    }

    bb39: {
        drop(_37) -> [return: bb40, unwind: bb62];
    }

    bb40: {
        _83 = const false;
        drop(_26) -> [return: bb16, unwind: bb63];
    }

    bb41: {
        _85 = discriminant(_17);
        switchInt(move _85) -> [1: bb66, otherwise: bb11];
    }

    bb42: {
        _0 = Result::<(), (StatusCode, String)>::Ok(const ());
        drop((_13.1: multipart::server::save::SaveDir)) -> [return: bb67, unwind: bb65];
    }

    bb43: {
        _65 = move ((_7 as Partial).0: multipart::server::save::PartialEntries<&mut multipart::server::Multipart<&mut iron::request::Body<'_, '_>>>);
        _66 = move ((_7 as Partial).1: multipart::server::save::PartialReason);
        _68 = InternalServerError;
        _71 = PartialReason::unwrap_err(move _66) -> [return: bb44, unwind: bb57];
    }

    bb44: {
        _70 = &_71;
        _69 = <std::io::Error as ToString>::to_string(move _70) -> [return: bb45, unwind: bb56];
    }

    bb45: {
        _67 = (move _68, move _69);
        _0 = Result::<(), (StatusCode, String)>::Err(move _67);
        drop(_71) -> [return: bb46, unwind: bb57];
    }

    bb46: {
        drop(_65) -> [return: bb67, unwind: bb65];
    }

    bb47: {
        _73 = (move _74, move _75);
        _0 = Result::<(), (StatusCode, String)>::Err(move _73);
        drop(_72) -> [return: bb67, unwind: bb65];
    }

    bb48: {
        _77 = (move _78, move _79);
        _0 = Result::<(), (StatusCode, String)>::Err(move _77);
        goto -> bb54;
    }

    bb49: {
        _84 = const false;
        drop(_27) -> [return: bb50, unwind: bb73];
    }

    bb50: {
        _83 = const false;
        drop(_26) -> [return: bb51, unwind: bb63];
    }

    bb51: {
        drop(_22) -> [return: bb52, unwind: bb77];
    }

    bb52: {
        _86 = discriminant(_17);
        switchInt(move _86) -> [1: bb69, otherwise: bb68];
    }

    bb53: {
        drop((_13.1: multipart::server::save::SaveDir)) -> [return: bb70, unwind: bb65];
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_72) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_71) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_65) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_62) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_43) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_27) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_27) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_26) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_22) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_16) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_6) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb66: {
        drop((((_17 as Some).0: (std::sync::Arc<str>, std::vec::Vec<multipart::server::SavedField>)).0: std::sync::Arc<str>)) -> [return: bb11, unwind: bb64];
    }

    bb67: {
        drop(_6) -> [return: bb54, unwind continue];
    }

    bb68: {
        drop(_16) -> [return: bb53, unwind: bb78];
    }

    bb69: {
        drop((((_17 as Some).0: (std::sync::Arc<str>, std::vec::Vec<multipart::server::SavedField>)).0: std::sync::Arc<str>)) -> [return: bb68, unwind: bb64];
    }

    bb70: {
        drop(_6) -> [return: bb54, unwind continue];
    }

    bb71 (cleanup): {
        switchInt(_83) -> [0: bb62, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop(((_37 as Err).0: std::io::Error)) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        _87 = discriminant(_37);
        switchInt(move _87) -> [1: bb71, otherwise: bb62];
    }

    bb74 (cleanup): {
        drop(_31) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_84) -> [0: bb61, otherwise: bb74];
    }

    bb76 (cleanup): {
        drop((((_17 as Some).0: (std::sync::Arc<str>, std::vec::Vec<multipart::server::SavedField>)).0: std::sync::Arc<str>)) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        _88 = discriminant(_17);
        switchInt(move _88) -> [1: bb76, otherwise: bb64];
    }

    bb78 (cleanup): {
        drop((_13.1: multipart::server::save::SaveDir)) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:431:1: 431:17>::save_files: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "  >> File saved: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:431:1: 431:17>::save_files: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Copy file failed: "];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:431:1: 431:17>::save_files::{closure#0}(_1: {closure@src/main.rs:452:47: 452:57}, _2: std::fs::File) -> Result<u64, std::io::Error> {
    debug file => _2;
    debug data => (*(_1.0: &mut multipart::server::save::DataReader<'_>));
    let mut _0: std::result::Result<u64, std::io::Error>;
    let mut _3: &mut std::fs::File;
    let mut _4: &mut multipart::server::save::DataReader<'_>;

    bb0: {
        _4 = deref_copy (_1.0: &mut multipart::server::save::DataReader<'_>);
        _3 = &mut _2;
        _0 = std::io::copy::<DataReader<'_>, std::fs::File>(_4, _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at src/main.rs:431:1: 431:17>::list_directory(_1: &MainHandler, _2: &mut iron::Request<'_, '_>, _3: &PathBuf, _4: &[String]) -> Result<iron::Response, IronError> {
    debug self => _1;
    debug req => _2;
    debug fs_path => _3;
    debug path_prefix => _4;
    let mut _0: std::result::Result<iron::Response, iron::IronError>;
    let mut _5: iron::Response;
    let mut _6: iron::status::Status;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, iron::IronError>, std::fs::ReadDir>;
    let mut _11: std::result::Result<std::fs::ReadDir, iron::IronError>;
    let mut _12: std::result::Result<std::fs::ReadDir, std::io::Error>;
    let mut _13: &std::path::PathBuf;
    let mut _14: isize;
    let mut _18: std::fs::ReadDir;
    let mut _19: std::fs::ReadDir;
    let mut _21: std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>;
    let mut _22: &mut std::fs::ReadDir;
    let mut _23: isize;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, iron::IronError>, std::fs::DirEntry>;
    let mut _27: std::result::Result<std::fs::DirEntry, iron::IronError>;
    let mut _28: isize;
    let _31: ();
    let mut _32: &mut std::vec::Vec<MainHandler::list_directory::Entry>;
    let mut _33: MainHandler::list_directory::Entry;
    let mut _34: std::string::String;
    let mut _35: std::result::Result<std::string::String, std::ffi::OsString>;
    let mut _36: std::ffi::OsString;
    let mut _37: &std::fs::DirEntry;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, iron::IronError>, std::fs::Metadata>;
    let mut _39: std::result::Result<std::fs::Metadata, iron::IronError>;
    let mut _40: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _41: &std::fs::DirEntry;
    let mut _42: isize;
    let mut _46: bool;
    let _49: ();
    let mut _50: &mut std::vec::Vec<std::string::String>;
    let mut _51: std::string::String;
    let mut _52: std::option::Option<std::string::String>;
    let mut _53: &mut std::vec::Vec<std::string::String>;
    let mut _54: bool;
    let mut _55: &std::vec::Vec<std::string::String>;
    let _56: ();
    let mut _57: &mut std::vec::Vec<std::string::String>;
    let mut _58: std::string::String;
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let mut _62: &[core::fmt::rt::Argument<'_>];
    let _63: &[core::fmt::rt::Argument<'_>; 2];
    let _64: [core::fmt::rt::Argument<'_>; 2];
    let mut _65: core::fmt::rt::Argument<'_>;
    let _66: &std::string::String;
    let _67: std::string::String;
    let _68: &[std::string::String];
    let _69: &std::vec::Vec<std::string::String>;
    let mut _70: core::fmt::rt::Argument<'_>;
    let _71: &std::string::String;
    let _72: std::string::String;
    let _73: &str;
    let _74: &std::string::String;
    let _75: std::string::String;
    let mut _76: &std::string::String;
    let _77: std::string::String;
    let mut _78: std::option::Option<std::string::String>;
    let mut _79: &mut std::vec::Vec<std::string::String>;
    let _80: ();
    let mut _81: &mut std::vec::Vec<std::string::String>;
    let mut _82: std::string::String;
    let _83: &str;
    let _84: ();
    let mut _85: &mut [std::string::String];
    let mut _86: &mut std::vec::Vec<std::string::String>;
    let _87: &[std::string::String];
    let mut _88: &std::vec::Vec<std::string::String>;
    let _89: &str;
    let _90: &str;
    let mut _92: bool;
    let mut _94: std::string::String;
    let mut _96: iron::url::form_urlencoded::Parse<'_>;
    let mut _97: iron::url::form_urlencoded::Parse<'_>;
    let _98: &iron::url::Url;
    let mut _99: &iron::Url;
    let mut _101: std::option::Option<(std::borrow::Cow<'_, str>, std::borrow::Cow<'_, str>)>;
    let mut _102: &mut iron::url::form_urlencoded::Parse<'_>;
    let mut _103: isize;
    let mut _106: bool;
    let mut _107: &std::borrow::Cow<'_, str>;
    let mut _108: std::option::Option<std::string::String>;
    let mut _109: std::string::String;
    let mut _110: &std::borrow::Cow<'_, str>;
    let mut _111: bool;
    let mut _112: &std::borrow::Cow<'_, str>;
    let mut _113: std::option::Option<std::string::String>;
    let mut _114: std::string::String;
    let mut _115: &std::borrow::Cow<'_, str>;
    let mut _117: std::option::Option<std::string::String>;
    let mut _119: std::slice::Iter<'_, &str>;
    let mut _120: std::slice::Iter<'_, &str>;
    let _121: &[&str];
    let _122: &std::vec::Vec<&str>;
    let _123: &SORT_FIELDS;
    let mut _125: std::option::Option<&&str>;
    let mut _126: &mut std::slice::Iter<'_, &str>;
    let mut _127: isize;
    let mut _129: bool;
    let mut _130: &std::option::Option<std::string::String>;
    let mut _131: &std::option::Option<std::string::String>;
    let _132: std::option::Option<std::string::String>;
    let mut _133: std::string::String;
    let mut _134: bool;
    let mut _135: &std::string::String;
    let _136: std::option::Option<&str>;
    let mut _137: &mut std::collections::BTreeMap<&str, &str>;
    let mut _138: &str;
    let mut _139: isize;
    let mut _141: bool;
    let mut _142: &std::option::Option<usize>;
    let _143: std::option::Option<usize>;
    let mut _144: &mut std::slice::Iter<'_, &str>;
    let mut _145: std::slice::Iter<'_, &str>;
    let _146: &[&str];
    let _147: &std::vec::Vec<&str>;
    let _148: &SORT_FIELDS;
    let mut _149: {closure@src/main.rs:550:31: 550:34};
    let mut _150: &std::string::String;
    let mut _151: iron::IronError;
    let mut _152: util::StringError;
    let mut _154: std::fmt::Arguments<'_>;
    let mut _155: &[&str];
    let mut _156: &[core::fmt::rt::Argument<'_>];
    let _157: &[core::fmt::rt::Argument<'_>; 1];
    let _158: [core::fmt::rt::Argument<'_>; 1];
    let mut _159: core::fmt::rt::Argument<'_>;
    let _160: &std::string::String;
    let mut _161: iron::status::Status;
    let mut _162: bool;
    let mut _163: &std::option::Option<usize>;
    let _164: std::option::Option<usize>;
    let mut _165: &mut std::slice::Iter<'_, &str>;
    let mut _166: std::slice::Iter<'_, &str>;
    let _167: &[&str];
    let mut _168: &std::vec::Vec<&str>;
    let _169: std::vec::Vec<&str>;
    let mut _170: std::boxed::Box<[&str]>;
    let mut _171: usize;
    let mut _172: usize;
    let mut _173: *mut u8;
    let mut _174: std::boxed::Box<[&str; 2]>;
    let _175: &str;
    let mut _176: {closure@src/main.rs:560:31: 560:34};
    let mut _177: &std::string::String;
    let mut _178: iron::IronError;
    let mut _179: util::StringError;
    let mut _181: std::fmt::Arguments<'_>;
    let mut _182: &[&str];
    let mut _183: &[core::fmt::rt::Argument<'_>];
    let _184: &[core::fmt::rt::Argument<'_>; 1];
    let _185: [core::fmt::rt::Argument<'_>; 1];
    let mut _186: core::fmt::rt::Argument<'_>;
    let _187: &std::string::String;
    let mut _188: iron::status::Status;
    let mut _190: &std::string::String;
    let _191: ();
    let mut _192: &mut [MainHandler::list_directory::Entry];
    let mut _193: &mut std::vec::Vec<MainHandler::list_directory::Entry>;
    let mut _194: {closure@src/main.rs:570:33: 570:39};
    let mut _195: &std::string::String;
    let mut _196: &bool;
    let _198: ();
    let mut _199: &mut std::vec::Vec<std::string::String>;
    let mut _200: std::string::String;
    let _201: &str;
    let mut _203: std::fmt::Arguments<'_>;
    let mut _204: &[&str];
    let mut _205: &[core::fmt::rt::Argument<'_>];
    let _206: &[core::fmt::rt::Argument<'_>; 4];
    let _207: [core::fmt::rt::Argument<'_>; 4];
    let mut _208: core::fmt::rt::Argument<'_>;
    let _209: &std::string::String;
    let _210: std::string::String;
    let _211: &[std::string::String];
    let _212: &std::vec::Vec<std::string::String>;
    let mut _213: core::fmt::rt::Argument<'_>;
    let _214: &&&str;
    let _215: &&str;
    let mut _216: std::option::Option<&&str>;
    let mut _217: &std::collections::BTreeMap<&str, &str>;
    let _218: &str;
    let mut _219: core::fmt::rt::Argument<'_>;
    let _220: &&&str;
    let _221: &&str;
    let mut _222: std::option::Option<&&str>;
    let mut _223: &std::collections::BTreeMap<&str, &str>;
    let _224: &str;
    let mut _225: core::fmt::rt::Argument<'_>;
    let _226: &&&str;
    let _227: &&str;
    let mut _228: std::option::Option<&&str>;
    let mut _229: &std::collections::BTreeMap<&str, &str>;
    let _230: &str;
    let mut _231: &[core::fmt::rt::Placeholder];
    let _232: &[core::fmt::rt::Placeholder; 6];
    let _233: [core::fmt::rt::Placeholder; 6];
    let mut _234: core::fmt::rt::Placeholder;
    let mut _235: core::fmt::rt::Alignment;
    let mut _236: core::fmt::rt::Count;
    let mut _237: core::fmt::rt::Count;
    let mut _238: core::fmt::rt::Placeholder;
    let mut _239: core::fmt::rt::Alignment;
    let mut _240: core::fmt::rt::Count;
    let mut _241: core::fmt::rt::Count;
    let mut _242: core::fmt::rt::Placeholder;
    let mut _243: core::fmt::rt::Alignment;
    let mut _244: core::fmt::rt::Count;
    let mut _245: core::fmt::rt::Count;
    let mut _246: core::fmt::rt::Placeholder;
    let mut _247: core::fmt::rt::Alignment;
    let mut _248: core::fmt::rt::Count;
    let mut _249: core::fmt::rt::Count;
    let mut _250: core::fmt::rt::Placeholder;
    let mut _251: core::fmt::rt::Alignment;
    let mut _252: core::fmt::rt::Count;
    let mut _253: core::fmt::rt::Count;
    let mut _254: core::fmt::rt::Placeholder;
    let mut _255: core::fmt::rt::Alignment;
    let mut _256: core::fmt::rt::Count;
    let mut _257: core::fmt::rt::Count;
    let mut _258: core::fmt::rt::UnsafeArg;
    let _259: &str;
    let mut _260: bool;
    let _262: std::option::Option<std::string::String>;
    let mut _263: &mut std::vec::Vec<std::string::String>;
    let mut _264: bool;
    let mut _265: &std::vec::Vec<std::string::String>;
    let _266: ();
    let mut _267: &mut std::vec::Vec<std::string::String>;
    let mut _268: std::string::String;
    let _269: &str;
    let _270: ();
    let mut _271: &mut std::vec::Vec<std::string::String>;
    let mut _272: std::string::String;
    let mut _274: std::fmt::Arguments<'_>;
    let mut _275: &[&str];
    let mut _276: &[core::fmt::rt::Argument<'_>];
    let _277: &[core::fmt::rt::Argument<'_>; 1];
    let _278: [core::fmt::rt::Argument<'_>; 1];
    let mut _279: core::fmt::rt::Argument<'_>;
    let _280: &std::string::String;
    let _281: std::string::String;
    let _282: &[std::string::String];
    let _283: &std::vec::Vec<std::string::String>;
    let _284: ();
    let mut _285: &mut std::vec::Vec<std::string::String>;
    let mut _286: std::string::String;
    let _287: &str;
    let mut _288: std::vec::IntoIter<MainHandler::list_directory::Entry>;
    let mut _289: std::vec::Vec<MainHandler::list_directory::Entry>;
    let mut _291: std::option::Option<MainHandler::list_directory::Entry>;
    let mut _292: &mut std::vec::IntoIter<MainHandler::list_directory::Entry>;
    let mut _293: isize;
    let mut _296: bool;
    let mut _297: std::slice::Iter<'_, &str>;
    let mut _299: std::option::Option<&&str>;
    let mut _300: &mut std::slice::Iter<'_, &str>;
    let mut _301: isize;
    let mut _303: bool;
    let mut _304: &std::string::String;
    let _305: ();
    let mut _306: &mut std::path::PathBuf;
    let mut _307: std::string::String;
    let mut _308: &iron::Request<'_, '_>;
    let mut _309: &std::path::PathBuf;
    let mut _311: &chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let _312: chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let mut _313: &chrono::DateTime<chrono::Local>;
    let _314: chrono::DateTime<chrono::Local>;
    let mut _315: std::time::SystemTime;
    let mut _316: std::result::Result<std::time::SystemTime, std::io::Error>;
    let mut _317: &std::fs::Metadata;
    let _318: &str;
    let mut _320: bool;
    let mut _321: &std::fs::Metadata;
    let _322: &str;
    let mut _323: f64;
    let mut _324: u64;
    let mut _325: &std::fs::Metadata;
    let mut _327: bool;
    let mut _328: &std::fs::Metadata;
    let _329: &str;
    let _330: &str;
    let _332: ();
    let mut _333: &mut std::vec::Vec<std::string::String>;
    let mut _334: std::string::String;
    let mut _335: &std::string::String;
    let mut _336: bool;
    let mut _337: &std::fs::Metadata;
    let _338: ();
    let mut _339: &mut std::vec::Vec<std::string::String>;
    let mut _340: std::string::String;
    let _341: &str;
    let mut _343: bool;
    let mut _344: &std::fs::Metadata;
    let mut _346: std::fmt::Arguments<'_>;
    let mut _347: &[&str];
    let mut _348: &[core::fmt::rt::Argument<'_>];
    let _349: &[core::fmt::rt::Argument<'_>; 1];
    let _350: [core::fmt::rt::Argument<'_>; 1];
    let mut _351: core::fmt::rt::Argument<'_>;
    let _352: &&std::string::String;
    let _353: &std::string::String;
    let mut _354: &std::string::String;
    let _355: ();
    let mut _356: &mut std::vec::Vec<std::string::String>;
    let mut _357: std::string::String;
    let mut _359: std::fmt::Arguments<'_>;
    let mut _360: &[&str];
    let mut _361: &[core::fmt::rt::Argument<'_>];
    let _362: &[core::fmt::rt::Argument<'_>; 5];
    let _363: [core::fmt::rt::Argument<'_>; 5];
    let mut _364: core::fmt::rt::Argument<'_>;
    let _365: &std::string::String;
    let mut _366: core::fmt::rt::Argument<'_>;
    let _367: &std::string::String;
    let _368: std::string::String;
    let _369: &[std::string::String];
    let _370: &std::vec::Vec<std::string::String>;
    let mut _371: core::fmt::rt::Argument<'_>;
    let _372: &std::string::String;
    let _373: std::string::String;
    let _374: &str;
    let _375: &std::string::String;
    let mut _376: core::fmt::rt::Argument<'_>;
    let _377: &std::string::String;
    let mut _378: core::fmt::rt::Argument<'_>;
    let _379: &std::string::String;
    let mut _381: bool;
    let mut _383: std::fmt::Arguments<'_>;
    let mut _384: &[&str];
    let mut _385: &[core::fmt::rt::Argument<'_>];
    let _386: &[core::fmt::rt::Argument<'_>; 1];
    let _387: [core::fmt::rt::Argument<'_>; 1];
    let mut _388: core::fmt::rt::Argument<'_>;
    let _389: &std::string::String;
    let _390: std::string::String;
    let _391: &str;
    let _392: &mut iron::Response;
    let mut _393: &mut iron::Response;
    let mut _394: std::string::String;
    let mut _396: std::fmt::Arguments<'_>;
    let mut _397: &[&str];
    let mut _398: &[core::fmt::rt::Argument<'_>];
    let _399: &[core::fmt::rt::Argument<'_>; 4];
    let _400: [core::fmt::rt::Argument<'_>; 4];
    let mut _401: core::fmt::rt::Argument<'_>;
    let _402: &std::string::String;
    let mut _403: core::fmt::rt::Argument<'_>;
    let _404: &std::string::String;
    let mut _405: core::fmt::rt::Argument<'_>;
    let _406: &std::string::String;
    let mut _407: core::fmt::rt::Argument<'_>;
    let _408: &std::string::String;
    let _409: std::string::String;
    let _410: &[std::string::String];
    let mut _411: &std::vec::Vec<std::string::String>;
    let _412: &str;
    let _413: ();
    let mut _414: &mut iron::Headers;
    let mut _415: iron::headers::ContentType;
    let mut _416: bool;
    let mut _417: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _418: std::option::Option<&iron::headers::AcceptEncoding>;
    let mut _419: &iron::Headers;
    let mut _420: isize;
    let mut _422: std::slice::Iter<'_, iron::headers::QualityItem<iron::headers::Encoding>>;
    let mut _424: std::option::Option<&iron::headers::QualityItem<iron::headers::Encoding>>;
    let mut _425: &mut std::slice::Iter<'_, iron::headers::QualityItem<iron::headers::Encoding>>;
    let mut _426: isize;
    let mut _428: bool;
    let mut _429: bool;
    let _430: ();
    let mut _431: &mut iron::Headers;
    let mut _432: iron::headers::ContentEncoding;
    let mut _433: std::vec::Vec<iron::headers::Encoding>;
    let mut _434: std::boxed::Box<[iron::headers::Encoding]>;
    let mut _435: std::boxed::Box<[iron::headers::Encoding; 1]>;
    let mut _436: usize;
    let mut _437: usize;
    let mut _438: *mut u8;
    let mut _439: std::boxed::Box<[iron::headers::Encoding; 1]>;
    let mut _440: iron::headers::Encoding;
    let mut _441: iron::Response;
    let mut _461: &str;
    let mut _462: &iron::headers::AcceptEncoding;
    let mut _463: &iron::headers::QualityItem<iron::headers::Encoding>;
    let mut _464: bool;
    let mut _465: bool;
    let mut _466: bool;
    let mut _467: bool;
    let mut _468: bool;
    let mut _469: bool;
    let mut _470: isize;
    let mut _471: &mut std::boxed::Box<[iron::headers::Encoding; 1]>;
    let mut _472: ();
    let mut _473: isize;
    let mut _474: *const [&str; 2];
    let mut _475: *const [iron::headers::Encoding; 1];
    scope 1 {
        debug resp => _5;
        let mut _7: std::path::PathBuf;
        scope 2 {
            debug fs_path => _7;
            let mut _8: std::vec::Vec<std::string::String>;
            scope 3 {
                debug rows => _8;
                let _9: std::fs::ReadDir;
                let _15: std::result::Result<std::convert::Infallible, iron::IronError>;
                let _16: std::fs::ReadDir;
                scope 4 {
                    debug read_dir => _9;
                    let mut _17: std::vec::Vec<MainHandler::list_directory::Entry>;
                    scope 9 {
                        debug entries => _17;
                        let mut _20: std::fs::ReadDir;
                        let _45: std::string::String;
                        let mut _47: std::vec::Vec<std::string::String>;
                        scope 10 {
                            debug iter => _20;
                            let _24: std::result::Result<std::fs::DirEntry, std::io::Error>;
                            scope 11 {
                                debug entry_result => _24;
                                let _25: std::fs::DirEntry;
                                let _29: std::result::Result<std::convert::Infallible, iron::IronError>;
                                let _30: std::fs::DirEntry;
                                scope 12 {
                                    debug entry => _25;
                                    let _43: std::result::Result<std::convert::Infallible, iron::IronError>;
                                    let _44: std::fs::Metadata;
                                    scope 17 {
                                        debug residual => _43;
                                        scope 18 {
                                        }
                                    }
                                    scope 19 {
                                        debug val => _44;
                                        scope 20 {
                                        }
                                    }
                                }
                                scope 13 {
                                    debug residual => _29;
                                    scope 14 {
                                    }
                                }
                                scope 15 {
                                    debug val => _30;
                                    scope 16 {
                                    }
                                }
                            }
                        }
                        scope 21 {
                            debug breadcrumb => _45;
                            let _91: std::string::String;
                            let mut _93: std::option::Option<std::string::String>;
                            scope 25 {
                                debug sort_links => _91;
                                let mut _261: std::vec::Vec<std::string::String>;
                                let mut _290: std::vec::IntoIter<MainHandler::list_directory::Entry>;
                                let _380: std::string::String;
                                let _382: std::string::String;
                                let mut _451: &[&str; 2];
                                scope 42 {
                                    debug link => _261;
                                    let _273: std::string::String;
                                    let mut _452: &[&str; 2];
                                    scope 43 {
                                        debug res => _273;
                                    }
                                }
                                scope 44 {
                                    debug iter => _290;
                                    let _294: std::string::String;
                                    let _295: std::fs::Metadata;
                                    scope 45 {
                                        debug filename => _294;
                                        debug metadata => _295;
                                        let mut _298: std::slice::Iter<'_, &str>;
                                        let _310: std::string::String;
                                        let mut _447: &[&str; 2];
                                        scope 46 {
                                            debug iter => _298;
                                            let _302: &&str;
                                            scope 47 {
                                                debug fname => _302;
                                            }
                                        }
                                        scope 48 {
                                            debug file_modified => _310;
                                            let _319: std::string::String;
                                            scope 49 {
                                                debug file_size => _319;
                                                let _326: std::string::String;
                                                scope 50 {
                                                    debug link_style => _326;
                                                    let mut _331: std::vec::Vec<std::string::String>;
                                                    scope 51 {
                                                        debug link => _331;
                                                        let _342: std::string::String;
                                                        let _345: std::string::String;
                                                        let mut _446: &[&str; 2];
                                                        scope 52 {
                                                            debug file_name_label => _342;
                                                            let _358: std::string::String;
                                                            let mut _445: &[&str; 6];
                                                            scope 54 {
                                                                debug res => _358;
                                                            }
                                                        }
                                                        scope 53 {
                                                            debug res => _345;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 55 {
                                    debug upload_form => _380;
                                    let _395: std::string::String;
                                    let mut _450: &[&str; 5];
                                    scope 57 {
                                        debug res => _395;
                                    }
                                    scope 58 {
                                        debug encodings => _421;
                                        let _421: &std::vec::Vec<iron::headers::QualityItem<iron::headers::Encoding>>;
                                        let mut _423: std::slice::Iter<'_, iron::headers::QualityItem<iron::headers::Encoding>>;
                                        scope 59 {
                                            debug iter => _423;
                                            let _427: &iron::headers::Encoding;
                                            scope 60 {
                                                debug item => _427;
                                                let mut _448: &iron::headers::Encoding;
                                                let mut _449: &iron::headers::Encoding;
                                                let mut _476: *const ();
                                                let mut _477: usize;
                                                let mut _478: usize;
                                                let mut _479: usize;
                                                let mut _480: usize;
                                                let mut _481: bool;
                                                scope 61 {
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 56 {
                                    debug res => _382;
                                }
                            }
                            scope 26 {
                                debug sort_field => _93;
                                let mut _95: std::option::Option<std::string::String>;
                                scope 27 {
                                    debug order => _95;
                                    let mut _100: iron::url::form_urlencoded::Parse<'_>;
                                    let _116: std::string::String;
                                    scope 28 {
                                        debug iter => _100;
                                        let _104: std::borrow::Cow<'_, str>;
                                        let _105: std::borrow::Cow<'_, str>;
                                        scope 29 {
                                            debug k => _104;
                                            debug v => _105;
                                            let mut _442: &&str;
                                            let mut _443: &&str;
                                        }
                                    }
                                    scope 30 {
                                        debug order => _116;
                                        let mut _118: std::collections::BTreeMap<&str, &str>;
                                        scope 31 {
                                            debug order_labels => _118;
                                            let mut _124: std::slice::Iter<'_, &str>;
                                            let mut _197: std::vec::Vec<std::string::String>;
                                            scope 32 {
                                                debug iter => _124;
                                                let _128: &&str;
                                                scope 33 {
                                                    debug field => _128;
                                                    let mut _444: &&str;
                                                }
                                            }
                                            scope 34 {
                                                debug field => _140;
                                                let _140: std::string::String;
                                                let _153: std::string::String;
                                                let _180: std::string::String;
                                                let _189: bool;
                                                let mut _457: &[&str; 1];
                                                let mut _458: &[&str; 1];
                                                let mut _459: &&str;
                                                let mut _482: *const ();
                                                let mut _483: usize;
                                                let mut _484: usize;
                                                let mut _485: usize;
                                                let mut _486: usize;
                                                let mut _487: bool;
                                                scope 35 {
                                                    debug res => _153;
                                                }
                                                scope 36 {
                                                }
                                                scope 37 {
                                                    debug res => _180;
                                                }
                                                scope 38 {
                                                    debug reverse => _189;
                                                }
                                            }
                                            scope 39 {
                                                debug current_link => _197;
                                                let _202: std::string::String;
                                                let mut _453: &&str;
                                                let mut _454: &&str;
                                                let mut _455: &&str;
                                                let mut _456: &[&str; 7];
                                                scope 40 {
                                                    debug res => _202;
                                                }
                                                scope 41 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 22 {
                            debug breadcrumb => _47;
                            let mut _48: std::vec::Vec<std::string::String>;
                            scope 23 {
                                debug bread_links => _48;
                                let _59: std::string::String;
                                let mut _460: &[&str; 3];
                                scope 24 {
                                    debug res => _59;
                                }
                            }
                        }
                    }
                }
                scope 5 {
                    debug residual => _15;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _16;
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        _469 = const false;
        _468 = const false;
        _465 = const false;
        _467 = const false;
        _466 = const false;
        _464 = const false;
        _6 = iron::status::Ok;
        _469 = const true;
        _5 = iron::Response::with::<StatusCode>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = <PathBuf as Clone>::clone(_3) -> [return: bb2, unwind: bb370];
    }

    bb2: {
        _8 = Vec::<String>::new() -> [return: bb3, unwind: bb351];
    }

    bb3: {
        _13 = &_7;
        _12 = read_dir::<&PathBuf>(move _13) -> [return: bb4, unwind: bb350];
    }

    bb4: {
        _11 = Result::<ReadDir, std::io::Error>::map_err::<IronError, fn(std::io::Error) -> IronError {error_io2iron}>(move _12, error_io2iron) -> [return: bb5, unwind: bb350];
    }

    bb5: {
        _10 = <Result<ReadDir, IronError> as Try>::branch(move _11) -> [return: bb6, unwind: bb350];
    }

    bb6: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        _16 = move ((_10 as Continue).0: std::fs::ReadDir);
        _468 = const true;
        _9 = move _16;
        _17 = Vec::<MainHandler::list_directory::Entry>::new() -> [return: bb10, unwind: bb368];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _15 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, iron::IronError>);
        _0 = <Result<iron::Response, IronError> as FromResidual<Result<Infallible, IronError>>>::from_residual(move _15) -> [return: bb373, unwind: bb350];
    }

    bb10: {
        _465 = const true;
        _468 = const false;
        _19 = move _9;
        _18 = <ReadDir as IntoIterator>::into_iter(move _19) -> [return: bb11, unwind: bb366];
    }

    bb11: {
        _20 = move _18;
        goto -> bb12;
    }

    bb12: {
        _22 = &mut _20;
        _21 = <ReadDir as Iterator>::next(_22) -> [return: bb13, unwind: bb349];
    }

    bb13: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb15, 1: bb14, otherwise: bb8];
    }

    bb14: {
        _24 = move ((_21 as Some).0: std::result::Result<std::fs::DirEntry, std::io::Error>);
        _27 = Result::<DirEntry, std::io::Error>::map_err::<IronError, fn(std::io::Error) -> IronError {error_io2iron}>(move _24, error_io2iron) -> [return: bb16, unwind: bb349];
    }

    bb15: {
        drop(_20) -> [return: bb30, unwind: bb366];
    }

    bb16: {
        _26 = <Result<DirEntry, IronError> as Try>::branch(move _27) -> [return: bb17, unwind: bb349];
    }

    bb17: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb18, 1: bb19, otherwise: bb8];
    }

    bb18: {
        _30 = move ((_26 as Continue).0: std::fs::DirEntry);
        _25 = move _30;
        _32 = &mut _17;
        _37 = &_25;
        _36 = DirEntry::file_name(move _37) -> [return: bb20, unwind: bb348];
    }

    bb19: {
        _29 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, iron::IronError>);
        _0 = <Result<iron::Response, IronError> as FromResidual<Result<Infallible, IronError>>>::from_residual(move _29) -> [return: bb374, unwind: bb349];
    }

    bb20: {
        _35 = OsString::into_string(move _36) -> [return: bb21, unwind: bb348];
    }

    bb21: {
        _34 = Result::<String, OsString>::unwrap(move _35) -> [return: bb22, unwind: bb348];
    }

    bb22: {
        _41 = &_25;
        _40 = DirEntry::metadata(move _41) -> [return: bb23, unwind: bb347];
    }

    bb23: {
        _39 = Result::<Metadata, std::io::Error>::map_err::<IronError, fn(std::io::Error) -> IronError {error_io2iron}>(move _40, error_io2iron) -> [return: bb24, unwind: bb347];
    }

    bb24: {
        _38 = <Result<Metadata, IronError> as Try>::branch(move _39) -> [return: bb25, unwind: bb347];
    }

    bb25: {
        _42 = discriminant(_38);
        switchInt(move _42) -> [0: bb26, 1: bb27, otherwise: bb8];
    }

    bb26: {
        _44 = move ((_38 as Continue).0: std::fs::Metadata);
        _33 = MainHandler::list_directory::Entry { filename: move _34, metadata: move _44 };
        _31 = Vec::<MainHandler::list_directory::Entry>::push(move _32, move _33) -> [return: bb29, unwind: bb348];
    }

    bb27: {
        _43 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, iron::IronError>);
        _0 = <Result<iron::Response, IronError> as FromResidual<Result<Infallible, IronError>>>::from_residual(move _43) -> [return: bb28, unwind: bb346];
    }

    bb28: {
        drop(_34) -> [return: bb296, unwind: bb348];
    }

    bb29: {
        drop(_25) -> [return: bb12, unwind: bb349];
    }

    bb30: {
        _46 = core::slice::<impl [String]>::is_empty(_4) -> [return: bb31, unwind: bb366];
    }

    bb31: {
        switchInt(move _46) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _90 = const _;
        _45 = <str as ToOwned>::to_owned(_90) -> [return: bb375, unwind: bb366];
    }

    bb33: {
        _47 = <[String] as ToOwned>::to_owned(_4) -> [return: bb34, unwind: bb366];
    }

    bb34: {
        _48 = Vec::<String>::new() -> [return: bb35, unwind: bb345];
    }

    bb35: {
        _50 = &mut _48;
        _53 = &mut _47;
        _52 = Vec::<String>::pop(move _53) -> [return: bb36, unwind: bb344];
    }

    bb36: {
        _51 = Option::<String>::unwrap(move _52) -> [return: bb37, unwind: bb344];
    }

    bb37: {
        _49 = Vec::<String>::push(move _50, move _51) -> [return: bb376, unwind: bb344];
    }

    bb38: {
        _55 = &_47;
        _54 = Vec::<String>::is_empty(move _55) -> [return: bb39, unwind: bb344];
    }

    bb39: {
        switchInt(move _54) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _81 = &mut _48;
        _83 = const _;
        _82 = <str as ToOwned>::to_owned(_83) -> [return: bb57, unwind: bb344];
    }

    bb41: {
        _57 = &mut _48;
        _460 = const _;
        _61 = _460 as &[&str] (PointerCoercion(Unsize));
        _69 = &_47;
        _68 = <Vec<String> as Deref>::deref(_69) -> [return: bb42, unwind: bb344];
    }

    bb42: {
        _67 = encode_link_path(_68) -> [return: bb43, unwind: bb344];
    }

    bb43: {
        _66 = &_67;
        _65 = core::fmt::rt::Argument::<'_>::new_display::<String>(_66) -> [return: bb44, unwind: bb343];
    }

    bb44: {
        _79 = &mut _47;
        _78 = Vec::<String>::pop(move _79) -> [return: bb45, unwind: bb343];
    }

    bb45: {
        _77 = Option::<String>::unwrap(move _78) -> [return: bb46, unwind: bb343];
    }

    bb46: {
        _76 = &_77;
        _75 = <String as ToOwned>::to_owned(move _76) -> [return: bb47, unwind: bb342];
    }

    bb47: {
        _74 = &_75;
        _73 = <String as Deref>::deref(_74) -> [return: bb48, unwind: bb341];
    }

    bb48: {
        _72 = encode_minimal(_73) -> [return: bb49, unwind: bb341];
    }

    bb49: {
        _71 = &_72;
        _70 = core::fmt::rt::Argument::<'_>::new_display::<String>(_71) -> [return: bb50, unwind: bb340];
    }

    bb50: {
        _64 = [move _65, move _70];
        _63 = &_64;
        _62 = _63 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _60 = Arguments::<'_>::new_v1(move _61, move _62) -> [return: bb51, unwind: bb340];
    }

    bb51: {
        _59 = std::fmt::format(move _60) -> [return: bb52, unwind: bb340];
    }

    bb52: {
        drop(_72) -> [return: bb53, unwind: bb336];
    }

    bb53: {
        drop(_75) -> [return: bb54, unwind: bb337];
    }

    bb54: {
        drop(_77) -> [return: bb55, unwind: bb338];
    }

    bb55: {
        drop(_67) -> [return: bb56, unwind: bb339];
    }

    bb56: {
        _58 = move _59;
        _56 = Vec::<String>::push(move _57, move _58) -> [return: bb377, unwind: bb344];
    }

    bb57: {
        _80 = Vec::<String>::push(move _81, move _82) -> [return: bb58, unwind: bb344];
    }

    bb58: {
        _86 = &mut _48;
        _85 = <Vec<String> as DerefMut>::deref_mut(move _86) -> [return: bb59, unwind: bb344];
    }

    bb59: {
        _84 = core::slice::<impl [String]>::reverse(_85) -> [return: bb60, unwind: bb344];
    }

    bb60: {
        _88 = &_48;
        _87 = <Vec<String> as Deref>::deref(move _88) -> [return: bb61, unwind: bb344];
    }

    bb61: {
        _89 = const " / ";
        _45 = slice::<impl [String]>::join::<&str>(_87, _89) -> [return: bb62, unwind: bb344];
    }

    bb62: {
        drop(_48) -> [return: bb63, unwind: bb345];
    }

    bb63: {
        drop(_47) -> [return: bb64, unwind: bb366];
    }

    bb64: {
        _92 = ((*_1).6: bool);
        switchInt(move _92) -> [0: bb163, otherwise: bb65];
    }

    bb65: {
        _94 = <String as std::convert::From<&str>>::from(const "name") -> [return: bb66, unwind: bb335];
    }

    bb66: {
        _464 = const true;
        _93 = Option::<String>::Some(move _94);
        _467 = const true;
        _95 = Option::<String>::None;
        _99 = &((*_2).0: iron::Url);
        _98 = <iron::Url as AsRef<iron::url::Url>>::as_ref(move _99) -> [return: bb67, unwind: bb362];
    }

    bb67: {
        _97 = iron::url::Url::query_pairs(_98) -> [return: bb68, unwind: bb362];
    }

    bb68: {
        _96 = <Parse<'_> as IntoIterator>::into_iter(move _97) -> [return: bb69, unwind: bb362];
    }

    bb69: {
        _100 = _96;
        goto -> bb70;
    }

    bb70: {
        _102 = &mut _100;
        _101 = <Parse<'_> as Iterator>::next(_102) -> [return: bb71, unwind: bb362];
    }

    bb71: {
        _103 = discriminant(_101);
        switchInt(move _103) -> [0: bb73, 1: bb72, otherwise: bb8];
    }

    bb72: {
        _104 = move (((_101 as Some).0: (std::borrow::Cow<'_, str>, std::borrow::Cow<'_, str>)).0: std::borrow::Cow<'_, str>);
        _105 = move (((_101 as Some).0: (std::borrow::Cow<'_, str>, std::borrow::Cow<'_, str>)).1: std::borrow::Cow<'_, str>);
        _107 = &_104;
        _443 = const _;
        _106 = <Cow<'_, str> as PartialEq<&str>>::eq(move _107, _443) -> [return: bb74, unwind: bb332];
    }

    bb73: {
        _467 = const false;
        _117 = move _95;
        _116 = Option::<String>::unwrap_or_else::<{closure@src/main.rs:538:46: 538:48}>(move _117, const ZeroSized: {closure@src/main.rs:538:46: 538:48}) -> [return: bb87, unwind: bb362];
    }

    bb74: {
        switchInt(move _106) -> [0: bb79, otherwise: bb75];
    }

    bb75: {
        _110 = &_105;
        _109 = <Cow<'_, str> as ToString>::to_string(move _110) -> [return: bb76, unwind: bb332];
    }

    bb76: {
        _108 = Option::<String>::Some(move _109);
        drop(_93) -> [return: bb77, unwind: bb78];
    }

    bb77: {
        _464 = const true;
        _93 = move _108;
        goto -> bb85;
    }

    bb78 (cleanup): {
        _464 = const true;
        _93 = move _108;
        goto -> bb332;
    }

    bb79: {
        _112 = &_104;
        _442 = const _;
        _111 = <Cow<'_, str> as PartialEq<&str>>::eq(move _112, _442) -> [return: bb80, unwind: bb332];
    }

    bb80: {
        switchInt(move _111) -> [0: bb85, otherwise: bb81];
    }

    bb81: {
        _115 = &_105;
        _114 = <Cow<'_, str> as ToString>::to_string(move _115) -> [return: bb82, unwind: bb332];
    }

    bb82: {
        _113 = Option::<String>::Some(move _114);
        drop(_95) -> [return: bb83, unwind: bb84];
    }

    bb83: {
        _467 = const true;
        _95 = move _113;
        goto -> bb85;
    }

    bb84 (cleanup): {
        _467 = const true;
        _95 = move _113;
        goto -> bb332;
    }

    bb85: {
        drop(_105) -> [return: bb86, unwind: bb333];
    }

    bb86: {
        drop(_104) -> [return: bb70, unwind: bb362];
    }

    bb87: {
        _118 = BTreeMap::<&str, &str>::new() -> [return: bb88, unwind: bb331];
    }

    bb88: {
        _123 = const {alloc15: &SORT_FIELDS};
        _122 = <SORT_FIELDS as Deref>::deref(_123) -> [return: bb89, unwind: bb330];
    }

    bb89: {
        _121 = <Vec<&str> as Deref>::deref(_122) -> [return: bb90, unwind: bb330];
    }

    bb90: {
        _120 = core::slice::<impl [&str]>::iter(_121) -> [return: bb91, unwind: bb330];
    }

    bb91: {
        _119 = <std::slice::Iter<'_, &str> as IntoIterator>::into_iter(move _120) -> [return: bb92, unwind: bb330];
    }

    bb92: {
        _124 = move _119;
        goto -> bb93;
    }

    bb93: {
        _126 = &mut _124;
        _125 = <std::slice::Iter<'_, &str> as Iterator>::next(_126) -> [return: bb94, unwind: bb330];
    }

    bb94: {
        _127 = discriminant(_125);
        switchInt(move _127) -> [0: bb96, 1: bb95, otherwise: bb8];
    }

    bb95: {
        _128 = ((_125 as Some).0: &&str);
        _130 = &_93;
        _461 = deref_copy (*_128);
        _133 = <str as ToOwned>::to_owned(_461) -> [return: bb97, unwind: bb330];
    }

    bb96: {
        _139 = discriminant(_93);
        switchInt(move _139) -> [1: bb105, otherwise: bb134];
    }

    bb97: {
        _132 = Option::<String>::Some(move _133);
        _131 = &_132;
        _129 = <Option<String> as PartialEq>::eq(move _130, move _131) -> [return: bb98, unwind: bb329];
    }

    bb98: {
        switchInt(move _129) -> [0: bb104, otherwise: bb99];
    }

    bb99: {
        drop(_132) -> [return: bb100, unwind: bb330];
    }

    bb100: {
        _135 = &_116;
        _444 = const _;
        _134 = <String as PartialEq<&str>>::eq(move _135, _444) -> [return: bb101, unwind: bb330];
    }

    bb101: {
        switchInt(move _134) -> [0: bb93, otherwise: bb102];
    }

    bb102: {
        _137 = &mut _118;
        _138 = <&str as ToOwned>::to_owned(_128) -> [return: bb103, unwind: bb330];
    }

    bb103: {
        _136 = BTreeMap::<&str, &str>::insert(move _137, move _138, const _) -> [return: bb378, unwind: bb330];
    }

    bb104: {
        drop(_132) -> [return: bb93, unwind: bb330];
    }

    bb105: {
        _464 = const false;
        _140 = move ((_93 as Some).0: std::string::String);
        _148 = const {alloc15: &SORT_FIELDS};
        _147 = <SORT_FIELDS as Deref>::deref(_148) -> [return: bb106, unwind: bb328];
    }

    bb106: {
        _146 = <Vec<&str> as Deref>::deref(_147) -> [return: bb107, unwind: bb328];
    }

    bb107: {
        _145 = core::slice::<impl [&str]>::iter(_146) -> [return: bb108, unwind: bb328];
    }

    bb108: {
        _144 = &mut _145;
        _150 = &_140;
        _149 = {closure@src/main.rs:550:31: 550:34} { field: move _150 };
        _143 = <std::slice::Iter<'_, &str> as Iterator>::position::<{closure@src/main.rs:550:31: 550:34}>(move _144, move _149) -> [return: bb109, unwind: bb328];
    }

    bb109: {
        _142 = &_143;
        _141 = Option::<usize>::is_none(move _142) -> [return: bb110, unwind: bb328];
    }

    bb110: {
        switchInt(move _141) -> [0: bb116, otherwise: bb111];
    }

    bb111: {
        _457 = const _;
        _155 = _457 as &[&str] (PointerCoercion(Unsize));
        _160 = &_140;
        _159 = core::fmt::rt::Argument::<'_>::new_display::<String>(_160) -> [return: bb112, unwind: bb328];
    }

    bb112: {
        _158 = [move _159];
        _157 = &_158;
        _156 = _157 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _154 = Arguments::<'_>::new_v1(move _155, move _156) -> [return: bb113, unwind: bb328];
    }

    bb113: {
        _153 = std::fmt::format(move _154) -> [return: bb114, unwind: bb328];
    }

    bb114: {
        _152 = StringError(move _153);
        _161 = BadRequest;
        _151 = IronError::new::<StringError, StatusCode>(move _152, move _161) -> [return: bb115, unwind: bb328];
    }

    bb115: {
        _0 = Result::<iron::Response, IronError>::Err(move _151);
        goto -> bb291;
    }

    bb116: {
        _171 = SizeOf([&str; 2]);
        _172 = AlignOf([&str; 2]);
        _173 = alloc::alloc::exchange_malloc(move _171, move _172) -> [return: bb117, unwind: bb328];
    }

    bb117: {
        _174 = ShallowInitBox(move _173, [&str; 2]);
        _175 = const _;
        _474 = (((_174.0: std::ptr::Unique<[&str; 2]>).0: std::ptr::NonNull<[&str; 2]>).0: *const [&str; 2]);
        _482 = _474 as *const () (PtrToPtr);
        _483 = _482 as usize (Transmute);
        _484 = AlignOf([&str; 2]);
        _485 = Sub(_484, const 1_usize);
        _486 = BitAnd(_483, _485);
        _487 = Eq(_486, const 0_usize);
        assert(_487, "misaligned pointer dereference: address must be a multiple of {} but is {}", _484, _483) -> [success: bb372, unwind unreachable];
    }

    bb118: {
        _168 = &_169;
        _167 = <Vec<&str> as Deref>::deref(move _168) -> [return: bb119, unwind: bb327];
    }

    bb119: {
        _166 = core::slice::<impl [&str]>::iter(_167) -> [return: bb120, unwind: bb327];
    }

    bb120: {
        _165 = &mut _166;
        _177 = &_116;
        _176 = {closure@src/main.rs:560:31: 560:34} { order: move _177 };
        _164 = <std::slice::Iter<'_, &str> as Iterator>::position::<{closure@src/main.rs:560:31: 560:34}>(move _165, move _176) -> [return: bb121, unwind: bb327];
    }

    bb121: {
        _163 = &_164;
        _162 = Option::<usize>::is_none(move _163) -> [return: bb122, unwind: bb327];
    }

    bb122: {
        switchInt(move _162) -> [0: bb129, otherwise: bb123];
    }

    bb123: {
        drop(_169) -> [return: bb124, unwind: bb328];
    }

    bb124: {
        _458 = const _;
        _182 = _458 as &[&str] (PointerCoercion(Unsize));
        _187 = &_116;
        _186 = core::fmt::rt::Argument::<'_>::new_display::<String>(_187) -> [return: bb125, unwind: bb328];
    }

    bb125: {
        _185 = [move _186];
        _184 = &_185;
        _183 = _184 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _181 = Arguments::<'_>::new_v1(move _182, move _183) -> [return: bb126, unwind: bb328];
    }

    bb126: {
        _180 = std::fmt::format(move _181) -> [return: bb127, unwind: bb328];
    }

    bb127: {
        _179 = StringError(move _180);
        _188 = BadRequest;
        _178 = IronError::new::<StringError, StatusCode>(move _179, move _188) -> [return: bb128, unwind: bb328];
    }

    bb128: {
        _0 = Result::<iron::Response, IronError>::Err(move _178);
        goto -> bb291;
    }

    bb129: {
        drop(_169) -> [return: bb130, unwind: bb328];
    }

    bb130: {
        _190 = &_116;
        _459 = const _;
        _189 = <String as PartialEq<&str>>::eq(move _190, _459) -> [return: bb131, unwind: bb328];
    }

    bb131: {
        _193 = &mut _17;
        _192 = <Vec<MainHandler::list_directory::Entry> as DerefMut>::deref_mut(move _193) -> [return: bb132, unwind: bb328];
    }

    bb132: {
        _195 = &_140;
        _196 = &_189;
        _194 = {closure@src/main.rs:570:33: 570:39} { field: move _195, reverse: move _196 };
        _191 = slice::<impl [MainHandler::list_directory::Entry]>::sort_by::<{closure@src/main.rs:570:33: 570:39}>(_192, move _194) -> [return: bb133, unwind: bb328];
    }

    bb133: {
        drop(_140) -> [return: bb134, unwind: bb330];
    }

    bb134: {
        _197 = <[String] as ToOwned>::to_owned(_4) -> [return: bb135, unwind: bb330];
    }

    bb135: {
        _199 = &mut _197;
        _201 = const "";
        _200 = <str as ToOwned>::to_owned(_201) -> [return: bb136, unwind: bb326];
    }

    bb136: {
        _198 = Vec::<String>::push(move _199, move _200) -> [return: bb137, unwind: bb326];
    }

    bb137: {
        _456 = const _;
        _204 = _456 as &[&str] (PointerCoercion(Unsize));
        _212 = &_197;
        _211 = <Vec<String> as Deref>::deref(_212) -> [return: bb138, unwind: bb326];
    }

    bb138: {
        _210 = encode_link_path(_211) -> [return: bb139, unwind: bb326];
    }

    bb139: {
        _209 = &_210;
        _208 = core::fmt::rt::Argument::<'_>::new_display::<String>(_209) -> [return: bb140, unwind: bb325];
    }

    bb140: {
        _217 = &_118;
        _218 = const "name";
        _216 = BTreeMap::<&str, &str>::get::<str>(move _217, _218) -> [return: bb141, unwind: bb325];
    }

    bb141: {
        _455 = const _;
        _215 = Option::<&&str>::unwrap_or(move _216, _455) -> [return: bb142, unwind: bb325];
    }

    bb142: {
        _214 = &_215;
        _213 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(_214) -> [return: bb143, unwind: bb325];
    }

    bb143: {
        _223 = &_118;
        _224 = const "modified";
        _222 = BTreeMap::<&str, &str>::get::<str>(move _223, _224) -> [return: bb144, unwind: bb325];
    }

    bb144: {
        _454 = const _;
        _221 = Option::<&&str>::unwrap_or(move _222, _454) -> [return: bb145, unwind: bb325];
    }

    bb145: {
        _220 = &_221;
        _219 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(_220) -> [return: bb146, unwind: bb325];
    }

    bb146: {
        _229 = &_118;
        _230 = const "size";
        _228 = BTreeMap::<&str, &str>::get::<str>(move _229, _230) -> [return: bb147, unwind: bb325];
    }

    bb147: {
        _453 = const _;
        _227 = Option::<&&str>::unwrap_or(move _228, _453) -> [return: bb148, unwind: bb325];
    }

    bb148: {
        _226 = &_227;
        _225 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(_226) -> [return: bb149, unwind: bb325];
    }

    bb149: {
        _207 = [move _208, move _213, move _219, move _225];
        _206 = &_207;
        _205 = _206 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _235 = core::fmt::rt::Alignment::Unknown;
        _236 = core::fmt::rt::Count::Implied;
        _237 = core::fmt::rt::Count::Implied;
        _234 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _235, const 0_u32, move _236, move _237) -> [return: bb150, unwind: bb325];
    }

    bb150: {
        _239 = core::fmt::rt::Alignment::Unknown;
        _240 = core::fmt::rt::Count::Implied;
        _241 = core::fmt::rt::Count::Implied;
        _238 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _239, const 0_u32, move _240, move _241) -> [return: bb151, unwind: bb325];
    }

    bb151: {
        _243 = core::fmt::rt::Alignment::Unknown;
        _244 = core::fmt::rt::Count::Implied;
        _245 = core::fmt::rt::Count::Implied;
        _242 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _243, const 0_u32, move _244, move _245) -> [return: bb152, unwind: bb325];
    }

    bb152: {
        _247 = core::fmt::rt::Alignment::Unknown;
        _248 = core::fmt::rt::Count::Implied;
        _249 = core::fmt::rt::Count::Implied;
        _246 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _247, const 0_u32, move _248, move _249) -> [return: bb153, unwind: bb325];
    }

    bb153: {
        _251 = core::fmt::rt::Alignment::Unknown;
        _252 = core::fmt::rt::Count::Implied;
        _253 = core::fmt::rt::Count::Implied;
        _250 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _251, const 0_u32, move _252, move _253) -> [return: bb154, unwind: bb325];
    }

    bb154: {
        _255 = core::fmt::rt::Alignment::Unknown;
        _256 = core::fmt::rt::Count::Implied;
        _257 = core::fmt::rt::Count::Implied;
        _254 = core::fmt::rt::Placeholder::new(const 3_usize, const ' ', move _255, const 0_u32, move _256, move _257) -> [return: bb155, unwind: bb325];
    }

    bb155: {
        _233 = [move _234, move _238, move _242, move _246, move _250, move _254];
        _232 = &_233;
        _231 = _232 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _258 = core::fmt::rt::UnsafeArg::new() -> [return: bb156, unwind: bb325];
    }

    bb156: {
        _203 = Arguments::<'_>::new_v1_formatted(move _204, move _205, move _231, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb157, unwind: bb325];
    }

    bb157: {
        _202 = std::fmt::format(move _203) -> [return: bb158, unwind: bb325];
    }

    bb158: {
        drop(_210) -> [return: bb159, unwind: bb324];
    }

    bb159: {
        _91 = move _202;
        drop(_197) -> [return: bb160, unwind: bb330];
    }

    bb160: {
        drop(_118) -> [return: bb161, unwind: bb331];
    }

    bb161: {
        drop(_116) -> [return: bb162, unwind: bb362];
    }

    bb162: {
        _467 = const false;
        _470 = discriminant(_93);
        switchInt(move _470) -> [1: bb354, otherwise: bb353];
    }

    bb163: {
        _259 = const "";
        _91 = <str as ToOwned>::to_owned(_259) -> [return: bb379, unwind: bb335];
    }

    bb164: {
        _260 = core::slice::<impl [String]>::is_empty(_4) -> [return: bb165, unwind: bb323];
    }

    bb165: {
        switchInt(move _260) -> [0: bb167, otherwise: bb166];
    }

    bb166: {
        _285 = &mut _8;
        _287 = const "<tr><td>&nbsp;</td></tr>";
        _286 = <str as ToOwned>::to_owned(_287) -> [return: bb182, unwind: bb323];
    }

    bb167: {
        _261 = <[String] as ToOwned>::to_owned(_4) -> [return: bb168, unwind: bb323];
    }

    bb168: {
        _263 = &mut _261;
        _262 = Vec::<String>::pop(move _263) -> [return: bb169, unwind: bb322];
    }

    bb169: {
        drop(_262) -> [return: bb170, unwind: bb322];
    }

    bb170: {
        _265 = &_261;
        _264 = Vec::<String>::is_empty(move _265) -> [return: bb171, unwind: bb322];
    }

    bb171: {
        switchInt(move _264) -> [0: bb172, otherwise: bb174];
    }

    bb172: {
        _267 = &mut _261;
        _269 = const "";
        _268 = <str as ToOwned>::to_owned(_269) -> [return: bb173, unwind: bb322];
    }

    bb173: {
        _266 = Vec::<String>::push(move _267, move _268) -> [return: bb380, unwind: bb322];
    }

    bb174: {
        _271 = &mut _8;
        _452 = const _;
        _275 = _452 as &[&str] (PointerCoercion(Unsize));
        _283 = &_261;
        _282 = <Vec<String> as Deref>::deref(_283) -> [return: bb175, unwind: bb322];
    }

    bb175: {
        _281 = encode_link_path(_282) -> [return: bb176, unwind: bb322];
    }

    bb176: {
        _280 = &_281;
        _279 = core::fmt::rt::Argument::<'_>::new_display::<String>(_280) -> [return: bb177, unwind: bb321];
    }

    bb177: {
        _278 = [move _279];
        _277 = &_278;
        _276 = _277 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _274 = Arguments::<'_>::new_v1(move _275, move _276) -> [return: bb178, unwind: bb321];
    }

    bb178: {
        _273 = std::fmt::format(move _274) -> [return: bb179, unwind: bb321];
    }

    bb179: {
        drop(_281) -> [return: bb180, unwind: bb320];
    }

    bb180: {
        _272 = move _273;
        _270 = Vec::<String>::push(move _271, move _272) -> [return: bb181, unwind: bb322];
    }

    bb181: {
        drop(_261) -> [return: bb183, unwind: bb323];
    }

    bb182: {
        _284 = Vec::<String>::push(move _285, move _286) -> [return: bb381, unwind: bb323];
    }

    bb183: {
        _465 = const false;
        _289 = move _17;
        _288 = <Vec<MainHandler::list_directory::Entry> as IntoIterator>::into_iter(move _289) -> [return: bb184, unwind: bb323];
    }

    bb184: {
        _290 = move _288;
        goto -> bb185;
    }

    bb185: {
        _292 = &mut _290;
        _291 = <std::vec::IntoIter<MainHandler::list_directory::Entry> as Iterator>::next(_292) -> [return: bb186, unwind: bb319];
    }

    bb186: {
        _293 = discriminant(_291);
        switchInt(move _293) -> [0: bb188, 1: bb187, otherwise: bb8];
    }

    bb187: {
        _466 = const true;
        _294 = move (((_291 as Some).0: MainHandler::list_directory::Entry).0: std::string::String);
        _295 = move (((_291 as Some).0: MainHandler::list_directory::Entry).1: std::fs::Metadata);
        _296 = ((*_1).1: bool);
        switchInt(move _296) -> [0: bb198, otherwise: bb189];
    }

    bb188: {
        drop(_290) -> [return: bb248, unwind: bb323];
    }

    bb189: {
        _447 = const _;
        _297 = <&[&str; 2] as IntoIterator>::into_iter(_447) -> [return: bb190, unwind: bb360];
    }

    bb190: {
        _298 = move _297;
        goto -> bb191;
    }

    bb191: {
        _300 = &mut _298;
        _299 = <std::slice::Iter<'_, &str> as Iterator>::next(_300) -> [return: bb192, unwind: bb360];
    }

    bb192: {
        _301 = discriminant(_299);
        switchInt(move _301) -> [0: bb198, 1: bb193, otherwise: bb8];
    }

    bb193: {
        _302 = ((_299 as Some).0: &&str);
        _304 = &_294;
        _303 = <String as PartialEq<&str>>::eq(move _304, _302) -> [return: bb194, unwind: bb360];
    }

    bb194: {
        switchInt(move _303) -> [0: bb191, otherwise: bb195];
    }

    bb195: {
        _306 = &mut _7;
        _466 = const false;
        _307 = move _294;
        _305 = PathBuf::push::<String>(move _306, move _307) -> [return: bb196, unwind: bb360];
    }

    bb196: {
        _308 = &(*_2);
        _309 = &_7;
        _0 = MainHandler::send_file::<&PathBuf>(_1, move _308, move _309) -> [return: bb197, unwind: bb360];
    }

    bb197: {
        _466 = const false;
        drop(_290) -> [return: bb290, unwind: bb323];
    }

    bb198: {
        _317 = &_295;
        _316 = Metadata::modified(move _317) -> [return: bb199, unwind: bb360];
    }

    bb199: {
        _315 = Result::<SystemTime, std::io::Error>::unwrap(move _316) -> [return: bb200, unwind: bb360];
    }

    bb200: {
        _314 = system_time_to_date_time(move _315) -> [return: bb201, unwind: bb360];
    }

    bb201: {
        _313 = &_314;
        _318 = const "%Y-%m-%d %H:%M:%S";
        _312 = DateTime::<Local>::format(move _313, _318) -> [return: bb202, unwind: bb360];
    }

    bb202: {
        _311 = &_312;
        _310 = <DelayedFormat<StrftimeItems<'_>> as ToString>::to_string(move _311) -> [return: bb203, unwind: bb318];
    }

    bb203: {
        drop(_312) -> [return: bb204, unwind: bb317];
    }

    bb204: {
        _321 = &_295;
        _320 = Metadata::is_dir(move _321) -> [return: bb205, unwind: bb317];
    }

    bb205: {
        switchInt(move _320) -> [0: bb207, otherwise: bb206];
    }

    bb206: {
        _322 = const "-";
        _319 = <str as ToOwned>::to_owned(_322) -> [return: bb382, unwind: bb317];
    }

    bb207: {
        _325 = &_295;
        _324 = Metadata::len(move _325) -> [return: bb208, unwind: bb317];
    }

    bb208: {
        _323 = move _324 as f64 (IntToFloat);
        _319 = convert(move _323) -> [return: bb383, unwind: bb317];
    }

    bb209: {
        _328 = &_295;
        _327 = Metadata::is_dir(move _328) -> [return: bb210, unwind: bb316];
    }

    bb210: {
        switchInt(move _327) -> [0: bb212, otherwise: bb211];
    }

    bb211: {
        _329 = const "style=\"font-weight: bold;\"";
        _326 = <str as ToOwned>::to_owned(_329) -> [return: bb384, unwind: bb316];
    }

    bb212: {
        _330 = const "";
        _326 = <str as ToOwned>::to_owned(_330) -> [return: bb385, unwind: bb316];
    }

    bb213: {
        _331 = <[String] as ToOwned>::to_owned(_4) -> [return: bb214, unwind: bb315];
    }

    bb214: {
        _333 = &mut _331;
        _335 = &_294;
        _334 = <String as Clone>::clone(move _335) -> [return: bb215, unwind: bb314];
    }

    bb215: {
        _332 = Vec::<String>::push(move _333, move _334) -> [return: bb216, unwind: bb314];
    }

    bb216: {
        _337 = &_295;
        _336 = Metadata::is_dir(move _337) -> [return: bb217, unwind: bb314];
    }

    bb217: {
        switchInt(move _336) -> [0: bb220, otherwise: bb218];
    }

    bb218: {
        _339 = &mut _331;
        _341 = const "";
        _340 = <str as ToOwned>::to_owned(_341) -> [return: bb219, unwind: bb314];
    }

    bb219: {
        _338 = Vec::<String>::push(move _339, move _340) -> [return: bb386, unwind: bb314];
    }

    bb220: {
        _344 = &_295;
        _343 = Metadata::is_dir(move _344) -> [return: bb221, unwind: bb314];
    }

    bb221: {
        switchInt(move _343) -> [0: bb226, otherwise: bb222];
    }

    bb222: {
        _446 = const _;
        _347 = _446 as &[&str] (PointerCoercion(Unsize));
        _353 = &_294;
        _352 = &_353;
        _351 = core::fmt::rt::Argument::<'_>::new_display::<&String>(_352) -> [return: bb223, unwind: bb314];
    }

    bb223: {
        _350 = [move _351];
        _349 = &_350;
        _348 = _349 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _346 = Arguments::<'_>::new_v1(move _347, move _348) -> [return: bb224, unwind: bb314];
    }

    bb224: {
        _345 = std::fmt::format(move _346) -> [return: bb225, unwind: bb314];
    }

    bb225: {
        _342 = move _345;
        goto -> bb227;
    }

    bb226: {
        _354 = &_294;
        _342 = <String as Clone>::clone(move _354) -> [return: bb387, unwind: bb314];
    }

    bb227: {
        _356 = &mut _8;
        _445 = const _;
        _360 = _445 as &[&str] (PointerCoercion(Unsize));
        _365 = &_326;
        _364 = core::fmt::rt::Argument::<'_>::new_display::<String>(_365) -> [return: bb228, unwind: bb313];
    }

    bb228: {
        _370 = &_331;
        _369 = <Vec<String> as Deref>::deref(_370) -> [return: bb229, unwind: bb313];
    }

    bb229: {
        _368 = encode_link_path(_369) -> [return: bb230, unwind: bb313];
    }

    bb230: {
        _367 = &_368;
        _366 = core::fmt::rt::Argument::<'_>::new_display::<String>(_367) -> [return: bb231, unwind: bb312];
    }

    bb231: {
        _375 = &_342;
        _374 = <String as Deref>::deref(_375) -> [return: bb232, unwind: bb312];
    }

    bb232: {
        _373 = encode_minimal(_374) -> [return: bb233, unwind: bb312];
    }

    bb233: {
        _372 = &_373;
        _371 = core::fmt::rt::Argument::<'_>::new_display::<String>(_372) -> [return: bb234, unwind: bb311];
    }

    bb234: {
        _377 = &_310;
        _376 = core::fmt::rt::Argument::<'_>::new_display::<String>(_377) -> [return: bb235, unwind: bb311];
    }

    bb235: {
        _379 = &_319;
        _378 = core::fmt::rt::Argument::<'_>::new_display::<String>(_379) -> [return: bb236, unwind: bb311];
    }

    bb236: {
        _363 = [move _364, move _366, move _371, move _376, move _378];
        _362 = &_363;
        _361 = _362 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _359 = Arguments::<'_>::new_v1(move _360, move _361) -> [return: bb237, unwind: bb311];
    }

    bb237: {
        _358 = std::fmt::format(move _359) -> [return: bb238, unwind: bb311];
    }

    bb238: {
        drop(_373) -> [return: bb239, unwind: bb309];
    }

    bb239: {
        drop(_368) -> [return: bb240, unwind: bb310];
    }

    bb240: {
        _357 = move _358;
        _355 = Vec::<String>::push(move _356, move _357) -> [return: bb241, unwind: bb313];
    }

    bb241: {
        drop(_342) -> [return: bb242, unwind: bb314];
    }

    bb242: {
        drop(_331) -> [return: bb243, unwind: bb315];
    }

    bb243: {
        drop(_326) -> [return: bb244, unwind: bb316];
    }

    bb244: {
        drop(_319) -> [return: bb245, unwind: bb317];
    }

    bb245: {
        drop(_310) -> [return: bb246, unwind: bb360];
    }

    bb246: {
        drop(_294) -> [return: bb247, unwind: bb319];
    }

    bb247: {
        _466 = const false;
        goto -> bb185;
    }

    bb248: {
        _381 = ((*_1).2: bool);
        switchInt(move _381) -> [0: bb255, otherwise: bb249];
    }

    bb249: {
        _451 = const _;
        _384 = _451 as &[&str] (PointerCoercion(Unsize));
        _390 = encode_link_path(_4) -> [return: bb250, unwind: bb323];
    }

    bb250: {
        _389 = &_390;
        _388 = core::fmt::rt::Argument::<'_>::new_display::<String>(_389) -> [return: bb251, unwind: bb308];
    }

    bb251: {
        _387 = [move _388];
        _386 = &_387;
        _385 = _386 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _383 = Arguments::<'_>::new_v1(move _384, move _385) -> [return: bb252, unwind: bb308];
    }

    bb252: {
        _382 = std::fmt::format(move _383) -> [return: bb253, unwind: bb308];
    }

    bb253: {
        drop(_390) -> [return: bb254, unwind: bb307];
    }

    bb254: {
        _380 = move _382;
        goto -> bb256;
    }

    bb255: {
        _391 = const "";
        _380 = <str as ToOwned>::to_owned(_391) -> [return: bb388, unwind: bb323];
    }

    bb256: {
        _393 = &mut _5;
        _450 = const _;
        _397 = _450 as &[&str] (PointerCoercion(Unsize));
        _402 = &_380;
        _401 = core::fmt::rt::Argument::<'_>::new_display::<String>(_402) -> [return: bb257, unwind: bb306];
    }

    bb257: {
        _404 = &_45;
        _403 = core::fmt::rt::Argument::<'_>::new_display::<String>(_404) -> [return: bb258, unwind: bb306];
    }

    bb258: {
        _406 = &_91;
        _405 = core::fmt::rt::Argument::<'_>::new_display::<String>(_406) -> [return: bb259, unwind: bb306];
    }

    bb259: {
        _411 = &_8;
        _410 = <Vec<String> as Deref>::deref(move _411) -> [return: bb260, unwind: bb306];
    }

    bb260: {
        _412 = const "\n";
        _409 = slice::<impl [String]>::join::<&str>(_410, _412) -> [return: bb261, unwind: bb306];
    }

    bb261: {
        _408 = &_409;
        _407 = core::fmt::rt::Argument::<'_>::new_display::<String>(_408) -> [return: bb262, unwind: bb305];
    }

    bb262: {
        _400 = [move _401, move _403, move _405, move _407];
        _399 = &_400;
        _398 = _399 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _396 = Arguments::<'_>::new_v1(move _397, move _398) -> [return: bb263, unwind: bb305];
    }

    bb263: {
        _395 = std::fmt::format(move _396) -> [return: bb264, unwind: bb305];
    }

    bb264: {
        drop(_409) -> [return: bb265, unwind: bb304];
    }

    bb265: {
        _394 = move _395;
        _392 = <iron::Response as Set>::set_mut::<String>(move _393, move _394) -> [return: bb266, unwind: bb306];
    }

    bb266: {
        _414 = &mut (_5.1: iron::Headers);
        _415 = ContentType::html() -> [return: bb267, unwind: bb306];
    }

    bb267: {
        _413 = Headers::set::<ContentType>(move _414, move _415) -> [return: bb268, unwind: bb306];
    }

    bb268: {
        _417 = &((*_1).7: std::option::Option<std::vec::Vec<std::string::String>>);
        _416 = Option::<Vec<String>>::is_some(move _417) -> [return: bb269, unwind: bb306];
    }

    bb269: {
        switchInt(move _416) -> [0: bb284, otherwise: bb270];
    }

    bb270: {
        _419 = &((*_2).3: iron::Headers);
        _418 = Headers::get::<AcceptEncoding>(move _419) -> [return: bb271, unwind: bb306];
    }

    bb271: {
        _420 = discriminant(_418);
        switchInt(move _420) -> [1: bb272, otherwise: bb284];
    }

    bb272: {
        _462 = deref_copy ((_418 as Some).0: &iron::headers::AcceptEncoding);
        _421 = &((*_462).0: std::vec::Vec<iron::headers::QualityItem<iron::headers::Encoding>>);
        _422 = <&Vec<QualityItem<Encoding>> as IntoIterator>::into_iter(_421) -> [return: bb273, unwind: bb306];
    }

    bb273: {
        _423 = move _422;
        goto -> bb274;
    }

    bb274: {
        _425 = &mut _423;
        _424 = <std::slice::Iter<'_, QualityItem<Encoding>> as Iterator>::next(_425) -> [return: bb275, unwind: bb306];
    }

    bb275: {
        _426 = discriminant(_424);
        switchInt(move _426) -> [0: bb284, 1: bb276, otherwise: bb8];
    }

    bb276: {
        _463 = deref_copy ((_424 as Some).0: &iron::headers::QualityItem<iron::headers::Encoding>);
        _427 = &((*_463).0: iron::headers::Encoding);
        _449 = const _;
        _428 = <Encoding as PartialEq>::eq(_427, _449) -> [return: bb277, unwind: bb306];
    }

    bb277: {
        switchInt(move _428) -> [0: bb278, otherwise: bb280];
    }

    bb278: {
        _448 = const _;
        _429 = <Encoding as PartialEq>::eq(_427, _448) -> [return: bb279, unwind: bb306];
    }

    bb279: {
        switchInt(move _429) -> [0: bb274, otherwise: bb280];
    }

    bb280: {
        _431 = &mut (_5.1: iron::Headers);
        _436 = SizeOf([iron::headers::Encoding; 1]);
        _437 = AlignOf([iron::headers::Encoding; 1]);
        _438 = alloc::alloc::exchange_malloc(move _436, move _437) -> [return: bb281, unwind: bb306];
    }

    bb281: {
        _439 = ShallowInitBox(move _438, [iron::headers::Encoding; 1]);
        _440 = <Encoding as Clone>::clone(_427) -> [return: bb282, unwind: bb358];
    }

    bb282: {
        _475 = (((_439.0: std::ptr::Unique<[iron::headers::Encoding; 1]>).0: std::ptr::NonNull<[iron::headers::Encoding; 1]>).0: *const [iron::headers::Encoding; 1]);
        _476 = _475 as *const () (PtrToPtr);
        _477 = _476 as usize (Transmute);
        _478 = AlignOf([iron::headers::Encoding; 1]);
        _479 = Sub(_478, const 1_usize);
        _480 = BitAnd(_477, _479);
        _481 = Eq(_480, const 0_usize);
        assert(_481, "misaligned pointer dereference: address must be a multiple of {} but is {}", _478, _477) -> [success: bb371, unwind unreachable];
    }

    bb283: {
        _432 = ContentEncoding(move _433);
        _430 = Headers::set::<ContentEncoding>(move _431, move _432) -> [return: bb389, unwind: bb306];
    }

    bb284: {
        _469 = const false;
        _441 = move _5;
        _0 = Result::<iron::Response, IronError>::Ok(move _441);
        drop(_380) -> [return: bb285, unwind: bb323];
    }

    bb285: {
        drop(_91) -> [return: bb286, unwind: bb335];
    }

    bb286: {
        drop(_45) -> [return: bb287, unwind: bb366];
    }

    bb287: {
        _465 = const false;
        _468 = const false;
        drop(_8) -> [return: bb288, unwind: bb351];
    }

    bb288: {
        drop(_7) -> [return: bb289, unwind: bb370];
    }

    bb289: {
        _469 = const false;
        goto -> bb303;
    }

    bb290: {
        drop(_91) -> [return: bb295, unwind: bb335];
    }

    bb291: {
        drop(_140) -> [return: bb292, unwind: bb330];
    }

    bb292: {
        drop(_118) -> [return: bb293, unwind: bb331];
    }

    bb293: {
        drop(_116) -> [return: bb294, unwind: bb362];
    }

    bb294: {
        _467 = const false;
        _464 = const false;
        goto -> bb295;
    }

    bb295: {
        drop(_45) -> [return: bb357, unwind: bb366];
    }

    bb296: {
        drop(_25) -> [return: bb297, unwind: bb349];
    }

    bb297: {
        drop(_20) -> [return: bb357, unwind: bb366];
    }

    bb298: {
        _465 = const false;
        goto -> bb299;
    }

    bb299: {
        _468 = const false;
        drop(_8) -> [return: bb300, unwind: bb351];
    }

    bb300: {
        drop(_7) -> [return: bb301, unwind: bb370];
    }

    bb301: {
        drop(_5) -> [return: bb302, unwind continue];
    }

    bb302: {
        _469 = const false;
        goto -> bb303;
    }

    bb303: {
        return;
    }

    bb304 (cleanup): {
        drop(_395) -> [return: bb306, unwind terminate(cleanup)];
    }

    bb305 (cleanup): {
        drop(_409) -> [return: bb306, unwind terminate(cleanup)];
    }

    bb306 (cleanup): {
        drop(_380) -> [return: bb323, unwind terminate(cleanup)];
    }

    bb307 (cleanup): {
        drop(_382) -> [return: bb323, unwind terminate(cleanup)];
    }

    bb308 (cleanup): {
        drop(_390) -> [return: bb323, unwind terminate(cleanup)];
    }

    bb309 (cleanup): {
        drop(_368) -> [return: bb310, unwind terminate(cleanup)];
    }

    bb310 (cleanup): {
        drop(_358) -> [return: bb313, unwind terminate(cleanup)];
    }

    bb311 (cleanup): {
        drop(_373) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb312 (cleanup): {
        drop(_368) -> [return: bb313, unwind terminate(cleanup)];
    }

    bb313 (cleanup): {
        drop(_342) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb314 (cleanup): {
        drop(_331) -> [return: bb315, unwind terminate(cleanup)];
    }

    bb315 (cleanup): {
        drop(_326) -> [return: bb316, unwind terminate(cleanup)];
    }

    bb316 (cleanup): {
        drop(_319) -> [return: bb317, unwind terminate(cleanup)];
    }

    bb317 (cleanup): {
        drop(_310) -> [return: bb360, unwind terminate(cleanup)];
    }

    bb318 (cleanup): {
        drop(_312) -> [return: bb360, unwind terminate(cleanup)];
    }

    bb319 (cleanup): {
        drop(_290) -> [return: bb323, unwind terminate(cleanup)];
    }

    bb320 (cleanup): {
        drop(_273) -> [return: bb322, unwind terminate(cleanup)];
    }

    bb321 (cleanup): {
        drop(_281) -> [return: bb322, unwind terminate(cleanup)];
    }

    bb322 (cleanup): {
        drop(_261) -> [return: bb323, unwind terminate(cleanup)];
    }

    bb323 (cleanup): {
        drop(_91) -> [return: bb335, unwind terminate(cleanup)];
    }

    bb324 (cleanup): {
        drop(_202) -> [return: bb326, unwind terminate(cleanup)];
    }

    bb325 (cleanup): {
        drop(_210) -> [return: bb326, unwind terminate(cleanup)];
    }

    bb326 (cleanup): {
        drop(_197) -> [return: bb330, unwind terminate(cleanup)];
    }

    bb327 (cleanup): {
        drop(_169) -> [return: bb328, unwind terminate(cleanup)];
    }

    bb328 (cleanup): {
        drop(_140) -> [return: bb330, unwind terminate(cleanup)];
    }

    bb329 (cleanup): {
        drop(_132) -> [return: bb330, unwind terminate(cleanup)];
    }

    bb330 (cleanup): {
        drop(_118) -> [return: bb331, unwind terminate(cleanup)];
    }

    bb331 (cleanup): {
        drop(_116) -> [return: bb362, unwind terminate(cleanup)];
    }

    bb332 (cleanup): {
        drop(_105) -> [return: bb333, unwind terminate(cleanup)];
    }

    bb333 (cleanup): {
        drop(_104) -> [return: bb362, unwind terminate(cleanup)];
    }

    bb334 (cleanup): {
        _473 = discriminant(_93);
        switchInt(move _473) -> [1: bb363, otherwise: bb335];
    }

    bb335 (cleanup): {
        drop(_45) -> [return: bb366, unwind terminate(cleanup)];
    }

    bb336 (cleanup): {
        drop(_75) -> [return: bb337, unwind terminate(cleanup)];
    }

    bb337 (cleanup): {
        drop(_77) -> [return: bb338, unwind terminate(cleanup)];
    }

    bb338 (cleanup): {
        drop(_67) -> [return: bb339, unwind terminate(cleanup)];
    }

    bb339 (cleanup): {
        drop(_59) -> [return: bb344, unwind terminate(cleanup)];
    }

    bb340 (cleanup): {
        drop(_72) -> [return: bb341, unwind terminate(cleanup)];
    }

    bb341 (cleanup): {
        drop(_75) -> [return: bb342, unwind terminate(cleanup)];
    }

    bb342 (cleanup): {
        drop(_77) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb343 (cleanup): {
        drop(_67) -> [return: bb344, unwind terminate(cleanup)];
    }

    bb344 (cleanup): {
        drop(_48) -> [return: bb345, unwind terminate(cleanup)];
    }

    bb345 (cleanup): {
        drop(_47) -> [return: bb366, unwind terminate(cleanup)];
    }

    bb346 (cleanup): {
        drop(_34) -> [return: bb348, unwind terminate(cleanup)];
    }

    bb347 (cleanup): {
        drop(_34) -> [return: bb348, unwind terminate(cleanup)];
    }

    bb348 (cleanup): {
        drop(_25) -> [return: bb349, unwind terminate(cleanup)];
    }

    bb349 (cleanup): {
        drop(_20) -> [return: bb366, unwind terminate(cleanup)];
    }

    bb350 (cleanup): {
        drop(_8) -> [return: bb351, unwind terminate(cleanup)];
    }

    bb351 (cleanup): {
        drop(_7) -> [return: bb370, unwind terminate(cleanup)];
    }

    bb352 (cleanup): {
        resume;
    }

    bb353: {
        _464 = const false;
        goto -> bb164;
    }

    bb354: {
        switchInt(_464) -> [0: bb353, otherwise: bb355];
    }

    bb355: {
        drop(((_93 as Some).0: std::string::String)) -> [return: bb353, unwind: bb335];
    }

    bb356: {
        drop(_17) -> [return: bb298, unwind: bb368];
    }

    bb357: {
        switchInt(_465) -> [0: bb298, otherwise: bb356];
    }

    bb358 (cleanup): {
        _471 = &mut _439;
        _472 = <std::boxed::Box<[Encoding; 1]> as Drop>::drop(move _471) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb359 (cleanup): {
        drop(_294) -> [return: bb319, unwind terminate(cleanup)];
    }

    bb360 (cleanup): {
        switchInt(_466) -> [0: bb319, otherwise: bb359];
    }

    bb361 (cleanup): {
        drop(_95) -> [return: bb334, unwind terminate(cleanup)];
    }

    bb362 (cleanup): {
        switchInt(_467) -> [0: bb334, otherwise: bb361];
    }

    bb363 (cleanup): {
        switchInt(_464) -> [0: bb335, otherwise: bb364];
    }

    bb364 (cleanup): {
        drop(((_93 as Some).0: std::string::String)) -> [return: bb335, unwind terminate(cleanup)];
    }

    bb365 (cleanup): {
        drop(_17) -> [return: bb368, unwind terminate(cleanup)];
    }

    bb366 (cleanup): {
        switchInt(_465) -> [0: bb368, otherwise: bb365];
    }

    bb367 (cleanup): {
        drop(_9) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb368 (cleanup): {
        switchInt(_468) -> [0: bb350, otherwise: bb367];
    }

    bb369 (cleanup): {
        drop(_5) -> [return: bb352, unwind terminate(cleanup)];
    }

    bb370 (cleanup): {
        switchInt(_469) -> [0: bb352, otherwise: bb369];
    }

    bb371: {
        (*_475) = [move _440];
        _435 = move _439;
        _434 = move _435 as std::boxed::Box<[iron::headers::Encoding]> (PointerCoercion(Unsize));
        _433 = slice::<impl [Encoding]>::into_vec::<std::alloc::Global>(move _434) -> [return: bb283, unwind: bb306];
    }

    bb372: {
        (*_474) = [const _, _175];
        _170 = move _174 as std::boxed::Box<[&str]> (PointerCoercion(Unsize));
        _169 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _170) -> [return: bb118, unwind: bb328];
    }

    bb373: {
        goto -> bb299;
    }

    bb374: {
        goto -> bb297;
    }

    bb375: {
        goto -> bb64;
    }

    bb376: {
        goto -> bb38;
    }

    bb377: {
        goto -> bb38;
    }

    bb378: {
        goto -> bb93;
    }

    bb379: {
        goto -> bb164;
    }

    bb380: {
        goto -> bb174;
    }

    bb381: {
        goto -> bb183;
    }

    bb382: {
        goto -> bb209;
    }

    bb383: {
        goto -> bb209;
    }

    bb384: {
        goto -> bb213;
    }

    bb385: {
        goto -> bb213;
    }

    bb386: {
        goto -> bb220;
    }

    bb387: {
        goto -> bb227;
    }

    bb388: {
        goto -> bb256;
    }

    bb389: {
        goto -> bb274;
    }

    bb390 (cleanup): {
        goto -> bb306;
    }
}

alloc15 (static: SORT_FIELDS, size: 0, align: 1) {}

promoted[0] in <impl at src/main.rs:431:1: 431:17>::list_directory: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "order";
        _0 = &_1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:431:1: 431:17>::list_directory: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "sort";
        _0 = &_1;
        return;
    }
}

promoted[2] in <impl at src/main.rs:431:1: 431:17>::list_directory: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in <impl at src/main.rs:431:1: 431:17>::list_directory: &[&str; 6] = {
    let mut _0: &[&str; 6];
    let mut _1: [&str; 6];

    bb0: {
        _1 = [const "\n<tr>\n  <td><a ", const " href=\"/", const "\">", const "</a></td>\n  <td style=\"color:#888;\">[", const "]</td>\n  <td><bold>", const "</bold></td>\n</tr>\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in <impl at src/main.rs:431:1: 431:17>::list_directory: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "/"];
        _0 = &_1;
        return;
    }
}

promoted[5] in <impl at src/main.rs:431:1: 431:17>::list_directory: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "index.htm";
        _2 = &(*_3);
        _1 = [const "index.html", move _2];
        _0 = &_1;
        return;
    }
}

promoted[6] in <impl at src/main.rs:431:1: 431:17>::list_directory: &Encoding = {
    let mut _0: &iron::headers::Encoding;
    let mut _1: iron::headers::Encoding;

    bb0: {
        _1 = Gzip;
        _0 = &_1;
        return;
    }
}

promoted[7] in <impl at src/main.rs:431:1: 431:17>::list_directory: &Encoding = {
    let mut _0: &iron::headers::Encoding;
    let mut _1: iron::headers::Encoding;

    bb0: {
        _1 = Deflate;
        _0 = &_1;
        return;
    }
}

promoted[8] in <impl at src/main.rs:431:1: 431:17>::list_directory: &[&str; 5] = {
    let mut _0: &[&str; 5];
    let mut _1: [&str; 5];

    bb0: {
        _1 = [const "<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>\n  <style> a { text-decoration:none; } </style>\n</head>\n<body>\n  ", const "\n  <div>", const "</div>\n  <hr />\n  <table>\n    ", const "\n    ", const "\n  </table>\n</body>\n</html>\n"];
        _0 = &_1;
        return;
    }
}

promoted[9] in <impl at src/main.rs:431:1: 431:17>::list_directory: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "\n<form style=\"margin-top:1em; margin-bottom:1em;\" action=\"/", const "\" method=\"POST\" enctype=\"multipart/form-data\">\n  <input type=\"file\" name=\"files\" accept=\"*\" multiple />\n  <input type=\"submit\" value=\"Upload\" />\n</form>\n"];
        _0 = &_1;
        return;
    }
}

promoted[10] in <impl at src/main.rs:431:1: 431:17>::list_directory: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "\n<tr>\n  <td><a href=\"/", const "\"><strong>[Up]</strong></a></td>\n  <td></td>\n  <td></td>\n</tr>\n"];
        _0 = &_1;
        return;
    }
}

promoted[11] in <impl at src/main.rs:431:1: 431:17>::list_directory: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[12] in <impl at src/main.rs:431:1: 431:17>::list_directory: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[13] in <impl at src/main.rs:431:1: 431:17>::list_directory: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[14] in <impl at src/main.rs:431:1: 431:17>::list_directory: &[&str; 7] = {
    let mut _0: &[&str; 7];
    let mut _1: [&str; 7];

    bb0: {
        _1 = [const "\n<tr>\n  <th><a href=\"/", const "?sort=name&order=", const "\">Name</a></th>\n  <th><a href=\"/", const "?sort=modified&order=", const "\">Last modified</a></th>\n  <th><a href=\"/", const "?sort=size&order=", const "\">Size</a></th>\n</tr>\n<tr><td style=\"border-top:1px dashed #BBB;\" colspan=\"5\"></td></tr>\n"];
        _0 = &_1;
        return;
    }
}

promoted[15] in <impl at src/main.rs:431:1: 431:17>::list_directory: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unknown sort field: "];
        _0 = &_1;
        return;
    }
}

promoted[16] in <impl at src/main.rs:431:1: 431:17>::list_directory: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unknown sort order: "];
        _0 = &_1;
        return;
    }
}

promoted[17] in <impl at src/main.rs:431:1: 431:17>::list_directory: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[18] in <impl at src/main.rs:431:1: 431:17>::list_directory: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "<a href=\"/", const "/\"><strong>", const "</strong></a>"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:431:1: 431:17>::list_directory::{closure#0}(_1: {closure@src/main.rs:538:46: 538:48}) -> String {
    let mut _0: std::string::String;
    let _2: &str;

    bb0: {
        _2 = const _;
        _0 = <str as ToOwned>::to_owned(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:431:1: 431:17>::list_directory::{closure#1}(_1: &mut {closure@src/main.rs:550:31: 550:34}, _2: &&str) -> bool {
    debug s => _2;
    debug field => (*((*_1).0: &std::string::String));
    let mut _0: bool;
    let mut _3: &&str;
    let _4: &str;
    let mut _5: &std::string::String;

    bb0: {
        _5 = deref_copy ((*_1).0: &std::string::String);
        _4 = String::as_str(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _0 = <&str as PartialEq>::eq(_2, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn <impl at src/main.rs:431:1: 431:17>::list_directory::{closure#2}(_1: &mut {closure@src/main.rs:560:31: 560:34}, _2: &&str) -> bool {
    debug s => _2;
    debug order => (*((*_1).0: &std::string::String));
    let mut _0: bool;
    let mut _3: &std::string::String;

    bb0: {
        _3 = deref_copy ((*_1).0: &std::string::String);
        _0 = <&str as PartialEq<String>>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:431:1: 431:17>::list_directory::{closure#3}(_1: &mut {closure@src/main.rs:570:33: 570:39}, _2: &MainHandler::list_directory::Entry, _3: &MainHandler::list_directory::Entry) -> std::cmp::Ordering {
    debug a => _2;
    debug b => _3;
    debug field => (*((*_1).0: &std::string::String));
    debug reverse => (*((*_1).1: &bool));
    let mut _0: std::cmp::Ordering;
    let _4: std::cmp::Ordering;
    let mut _5: &str;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: &std::string::String;
    let _10: &std::string::String;
    let _11: std::time::SystemTime;
    let mut _12: std::result::Result<std::time::SystemTime, std::io::Error>;
    let mut _13: &std::fs::Metadata;
    let mut _15: std::result::Result<std::time::SystemTime, std::io::Error>;
    let mut _16: &std::fs::Metadata;
    let mut _17: &std::time::SystemTime;
    let _18: &std::time::SystemTime;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: &std::fs::Metadata;
    let mut _22: bool;
    let mut _23: &std::fs::Metadata;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: &std::fs::Metadata;
    let mut _27: bool;
    let mut _28: &std::fs::Metadata;
    let mut _29: &u64;
    let _30: u64;
    let mut _31: &std::fs::Metadata;
    let _32: &u64;
    let _33: u64;
    let mut _34: &std::fs::Metadata;
    let mut _35: bool;
    let mut _36: &std::fs::Metadata;
    let mut _37: !;
    let mut _38: bool;
    let mut _39: std::cmp::Ordering;
    let mut _40: &std::string::String;
    let mut _41: &bool;
    scope 1 {
        debug rv => _4;
    }
    scope 2 {
        debug a => _11;
        let _14: std::time::SystemTime;
        scope 3 {
            debug b => _14;
        }
    }

    bb0: {
        _40 = deref_copy ((*_1).0: &std::string::String);
        _5 = String::as_str(_40) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = <str as PartialEq>::eq(_5, const "name") -> [return: bb10, unwind continue];
    }

    bb2: {
        _9 = &((*_2).0: std::string::String);
        _10 = &((*_3).0: std::string::String);
        _4 = <String as Ord>::cmp(move _9, _10) -> [return: bb27, unwind continue];
    }

    bb3: {
        _7 = <str as PartialEq>::eq(_5, const "modified") -> [return: bb9, unwind continue];
    }

    bb4: {
        _13 = &((*_2).1: std::fs::Metadata);
        _12 = Metadata::modified(move _13) -> [return: bb11, unwind continue];
    }

    bb5: {
        _6 = <str as PartialEq>::eq(_5, const "size") -> [return: bb8, unwind continue];
    }

    bb6: {
        _21 = &((*_2).1: std::fs::Metadata);
        _20 = Metadata::is_dir(move _21) -> [return: bb15, unwind continue];
    }

    bb7: {
        _37 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb8: {
        switchInt(move _6) -> [0: bb7, otherwise: bb6];
    }

    bb9: {
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb10: {
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb11: {
        _11 = Result::<SystemTime, std::io::Error>::unwrap(move _12) -> [return: bb12, unwind continue];
    }

    bb12: {
        _16 = &((*_3).1: std::fs::Metadata);
        _15 = Metadata::modified(move _16) -> [return: bb13, unwind continue];
    }

    bb13: {
        _14 = Result::<SystemTime, std::io::Error>::unwrap(move _15) -> [return: bb14, unwind continue];
    }

    bb14: {
        _17 = &_11;
        _18 = &_14;
        _4 = <SystemTime as Ord>::cmp(move _17, _18) -> [return: bb27, unwind continue];
    }

    bb15: {
        _23 = &((*_3).1: std::fs::Metadata);
        _22 = Metadata::is_dir(move _23) -> [return: bb16, unwind continue];
    }

    bb16: {
        _19 = Eq(move _20, move _22);
        switchInt(move _19) -> [0: bb17, otherwise: bb20];
    }

    bb17: {
        _26 = &((*_2).1: std::fs::Metadata);
        _25 = Metadata::is_file(move _26) -> [return: bb18, unwind continue];
    }

    bb18: {
        _28 = &((*_3).1: std::fs::Metadata);
        _27 = Metadata::is_file(move _28) -> [return: bb19, unwind continue];
    }

    bb19: {
        _24 = Eq(move _25, move _27);
        switchInt(move _24) -> [0: bb23, otherwise: bb20];
    }

    bb20: {
        _31 = &((*_2).1: std::fs::Metadata);
        _30 = Metadata::len(move _31) -> [return: bb21, unwind continue];
    }

    bb21: {
        _29 = &_30;
        _34 = &((*_3).1: std::fs::Metadata);
        _33 = Metadata::len(move _34) -> [return: bb22, unwind continue];
    }

    bb22: {
        _32 = &_33;
        _4 = <u64 as Ord>::cmp(move _29, _32) -> [return: bb27, unwind continue];
    }

    bb23: {
        _36 = &((*_2).1: std::fs::Metadata);
        _35 = Metadata::is_dir(move _36) -> [return: bb24, unwind continue];
    }

    bb24: {
        switchInt(move _35) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _4 = Less;
        goto -> bb27;
    }

    bb26: {
        _4 = Greater;
        goto -> bb27;
    }

    bb27: {
        _41 = deref_copy ((*_1).1: &bool);
        _38 = (*_41);
        switchInt(move _38) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _39 = _4;
        _0 = std::cmp::Ordering::reverse(move _39) -> [return: bb30, unwind continue];
    }

    bb29: {
        _0 = _4;
        goto -> bb30;
    }

    bb30: {
        return;
    }
}

fn <impl at src/main.rs:431:1: 431:17>::send_file(_1: &MainHandler, _2: &iron::Request<'_, '_>, _3: P) -> Result<iron::Response, IronError> {
    debug self => _1;
    debug req => _2;
    debug path => _3;
    let mut _0: std::result::Result<iron::Response, iron::IronError>;
    let _4: &std::path::Path;
    let mut _5: &P;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, iron::IronError>, std::fs::Metadata>;
    let mut _8: std::result::Result<std::fs::Metadata, iron::IronError>;
    let mut _9: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _10: isize;
    let _14: &std::fs::Metadata;
    let mut _16: i64;
    let mut _17: &filetime::FileTime;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 3];
    let _24: [core::fmt::rt::Argument<'_>; 3];
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &u64;
    let _27: u64;
    let mut _28: &std::fs::Metadata;
    let mut _29: core::fmt::rt::Argument<'_>;
    let _30: &i64;
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &i32;
    let mut _34: iron::status::Status;
    let mut _35: bool;
    let _36: ();
    let mut _37: &mut iron::Headers;
    let mut _38: iron::headers::AcceptRanges;
    let mut _39: std::vec::Vec<iron::headers::RangeUnit>;
    let mut _40: std::boxed::Box<[iron::headers::RangeUnit]>;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: *mut u8;
    let mut _44: std::boxed::Box<[iron::headers::RangeUnit; 1]>;
    let mut _45: iron::headers::RangeUnit;
    let mut _46: isize;
    let mut _48: std::option::Option<iron::headers::ContentType>;
    let mut _49: std::option::Option<&iron::headers::ContentType>;
    let mut _50: &iron::Headers;
    let _51: ();
    let mut _52: &mut iron::Headers;
    let _53: ();
    let mut _54: &mut iron::Headers;
    let mut _55: iron::headers::ContentLength;
    let mut _56: u64;
    let mut _57: &std::fs::Metadata;
    let _59: &mut iron::Response;
    let mut _60: &mut iron::Response;
    let mut _61: bool;
    let mut _63: &iron::Headers;
    let mut _64: bool;
    let mut _65: &std::option::Option<&iron::headers::Range>;
    let mut _66: std::option::Option<&iron::headers::IfMatch>;
    let mut _67: &iron::Headers;
    let mut _68: isize;
    let mut _69: isize;
    let mut _71: bool;
    let mut _72: &std::option::Option<usize>;
    let _73: std::option::Option<usize>;
    let mut _74: &mut std::slice::Iter<'_, iron::headers::EntityTag>;
    let mut _75: std::slice::Iter<'_, iron::headers::EntityTag>;
    let _76: &[iron::headers::EntityTag];
    let mut _77: {closure@src/main.rs:803:43: 803:49};
    let mut _78: &iron::headers::EntityTag;
    let mut _79: iron::IronError;
    let mut _80: util::StringError;
    let mut _81: std::string::String;
    let _82: &str;
    let mut _83: iron::status::Status;
    let mut _85: std::option::Option<&iron::headers::IfRange>;
    let mut _86: &iron::Headers;
    let mut _87: isize;
    let mut _88: isize;
    let mut _90: &iron::headers::EntityTag;
    let mut _92: &time::Tm;
    let _93: time::Tm;
    let mut _94: time::Timespec;
    let mut _95: bool;
    let mut _96: std::option::Option<&iron::headers::Range>;
    let mut _97: isize;
    let mut _98: isize;
    let mut _100: std::option::Option<&iron::headers::ByteRangeSpec>;
    let _101: &[iron::headers::ByteRangeSpec];
    let mut _102: isize;
    let mut _106: (u64, u64);
    let mut _107: isize;
    let mut _110: bool;
    let mut _111: u64;
    let mut _112: u64;
    let mut _113: &std::fs::Metadata;
    let mut _114: bool;
    let mut _115: u64;
    let mut _116: u64;
    let mut _117: iron::IronError;
    let mut _118: util::StringError;
    let mut _120: std::fmt::Arguments<'_>;
    let mut _121: &[&str];
    let mut _122: &[core::fmt::rt::Argument<'_>];
    let _123: &[core::fmt::rt::Argument<'_>; 2];
    let _124: [core::fmt::rt::Argument<'_>; 2];
    let mut _125: core::fmt::rt::Argument<'_>;
    let _126: &u64;
    let mut _127: core::fmt::rt::Argument<'_>;
    let _128: &u64;
    let mut _129: iron::status::Status;
    let mut _130: bool;
    let mut _131: u64;
    let mut _132: u64;
    let mut _133: &std::fs::Metadata;
    let mut _134: u64;
    let mut _135: &std::fs::Metadata;
    let mut _136: (u64, bool);
    let mut _137: u64;
    let mut _138: u64;
    let mut _139: u64;
    let mut _140: u64;
    let mut _141: u64;
    let mut _142: (u64, bool);
    let mut _143: (u64, bool);
    let mut _145: bool;
    let mut _146: u64;
    let mut _147: u64;
    let mut _148: &std::fs::Metadata;
    let mut _149: iron::IronError;
    let mut _150: util::StringError;
    let mut _152: std::fmt::Arguments<'_>;
    let mut _153: &[&str];
    let mut _154: &[core::fmt::rt::Argument<'_>];
    let _155: &[core::fmt::rt::Argument<'_>; 2];
    let _156: [core::fmt::rt::Argument<'_>; 2];
    let mut _157: core::fmt::rt::Argument<'_>;
    let _158: &u64;
    let mut _159: core::fmt::rt::Argument<'_>;
    let _160: &u64;
    let _161: u64;
    let mut _162: &std::fs::Metadata;
    let mut _163: iron::status::Status;
    let mut _164: u64;
    let mut _165: u64;
    let mut _166: u64;
    let mut _167: &std::fs::Metadata;
    let mut _168: u64;
    let mut _169: (u64, bool);
    let mut _171: bool;
    let mut _172: u64;
    let mut _173: u64;
    let mut _174: &std::fs::Metadata;
    let mut _175: u64;
    let mut _176: &std::fs::Metadata;
    let mut _177: u64;
    let mut _178: u64;
    let mut _179: &std::fs::Metadata;
    let mut _180: u64;
    let mut _181: (u64, bool);
    let mut _182: u64;
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, iron::IronError>, std::fs::File>;
    let mut _185: std::result::Result<std::fs::File, iron::IronError>;
    let mut _186: std::result::Result<std::fs::File, std::io::Error>;
    let mut _187: isize;
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, iron::IronError>, u64>;
    let mut _191: std::result::Result<u64, iron::IronError>;
    let mut _192: std::result::Result<u64, std::io::Error>;
    let mut _193: &mut std::fs::File;
    let mut _194: std::io::SeekFrom;
    let mut _195: isize;
    let mut _199: std::fs::File;
    let _200: ();
    let mut _201: &mut iron::Headers;
    let mut _202: iron::headers::ContentLength;
    let _203: ();
    let mut _204: &mut iron::Headers;
    let mut _205: iron::headers::ContentRange;
    let mut _206: iron::headers::ContentRangeSpec;
    let mut _207: std::option::Option<(u64, u64)>;
    let mut _208: (u64, u64);
    let mut _209: u64;
    let mut _210: u64;
    let mut _211: (u64, bool);
    let mut _212: (u64, bool);
    let mut _213: std::option::Option<u64>;
    let mut _214: u64;
    let mut _215: &std::fs::Metadata;
    let mut _216: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>;
    let mut _217: std::boxed::Box<dyn iron::response::WriteBody>;
    let mut _218: std::boxed::Box<std::boxed::Box<dyn std::io::Read + std::marker::Send>>;
    let mut _219: std::boxed::Box<dyn std::io::Read + std::marker::Send>;
    let mut _220: std::boxed::Box<std::io::Take<std::fs::File>>;
    let mut _221: std::io::Take<std::fs::File>;
    let _222: &mut iron::Response;
    let mut _223: &mut iron::Response;
    let mut _224: iron::status::Status;
    let mut _225: iron::IronError;
    let mut _226: util::StringError;
    let mut _227: std::string::String;
    let _228: &str;
    let mut _229: iron::status::Status;
    let mut _230: iron::IronError;
    let mut _231: util::StringError;
    let mut _232: std::string::String;
    let _233: &str;
    let mut _234: iron::status::Status;
    let _235: ();
    let mut _236: &mut iron::Headers;
    let mut _237: iron::headers::ContentLength;
    let mut _238: u64;
    let mut _239: &std::fs::Metadata;
    let mut _241: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, iron::IronError>, std::fs::File>;
    let mut _242: std::result::Result<std::fs::File, iron::IronError>;
    let mut _243: std::result::Result<std::fs::File, std::io::Error>;
    let mut _244: isize;
    let mut _247: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>;
    let mut _248: std::boxed::Box<dyn iron::response::WriteBody>;
    let mut _249: std::boxed::Box<std::fs::File>;
    let mut _250: std::fs::File;
    let _251: ();
    let mut _252: &mut iron::Headers;
    let mut _253: iron::headers::ContentLength;
    let mut _254: u64;
    let mut _255: &std::fs::Metadata;
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, iron::IronError>, std::fs::File>;
    let mut _258: std::result::Result<std::fs::File, iron::IronError>;
    let mut _259: std::result::Result<std::fs::File, std::io::Error>;
    let mut _260: isize;
    let mut _263: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>;
    let mut _264: std::boxed::Box<dyn iron::response::WriteBody>;
    let mut _265: std::boxed::Box<std::fs::File>;
    let mut _266: std::fs::File;
    let mut _267: iron::Response;
    let mut _268: iron::status::Status;
    let mut _269: isize;
    let mut _272: bool;
    let mut _273: &std::option::Option<iron::status::Status>;
    let mut _274: bool;
    let mut _275: &mut std::slice::Iter<'_, std::string::String>;
    let mut _276: std::slice::Iter<'_, std::string::String>;
    let _277: &[std::string::String];
    let mut _278: {closure@src/main.rs:910:36: 910:41};
    let mut _279: &std::borrow::Cow<'_, str>;
    let mut _280: std::option::Option<&iron::headers::AcceptEncoding>;
    let mut _281: &iron::Headers;
    let mut _282: isize;
    let mut _284: std::slice::Iter<'_, iron::headers::QualityItem<iron::headers::Encoding>>;
    let mut _286: std::option::Option<&iron::headers::QualityItem<iron::headers::Encoding>>;
    let mut _287: &mut std::slice::Iter<'_, iron::headers::QualityItem<iron::headers::Encoding>>;
    let mut _288: isize;
    let mut _290: bool;
    let mut _291: bool;
    let _292: ();
    let mut _293: &mut iron::Headers;
    let mut _294: iron::headers::ContentEncoding;
    let mut _295: std::vec::Vec<iron::headers::Encoding>;
    let mut _296: std::boxed::Box<[iron::headers::Encoding]>;
    let mut _297: std::boxed::Box<[iron::headers::Encoding; 1]>;
    let mut _298: usize;
    let mut _299: usize;
    let mut _300: *mut u8;
    let mut _301: std::boxed::Box<[iron::headers::Encoding; 1]>;
    let mut _302: iron::headers::Encoding;
    let mut _303: bool;
    let mut _304: std::option::Option<&iron::headers::IfModifiedSince>;
    let mut _305: &iron::Headers;
    let mut _306: isize;
    let mut _308: bool;
    let mut _309: &time::Timespec;
    let mut _310: &time::Timespec;
    let _311: time::Timespec;
    let mut _312: iron::Response;
    let mut _313: iron::status::Status;
    let mut _315: std::boxed::Box<[iron::headers::CacheDirective]>;
    let mut _316: usize;
    let mut _317: usize;
    let mut _318: *mut u8;
    let mut _319: std::boxed::Box<[iron::headers::CacheDirective; 2]>;
    let mut _320: iron::headers::CacheDirective;
    let mut _321: iron::headers::CacheDirective;
    let mut _322: u32;
    let mut _323: &u32;
    let _324: ();
    let mut _325: &mut iron::Headers;
    let mut _326: iron::headers::CacheControl;
    let _327: ();
    let mut _328: &mut iron::Headers;
    let mut _329: iron::headers::LastModified;
    let mut _330: iron::headers::HttpDate;
    let mut _331: time::Tm;
    let mut _332: time::Timespec;
    let _333: ();
    let mut _334: &mut iron::Headers;
    let mut _335: iron::headers::ETag;
    let mut _336: iron::headers::EntityTag;
    let mut _337: iron::Response;
    let mut _344: &iron::headers::IfMatch;
    let mut _345: &iron::headers::IfMatch;
    let mut _346: &iron::headers::IfRange;
    let mut _347: &iron::headers::IfRange;
    let mut _348: &iron::headers::IfRange;
    let mut _349: &iron::headers::Range;
    let mut _350: &iron::headers::Range;
    let mut _351: &iron::headers::AcceptEncoding;
    let mut _352: &iron::headers::QualityItem<iron::headers::Encoding>;
    let mut _353: &iron::headers::IfModifiedSince;
    let mut _354: bool;
    let mut _355: bool;
    let mut _356: bool;
    let mut _357: bool;
    let mut _358: bool;
    let mut _359: &mut std::boxed::Box<[iron::headers::Encoding; 1]>;
    let mut _360: ();
    let mut _361: *const [iron::headers::RangeUnit; 1];
    let mut _362: *const [iron::headers::Encoding; 1];
    let mut _363: *const [iron::headers::CacheDirective; 2];
    scope 1 {
        debug path => _4;
        let _6: std::fs::Metadata;
        let _11: std::result::Result<std::convert::Infallible, iron::IronError>;
        let _12: std::fs::Metadata;
        scope 2 {
            debug metadata => _6;
            let _13: filetime::FileTime;
            scope 7 {
                debug time => _13;
                let _15: time::Timespec;
                scope 8 {
                    debug modified => _15;
                    let _18: iron::headers::EntityTag;
                    let _19: std::string::String;
                    let mut _343: &[&str; 3];
                    scope 9 {
                        debug etag => _18;
                        let mut _33: iron::Response;
                        scope 11 {
                            debug resp => _33;
                            let _47: iron::headers::ContentType;
                            let _58: mime_guess::Mime;
                            let _314: std::vec::Vec<iron::headers::CacheDirective>;
                            let mut _364: *const ();
                            let mut _365: usize;
                            let mut _366: usize;
                            let mut _367: usize;
                            let mut _368: usize;
                            let mut _369: bool;
                            let mut _376: *const ();
                            let mut _377: usize;
                            let mut _378: usize;
                            let mut _379: usize;
                            let mut _380: usize;
                            let mut _381: bool;
                            scope 12 {
                            }
                            scope 13 {
                                debug content_type => _47;
                            }
                            scope 14 {
                                debug mime => _58;
                                let mut _62: std::option::Option<&iron::headers::Range>;
                                let _256: std::fs::File;
                                let _261: std::result::Result<std::convert::Infallible, iron::IronError>;
                                let _262: std::fs::File;
                                scope 15 {
                                    debug range => _62;
                                    let _84: bool;
                                    let _89: &iron::headers::EntityTag;
                                    let _91: &time::Tm;
                                    scope 16 {
                                        debug items => _70;
                                        let _70: &std::vec::Vec<iron::headers::EntityTag>;
                                    }
                                    scope 17 {
                                        debug matched_ifrange => _84;
                                        let _99: &std::vec::Vec<iron::headers::ByteRangeSpec>;
                                        let _240: std::fs::File;
                                        let _245: std::result::Result<std::convert::Infallible, iron::IronError>;
                                        let _246: std::fs::File;
                                        scope 20 {
                                            debug ranges => _99;
                                            scope 21 {
                                                debug range => _103;
                                                let _103: &iron::headers::ByteRangeSpec;
                                                let _104: u64;
                                                let _105: u64;
                                                let _108: u64;
                                                let mut _109: u64;
                                                let _144: u64;
                                                let mut _170: u64;
                                                scope 22 {
                                                    debug offset => _104;
                                                    debug length => _105;
                                                    let mut _183: std::fs::File;
                                                    let _188: std::result::Result<std::convert::Infallible, iron::IronError>;
                                                    let _189: std::fs::File;
                                                    scope 28 {
                                                        debug file => _183;
                                                        let _196: std::result::Result<std::convert::Infallible, iron::IronError>;
                                                        let _197: u64;
                                                        let _198: std::io::Take<std::fs::File>;
                                                        scope 33 {
                                                            debug residual => _196;
                                                            scope 34 {
                                                            }
                                                        }
                                                        scope 35 {
                                                            debug val => _197;
                                                            scope 36 {
                                                            }
                                                        }
                                                        scope 37 {
                                                            debug take => _198;
                                                        }
                                                    }
                                                    scope 29 {
                                                        debug residual => _188;
                                                        scope 30 {
                                                        }
                                                    }
                                                    scope 31 {
                                                        debug val => _189;
                                                        scope 32 {
                                                        }
                                                    }
                                                }
                                                scope 23 {
                                                    debug x => _108;
                                                    debug y => _109;
                                                    let _119: std::string::String;
                                                    let mut _342: &[&str; 3];
                                                    scope 24 {
                                                        debug res => _119;
                                                    }
                                                }
                                                scope 25 {
                                                    debug x => _144;
                                                    let _151: std::string::String;
                                                    let mut _341: &[&str; 3];
                                                    scope 26 {
                                                        debug res => _151;
                                                    }
                                                }
                                                scope 27 {
                                                    debug x => _170;
                                                }
                                            }
                                        }
                                        scope 38 {
                                            debug file => _240;
                                        }
                                        scope 39 {
                                            debug residual => _245;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _246;
                                            scope 42 {
                                            }
                                        }
                                    }
                                    scope 18 {
                                        debug etag_ifrange => _89;
                                    }
                                    scope 19 {
                                        debug date_ifrange => _91;
                                    }
                                }
                                scope 43 {
                                    debug file => _256;
                                }
                                scope 44 {
                                    debug residual => _261;
                                    scope 45 {
                                    }
                                }
                                scope 46 {
                                    debug val => _262;
                                    scope 47 {
                                    }
                                }
                            }
                            scope 48 {
                                debug exts => _270;
                                let _270: &std::vec::Vec<std::string::String>;
                                let _271: std::borrow::Cow<'_, str>;
                                scope 49 {
                                    debug path_str => _271;
                                    let mut _340: &std::option::Option<iron::status::Status>;
                                    scope 50 {
                                        debug encodings => _283;
                                        let _283: &std::vec::Vec<iron::headers::QualityItem<iron::headers::Encoding>>;
                                        let mut _285: std::slice::Iter<'_, iron::headers::QualityItem<iron::headers::Encoding>>;
                                        scope 51 {
                                            debug iter => _285;
                                            let _289: &iron::headers::Encoding;
                                            scope 52 {
                                                debug item => _289;
                                                let mut _338: &iron::headers::Encoding;
                                                let mut _339: &iron::headers::Encoding;
                                                let mut _370: *const ();
                                                let mut _371: usize;
                                                let mut _372: usize;
                                                let mut _373: usize;
                                                let mut _374: usize;
                                                let mut _375: bool;
                                                scope 53 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 54 {
                                debug if_modified_since => _307;
                                let _307: &time::Tm;
                            }
                            scope 55 {
                                debug cache => _314;
                            }
                            scope 56 {
                            }
                        }
                    }
                    scope 10 {
                        debug res => _19;
                    }
                }
            }
        }
        scope 3 {
            debug residual => _11;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _12;
            scope 6 {
            }
        }
    }

    bb0: {
        _354 = const false;
        _358 = const false;
        _357 = const false;
        _356 = const false;
        _355 = const false;
        _5 = &_3;
        _4 = <P as AsRef<Path>>::as_ref(move _5) -> [return: bb1, unwind: bb199];
    }

    bb1: {
        _9 = std::fs::metadata::<&Path>(_4) -> [return: bb2, unwind: bb199];
    }

    bb2: {
        _8 = Result::<Metadata, std::io::Error>::map_err::<IronError, fn(std::io::Error) -> IronError {error_io2iron}>(move _9, error_io2iron) -> [return: bb3, unwind: bb199];
    }

    bb3: {
        _7 = <Result<Metadata, IronError> as Try>::branch(move _8) -> [return: bb4, unwind: bb199];
    }

    bb4: {
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _12 = move ((_7 as Continue).0: std::fs::Metadata);
        _6 = move _12;
        _14 = &_6;
        _13 = FileTime::from_last_modification_time(_14) -> [return: bb8, unwind: bb199];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _11 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, iron::IronError>);
        _0 = <Result<iron::Response, IronError> as FromResidual<Result<Infallible, IronError>>>::from_residual(move _11) -> [return: bb216, unwind: bb199];
    }

    bb8: {
        _17 = &_13;
        _16 = FileTime::seconds(move _17) -> [return: bb9, unwind: bb199];
    }

    bb9: {
        _15 = Timespec::new(move _16, const 0_i32) -> [return: bb10, unwind: bb199];
    }

    bb10: {
        _343 = const _;
        _21 = _343 as &[&str] (PointerCoercion(Unsize));
        _28 = &_6;
        _27 = Metadata::len(move _28) -> [return: bb11, unwind: bb199];
    }

    bb11: {
        _26 = &_27;
        _25 = core::fmt::rt::Argument::<'_>::new_lower_hex::<u64>(_26) -> [return: bb12, unwind: bb199];
    }

    bb12: {
        _30 = &(_15.0: i64);
        _29 = core::fmt::rt::Argument::<'_>::new_lower_hex::<i64>(_30) -> [return: bb13, unwind: bb199];
    }

    bb13: {
        _32 = &(_15.1: i32);
        _31 = core::fmt::rt::Argument::<'_>::new_lower_hex::<i32>(_32) -> [return: bb14, unwind: bb199];
    }

    bb14: {
        _24 = [move _25, move _29, move _31];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb15, unwind: bb199];
    }

    bb15: {
        _19 = std::fmt::format(move _20) -> [return: bb16, unwind: bb199];
    }

    bb16: {
        _18 = iron::headers::EntityTag::weak(move _19) -> [return: bb17, unwind: bb199];
    }

    bb17: {
        _354 = const true;
        _34 = iron::status::Ok;
        _33 = iron::Response::with::<StatusCode>(move _34) -> [return: bb18, unwind: bb212];
    }

    bb18: {
        _35 = ((*_1).4: bool);
        switchInt(move _35) -> [0: bb22, otherwise: bb19];
    }

    bb19: {
        _37 = &mut (_33.1: iron::Headers);
        _41 = SizeOf([iron::headers::RangeUnit; 1]);
        _42 = AlignOf([iron::headers::RangeUnit; 1]);
        _43 = alloc::alloc::exchange_malloc(move _41, move _42) -> [return: bb20, unwind: bb198];
    }

    bb20: {
        _44 = ShallowInitBox(move _43, [iron::headers::RangeUnit; 1]);
        _45 = iron::headers::RangeUnit::Bytes;
        _361 = (((_44.0: std::ptr::Unique<[iron::headers::RangeUnit; 1]>).0: std::ptr::NonNull<[iron::headers::RangeUnit; 1]>).0: *const [iron::headers::RangeUnit; 1]);
        _376 = _361 as *const () (PtrToPtr);
        _377 = _376 as usize (Transmute);
        _378 = AlignOf([iron::headers::RangeUnit; 1]);
        _379 = Sub(_378, const 1_usize);
        _380 = BitAnd(_377, _379);
        _381 = Eq(_380, const 0_usize);
        assert(_381, "misaligned pointer dereference: address must be a multiple of {} but is {}", _378, _377) -> [success: bb215, unwind unreachable];
    }

    bb21: {
        _38 = AcceptRanges(move _39);
        _36 = Headers::set::<AcceptRanges>(move _37, move _38) -> [return: bb217, unwind: bb198];
    }

    bb22: {
        _46 = discriminant(((*_2).5: iron::method::Method));
        switchInt(move _46) -> [1: bb30, 5: bb24, otherwise: bb23];
    }

    bb23: {
        _268 = MethodNotAllowed;
        _267 = iron::Response::with::<StatusCode>(move _268) -> [return: bb151, unwind: bb198];
    }

    bb24: {
        _50 = &((*_2).3: iron::Headers);
        _49 = Headers::get::<ContentType>(move _50) -> [return: bb25, unwind: bb198];
    }

    bb25: {
        _48 = Option::<&ContentType>::cloned(move _49) -> [return: bb26, unwind: bb198];
    }

    bb26: {
        _47 = Option::<ContentType>::unwrap_or_else::<{closure@src/main.rs:785:37: 785:39}>(move _48, const ZeroSized: {closure@src/main.rs:785:37: 785:39}) -> [return: bb27, unwind: bb198];
    }

    bb27: {
        _52 = &mut (_33.1: iron::Headers);
        _51 = Headers::set::<ContentType>(move _52, move _47) -> [return: bb28, unwind: bb198];
    }

    bb28: {
        _54 = &mut (_33.1: iron::Headers);
        _57 = &_6;
        _56 = Metadata::len(move _57) -> [return: bb29, unwind: bb198];
    }

    bb29: {
        _55 = ContentLength(move _56);
        _53 = Headers::set::<ContentLength>(move _54, move _55) -> [return: bb218, unwind: bb198];
    }

    bb30: {
        _58 = guess_mime_type::<&Path>(_4) -> [return: bb31, unwind: bb198];
    }

    bb31: {
        _60 = &mut _33;
        _59 = <iron::Response as Set>::set_mut::<Mime>(move _60, move _58) -> [return: bb32, unwind: bb198];
    }

    bb32: {
        _61 = ((*_1).4: bool);
        switchInt(move _61) -> [0: bb139, otherwise: bb33];
    }

    bb33: {
        _63 = &((*_2).3: iron::Headers);
        _62 = Headers::get::<iron::headers::Range>(move _63) -> [return: bb34, unwind: bb198];
    }

    bb34: {
        _65 = &_62;
        _64 = Option::<&iron::headers::Range>::is_some(move _65) -> [return: bb35, unwind: bb198];
    }

    bb35: {
        switchInt(move _64) -> [0: bb47, otherwise: bb36];
    }

    bb36: {
        _67 = &((*_2).3: iron::Headers);
        _66 = Headers::get::<IfMatch>(move _67) -> [return: bb37, unwind: bb198];
    }

    bb37: {
        _69 = discriminant(_66);
        switchInt(move _69) -> [1: bb38, otherwise: bb47];
    }

    bb38: {
        _344 = deref_copy ((_66 as Some).0: &iron::headers::IfMatch);
        _68 = discriminant((*_344));
        switchInt(move _68) -> [1: bb39, otherwise: bb47];
    }

    bb39: {
        _345 = deref_copy ((_66 as Some).0: &iron::headers::IfMatch);
        _70 = &(((*_345) as Items).0: std::vec::Vec<iron::headers::EntityTag>);
        _76 = <Vec<iron::headers::EntityTag> as Deref>::deref(_70) -> [return: bb40, unwind: bb198];
    }

    bb40: {
        _75 = core::slice::<impl [iron::headers::EntityTag]>::iter(_76) -> [return: bb41, unwind: bb198];
    }

    bb41: {
        _74 = &mut _75;
        _78 = &_18;
        _77 = {closure@src/main.rs:803:43: 803:49} { etag: move _78 };
        _73 = <std::slice::Iter<'_, iron::headers::EntityTag> as Iterator>::position::<{closure@src/main.rs:803:43: 803:49}>(move _74, move _77) -> [return: bb42, unwind: bb198];
    }

    bb42: {
        _72 = &_73;
        _71 = Option::<usize>::is_none(move _72) -> [return: bb43, unwind: bb198];
    }

    bb43: {
        switchInt(move _71) -> [0: bb47, otherwise: bb44];
    }

    bb44: {
        _82 = const "Etag not matched";
        _81 = <str as ToOwned>::to_owned(_82) -> [return: bb45, unwind: bb198];
    }

    bb45: {
        _80 = StringError(move _81);
        _83 = RangeNotSatisfiable;
        _79 = IronError::new::<StringError, StatusCode>(move _80, move _83) -> [return: bb46, unwind: bb198];
    }

    bb46: {
        _0 = Result::<iron::Response, IronError>::Err(move _79);
        goto -> bb192;
    }

    bb47: {
        _86 = &((*_2).3: iron::Headers);
        _85 = Headers::get::<IfRange>(move _86) -> [return: bb48, unwind: bb198];
    }

    bb48: {
        _88 = discriminant(_85);
        switchInt(move _88) -> [0: bb49, 1: bb50, otherwise: bb6];
    }

    bb49: {
        _84 = const true;
        goto -> bb54;
    }

    bb50: {
        _346 = deref_copy ((_85 as Some).0: &iron::headers::IfRange);
        _87 = discriminant((*_346));
        switchInt(move _87) -> [0: bb51, 1: bb52, otherwise: bb6];
    }

    bb51: {
        _347 = deref_copy ((_85 as Some).0: &iron::headers::IfRange);
        _89 = &(((*_347) as EntityTag).0: iron::headers::EntityTag);
        _90 = &_18;
        _84 = iron::headers::EntityTag::weak_eq(move _90, _89) -> [return: bb219, unwind: bb198];
    }

    bb52: {
        _348 = deref_copy ((_85 as Some).0: &iron::headers::IfRange);
        _91 = &((((*_348) as Date).0: iron::headers::HttpDate).0: time::Tm);
        _94 = _15;
        _93 = at(move _94) -> [return: bb53, unwind: bb198];
    }

    bb53: {
        _92 = &_93;
        _84 = <Tm as PartialOrd>::le(move _92, _91) -> [return: bb220, unwind: bb198];
    }

    bb54: {
        _95 = _84;
        switchInt(move _95) -> [0: bb55, otherwise: bb56];
    }

    bb55: {
        _96 = Option::<&iron::headers::Range>::None;
        _62 = move _96;
        goto -> bb56;
    }

    bb56: {
        _98 = discriminant(_62);
        switchInt(move _98) -> [1: bb58, otherwise: bb57];
    }

    bb57: {
        _236 = &mut (_33.1: iron::Headers);
        _239 = &_6;
        _238 = Metadata::len(move _239) -> [return: bb128, unwind: bb198];
    }

    bb58: {
        _349 = deref_copy ((_62 as Some).0: &iron::headers::Range);
        _97 = discriminant((*_349));
        switchInt(move _97) -> [0: bb59, otherwise: bb125];
    }

    bb59: {
        _350 = deref_copy ((_62 as Some).0: &iron::headers::Range);
        _99 = &(((*_350) as Bytes).0: std::vec::Vec<iron::headers::ByteRangeSpec>);
        _101 = <Vec<ByteRangeSpec> as Deref>::deref(_99) -> [return: bb60, unwind: bb198];
    }

    bb60: {
        _100 = core::slice::<impl [ByteRangeSpec]>::get::<usize>(_101, const 0_usize) -> [return: bb61, unwind: bb198];
    }

    bb61: {
        _102 = discriminant(_100);
        switchInt(move _102) -> [1: bb62, otherwise: bb122];
    }

    bb62: {
        _103 = ((_100 as Some).0: &iron::headers::ByteRangeSpec);
        _107 = discriminant((*_103));
        switchInt(move _107) -> [0: bb64, 1: bb81, 2: bb63, otherwise: bb6];
    }

    bb63: {
        _170 = (((*_103) as Last).0: u64);
        _172 = _170;
        _174 = &_6;
        _173 = Metadata::len(move _174) -> [return: bb93, unwind: bb198];
    }

    bb64: {
        _108 = (((*_103) as FromTo).0: u64);
        _109 = (((*_103) as FromTo).1: u64);
        _111 = _108;
        _113 = &_6;
        _112 = Metadata::len(move _113) -> [return: bb65, unwind: bb198];
    }

    bb65: {
        _110 = Ge(move _111, move _112);
        switchInt(move _110) -> [0: bb66, otherwise: bb67];
    }

    bb66: {
        _115 = _108;
        _116 = _109;
        _114 = Gt(move _115, move _116);
        switchInt(move _114) -> [0: bb73, otherwise: bb67];
    }

    bb67: {
        _342 = const _;
        _121 = _342 as &[&str] (PointerCoercion(Unsize));
        _126 = &_108;
        _125 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_126) -> [return: bb68, unwind: bb198];
    }

    bb68: {
        _128 = &_109;
        _127 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_128) -> [return: bb69, unwind: bb198];
    }

    bb69: {
        _124 = [move _125, move _127];
        _123 = &_124;
        _122 = _123 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _120 = Arguments::<'_>::new_v1(move _121, move _122) -> [return: bb70, unwind: bb198];
    }

    bb70: {
        _119 = std::fmt::format(move _120) -> [return: bb71, unwind: bb198];
    }

    bb71: {
        _118 = StringError(move _119);
        _129 = RangeNotSatisfiable;
        _117 = IronError::new::<StringError, StatusCode>(move _118, move _129) -> [return: bb72, unwind: bb198];
    }

    bb72: {
        _0 = Result::<iron::Response, IronError>::Err(move _117);
        goto -> bb192;
    }

    bb73: {
        _131 = _109;
        _133 = &_6;
        _132 = Metadata::len(move _133) -> [return: bb74, unwind: bb198];
    }

    bb74: {
        _130 = Ge(move _131, move _132);
        switchInt(move _130) -> [0: bb78, otherwise: bb75];
    }

    bb75: {
        _135 = &_6;
        _134 = Metadata::len(move _135) -> [return: bb76, unwind: bb198];
    }

    bb76: {
        _136 = CheckedSub(_134, const 1_u64);
        assert(!move (_136.1: bool), "attempt to compute `{} - {}`, which would overflow", move _134, const 1_u64) -> [success: bb77, unwind: bb198];
    }

    bb77: {
        _109 = move (_136.0: u64);
        goto -> bb78;
    }

    bb78: {
        _137 = _108;
        _140 = _109;
        _141 = _108;
        _142 = CheckedSub(_140, _141);
        assert(!move (_142.1: bool), "attempt to compute `{} - {}`, which would overflow", move _140, move _141) -> [success: bb79, unwind: bb198];
    }

    bb79: {
        _139 = move (_142.0: u64);
        _143 = CheckedAdd(_139, const 1_u64);
        assert(!move (_143.1: bool), "attempt to compute `{} + {}`, which would overflow", move _139, const 1_u64) -> [success: bb80, unwind: bb198];
    }

    bb80: {
        _138 = move (_143.0: u64);
        _106 = (move _137, move _138);
        goto -> bb99;
    }

    bb81: {
        _144 = (((*_103) as AllFrom).0: u64);
        _146 = _144;
        _148 = &_6;
        _147 = Metadata::len(move _148) -> [return: bb82, unwind: bb198];
    }

    bb82: {
        _145 = Ge(move _146, move _147);
        switchInt(move _145) -> [0: bb90, otherwise: bb83];
    }

    bb83: {
        _341 = const _;
        _153 = _341 as &[&str] (PointerCoercion(Unsize));
        _158 = &_144;
        _157 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_158) -> [return: bb84, unwind: bb198];
    }

    bb84: {
        _162 = &_6;
        _161 = Metadata::len(move _162) -> [return: bb85, unwind: bb198];
    }

    bb85: {
        _160 = &_161;
        _159 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_160) -> [return: bb86, unwind: bb198];
    }

    bb86: {
        _156 = [move _157, move _159];
        _155 = &_156;
        _154 = _155 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _152 = Arguments::<'_>::new_v1(move _153, move _154) -> [return: bb87, unwind: bb198];
    }

    bb87: {
        _151 = std::fmt::format(move _152) -> [return: bb88, unwind: bb198];
    }

    bb88: {
        _150 = StringError(move _151);
        _163 = RangeNotSatisfiable;
        _149 = IronError::new::<StringError, StatusCode>(move _150, move _163) -> [return: bb89, unwind: bb198];
    }

    bb89: {
        _0 = Result::<iron::Response, IronError>::Err(move _149);
        goto -> bb192;
    }

    bb90: {
        _164 = _144;
        _167 = &_6;
        _166 = Metadata::len(move _167) -> [return: bb91, unwind: bb198];
    }

    bb91: {
        _168 = _144;
        _169 = CheckedSub(_166, _168);
        assert(!move (_169.1: bool), "attempt to compute `{} - {}`, which would overflow", move _166, move _168) -> [success: bb92, unwind: bb198];
    }

    bb92: {
        _165 = move (_169.0: u64);
        _106 = (move _164, move _165);
        goto -> bb99;
    }

    bb93: {
        _171 = Gt(move _172, move _173);
        switchInt(move _171) -> [0: bb96, otherwise: bb94];
    }

    bb94: {
        _176 = &_6;
        _175 = Metadata::len(move _176) -> [return: bb95, unwind: bb198];
    }

    bb95: {
        _170 = move _175;
        goto -> bb96;
    }

    bb96: {
        _179 = &_6;
        _178 = Metadata::len(move _179) -> [return: bb97, unwind: bb198];
    }

    bb97: {
        _180 = _170;
        _181 = CheckedSub(_178, _180);
        assert(!move (_181.1: bool), "attempt to compute `{} - {}`, which would overflow", move _178, move _180) -> [success: bb98, unwind: bb198];
    }

    bb98: {
        _177 = move (_181.0: u64);
        _182 = _170;
        _106 = (move _177, move _182);
        goto -> bb99;
    }

    bb99: {
        _104 = (_106.0: u64);
        _105 = (_106.1: u64);
        _186 = std::fs::File::open::<&Path>(_4) -> [return: bb100, unwind: bb198];
    }

    bb100: {
        _185 = Result::<std::fs::File, std::io::Error>::map_err::<IronError, fn(std::io::Error) -> IronError {error_io2iron}>(move _186, error_io2iron) -> [return: bb101, unwind: bb198];
    }

    bb101: {
        _184 = <Result<std::fs::File, IronError> as Try>::branch(move _185) -> [return: bb102, unwind: bb198];
    }

    bb102: {
        _187 = discriminant(_184);
        switchInt(move _187) -> [0: bb103, 1: bb104, otherwise: bb6];
    }

    bb103: {
        _189 = move ((_184 as Continue).0: std::fs::File);
        _358 = const true;
        _183 = move _189;
        _193 = &mut _183;
        _194 = std::io::SeekFrom::Start(_104);
        _192 = <std::fs::File as Seek>::seek(move _193, move _194) -> [return: bb105, unwind: bb210];
    }

    bb104: {
        _188 = move ((_184 as Break).0: std::result::Result<std::convert::Infallible, iron::IronError>);
        _0 = <Result<iron::Response, IronError> as FromResidual<Result<Infallible, IronError>>>::from_residual(move _188) -> [return: bb221, unwind: bb198];
    }

    bb105: {
        _191 = Result::<u64, std::io::Error>::map_err::<IronError, fn(std::io::Error) -> IronError {error_io2iron}>(move _192, error_io2iron) -> [return: bb106, unwind: bb210];
    }

    bb106: {
        _190 = <Result<u64, IronError> as Try>::branch(move _191) -> [return: bb107, unwind: bb210];
    }

    bb107: {
        _195 = discriminant(_190);
        switchInt(move _195) -> [0: bb108, 1: bb109, otherwise: bb6];
    }

    bb108: {
        _197 = ((_190 as Continue).0: u64);
        _358 = const false;
        _199 = move _183;
        _198 = <std::fs::File as std::io::Read>::take(move _199, _105) -> [return: bb111, unwind: bb210];
    }

    bb109: {
        _196 = move ((_190 as Break).0: std::result::Result<std::convert::Infallible, iron::IronError>);
        _0 = <Result<iron::Response, IronError> as FromResidual<Result<Infallible, IronError>>>::from_residual(move _196) -> [return: bb110, unwind: bb210];
    }

    bb110: {
        drop(_183) -> [return: bb191, unwind: bb198];
    }

    bb111: {
        _357 = const true;
        _201 = &mut (_33.1: iron::Headers);
        _202 = ContentLength(_105);
        _200 = Headers::set::<ContentLength>(move _201, move _202) -> [return: bb112, unwind: bb208];
    }

    bb112: {
        _204 = &mut (_33.1: iron::Headers);
        _211 = CheckedAdd(_104, _105);
        assert(!move (_211.1: bool), "attempt to compute `{} + {}`, which would overflow", _104, _105) -> [success: bb113, unwind: bb208];
    }

    bb113: {
        _210 = move (_211.0: u64);
        _212 = CheckedSub(_210, const 1_u64);
        assert(!move (_212.1: bool), "attempt to compute `{} - {}`, which would overflow", move _210, const 1_u64) -> [success: bb114, unwind: bb208];
    }

    bb114: {
        _209 = move (_212.0: u64);
        _208 = (_104, move _209);
        _207 = Option::<(u64, u64)>::Some(move _208);
        _215 = &_6;
        _214 = Metadata::len(move _215) -> [return: bb115, unwind: bb208];
    }

    bb115: {
        _213 = Option::<u64>::Some(move _214);
        _206 = iron::headers::ContentRangeSpec::Bytes { range: move _207, instance_length: move _213 };
        _205 = ContentRange(move _206);
        _203 = Headers::set::<ContentRange>(move _204, move _205) -> [return: bb116, unwind: bb208];
    }

    bb116: {
        _357 = const false;
        _221 = move _198;
        _220 = std::boxed::Box::<std::io::Take<std::fs::File>>::new(move _221) -> [return: bb117, unwind: bb208];
    }

    bb117: {
        _219 = move _220 as std::boxed::Box<dyn std::io::Read + std::marker::Send> (PointerCoercion(Unsize));
        _218 = std::boxed::Box::<std::boxed::Box<dyn std::io::Read + Send>>::new(move _219) -> [return: bb118, unwind: bb208];
    }

    bb118: {
        _217 = move _218 as std::boxed::Box<dyn iron::response::WriteBody> (PointerCoercion(Unsize));
        _216 = Option::<std::boxed::Box<dyn WriteBody>>::Some(move _217);
        drop((_33.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>)) -> [return: bb119, unwind: bb120];
    }

    bb119: {
        (_33.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>) = move _216;
        _223 = &mut _33;
        _224 = PartialContent;
        _222 = <iron::Response as Set>::set_mut::<StatusCode>(move _223, move _224) -> [return: bb121, unwind: bb208];
    }

    bb120 (cleanup): {
        (_33.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>) = move _216;
        goto -> bb208;
    }

    bb121: {
        _357 = const false;
        _358 = const false;
        goto -> bb152;
    }

    bb122: {
        _228 = const "Empty range set";
        _227 = <str as ToOwned>::to_owned(_228) -> [return: bb123, unwind: bb198];
    }

    bb123: {
        _226 = StringError(move _227);
        _229 = RangeNotSatisfiable;
        _225 = IronError::new::<StringError, StatusCode>(move _226, move _229) -> [return: bb124, unwind: bb198];
    }

    bb124: {
        _0 = Result::<iron::Response, IronError>::Err(move _225);
        goto -> bb192;
    }

    bb125: {
        _233 = const "Invalid range type";
        _232 = <str as ToOwned>::to_owned(_233) -> [return: bb126, unwind: bb198];
    }

    bb126: {
        _231 = StringError(move _232);
        _234 = RangeNotSatisfiable;
        _230 = IronError::new::<StringError, StatusCode>(move _231, move _234) -> [return: bb127, unwind: bb198];
    }

    bb127: {
        _0 = Result::<iron::Response, IronError>::Err(move _230);
        goto -> bb192;
    }

    bb128: {
        _237 = ContentLength(move _238);
        _235 = Headers::set::<ContentLength>(move _236, move _237) -> [return: bb129, unwind: bb198];
    }

    bb129: {
        _243 = std::fs::File::open::<&Path>(_4) -> [return: bb130, unwind: bb198];
    }

    bb130: {
        _242 = Result::<std::fs::File, std::io::Error>::map_err::<IronError, fn(std::io::Error) -> IronError {error_io2iron}>(move _243, error_io2iron) -> [return: bb131, unwind: bb198];
    }

    bb131: {
        _241 = <Result<std::fs::File, IronError> as Try>::branch(move _242) -> [return: bb132, unwind: bb198];
    }

    bb132: {
        _244 = discriminant(_241);
        switchInt(move _244) -> [0: bb133, 1: bb134, otherwise: bb6];
    }

    bb133: {
        _246 = move ((_241 as Continue).0: std::fs::File);
        _356 = const true;
        _240 = move _246;
        _356 = const false;
        _250 = move _240;
        _249 = std::boxed::Box::<std::fs::File>::new(move _250) -> [return: bb136, unwind: bb206];
    }

    bb134: {
        _245 = move ((_241 as Break).0: std::result::Result<std::convert::Infallible, iron::IronError>);
        _0 = <Result<iron::Response, IronError> as FromResidual<Result<Infallible, IronError>>>::from_residual(move _245) -> [return: bb135, unwind: bb198];
    }

    bb135: {
        _356 = const false;
        goto -> bb192;
    }

    bb136: {
        _248 = move _249 as std::boxed::Box<dyn iron::response::WriteBody> (PointerCoercion(Unsize));
        _247 = Option::<std::boxed::Box<dyn WriteBody>>::Some(move _248);
        drop((_33.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>)) -> [return: bb137, unwind: bb138];
    }

    bb137: {
        (_33.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>) = move _247;
        _356 = const false;
        goto -> bb152;
    }

    bb138 (cleanup): {
        (_33.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>) = move _247;
        goto -> bb206;
    }

    bb139: {
        _252 = &mut (_33.1: iron::Headers);
        _255 = &_6;
        _254 = Metadata::len(move _255) -> [return: bb140, unwind: bb198];
    }

    bb140: {
        _253 = ContentLength(move _254);
        _251 = Headers::set::<ContentLength>(move _252, move _253) -> [return: bb141, unwind: bb198];
    }

    bb141: {
        _259 = std::fs::File::open::<&Path>(_4) -> [return: bb142, unwind: bb198];
    }

    bb142: {
        _258 = Result::<std::fs::File, std::io::Error>::map_err::<IronError, fn(std::io::Error) -> IronError {error_io2iron}>(move _259, error_io2iron) -> [return: bb143, unwind: bb198];
    }

    bb143: {
        _257 = <Result<std::fs::File, IronError> as Try>::branch(move _258) -> [return: bb144, unwind: bb198];
    }

    bb144: {
        _260 = discriminant(_257);
        switchInt(move _260) -> [0: bb145, 1: bb146, otherwise: bb6];
    }

    bb145: {
        _262 = move ((_257 as Continue).0: std::fs::File);
        _355 = const true;
        _256 = move _262;
        _355 = const false;
        _266 = move _256;
        _265 = std::boxed::Box::<std::fs::File>::new(move _266) -> [return: bb148, unwind: bb204];
    }

    bb146: {
        _261 = move ((_257 as Break).0: std::result::Result<std::convert::Infallible, iron::IronError>);
        _0 = <Result<iron::Response, IronError> as FromResidual<Result<Infallible, IronError>>>::from_residual(move _261) -> [return: bb147, unwind: bb198];
    }

    bb147: {
        _355 = const false;
        goto -> bb192;
    }

    bb148: {
        _264 = move _265 as std::boxed::Box<dyn iron::response::WriteBody> (PointerCoercion(Unsize));
        _263 = Option::<std::boxed::Box<dyn WriteBody>>::Some(move _264);
        drop((_33.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>)) -> [return: bb149, unwind: bb150];
    }

    bb149: {
        (_33.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>) = move _263;
        _355 = const false;
        goto -> bb152;
    }

    bb150 (cleanup): {
        (_33.3: std::option::Option<std::boxed::Box<dyn iron::response::WriteBody>>) = move _263;
        goto -> bb204;
    }

    bb151: {
        _0 = Result::<iron::Response, IronError>::Ok(move _267);
        goto -> bb192;
    }

    bb152: {
        _269 = discriminant(((*_1).7: std::option::Option<std::vec::Vec<std::string::String>>));
        switchInt(move _269) -> [1: bb153, otherwise: bb175];
    }

    bb153: {
        _270 = &((((*_1).7: std::option::Option<std::vec::Vec<std::string::String>>) as Some).0: std::vec::Vec<std::string::String>);
        _271 = Path::to_string_lossy(_4) -> [return: bb154, unwind: bb198];
    }

    bb154: {
        _273 = &(_33.0: std::option::Option<iron::status::Status>);
        _340 = const _;
        _272 = <Option<StatusCode> as PartialEq>::ne(move _273, _340) -> [return: bb155, unwind: bb197];
    }

    bb155: {
        switchInt(move _272) -> [0: bb174, otherwise: bb156];
    }

    bb156: {
        _277 = <Vec<String> as Deref>::deref(_270) -> [return: bb157, unwind: bb197];
    }

    bb157: {
        _276 = core::slice::<impl [String]>::iter(_277) -> [return: bb158, unwind: bb197];
    }

    bb158: {
        _275 = &mut _276;
        _279 = &_271;
        _278 = {closure@src/main.rs:910:36: 910:41} { path_str: move _279 };
        _274 = <std::slice::Iter<'_, String> as Iterator>::any::<{closure@src/main.rs:910:36: 910:41}>(move _275, move _278) -> [return: bb159, unwind: bb197];
    }

    bb159: {
        switchInt(move _274) -> [0: bb174, otherwise: bb160];
    }

    bb160: {
        _281 = &((*_2).3: iron::Headers);
        _280 = Headers::get::<AcceptEncoding>(move _281) -> [return: bb161, unwind: bb197];
    }

    bb161: {
        _282 = discriminant(_280);
        switchInt(move _282) -> [1: bb162, otherwise: bb174];
    }

    bb162: {
        _351 = deref_copy ((_280 as Some).0: &iron::headers::AcceptEncoding);
        _283 = &((*_351).0: std::vec::Vec<iron::headers::QualityItem<iron::headers::Encoding>>);
        _284 = <&Vec<QualityItem<Encoding>> as IntoIterator>::into_iter(_283) -> [return: bb163, unwind: bb197];
    }

    bb163: {
        _285 = move _284;
        goto -> bb164;
    }

    bb164: {
        _287 = &mut _285;
        _286 = <std::slice::Iter<'_, QualityItem<Encoding>> as Iterator>::next(_287) -> [return: bb165, unwind: bb197];
    }

    bb165: {
        _288 = discriminant(_286);
        switchInt(move _288) -> [0: bb174, 1: bb166, otherwise: bb6];
    }

    bb166: {
        _352 = deref_copy ((_286 as Some).0: &iron::headers::QualityItem<iron::headers::Encoding>);
        _289 = &((*_352).0: iron::headers::Encoding);
        _339 = const _;
        _290 = <Encoding as PartialEq>::eq(_289, _339) -> [return: bb167, unwind: bb197];
    }

    bb167: {
        switchInt(move _290) -> [0: bb168, otherwise: bb170];
    }

    bb168: {
        _338 = const _;
        _291 = <Encoding as PartialEq>::eq(_289, _338) -> [return: bb169, unwind: bb197];
    }

    bb169: {
        switchInt(move _291) -> [0: bb164, otherwise: bb170];
    }

    bb170: {
        _293 = &mut (_33.1: iron::Headers);
        _298 = SizeOf([iron::headers::Encoding; 1]);
        _299 = AlignOf([iron::headers::Encoding; 1]);
        _300 = alloc::alloc::exchange_malloc(move _298, move _299) -> [return: bb171, unwind: bb197];
    }

    bb171: {
        _301 = ShallowInitBox(move _300, [iron::headers::Encoding; 1]);
        _302 = <Encoding as Clone>::clone(_289) -> [return: bb172, unwind: bb202];
    }

    bb172: {
        _362 = (((_301.0: std::ptr::Unique<[iron::headers::Encoding; 1]>).0: std::ptr::NonNull<[iron::headers::Encoding; 1]>).0: *const [iron::headers::Encoding; 1]);
        _370 = _362 as *const () (PtrToPtr);
        _371 = _370 as usize (Transmute);
        _372 = AlignOf([iron::headers::Encoding; 1]);
        _373 = Sub(_372, const 1_usize);
        _374 = BitAnd(_371, _373);
        _375 = Eq(_374, const 0_usize);
        assert(_375, "misaligned pointer dereference: address must be a multiple of {} but is {}", _372, _371) -> [success: bb214, unwind unreachable];
    }

    bb173: {
        _294 = ContentEncoding(move _295);
        _292 = Headers::set::<ContentEncoding>(move _293, move _294) -> [return: bb222, unwind: bb197];
    }

    bb174: {
        drop(_271) -> [return: bb175, unwind: bb198];
    }

    bb175: {
        _303 = ((*_1).3: bool);
        switchInt(move _303) -> [0: bb189, otherwise: bb176];
    }

    bb176: {
        _305 = &((*_2).3: iron::Headers);
        _304 = Headers::get::<IfModifiedSince>(move _305) -> [return: bb177, unwind: bb198];
    }

    bb177: {
        _306 = discriminant(_304);
        switchInt(move _306) -> [1: bb178, otherwise: bb183];
    }

    bb178: {
        _353 = deref_copy ((_304 as Some).0: &iron::headers::IfModifiedSince);
        _307 = &(((*_353).0: iron::headers::HttpDate).0: time::Tm);
        _309 = &_15;
        _311 = Tm::to_timespec(_307) -> [return: bb179, unwind: bb198];
    }

    bb179: {
        _310 = &_311;
        _308 = <Timespec as PartialOrd>::le(move _309, move _310) -> [return: bb180, unwind: bb198];
    }

    bb180: {
        switchInt(move _308) -> [0: bb183, otherwise: bb181];
    }

    bb181: {
        _313 = NotModified;
        _312 = iron::Response::with::<StatusCode>(move _313) -> [return: bb182, unwind: bb198];
    }

    bb182: {
        _0 = Result::<iron::Response, IronError>::Ok(move _312);
        goto -> bb192;
    }

    bb183: {
        _316 = SizeOf([iron::headers::CacheDirective; 2]);
        _317 = AlignOf([iron::headers::CacheDirective; 2]);
        _318 = alloc::alloc::exchange_malloc(move _316, move _317) -> [return: bb184, unwind: bb198];
    }

    bb184: {
        _319 = ShallowInitBox(move _318, [iron::headers::CacheDirective; 2]);
        _320 = Public;
        _323 = const {alloc16: &u32};
        _322 = (*_323);
        _321 = MaxAge(move _322);
        _363 = (((_319.0: std::ptr::Unique<[iron::headers::CacheDirective; 2]>).0: std::ptr::NonNull<[iron::headers::CacheDirective; 2]>).0: *const [iron::headers::CacheDirective; 2]);
        _364 = _363 as *const () (PtrToPtr);
        _365 = _364 as usize (Transmute);
        _366 = AlignOf([iron::headers::CacheDirective; 2]);
        _367 = Sub(_366, const 1_usize);
        _368 = BitAnd(_365, _367);
        _369 = Eq(_368, const 0_usize);
        assert(_369, "misaligned pointer dereference: address must be a multiple of {} but is {}", _366, _365) -> [success: bb213, unwind unreachable];
    }

    bb185: {
        _325 = &mut (_33.1: iron::Headers);
        _326 = CacheControl(move _314);
        _324 = Headers::set::<CacheControl>(move _325, move _326) -> [return: bb186, unwind: bb198];
    }

    bb186: {
        _328 = &mut (_33.1: iron::Headers);
        _332 = _15;
        _331 = at(move _332) -> [return: bb187, unwind: bb198];
    }

    bb187: {
        _330 = HttpDate(move _331);
        _329 = LastModified(move _330);
        _327 = Headers::set::<LastModified>(move _328, move _329) -> [return: bb188, unwind: bb198];
    }

    bb188: {
        _334 = &mut (_33.1: iron::Headers);
        _354 = const false;
        _336 = move _18;
        _335 = ETag(move _336);
        _333 = Headers::set::<ETag>(move _334, move _335) -> [return: bb223, unwind: bb198];
    }

    bb189: {
        _337 = move _33;
        _0 = Result::<iron::Response, IronError>::Ok(move _337);
        switchInt(_354) -> [0: bb190, otherwise: bb201];
    }

    bb190: {
        _354 = const false;
        drop(_3) -> [return: bb196, unwind continue];
    }

    bb191: {
        _358 = const false;
        goto -> bb192;
    }

    bb192: {
        drop(_33) -> [return: bb193, unwind: bb212];
    }

    bb193: {
        drop(_18) -> [return: bb194, unwind: bb199];
    }

    bb194: {
        _354 = const false;
        goto -> bb195;
    }

    bb195: {
        drop(_3) -> [return: bb196, unwind continue];
    }

    bb196: {
        return;
    }

    bb197 (cleanup): {
        drop(_271) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb198 (cleanup): {
        drop(_33) -> [return: bb212, unwind terminate(cleanup)];
    }

    bb199 (cleanup): {
        drop(_3) -> [return: bb200, unwind terminate(cleanup)];
    }

    bb200 (cleanup): {
        resume;
    }

    bb201: {
        drop(_18) -> [return: bb190, unwind: bb199];
    }

    bb202 (cleanup): {
        _359 = &mut _301;
        _360 = <std::boxed::Box<[Encoding; 1]> as Drop>::drop(move _359) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb203 (cleanup): {
        drop(_256) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb204 (cleanup): {
        switchInt(_355) -> [0: bb198, otherwise: bb203];
    }

    bb205 (cleanup): {
        drop(_240) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb206 (cleanup): {
        switchInt(_356) -> [0: bb198, otherwise: bb205];
    }

    bb207 (cleanup): {
        drop(_198) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb208 (cleanup): {
        switchInt(_357) -> [0: bb210, otherwise: bb207];
    }

    bb209 (cleanup): {
        drop(_183) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        switchInt(_358) -> [0: bb198, otherwise: bb209];
    }

    bb211 (cleanup): {
        drop(_18) -> [return: bb199, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        switchInt(_354) -> [0: bb199, otherwise: bb211];
    }

    bb213: {
        (*_363) = [move _320, move _321];
        _315 = move _319 as std::boxed::Box<[iron::headers::CacheDirective]> (PointerCoercion(Unsize));
        _314 = slice::<impl [CacheDirective]>::into_vec::<std::alloc::Global>(move _315) -> [return: bb185, unwind: bb198];
    }

    bb214: {
        (*_362) = [move _302];
        _297 = move _301;
        _296 = move _297 as std::boxed::Box<[iron::headers::Encoding]> (PointerCoercion(Unsize));
        _295 = slice::<impl [Encoding]>::into_vec::<std::alloc::Global>(move _296) -> [return: bb173, unwind: bb197];
    }

    bb215: {
        (*_361) = [move _45];
        _40 = move _44 as std::boxed::Box<[iron::headers::RangeUnit]> (PointerCoercion(Unsize));
        _39 = slice::<impl [RangeUnit]>::into_vec::<std::alloc::Global>(move _40) -> [return: bb21, unwind: bb198];
    }

    bb216: {
        goto -> bb195;
    }

    bb217: {
        goto -> bb22;
    }

    bb218: {
        goto -> bb152;
    }

    bb219: {
        goto -> bb54;
    }

    bb220: {
        goto -> bb54;
    }

    bb221: {
        goto -> bb191;
    }

    bb222: {
        goto -> bb174;
    }

    bb223: {
        goto -> bb189;
    }

    bb224 (cleanup): {
        goto -> bb197;
    }
}

alloc16 (static: SECONDS, size: 4, align: 4) {
    80 3a 09 00                                     │ .:..
}

promoted[0] in <impl at src/main.rs:431:1: 431:17>::send_file: &Encoding = {
    let mut _0: &iron::headers::Encoding;
    let mut _1: iron::headers::Encoding;

    bb0: {
        _1 = Gzip;
        _0 = &_1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:431:1: 431:17>::send_file: &Encoding = {
    let mut _0: &iron::headers::Encoding;
    let mut _1: iron::headers::Encoding;

    bb0: {
        _1 = Deflate;
        _0 = &_1;
        return;
    }
}

promoted[2] in <impl at src/main.rs:431:1: 431:17>::send_file: &Option<StatusCode> = {
    let mut _0: &std::option::Option<iron::status::Status>;
    let mut _1: std::option::Option<iron::status::Status>;
    let mut _2: iron::status::Status;

    bb0: {
        _2 = PartialContent;
        _1 = Option::<StatusCode>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[3] in <impl at src/main.rs:431:1: 431:17>::send_file: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Range::AllFrom to large (x=", const "), Content-Length: ", const ")"];
        _0 = &_1;
        return;
    }
}

promoted[4] in <impl at src/main.rs:431:1: 431:17>::send_file: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Invalid range(x=", const ", y=", const ")"];
        _0 = &_1;
        return;
    }
}

promoted[5] in <impl at src/main.rs:431:1: 431:17>::send_file: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const "-", const "."];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:431:1: 431:17>::send_file::{closure#0}(_1: {closure@src/main.rs:785:37: 785:39}) -> ContentType {
    let mut _0: iron::headers::ContentType;
    let mut _2: mime_guess::Mime;
    let mut _3: iron::mime::TopLevel;
    let mut _4: iron::mime::SubLevel;
    let mut _5: std::vec::Vec<(iron::mime::Attr, iron::mime::Value)>;

    bb0: {
        _3 = iron::mime::TopLevel::Text;
        _4 = Plain;
        _5 = Vec::<(Attr, iron::mime::Value)>::new() -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _2 = Mime(move _3, move _4, move _5);
        _0 = ContentType(move _2);
        return;
    }

    bb2 (cleanup): {
        drop(_4) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb3 (cleanup): {
        drop(_3) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at src/main.rs:431:1: 431:17>::send_file::{closure#1}(_1: &mut {closure@src/main.rs:803:43: 803:49}, _2: &iron::headers::EntityTag) -> bool {
    debug item => _2;
    debug etag => (*((*_1).0: &iron::headers::EntityTag));
    let mut _0: bool;
    let mut _3: &iron::headers::EntityTag;

    bb0: {
        _3 = deref_copy ((*_1).0: &iron::headers::EntityTag);
        _0 = iron::headers::EntityTag::strong_eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:431:1: 431:17>::send_file::{closure#2}(_1: &mut {closure@src/main.rs:910:36: 910:41}, _2: &String) -> bool {
    debug ext => _2;
    debug path_str => (*((*_1).0: &std::borrow::Cow<'_, str>));
    let mut _0: bool;
    let _3: &str;
    let mut _4: &std::borrow::Cow<'_, str>;

    bb0: {
        _4 = deref_copy ((*_1).0: &std::borrow::Cow<'_, str>);
        _3 = <Cow<'_, str> as Deref>::deref(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::str::<impl str>::ends_with::<'_, &String>(_3, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

static SECONDS: u32 = {
    let mut _0: u32;
    let mut _1: u32;
    let mut _2: (u32, bool);
    let mut _3: (u32, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedMul(const 7_u32, const 24_u32);
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", const 7_u32, const 24_u32) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: u32);
        _3 = CheckedMul(_1, const 3600_u32);
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 3600_u32) -> [success: bb2, unwind continue];
    }

    bb2: {
        _0 = move (_3.0: u32);
        StorageDead(_1);
        return;
    }
}

fn GzipBody(_1: std::boxed::Box<dyn WriteBody>) -> GzipBody {
    let mut _0: middlewares::compress::GzipBody;

    bb0: {
        _0 = GzipBody(move _1);
        return;
    }
}

// MIR FOR CTFE
fn GzipBody(_1: std::boxed::Box<dyn WriteBody>) -> GzipBody {
    let mut _0: middlewares::compress::GzipBody;

    bb0: {
        _0 = GzipBody(move _1);
        return;
    }
}

fn DeflateBody(_1: std::boxed::Box<dyn WriteBody>) -> DeflateBody {
    let mut _0: middlewares::compress::DeflateBody;

    bb0: {
        _0 = DeflateBody(move _1);
        return;
    }
}

// MIR FOR CTFE
fn DeflateBody(_1: std::boxed::Box<dyn WriteBody>) -> DeflateBody {
    let mut _0: middlewares::compress::DeflateBody;

    bb0: {
        _0 = DeflateBody(move _1);
        return;
    }
}

fn StringError(_1: String) -> StringError {
    let mut _0: util::StringError;

    bb0: {
        _0 = StringError(move _1);
        return;
    }
}

// MIR FOR CTFE
fn StringError(_1: String) -> StringError {
    let mut _0: util::StringError;

    bb0: {
        _0 = StringError(move _1);
        return;
    }
}
