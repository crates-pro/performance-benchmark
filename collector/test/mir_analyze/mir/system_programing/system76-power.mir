// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main::{closure#1}(_1: &[closure@src/main.rs:125:36: 132:26], _2: String) -> Result<(), String> {
    debug s => _2;                       // in scope 0 at src/main.rs:125:37: 125:38
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at src/main.rs:125:40: 125:40
    let mut _3: std::result::Result<u8, std::num::ParseIntError>; // in scope 0 at src/main.rs:126:44: 126:70
    let mut _4: &str;                    // in scope 0 at src/main.rs:126:63: 126:65
    let _5: &str;                        // in scope 0 at src/main.rs:126:63: 126:65
    let mut _6: &std::string::String;    // in scope 0 at src/main.rs:126:63: 126:65
    let _7: &std::string::String;        // in scope 0 at src/main.rs:126:63: 126:65
    let mut _8: isize;                   // in scope 0 at src/main.rs:126:36: 126:41
    let _9: u8;                          // in scope 0 at src/main.rs:126:39: 126:40
    let mut _10: bool;                   // in scope 0 at src/main.rs:127:36: 127:44
    let mut _11: u8;                     // in scope 0 at src/main.rs:127:36: 127:37
    let mut _12: std::string::String;    // in scope 0 at src/main.rs:131:33: 131:79
    let mut _13: &str;                   // in scope 0 at src/main.rs:131:33: 131:79
    let _14: &str;                       // in scope 0 at src/main.rs:131:33: 131:67
    scope 1 {
        debug v => _9;                   // in scope 1 at src/main.rs:126:39: 126:40
    }

    bb0: {
        _7 = &_2;                        // scope 0 at src/main.rs:126:63: 126:65
        _6 = _7;                         // scope 0 at src/main.rs:126:63: 126:65
        _5 = <String as Deref>::deref(move _6) -> [return: bb1, unwind: bb8]; // scope 0 at src/main.rs:126:63: 126:65
                                         // mir::Constant
                                         // + span: src/main.rs:126:63: 126:65
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> &'r <std::string::String as std::ops::Deref>::Target {<std::string::String as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at src/main.rs:126:63: 126:65
        _3 = core::num::<impl u8>::from_str_radix(move _4, const 10_u32) -> [return: bb2, unwind: bb8]; // scope 0 at src/main.rs:126:44: 126:70
                                         // mir::Constant
                                         // + span: src/main.rs:126:44: 126:62
                                         // + literal: Const { ty: for<'r> fn(&'r str, u32) -> std::result::Result<u8, std::num::ParseIntError> {core::num::<impl u8>::from_str_radix}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _8 = discriminant(_3);           // scope 0 at src/main.rs:126:36: 126:41
        switchInt(move _8) -> [0_isize: bb3, otherwise: bb5]; // scope 0 at src/main.rs:126:36: 126:41
    }

    bb3: {
        _9 = ((_3 as Ok).0: u8);         // scope 0 at src/main.rs:126:39: 126:40
        _11 = _9;                        // scope 0 at src/main.rs:127:36: 127:37
        _10 = Le(move _11, const 100_u8); // scope 0 at src/main.rs:127:36: 127:44
        switchInt(move _10) -> [false: bb5, otherwise: bb4]; // scope 0 at src/main.rs:127:36: 127:44
    }

    bb4: {
        discriminant(_0) = 0;            // scope 0 at src/main.rs:128:44: 128:50
        drop(_2) -> bb7;                 // scope 0 at src/main.rs:132:25: 132:26
    }

    bb5: {
        _14 = const "Not an integer between 0 and 100"; // scope 0 at src/main.rs:131:33: 131:67
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [78, 111, 116, 32, 97, 110, 32, 105, 110, 116, 101, 103, 101, 114, 32, 98, 101, 116, 119, 101, 101, 110, 32, 48, 32, 97, 110, 100, 32, 49, 48, 48], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4294967295], len: Size { raw: 32 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 32 })
                                         // mir::Constant
                                         // + span: src/main.rs:131:33: 131:67
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [78, 111, 116, 32, 97, 110, 32, 105, 110, 116, 101, 103, 101, 114, 32, 98, 101, 116, 119, 101, 101, 110, 32, 48, 32, 97, 110, 100, 32, 49, 48, 48], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4294967295], len: Size { raw: 32 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 32 }) }
        _13 = _14;                       // scope 0 at src/main.rs:131:33: 131:79
        _12 = <str as ToString>::to_string(move _13) -> [return: bb6, unwind: bb8]; // scope 0 at src/main.rs:131:33: 131:79
                                         // mir::Constant
                                         // + span: src/main.rs:131:68: 131:77
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        ((_0 as Err).0: std::string::String) = move _12; // scope 0 at src/main.rs:131:29: 131:80
        discriminant(_0) = 1;            // scope 0 at src/main.rs:131:29: 131:80
        drop(_2) -> bb7;                 // scope 0 at src/main.rs:132:25: 132:26
    }

    bb7: {
        return;                          // scope 0 at src/main.rs:132:26: 132:26
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at src/main.rs:132:25: 132:26
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at src/main.rs:125:36: 132:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:8:11: 8:11
    let _1: clap::ArgMatches;            // in scope 0 at src/main.rs:9:9: 9:16
    let mut _2: clap::App;               // in scope 0 at src/main.rs:9:19: 140:10
    let mut _3: clap::App;               // in scope 0 at src/main.rs:9:19: 91:10
    let mut _4: clap::App;               // in scope 0 at src/main.rs:9:19: 54:10
    let mut _5: clap::App;               // in scope 0 at src/main.rs:9:19: 39:10
    let mut _6: clap::App;               // in scope 0 at src/main.rs:9:19: 15:58
    let mut _7: clap::App;               // in scope 0 at src/main.rs:9:19: 14:61
    let mut _8: clap::App;               // in scope 0 at src/main.rs:9:19: 13:57
    let mut _9: clap::App;               // in scope 0 at src/main.rs:9:19: 12:50
    let mut _10: clap::App;              // in scope 0 at src/main.rs:9:19: 11:44
    let mut _11: clap::App;              // in scope 0 at src/main.rs:9:19: 10:67
    let mut _12: clap::App;              // in scope 0 at src/main.rs:9:19: 9:45
    let mut _13: clap::AppSettings;      // in scope 0 at src/main.rs:12:25: 12:49
    let mut _14: clap::AppSettings;      // in scope 0 at src/main.rs:13:25: 13:56
    let mut _15: clap::AppSettings;      // in scope 0 at src/main.rs:14:25: 14:60
    let mut _16: clap::AppSettings;      // in scope 0 at src/main.rs:15:18: 15:57
    let mut _17: clap::App;              // in scope 0 at src/main.rs:17:13: 38:18
    let mut _18: clap::App;              // in scope 0 at src/main.rs:17:13: 30:18
    let mut _19: clap::App;              // in scope 0 at src/main.rs:17:13: 22:18
    let mut _20: clap::App;              // in scope 0 at src/main.rs:17:13: 18:58
    let mut _21: clap::App;              // in scope 0 at src/main.rs:17:13: 17:44
    let mut _22: &str;                   // in scope 0 at src/main.rs:17:35: 17:43
    let _23: &str;                       // in scope 0 at src/main.rs:17:35: 17:43
    let mut _24: clap::Arg;              // in scope 0 at src/main.rs:24:21: 29:44
    let mut _25: clap::Arg;              // in scope 0 at src/main.rs:24:21: 28:38
    let mut _26: clap::Arg;              // in scope 0 at src/main.rs:24:21: 27:95
    let mut _27: clap::Arg;              // in scope 0 at src/main.rs:24:21: 26:39
    let mut _28: clap::Arg;              // in scope 0 at src/main.rs:24:21: 25:36
    let mut _29: clap::Arg;              // in scope 0 at src/main.rs:24:21: 24:44
    let mut _30: &str;                   // in scope 0 at src/main.rs:24:36: 24:43
    let _31: &str;                       // in scope 0 at src/main.rs:24:36: 24:43
    let mut _32: &str;                   // in scope 0 at src/main.rs:26:31: 26:38
    let _33: &str;                       // in scope 0 at src/main.rs:26:31: 26:38
    let mut _34: &str;                   // in scope 0 at src/main.rs:27:31: 27:94
    let _35: &str;                       // in scope 0 at src/main.rs:27:31: 27:94
    let mut _36: &str;                   // in scope 0 at src/main.rs:29:32: 29:43
    let _37: &str;                       // in scope 0 at src/main.rs:29:32: 29:43
    let mut _38: clap::Arg;              // in scope 0 at src/main.rs:32:21: 37:44
    let mut _39: clap::Arg;              // in scope 0 at src/main.rs:32:21: 36:38
    let mut _40: clap::Arg;              // in scope 0 at src/main.rs:32:21: 35:97
    let mut _41: clap::Arg;              // in scope 0 at src/main.rs:32:21: 34:41
    let mut _42: clap::Arg;              // in scope 0 at src/main.rs:32:21: 33:36
    let mut _43: clap::Arg;              // in scope 0 at src/main.rs:32:21: 32:46
    let mut _44: &str;                   // in scope 0 at src/main.rs:32:36: 32:45
    let _45: &str;                       // in scope 0 at src/main.rs:32:36: 32:45
    let mut _46: &str;                   // in scope 0 at src/main.rs:34:31: 34:40
    let _47: &str;                       // in scope 0 at src/main.rs:34:31: 34:40
    let mut _48: &str;                   // in scope 0 at src/main.rs:35:31: 35:96
    let _49: &str;                       // in scope 0 at src/main.rs:35:31: 35:96
    let mut _50: &str;                   // in scope 0 at src/main.rs:37:32: 37:43
    let _51: &str;                       // in scope 0 at src/main.rs:37:32: 37:43
    let mut _52: clap::App;              // in scope 0 at src/main.rs:41:13: 53:18
    let mut _53: clap::App;              // in scope 0 at src/main.rs:41:13: 47:18
    let mut _54: clap::App;              // in scope 0 at src/main.rs:41:13: 42:57
    let mut _55: clap::App;              // in scope 0 at src/main.rs:41:13: 41:45
    let mut _56: &str;                   // in scope 0 at src/main.rs:41:35: 41:44
    let _57: &str;                       // in scope 0 at src/main.rs:41:35: 41:44
    let mut _58: clap::Arg;              // in scope 0 at src/main.rs:49:21: 52:41
    let mut _59: clap::Arg;              // in scope 0 at src/main.rs:49:21: 51:82
    let mut _60: clap::Arg;              // in scope 0 at src/main.rs:49:21: 50:55
    let mut _61: clap::Arg;              // in scope 0 at src/main.rs:49:21: 49:46
    let mut _62: &str;                   // in scope 0 at src/main.rs:49:36: 49:45
    let _63: &str;                       // in scope 0 at src/main.rs:49:36: 49:45
    let mut _64: &str;                   // in scope 0 at src/main.rs:50:31: 50:54
    let _65: &str;                       // in scope 0 at src/main.rs:50:31: 50:54
    let mut _66: &[&str];                // in scope 0 at src/main.rs:51:42: 51:81
    let mut _67: &[&str; 3];             // in scope 0 at src/main.rs:51:42: 51:81
    let _68: &[&str; 3];                 // in scope 0 at src/main.rs:51:42: 51:81
    let mut _69: clap::App;              // in scope 0 at src/main.rs:56:13: 90:18
    let mut _70: clap::App;              // in scope 0 at src/main.rs:56:13: 81:18
    let mut _71: clap::App;              // in scope 0 at src/main.rs:56:13: 77:18
    let mut _72: clap::App;              // in scope 0 at src/main.rs:56:13: 74:18
    let mut _73: clap::App;              // in scope 0 at src/main.rs:56:13: 70:18
    let mut _74: clap::App;              // in scope 0 at src/main.rs:56:13: 66:18
    let mut _75: clap::App;              // in scope 0 at src/main.rs:56:13: 62:18
    let mut _76: clap::App;              // in scope 0 at src/main.rs:56:13: 57:57
    let mut _77: clap::App;              // in scope 0 at src/main.rs:56:13: 56:46
    let mut _78: &str;                   // in scope 0 at src/main.rs:56:35: 56:45
    let _79: &str;                       // in scope 0 at src/main.rs:56:35: 56:45
    let mut _80: clap::App;              // in scope 0 at src/main.rs:64:21: 65:89
    let mut _81: clap::App;              // in scope 0 at src/main.rs:64:21: 64:53
    let mut _82: &str;                   // in scope 0 at src/main.rs:64:43: 64:52
    let _83: &str;                       // in scope 0 at src/main.rs:64:43: 64:52
    let mut _84: clap::App;              // in scope 0 at src/main.rs:68:21: 69:74
    let mut _85: clap::App;              // in scope 0 at src/main.rs:68:21: 68:52
    let mut _86: &str;                   // in scope 0 at src/main.rs:68:43: 68:51
    let _87: &str;                       // in scope 0 at src/main.rs:68:43: 68:51
    let mut _88: clap::App;              // in scope 0 at src/main.rs:72:21: 73:70
    let mut _89: clap::App;              // in scope 0 at src/main.rs:72:21: 72:56
    let mut _90: &str;                   // in scope 0 at src/main.rs:72:43: 72:55
    let _91: &str;                       // in scope 0 at src/main.rs:72:43: 72:55
    let mut _92: clap::App;              // in scope 0 at src/main.rs:76:21: 76:93
    let mut _93: clap::App;              // in scope 0 at src/main.rs:76:21: 76:52
    let mut _94: &str;                   // in scope 0 at src/main.rs:76:43: 76:51
    let _95: &str;                       // in scope 0 at src/main.rs:76:43: 76:51
    let mut _96: clap::App;              // in scope 0 at src/main.rs:79:21: 80:83
    let mut _97: clap::App;              // in scope 0 at src/main.rs:79:21: 79:56
    let mut _98: &str;                   // in scope 0 at src/main.rs:79:43: 79:55
    let _99: &str;                       // in scope 0 at src/main.rs:79:43: 79:55
    let mut _100: clap::App;             // in scope 0 at src/main.rs:83:21: 89:26
    let mut _101: clap::App;             // in scope 0 at src/main.rs:83:21: 84:81
    let mut _102: clap::App;             // in scope 0 at src/main.rs:83:21: 83:51
    let mut _103: &str;                  // in scope 0 at src/main.rs:83:43: 83:50
    let _104: &str;                      // in scope 0 at src/main.rs:83:43: 83:50
    let mut _105: clap::Arg;             // in scope 0 at src/main.rs:86:29: 88:73
    let mut _106: clap::Arg;             // in scope 0 at src/main.rs:86:29: 87:91
    let mut _107: clap::Arg;             // in scope 0 at src/main.rs:86:29: 86:52
    let mut _108: &str;                  // in scope 0 at src/main.rs:86:44: 86:51
    let _109: &str;                      // in scope 0 at src/main.rs:86:44: 86:51
    let mut _110: &str;                  // in scope 0 at src/main.rs:87:39: 87:90
    let _111: &str;                      // in scope 0 at src/main.rs:87:39: 87:90
    let mut _112: &[&str];               // in scope 0 at src/main.rs:88:50: 88:72
    let mut _113: &[&str; 3];            // in scope 0 at src/main.rs:88:50: 88:72
    let _114: &[&str; 3];                // in scope 0 at src/main.rs:88:50: 88:72
    let mut _115: clap::App;             // in scope 0 at src/main.rs:93:13: 139:18
    let mut _116: clap::App;             // in scope 0 at src/main.rs:93:13: 121:18
    let mut _117: clap::App;             // in scope 0 at src/main.rs:93:13: 115:18
    let mut _118: clap::App;             // in scope 0 at src/main.rs:93:13: 102:18
    let mut _119: clap::App;             // in scope 0 at src/main.rs:93:13: 96:97
    let mut _120: clap::App;             // in scope 0 at src/main.rs:93:13: 94:62
    let mut _121: clap::App;             // in scope 0 at src/main.rs:93:13: 93:55
    let mut _122: &str;                  // in scope 0 at src/main.rs:93:35: 93:54
    let _123: &str;                      // in scope 0 at src/main.rs:93:35: 93:54
    let mut _124: clap::ArgGroup;        // in scope 0 at src/main.rs:98:21: 101:46
    let mut _125: clap::ArgGroup;        // in scope 0 at src/main.rs:98:21: 100:40
    let mut _126: clap::ArgGroup;        // in scope 0 at src/main.rs:98:21: 99:43
    let mut _127: clap::ArgGroup;        // in scope 0 at src/main.rs:98:21: 98:65
    let mut _128: &str;                  // in scope 0 at src/main.rs:98:41: 98:64
    let _129: &str;                      // in scope 0 at src/main.rs:98:41: 98:64
    let mut _130: &str;                  // in scope 0 at src/main.rs:99:30: 99:42
    let _131: &str;                      // in scope 0 at src/main.rs:99:30: 99:42
    let mut _132: &str;                  // in scope 0 at src/main.rs:100:30: 100:39
    let _133: &str;                      // in scope 0 at src/main.rs:100:30: 100:39
    let mut _134: &str;                  // in scope 0 at src/main.rs:101:30: 101:45
    let _135: &str;                      // in scope 0 at src/main.rs:101:30: 101:45
    let mut _136: clap::Arg;             // in scope 0 at src/main.rs:104:21: 114:26
    let mut _137: clap::Arg;             // in scope 0 at src/main.rs:104:21: 108:43
    let mut _138: clap::Arg;             // in scope 0 at src/main.rs:104:21: 107:41
    let mut _139: clap::Arg;             // in scope 0 at src/main.rs:104:21: 106:46
    let mut _140: clap::Arg;             // in scope 0 at src/main.rs:104:21: 105:41
    let mut _141: clap::Arg;             // in scope 0 at src/main.rs:104:21: 104:46
    let mut _142: &str;                  // in scope 0 at src/main.rs:104:36: 104:45
    let _143: &str;                      // in scope 0 at src/main.rs:104:36: 104:45
    let mut _144: &str;                  // in scope 0 at src/main.rs:105:31: 105:40
    let _145: &str;                      // in scope 0 at src/main.rs:105:31: 105:40
    let mut _146: &str;                  // in scope 0 at src/main.rs:106:31: 106:45
    let _147: &str;                      // in scope 0 at src/main.rs:106:31: 106:45
    let mut _148: &[&str];               // in scope 0 at src/main.rs:110:29: 113:53
    let _149: &[&str];                   // in scope 0 at src/main.rs:110:29: 113:53
    let mut _150: &std::vec::Vec<&str>;  // in scope 0 at src/main.rs:110:29: 113:53
    let _151: &std::vec::Vec<&str>;      // in scope 0 at src/main.rs:110:29: 113:53
    let _152: std::vec::Vec<&str>;       // in scope 0 at src/main.rs:110:30: 113:53
    let mut _153: std::iter::Map<std::slice::Iter<system76_power::charge_thresholds::ChargeProfile>, [closure@src/main.rs:112:38: 112:55]>; // in scope 0 at src/main.rs:110:30: 112:56
    let mut _154: std::slice::Iter<system76_power::charge_thresholds::ChargeProfile>; // in scope 0 at src/main.rs:110:30: 111:40
    let mut _155: &[system76_power::charge_thresholds::ChargeProfile]; // in scope 0 at src/main.rs:110:30: 111:40
    let _156: &[system76_power::charge_thresholds::ChargeProfile]; // in scope 0 at src/main.rs:110:30: 111:40
    let mut _157: &std::vec::Vec<system76_power::charge_thresholds::ChargeProfile>; // in scope 0 at src/main.rs:110:30: 111:40
    let _158: std::vec::Vec<system76_power::charge_thresholds::ChargeProfile>; // in scope 0 at src/main.rs:110:30: 110:51
    let mut _159: [closure@src/main.rs:112:38: 112:55]; // in scope 0 at src/main.rs:112:38: 112:55
    let mut _160: clap::Arg;             // in scope 0 at src/main.rs:117:21: 120:41
    let mut _161: clap::Arg;             // in scope 0 at src/main.rs:117:21: 119:47
    let mut _162: clap::Arg;             // in scope 0 at src/main.rs:117:21: 118:47
    let mut _163: clap::Arg;             // in scope 0 at src/main.rs:117:21: 117:52
    let mut _164: &str;                  // in scope 0 at src/main.rs:117:36: 117:51
    let _165: &str;                      // in scope 0 at src/main.rs:117:36: 117:51
    let mut _166: &str;                  // in scope 0 at src/main.rs:118:31: 118:46
    let _167: &str;                      // in scope 0 at src/main.rs:118:31: 118:46
    let mut _168: &str;                  // in scope 0 at src/main.rs:119:31: 119:46
    let _169: &str;                      // in scope 0 at src/main.rs:119:31: 119:46
    let mut _170: clap::Arg;             // in scope 0 at src/main.rs:123:21: 138:41
    let mut _171: clap::Arg;             // in scope 0 at src/main.rs:123:21: 137:56
    let mut _172: clap::Arg;             // in scope 0 at src/main.rs:123:21: 136:39
    let mut _173: clap::Arg;             // in scope 0 at src/main.rs:123:21: 133:45
    let mut _174: clap::Arg;             // in scope 0 at src/main.rs:123:21: 132:27
    let mut _175: clap::Arg;             // in scope 0 at src/main.rs:123:21: 124:51
    let mut _176: clap::Arg;             // in scope 0 at src/main.rs:123:21: 123:49
    let mut _177: &str;                  // in scope 0 at src/main.rs:123:36: 123:48
    let _178: &str;                      // in scope 0 at src/main.rs:123:36: 123:48
    let mut _179: &str;                  // in scope 0 at src/main.rs:124:31: 124:50
    let _180: &str;                      // in scope 0 at src/main.rs:124:31: 124:50
    let mut _181: [closure@src/main.rs:125:36: 132:26]; // in scope 0 at src/main.rs:125:36: 132:26
    let mut _182: &[&str];               // in scope 0 at src/main.rs:137:38: 137:55
    let mut _183: &[&str; 2];            // in scope 0 at src/main.rs:137:38: 137:55
    let _184: &[&str; 2];                // in scope 0 at src/main.rs:137:38: 137:55
    let mut _186: (&str, std::option::Option<&clap::ArgMatches>); // in scope 0 at src/main.rs:143:21: 143:41
    let mut _187: &clap::ArgMatches;     // in scope 0 at src/main.rs:143:21: 143:41
    let mut _188: bool;                  // in scope 0 at src/main.rs:144:10: 144:18
    let mut _189: isize;                 // in scope 0 at src/main.rs:144:20: 144:33
    let mut _190: isize;                 // in scope 0 at src/main.rs:162:22: 162:35
    let mut _192: std::result::Result<(), fern::errors::InitError>; // in scope 0 at src/main.rs:145:31: 151:15
    let mut _193: log::LevelFilter;      // in scope 0 at src/main.rs:145:46: 151:14
    let mut _194: bool;                  // in scope 0 at src/main.rs:145:49: 145:78
    let mut _195: &clap::ArgMatches;     // in scope 0 at src/main.rs:145:49: 145:78
    let mut _196: bool;                  // in scope 0 at src/main.rs:147:23: 147:50
    let mut _197: &clap::ArgMatches;     // in scope 0 at src/main.rs:147:23: 147:50
    let mut _198: isize;                 // in scope 0 at src/main.rs:145:20: 145:28
    let _200: ();                        // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:9: 156:63
    let mut _201: std::fmt::Arguments;   // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let mut _202: &[&str];               // in scope 0 at src/main.rs:152:27: 152:57
    let mut _203: &[&str; 2];            // in scope 0 at src/main.rs:152:27: 152:57
    let _204: &[&str; 2];                // in scope 0 at src/main.rs:152:27: 152:57
    let mut _205: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let mut _206: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let _207: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let _208: [std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let mut _209: (&fern::errors::InitError,); // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let mut _210: &fern::errors::InitError; // in scope 0 at src/main.rs:152:59: 152:62
    let mut _212: std::fmt::ArgumentV1;  // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let mut _213: &fern::errors::InitError; // in scope 0 at src/main.rs:152:59: 152:62
    let mut _214: for<'r, 's, 't0> fn(&'r fern::errors::InitError, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at src/main.rs:152:59: 152:62
    let mut _215: u32;                   // in scope 0 at src/main.rs:156:16: 156:42
    let mut _216: std::string::String;   // in scope 0 at src/main.rs:159:21: 159:54
    let mut _217: &str;                  // in scope 0 at src/main.rs:159:21: 159:54
    let _218: &str;                      // in scope 0 at src/main.rs:159:21: 159:42
    let mut _221: &str;                  // in scope 0 at src/main.rs:162:55: 162:65
    let mut _222: &clap::ArgMatches;     // in scope 0 at src/main.rs:162:67: 162:74
    let mut _223: isize;                 // in scope 0 at src/main.rs:167:9: 167:15
    let _225: ();                        // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:9: 156:63
    let mut _226: std::fmt::Arguments;   // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let mut _227: &[&str];               // in scope 0 at src/main.rs:169:23: 169:27
    let mut _228: &[&str; 2];            // in scope 0 at src/main.rs:169:23: 169:27
    let _229: &[&str; 2];                // in scope 0 at src/main.rs:169:23: 169:27
    let mut _230: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let mut _231: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let _232: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let _233: [std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let mut _234: (&std::string::String,); // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let mut _235: &std::string::String;  // in scope 0 at src/main.rs:169:29: 169:32
    let mut _237: std::fmt::ArgumentV1;  // in scope 0 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
    let mut _238: &std::string::String;  // in scope 0 at src/main.rs:169:29: 169:32
    let mut _239: for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at src/main.rs:169:29: 169:32
    let mut _242: &[&str; 2];            // in scope 0 at src/main.rs:137:38: 137:55
    let mut _243: &[&str; 3];            // in scope 0 at src/main.rs:88:50: 88:72
    let mut _244: &[&str; 3];            // in scope 0 at src/main.rs:51:42: 51:81
    let mut _245: bool;                  // in scope 0 at src/main.rs:139:17: 139:18
    let mut _246: bool;                  // in scope 0 at src/main.rs:121:17: 121:18
    let mut _247: bool;                  // in scope 0 at src/main.rs:114:25: 114:26
    let mut _248: bool;                  // in scope 0 at src/main.rs:115:17: 115:18
    let mut _249: bool;                  // in scope 0 at src/main.rs:140:9: 140:10
    let mut _250: bool;                  // in scope 0 at src/main.rs:102:17: 102:18
    let mut _251: bool;                  // in scope 0 at src/main.rs:89:25: 89:26
    let mut _252: bool;                  // in scope 0 at src/main.rs:90:17: 90:18
    let mut _253: bool;                  // in scope 0 at src/main.rs:81:17: 81:18
    let mut _254: bool;                  // in scope 0 at src/main.rs:77:17: 77:18
    let mut _255: bool;                  // in scope 0 at src/main.rs:74:17: 74:18
    let mut _256: bool;                  // in scope 0 at src/main.rs:70:17: 70:18
    let mut _257: bool;                  // in scope 0 at src/main.rs:66:17: 66:18
    let mut _258: bool;                  // in scope 0 at src/main.rs:91:9: 91:10
    let mut _259: bool;                  // in scope 0 at src/main.rs:53:17: 53:18
    let mut _260: bool;                  // in scope 0 at src/main.rs:54:9: 54:10
    let mut _261: bool;                  // in scope 0 at src/main.rs:38:17: 38:18
    let mut _262: bool;                  // in scope 0 at src/main.rs:30:17: 30:18
    let mut _263: bool;                  // in scope 0 at src/main.rs:39:9: 39:10
    scope 1 {
        debug matches => _1;             // in scope 1 at src/main.rs:9:9: 9:16
        let _185: std::result::Result<(), std::string::String>; // in scope 1 at src/main.rs:143:9: 143:12
        let _191: &clap::ArgMatches;     // in scope 1 at src/main.rs:144:25: 144:32
        let _219: &str;                  // in scope 1 at src/main.rs:162:10: 162:20
        let _220: &clap::ArgMatches;     // in scope 1 at src/main.rs:162:27: 162:34
        scope 2 {
            debug res => _185;           // in scope 2 at src/main.rs:143:9: 143:12
            let _224: std::string::String; // in scope 2 at src/main.rs:168:13: 168:16
            scope 8 {
                debug err => _224;       // in scope 8 at src/main.rs:168:13: 168:16
                let _236: (&std::string::String,); // in scope 8 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
                let mut _240: &[&str; 2]; // in scope 8 at src/main.rs:169:23: 169:27
                scope 9 {
                    debug _args => _236; // in scope 9 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
                }
            }
        }
        scope 3 {
            debug matches => _191;       // in scope 3 at src/main.rs:144:25: 144:32
            let _199: fern::errors::InitError; // in scope 3 at src/main.rs:145:24: 145:27
            let _211: (&fern::errors::InitError,); // in scope 3 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
            let mut _241: &[&str; 2];    // in scope 3 at src/main.rs:152:27: 152:57
            scope 4 {
                debug why => _199;       // in scope 4 at src/main.rs:145:24: 145:27
            }
            scope 5 {
                debug _args => _211;     // in scope 5 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
            }
            scope 6 {
            }
        }
        scope 7 {
            debug subcommand => _219;    // in scope 7 at src/main.rs:162:10: 162:20
            debug matches => _220;       // in scope 7 at src/main.rs:162:27: 162:34
        }
    }

    bb0: {
        _249 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _247 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _256 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _253 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _250 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _245 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _260 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _262 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _255 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _252 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _248 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _258 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _259 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _257 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _254 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _251 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _261 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _263 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _246 = const false;              // scope 0 at src/main.rs:9:9: 9:16
        _12 = App::new::<&str>(const "system76-power") -> bb1; // scope 0 at src/main.rs:9:19: 9:45
                                         // mir::Constant
                                         // + span: src/main.rs:9:19: 9:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> clap::App {clap::App::new::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 121, 115, 116, 101, 109, 55, 54, 45, 112, 111, 119, 101, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })
                                         // mir::Constant
                                         // + span: src/main.rs:9:28: 9:44
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 121, 115, 116, 101, 109, 55, 54, 45, 112, 111, 119, 101, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }
    }

    bb1: {
        _11 = App::about::<&str>(move _12, const "Utility for managing graphics and power profiles") -> bb2; // scope 0 at src/main.rs:9:19: 10:67
                                         // mir::Constant
                                         // + span: src/main.rs:10:10: 10:15
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [85, 116, 105, 108, 105, 116, 121, 32, 102, 111, 114, 32, 109, 97, 110, 97, 103, 105, 110, 103, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 97, 110, 100, 32, 112, 111, 119, 101, 114, 32, 112, 114, 111, 102, 105, 108, 101, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [281474976710655], len: Size { raw: 48 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 48 })
                                         // mir::Constant
                                         // + span: src/main.rs:10:16: 10:66
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [85, 116, 105, 108, 105, 116, 121, 32, 102, 111, 114, 32, 109, 97, 110, 97, 103, 105, 110, 103, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 97, 110, 100, 32, 112, 111, 119, 101, 114, 32, 112, 114, 111, 102, 105, 108, 101, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [281474976710655], len: Size { raw: 48 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 48 }) }
    }

    bb2: {
        _10 = App::version::<&str>(move _11, const "1.1.17") -> bb3; // scope 0 at src/main.rs:9:19: 11:44
                                         // mir::Constant
                                         // + span: src/main.rs:11:10: 11:17
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::version::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [49, 46, 49, 46, 49, 55], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/main.rs:11:18: 11:43
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [49, 46, 49, 46, 49, 55], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
    }

    bb3: {
        discriminant(_13) = 8;           // scope 0 at src/main.rs:12:25: 12:49
        _9 = App::global_setting(move _10, move _13) -> bb4; // scope 0 at src/main.rs:9:19: 12:50
                                         // mir::Constant
                                         // + span: src/main.rs:12:10: 12:24
                                         // + literal: Const { ty: fn(clap::App, clap::AppSettings) -> clap::App {clap::App::global_setting}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        discriminant(_14) = 30;          // scope 0 at src/main.rs:13:25: 13:56
        _8 = App::global_setting(move _9, move _14) -> bb5; // scope 0 at src/main.rs:9:19: 13:57
                                         // mir::Constant
                                         // + span: src/main.rs:13:10: 13:24
                                         // + literal: Const { ty: fn(clap::App, clap::AppSettings) -> clap::App {clap::App::global_setting}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        discriminant(_15) = 31;          // scope 0 at src/main.rs:14:25: 14:60
        _7 = App::global_setting(move _8, move _15) -> bb6; // scope 0 at src/main.rs:9:19: 14:61
                                         // mir::Constant
                                         // + span: src/main.rs:14:10: 14:24
                                         // + literal: Const { ty: fn(clap::App, clap::AppSettings) -> clap::App {clap::App::global_setting}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        discriminant(_16) = 26;          // scope 0 at src/main.rs:15:18: 15:57
        _6 = App::setting(move _7, move _16) -> bb7; // scope 0 at src/main.rs:9:19: 15:58
                                         // mir::Constant
                                         // + span: src/main.rs:15:10: 15:17
                                         // + literal: Const { ty: fn(clap::App, clap::AppSettings) -> clap::App {clap::App::setting}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _263 = const true;               // scope 0 at src/main.rs:15:57: 15:58
        _23 = const "daemon";            // scope 0 at src/main.rs:17:35: 17:43
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [100, 97, 101, 109, 111, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/main.rs:17:35: 17:43
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [100, 97, 101, 109, 111, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _22 = _23;                       // scope 0 at src/main.rs:17:35: 17:43
        _21 = SubCommand::with_name(move _22) -> [return: bb8, unwind: bb184]; // scope 0 at src/main.rs:17:13: 17:44
                                         // mir::Constant
                                         // + span: src/main.rs:17:13: 17:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> clap::App {clap::SubCommand::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _20 = App::about::<&str>(move _21, const "Runs the program in daemon mode") -> [return: bb9, unwind: bb184]; // scope 0 at src/main.rs:17:13: 18:58
                                         // mir::Constant
                                         // + span: src/main.rs:18:18: 18:23
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [82, 117, 110, 115, 32, 116, 104, 101, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 110, 32, 100, 97, 101, 109, 111, 110, 32, 109, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2147483647], len: Size { raw: 31 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 31 })
                                         // mir::Constant
                                         // + span: src/main.rs:18:24: 18:57
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [82, 117, 110, 115, 32, 116, 104, 101, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 110, 32, 100, 97, 101, 109, 111, 110, 32, 109, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2147483647], len: Size { raw: 31 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 31 }) }
    }

    bb9: {
        _19 = App::long_about::<&str>(move _20, const "Registers a new DBUS service and starts an event loop to listen for, and respond to, DBUS events from clients") -> [return: bb10, unwind: bb184]; // scope 0 at src/main.rs:17:13: 22:18
                                         // mir::Constant
                                         // + span: src/main.rs:19:18: 19:28
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::long_about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [82, 101, 103, 105, 115, 116, 101, 114, 115, 32, 97, 32, 110, 101, 119, 32, 68, 66, 85, 83, 32, 115, 101, 114, 118, 105, 99, 101, 32, 97, 110, 100, 32, 115, 116, 97, 114, 116, 115, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 111, 111, 112, 32, 116, 111, 32, 108, 105, 115, 116, 101, 110, 32, 102, 111, 114, 44, 32, 97, 110, 100, 32, 114, 101, 115, 112, 111, 110, 100, 32, 116, 111, 44, 32, 68, 66, 85, 83, 32, 101, 118, 101, 110, 116, 115, 32, 102, 114, 111, 109, 32, 99, 108, 105, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [18446744073709551615, 35184372088831], len: Size { raw: 109 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 109 })
                                         // mir::Constant
                                         // + span: src/main.rs:20:21: 21:59
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [82, 101, 103, 105, 115, 116, 101, 114, 115, 32, 97, 32, 110, 101, 119, 32, 68, 66, 85, 83, 32, 115, 101, 114, 118, 105, 99, 101, 32, 97, 110, 100, 32, 115, 116, 97, 114, 116, 115, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 111, 111, 112, 32, 116, 111, 32, 108, 105, 115, 116, 101, 110, 32, 102, 111, 114, 44, 32, 97, 110, 100, 32, 114, 101, 115, 112, 111, 110, 100, 32, 116, 111, 44, 32, 68, 66, 85, 83, 32, 101, 118, 101, 110, 116, 115, 32, 102, 114, 111, 109, 32, 99, 108, 105, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [18446744073709551615, 35184372088831], len: Size { raw: 109 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 109 }) }
    }

    bb10: {
        _262 = const true;               // scope 0 at src/main.rs:22:17: 22:18
        _31 = const "quiet";             // scope 0 at src/main.rs:24:36: 24:43
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [113, 117, 105, 101, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/main.rs:24:36: 24:43
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [113, 117, 105, 101, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _30 = _31;                       // scope 0 at src/main.rs:24:36: 24:43
        _29 = Arg::with_name(move _30) -> [return: bb11, unwind: bb182]; // scope 0 at src/main.rs:24:21: 24:44
                                         // mir::Constant
                                         // + span: src/main.rs:24:21: 24:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&str) -> clap::Arg {clap::Arg::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _28 = Arg::short::<&str>(move _29, const "q") -> [return: bb12, unwind: bb182]; // scope 0 at src/main.rs:24:21: 25:36
                                         // mir::Constant
                                         // + span: src/main.rs:25:26: 25:31
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::short::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [113], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/main.rs:25:32: 25:35
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [113], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
    }

    bb12: {
        _33 = const "quiet";             // scope 0 at src/main.rs:26:31: 26:38
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [113, 117, 105, 101, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/main.rs:26:31: 26:38
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [113, 117, 105, 101, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _32 = _33;                       // scope 0 at src/main.rs:26:31: 26:38
        _27 = Arg::long(move _28, move _32) -> [return: bb13, unwind: bb182]; // scope 0 at src/main.rs:24:21: 26:39
                                         // mir::Constant
                                         // + span: src/main.rs:26:26: 26:30
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::long}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _35 = const "Set the verbosity of daemon logs to 'off' [default is 'info']"; // scope 0 at src/main.rs:27:31: 27:94
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 101, 32, 118, 101, 114, 98, 111, 115, 105, 116, 121, 32, 111, 102, 32, 100, 97, 101, 109, 111, 110, 32, 108, 111, 103, 115, 32, 116, 111, 32, 39, 111, 102, 102, 39, 32, 91, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 39, 105, 110, 102, 111, 39, 93], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2305843009213693951], len: Size { raw: 61 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 61 })
                                         // mir::Constant
                                         // + span: src/main.rs:27:31: 27:94
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 101, 32, 118, 101, 114, 98, 111, 115, 105, 116, 121, 32, 111, 102, 32, 100, 97, 101, 109, 111, 110, 32, 108, 111, 103, 115, 32, 116, 111, 32, 39, 111, 102, 102, 39, 32, 91, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 39, 105, 110, 102, 111, 39, 93], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2305843009213693951], len: Size { raw: 61 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 61 }) }
        _34 = _35;                       // scope 0 at src/main.rs:27:31: 27:94
        _26 = Arg::help(move _27, move _34) -> [return: bb14, unwind: bb182]; // scope 0 at src/main.rs:24:21: 27:95
                                         // mir::Constant
                                         // + span: src/main.rs:27:26: 27:30
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::help}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _25 = Arg::global(move _26, const true) -> [return: bb15, unwind: bb182]; // scope 0 at src/main.rs:24:21: 28:38
                                         // mir::Constant
                                         // + span: src/main.rs:28:26: 28:32
                                         // + literal: Const { ty: fn(clap::Arg, bool) -> clap::Arg {clap::Arg::global}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _37 = const "verbosity";         // scope 0 at src/main.rs:29:32: 29:43
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [118, 101, 114, 98, 111, 115, 105, 116, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/main.rs:29:32: 29:43
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [118, 101, 114, 98, 111, 115, 105, 116, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _36 = _37;                       // scope 0 at src/main.rs:29:32: 29:43
        _24 = Arg::group(move _25, move _36) -> [return: bb16, unwind: bb182]; // scope 0 at src/main.rs:24:21: 29:44
                                         // mir::Constant
                                         // + span: src/main.rs:29:26: 29:31
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::group}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _262 = const false;              // scope 0 at src/main.rs:17:13: 30:18
        _18 = App::arg::<Arg>(move _19, move _24) -> [return: bb17, unwind: bb182]; // scope 0 at src/main.rs:17:13: 30:18
                                         // mir::Constant
                                         // + span: src/main.rs:23:18: 23:21
                                         // + literal: Const { ty: fn(clap::App, clap::Arg) -> clap::App {clap::App::arg::<clap::Arg>}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        _261 = const true;               // scope 0 at src/main.rs:30:17: 30:18
        _262 = const false;              // scope 0 at src/main.rs:30:17: 30:18
        _45 = const "verbose";           // scope 0 at src/main.rs:32:36: 32:45
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [118, 101, 114, 98, 111, 115, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/main.rs:32:36: 32:45
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [118, 101, 114, 98, 111, 115, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _44 = _45;                       // scope 0 at src/main.rs:32:36: 32:45
        _43 = Arg::with_name(move _44) -> [return: bb18, unwind: bb180]; // scope 0 at src/main.rs:32:21: 32:46
                                         // mir::Constant
                                         // + span: src/main.rs:32:21: 32:35
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&str) -> clap::Arg {clap::Arg::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        _42 = Arg::short::<&str>(move _43, const "v") -> [return: bb19, unwind: bb180]; // scope 0 at src/main.rs:32:21: 33:36
                                         // mir::Constant
                                         // + span: src/main.rs:33:26: 33:31
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::short::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [118], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/main.rs:33:32: 33:35
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [118], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
    }

    bb19: {
        _47 = const "verbose";           // scope 0 at src/main.rs:34:31: 34:40
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [118, 101, 114, 98, 111, 115, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/main.rs:34:31: 34:40
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [118, 101, 114, 98, 111, 115, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _46 = _47;                       // scope 0 at src/main.rs:34:31: 34:40
        _41 = Arg::long(move _42, move _46) -> [return: bb20, unwind: bb180]; // scope 0 at src/main.rs:32:21: 34:41
                                         // mir::Constant
                                         // + span: src/main.rs:34:26: 34:30
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::long}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _49 = const "Set the verbosity of daemon logs to 'debug' [default is 'info']"; // scope 0 at src/main.rs:35:31: 35:96
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 101, 32, 118, 101, 114, 98, 111, 115, 105, 116, 121, 32, 111, 102, 32, 100, 97, 101, 109, 111, 110, 32, 108, 111, 103, 115, 32, 116, 111, 32, 39, 100, 101, 98, 117, 103, 39, 32, 91, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 39, 105, 110, 102, 111, 39, 93], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [9223372036854775807], len: Size { raw: 63 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 63 })
                                         // mir::Constant
                                         // + span: src/main.rs:35:31: 35:96
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 101, 32, 118, 101, 114, 98, 111, 115, 105, 116, 121, 32, 111, 102, 32, 100, 97, 101, 109, 111, 110, 32, 108, 111, 103, 115, 32, 116, 111, 32, 39, 100, 101, 98, 117, 103, 39, 32, 91, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 39, 105, 110, 102, 111, 39, 93], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [9223372036854775807], len: Size { raw: 63 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 63 }) }
        _48 = _49;                       // scope 0 at src/main.rs:35:31: 35:96
        _40 = Arg::help(move _41, move _48) -> [return: bb21, unwind: bb180]; // scope 0 at src/main.rs:32:21: 35:97
                                         // mir::Constant
                                         // + span: src/main.rs:35:26: 35:30
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::help}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _39 = Arg::global(move _40, const true) -> [return: bb22, unwind: bb180]; // scope 0 at src/main.rs:32:21: 36:38
                                         // mir::Constant
                                         // + span: src/main.rs:36:26: 36:32
                                         // + literal: Const { ty: fn(clap::Arg, bool) -> clap::Arg {clap::Arg::global}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        _51 = const "verbosity";         // scope 0 at src/main.rs:37:32: 37:43
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [118, 101, 114, 98, 111, 115, 105, 116, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/main.rs:37:32: 37:43
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [118, 101, 114, 98, 111, 115, 105, 116, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _50 = _51;                       // scope 0 at src/main.rs:37:32: 37:43
        _38 = Arg::group(move _39, move _50) -> [return: bb23, unwind: bb180]; // scope 0 at src/main.rs:32:21: 37:44
                                         // mir::Constant
                                         // + span: src/main.rs:37:26: 37:31
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::group}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        _261 = const false;              // scope 0 at src/main.rs:17:13: 38:18
        _17 = App::arg::<Arg>(move _18, move _38) -> [return: bb24, unwind: bb180]; // scope 0 at src/main.rs:17:13: 38:18
                                         // mir::Constant
                                         // + span: src/main.rs:31:18: 31:21
                                         // + literal: Const { ty: fn(clap::App, clap::Arg) -> clap::App {clap::App::arg::<clap::Arg>}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        _261 = const false;              // scope 0 at src/main.rs:38:17: 38:18
        _263 = const false;              // scope 0 at src/main.rs:9:19: 39:10
        _5 = App::subcommand(move _6, move _17) -> [return: bb25, unwind: bb184]; // scope 0 at src/main.rs:9:19: 39:10
                                         // mir::Constant
                                         // + span: src/main.rs:16:10: 16:20
                                         // + literal: Const { ty: fn(clap::App, clap::App) -> clap::App {clap::App::subcommand}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        _260 = const true;               // scope 0 at src/main.rs:39:9: 39:10
        _263 = const false;              // scope 0 at src/main.rs:39:9: 39:10
        _57 = const "profile";           // scope 0 at src/main.rs:41:35: 41:44
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/main.rs:41:35: 41:44
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _56 = _57;                       // scope 0 at src/main.rs:41:35: 41:44
        _55 = SubCommand::with_name(move _56) -> [return: bb26, unwind: bb178]; // scope 0 at src/main.rs:41:13: 41:45
                                         // mir::Constant
                                         // + span: src/main.rs:41:13: 41:34
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> clap::App {clap::SubCommand::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        _54 = App::about::<&str>(move _55, const "Query or set the power profile") -> [return: bb27, unwind: bb178]; // scope 0 at src/main.rs:41:13: 42:57
                                         // mir::Constant
                                         // + span: src/main.rs:42:18: 42:23
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [81, 117, 101, 114, 121, 32, 111, 114, 32, 115, 101, 116, 32, 116, 104, 101, 32, 112, 111, 119, 101, 114, 32, 112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 })
                                         // mir::Constant
                                         // + span: src/main.rs:42:24: 42:56
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [81, 117, 101, 114, 121, 32, 111, 114, 32, 115, 101, 116, 32, 116, 104, 101, 32, 112, 111, 119, 101, 114, 32, 112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 }) }
    }

    bb27: {
        _53 = App::long_about::<&str>(move _54, const "Queries or sets the power profile.\n\n - If an argument is not provided, the power profile will be queried\n - Otherwise, that profile will be set, if it is a valid profile") -> [return: bb28, unwind: bb178]; // scope 0 at src/main.rs:41:13: 47:18
                                         // mir::Constant
                                         // + span: src/main.rs:43:18: 43:28
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::long_about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [81, 117, 101, 114, 105, 101, 115, 32, 111, 114, 32, 115, 101, 116, 115, 32, 116, 104, 101, 32, 112, 111, 119, 101, 114, 32, 112, 114, 111, 102, 105, 108, 101, 46, 10, 10, 32, 45, 32, 73, 102, 32, 97, 110, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 112, 114, 111, 118, 105, 100, 101, 100, 44, 32, 116, 104, 101, 32, 112, 111, 119, 101, 114, 32, 112, 114, 111, 102, 105, 108, 101, 32, 119, 105, 108, 108, 32, 98, 101, 32, 113, 117, 101, 114, 105, 101, 100, 10, 32, 45, 32, 79, 116, 104, 101, 114, 119, 105, 115, 101, 44, 32, 116, 104, 97, 116, 32, 112, 114, 111, 102, 105, 108, 101, 32, 119, 105, 108, 108, 32, 98, 101, 32, 115, 101, 116, 44, 32, 105, 102, 32, 105, 116, 32, 105, 115, 32, 97, 32, 118, 97, 108, 105, 100, 32, 112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [18446744073709551615, 18446744073709551615, 2199023255551], len: Size { raw: 169 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 169 })
                                         // mir::Constant
                                         // + span: src/main.rs:44:21: 46:41
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [81, 117, 101, 114, 105, 101, 115, 32, 111, 114, 32, 115, 101, 116, 115, 32, 116, 104, 101, 32, 112, 111, 119, 101, 114, 32, 112, 114, 111, 102, 105, 108, 101, 46, 10, 10, 32, 45, 32, 73, 102, 32, 97, 110, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 112, 114, 111, 118, 105, 100, 101, 100, 44, 32, 116, 104, 101, 32, 112, 111, 119, 101, 114, 32, 112, 114, 111, 102, 105, 108, 101, 32, 119, 105, 108, 108, 32, 98, 101, 32, 113, 117, 101, 114, 105, 101, 100, 10, 32, 45, 32, 79, 116, 104, 101, 114, 119, 105, 115, 101, 44, 32, 116, 104, 97, 116, 32, 112, 114, 111, 102, 105, 108, 101, 32, 119, 105, 108, 108, 32, 98, 101, 32, 115, 101, 116, 44, 32, 105, 102, 32, 105, 116, 32, 105, 115, 32, 97, 32, 118, 97, 108, 105, 100, 32, 112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [18446744073709551615, 18446744073709551615, 2199023255551], len: Size { raw: 169 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 169 }) }
    }

    bb28: {
        _259 = const true;               // scope 0 at src/main.rs:47:17: 47:18
        _63 = const "profile";           // scope 0 at src/main.rs:49:36: 49:45
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/main.rs:49:36: 49:45
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _62 = _63;                       // scope 0 at src/main.rs:49:36: 49:45
        _61 = Arg::with_name(move _62) -> [return: bb29, unwind: bb176]; // scope 0 at src/main.rs:49:21: 49:46
                                         // mir::Constant
                                         // + span: src/main.rs:49:21: 49:35
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&str) -> clap::Arg {clap::Arg::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb29: {
        _65 = const "set the power profile"; // scope 0 at src/main.rs:50:31: 50:54
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 101, 116, 32, 116, 104, 101, 32, 112, 111, 119, 101, 114, 32, 112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2097151], len: Size { raw: 21 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 21 })
                                         // mir::Constant
                                         // + span: src/main.rs:50:31: 50:54
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 101, 116, 32, 116, 104, 101, 32, 112, 111, 119, 101, 114, 32, 112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2097151], len: Size { raw: 21 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 21 }) }
        _64 = _65;                       // scope 0 at src/main.rs:50:31: 50:54
        _60 = Arg::help(move _61, move _64) -> [return: bb30, unwind: bb176]; // scope 0 at src/main.rs:49:21: 50:55
                                         // mir::Constant
                                         // + span: src/main.rs:50:26: 50:30
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::help}, val: Value(Scalar(<ZST>)) }
    }

    bb30: {
        _244 = const main::promoted[4];  // scope 0 at src/main.rs:51:42: 51:81
                                         // ty::Const
                                         // + ty: &[&str; 3]
                                         // + val: Unevaluated(main, [], Some(promoted[4]))
                                         // mir::Constant
                                         // + span: src/main.rs:51:42: 51:81
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:38 ~ system76_power[fff1]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[4]) }) }
        _68 = _244;                      // scope 0 at src/main.rs:51:42: 51:81
        _67 = _68;                       // scope 0 at src/main.rs:51:42: 51:81
        _66 = move _67 as &[&str] (Pointer(Unsize)); // scope 0 at src/main.rs:51:42: 51:81
        _59 = Arg::possible_values(move _60, move _66) -> [return: bb31, unwind: bb176]; // scope 0 at src/main.rs:49:21: 51:82
                                         // mir::Constant
                                         // + span: src/main.rs:51:26: 51:41
                                         // + literal: Const { ty: for<'r> fn(clap::Arg, &'r [&str]) -> clap::Arg {clap::Arg::possible_values}, val: Value(Scalar(<ZST>)) }
    }

    bb31: {
        _58 = Arg::required(move _59, const false) -> [return: bb32, unwind: bb176]; // scope 0 at src/main.rs:49:21: 52:41
                                         // mir::Constant
                                         // + span: src/main.rs:52:26: 52:34
                                         // + literal: Const { ty: fn(clap::Arg, bool) -> clap::Arg {clap::Arg::required}, val: Value(Scalar(<ZST>)) }
    }

    bb32: {
        _259 = const false;              // scope 0 at src/main.rs:41:13: 53:18
        _52 = App::arg::<Arg>(move _53, move _58) -> [return: bb33, unwind: bb176]; // scope 0 at src/main.rs:41:13: 53:18
                                         // mir::Constant
                                         // + span: src/main.rs:48:18: 48:21
                                         // + literal: Const { ty: fn(clap::App, clap::Arg) -> clap::App {clap::App::arg::<clap::Arg>}, val: Value(Scalar(<ZST>)) }
    }

    bb33: {
        _259 = const false;              // scope 0 at src/main.rs:53:17: 53:18
        _260 = const false;              // scope 0 at src/main.rs:9:19: 54:10
        _4 = App::subcommand(move _5, move _52) -> [return: bb34, unwind: bb178]; // scope 0 at src/main.rs:9:19: 54:10
                                         // mir::Constant
                                         // + span: src/main.rs:40:10: 40:20
                                         // + literal: Const { ty: fn(clap::App, clap::App) -> clap::App {clap::App::subcommand}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        _258 = const true;               // scope 0 at src/main.rs:54:9: 54:10
        _260 = const false;              // scope 0 at src/main.rs:54:9: 54:10
        _79 = const "graphics";          // scope 0 at src/main.rs:56:35: 56:45
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [103, 114, 97, 112, 104, 105, 99, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/main.rs:56:35: 56:45
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [103, 114, 97, 112, 104, 105, 99, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
        _78 = _79;                       // scope 0 at src/main.rs:56:35: 56:45
        _77 = SubCommand::with_name(move _78) -> [return: bb35, unwind: bb174]; // scope 0 at src/main.rs:56:13: 56:46
                                         // mir::Constant
                                         // + span: src/main.rs:56:13: 56:34
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> clap::App {clap::SubCommand::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb35: {
        _76 = App::about::<&str>(move _77, const "Query or set the graphics mode") -> [return: bb36, unwind: bb174]; // scope 0 at src/main.rs:56:13: 57:57
                                         // mir::Constant
                                         // + span: src/main.rs:57:18: 57:23
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [81, 117, 101, 114, 121, 32, 111, 114, 32, 115, 101, 116, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 109, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 })
                                         // mir::Constant
                                         // + span: src/main.rs:57:24: 57:56
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [81, 117, 101, 114, 121, 32, 111, 114, 32, 115, 101, 116, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 109, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1073741823], len: Size { raw: 30 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 30 }) }
    }

    bb36: {
        _75 = App::long_about::<&str>(move _76, const "Query or set the graphics mode.\n\n - If an argument is not provided, the graphics profile will be queried\n - Otherwise, that profile will be set, if it is a valid profile\n\nA reboot is required after switching modes.") -> [return: bb37, unwind: bb174]; // scope 0 at src/main.rs:56:13: 62:18
                                         // mir::Constant
                                         // + span: src/main.rs:58:18: 58:28
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::long_about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [81, 117, 101, 114, 121, 32, 111, 114, 32, 115, 101, 116, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 109, 111, 100, 101, 46, 10, 10, 32, 45, 32, 73, 102, 32, 97, 110, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 112, 114, 111, 118, 105, 100, 101, 100, 44, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 112, 114, 111, 102, 105, 108, 101, 32, 119, 105, 108, 108, 32, 98, 101, 32, 113, 117, 101, 114, 105, 101, 100, 10, 32, 45, 32, 79, 116, 104, 101, 114, 119, 105, 115, 101, 44, 32, 116, 104, 97, 116, 32, 112, 114, 111, 102, 105, 108, 101, 32, 119, 105, 108, 108, 32, 98, 101, 32, 115, 101, 116, 44, 32, 105, 102, 32, 105, 116, 32, 105, 115, 32, 97, 32, 118, 97, 108, 105, 100, 32, 112, 114, 111, 102, 105, 108, 101, 10, 10, 65, 32, 114, 101, 98, 111, 111, 116, 32, 105, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 97, 102, 116, 101, 114, 32, 115, 119, 105, 116, 99, 104, 105, 110, 103, 32, 109, 111, 100, 101, 115, 46], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [18446744073709551615, 18446744073709551615, 18446744073709551615, 4194303], len: Size { raw: 214 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 214 })
                                         // mir::Constant
                                         // + span: src/main.rs:59:21: 61:91
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [81, 117, 101, 114, 121, 32, 111, 114, 32, 115, 101, 116, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 109, 111, 100, 101, 46, 10, 10, 32, 45, 32, 73, 102, 32, 97, 110, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 112, 114, 111, 118, 105, 100, 101, 100, 44, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 112, 114, 111, 102, 105, 108, 101, 32, 119, 105, 108, 108, 32, 98, 101, 32, 113, 117, 101, 114, 105, 101, 100, 10, 32, 45, 32, 79, 116, 104, 101, 114, 119, 105, 115, 101, 44, 32, 116, 104, 97, 116, 32, 112, 114, 111, 102, 105, 108, 101, 32, 119, 105, 108, 108, 32, 98, 101, 32, 115, 101, 116, 44, 32, 105, 102, 32, 105, 116, 32, 105, 115, 32, 97, 32, 118, 97, 108, 105, 100, 32, 112, 114, 111, 102, 105, 108, 101, 10, 10, 65, 32, 114, 101, 98, 111, 111, 116, 32, 105, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 97, 102, 116, 101, 114, 32, 115, 119, 105, 116, 99, 104, 105, 110, 103, 32, 109, 111, 100, 101, 115, 46], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [18446744073709551615, 18446744073709551615, 18446744073709551615, 4194303], len: Size { raw: 214 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 214 }) }
    }

    bb37: {
        _257 = const true;               // scope 0 at src/main.rs:62:17: 62:18
        _83 = const "compute";           // scope 0 at src/main.rs:64:43: 64:52
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [99, 111, 109, 112, 117, 116, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/main.rs:64:43: 64:52
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 111, 109, 112, 117, 116, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _82 = _83;                       // scope 0 at src/main.rs:64:43: 64:52
        _81 = SubCommand::with_name(move _82) -> [return: bb38, unwind: bb172]; // scope 0 at src/main.rs:64:21: 64:53
                                         // mir::Constant
                                         // + span: src/main.rs:64:21: 64:42
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> clap::App {clap::SubCommand::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb38: {
        _80 = App::about::<&str>(move _81, const "Like integrated, but the dGPU is available for compute") -> [return: bb39, unwind: bb172]; // scope 0 at src/main.rs:64:21: 65:89
                                         // mir::Constant
                                         // + span: src/main.rs:65:26: 65:31
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [76, 105, 107, 101, 32, 105, 110, 116, 101, 103, 114, 97, 116, 101, 100, 44, 32, 98, 117, 116, 32, 116, 104, 101, 32, 100, 71, 80, 85, 32, 105, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 102, 111, 114, 32, 99, 111, 109, 112, 117, 116, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [18014398509481983], len: Size { raw: 54 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 54 })
                                         // mir::Constant
                                         // + span: src/main.rs:65:32: 65:88
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [76, 105, 107, 101, 32, 105, 110, 116, 101, 103, 114, 97, 116, 101, 100, 44, 32, 98, 117, 116, 32, 116, 104, 101, 32, 100, 71, 80, 85, 32, 105, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 102, 111, 114, 32, 99, 111, 109, 112, 117, 116, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [18014398509481983], len: Size { raw: 54 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 54 }) }
    }

    bb39: {
        _257 = const false;              // scope 0 at src/main.rs:56:13: 66:18
        _74 = App::subcommand(move _75, move _80) -> [return: bb40, unwind: bb172]; // scope 0 at src/main.rs:56:13: 66:18
                                         // mir::Constant
                                         // + span: src/main.rs:63:18: 63:28
                                         // + literal: Const { ty: fn(clap::App, clap::App) -> clap::App {clap::App::subcommand}, val: Value(Scalar(<ZST>)) }
    }

    bb40: {
        _256 = const true;               // scope 0 at src/main.rs:66:17: 66:18
        _257 = const false;              // scope 0 at src/main.rs:66:17: 66:18
        _87 = const "hybrid";            // scope 0 at src/main.rs:68:43: 68:51
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [104, 121, 98, 114, 105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/main.rs:68:43: 68:51
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 121, 98, 114, 105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _86 = _87;                       // scope 0 at src/main.rs:68:43: 68:51
        _85 = SubCommand::with_name(move _86) -> [return: bb41, unwind: bb170]; // scope 0 at src/main.rs:68:21: 68:52
                                         // mir::Constant
                                         // + span: src/main.rs:68:21: 68:42
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> clap::App {clap::SubCommand::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb41: {
        _84 = App::about::<&str>(move _85, const "Set the graphics mode to Hybrid (PRIME)") -> [return: bb42, unwind: bb170]; // scope 0 at src/main.rs:68:21: 69:74
                                         // mir::Constant
                                         // + span: src/main.rs:69:26: 69:31
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 109, 111, 100, 101, 32, 116, 111, 32, 72, 121, 98, 114, 105, 100, 32, 40, 80, 82, 73, 77, 69, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [549755813887], len: Size { raw: 39 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 39 })
                                         // mir::Constant
                                         // + span: src/main.rs:69:32: 69:73
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 109, 111, 100, 101, 32, 116, 111, 32, 72, 121, 98, 114, 105, 100, 32, 40, 80, 82, 73, 77, 69, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [549755813887], len: Size { raw: 39 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 39 }) }
    }

    bb42: {
        _256 = const false;              // scope 0 at src/main.rs:56:13: 70:18
        _73 = App::subcommand(move _74, move _84) -> [return: bb43, unwind: bb170]; // scope 0 at src/main.rs:56:13: 70:18
                                         // mir::Constant
                                         // + span: src/main.rs:67:18: 67:28
                                         // + literal: Const { ty: fn(clap::App, clap::App) -> clap::App {clap::App::subcommand}, val: Value(Scalar(<ZST>)) }
    }

    bb43: {
        _255 = const true;               // scope 0 at src/main.rs:70:17: 70:18
        _256 = const false;              // scope 0 at src/main.rs:70:17: 70:18
        _91 = const "integrated";        // scope 0 at src/main.rs:72:43: 72:55
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 103, 114, 97, 116, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/main.rs:72:43: 72:55
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 103, 114, 97, 116, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
        _90 = _91;                       // scope 0 at src/main.rs:72:43: 72:55
        _89 = SubCommand::with_name(move _90) -> [return: bb44, unwind: bb168]; // scope 0 at src/main.rs:72:21: 72:56
                                         // mir::Constant
                                         // + span: src/main.rs:72:21: 72:42
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> clap::App {clap::SubCommand::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb44: {
        _88 = App::about::<&str>(move _89, const "Set the graphics mode to integrated") -> [return: bb45, unwind: bb168]; // scope 0 at src/main.rs:72:21: 73:70
                                         // mir::Constant
                                         // + span: src/main.rs:73:26: 73:31
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 109, 111, 100, 101, 32, 116, 111, 32, 105, 110, 116, 101, 103, 114, 97, 116, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [34359738367], len: Size { raw: 35 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 35 })
                                         // mir::Constant
                                         // + span: src/main.rs:73:32: 73:69
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 109, 111, 100, 101, 32, 116, 111, 32, 105, 110, 116, 101, 103, 114, 97, 116, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [34359738367], len: Size { raw: 35 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 35 }) }
    }

    bb45: {
        _255 = const false;              // scope 0 at src/main.rs:56:13: 74:18
        _72 = App::subcommand(move _73, move _88) -> [return: bb46, unwind: bb168]; // scope 0 at src/main.rs:56:13: 74:18
                                         // mir::Constant
                                         // + span: src/main.rs:71:18: 71:28
                                         // + literal: Const { ty: fn(clap::App, clap::App) -> clap::App {clap::App::subcommand}, val: Value(Scalar(<ZST>)) }
    }

    bb46: {
        _254 = const true;               // scope 0 at src/main.rs:74:17: 74:18
        _255 = const false;              // scope 0 at src/main.rs:74:17: 74:18
        _95 = const "nvidia";            // scope 0 at src/main.rs:76:43: 76:51
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [110, 118, 105, 100, 105, 97], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/main.rs:76:43: 76:51
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [110, 118, 105, 100, 105, 97], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _94 = _95;                       // scope 0 at src/main.rs:76:43: 76:51
        _93 = SubCommand::with_name(move _94) -> [return: bb47, unwind: bb166]; // scope 0 at src/main.rs:76:21: 76:52
                                         // mir::Constant
                                         // + span: src/main.rs:76:21: 76:42
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> clap::App {clap::SubCommand::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb47: {
        _92 = App::about::<&str>(move _93, const "Set the graphics mode to NVIDIA") -> [return: bb48, unwind: bb166]; // scope 0 at src/main.rs:76:21: 76:93
                                         // mir::Constant
                                         // + span: src/main.rs:76:53: 76:58
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 109, 111, 100, 101, 32, 116, 111, 32, 78, 86, 73, 68, 73, 65], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2147483647], len: Size { raw: 31 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 31 })
                                         // mir::Constant
                                         // + span: src/main.rs:76:59: 76:92
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 109, 111, 100, 101, 32, 116, 111, 32, 78, 86, 73, 68, 73, 65], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2147483647], len: Size { raw: 31 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 31 }) }
    }

    bb48: {
        _254 = const false;              // scope 0 at src/main.rs:56:13: 77:18
        _71 = App::subcommand(move _72, move _92) -> [return: bb49, unwind: bb166]; // scope 0 at src/main.rs:56:13: 77:18
                                         // mir::Constant
                                         // + span: src/main.rs:75:18: 75:28
                                         // + literal: Const { ty: fn(clap::App, clap::App) -> clap::App {clap::App::subcommand}, val: Value(Scalar(<ZST>)) }
    }

    bb49: {
        _253 = const true;               // scope 0 at src/main.rs:77:17: 77:18
        _254 = const false;              // scope 0 at src/main.rs:77:17: 77:18
        _99 = const "switchable";        // scope 0 at src/main.rs:79:43: 79:55
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 119, 105, 116, 99, 104, 97, 98, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/main.rs:79:43: 79:55
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 119, 105, 116, 99, 104, 97, 98, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
        _98 = _99;                       // scope 0 at src/main.rs:79:43: 79:55
        _97 = SubCommand::with_name(move _98) -> [return: bb50, unwind: bb164]; // scope 0 at src/main.rs:79:21: 79:56
                                         // mir::Constant
                                         // + span: src/main.rs:79:21: 79:42
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> clap::App {clap::SubCommand::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb50: {
        _96 = App::about::<&str>(move _97, const "Determines if the system has switchable graphics") -> [return: bb51, unwind: bb164]; // scope 0 at src/main.rs:79:21: 80:83
                                         // mir::Constant
                                         // + span: src/main.rs:80:26: 80:31
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [68, 101, 116, 101, 114, 109, 105, 110, 101, 115, 32, 105, 102, 32, 116, 104, 101, 32, 115, 121, 115, 116, 101, 109, 32, 104, 97, 115, 32, 115, 119, 105, 116, 99, 104, 97, 98, 108, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [281474976710655], len: Size { raw: 48 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 48 })
                                         // mir::Constant
                                         // + span: src/main.rs:80:32: 80:82
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68, 101, 116, 101, 114, 109, 105, 110, 101, 115, 32, 105, 102, 32, 116, 104, 101, 32, 115, 121, 115, 116, 101, 109, 32, 104, 97, 115, 32, 115, 119, 105, 116, 99, 104, 97, 98, 108, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [281474976710655], len: Size { raw: 48 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 48 }) }
    }

    bb51: {
        _253 = const false;              // scope 0 at src/main.rs:56:13: 81:18
        _70 = App::subcommand(move _71, move _96) -> [return: bb52, unwind: bb164]; // scope 0 at src/main.rs:56:13: 81:18
                                         // mir::Constant
                                         // + span: src/main.rs:78:18: 78:28
                                         // + literal: Const { ty: fn(clap::App, clap::App) -> clap::App {clap::App::subcommand}, val: Value(Scalar(<ZST>)) }
    }

    bb52: {
        _252 = const true;               // scope 0 at src/main.rs:81:17: 81:18
        _253 = const false;              // scope 0 at src/main.rs:81:17: 81:18
        _104 = const "power";            // scope 0 at src/main.rs:83:43: 83:50
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 111, 119, 101, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/main.rs:83:43: 83:50
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 111, 119, 101, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _103 = _104;                     // scope 0 at src/main.rs:83:43: 83:50
        _102 = SubCommand::with_name(move _103) -> [return: bb53, unwind: bb162]; // scope 0 at src/main.rs:83:21: 83:51
                                         // mir::Constant
                                         // + span: src/main.rs:83:21: 83:42
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> clap::App {clap::SubCommand::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb53: {
        _101 = App::about::<&str>(move _102, const "Query or set the discrete graphics power state") -> [return: bb54, unwind: bb162]; // scope 0 at src/main.rs:83:21: 84:81
                                         // mir::Constant
                                         // + span: src/main.rs:84:26: 84:31
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [81, 117, 101, 114, 121, 32, 111, 114, 32, 115, 101, 116, 32, 116, 104, 101, 32, 100, 105, 115, 99, 114, 101, 116, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 112, 111, 119, 101, 114, 32, 115, 116, 97, 116, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [70368744177663], len: Size { raw: 46 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 46 })
                                         // mir::Constant
                                         // + span: src/main.rs:84:32: 84:80
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [81, 117, 101, 114, 121, 32, 111, 114, 32, 115, 101, 116, 32, 116, 104, 101, 32, 100, 105, 115, 99, 114, 101, 116, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 112, 111, 119, 101, 114, 32, 115, 116, 97, 116, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [70368744177663], len: Size { raw: 46 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 46 }) }
    }

    bb54: {
        _251 = const true;               // scope 0 at src/main.rs:84:80: 84:81
        _109 = const "state";            // scope 0 at src/main.rs:86:44: 86:51
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 97, 116, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/main.rs:86:44: 86:51
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 97, 116, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _108 = _109;                     // scope 0 at src/main.rs:86:44: 86:51
        _107 = Arg::with_name(move _108) -> [return: bb55, unwind: bb160]; // scope 0 at src/main.rs:86:29: 86:52
                                         // mir::Constant
                                         // + span: src/main.rs:86:29: 86:43
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn(&str) -> clap::Arg {clap::Arg::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb55: {
        _111 = const "Set whether discrete graphics should be on or off"; // scope 0 at src/main.rs:87:39: 87:90
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 119, 104, 101, 116, 104, 101, 114, 32, 100, 105, 115, 99, 114, 101, 116, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 111, 110, 32, 111, 114, 32, 111, 102, 102], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [562949953421311], len: Size { raw: 49 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 49 })
                                         // mir::Constant
                                         // + span: src/main.rs:87:39: 87:90
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 119, 104, 101, 116, 104, 101, 114, 32, 100, 105, 115, 99, 114, 101, 116, 101, 32, 103, 114, 97, 112, 104, 105, 99, 115, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 111, 110, 32, 111, 114, 32, 111, 102, 102], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [562949953421311], len: Size { raw: 49 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 49 }) }
        _110 = _111;                     // scope 0 at src/main.rs:87:39: 87:90
        _106 = Arg::help(move _107, move _110) -> [return: bb56, unwind: bb160]; // scope 0 at src/main.rs:86:29: 87:91
                                         // mir::Constant
                                         // + span: src/main.rs:87:34: 87:38
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::help}, val: Value(Scalar(<ZST>)) }
    }

    bb56: {
        _243 = const main::promoted[3];  // scope 0 at src/main.rs:88:50: 88:72
                                         // ty::Const
                                         // + ty: &[&str; 3]
                                         // + val: Unevaluated(main, [], Some(promoted[3]))
                                         // mir::Constant
                                         // + span: src/main.rs:88:50: 88:72
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:38 ~ system76_power[fff1]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[3]) }) }
        _114 = _243;                     // scope 0 at src/main.rs:88:50: 88:72
        _113 = _114;                     // scope 0 at src/main.rs:88:50: 88:72
        _112 = move _113 as &[&str] (Pointer(Unsize)); // scope 0 at src/main.rs:88:50: 88:72
        _105 = Arg::possible_values(move _106, move _112) -> [return: bb57, unwind: bb160]; // scope 0 at src/main.rs:86:29: 88:73
                                         // mir::Constant
                                         // + span: src/main.rs:88:34: 88:49
                                         // + literal: Const { ty: for<'r> fn(clap::Arg, &'r [&str]) -> clap::Arg {clap::Arg::possible_values}, val: Value(Scalar(<ZST>)) }
    }

    bb57: {
        _251 = const false;              // scope 0 at src/main.rs:83:21: 89:26
        _100 = App::arg::<Arg>(move _101, move _105) -> [return: bb58, unwind: bb160]; // scope 0 at src/main.rs:83:21: 89:26
                                         // mir::Constant
                                         // + span: src/main.rs:85:26: 85:29
                                         // + literal: Const { ty: fn(clap::App, clap::Arg) -> clap::App {clap::App::arg::<clap::Arg>}, val: Value(Scalar(<ZST>)) }
    }

    bb58: {
        _251 = const false;              // scope 0 at src/main.rs:89:25: 89:26
        _252 = const false;              // scope 0 at src/main.rs:56:13: 90:18
        _69 = App::subcommand(move _70, move _100) -> [return: bb59, unwind: bb162]; // scope 0 at src/main.rs:56:13: 90:18
                                         // mir::Constant
                                         // + span: src/main.rs:82:18: 82:28
                                         // + literal: Const { ty: fn(clap::App, clap::App) -> clap::App {clap::App::subcommand}, val: Value(Scalar(<ZST>)) }
    }

    bb59: {
        _252 = const false;              // scope 0 at src/main.rs:90:17: 90:18
        _258 = const false;              // scope 0 at src/main.rs:9:19: 91:10
        _3 = App::subcommand(move _4, move _69) -> [return: bb60, unwind: bb174]; // scope 0 at src/main.rs:9:19: 91:10
                                         // mir::Constant
                                         // + span: src/main.rs:55:10: 55:20
                                         // + literal: Const { ty: fn(clap::App, clap::App) -> clap::App {clap::App::subcommand}, val: Value(Scalar(<ZST>)) }
    }

    bb60: {
        _249 = const true;               // scope 0 at src/main.rs:91:9: 91:10
        _258 = const false;              // scope 0 at src/main.rs:91:9: 91:10
        _123 = const "charge-thresholds"; // scope 0 at src/main.rs:93:35: 93:54
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [99, 104, 97, 114, 103, 101, 45, 116, 104, 114, 101, 115, 104, 111, 108, 100, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [131071], len: Size { raw: 17 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 17 })
                                         // mir::Constant
                                         // + span: src/main.rs:93:35: 93:54
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 104, 97, 114, 103, 101, 45, 116, 104, 114, 101, 115, 104, 111, 108, 100, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [131071], len: Size { raw: 17 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 17 }) }
        _122 = _123;                     // scope 0 at src/main.rs:93:35: 93:54
        _121 = SubCommand::with_name(move _122) -> [return: bb61, unwind: bb143]; // scope 0 at src/main.rs:93:13: 93:55
                                         // mir::Constant
                                         // + span: src/main.rs:93:13: 93:34
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> clap::App {clap::SubCommand::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb61: {
        _120 = App::about::<&str>(move _121, const "Set thresholds for battery charging") -> [return: bb62, unwind: bb143]; // scope 0 at src/main.rs:93:13: 94:62
                                         // mir::Constant
                                         // + span: src/main.rs:94:18: 94:23
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 114, 101, 115, 104, 111, 108, 100, 115, 32, 102, 111, 114, 32, 98, 97, 116, 116, 101, 114, 121, 32, 99, 104, 97, 114, 103, 105, 110, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [34359738367], len: Size { raw: 35 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 35 })
                                         // mir::Constant
                                         // + span: src/main.rs:94:24: 94:61
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 101, 116, 32, 116, 104, 114, 101, 115, 104, 111, 108, 100, 115, 32, 102, 111, 114, 32, 98, 97, 116, 116, 101, 114, 121, 32, 99, 104, 97, 114, 103, 105, 110, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [34359738367], len: Size { raw: 35 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 35 }) }
    }

    bb62: {
        _119 = App::usage::<&str>(move _120, const "system76-power charge-thresholds [<start> <end> | --profile <profile>]") -> [return: bb63, unwind: bb143]; // scope 0 at src/main.rs:93:13: 96:97
                                         // mir::Constant
                                         // + span: src/main.rs:96:18: 96:23
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::usage::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 121, 115, 116, 101, 109, 55, 54, 45, 112, 111, 119, 101, 114, 32, 99, 104, 97, 114, 103, 101, 45, 116, 104, 114, 101, 115, 104, 111, 108, 100, 115, 32, 91, 60, 115, 116, 97, 114, 116, 62, 32, 60, 101, 110, 100, 62, 32, 124, 32, 45, 45, 112, 114, 111, 102, 105, 108, 101, 32, 60, 112, 114, 111, 102, 105, 108, 101, 62, 93], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [18446744073709551615, 63], len: Size { raw: 70 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 70 })
                                         // mir::Constant
                                         // + span: src/main.rs:96:24: 96:96
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 121, 115, 116, 101, 109, 55, 54, 45, 112, 111, 119, 101, 114, 32, 99, 104, 97, 114, 103, 101, 45, 116, 104, 114, 101, 115, 104, 111, 108, 100, 115, 32, 91, 60, 115, 116, 97, 114, 116, 62, 32, 60, 101, 110, 100, 62, 32, 124, 32, 45, 45, 112, 114, 111, 102, 105, 108, 101, 32, 60, 112, 114, 111, 102, 105, 108, 101, 62, 93], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [18446744073709551615, 63], len: Size { raw: 70 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 70 }) }
    }

    bb63: {
        _250 = const true;               // scope 0 at src/main.rs:96:96: 96:97
        _129 = const "profile-or-thresholds"; // scope 0 at src/main.rs:98:41: 98:64
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101, 45, 111, 114, 45, 116, 104, 114, 101, 115, 104, 111, 108, 100, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2097151], len: Size { raw: 21 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 21 })
                                         // mir::Constant
                                         // + span: src/main.rs:98:41: 98:64
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101, 45, 111, 114, 45, 116, 104, 114, 101, 115, 104, 111, 108, 100, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2097151], len: Size { raw: 21 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 21 }) }
        _128 = _129;                     // scope 0 at src/main.rs:98:41: 98:64
        _127 = ArgGroup::with_name(move _128) -> [return: bb64, unwind: bb158]; // scope 0 at src/main.rs:98:21: 98:65
                                         // mir::Constant
                                         // + span: src/main.rs:98:21: 98:40
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: fn(&str) -> clap::ArgGroup {clap::ArgGroup::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb64: {
        _131 = const "thresholds";       // scope 0 at src/main.rs:99:30: 99:42
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [116, 104, 114, 101, 115, 104, 111, 108, 100, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/main.rs:99:30: 99:42
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [116, 104, 114, 101, 115, 104, 111, 108, 100, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
        _130 = _131;                     // scope 0 at src/main.rs:99:30: 99:42
        _126 = ArgGroup::arg(move _127, move _130) -> [return: bb65, unwind: bb158]; // scope 0 at src/main.rs:98:21: 99:43
                                         // mir::Constant
                                         // + span: src/main.rs:99:26: 99:29
                                         // + literal: Const { ty: fn(clap::ArgGroup, &str) -> clap::ArgGroup {clap::ArgGroup::arg}, val: Value(Scalar(<ZST>)) }
    }

    bb65: {
        _133 = const "profile";          // scope 0 at src/main.rs:100:30: 100:39
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/main.rs:100:30: 100:39
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _132 = _133;                     // scope 0 at src/main.rs:100:30: 100:39
        _125 = ArgGroup::arg(move _126, move _132) -> [return: bb66, unwind: bb158]; // scope 0 at src/main.rs:98:21: 100:40
                                         // mir::Constant
                                         // + span: src/main.rs:100:26: 100:29
                                         // + literal: Const { ty: fn(clap::ArgGroup, &str) -> clap::ArgGroup {clap::ArgGroup::arg}, val: Value(Scalar(<ZST>)) }
    }

    bb66: {
        _135 = const "list-profiles";    // scope 0 at src/main.rs:101:30: 101:45
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 45, 112, 114, 111, 102, 105, 108, 101, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: src/main.rs:101:30: 101:45
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 45, 112, 114, 111, 102, 105, 108, 101, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _134 = _135;                     // scope 0 at src/main.rs:101:30: 101:45
        _124 = ArgGroup::arg(move _125, move _134) -> [return: bb67, unwind: bb158]; // scope 0 at src/main.rs:98:21: 101:46
                                         // mir::Constant
                                         // + span: src/main.rs:101:26: 101:29
                                         // + literal: Const { ty: fn(clap::ArgGroup, &str) -> clap::ArgGroup {clap::ArgGroup::arg}, val: Value(Scalar(<ZST>)) }
    }

    bb67: {
        _250 = const false;              // scope 0 at src/main.rs:93:13: 102:18
        _118 = App::group(move _119, move _124) -> [return: bb68, unwind: bb158]; // scope 0 at src/main.rs:93:13: 102:18
                                         // mir::Constant
                                         // + span: src/main.rs:97:18: 97:23
                                         // + literal: Const { ty: fn(clap::App, clap::ArgGroup) -> clap::App {clap::App::group}, val: Value(Scalar(<ZST>)) }
    }

    bb68: {
        _248 = const true;               // scope 0 at src/main.rs:102:17: 102:18
        _250 = const false;              // scope 0 at src/main.rs:102:17: 102:18
        _143 = const "profile";          // scope 0 at src/main.rs:104:36: 104:45
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/main.rs:104:36: 104:45
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _142 = _143;                     // scope 0 at src/main.rs:104:36: 104:45
        _141 = Arg::with_name(move _142) -> [return: bb69, unwind: bb142]; // scope 0 at src/main.rs:104:21: 104:46
                                         // mir::Constant
                                         // + span: src/main.rs:104:21: 104:35
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn(&str) -> clap::Arg {clap::Arg::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb69: {
        _145 = const "profile";          // scope 0 at src/main.rs:105:31: 105:40
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/main.rs:105:31: 105:40
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 114, 111, 102, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _144 = _145;                     // scope 0 at src/main.rs:105:31: 105:40
        _140 = Arg::long(move _141, move _144) -> [return: bb70, unwind: bb142]; // scope 0 at src/main.rs:104:21: 105:41
                                         // mir::Constant
                                         // + span: src/main.rs:105:26: 105:30
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::long}, val: Value(Scalar(<ZST>)) }
    }

    bb70: {
        _147 = const "Profile name";     // scope 0 at src/main.rs:106:31: 106:45
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [80, 114, 111, 102, 105, 108, 101, 32, 110, 97, 109, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: src/main.rs:106:31: 106:45
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [80, 114, 111, 102, 105, 108, 101, 32, 110, 97, 109, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
        _146 = _147;                     // scope 0 at src/main.rs:106:31: 106:45
        _139 = Arg::help(move _140, move _146) -> [return: bb71, unwind: bb142]; // scope 0 at src/main.rs:104:21: 106:46
                                         // mir::Constant
                                         // + span: src/main.rs:106:26: 106:30
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::help}, val: Value(Scalar(<ZST>)) }
    }

    bb71: {
        _138 = Arg::required(move _139, const false) -> [return: bb72, unwind: bb142]; // scope 0 at src/main.rs:104:21: 107:41
                                         // mir::Constant
                                         // + span: src/main.rs:107:26: 107:34
                                         // + literal: Const { ty: fn(clap::Arg, bool) -> clap::Arg {clap::Arg::required}, val: Value(Scalar(<ZST>)) }
    }

    bb72: {
        _137 = Arg::takes_value(move _138, const true) -> [return: bb73, unwind: bb142]; // scope 0 at src/main.rs:104:21: 108:43
                                         // mir::Constant
                                         // + span: src/main.rs:108:26: 108:37
                                         // + literal: Const { ty: fn(clap::Arg, bool) -> clap::Arg {clap::Arg::takes_value}, val: Value(Scalar(<ZST>)) }
    }

    bb73: {
        _247 = const true;               // scope 0 at src/main.rs:108:42: 108:43
        _158 = system76_power::charge_thresholds::get_charge_profiles() -> [return: bb74, unwind: bb141]; // scope 0 at src/main.rs:110:30: 110:51
                                         // mir::Constant
                                         // + span: src/main.rs:110:30: 110:49
                                         // + literal: Const { ty: fn() -> std::vec::Vec<system76_power::charge_thresholds::ChargeProfile> {system76_power::charge_thresholds::get_charge_profiles}, val: Value(Scalar(<ZST>)) }
    }

    bb74: {
        _157 = &_158;                    // scope 0 at src/main.rs:110:30: 111:40
        _156 = <Vec<ChargeProfile> as Deref>::deref(move _157) -> [return: bb75, unwind: bb137]; // scope 0 at src/main.rs:110:30: 111:40
                                         // mir::Constant
                                         // + span: src/main.rs:110:30: 111:40
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<system76_power::charge_thresholds::ChargeProfile>) -> &'r <std::vec::Vec<system76_power::charge_thresholds::ChargeProfile> as std::ops::Deref>::Target {<std::vec::Vec<system76_power::charge_thresholds::ChargeProfile> as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb75: {
        _155 = _156;                     // scope 0 at src/main.rs:110:30: 111:40
        _154 = core::slice::<impl [ChargeProfile]>::iter(move _155) -> [return: bb76, unwind: bb137]; // scope 0 at src/main.rs:110:30: 111:40
                                         // mir::Constant
                                         // + span: src/main.rs:111:34: 111:38
                                         // + literal: Const { ty: for<'r> fn(&'r [system76_power::charge_thresholds::ChargeProfile]) -> std::slice::Iter<'r, system76_power::charge_thresholds::ChargeProfile> {core::slice::<impl [system76_power::charge_thresholds::ChargeProfile]>::iter}, val: Value(Scalar(<ZST>)) }
    }

    bb76: {
        _153 = <std::slice::Iter<ChargeProfile> as Iterator>::map::<&str, [closure@src/main.rs:112:38: 112:55]>(move _154, move _159) -> [return: bb77, unwind: bb137]; // scope 0 at src/main.rs:110:30: 112:56
                                         // mir::Constant
                                         // + span: src/main.rs:112:34: 112:37
                                         // + literal: Const { ty: fn(std::slice::Iter<system76_power::charge_thresholds::ChargeProfile>, [closure@src/main.rs:112:38: 112:55]) -> std::iter::Map<std::slice::Iter<system76_power::charge_thresholds::ChargeProfile>, [closure@src/main.rs:112:38: 112:55]> {<std::slice::Iter<system76_power::charge_thresholds::ChargeProfile> as std::iter::Iterator>::map::<&str, [closure@src/main.rs:112:38: 112:55]>}, val: Value(Scalar(<ZST>)) }
    }

    bb77: {
        _152 = <Map<std::slice::Iter<ChargeProfile>, [closure@src/main.rs:112:38: 112:55]> as Iterator>::collect::<Vec<&str>>(move _153) -> [return: bb78, unwind: bb137]; // scope 0 at src/main.rs:110:30: 113:53
                                         // mir::Constant
                                         // + span: src/main.rs:113:34: 113:41
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<system76_power::charge_thresholds::ChargeProfile>, [closure@src/main.rs:112:38: 112:55]>) -> std::vec::Vec<&str> {<std::iter::Map<std::slice::Iter<system76_power::charge_thresholds::ChargeProfile>, [closure@src/main.rs:112:38: 112:55]> as std::iter::Iterator>::collect::<std::vec::Vec<&str>>}, val: Value(Scalar(<ZST>)) }
    }

    bb78: {
        _151 = &_152;                    // scope 0 at src/main.rs:110:29: 113:53
        _150 = _151;                     // scope 0 at src/main.rs:110:29: 113:53
        _149 = <Vec<&str> as Deref>::deref(move _150) -> [return: bb79, unwind: bb152]; // scope 0 at src/main.rs:110:29: 113:53
                                         // mir::Constant
                                         // + span: src/main.rs:110:29: 113:53
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<&str>) -> &'r <std::vec::Vec<&str> as std::ops::Deref>::Target {<std::vec::Vec<&str> as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb79: {
        _148 = _149;                     // scope 0 at src/main.rs:110:29: 113:53
        _247 = const false;              // scope 0 at src/main.rs:104:21: 114:26
        _136 = Arg::possible_values(move _137, move _148) -> [return: bb80, unwind: bb152]; // scope 0 at src/main.rs:104:21: 114:26
                                         // mir::Constant
                                         // + span: src/main.rs:109:26: 109:41
                                         // + literal: Const { ty: for<'r> fn(clap::Arg, &'r [&str]) -> clap::Arg {clap::Arg::possible_values}, val: Value(Scalar(<ZST>)) }
    }

    bb80: {
        _247 = const false;              // scope 0 at src/main.rs:114:25: 114:26
        _248 = const false;              // scope 0 at src/main.rs:93:13: 115:18
        _117 = App::arg::<Arg>(move _118, move _136) -> [return: bb81, unwind: bb154]; // scope 0 at src/main.rs:93:13: 115:18
                                         // mir::Constant
                                         // + span: src/main.rs:103:18: 103:21
                                         // + literal: Const { ty: fn(clap::App, clap::Arg) -> clap::App {clap::App::arg::<clap::Arg>}, val: Value(Scalar(<ZST>)) }
    }

    bb81: {
        _246 = const true;               // scope 0 at src/main.rs:115:17: 115:18
        _248 = const false;              // scope 0 at src/main.rs:115:17: 115:18
        _165 = const "list-profiles";    // scope 0 at src/main.rs:117:36: 117:51
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 45, 112, 114, 111, 102, 105, 108, 101, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: src/main.rs:117:36: 117:51
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 45, 112, 114, 111, 102, 105, 108, 101, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _164 = _165;                     // scope 0 at src/main.rs:117:36: 117:51
        _163 = Arg::with_name(move _164) -> [return: bb82, unwind: bb150]; // scope 0 at src/main.rs:117:21: 117:52
                                         // mir::Constant
                                         // + span: src/main.rs:117:21: 117:35
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: fn(&str) -> clap::Arg {clap::Arg::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb82: {
        _167 = const "list-profiles";    // scope 0 at src/main.rs:118:31: 118:46
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 45, 112, 114, 111, 102, 105, 108, 101, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: src/main.rs:118:31: 118:46
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 45, 112, 114, 111, 102, 105, 108, 101, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _166 = _167;                     // scope 0 at src/main.rs:118:31: 118:46
        _162 = Arg::long(move _163, move _166) -> [return: bb83, unwind: bb150]; // scope 0 at src/main.rs:117:21: 118:47
                                         // mir::Constant
                                         // + span: src/main.rs:118:26: 118:30
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::long}, val: Value(Scalar(<ZST>)) }
    }

    bb83: {
        _169 = const "List profiles";    // scope 0 at src/main.rs:119:31: 119:46
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [76, 105, 115, 116, 32, 112, 114, 111, 102, 105, 108, 101, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: src/main.rs:119:31: 119:46
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [76, 105, 115, 116, 32, 112, 114, 111, 102, 105, 108, 101, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _168 = _169;                     // scope 0 at src/main.rs:119:31: 119:46
        _161 = Arg::help(move _162, move _168) -> [return: bb84, unwind: bb150]; // scope 0 at src/main.rs:117:21: 119:47
                                         // mir::Constant
                                         // + span: src/main.rs:119:26: 119:30
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::help}, val: Value(Scalar(<ZST>)) }
    }

    bb84: {
        _160 = Arg::required(move _161, const false) -> [return: bb85, unwind: bb150]; // scope 0 at src/main.rs:117:21: 120:41
                                         // mir::Constant
                                         // + span: src/main.rs:120:26: 120:34
                                         // + literal: Const { ty: fn(clap::Arg, bool) -> clap::Arg {clap::Arg::required}, val: Value(Scalar(<ZST>)) }
    }

    bb85: {
        _246 = const false;              // scope 0 at src/main.rs:93:13: 121:18
        _116 = App::arg::<Arg>(move _117, move _160) -> [return: bb86, unwind: bb150]; // scope 0 at src/main.rs:93:13: 121:18
                                         // mir::Constant
                                         // + span: src/main.rs:116:18: 116:21
                                         // + literal: Const { ty: fn(clap::App, clap::Arg) -> clap::App {clap::App::arg::<clap::Arg>}, val: Value(Scalar(<ZST>)) }
    }

    bb86: {
        _245 = const true;               // scope 0 at src/main.rs:121:17: 121:18
        _246 = const false;              // scope 0 at src/main.rs:121:17: 121:18
        _178 = const "thresholds";       // scope 0 at src/main.rs:123:36: 123:48
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [116, 104, 114, 101, 115, 104, 111, 108, 100, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/main.rs:123:36: 123:48
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [116, 104, 114, 101, 115, 104, 111, 108, 100, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
        _177 = _178;                     // scope 0 at src/main.rs:123:36: 123:48
        _176 = Arg::with_name(move _177) -> [return: bb87, unwind: bb148]; // scope 0 at src/main.rs:123:21: 123:49
                                         // mir::Constant
                                         // + span: src/main.rs:123:21: 123:35
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: fn(&str) -> clap::Arg {clap::Arg::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb87: {
        _180 = const "Charge thresholds"; // scope 0 at src/main.rs:124:31: 124:50
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 114, 103, 101, 32, 116, 104, 114, 101, 115, 104, 111, 108, 100, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [131071], len: Size { raw: 17 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 17 })
                                         // mir::Constant
                                         // + span: src/main.rs:124:31: 124:50
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 114, 103, 101, 32, 116, 104, 114, 101, 115, 104, 111, 108, 100, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [131071], len: Size { raw: 17 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 17 }) }
        _179 = _180;                     // scope 0 at src/main.rs:124:31: 124:50
        _175 = Arg::help(move _176, move _179) -> [return: bb88, unwind: bb148]; // scope 0 at src/main.rs:123:21: 124:51
                                         // mir::Constant
                                         // + span: src/main.rs:124:26: 124:30
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::help}, val: Value(Scalar(<ZST>)) }
    }

    bb88: {
        _174 = Arg::validator::<[closure@src/main.rs:125:36: 132:26]>(move _175, move _181) -> [return: bb89, unwind: bb148]; // scope 0 at src/main.rs:123:21: 132:27
                                         // mir::Constant
                                         // + span: src/main.rs:125:26: 125:35
                                         // + literal: Const { ty: fn(clap::Arg, [closure@src/main.rs:125:36: 132:26]) -> clap::Arg {clap::Arg::validator::<[closure@src/main.rs:125:36: 132:26]>}, val: Value(Scalar(<ZST>)) }
    }

    bb89: {
        _173 = Arg::number_of_values(move _174, const 2_u64) -> [return: bb90, unwind: bb148]; // scope 0 at src/main.rs:123:21: 133:45
                                         // mir::Constant
                                         // + span: src/main.rs:133:26: 133:42
                                         // + literal: Const { ty: fn(clap::Arg, u64) -> clap::Arg {clap::Arg::number_of_values}, val: Value(Scalar(<ZST>)) }
    }

    bb90: {
        _172 = Arg::max_values(move _173, const 2_u64) -> [return: bb91, unwind: bb148]; // scope 0 at src/main.rs:123:21: 136:39
                                         // mir::Constant
                                         // + span: src/main.rs:136:26: 136:36
                                         // + literal: Const { ty: fn(clap::Arg, u64) -> clap::Arg {clap::Arg::max_values}, val: Value(Scalar(<ZST>)) }
    }

    bb91: {
        _242 = const main::promoted[2];  // scope 0 at src/main.rs:137:38: 137:55
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(main, [], Some(promoted[2]))
                                         // mir::Constant
                                         // + span: src/main.rs:137:38: 137:55
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:38 ~ system76_power[fff1]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[2]) }) }
        _184 = _242;                     // scope 0 at src/main.rs:137:38: 137:55
        _183 = _184;                     // scope 0 at src/main.rs:137:38: 137:55
        _182 = move _183 as &[&str] (Pointer(Unsize)); // scope 0 at src/main.rs:137:38: 137:55
        _171 = Arg::value_names(move _172, move _182) -> [return: bb92, unwind: bb148]; // scope 0 at src/main.rs:123:21: 137:56
                                         // mir::Constant
                                         // + span: src/main.rs:137:26: 137:37
                                         // + literal: Const { ty: for<'r> fn(clap::Arg, &'r [&str]) -> clap::Arg {clap::Arg::value_names}, val: Value(Scalar(<ZST>)) }
    }

    bb92: {
        _170 = Arg::required(move _171, const false) -> [return: bb93, unwind: bb148]; // scope 0 at src/main.rs:123:21: 138:41
                                         // mir::Constant
                                         // + span: src/main.rs:138:26: 138:34
                                         // + literal: Const { ty: fn(clap::Arg, bool) -> clap::Arg {clap::Arg::required}, val: Value(Scalar(<ZST>)) }
    }

    bb93: {
        _245 = const false;              // scope 0 at src/main.rs:93:13: 139:18
        _115 = App::arg::<Arg>(move _116, move _170) -> [return: bb94, unwind: bb148]; // scope 0 at src/main.rs:93:13: 139:18
                                         // mir::Constant
                                         // + span: src/main.rs:122:18: 122:21
                                         // + literal: Const { ty: fn(clap::App, clap::Arg) -> clap::App {clap::App::arg::<clap::Arg>}, val: Value(Scalar(<ZST>)) }
    }

    bb94: {
        _245 = const false;              // scope 0 at src/main.rs:139:17: 139:18
        _249 = const false;              // scope 0 at src/main.rs:9:19: 140:10
        _2 = App::subcommand(move _3, move _115) -> [return: bb95, unwind: bb156]; // scope 0 at src/main.rs:9:19: 140:10
                                         // mir::Constant
                                         // + span: src/main.rs:92:10: 92:20
                                         // + literal: Const { ty: fn(clap::App, clap::App) -> clap::App {clap::App::subcommand}, val: Value(Scalar(<ZST>)) }
    }

    bb95: {
        _249 = const false;              // scope 0 at src/main.rs:140:9: 140:10
        _1 = App::get_matches(move _2) -> [return: bb96, unwind: bb136]; // scope 0 at src/main.rs:9:19: 141:23
                                         // mir::Constant
                                         // + span: src/main.rs:141:10: 141:21
                                         // + literal: Const { ty: fn(clap::App) -> clap::ArgMatches {clap::App::get_matches}, val: Value(Scalar(<ZST>)) }
    }

    bb96: {
        drop(_152) -> [return: bb97, unwind: bb134]; // scope 0 at src/main.rs:141:23: 141:24
    }

    bb97: {
        drop(_158) -> [return: bb98, unwind: bb135]; // scope 0 at src/main.rs:141:23: 141:24
    }

    bb98: {
        _187 = &_1;                      // scope 1 at src/main.rs:143:21: 143:41
        _186 = ArgMatches::subcommand(move _187) -> [return: bb99, unwind: bb135]; // scope 1 at src/main.rs:143:21: 143:41
                                         // mir::Constant
                                         // + span: src/main.rs:143:29: 143:39
                                         // + literal: Const { ty: for<'r> fn(&'r clap::ArgMatches) -> (&'r str, std::option::Option<&'r clap::ArgMatches>) {clap::ArgMatches::subcommand}, val: Value(Scalar(<ZST>)) }
    }

    bb99: {
        _188 = <str as PartialEq>::eq((_186.0: &str), const "daemon") -> [return: bb100, unwind: bb135]; // scope 1 at src/main.rs:144:10: 144:18
                                         // mir::Constant
                                         // + span: src/main.rs:144:10: 144:18
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [100, 97, 101, 109, 111, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/main.rs:144:10: 144:18
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [100, 97, 101, 109, 111, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
    }

    bb100: {
        switchInt(move _188) -> [false: bb102, otherwise: bb101]; // scope 1 at src/main.rs:144:10: 144:18
    }

    bb101: {
        _189 = discriminant((_186.1: std::option::Option<&clap::ArgMatches>)); // scope 1 at src/main.rs:143:21: 143:41
        switchInt(move _189) -> [1_isize: bb104, otherwise: bb102]; // scope 1 at src/main.rs:143:15: 143:41
    }

    bb102: {
        _190 = discriminant((_186.1: std::option::Option<&clap::ArgMatches>)); // scope 1 at src/main.rs:143:21: 143:41
        switchInt(move _190) -> [1_isize: bb123, otherwise: bb103]; // scope 1 at src/main.rs:143:15: 143:41
    }

    bb103: {
        core::panicking::panic(const "internal error: entered unreachable code") -> bb135; // scope 1 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/core/src/panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/core/src/panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 })
                                         // mir::Constant
                                         // + span: /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/core/src/macros/mod.rs:594:24: 594:66
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 }) }
    }

    bb104: {
        _191 = (((_186.1: std::option::Option<&clap::ArgMatches>) as Some).0: &clap::ArgMatches); // scope 1 at src/main.rs:144:25: 144:32
        _195 = _191;                     // scope 3 at src/main.rs:145:49: 145:78
        _194 = ArgMatches::is_present::<&str>(move _195, const "verbose") -> [return: bb105, unwind: bb135]; // scope 3 at src/main.rs:145:49: 145:78
                                         // mir::Constant
                                         // + span: src/main.rs:145:57: 145:67
                                         // + literal: Const { ty: for<'r> fn(&'r clap::ArgMatches, &str) -> bool {clap::ArgMatches::is_present::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [118, 101, 114, 98, 111, 115, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/main.rs:145:68: 145:77
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [118, 101, 114, 98, 111, 115, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
    }

    bb105: {
        switchInt(move _194) -> [false: bb107, otherwise: bb106]; // scope 3 at src/main.rs:145:49: 145:78
    }

    bb106: {
        discriminant(_193) = 4;          // scope 3 at src/main.rs:146:17: 146:35
        goto -> bb111;                   // scope 3 at src/main.rs:145:46: 151:14
    }

    bb107: {
        _197 = _191;                     // scope 3 at src/main.rs:147:23: 147:50
        _196 = ArgMatches::is_present::<&str>(move _197, const "quiet") -> [return: bb108, unwind: bb135]; // scope 3 at src/main.rs:147:23: 147:50
                                         // mir::Constant
                                         // + span: src/main.rs:147:31: 147:41
                                         // + literal: Const { ty: for<'r> fn(&'r clap::ArgMatches, &str) -> bool {clap::ArgMatches::is_present::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [113, 117, 105, 101, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/main.rs:147:42: 147:49
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [113, 117, 105, 101, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb108: {
        switchInt(move _196) -> [false: bb110, otherwise: bb109]; // scope 3 at src/main.rs:147:23: 147:50
    }

    bb109: {
        discriminant(_193) = 0;          // scope 3 at src/main.rs:148:17: 148:33
        goto -> bb111;                   // scope 3 at src/main.rs:147:20: 151:14
    }

    bb110: {
        discriminant(_193) = 3;          // scope 3 at src/main.rs:150:17: 150:34
        goto -> bb111;                   // scope 3 at src/main.rs:147:20: 151:14
    }

    bb111: {
        _192 = setup(move _193) -> [return: bb112, unwind: bb135]; // scope 3 at src/main.rs:145:31: 151:15
                                         // mir::Constant
                                         // + span: src/main.rs:145:31: 145:45
                                         // + literal: Const { ty: fn(log::LevelFilter) -> std::result::Result<(), fern::errors::InitError> {system76_power::logging::setup}, val: Value(Scalar(<ZST>)) }
    }

    bb112: {
        _198 = discriminant(_192);       // scope 3 at src/main.rs:145:20: 145:28
        switchInt(move _198) -> [1_isize: bb113, otherwise: bb117]; // scope 3 at src/main.rs:145:20: 145:28
    }

    bb113: {
        _199 = move ((_192 as Err).0: fern::errors::InitError); // scope 3 at src/main.rs:145:24: 145:27
        _241 = const main::promoted[1];  // scope 3 at src/main.rs:152:27: 152:57
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(main, [], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: src/main.rs:152:27: 152:57
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:38 ~ system76_power[fff1]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[1]) }) }
        _204 = _241;                     // scope 3 at src/main.rs:152:27: 152:57
        _203 = _204;                     // scope 3 at src/main.rs:152:27: 152:57
        _202 = move _203 as &[&str] (Pointer(Unsize)); // scope 3 at src/main.rs:152:27: 152:57
        _210 = &_199;                    // scope 3 at src/main.rs:152:59: 152:62
        (_209.0: &fern::errors::InitError) = move _210; // scope 3 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _211 = _209;                     // scope 3 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _213 = (_211.0: &fern::errors::InitError); // scope 5 at src/main.rs:152:59: 152:62
        _214 = <fern::errors::InitError as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r fern::errors::InitError, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at src/main.rs:152:59: 152:62
                                         // mir::Constant
                                         // + span: src/main.rs:152:59: 152:62
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r fern::errors::InitError, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<fern::errors::InitError as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _212 = ArgumentV1::new::<fern::errors::InitError>(move _213, move _214) -> [return: bb114, unwind: bb133]; // scope 5 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
                                         // mir::Constant
                                         // + span: /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: for<'b> fn(&'b fern::errors::InitError, for<'r, 's, 't0> fn(&'r fern::errors::InitError, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<fern::errors::InitError>}, val: Value(Scalar(<ZST>)) }
    }

    bb114: {
        _208 = [move _212];              // scope 5 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _207 = &_208;                    // scope 3 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _206 = _207;                     // scope 3 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _205 = move _206 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 3 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _201 = Arguments::new_v1(move _202, move _205) -> [return: bb115, unwind: bb133]; // scope 3 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
                                         // mir::Constant
                                         // + span: /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb115: {
        _200 = _eprint(move _201) -> [return: bb116, unwind: bb133]; // scope 3 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:9: 156:63
                                         // mir::Constant
                                         // + span: /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:9: 156:28
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_eprint}, val: Value(Scalar(<ZST>)) }
    }

    bb116: {
        std::process::exit(const 1_i32) -> bb133; // scope 3 at src/main.rs:153:17: 153:33
                                         // mir::Constant
                                         // + span: src/main.rs:153:17: 153:30
                                         // + literal: Const { ty: fn(i32) -> ! {std::process::exit}, val: Value(Scalar(<ZST>)) }
    }

    bb117: {
        drop(_192) -> [return: bb118, unwind: bb135]; // scope 3 at src/main.rs:154:13: 154:14
    }

    bb118: {
        _215 = geteuid() -> [return: bb119, unwind: bb135]; // scope 6 at src/main.rs:156:25: 156:40
                                         // mir::Constant
                                         // + span: src/main.rs:156:25: 156:38
                                         // + literal: Const { ty: unsafe extern "C" fn() -> u32 {libc::geteuid}, val: Value(Scalar(<ZST>)) }
    }

    bb119: {
        switchInt(move _215) -> [0_u32: bb120, otherwise: bb121]; // scope 3 at src/main.rs:156:16: 156:47
    }

    bb120: {
        _185 = system76_power::daemon::daemon() -> [return: bb185, unwind: bb135]; // scope 3 at src/main.rs:157:17: 157:33
                                         // mir::Constant
                                         // + span: src/main.rs:157:17: 157:31
                                         // + literal: Const { ty: fn() -> std::result::Result<(), std::string::String> {system76_power::daemon::daemon}, val: Value(Scalar(<ZST>)) }
    }

    bb121: {
        _218 = const "must be run as root"; // scope 3 at src/main.rs:159:21: 159:42
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 117, 115, 116, 32, 98, 101, 32, 114, 117, 110, 32, 97, 115, 32, 114, 111, 111, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [524287], len: Size { raw: 19 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 19 })
                                         // mir::Constant
                                         // + span: src/main.rs:159:21: 159:42
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 117, 115, 116, 32, 98, 101, 32, 114, 117, 110, 32, 97, 115, 32, 114, 111, 111, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [524287], len: Size { raw: 19 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 19 }) }
        _217 = _218;                     // scope 3 at src/main.rs:159:21: 159:54
        _216 = <str as ToString>::to_string(move _217) -> [return: bb122, unwind: bb135]; // scope 3 at src/main.rs:159:21: 159:54
                                         // mir::Constant
                                         // + span: src/main.rs:159:43: 159:52
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}, val: Value(Scalar(<ZST>)) }
    }

    bb122: {
        ((_185 as Err).0: std::string::String) = move _216; // scope 3 at src/main.rs:159:17: 159:55
        discriminant(_185) = 1;          // scope 3 at src/main.rs:159:17: 159:55
        goto -> bb124;                   // scope 3 at src/main.rs:156:13: 160:14
    }

    bb123: {
        _219 = (_186.0: &str);           // scope 1 at src/main.rs:162:10: 162:20
        _220 = (((_186.1: std::option::Option<&clap::ArgMatches>) as Some).0: &clap::ArgMatches); // scope 1 at src/main.rs:162:27: 162:34
        _221 = _219;                     // scope 7 at src/main.rs:162:55: 162:65
        _222 = _220;                     // scope 7 at src/main.rs:162:67: 162:74
        _185 = client(move _221, move _222) -> [return: bb186, unwind: bb135]; // scope 7 at src/main.rs:162:40: 162:75
                                         // mir::Constant
                                         // + span: src/main.rs:162:40: 162:54
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r str, &'s clap::ArgMatches<'t0>) -> std::result::Result<(), std::string::String> {system76_power::client::client}, val: Value(Scalar(<ZST>)) }
    }

    bb124: {
        _223 = discriminant(_185);       // scope 2 at src/main.rs:166:11: 166:14
        switchInt(move _223) -> [0_isize: bb127, 1_isize: bb125, otherwise: bb126]; // scope 2 at src/main.rs:166:5: 166:14
    }

    bb125: {
        _224 = move ((_185 as Err).0: std::string::String); // scope 2 at src/main.rs:168:13: 168:16
        _240 = const main::promoted[0];  // scope 8 at src/main.rs:169:23: 169:27
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(main, [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: src/main.rs:169:23: 169:27
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:38 ~ system76_power[fff1]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }
        _229 = _240;                     // scope 8 at src/main.rs:169:23: 169:27
        _228 = _229;                     // scope 8 at src/main.rs:169:23: 169:27
        _227 = move _228 as &[&str] (Pointer(Unsize)); // scope 8 at src/main.rs:169:23: 169:27
        _235 = &_224;                    // scope 8 at src/main.rs:169:29: 169:32
        (_234.0: &std::string::String) = move _235; // scope 8 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _236 = _234;                     // scope 8 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _238 = (_236.0: &std::string::String); // scope 9 at src/main.rs:169:29: 169:32
        _239 = <String as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 9 at src/main.rs:169:29: 169:32
                                         // mir::Constant
                                         // + span: src/main.rs:169:29: 169:32
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<std::string::String as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _237 = ArgumentV1::new::<String>(move _238, move _239) -> [return: bb128, unwind: bb132]; // scope 9 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
                                         // mir::Constant
                                         // + span: /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String, for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb126: {
        unreachable;                     // scope 2 at src/main.rs:166:11: 166:14
    }

    bb127: {
        drop(_1) -> bb131;               // scope 0 at src/main.rs:173:1: 173:2
    }

    bb128: {
        _233 = [move _237];              // scope 9 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _232 = &_233;                    // scope 8 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _231 = _232;                     // scope 8 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _230 = move _231 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 8 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
        _226 = Arguments::new_v1(move _227, move _230) -> [return: bb129, unwind: bb132]; // scope 8 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
                                         // mir::Constant
                                         // + span: /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:29: 156:62
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb129: {
        _225 = _eprint(move _226) -> [return: bb130, unwind: bb132]; // scope 8 at /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:9: 156:63
                                         // mir::Constant
                                         // + span: /rustc/c9c4b5d7276297679387189d96a952f2b760e7ad/library/std/src/macros.rs:156:9: 156:28
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_eprint}, val: Value(Scalar(<ZST>)) }
    }

    bb130: {
        std::process::exit(const 1_i32) -> bb132; // scope 8 at src/main.rs:170:13: 170:29
                                         // mir::Constant
                                         // + span: src/main.rs:170:13: 170:26
                                         // + literal: Const { ty: fn(i32) -> ! {std::process::exit}, val: Value(Scalar(<ZST>)) }
    }

    bb131: {
        return;                          // scope 0 at src/main.rs:173:2: 173:2
    }

    bb132 (cleanup): {
        drop(_224) -> bb145;             // scope 2 at src/main.rs:171:9: 171:10
    }

    bb133 (cleanup): {
        drop(_199) -> bb146;             // scope 3 at src/main.rs:154:13: 154:14
    }

    bb134 (cleanup): {
        drop(_158) -> bb135;             // scope 0 at src/main.rs:141:23: 141:24
    }

    bb135 (cleanup): {
        drop(_1) -> bb144;               // scope 0 at src/main.rs:173:1: 173:2
    }

    bb136 (cleanup): {
        drop(_152) -> bb140;             // scope 0 at src/main.rs:141:23: 141:24
    }

    bb137 (cleanup): {
        drop(_137) -> bb138;             // scope 0 at src/main.rs:114:25: 114:26
    }

    bb138 (cleanup): {
        drop(_118) -> bb139;             // scope 0 at src/main.rs:115:17: 115:18
    }

    bb139 (cleanup): {
        drop(_3) -> bb140;               // scope 0 at src/main.rs:140:9: 140:10
    }

    bb140 (cleanup): {
        drop(_158) -> bb144;             // scope 0 at src/main.rs:141:23: 141:24
    }

    bb141 (cleanup): {
        drop(_137) -> bb142;             // scope 0 at src/main.rs:114:25: 114:26
    }

    bb142 (cleanup): {
        drop(_118) -> bb143;             // scope 0 at src/main.rs:115:17: 115:18
    }

    bb143 (cleanup): {
        drop(_3) -> bb144;               // scope 0 at src/main.rs:140:9: 140:10
    }

    bb144 (cleanup): {
        resume;                          // scope 0 at src/main.rs:8:1: 173:2
    }

    bb145 (cleanup): {
        goto -> bb135;                   // scope 1 at src/main.rs:173:1: 173:2
    }

    bb146 (cleanup): {
        goto -> bb135;                   // scope 3 at src/main.rs:154:13: 154:14
    }

    bb147 (cleanup): {
        drop(_116) -> bb156;             // scope 0 at src/main.rs:139:17: 139:18
    }

    bb148 (cleanup): {
        switchInt(_245) -> [false: bb156, otherwise: bb147]; // scope 0 at src/main.rs:139:17: 139:18
    }

    bb149 (cleanup): {
        drop(_117) -> bb156;             // scope 0 at src/main.rs:121:17: 121:18
    }

    bb150 (cleanup): {
        switchInt(_246) -> [false: bb156, otherwise: bb149]; // scope 0 at src/main.rs:121:17: 121:18
    }

    bb151 (cleanup): {
        drop(_137) -> bb154;             // scope 0 at src/main.rs:114:25: 114:26
    }

    bb152 (cleanup): {
        switchInt(_247) -> [false: bb154, otherwise: bb151]; // scope 0 at src/main.rs:114:25: 114:26
    }

    bb153 (cleanup): {
        drop(_118) -> bb156;             // scope 0 at src/main.rs:115:17: 115:18
    }

    bb154 (cleanup): {
        switchInt(_248) -> [false: bb156, otherwise: bb153]; // scope 0 at src/main.rs:115:17: 115:18
    }

    bb155 (cleanup): {
        drop(_3) -> bb136;               // scope 0 at src/main.rs:140:9: 140:10
    }

    bb156 (cleanup): {
        switchInt(_249) -> [false: bb136, otherwise: bb155]; // scope 0 at src/main.rs:140:9: 140:10
    }

    bb157 (cleanup): {
        drop(_119) -> bb143;             // scope 0 at src/main.rs:102:17: 102:18
    }

    bb158 (cleanup): {
        switchInt(_250) -> [false: bb143, otherwise: bb157]; // scope 0 at src/main.rs:102:17: 102:18
    }

    bb159 (cleanup): {
        drop(_101) -> bb162;             // scope 0 at src/main.rs:89:25: 89:26
    }

    bb160 (cleanup): {
        switchInt(_251) -> [false: bb162, otherwise: bb159]; // scope 0 at src/main.rs:89:25: 89:26
    }

    bb161 (cleanup): {
        drop(_70) -> bb174;              // scope 0 at src/main.rs:90:17: 90:18
    }

    bb162 (cleanup): {
        switchInt(_252) -> [false: bb174, otherwise: bb161]; // scope 0 at src/main.rs:90:17: 90:18
    }

    bb163 (cleanup): {
        drop(_71) -> bb174;              // scope 0 at src/main.rs:81:17: 81:18
    }

    bb164 (cleanup): {
        switchInt(_253) -> [false: bb174, otherwise: bb163]; // scope 0 at src/main.rs:81:17: 81:18
    }

    bb165 (cleanup): {
        drop(_72) -> bb174;              // scope 0 at src/main.rs:77:17: 77:18
    }

    bb166 (cleanup): {
        switchInt(_254) -> [false: bb174, otherwise: bb165]; // scope 0 at src/main.rs:77:17: 77:18
    }

    bb167 (cleanup): {
        drop(_73) -> bb174;              // scope 0 at src/main.rs:74:17: 74:18
    }

    bb168 (cleanup): {
        switchInt(_255) -> [false: bb174, otherwise: bb167]; // scope 0 at src/main.rs:74:17: 74:18
    }

    bb169 (cleanup): {
        drop(_74) -> bb174;              // scope 0 at src/main.rs:70:17: 70:18
    }

    bb170 (cleanup): {
        switchInt(_256) -> [false: bb174, otherwise: bb169]; // scope 0 at src/main.rs:70:17: 70:18
    }

    bb171 (cleanup): {
        drop(_75) -> bb174;              // scope 0 at src/main.rs:66:17: 66:18
    }

    bb172 (cleanup): {
        switchInt(_257) -> [false: bb174, otherwise: bb171]; // scope 0 at src/main.rs:66:17: 66:18
    }

    bb173 (cleanup): {
        drop(_4) -> bb144;               // scope 0 at src/main.rs:91:9: 91:10
    }

    bb174 (cleanup): {
        switchInt(_258) -> [false: bb144, otherwise: bb173]; // scope 0 at src/main.rs:91:9: 91:10
    }

    bb175 (cleanup): {
        drop(_53) -> bb178;              // scope 0 at src/main.rs:53:17: 53:18
    }

    bb176 (cleanup): {
        switchInt(_259) -> [false: bb178, otherwise: bb175]; // scope 0 at src/main.rs:53:17: 53:18
    }

    bb177 (cleanup): {
        drop(_5) -> bb144;               // scope 0 at src/main.rs:54:9: 54:10
    }

    bb178 (cleanup): {
        switchInt(_260) -> [false: bb144, otherwise: bb177]; // scope 0 at src/main.rs:54:9: 54:10
    }

    bb179 (cleanup): {
        drop(_18) -> bb184;              // scope 0 at src/main.rs:38:17: 38:18
    }

    bb180 (cleanup): {
        switchInt(_261) -> [false: bb184, otherwise: bb179]; // scope 0 at src/main.rs:38:17: 38:18
    }

    bb181 (cleanup): {
        drop(_19) -> bb184;              // scope 0 at src/main.rs:30:17: 30:18
    }

    bb182 (cleanup): {
        switchInt(_262) -> [false: bb184, otherwise: bb181]; // scope 0 at src/main.rs:30:17: 30:18
    }

    bb183 (cleanup): {
        drop(_6) -> bb144;               // scope 0 at src/main.rs:39:9: 39:10
    }

    bb184 (cleanup): {
        switchInt(_263) -> [false: bb144, otherwise: bb183]; // scope 0 at src/main.rs:39:9: 39:10
    }

    bb185: {
        goto -> bb124;                   // scope 3 at src/main.rs:157:17: 157:33
    }

    bb186: {
        goto -> bb124;                   // scope 7 at src/main.rs:162:40: 162:75
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at src/main.rs:169:23: 169:27
    let mut _1: [&str; 2];               // in scope 0 at src/main.rs:169:23: 169:27

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at src/main.rs:169:23: 169:27
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })
                                         // mir::Constant
                                         // + span: src/main.rs:169:23: 169:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/main.rs:169:23: 169:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at src/main.rs:169:23: 169:27
        return;                          // scope 0 at src/main.rs:169:23: 169:27
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at src/main.rs:152:27: 152:57
    let mut _1: [&str; 2];               // in scope 0 at src/main.rs:152:27: 152:57

    bb0: {
        _1 = [const "failed to set up logging: ", const "\n"]; // scope 0 at src/main.rs:152:27: 152:57
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 115, 101, 116, 32, 117, 112, 32, 108, 111, 103, 103, 105, 110, 103, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [67108863], len: Size { raw: 26 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 26 })
                                         // mir::Constant
                                         // + span: src/main.rs:152:27: 152:57
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 115, 101, 116, 32, 117, 112, 32, 108, 111, 103, 103, 105, 110, 103, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [67108863], len: Size { raw: 26 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 26 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/main.rs:152:27: 152:57
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at src/main.rs:152:27: 152:57
        return;                          // scope 0 at src/main.rs:152:27: 152:57
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at src/main.rs:137:38: 137:55
    let mut _1: [&str; 2];               // in scope 0 at src/main.rs:137:39: 137:55
    let mut _2: &str;                    // in scope 0 at src/main.rs:137:40: 137:47
    let mut _3: &str;                    // in scope 0 at src/main.rs:137:40: 137:47
    let mut _4: &str;                    // in scope 0 at src/main.rs:137:49: 137:54
    let mut _5: &str;                    // in scope 0 at src/main.rs:137:49: 137:54

    bb0: {
        _3 = const "start";              // scope 0 at src/main.rs:137:40: 137:47
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 97, 114, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/main.rs:137:40: 137:47
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 97, 114, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _2 = &(*_3);                     // scope 0 at src/main.rs:137:40: 137:47
        _5 = const "end";                // scope 0 at src/main.rs:137:49: 137:54
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [101, 110, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 })
                                         // mir::Constant
                                         // + span: src/main.rs:137:49: 137:54
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 110, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 }) }
        _4 = &(*_5);                     // scope 0 at src/main.rs:137:49: 137:54
        _1 = [move _2, move _4];         // scope 0 at src/main.rs:137:39: 137:55
        _0 = &_1;                        // scope 0 at src/main.rs:137:38: 137:55
        return;                          // scope 0 at src/main.rs:137:38: 137:55
    }
}

promoted[3] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at src/main.rs:88:50: 88:72
    let mut _1: [&str; 3];               // in scope 0 at src/main.rs:88:51: 88:72
    let mut _2: &str;                    // in scope 0 at src/main.rs:88:52: 88:58
    let mut _3: &str;                    // in scope 0 at src/main.rs:88:52: 88:58
    let mut _4: &str;                    // in scope 0 at src/main.rs:88:60: 88:65
    let mut _5: &str;                    // in scope 0 at src/main.rs:88:60: 88:65
    let mut _6: &str;                    // in scope 0 at src/main.rs:88:67: 88:71
    let mut _7: &str;                    // in scope 0 at src/main.rs:88:67: 88:71

    bb0: {
        _3 = const "auto";               // scope 0 at src/main.rs:88:52: 88:58
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [97, 117, 116, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/main.rs:88:52: 88:58
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [97, 117, 116, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
        _2 = &(*_3);                     // scope 0 at src/main.rs:88:52: 88:58
        _5 = const "off";                // scope 0 at src/main.rs:88:60: 88:65
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [111, 102, 102], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 })
                                         // mir::Constant
                                         // + span: src/main.rs:88:60: 88:65
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [111, 102, 102], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 }) }
        _4 = &(*_5);                     // scope 0 at src/main.rs:88:60: 88:65
        _7 = const "on";                 // scope 0 at src/main.rs:88:67: 88:71
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [111, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/main.rs:88:67: 88:71
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [111, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _6 = &(*_7);                     // scope 0 at src/main.rs:88:67: 88:71
        _1 = [move _2, move _4, move _6]; // scope 0 at src/main.rs:88:51: 88:72
        _0 = &_1;                        // scope 0 at src/main.rs:88:50: 88:72
        return;                          // scope 0 at src/main.rs:88:50: 88:72
    }
}

promoted[4] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at src/main.rs:51:42: 51:81
    let mut _1: [&str; 3];               // in scope 0 at src/main.rs:51:43: 51:81
    let mut _2: &str;                    // in scope 0 at src/main.rs:51:44: 51:53
    let mut _3: &str;                    // in scope 0 at src/main.rs:51:44: 51:53
    let mut _4: &str;                    // in scope 0 at src/main.rs:51:55: 51:65
    let mut _5: &str;                    // in scope 0 at src/main.rs:51:55: 51:65
    let mut _6: &str;                    // in scope 0 at src/main.rs:51:67: 51:80
    let mut _7: &str;                    // in scope 0 at src/main.rs:51:67: 51:80

    bb0: {
        _3 = const "battery";            // scope 0 at src/main.rs:51:44: 51:53
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [98, 97, 116, 116, 101, 114, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/main.rs:51:44: 51:53
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [98, 97, 116, 116, 101, 114, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _2 = &(*_3);                     // scope 0 at src/main.rs:51:44: 51:53
        _5 = const "balanced";           // scope 0 at src/main.rs:51:55: 51:65
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [98, 97, 108, 97, 110, 99, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/main.rs:51:55: 51:65
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [98, 97, 108, 97, 110, 99, 101, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
        _4 = &(*_5);                     // scope 0 at src/main.rs:51:55: 51:65
        _7 = const "performance";        // scope 0 at src/main.rs:51:67: 51:80
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 101, 114, 102, 111, 114, 109, 97, 110, 99, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/main.rs:51:67: 51:80
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 101, 114, 102, 111, 114, 109, 97, 110, 99, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        _6 = &(*_7);                     // scope 0 at src/main.rs:51:67: 51:80
        _1 = [move _2, move _4, move _6]; // scope 0 at src/main.rs:51:43: 51:81
        _0 = &_1;                        // scope 0 at src/main.rs:51:42: 51:81
        return;                          // scope 0 at src/main.rs:51:42: 51:81
    }
}

fn main::{closure#0}(_1: &mut [closure@src/main.rs:112:38: 112:55], _2: &ChargeProfile) -> &str {
    debug p => _2;                       // in scope 0 at src/main.rs:112:39: 112:40
    let mut _0: &str;                    // return place in scope 0 at src/main.rs:112:42: 112:42
    let mut _3: &std::string::String;    // in scope 0 at src/main.rs:112:42: 112:55

    bb0: {
        _3 = &((*_2).0: std::string::String); // scope 0 at src/main.rs:112:42: 112:55
        _0 = String::as_str(move _3) -> bb1; // scope 0 at src/main.rs:112:42: 112:55
                                         // mir::Constant
                                         // + span: src/main.rs:112:47: 112:53
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> &'r str {std::string::String::as_str}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at src/main.rs:112:55: 112:55
    }
}
