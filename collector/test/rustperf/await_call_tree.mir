// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn h() -> impl Future {
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:6:26: 6:29
    let mut _1: [static generator@src/lib.rs:6:30: 10:10]; // in scope 0 at src/lib.rs:6:30: 10:10

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:6:30: 10:10
        discriminant(_1) = 0;            // scope 0 at src/lib.rs:6:30: 10:10
        _0 = from_generator::<[static generator@src/lib.rs:6:30: 10:10]>(move _1) -> bb1; // scope 0 at src/lib.rs:6:30: 10:10
                                         // mir::Constant
                                         // + span: src/lib.rs:6:30: 10:10
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:6:30: 10:10]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:6:30: 10:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at src/lib.rs:10:9: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }
}

fn g() -> impl Future {
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:6:26: 6:29
    let mut _1: [static generator@src/lib.rs:6:30: 10:10]; // in scope 0 at src/lib.rs:6:30: 10:10

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:6:30: 10:10
        discriminant(_1) = 0;            // scope 0 at src/lib.rs:6:30: 10:10
        _0 = from_generator::<[static generator@src/lib.rs:6:30: 10:10]>(move _1) -> bb1; // scope 0 at src/lib.rs:6:30: 10:10
                                         // mir::Constant
                                         // + span: src/lib.rs:6:30: 10:10
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:6:30: 10:10]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:6:30: 10:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at src/lib.rs:10:9: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }
}

fn f() -> impl Future {
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:6:26: 6:29
    let mut _1: [static generator@src/lib.rs:6:30: 10:10]; // in scope 0 at src/lib.rs:6:30: 10:10

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:6:30: 10:10
        discriminant(_1) = 0;            // scope 0 at src/lib.rs:6:30: 10:10
        _0 = from_generator::<[static generator@src/lib.rs:6:30: 10:10]>(move _1) -> bb1; // scope 0 at src/lib.rs:6:30: 10:10
                                         // mir::Constant
                                         // + span: src/lib.rs:6:30: 10:10
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:6:30: 10:10]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:6:30: 10:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at src/lib.rs:10:9: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }
}

fn e() -> impl Future {
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:6:26: 6:29
    let mut _1: [static generator@src/lib.rs:6:30: 10:10]; // in scope 0 at src/lib.rs:6:30: 10:10

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:6:30: 10:10
        discriminant(_1) = 0;            // scope 0 at src/lib.rs:6:30: 10:10
        _0 = from_generator::<[static generator@src/lib.rs:6:30: 10:10]>(move _1) -> bb1; // scope 0 at src/lib.rs:6:30: 10:10
                                         // mir::Constant
                                         // + span: src/lib.rs:6:30: 10:10
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:6:30: 10:10]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:6:30: 10:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at src/lib.rs:10:9: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }
}

fn d() -> impl Future {
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:6:26: 6:29
    let mut _1: [static generator@src/lib.rs:6:30: 10:10]; // in scope 0 at src/lib.rs:6:30: 10:10

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:6:30: 10:10
        discriminant(_1) = 0;            // scope 0 at src/lib.rs:6:30: 10:10
        _0 = from_generator::<[static generator@src/lib.rs:6:30: 10:10]>(move _1) -> bb1; // scope 0 at src/lib.rs:6:30: 10:10
                                         // mir::Constant
                                         // + span: src/lib.rs:6:30: 10:10
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:6:30: 10:10]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:6:30: 10:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at src/lib.rs:10:9: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }
}

fn c() -> impl Future {
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:6:26: 6:29
    let mut _1: [static generator@src/lib.rs:6:30: 10:10]; // in scope 0 at src/lib.rs:6:30: 10:10

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:6:30: 10:10
        discriminant(_1) = 0;            // scope 0 at src/lib.rs:6:30: 10:10
        _0 = from_generator::<[static generator@src/lib.rs:6:30: 10:10]>(move _1) -> bb1; // scope 0 at src/lib.rs:6:30: 10:10
                                         // mir::Constant
                                         // + span: src/lib.rs:6:30: 10:10
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:6:30: 10:10]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:6:30: 10:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at src/lib.rs:10:9: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }
}

fn b() -> impl Future {
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:6:26: 6:29
    let mut _1: [static generator@src/lib.rs:6:30: 10:10]; // in scope 0 at src/lib.rs:6:30: 10:10

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:6:30: 10:10
        discriminant(_1) = 0;            // scope 0 at src/lib.rs:6:30: 10:10
        _0 = from_generator::<[static generator@src/lib.rs:6:30: 10:10]>(move _1) -> bb1; // scope 0 at src/lib.rs:6:30: 10:10
                                         // mir::Constant
                                         // + span: src/lib.rs:6:30: 10:10
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:6:30: 10:10]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:6:30: 10:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at src/lib.rs:10:9: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }
}

fn a() -> impl Future {
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:14:17: 14:20
    let mut _1: [static generator@src/lib.rs:14:21: 14:26]; // in scope 0 at src/lib.rs:14:21: 14:26

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:14:21: 14:26
        discriminant(_1) = 0;            // scope 0 at src/lib.rs:14:21: 14:26
        _0 = from_generator::<[static generator@src/lib.rs:14:21: 14:26]>(move _1) -> bb1; // scope 0 at src/lib.rs:14:21: 14:26
                                         // mir::Constant
                                         // + span: src/lib.rs:14:21: 14:26
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:14:21: 14:26]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:14:21: 14:26]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at src/lib.rs:14:25: 14:26
        return;                          // scope 0 at src/lib.rs:14:26: 14:26
    }
}

fn h::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:6:30: 10:10]>, _2: ResumeTy) -> GeneratorState<(), i32> {
    debug _task_context => _40;          // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _0: std::ops::GeneratorState<(), i32>; // return place in scope 0 at src/lib.rs:6:30: 10:10
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:17
    let mut _4: std::task::Poll<i32>;    // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _5: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _6: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _8: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _10: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _11: isize;                  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _13: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _14: ();                     // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _15: impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:17
    let mut _16: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _17: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _18: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _19: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _20: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _21: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _22: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _23: isize;                  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _25: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _26: ();                     // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _27: impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:17
    let mut _28: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _29: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _30: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _31: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _32: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _33: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _34: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _35: isize;                  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _37: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _38: ();                     // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _39: i32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _40: std::future::ResumeTy;  // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _41: u32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:7:13: 7:23
        let _12: i32;                    // in scope 1 at src/lib.rs:7:13: 7:23
        scope 2 {
        }
        scope 3 {
            debug result => _12;         // in scope 3 at src/lib.rs:7:13: 7:23
        }
    }
    scope 4 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // in scope 4 at src/lib.rs:8:13: 8:23
        let _24: i32;                    // in scope 4 at src/lib.rs:8:13: 8:23
        scope 5 {
        }
        scope 6 {
            debug result => _24;         // in scope 6 at src/lib.rs:8:13: 8:23
        }
    }
    scope 7 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // in scope 7 at src/lib.rs:9:13: 9:23
        let _36: i32;                    // in scope 7 at src/lib.rs:9:13: 9:23
        scope 8 {
        }
        scope 9 {
            debug result => _36;         // in scope 9 at src/lib.rs:9:13: 9:23
        }
    }

    bb0: {
        _41 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))); // scope 0 at src/lib.rs:6:30: 10:10
        switchInt(move _41) -> [0_u32: bb1, 1_u32: bb46, 2_u32: bb45, 3_u32: bb42, 4_u32: bb43, 5_u32: bb44, otherwise: bb47]; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb1: {
        _40 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_3);                 // scope 0 at src/lib.rs:7:13: 7:17
        _3 = g() -> [return: bb2, unwind: bb40]; // scope 0 at src/lib.rs:7:13: 7:17
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {g}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:7:13: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb3: {
        StorageLive(_4);                 // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_5);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_6);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _7 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:7:13: 7:23
        _6 = &mut (*_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _5 = Pin::<&mut impl Future>::new_unchecked(move _6) -> [return: bb4, unwind: bb38]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageLive(_8);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_10);                // scope 2 at src/lib.rs:7:13: 7:23
        _10 = _40;                       // scope 2 at src/lib.rs:7:13: 7:23
        _9 = get_context(move _10) -> [return: bb5, unwind: bb36]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _8 = &mut (*_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        _4 = <impl Future as Future>::poll(move _5, move _8) -> [return: bb6, unwind: bb37]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        _11 = discriminant(_4);          // scope 1 at src/lib.rs:7:13: 7:23
        switchInt(move _11) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb7: {
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageLive(_13);                // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_14);                // scope 1 at src/lib.rs:7:13: 7:23
        ((_0 as Yielded).0: ()) = move _14; // scope 1 at src/lib.rs:7:13: 7:23
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:7:13: 7:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 3; // scope 1 at src/lib.rs:7:13: 7:23
        return;                          // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb9: {
        StorageLive(_12);                // scope 1 at src/lib.rs:7:13: 7:23
        _12 = ((_4 as Ready).0: i32);    // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_12);                // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        StorageLive(_15);                // scope 0 at src/lib.rs:8:13: 8:17
        _15 = g() -> [return: bb10, unwind: bb35]; // scope 0 at src/lib.rs:8:13: 8:17
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {g}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future) = move _15; // scope 0 at src/lib.rs:8:13: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb11: {
        StorageLive(_16);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_17);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_18);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_19);                // scope 5 at src/lib.rs:8:13: 8:23
        _19 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // scope 5 at src/lib.rs:8:13: 8:23
        _18 = &mut (*_19);               // scope 5 at src/lib.rs:8:13: 8:23
        _17 = Pin::<&mut impl Future>::new_unchecked(move _18) -> [return: bb12, unwind: bb33]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageLive(_20);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_21);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_22);                // scope 5 at src/lib.rs:8:13: 8:23
        _22 = _40;                       // scope 5 at src/lib.rs:8:13: 8:23
        _21 = get_context(move _22) -> [return: bb13, unwind: bb31]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _20 = &mut (*_21);               // scope 5 at src/lib.rs:8:13: 8:23
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        _16 = <impl Future as Future>::poll(move _17, move _20) -> [return: bb14, unwind: bb32]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        _23 = discriminant(_16);         // scope 4 at src/lib.rs:8:13: 8:23
        switchInt(move _23) -> [0_isize: bb17, 1_isize: bb15, otherwise: bb16]; // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb15: {
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageLive(_25);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_26);                // scope 4 at src/lib.rs:8:13: 8:23
        ((_0 as Yielded).0: ()) = move _26; // scope 4 at src/lib.rs:8:13: 8:23
        discriminant(_0) = 0;            // scope 4 at src/lib.rs:8:13: 8:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 4; // scope 4 at src/lib.rs:8:13: 8:23
        return;                          // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb16: {
        unreachable;                     // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb17: {
        StorageLive(_24);                // scope 4 at src/lib.rs:8:13: 8:23
        _24 = ((_16 as Ready).0: i32);   // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_24);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        StorageLive(_27);                // scope 0 at src/lib.rs:9:13: 9:17
        _27 = g() -> [return: bb18, unwind: bb30]; // scope 0 at src/lib.rs:9:13: 9:17
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {g}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future) = move _27; // scope 0 at src/lib.rs:9:13: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb19: {
        StorageLive(_28);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_29);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_30);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_31);                // scope 8 at src/lib.rs:9:13: 9:23
        _31 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // scope 8 at src/lib.rs:9:13: 9:23
        _30 = &mut (*_31);               // scope 8 at src/lib.rs:9:13: 9:23
        _29 = Pin::<&mut impl Future>::new_unchecked(move _30) -> [return: bb20, unwind: bb28]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageLive(_32);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_33);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_34);                // scope 8 at src/lib.rs:9:13: 9:23
        _34 = _40;                       // scope 8 at src/lib.rs:9:13: 9:23
        _33 = get_context(move _34) -> [return: bb21, unwind: bb26]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _32 = &mut (*_33);               // scope 8 at src/lib.rs:9:13: 9:23
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        _28 = <impl Future as Future>::poll(move _29, move _32) -> [return: bb22, unwind: bb27]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        _35 = discriminant(_28);         // scope 7 at src/lib.rs:9:13: 9:23
        switchInt(move _35) -> [0_isize: bb25, 1_isize: bb23, otherwise: bb24]; // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb23: {
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageLive(_37);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_38);                // scope 7 at src/lib.rs:9:13: 9:23
        ((_0 as Yielded).0: ()) = move _38; // scope 7 at src/lib.rs:9:13: 9:23
        discriminant(_0) = 0;            // scope 7 at src/lib.rs:9:13: 9:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 5; // scope 7 at src/lib.rs:9:13: 9:23
        return;                          // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb24: {
        unreachable;                     // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb25: {
        StorageLive(_36);                // scope 7 at src/lib.rs:9:13: 9:23
        _36 = ((_28 as Ready).0: i32);   // scope 7 at src/lib.rs:9:13: 9:23
        _39 = _36;                       // scope 9 at src/lib.rs:9:13: 9:23
        StorageDead(_36);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        ((_0 as Complete).0: i32) = move _39; // scope 0 at src/lib.rs:10:10: 10:10
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:10:10: 10:10
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 1; // scope 0 at src/lib.rs:10:10: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }

    bb26 (cleanup): {
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb27;                    // scope 8 at no-location
    }

    bb27 (cleanup): {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 7 at no-location
    }

    bb28 (cleanup): {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 8 at no-location
    }

    bb29 (cleanup): {
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb30;                    // scope 0 at src/lib.rs:10:9: 10:10
    }

    bb30 (cleanup): {
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        goto -> bb41;                    // scope 0 at no-location
    }

    bb31 (cleanup): {
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb32;                    // scope 5 at no-location
    }

    bb32 (cleanup): {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 4 at no-location
    }

    bb33 (cleanup): {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 5 at no-location
    }

    bb34 (cleanup): {
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb35;                    // scope 0 at src/lib.rs:8:23: 8:24
    }

    bb35 (cleanup): {
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb36 (cleanup): {
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb37;                    // scope 2 at no-location
    }

    bb37 (cleanup): {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 1 at no-location
    }

    bb38 (cleanup): {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 2 at no-location
    }

    bb39 (cleanup): {
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb40;                    // scope 0 at src/lib.rs:7:23: 7:24
    }

    bb40 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb41 (cleanup): {
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 2; // scope 0 at src/lib.rs:6:30: 10:10
        resume;                          // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb42: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_13);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_14);                // scope 0 at src/lib.rs:6:30: 10:10
        _13 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_14);                // scope 1 at src/lib.rs:7:22: 7:23
        _40 = move _13;                  // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_13);                // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb43: {
        StorageLive(_15);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_25);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_26);                // scope 0 at src/lib.rs:6:30: 10:10
        _25 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_26);                // scope 4 at src/lib.rs:8:22: 8:23
        _40 = move _25;                  // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_25);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb44: {
        StorageLive(_27);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_37);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_38);                // scope 0 at src/lib.rs:6:30: 10:10
        _37 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_38);                // scope 7 at src/lib.rs:9:22: 9:23
        _40 = move _37;                  // scope 7 at src/lib.rs:9:13: 9:23
        StorageDead(_37);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb45: {
        assert(const false, "`async fn` resumed after panicking") -> bb45; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb46: {
        assert(const false, "`async fn` resumed after completion") -> bb46; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb47: {
        unreachable;                     // scope 0 at src/lib.rs:6:30: 10:10
    }
}

fn g::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:6:30: 10:10]>, _2: ResumeTy) -> GeneratorState<(), i32> {
    debug _task_context => _40;          // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _0: std::ops::GeneratorState<(), i32>; // return place in scope 0 at src/lib.rs:6:30: 10:10
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:17
    let mut _4: std::task::Poll<i32>;    // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _5: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _6: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _8: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _10: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _11: isize;                  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _13: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _14: ();                     // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _15: impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:17
    let mut _16: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _17: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _18: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _19: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _20: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _21: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _22: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _23: isize;                  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _25: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _26: ();                     // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _27: impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:17
    let mut _28: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _29: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _30: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _31: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _32: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _33: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _34: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _35: isize;                  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _37: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _38: ();                     // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _39: i32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _40: std::future::ResumeTy;  // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _41: u32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:7:13: 7:23
        let _12: i32;                    // in scope 1 at src/lib.rs:7:13: 7:23
        scope 2 {
        }
        scope 3 {
            debug result => _12;         // in scope 3 at src/lib.rs:7:13: 7:23
        }
    }
    scope 4 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // in scope 4 at src/lib.rs:8:13: 8:23
        let _24: i32;                    // in scope 4 at src/lib.rs:8:13: 8:23
        scope 5 {
        }
        scope 6 {
            debug result => _24;         // in scope 6 at src/lib.rs:8:13: 8:23
        }
    }
    scope 7 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // in scope 7 at src/lib.rs:9:13: 9:23
        let _36: i32;                    // in scope 7 at src/lib.rs:9:13: 9:23
        scope 8 {
        }
        scope 9 {
            debug result => _36;         // in scope 9 at src/lib.rs:9:13: 9:23
        }
    }

    bb0: {
        _41 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))); // scope 0 at src/lib.rs:6:30: 10:10
        switchInt(move _41) -> [0_u32: bb1, 1_u32: bb46, 2_u32: bb45, 3_u32: bb42, 4_u32: bb43, 5_u32: bb44, otherwise: bb47]; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb1: {
        _40 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_3);                 // scope 0 at src/lib.rs:7:13: 7:17
        _3 = f() -> [return: bb2, unwind: bb40]; // scope 0 at src/lib.rs:7:13: 7:17
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {f}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:7:13: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb3: {
        StorageLive(_4);                 // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_5);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_6);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _7 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:7:13: 7:23
        _6 = &mut (*_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _5 = Pin::<&mut impl Future>::new_unchecked(move _6) -> [return: bb4, unwind: bb38]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageLive(_8);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_10);                // scope 2 at src/lib.rs:7:13: 7:23
        _10 = _40;                       // scope 2 at src/lib.rs:7:13: 7:23
        _9 = get_context(move _10) -> [return: bb5, unwind: bb36]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _8 = &mut (*_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        _4 = <impl Future as Future>::poll(move _5, move _8) -> [return: bb6, unwind: bb37]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        _11 = discriminant(_4);          // scope 1 at src/lib.rs:7:13: 7:23
        switchInt(move _11) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb7: {
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageLive(_13);                // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_14);                // scope 1 at src/lib.rs:7:13: 7:23
        ((_0 as Yielded).0: ()) = move _14; // scope 1 at src/lib.rs:7:13: 7:23
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:7:13: 7:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 3; // scope 1 at src/lib.rs:7:13: 7:23
        return;                          // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb9: {
        StorageLive(_12);                // scope 1 at src/lib.rs:7:13: 7:23
        _12 = ((_4 as Ready).0: i32);    // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_12);                // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        StorageLive(_15);                // scope 0 at src/lib.rs:8:13: 8:17
        _15 = f() -> [return: bb10, unwind: bb35]; // scope 0 at src/lib.rs:8:13: 8:17
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {f}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future) = move _15; // scope 0 at src/lib.rs:8:13: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb11: {
        StorageLive(_16);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_17);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_18);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_19);                // scope 5 at src/lib.rs:8:13: 8:23
        _19 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // scope 5 at src/lib.rs:8:13: 8:23
        _18 = &mut (*_19);               // scope 5 at src/lib.rs:8:13: 8:23
        _17 = Pin::<&mut impl Future>::new_unchecked(move _18) -> [return: bb12, unwind: bb33]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageLive(_20);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_21);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_22);                // scope 5 at src/lib.rs:8:13: 8:23
        _22 = _40;                       // scope 5 at src/lib.rs:8:13: 8:23
        _21 = get_context(move _22) -> [return: bb13, unwind: bb31]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _20 = &mut (*_21);               // scope 5 at src/lib.rs:8:13: 8:23
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        _16 = <impl Future as Future>::poll(move _17, move _20) -> [return: bb14, unwind: bb32]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        _23 = discriminant(_16);         // scope 4 at src/lib.rs:8:13: 8:23
        switchInt(move _23) -> [0_isize: bb17, 1_isize: bb15, otherwise: bb16]; // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb15: {
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageLive(_25);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_26);                // scope 4 at src/lib.rs:8:13: 8:23
        ((_0 as Yielded).0: ()) = move _26; // scope 4 at src/lib.rs:8:13: 8:23
        discriminant(_0) = 0;            // scope 4 at src/lib.rs:8:13: 8:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 4; // scope 4 at src/lib.rs:8:13: 8:23
        return;                          // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb16: {
        unreachable;                     // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb17: {
        StorageLive(_24);                // scope 4 at src/lib.rs:8:13: 8:23
        _24 = ((_16 as Ready).0: i32);   // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_24);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        StorageLive(_27);                // scope 0 at src/lib.rs:9:13: 9:17
        _27 = f() -> [return: bb18, unwind: bb30]; // scope 0 at src/lib.rs:9:13: 9:17
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {f}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future) = move _27; // scope 0 at src/lib.rs:9:13: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb19: {
        StorageLive(_28);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_29);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_30);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_31);                // scope 8 at src/lib.rs:9:13: 9:23
        _31 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // scope 8 at src/lib.rs:9:13: 9:23
        _30 = &mut (*_31);               // scope 8 at src/lib.rs:9:13: 9:23
        _29 = Pin::<&mut impl Future>::new_unchecked(move _30) -> [return: bb20, unwind: bb28]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageLive(_32);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_33);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_34);                // scope 8 at src/lib.rs:9:13: 9:23
        _34 = _40;                       // scope 8 at src/lib.rs:9:13: 9:23
        _33 = get_context(move _34) -> [return: bb21, unwind: bb26]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _32 = &mut (*_33);               // scope 8 at src/lib.rs:9:13: 9:23
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        _28 = <impl Future as Future>::poll(move _29, move _32) -> [return: bb22, unwind: bb27]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        _35 = discriminant(_28);         // scope 7 at src/lib.rs:9:13: 9:23
        switchInt(move _35) -> [0_isize: bb25, 1_isize: bb23, otherwise: bb24]; // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb23: {
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageLive(_37);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_38);                // scope 7 at src/lib.rs:9:13: 9:23
        ((_0 as Yielded).0: ()) = move _38; // scope 7 at src/lib.rs:9:13: 9:23
        discriminant(_0) = 0;            // scope 7 at src/lib.rs:9:13: 9:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 5; // scope 7 at src/lib.rs:9:13: 9:23
        return;                          // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb24: {
        unreachable;                     // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb25: {
        StorageLive(_36);                // scope 7 at src/lib.rs:9:13: 9:23
        _36 = ((_28 as Ready).0: i32);   // scope 7 at src/lib.rs:9:13: 9:23
        _39 = _36;                       // scope 9 at src/lib.rs:9:13: 9:23
        StorageDead(_36);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        ((_0 as Complete).0: i32) = move _39; // scope 0 at src/lib.rs:10:10: 10:10
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:10:10: 10:10
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 1; // scope 0 at src/lib.rs:10:10: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }

    bb26 (cleanup): {
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb27;                    // scope 8 at no-location
    }

    bb27 (cleanup): {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 7 at no-location
    }

    bb28 (cleanup): {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 8 at no-location
    }

    bb29 (cleanup): {
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb30;                    // scope 0 at src/lib.rs:10:9: 10:10
    }

    bb30 (cleanup): {
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        goto -> bb41;                    // scope 0 at no-location
    }

    bb31 (cleanup): {
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb32;                    // scope 5 at no-location
    }

    bb32 (cleanup): {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 4 at no-location
    }

    bb33 (cleanup): {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 5 at no-location
    }

    bb34 (cleanup): {
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb35;                    // scope 0 at src/lib.rs:8:23: 8:24
    }

    bb35 (cleanup): {
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb36 (cleanup): {
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb37;                    // scope 2 at no-location
    }

    bb37 (cleanup): {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 1 at no-location
    }

    bb38 (cleanup): {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 2 at no-location
    }

    bb39 (cleanup): {
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb40;                    // scope 0 at src/lib.rs:7:23: 7:24
    }

    bb40 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb41 (cleanup): {
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 2; // scope 0 at src/lib.rs:6:30: 10:10
        resume;                          // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb42: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_13);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_14);                // scope 0 at src/lib.rs:6:30: 10:10
        _13 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_14);                // scope 1 at src/lib.rs:7:22: 7:23
        _40 = move _13;                  // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_13);                // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb43: {
        StorageLive(_15);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_25);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_26);                // scope 0 at src/lib.rs:6:30: 10:10
        _25 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_26);                // scope 4 at src/lib.rs:8:22: 8:23
        _40 = move _25;                  // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_25);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb44: {
        StorageLive(_27);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_37);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_38);                // scope 0 at src/lib.rs:6:30: 10:10
        _37 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_38);                // scope 7 at src/lib.rs:9:22: 9:23
        _40 = move _37;                  // scope 7 at src/lib.rs:9:13: 9:23
        StorageDead(_37);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb45: {
        assert(const false, "`async fn` resumed after panicking") -> bb45; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb46: {
        assert(const false, "`async fn` resumed after completion") -> bb46; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb47: {
        unreachable;                     // scope 0 at src/lib.rs:6:30: 10:10
    }
}

fn f::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:6:30: 10:10]>, _2: ResumeTy) -> GeneratorState<(), i32> {
    debug _task_context => _40;          // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _0: std::ops::GeneratorState<(), i32>; // return place in scope 0 at src/lib.rs:6:30: 10:10
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:17
    let mut _4: std::task::Poll<i32>;    // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _5: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _6: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _8: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _10: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _11: isize;                  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _13: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _14: ();                     // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _15: impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:17
    let mut _16: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _17: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _18: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _19: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _20: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _21: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _22: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _23: isize;                  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _25: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _26: ();                     // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _27: impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:17
    let mut _28: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _29: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _30: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _31: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _32: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _33: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _34: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _35: isize;                  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _37: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _38: ();                     // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _39: i32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _40: std::future::ResumeTy;  // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _41: u32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:7:13: 7:23
        let _12: i32;                    // in scope 1 at src/lib.rs:7:13: 7:23
        scope 2 {
        }
        scope 3 {
            debug result => _12;         // in scope 3 at src/lib.rs:7:13: 7:23
        }
    }
    scope 4 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // in scope 4 at src/lib.rs:8:13: 8:23
        let _24: i32;                    // in scope 4 at src/lib.rs:8:13: 8:23
        scope 5 {
        }
        scope 6 {
            debug result => _24;         // in scope 6 at src/lib.rs:8:13: 8:23
        }
    }
    scope 7 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // in scope 7 at src/lib.rs:9:13: 9:23
        let _36: i32;                    // in scope 7 at src/lib.rs:9:13: 9:23
        scope 8 {
        }
        scope 9 {
            debug result => _36;         // in scope 9 at src/lib.rs:9:13: 9:23
        }
    }

    bb0: {
        _41 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))); // scope 0 at src/lib.rs:6:30: 10:10
        switchInt(move _41) -> [0_u32: bb1, 1_u32: bb46, 2_u32: bb45, 3_u32: bb42, 4_u32: bb43, 5_u32: bb44, otherwise: bb47]; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb1: {
        _40 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_3);                 // scope 0 at src/lib.rs:7:13: 7:17
        _3 = e() -> [return: bb2, unwind: bb40]; // scope 0 at src/lib.rs:7:13: 7:17
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {e}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:7:13: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb3: {
        StorageLive(_4);                 // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_5);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_6);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _7 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:7:13: 7:23
        _6 = &mut (*_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _5 = Pin::<&mut impl Future>::new_unchecked(move _6) -> [return: bb4, unwind: bb38]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageLive(_8);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_10);                // scope 2 at src/lib.rs:7:13: 7:23
        _10 = _40;                       // scope 2 at src/lib.rs:7:13: 7:23
        _9 = get_context(move _10) -> [return: bb5, unwind: bb36]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _8 = &mut (*_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        _4 = <impl Future as Future>::poll(move _5, move _8) -> [return: bb6, unwind: bb37]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        _11 = discriminant(_4);          // scope 1 at src/lib.rs:7:13: 7:23
        switchInt(move _11) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb7: {
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageLive(_13);                // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_14);                // scope 1 at src/lib.rs:7:13: 7:23
        ((_0 as Yielded).0: ()) = move _14; // scope 1 at src/lib.rs:7:13: 7:23
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:7:13: 7:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 3; // scope 1 at src/lib.rs:7:13: 7:23
        return;                          // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb9: {
        StorageLive(_12);                // scope 1 at src/lib.rs:7:13: 7:23
        _12 = ((_4 as Ready).0: i32);    // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_12);                // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        StorageLive(_15);                // scope 0 at src/lib.rs:8:13: 8:17
        _15 = e() -> [return: bb10, unwind: bb35]; // scope 0 at src/lib.rs:8:13: 8:17
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {e}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future) = move _15; // scope 0 at src/lib.rs:8:13: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb11: {
        StorageLive(_16);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_17);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_18);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_19);                // scope 5 at src/lib.rs:8:13: 8:23
        _19 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // scope 5 at src/lib.rs:8:13: 8:23
        _18 = &mut (*_19);               // scope 5 at src/lib.rs:8:13: 8:23
        _17 = Pin::<&mut impl Future>::new_unchecked(move _18) -> [return: bb12, unwind: bb33]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageLive(_20);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_21);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_22);                // scope 5 at src/lib.rs:8:13: 8:23
        _22 = _40;                       // scope 5 at src/lib.rs:8:13: 8:23
        _21 = get_context(move _22) -> [return: bb13, unwind: bb31]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _20 = &mut (*_21);               // scope 5 at src/lib.rs:8:13: 8:23
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        _16 = <impl Future as Future>::poll(move _17, move _20) -> [return: bb14, unwind: bb32]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        _23 = discriminant(_16);         // scope 4 at src/lib.rs:8:13: 8:23
        switchInt(move _23) -> [0_isize: bb17, 1_isize: bb15, otherwise: bb16]; // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb15: {
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageLive(_25);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_26);                // scope 4 at src/lib.rs:8:13: 8:23
        ((_0 as Yielded).0: ()) = move _26; // scope 4 at src/lib.rs:8:13: 8:23
        discriminant(_0) = 0;            // scope 4 at src/lib.rs:8:13: 8:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 4; // scope 4 at src/lib.rs:8:13: 8:23
        return;                          // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb16: {
        unreachable;                     // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb17: {
        StorageLive(_24);                // scope 4 at src/lib.rs:8:13: 8:23
        _24 = ((_16 as Ready).0: i32);   // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_24);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        StorageLive(_27);                // scope 0 at src/lib.rs:9:13: 9:17
        _27 = e() -> [return: bb18, unwind: bb30]; // scope 0 at src/lib.rs:9:13: 9:17
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {e}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future) = move _27; // scope 0 at src/lib.rs:9:13: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb19: {
        StorageLive(_28);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_29);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_30);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_31);                // scope 8 at src/lib.rs:9:13: 9:23
        _31 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // scope 8 at src/lib.rs:9:13: 9:23
        _30 = &mut (*_31);               // scope 8 at src/lib.rs:9:13: 9:23
        _29 = Pin::<&mut impl Future>::new_unchecked(move _30) -> [return: bb20, unwind: bb28]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageLive(_32);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_33);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_34);                // scope 8 at src/lib.rs:9:13: 9:23
        _34 = _40;                       // scope 8 at src/lib.rs:9:13: 9:23
        _33 = get_context(move _34) -> [return: bb21, unwind: bb26]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _32 = &mut (*_33);               // scope 8 at src/lib.rs:9:13: 9:23
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        _28 = <impl Future as Future>::poll(move _29, move _32) -> [return: bb22, unwind: bb27]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        _35 = discriminant(_28);         // scope 7 at src/lib.rs:9:13: 9:23
        switchInt(move _35) -> [0_isize: bb25, 1_isize: bb23, otherwise: bb24]; // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb23: {
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageLive(_37);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_38);                // scope 7 at src/lib.rs:9:13: 9:23
        ((_0 as Yielded).0: ()) = move _38; // scope 7 at src/lib.rs:9:13: 9:23
        discriminant(_0) = 0;            // scope 7 at src/lib.rs:9:13: 9:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 5; // scope 7 at src/lib.rs:9:13: 9:23
        return;                          // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb24: {
        unreachable;                     // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb25: {
        StorageLive(_36);                // scope 7 at src/lib.rs:9:13: 9:23
        _36 = ((_28 as Ready).0: i32);   // scope 7 at src/lib.rs:9:13: 9:23
        _39 = _36;                       // scope 9 at src/lib.rs:9:13: 9:23
        StorageDead(_36);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        ((_0 as Complete).0: i32) = move _39; // scope 0 at src/lib.rs:10:10: 10:10
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:10:10: 10:10
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 1; // scope 0 at src/lib.rs:10:10: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }

    bb26 (cleanup): {
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb27;                    // scope 8 at no-location
    }

    bb27 (cleanup): {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 7 at no-location
    }

    bb28 (cleanup): {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 8 at no-location
    }

    bb29 (cleanup): {
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb30;                    // scope 0 at src/lib.rs:10:9: 10:10
    }

    bb30 (cleanup): {
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        goto -> bb41;                    // scope 0 at no-location
    }

    bb31 (cleanup): {
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb32;                    // scope 5 at no-location
    }

    bb32 (cleanup): {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 4 at no-location
    }

    bb33 (cleanup): {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 5 at no-location
    }

    bb34 (cleanup): {
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb35;                    // scope 0 at src/lib.rs:8:23: 8:24
    }

    bb35 (cleanup): {
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb36 (cleanup): {
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb37;                    // scope 2 at no-location
    }

    bb37 (cleanup): {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 1 at no-location
    }

    bb38 (cleanup): {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 2 at no-location
    }

    bb39 (cleanup): {
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb40;                    // scope 0 at src/lib.rs:7:23: 7:24
    }

    bb40 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb41 (cleanup): {
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 2; // scope 0 at src/lib.rs:6:30: 10:10
        resume;                          // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb42: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_13);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_14);                // scope 0 at src/lib.rs:6:30: 10:10
        _13 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_14);                // scope 1 at src/lib.rs:7:22: 7:23
        _40 = move _13;                  // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_13);                // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb43: {
        StorageLive(_15);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_25);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_26);                // scope 0 at src/lib.rs:6:30: 10:10
        _25 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_26);                // scope 4 at src/lib.rs:8:22: 8:23
        _40 = move _25;                  // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_25);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb44: {
        StorageLive(_27);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_37);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_38);                // scope 0 at src/lib.rs:6:30: 10:10
        _37 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_38);                // scope 7 at src/lib.rs:9:22: 9:23
        _40 = move _37;                  // scope 7 at src/lib.rs:9:13: 9:23
        StorageDead(_37);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb45: {
        assert(const false, "`async fn` resumed after panicking") -> bb45; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb46: {
        assert(const false, "`async fn` resumed after completion") -> bb46; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb47: {
        unreachable;                     // scope 0 at src/lib.rs:6:30: 10:10
    }
}

fn e::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:6:30: 10:10]>, _2: ResumeTy) -> GeneratorState<(), i32> {
    debug _task_context => _40;          // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _0: std::ops::GeneratorState<(), i32>; // return place in scope 0 at src/lib.rs:6:30: 10:10
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:17
    let mut _4: std::task::Poll<i32>;    // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _5: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _6: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _8: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _10: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _11: isize;                  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _13: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _14: ();                     // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _15: impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:17
    let mut _16: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _17: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _18: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _19: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _20: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _21: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _22: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _23: isize;                  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _25: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _26: ();                     // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _27: impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:17
    let mut _28: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _29: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _30: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _31: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _32: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _33: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _34: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _35: isize;                  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _37: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _38: ();                     // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _39: i32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _40: std::future::ResumeTy;  // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _41: u32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:7:13: 7:23
        let _12: i32;                    // in scope 1 at src/lib.rs:7:13: 7:23
        scope 2 {
        }
        scope 3 {
            debug result => _12;         // in scope 3 at src/lib.rs:7:13: 7:23
        }
    }
    scope 4 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // in scope 4 at src/lib.rs:8:13: 8:23
        let _24: i32;                    // in scope 4 at src/lib.rs:8:13: 8:23
        scope 5 {
        }
        scope 6 {
            debug result => _24;         // in scope 6 at src/lib.rs:8:13: 8:23
        }
    }
    scope 7 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // in scope 7 at src/lib.rs:9:13: 9:23
        let _36: i32;                    // in scope 7 at src/lib.rs:9:13: 9:23
        scope 8 {
        }
        scope 9 {
            debug result => _36;         // in scope 9 at src/lib.rs:9:13: 9:23
        }
    }

    bb0: {
        _41 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))); // scope 0 at src/lib.rs:6:30: 10:10
        switchInt(move _41) -> [0_u32: bb1, 1_u32: bb46, 2_u32: bb45, 3_u32: bb42, 4_u32: bb43, 5_u32: bb44, otherwise: bb47]; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb1: {
        _40 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_3);                 // scope 0 at src/lib.rs:7:13: 7:17
        _3 = d() -> [return: bb2, unwind: bb40]; // scope 0 at src/lib.rs:7:13: 7:17
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {d}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:7:13: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb3: {
        StorageLive(_4);                 // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_5);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_6);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _7 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:7:13: 7:23
        _6 = &mut (*_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _5 = Pin::<&mut impl Future>::new_unchecked(move _6) -> [return: bb4, unwind: bb38]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageLive(_8);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_10);                // scope 2 at src/lib.rs:7:13: 7:23
        _10 = _40;                       // scope 2 at src/lib.rs:7:13: 7:23
        _9 = get_context(move _10) -> [return: bb5, unwind: bb36]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _8 = &mut (*_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        _4 = <impl Future as Future>::poll(move _5, move _8) -> [return: bb6, unwind: bb37]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        _11 = discriminant(_4);          // scope 1 at src/lib.rs:7:13: 7:23
        switchInt(move _11) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb7: {
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageLive(_13);                // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_14);                // scope 1 at src/lib.rs:7:13: 7:23
        ((_0 as Yielded).0: ()) = move _14; // scope 1 at src/lib.rs:7:13: 7:23
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:7:13: 7:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 3; // scope 1 at src/lib.rs:7:13: 7:23
        return;                          // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb9: {
        StorageLive(_12);                // scope 1 at src/lib.rs:7:13: 7:23
        _12 = ((_4 as Ready).0: i32);    // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_12);                // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        StorageLive(_15);                // scope 0 at src/lib.rs:8:13: 8:17
        _15 = d() -> [return: bb10, unwind: bb35]; // scope 0 at src/lib.rs:8:13: 8:17
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {d}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future) = move _15; // scope 0 at src/lib.rs:8:13: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb11: {
        StorageLive(_16);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_17);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_18);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_19);                // scope 5 at src/lib.rs:8:13: 8:23
        _19 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // scope 5 at src/lib.rs:8:13: 8:23
        _18 = &mut (*_19);               // scope 5 at src/lib.rs:8:13: 8:23
        _17 = Pin::<&mut impl Future>::new_unchecked(move _18) -> [return: bb12, unwind: bb33]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageLive(_20);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_21);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_22);                // scope 5 at src/lib.rs:8:13: 8:23
        _22 = _40;                       // scope 5 at src/lib.rs:8:13: 8:23
        _21 = get_context(move _22) -> [return: bb13, unwind: bb31]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _20 = &mut (*_21);               // scope 5 at src/lib.rs:8:13: 8:23
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        _16 = <impl Future as Future>::poll(move _17, move _20) -> [return: bb14, unwind: bb32]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        _23 = discriminant(_16);         // scope 4 at src/lib.rs:8:13: 8:23
        switchInt(move _23) -> [0_isize: bb17, 1_isize: bb15, otherwise: bb16]; // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb15: {
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageLive(_25);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_26);                // scope 4 at src/lib.rs:8:13: 8:23
        ((_0 as Yielded).0: ()) = move _26; // scope 4 at src/lib.rs:8:13: 8:23
        discriminant(_0) = 0;            // scope 4 at src/lib.rs:8:13: 8:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 4; // scope 4 at src/lib.rs:8:13: 8:23
        return;                          // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb16: {
        unreachable;                     // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb17: {
        StorageLive(_24);                // scope 4 at src/lib.rs:8:13: 8:23
        _24 = ((_16 as Ready).0: i32);   // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_24);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        StorageLive(_27);                // scope 0 at src/lib.rs:9:13: 9:17
        _27 = d() -> [return: bb18, unwind: bb30]; // scope 0 at src/lib.rs:9:13: 9:17
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {d}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future) = move _27; // scope 0 at src/lib.rs:9:13: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb19: {
        StorageLive(_28);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_29);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_30);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_31);                // scope 8 at src/lib.rs:9:13: 9:23
        _31 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // scope 8 at src/lib.rs:9:13: 9:23
        _30 = &mut (*_31);               // scope 8 at src/lib.rs:9:13: 9:23
        _29 = Pin::<&mut impl Future>::new_unchecked(move _30) -> [return: bb20, unwind: bb28]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageLive(_32);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_33);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_34);                // scope 8 at src/lib.rs:9:13: 9:23
        _34 = _40;                       // scope 8 at src/lib.rs:9:13: 9:23
        _33 = get_context(move _34) -> [return: bb21, unwind: bb26]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _32 = &mut (*_33);               // scope 8 at src/lib.rs:9:13: 9:23
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        _28 = <impl Future as Future>::poll(move _29, move _32) -> [return: bb22, unwind: bb27]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        _35 = discriminant(_28);         // scope 7 at src/lib.rs:9:13: 9:23
        switchInt(move _35) -> [0_isize: bb25, 1_isize: bb23, otherwise: bb24]; // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb23: {
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageLive(_37);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_38);                // scope 7 at src/lib.rs:9:13: 9:23
        ((_0 as Yielded).0: ()) = move _38; // scope 7 at src/lib.rs:9:13: 9:23
        discriminant(_0) = 0;            // scope 7 at src/lib.rs:9:13: 9:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 5; // scope 7 at src/lib.rs:9:13: 9:23
        return;                          // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb24: {
        unreachable;                     // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb25: {
        StorageLive(_36);                // scope 7 at src/lib.rs:9:13: 9:23
        _36 = ((_28 as Ready).0: i32);   // scope 7 at src/lib.rs:9:13: 9:23
        _39 = _36;                       // scope 9 at src/lib.rs:9:13: 9:23
        StorageDead(_36);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        ((_0 as Complete).0: i32) = move _39; // scope 0 at src/lib.rs:10:10: 10:10
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:10:10: 10:10
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 1; // scope 0 at src/lib.rs:10:10: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }

    bb26 (cleanup): {
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb27;                    // scope 8 at no-location
    }

    bb27 (cleanup): {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 7 at no-location
    }

    bb28 (cleanup): {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 8 at no-location
    }

    bb29 (cleanup): {
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb30;                    // scope 0 at src/lib.rs:10:9: 10:10
    }

    bb30 (cleanup): {
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        goto -> bb41;                    // scope 0 at no-location
    }

    bb31 (cleanup): {
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb32;                    // scope 5 at no-location
    }

    bb32 (cleanup): {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 4 at no-location
    }

    bb33 (cleanup): {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 5 at no-location
    }

    bb34 (cleanup): {
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb35;                    // scope 0 at src/lib.rs:8:23: 8:24
    }

    bb35 (cleanup): {
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb36 (cleanup): {
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb37;                    // scope 2 at no-location
    }

    bb37 (cleanup): {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 1 at no-location
    }

    bb38 (cleanup): {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 2 at no-location
    }

    bb39 (cleanup): {
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb40;                    // scope 0 at src/lib.rs:7:23: 7:24
    }

    bb40 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb41 (cleanup): {
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 2; // scope 0 at src/lib.rs:6:30: 10:10
        resume;                          // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb42: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_13);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_14);                // scope 0 at src/lib.rs:6:30: 10:10
        _13 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_14);                // scope 1 at src/lib.rs:7:22: 7:23
        _40 = move _13;                  // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_13);                // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb43: {
        StorageLive(_15);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_25);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_26);                // scope 0 at src/lib.rs:6:30: 10:10
        _25 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_26);                // scope 4 at src/lib.rs:8:22: 8:23
        _40 = move _25;                  // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_25);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb44: {
        StorageLive(_27);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_37);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_38);                // scope 0 at src/lib.rs:6:30: 10:10
        _37 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_38);                // scope 7 at src/lib.rs:9:22: 9:23
        _40 = move _37;                  // scope 7 at src/lib.rs:9:13: 9:23
        StorageDead(_37);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb45: {
        assert(const false, "`async fn` resumed after panicking") -> bb45; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb46: {
        assert(const false, "`async fn` resumed after completion") -> bb46; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb47: {
        unreachable;                     // scope 0 at src/lib.rs:6:30: 10:10
    }
}

fn d::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:6:30: 10:10]>, _2: ResumeTy) -> GeneratorState<(), i32> {
    debug _task_context => _40;          // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _0: std::ops::GeneratorState<(), i32>; // return place in scope 0 at src/lib.rs:6:30: 10:10
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:17
    let mut _4: std::task::Poll<i32>;    // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _5: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _6: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _8: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _10: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _11: isize;                  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _13: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _14: ();                     // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _15: impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:17
    let mut _16: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _17: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _18: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _19: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _20: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _21: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _22: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _23: isize;                  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _25: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _26: ();                     // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _27: impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:17
    let mut _28: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _29: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _30: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _31: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _32: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _33: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _34: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _35: isize;                  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _37: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _38: ();                     // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _39: i32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _40: std::future::ResumeTy;  // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _41: u32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:7:13: 7:23
        let _12: i32;                    // in scope 1 at src/lib.rs:7:13: 7:23
        scope 2 {
        }
        scope 3 {
            debug result => _12;         // in scope 3 at src/lib.rs:7:13: 7:23
        }
    }
    scope 4 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // in scope 4 at src/lib.rs:8:13: 8:23
        let _24: i32;                    // in scope 4 at src/lib.rs:8:13: 8:23
        scope 5 {
        }
        scope 6 {
            debug result => _24;         // in scope 6 at src/lib.rs:8:13: 8:23
        }
    }
    scope 7 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // in scope 7 at src/lib.rs:9:13: 9:23
        let _36: i32;                    // in scope 7 at src/lib.rs:9:13: 9:23
        scope 8 {
        }
        scope 9 {
            debug result => _36;         // in scope 9 at src/lib.rs:9:13: 9:23
        }
    }

    bb0: {
        _41 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))); // scope 0 at src/lib.rs:6:30: 10:10
        switchInt(move _41) -> [0_u32: bb1, 1_u32: bb46, 2_u32: bb45, 3_u32: bb42, 4_u32: bb43, 5_u32: bb44, otherwise: bb47]; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb1: {
        _40 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_3);                 // scope 0 at src/lib.rs:7:13: 7:17
        _3 = c() -> [return: bb2, unwind: bb40]; // scope 0 at src/lib.rs:7:13: 7:17
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {c}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:7:13: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb3: {
        StorageLive(_4);                 // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_5);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_6);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _7 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:7:13: 7:23
        _6 = &mut (*_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _5 = Pin::<&mut impl Future>::new_unchecked(move _6) -> [return: bb4, unwind: bb38]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageLive(_8);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_10);                // scope 2 at src/lib.rs:7:13: 7:23
        _10 = _40;                       // scope 2 at src/lib.rs:7:13: 7:23
        _9 = get_context(move _10) -> [return: bb5, unwind: bb36]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _8 = &mut (*_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        _4 = <impl Future as Future>::poll(move _5, move _8) -> [return: bb6, unwind: bb37]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        _11 = discriminant(_4);          // scope 1 at src/lib.rs:7:13: 7:23
        switchInt(move _11) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb7: {
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageLive(_13);                // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_14);                // scope 1 at src/lib.rs:7:13: 7:23
        ((_0 as Yielded).0: ()) = move _14; // scope 1 at src/lib.rs:7:13: 7:23
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:7:13: 7:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 3; // scope 1 at src/lib.rs:7:13: 7:23
        return;                          // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb9: {
        StorageLive(_12);                // scope 1 at src/lib.rs:7:13: 7:23
        _12 = ((_4 as Ready).0: i32);    // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_12);                // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        StorageLive(_15);                // scope 0 at src/lib.rs:8:13: 8:17
        _15 = c() -> [return: bb10, unwind: bb35]; // scope 0 at src/lib.rs:8:13: 8:17
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {c}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future) = move _15; // scope 0 at src/lib.rs:8:13: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb11: {
        StorageLive(_16);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_17);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_18);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_19);                // scope 5 at src/lib.rs:8:13: 8:23
        _19 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // scope 5 at src/lib.rs:8:13: 8:23
        _18 = &mut (*_19);               // scope 5 at src/lib.rs:8:13: 8:23
        _17 = Pin::<&mut impl Future>::new_unchecked(move _18) -> [return: bb12, unwind: bb33]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageLive(_20);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_21);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_22);                // scope 5 at src/lib.rs:8:13: 8:23
        _22 = _40;                       // scope 5 at src/lib.rs:8:13: 8:23
        _21 = get_context(move _22) -> [return: bb13, unwind: bb31]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _20 = &mut (*_21);               // scope 5 at src/lib.rs:8:13: 8:23
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        _16 = <impl Future as Future>::poll(move _17, move _20) -> [return: bb14, unwind: bb32]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        _23 = discriminant(_16);         // scope 4 at src/lib.rs:8:13: 8:23
        switchInt(move _23) -> [0_isize: bb17, 1_isize: bb15, otherwise: bb16]; // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb15: {
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageLive(_25);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_26);                // scope 4 at src/lib.rs:8:13: 8:23
        ((_0 as Yielded).0: ()) = move _26; // scope 4 at src/lib.rs:8:13: 8:23
        discriminant(_0) = 0;            // scope 4 at src/lib.rs:8:13: 8:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 4; // scope 4 at src/lib.rs:8:13: 8:23
        return;                          // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb16: {
        unreachable;                     // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb17: {
        StorageLive(_24);                // scope 4 at src/lib.rs:8:13: 8:23
        _24 = ((_16 as Ready).0: i32);   // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_24);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        StorageLive(_27);                // scope 0 at src/lib.rs:9:13: 9:17
        _27 = c() -> [return: bb18, unwind: bb30]; // scope 0 at src/lib.rs:9:13: 9:17
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {c}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future) = move _27; // scope 0 at src/lib.rs:9:13: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb19: {
        StorageLive(_28);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_29);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_30);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_31);                // scope 8 at src/lib.rs:9:13: 9:23
        _31 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // scope 8 at src/lib.rs:9:13: 9:23
        _30 = &mut (*_31);               // scope 8 at src/lib.rs:9:13: 9:23
        _29 = Pin::<&mut impl Future>::new_unchecked(move _30) -> [return: bb20, unwind: bb28]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageLive(_32);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_33);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_34);                // scope 8 at src/lib.rs:9:13: 9:23
        _34 = _40;                       // scope 8 at src/lib.rs:9:13: 9:23
        _33 = get_context(move _34) -> [return: bb21, unwind: bb26]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _32 = &mut (*_33);               // scope 8 at src/lib.rs:9:13: 9:23
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        _28 = <impl Future as Future>::poll(move _29, move _32) -> [return: bb22, unwind: bb27]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        _35 = discriminant(_28);         // scope 7 at src/lib.rs:9:13: 9:23
        switchInt(move _35) -> [0_isize: bb25, 1_isize: bb23, otherwise: bb24]; // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb23: {
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageLive(_37);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_38);                // scope 7 at src/lib.rs:9:13: 9:23
        ((_0 as Yielded).0: ()) = move _38; // scope 7 at src/lib.rs:9:13: 9:23
        discriminant(_0) = 0;            // scope 7 at src/lib.rs:9:13: 9:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 5; // scope 7 at src/lib.rs:9:13: 9:23
        return;                          // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb24: {
        unreachable;                     // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb25: {
        StorageLive(_36);                // scope 7 at src/lib.rs:9:13: 9:23
        _36 = ((_28 as Ready).0: i32);   // scope 7 at src/lib.rs:9:13: 9:23
        _39 = _36;                       // scope 9 at src/lib.rs:9:13: 9:23
        StorageDead(_36);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        ((_0 as Complete).0: i32) = move _39; // scope 0 at src/lib.rs:10:10: 10:10
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:10:10: 10:10
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 1; // scope 0 at src/lib.rs:10:10: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }

    bb26 (cleanup): {
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb27;                    // scope 8 at no-location
    }

    bb27 (cleanup): {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 7 at no-location
    }

    bb28 (cleanup): {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 8 at no-location
    }

    bb29 (cleanup): {
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb30;                    // scope 0 at src/lib.rs:10:9: 10:10
    }

    bb30 (cleanup): {
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        goto -> bb41;                    // scope 0 at no-location
    }

    bb31 (cleanup): {
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb32;                    // scope 5 at no-location
    }

    bb32 (cleanup): {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 4 at no-location
    }

    bb33 (cleanup): {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 5 at no-location
    }

    bb34 (cleanup): {
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb35;                    // scope 0 at src/lib.rs:8:23: 8:24
    }

    bb35 (cleanup): {
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb36 (cleanup): {
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb37;                    // scope 2 at no-location
    }

    bb37 (cleanup): {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 1 at no-location
    }

    bb38 (cleanup): {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 2 at no-location
    }

    bb39 (cleanup): {
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb40;                    // scope 0 at src/lib.rs:7:23: 7:24
    }

    bb40 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb41 (cleanup): {
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 2; // scope 0 at src/lib.rs:6:30: 10:10
        resume;                          // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb42: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_13);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_14);                // scope 0 at src/lib.rs:6:30: 10:10
        _13 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_14);                // scope 1 at src/lib.rs:7:22: 7:23
        _40 = move _13;                  // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_13);                // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb43: {
        StorageLive(_15);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_25);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_26);                // scope 0 at src/lib.rs:6:30: 10:10
        _25 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_26);                // scope 4 at src/lib.rs:8:22: 8:23
        _40 = move _25;                  // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_25);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb44: {
        StorageLive(_27);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_37);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_38);                // scope 0 at src/lib.rs:6:30: 10:10
        _37 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_38);                // scope 7 at src/lib.rs:9:22: 9:23
        _40 = move _37;                  // scope 7 at src/lib.rs:9:13: 9:23
        StorageDead(_37);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb45: {
        assert(const false, "`async fn` resumed after panicking") -> bb45; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb46: {
        assert(const false, "`async fn` resumed after completion") -> bb46; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb47: {
        unreachable;                     // scope 0 at src/lib.rs:6:30: 10:10
    }
}

fn c::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:6:30: 10:10]>, _2: ResumeTy) -> GeneratorState<(), i32> {
    debug _task_context => _40;          // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _0: std::ops::GeneratorState<(), i32>; // return place in scope 0 at src/lib.rs:6:30: 10:10
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:17
    let mut _4: std::task::Poll<i32>;    // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _5: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _6: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _8: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _10: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _11: isize;                  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _13: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _14: ();                     // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _15: impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:17
    let mut _16: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _17: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _18: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _19: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _20: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _21: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _22: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _23: isize;                  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _25: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _26: ();                     // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _27: impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:17
    let mut _28: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _29: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _30: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _31: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _32: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _33: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _34: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _35: isize;                  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _37: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _38: ();                     // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _39: i32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _40: std::future::ResumeTy;  // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _41: u32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:7:13: 7:23
        let _12: i32;                    // in scope 1 at src/lib.rs:7:13: 7:23
        scope 2 {
        }
        scope 3 {
            debug result => _12;         // in scope 3 at src/lib.rs:7:13: 7:23
        }
    }
    scope 4 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // in scope 4 at src/lib.rs:8:13: 8:23
        let _24: i32;                    // in scope 4 at src/lib.rs:8:13: 8:23
        scope 5 {
        }
        scope 6 {
            debug result => _24;         // in scope 6 at src/lib.rs:8:13: 8:23
        }
    }
    scope 7 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // in scope 7 at src/lib.rs:9:13: 9:23
        let _36: i32;                    // in scope 7 at src/lib.rs:9:13: 9:23
        scope 8 {
        }
        scope 9 {
            debug result => _36;         // in scope 9 at src/lib.rs:9:13: 9:23
        }
    }

    bb0: {
        _41 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))); // scope 0 at src/lib.rs:6:30: 10:10
        switchInt(move _41) -> [0_u32: bb1, 1_u32: bb46, 2_u32: bb45, 3_u32: bb42, 4_u32: bb43, 5_u32: bb44, otherwise: bb47]; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb1: {
        _40 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_3);                 // scope 0 at src/lib.rs:7:13: 7:17
        _3 = b() -> [return: bb2, unwind: bb40]; // scope 0 at src/lib.rs:7:13: 7:17
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {b}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:7:13: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb3: {
        StorageLive(_4);                 // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_5);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_6);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _7 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:7:13: 7:23
        _6 = &mut (*_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _5 = Pin::<&mut impl Future>::new_unchecked(move _6) -> [return: bb4, unwind: bb38]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageLive(_8);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_10);                // scope 2 at src/lib.rs:7:13: 7:23
        _10 = _40;                       // scope 2 at src/lib.rs:7:13: 7:23
        _9 = get_context(move _10) -> [return: bb5, unwind: bb36]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _8 = &mut (*_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        _4 = <impl Future as Future>::poll(move _5, move _8) -> [return: bb6, unwind: bb37]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        _11 = discriminant(_4);          // scope 1 at src/lib.rs:7:13: 7:23
        switchInt(move _11) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb7: {
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageLive(_13);                // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_14);                // scope 1 at src/lib.rs:7:13: 7:23
        ((_0 as Yielded).0: ()) = move _14; // scope 1 at src/lib.rs:7:13: 7:23
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:7:13: 7:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 3; // scope 1 at src/lib.rs:7:13: 7:23
        return;                          // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb9: {
        StorageLive(_12);                // scope 1 at src/lib.rs:7:13: 7:23
        _12 = ((_4 as Ready).0: i32);    // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_12);                // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        StorageLive(_15);                // scope 0 at src/lib.rs:8:13: 8:17
        _15 = b() -> [return: bb10, unwind: bb35]; // scope 0 at src/lib.rs:8:13: 8:17
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {b}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future) = move _15; // scope 0 at src/lib.rs:8:13: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb11: {
        StorageLive(_16);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_17);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_18);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_19);                // scope 5 at src/lib.rs:8:13: 8:23
        _19 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // scope 5 at src/lib.rs:8:13: 8:23
        _18 = &mut (*_19);               // scope 5 at src/lib.rs:8:13: 8:23
        _17 = Pin::<&mut impl Future>::new_unchecked(move _18) -> [return: bb12, unwind: bb33]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageLive(_20);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_21);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_22);                // scope 5 at src/lib.rs:8:13: 8:23
        _22 = _40;                       // scope 5 at src/lib.rs:8:13: 8:23
        _21 = get_context(move _22) -> [return: bb13, unwind: bb31]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _20 = &mut (*_21);               // scope 5 at src/lib.rs:8:13: 8:23
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        _16 = <impl Future as Future>::poll(move _17, move _20) -> [return: bb14, unwind: bb32]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        _23 = discriminant(_16);         // scope 4 at src/lib.rs:8:13: 8:23
        switchInt(move _23) -> [0_isize: bb17, 1_isize: bb15, otherwise: bb16]; // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb15: {
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageLive(_25);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_26);                // scope 4 at src/lib.rs:8:13: 8:23
        ((_0 as Yielded).0: ()) = move _26; // scope 4 at src/lib.rs:8:13: 8:23
        discriminant(_0) = 0;            // scope 4 at src/lib.rs:8:13: 8:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 4; // scope 4 at src/lib.rs:8:13: 8:23
        return;                          // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb16: {
        unreachable;                     // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb17: {
        StorageLive(_24);                // scope 4 at src/lib.rs:8:13: 8:23
        _24 = ((_16 as Ready).0: i32);   // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_24);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        StorageLive(_27);                // scope 0 at src/lib.rs:9:13: 9:17
        _27 = b() -> [return: bb18, unwind: bb30]; // scope 0 at src/lib.rs:9:13: 9:17
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {b}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future) = move _27; // scope 0 at src/lib.rs:9:13: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb19: {
        StorageLive(_28);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_29);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_30);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_31);                // scope 8 at src/lib.rs:9:13: 9:23
        _31 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // scope 8 at src/lib.rs:9:13: 9:23
        _30 = &mut (*_31);               // scope 8 at src/lib.rs:9:13: 9:23
        _29 = Pin::<&mut impl Future>::new_unchecked(move _30) -> [return: bb20, unwind: bb28]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageLive(_32);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_33);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_34);                // scope 8 at src/lib.rs:9:13: 9:23
        _34 = _40;                       // scope 8 at src/lib.rs:9:13: 9:23
        _33 = get_context(move _34) -> [return: bb21, unwind: bb26]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _32 = &mut (*_33);               // scope 8 at src/lib.rs:9:13: 9:23
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        _28 = <impl Future as Future>::poll(move _29, move _32) -> [return: bb22, unwind: bb27]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        _35 = discriminant(_28);         // scope 7 at src/lib.rs:9:13: 9:23
        switchInt(move _35) -> [0_isize: bb25, 1_isize: bb23, otherwise: bb24]; // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb23: {
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageLive(_37);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_38);                // scope 7 at src/lib.rs:9:13: 9:23
        ((_0 as Yielded).0: ()) = move _38; // scope 7 at src/lib.rs:9:13: 9:23
        discriminant(_0) = 0;            // scope 7 at src/lib.rs:9:13: 9:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 5; // scope 7 at src/lib.rs:9:13: 9:23
        return;                          // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb24: {
        unreachable;                     // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb25: {
        StorageLive(_36);                // scope 7 at src/lib.rs:9:13: 9:23
        _36 = ((_28 as Ready).0: i32);   // scope 7 at src/lib.rs:9:13: 9:23
        _39 = _36;                       // scope 9 at src/lib.rs:9:13: 9:23
        StorageDead(_36);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        ((_0 as Complete).0: i32) = move _39; // scope 0 at src/lib.rs:10:10: 10:10
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:10:10: 10:10
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 1; // scope 0 at src/lib.rs:10:10: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }

    bb26 (cleanup): {
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb27;                    // scope 8 at no-location
    }

    bb27 (cleanup): {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 7 at no-location
    }

    bb28 (cleanup): {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 8 at no-location
    }

    bb29 (cleanup): {
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb30;                    // scope 0 at src/lib.rs:10:9: 10:10
    }

    bb30 (cleanup): {
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        goto -> bb41;                    // scope 0 at no-location
    }

    bb31 (cleanup): {
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb32;                    // scope 5 at no-location
    }

    bb32 (cleanup): {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 4 at no-location
    }

    bb33 (cleanup): {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 5 at no-location
    }

    bb34 (cleanup): {
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb35;                    // scope 0 at src/lib.rs:8:23: 8:24
    }

    bb35 (cleanup): {
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb36 (cleanup): {
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb37;                    // scope 2 at no-location
    }

    bb37 (cleanup): {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 1 at no-location
    }

    bb38 (cleanup): {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 2 at no-location
    }

    bb39 (cleanup): {
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb40;                    // scope 0 at src/lib.rs:7:23: 7:24
    }

    bb40 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb41 (cleanup): {
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 2; // scope 0 at src/lib.rs:6:30: 10:10
        resume;                          // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb42: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_13);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_14);                // scope 0 at src/lib.rs:6:30: 10:10
        _13 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_14);                // scope 1 at src/lib.rs:7:22: 7:23
        _40 = move _13;                  // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_13);                // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb43: {
        StorageLive(_15);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_25);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_26);                // scope 0 at src/lib.rs:6:30: 10:10
        _25 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_26);                // scope 4 at src/lib.rs:8:22: 8:23
        _40 = move _25;                  // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_25);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb44: {
        StorageLive(_27);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_37);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_38);                // scope 0 at src/lib.rs:6:30: 10:10
        _37 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_38);                // scope 7 at src/lib.rs:9:22: 9:23
        _40 = move _37;                  // scope 7 at src/lib.rs:9:13: 9:23
        StorageDead(_37);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb45: {
        assert(const false, "`async fn` resumed after panicking") -> bb45; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb46: {
        assert(const false, "`async fn` resumed after completion") -> bb46; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb47: {
        unreachable;                     // scope 0 at src/lib.rs:6:30: 10:10
    }
}

fn b::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:6:30: 10:10]>, _2: ResumeTy) -> GeneratorState<(), i32> {
    debug _task_context => _40;          // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _0: std::ops::GeneratorState<(), i32>; // return place in scope 0 at src/lib.rs:6:30: 10:10
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:17
    let mut _4: std::task::Poll<i32>;    // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _5: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _6: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _8: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _10: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _11: isize;                  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _13: std::future::ResumeTy;  // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _14: ();                     // in scope 0 at src/lib.rs:7:13: 7:23
    let mut _15: impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:17
    let mut _16: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _17: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _18: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _19: &mut impl std::future::Future; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _20: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _21: &mut std::task::Context; // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _22: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _23: isize;                  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _25: std::future::ResumeTy;  // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _26: ();                     // in scope 0 at src/lib.rs:8:13: 8:23
    let mut _27: impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:17
    let mut _28: std::task::Poll<i32>;   // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _29: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _30: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _31: &mut impl std::future::Future; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _32: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _33: &mut std::task::Context; // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _34: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _35: isize;                  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _37: std::future::ResumeTy;  // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _38: ();                     // in scope 0 at src/lib.rs:9:13: 9:23
    let mut _39: i32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _40: std::future::ResumeTy;  // in scope 0 at src/lib.rs:6:30: 10:10
    let mut _41: u32;                    // in scope 0 at src/lib.rs:6:30: 10:10
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:7:13: 7:23
        let _12: i32;                    // in scope 1 at src/lib.rs:7:13: 7:23
        scope 2 {
        }
        scope 3 {
            debug result => _12;         // in scope 3 at src/lib.rs:7:13: 7:23
        }
    }
    scope 4 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // in scope 4 at src/lib.rs:8:13: 8:23
        let _24: i32;                    // in scope 4 at src/lib.rs:8:13: 8:23
        scope 5 {
        }
        scope 6 {
            debug result => _24;         // in scope 6 at src/lib.rs:8:13: 8:23
        }
    }
    scope 7 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // in scope 7 at src/lib.rs:9:13: 9:23
        let _36: i32;                    // in scope 7 at src/lib.rs:9:13: 9:23
        scope 8 {
        }
        scope 9 {
            debug result => _36;         // in scope 9 at src/lib.rs:9:13: 9:23
        }
    }

    bb0: {
        _41 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))); // scope 0 at src/lib.rs:6:30: 10:10
        switchInt(move _41) -> [0_u32: bb1, 1_u32: bb46, 2_u32: bb45, 3_u32: bb42, 4_u32: bb43, 5_u32: bb44, otherwise: bb47]; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb1: {
        _40 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_3);                 // scope 0 at src/lib.rs:7:13: 7:17
        _3 = a() -> [return: bb2, unwind: bb40]; // scope 0 at src/lib.rs:7:13: 7:17
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {a}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:7:13: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb3: {
        StorageLive(_4);                 // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_5);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_6);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _7 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:7:13: 7:23
        _6 = &mut (*_7);                 // scope 2 at src/lib.rs:7:13: 7:23
        _5 = Pin::<&mut impl Future>::new_unchecked(move _6) -> [return: bb4, unwind: bb38]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageLive(_8);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageLive(_10);                // scope 2 at src/lib.rs:7:13: 7:23
        _10 = _40;                       // scope 2 at src/lib.rs:7:13: 7:23
        _9 = get_context(move _10) -> [return: bb5, unwind: bb36]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _8 = &mut (*_9);                 // scope 2 at src/lib.rs:7:13: 7:23
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        _4 = <impl Future as Future>::poll(move _5, move _8) -> [return: bb6, unwind: bb37]; // scope 2 at src/lib.rs:7:13: 7:23
                                         // mir::Constant
                                         // + span: src/lib.rs:7:13: 7:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        _11 = discriminant(_4);          // scope 1 at src/lib.rs:7:13: 7:23
        switchInt(move _11) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb7: {
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageLive(_13);                // scope 1 at src/lib.rs:7:13: 7:23
        StorageLive(_14);                // scope 1 at src/lib.rs:7:13: 7:23
        ((_0 as Yielded).0: ()) = move _14; // scope 1 at src/lib.rs:7:13: 7:23
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:7:13: 7:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 3; // scope 1 at src/lib.rs:7:13: 7:23
        return;                          // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb9: {
        StorageLive(_12);                // scope 1 at src/lib.rs:7:13: 7:23
        _12 = ((_4 as Ready).0: i32);    // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_12);                // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        StorageLive(_15);                // scope 0 at src/lib.rs:8:13: 8:17
        _15 = a() -> [return: bb10, unwind: bb35]; // scope 0 at src/lib.rs:8:13: 8:17
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {a}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future) = move _15; // scope 0 at src/lib.rs:8:13: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb11: {
        StorageLive(_16);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_17);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_18);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_19);                // scope 5 at src/lib.rs:8:13: 8:23
        _19 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#4).0: impl std::future::Future); // scope 5 at src/lib.rs:8:13: 8:23
        _18 = &mut (*_19);               // scope 5 at src/lib.rs:8:13: 8:23
        _17 = Pin::<&mut impl Future>::new_unchecked(move _18) -> [return: bb12, unwind: bb33]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageLive(_20);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_21);                // scope 5 at src/lib.rs:8:13: 8:23
        StorageLive(_22);                // scope 5 at src/lib.rs:8:13: 8:23
        _22 = _40;                       // scope 5 at src/lib.rs:8:13: 8:23
        _21 = get_context(move _22) -> [return: bb13, unwind: bb31]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _20 = &mut (*_21);               // scope 5 at src/lib.rs:8:13: 8:23
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        _16 = <impl Future as Future>::poll(move _17, move _20) -> [return: bb14, unwind: bb32]; // scope 5 at src/lib.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: src/lib.rs:8:13: 8:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        _23 = discriminant(_16);         // scope 4 at src/lib.rs:8:13: 8:23
        switchInt(move _23) -> [0_isize: bb17, 1_isize: bb15, otherwise: bb16]; // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb15: {
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageLive(_25);                // scope 4 at src/lib.rs:8:13: 8:23
        StorageLive(_26);                // scope 4 at src/lib.rs:8:13: 8:23
        ((_0 as Yielded).0: ()) = move _26; // scope 4 at src/lib.rs:8:13: 8:23
        discriminant(_0) = 0;            // scope 4 at src/lib.rs:8:13: 8:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 4; // scope 4 at src/lib.rs:8:13: 8:23
        return;                          // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb16: {
        unreachable;                     // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb17: {
        StorageLive(_24);                // scope 4 at src/lib.rs:8:13: 8:23
        _24 = ((_16 as Ready).0: i32);   // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_24);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        StorageLive(_27);                // scope 0 at src/lib.rs:9:13: 9:17
        _27 = a() -> [return: bb18, unwind: bb30]; // scope 0 at src/lib.rs:9:13: 9:17
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:15
                                         // + literal: Const { ty: fn() -> impl std::future::Future {a}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future) = move _27; // scope 0 at src/lib.rs:9:13: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb19: {
        StorageLive(_28);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_29);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_30);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_31);                // scope 8 at src/lib.rs:9:13: 9:23
        _31 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10])) as variant#5).0: impl std::future::Future); // scope 8 at src/lib.rs:9:13: 9:23
        _30 = &mut (*_31);               // scope 8 at src/lib.rs:9:13: 9:23
        _29 = Pin::<&mut impl Future>::new_unchecked(move _30) -> [return: bb20, unwind: bb28]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageLive(_32);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_33);                // scope 8 at src/lib.rs:9:13: 9:23
        StorageLive(_34);                // scope 8 at src/lib.rs:9:13: 9:23
        _34 = _40;                       // scope 8 at src/lib.rs:9:13: 9:23
        _33 = get_context(move _34) -> [return: bb21, unwind: bb26]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _32 = &mut (*_33);               // scope 8 at src/lib.rs:9:13: 9:23
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        _28 = <impl Future as Future>::poll(move _29, move _32) -> [return: bb22, unwind: bb27]; // scope 8 at src/lib.rs:9:13: 9:23
                                         // mir::Constant
                                         // + span: src/lib.rs:9:13: 9:23
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        _35 = discriminant(_28);         // scope 7 at src/lib.rs:9:13: 9:23
        switchInt(move _35) -> [0_isize: bb25, 1_isize: bb23, otherwise: bb24]; // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb23: {
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageLive(_37);                // scope 7 at src/lib.rs:9:13: 9:23
        StorageLive(_38);                // scope 7 at src/lib.rs:9:13: 9:23
        ((_0 as Yielded).0: ()) = move _38; // scope 7 at src/lib.rs:9:13: 9:23
        discriminant(_0) = 0;            // scope 7 at src/lib.rs:9:13: 9:23
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 5; // scope 7 at src/lib.rs:9:13: 9:23
        return;                          // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb24: {
        unreachable;                     // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb25: {
        StorageLive(_36);                // scope 7 at src/lib.rs:9:13: 9:23
        _36 = ((_28 as Ready).0: i32);   // scope 7 at src/lib.rs:9:13: 9:23
        _39 = _36;                       // scope 9 at src/lib.rs:9:13: 9:23
        StorageDead(_36);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        ((_0 as Complete).0: i32) = move _39; // scope 0 at src/lib.rs:10:10: 10:10
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:10:10: 10:10
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 1; // scope 0 at src/lib.rs:10:10: 10:10
        return;                          // scope 0 at src/lib.rs:10:10: 10:10
    }

    bb26 (cleanup): {
        StorageDead(_34);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb27;                    // scope 8 at no-location
    }

    bb27 (cleanup): {
        StorageDead(_32);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_33);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 7 at no-location
    }

    bb28 (cleanup): {
        StorageDead(_30);                // scope 8 at src/lib.rs:9:22: 9:23
        StorageDead(_29);                // scope 8 at src/lib.rs:9:22: 9:23
        goto -> bb29;                    // scope 8 at no-location
    }

    bb29 (cleanup): {
        StorageDead(_31);                // scope 7 at src/lib.rs:9:22: 9:23
        StorageDead(_28);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb30;                    // scope 0 at src/lib.rs:10:9: 10:10
    }

    bb30 (cleanup): {
        StorageDead(_27);                // scope 0 at src/lib.rs:10:9: 10:10
        goto -> bb41;                    // scope 0 at no-location
    }

    bb31 (cleanup): {
        StorageDead(_22);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb32;                    // scope 5 at no-location
    }

    bb32 (cleanup): {
        StorageDead(_20);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_21);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 4 at no-location
    }

    bb33 (cleanup): {
        StorageDead(_18);                // scope 5 at src/lib.rs:8:22: 8:23
        StorageDead(_17);                // scope 5 at src/lib.rs:8:22: 8:23
        goto -> bb34;                    // scope 5 at no-location
    }

    bb34 (cleanup): {
        StorageDead(_19);                // scope 4 at src/lib.rs:8:22: 8:23
        StorageDead(_16);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb35;                    // scope 0 at src/lib.rs:8:23: 8:24
    }

    bb35 (cleanup): {
        StorageDead(_15);                // scope 0 at src/lib.rs:8:23: 8:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb36 (cleanup): {
        StorageDead(_10);                // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb37;                    // scope 2 at no-location
    }

    bb37 (cleanup): {
        StorageDead(_8);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_9);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 1 at no-location
    }

    bb38 (cleanup): {
        StorageDead(_6);                 // scope 2 at src/lib.rs:7:22: 7:23
        StorageDead(_5);                 // scope 2 at src/lib.rs:7:22: 7:23
        goto -> bb39;                    // scope 2 at no-location
    }

    bb39 (cleanup): {
        StorageDead(_7);                 // scope 1 at src/lib.rs:7:22: 7:23
        StorageDead(_4);                 // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb40;                    // scope 0 at src/lib.rs:7:23: 7:24
    }

    bb40 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:7:23: 7:24
        goto -> bb41;                    // scope 0 at no-location
    }

    bb41 (cleanup): {
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:6:30: 10:10]))) = 2; // scope 0 at src/lib.rs:6:30: 10:10
        resume;                          // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb42: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_13);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_14);                // scope 0 at src/lib.rs:6:30: 10:10
        _13 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_14);                // scope 1 at src/lib.rs:7:22: 7:23
        _40 = move _13;                  // scope 1 at src/lib.rs:7:13: 7:23
        StorageDead(_13);                // scope 1 at src/lib.rs:7:22: 7:23
        goto -> bb3;                     // scope 1 at src/lib.rs:7:13: 7:23
    }

    bb43: {
        StorageLive(_15);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_25);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_26);                // scope 0 at src/lib.rs:6:30: 10:10
        _25 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_26);                // scope 4 at src/lib.rs:8:22: 8:23
        _40 = move _25;                  // scope 4 at src/lib.rs:8:13: 8:23
        StorageDead(_25);                // scope 4 at src/lib.rs:8:22: 8:23
        goto -> bb11;                    // scope 4 at src/lib.rs:8:13: 8:23
    }

    bb44: {
        StorageLive(_27);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_37);                // scope 0 at src/lib.rs:6:30: 10:10
        StorageLive(_38);                // scope 0 at src/lib.rs:6:30: 10:10
        _37 = move _2;                   // scope 0 at src/lib.rs:6:30: 10:10
        StorageDead(_38);                // scope 7 at src/lib.rs:9:22: 9:23
        _40 = move _37;                  // scope 7 at src/lib.rs:9:13: 9:23
        StorageDead(_37);                // scope 7 at src/lib.rs:9:22: 9:23
        goto -> bb19;                    // scope 7 at src/lib.rs:9:13: 9:23
    }

    bb45: {
        assert(const false, "`async fn` resumed after panicking") -> bb45; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb46: {
        assert(const false, "`async fn` resumed after completion") -> bb46; // scope 0 at src/lib.rs:6:30: 10:10
    }

    bb47: {
        unreachable;                     // scope 0 at src/lib.rs:6:30: 10:10
    }
}

fn a::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:14:21: 14:26]>, _2: ResumeTy) -> GeneratorState<(), i32> {
    debug _task_context => _4;           // in scope 0 at src/lib.rs:14:21: 14:26
    let mut _0: std::ops::GeneratorState<(), i32>; // return place in scope 0 at src/lib.rs:14:21: 14:26
    let mut _3: i32;                     // in scope 0 at src/lib.rs:14:21: 14:26
    let mut _4: std::future::ResumeTy;   // in scope 0 at src/lib.rs:14:21: 14:26
    let mut _5: u32;                     // in scope 0 at src/lib.rs:14:21: 14:26

    bb0: {
        _5 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:14:21: 14:26]))); // scope 0 at src/lib.rs:14:21: 14:26
        switchInt(move _5) -> [0_u32: bb1, 1_u32: bb2, otherwise: bb3]; // scope 0 at src/lib.rs:14:21: 14:26
    }

    bb1: {
        _4 = move _2;                    // scope 0 at src/lib.rs:14:21: 14:26
        _3 = const 1_i32;                // scope 0 at src/lib.rs:14:23: 14:24
        ((_0 as Complete).0: i32) = move _3; // scope 0 at src/lib.rs:14:26: 14:26
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:14:26: 14:26
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:14:21: 14:26]))) = 1; // scope 0 at src/lib.rs:14:26: 14:26
        return;                          // scope 0 at src/lib.rs:14:26: 14:26
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at src/lib.rs:14:21: 14:26
    }

    bb3: {
        unreachable;                     // scope 0 at src/lib.rs:14:21: 14:26
    }
}
