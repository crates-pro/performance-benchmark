// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn h16(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:114:18: 114:19
    debug x => _2;                       // in scope 0 at src/lib.rs:114:30: 114:31
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:114:39: 114:39
    let mut _3: [static generator@src/lib.rs:114:39: 114:58]; // in scope 0 at src/lib.rs:114:39: 114:58

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:114:39: 114:58
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:114:39: 114:58
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:114:39: 114:58
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:114:39: 114:58
        _0 = from_generator::<[static generator@src/lib.rs:114:39: 114:58]>(move _3) -> bb1; // scope 0 at src/lib.rs:114:39: 114:58
                                         // mir::Constant
                                         // + span: src/lib.rs:114:39: 114:58
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:114:39: 114:58]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:114:39: 114:58]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:114:57: 114:58
        return;                          // scope 0 at src/lib.rs:114:58: 114:58
    }
}

fn h14(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:112:18: 112:19
    debug x => _2;                       // in scope 0 at src/lib.rs:112:30: 112:31
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:112:39: 112:39
    let mut _3: [static generator@src/lib.rs:112:39: 112:58]; // in scope 0 at src/lib.rs:112:39: 112:58

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:112:39: 112:58
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:112:39: 112:58
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:112:39: 112:58
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:112:39: 112:58
        _0 = from_generator::<[static generator@src/lib.rs:112:39: 112:58]>(move _3) -> bb1; // scope 0 at src/lib.rs:112:39: 112:58
                                         // mir::Constant
                                         // + span: src/lib.rs:112:39: 112:58
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:112:39: 112:58]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:112:39: 112:58]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:112:57: 112:58
        return;                          // scope 0 at src/lib.rs:112:58: 112:58
    }
}

fn h12(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:110:18: 110:19
    debug x => _2;                       // in scope 0 at src/lib.rs:110:30: 110:31
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:110:39: 110:39
    let mut _3: [static generator@src/lib.rs:110:39: 110:58]; // in scope 0 at src/lib.rs:110:39: 110:58

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:110:39: 110:58
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:110:39: 110:58
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:110:39: 110:58
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:110:39: 110:58
        _0 = from_generator::<[static generator@src/lib.rs:110:39: 110:58]>(move _3) -> bb1; // scope 0 at src/lib.rs:110:39: 110:58
                                         // mir::Constant
                                         // + span: src/lib.rs:110:39: 110:58
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:110:39: 110:58]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:110:39: 110:58]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:110:57: 110:58
        return;                          // scope 0 at src/lib.rs:110:58: 110:58
    }
}

fn h10(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:108:18: 108:19
    debug x => _2;                       // in scope 0 at src/lib.rs:108:30: 108:31
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:108:39: 108:39
    let mut _3: [static generator@src/lib.rs:108:39: 108:57]; // in scope 0 at src/lib.rs:108:39: 108:57

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:108:39: 108:57
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:108:39: 108:57
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:108:39: 108:57
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:108:39: 108:57
        _0 = from_generator::<[static generator@src/lib.rs:108:39: 108:57]>(move _3) -> bb1; // scope 0 at src/lib.rs:108:39: 108:57
                                         // mir::Constant
                                         // + span: src/lib.rs:108:39: 108:57
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:108:39: 108:57]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:108:39: 108:57]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:108:56: 108:57
        return;                          // scope 0 at src/lib.rs:108:57: 108:57
    }
}

fn h8(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:105:17: 105:18
    debug x => _2;                       // in scope 0 at src/lib.rs:105:29: 105:30
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:105:38: 105:38
    let mut _3: [static generator@src/lib.rs:105:38: 105:56]; // in scope 0 at src/lib.rs:105:38: 105:56

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:105:38: 105:56
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:105:38: 105:56
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:105:38: 105:56
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:105:38: 105:56
        _0 = from_generator::<[static generator@src/lib.rs:105:38: 105:56]>(move _3) -> bb1; // scope 0 at src/lib.rs:105:38: 105:56
                                         // mir::Constant
                                         // + span: src/lib.rs:105:38: 105:56
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:105:38: 105:56]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:105:38: 105:56]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:105:55: 105:56
        return;                          // scope 0 at src/lib.rs:105:56: 105:56
    }
}

fn h6(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:103:17: 103:18
    debug x => _2;                       // in scope 0 at src/lib.rs:103:29: 103:30
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:103:38: 103:38
    let mut _3: [static generator@src/lib.rs:103:38: 103:56]; // in scope 0 at src/lib.rs:103:38: 103:56

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:103:38: 103:56
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:103:38: 103:56
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:103:38: 103:56
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:103:38: 103:56
        _0 = from_generator::<[static generator@src/lib.rs:103:38: 103:56]>(move _3) -> bb1; // scope 0 at src/lib.rs:103:38: 103:56
                                         // mir::Constant
                                         // + span: src/lib.rs:103:38: 103:56
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:103:38: 103:56]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:103:38: 103:56]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:103:55: 103:56
        return;                          // scope 0 at src/lib.rs:103:56: 103:56
    }
}

fn h4(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:101:17: 101:18
    debug x => _2;                       // in scope 0 at src/lib.rs:101:29: 101:30
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:101:38: 101:38
    let mut _3: [static generator@src/lib.rs:101:38: 101:56]; // in scope 0 at src/lib.rs:101:38: 101:56

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:101:38: 101:56
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:101:38: 101:56
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:101:38: 101:56
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:101:38: 101:56
        _0 = from_generator::<[static generator@src/lib.rs:101:38: 101:56]>(move _3) -> bb1; // scope 0 at src/lib.rs:101:38: 101:56
                                         // mir::Constant
                                         // + span: src/lib.rs:101:38: 101:56
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:101:38: 101:56]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:101:38: 101:56]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:101:55: 101:56
        return;                          // scope 0 at src/lib.rs:101:56: 101:56
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:130:33: 130:64]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:130:33: 130:64
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:130:33: 130:64
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:131:27: 131:64
    let mut _4: [static generator@src/lib.rs:131:33: 131:64]; // in scope 0 at src/lib.rs:131:33: 131:64
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:131:27: 131:70
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:131:27: 131:70
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:131:27: 131:70
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:131:27: 131:70
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:131:27: 131:70
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:131:27: 131:70
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:131:27: 131:70
    let mut _12: isize;                  // in scope 0 at src/lib.rs:131:27: 131:70
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:131:27: 131:70
    let mut _15: ();                     // in scope 0 at src/lib.rs:131:27: 131:70
    let mut _16: ();                     // in scope 0 at src/lib.rs:130:33: 130:64
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:130:33: 130:64
    let mut _18: u32;                    // in scope 0 at src/lib.rs:130:33: 130:64
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:130:33: 130:64])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:131:27: 131:70
        let _13: ();                     // in scope 1 at src/lib.rs:131:27: 131:70
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:131:27: 131:70
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:130:33: 130:64]))); // scope 0 at src/lib.rs:130:33: 130:64
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:130:33: 130:64
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:130:33: 130:64
        StorageLive(_3);                 // scope 0 at src/lib.rs:131:27: 131:64
        StorageLive(_4);                 // scope 0 at src/lib.rs:131:33: 131:64
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:131:33: 131:64
        _3 = from_generator::<[static generator@src/lib.rs:131:33: 131:64]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:131:27: 131:64
                                         // mir::Constant
                                         // + span: src/lib.rs:131:33: 131:64
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:131:33: 131:64]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:131:33: 131:64]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:131:63: 131:64
        (((*(_1.0: &mut [static generator@src/lib.rs:130:33: 130:64])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:131:27: 131:70
        goto -> bb3;                     // scope 1 at src/lib.rs:131:27: 131:70
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:131:27: 131:70
        StorageLive(_6);                 // scope 2 at src/lib.rs:131:27: 131:70
        StorageLive(_7);                 // scope 2 at src/lib.rs:131:27: 131:70
        StorageLive(_8);                 // scope 2 at src/lib.rs:131:27: 131:70
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:130:33: 130:64])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:131:27: 131:70
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:131:27: 131:70
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:131:27: 131:70
                                         // mir::Constant
                                         // + span: src/lib.rs:131:27: 131:70
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:131:69: 131:70
        StorageLive(_9);                 // scope 2 at src/lib.rs:131:27: 131:70
        StorageLive(_10);                // scope 2 at src/lib.rs:131:27: 131:70
        StorageLive(_11);                // scope 2 at src/lib.rs:131:27: 131:70
        _11 = _17;                       // scope 2 at src/lib.rs:131:27: 131:70
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:131:27: 131:70
                                         // mir::Constant
                                         // + span: src/lib.rs:131:27: 131:70
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:131:27: 131:70
        StorageDead(_11);                // scope 2 at src/lib.rs:131:69: 131:70
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:131:27: 131:70
                                         // mir::Constant
                                         // + span: src/lib.rs:131:27: 131:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:131:69: 131:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:131:69: 131:70
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:131:27: 131:70
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:131:27: 131:70
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:131:69: 131:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:131:69: 131:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:131:69: 131:70
        StorageLive(_14);                // scope 1 at src/lib.rs:131:27: 131:70
        StorageLive(_15);                // scope 1 at src/lib.rs:131:27: 131:70
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:131:27: 131:70
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:131:27: 131:70
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:130:33: 130:64]))) = 3; // scope 1 at src/lib.rs:131:27: 131:70
        return;                          // scope 1 at src/lib.rs:131:27: 131:70
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:131:27: 131:70
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:131:27: 131:70
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:131:27: 131:70
        _16 = _13;                       // scope 3 at src/lib.rs:131:27: 131:70
        StorageDead(_13);                // scope 1 at src/lib.rs:131:69: 131:70
        StorageDead(_10);                // scope 1 at src/lib.rs:131:69: 131:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:131:69: 131:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:131:69: 131:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:130:33: 130:64])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:131:69: 131:70
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:130:63: 130:64
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:130:64: 130:64
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:130:64: 130:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:130:33: 130:64]))) = 1; // scope 0 at src/lib.rs:130:64: 130:64
        return;                          // scope 0 at src/lib.rs:130:64: 130:64
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:131:69: 131:70
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:131:69: 131:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:131:69: 131:70
        StorageDead(_10);                // scope 1 at src/lib.rs:131:69: 131:70
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:131:69: 131:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:131:69: 131:70
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:131:69: 131:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:131:69: 131:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:130:33: 130:64])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:131:69: 131:70
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:131:63: 131:64
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:130:63: 130:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:130:33: 130:64]))) = 2; // scope 0 at src/lib.rs:130:33: 130:64
        resume;                          // scope 0 at src/lib.rs:130:33: 130:64
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:130:33: 130:64
        StorageLive(_14);                // scope 0 at src/lib.rs:130:33: 130:64
        StorageLive(_15);                // scope 0 at src/lib.rs:130:33: 130:64
        _14 = move _2;                   // scope 0 at src/lib.rs:130:33: 130:64
        StorageDead(_15);                // scope 1 at src/lib.rs:131:69: 131:70
        _17 = move _14;                  // scope 1 at src/lib.rs:131:27: 131:70
        StorageDead(_14);                // scope 1 at src/lib.rs:131:69: 131:70
        goto -> bb3;                     // scope 1 at src/lib.rs:131:27: 131:70
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:130:33: 130:64
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:130:33: 130:64
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:130:33: 130:64
    }
}

fn h2(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:99:17: 99:18
    debug x => _2;                       // in scope 0 at src/lib.rs:99:29: 99:30
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:99:38: 99:38
    let mut _3: [static generator@src/lib.rs:99:38: 99:56]; // in scope 0 at src/lib.rs:99:38: 99:56

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:99:38: 99:56
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:99:38: 99:56
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:99:38: 99:56
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:99:38: 99:56
        _0 = from_generator::<[static generator@src/lib.rs:99:38: 99:56]>(move _3) -> bb1; // scope 0 at src/lib.rs:99:38: 99:56
                                         // mir::Constant
                                         // + span: src/lib.rs:99:38: 99:56
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:99:38: 99:56]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:99:38: 99:56]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:99:55: 99:56
        return;                          // scope 0 at src/lib.rs:99:56: 99:56
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:123:34: 123:66]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:123:34: 123:66
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:123:34: 123:66
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:124:28: 124:65
    let mut _4: [static generator@src/lib.rs:124:34: 124:65]; // in scope 0 at src/lib.rs:124:34: 124:65
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:124:28: 124:71
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:124:28: 124:71
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:124:28: 124:71
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:124:28: 124:71
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:124:28: 124:71
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:124:28: 124:71
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:124:28: 124:71
    let mut _12: isize;                  // in scope 0 at src/lib.rs:124:28: 124:71
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:124:28: 124:71
    let mut _15: ();                     // in scope 0 at src/lib.rs:124:28: 124:71
    let mut _16: ();                     // in scope 0 at src/lib.rs:123:34: 123:66
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:123:34: 123:66
    let mut _18: u32;                    // in scope 0 at src/lib.rs:123:34: 123:66
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:123:34: 123:66])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:124:28: 124:71
        let _13: ();                     // in scope 1 at src/lib.rs:124:28: 124:71
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:124:28: 124:71
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:123:34: 123:66]))); // scope 0 at src/lib.rs:123:34: 123:66
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:123:34: 123:66
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:123:34: 123:66
        StorageLive(_3);                 // scope 0 at src/lib.rs:124:28: 124:65
        StorageLive(_4);                 // scope 0 at src/lib.rs:124:34: 124:65
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:124:34: 124:65
        _3 = from_generator::<[static generator@src/lib.rs:124:34: 124:65]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:124:28: 124:65
                                         // mir::Constant
                                         // + span: src/lib.rs:124:34: 124:65
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:124:34: 124:65]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:124:34: 124:65]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:124:64: 124:65
        (((*(_1.0: &mut [static generator@src/lib.rs:123:34: 123:66])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:124:28: 124:71
        goto -> bb3;                     // scope 1 at src/lib.rs:124:28: 124:71
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:124:28: 124:71
        StorageLive(_6);                 // scope 2 at src/lib.rs:124:28: 124:71
        StorageLive(_7);                 // scope 2 at src/lib.rs:124:28: 124:71
        StorageLive(_8);                 // scope 2 at src/lib.rs:124:28: 124:71
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:123:34: 123:66])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:124:28: 124:71
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:124:28: 124:71
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:124:28: 124:71
                                         // mir::Constant
                                         // + span: src/lib.rs:124:28: 124:71
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:124:70: 124:71
        StorageLive(_9);                 // scope 2 at src/lib.rs:124:28: 124:71
        StorageLive(_10);                // scope 2 at src/lib.rs:124:28: 124:71
        StorageLive(_11);                // scope 2 at src/lib.rs:124:28: 124:71
        _11 = _17;                       // scope 2 at src/lib.rs:124:28: 124:71
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:124:28: 124:71
                                         // mir::Constant
                                         // + span: src/lib.rs:124:28: 124:71
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:124:28: 124:71
        StorageDead(_11);                // scope 2 at src/lib.rs:124:70: 124:71
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:124:28: 124:71
                                         // mir::Constant
                                         // + span: src/lib.rs:124:28: 124:71
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:124:70: 124:71
        StorageDead(_6);                 // scope 2 at src/lib.rs:124:70: 124:71
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:124:28: 124:71
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:124:28: 124:71
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:124:70: 124:71
        StorageDead(_8);                 // scope 1 at src/lib.rs:124:70: 124:71
        StorageDead(_5);                 // scope 1 at src/lib.rs:124:70: 124:71
        StorageLive(_14);                // scope 1 at src/lib.rs:124:28: 124:71
        StorageLive(_15);                // scope 1 at src/lib.rs:124:28: 124:71
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:124:28: 124:71
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:124:28: 124:71
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:123:34: 123:66]))) = 3; // scope 1 at src/lib.rs:124:28: 124:71
        return;                          // scope 1 at src/lib.rs:124:28: 124:71
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:124:28: 124:71
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:124:28: 124:71
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:124:28: 124:71
        _16 = _13;                       // scope 3 at src/lib.rs:124:28: 124:71
        StorageDead(_13);                // scope 1 at src/lib.rs:124:70: 124:71
        StorageDead(_10);                // scope 1 at src/lib.rs:124:70: 124:71
        StorageDead(_8);                 // scope 1 at src/lib.rs:124:70: 124:71
        StorageDead(_5);                 // scope 1 at src/lib.rs:124:70: 124:71
        drop((((*(_1.0: &mut [static generator@src/lib.rs:123:34: 123:66])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:124:70: 124:71
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:123:65: 123:66
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:123:66: 123:66
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:123:66: 123:66
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:123:34: 123:66]))) = 1; // scope 0 at src/lib.rs:123:66: 123:66
        return;                          // scope 0 at src/lib.rs:123:66: 123:66
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:124:70: 124:71
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:124:70: 124:71
        StorageDead(_6);                 // scope 2 at src/lib.rs:124:70: 124:71
        StorageDead(_10);                // scope 1 at src/lib.rs:124:70: 124:71
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:124:70: 124:71
        StorageDead(_6);                 // scope 2 at src/lib.rs:124:70: 124:71
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:124:70: 124:71
        StorageDead(_5);                 // scope 1 at src/lib.rs:124:70: 124:71
        drop((((*(_1.0: &mut [static generator@src/lib.rs:123:34: 123:66])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:124:70: 124:71
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:124:64: 124:65
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:123:65: 123:66
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:123:34: 123:66]))) = 2; // scope 0 at src/lib.rs:123:34: 123:66
        resume;                          // scope 0 at src/lib.rs:123:34: 123:66
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:123:34: 123:66
        StorageLive(_14);                // scope 0 at src/lib.rs:123:34: 123:66
        StorageLive(_15);                // scope 0 at src/lib.rs:123:34: 123:66
        _14 = move _2;                   // scope 0 at src/lib.rs:123:34: 123:66
        StorageDead(_15);                // scope 1 at src/lib.rs:124:70: 124:71
        _17 = move _14;                  // scope 1 at src/lib.rs:124:28: 124:71
        StorageDead(_14);                // scope 1 at src/lib.rs:124:70: 124:71
        goto -> bb3;                     // scope 1 at src/lib.rs:124:28: 124:71
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:123:34: 123:66
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:123:34: 123:66
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:123:34: 123:66
    }
}

fn h0(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:97:17: 97:18
    debug x => _2;                       // in scope 0 at src/lib.rs:97:29: 97:30
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:97:38: 97:38
    let mut _3: [static generator@src/lib.rs:97:38: 97:65]; // in scope 0 at src/lib.rs:97:38: 97:65

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:97:38: 97:65
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:97:38: 97:65
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:97:38: 97:65
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:97:38: 97:65
        _0 = from_generator::<[static generator@src/lib.rs:97:38: 97:65]>(move _3) -> bb1; // scope 0 at src/lib.rs:97:38: 97:65
                                         // mir::Constant
                                         // + span: src/lib.rs:97:38: 97:65
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:97:38: 97:65]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:97:38: 97:65]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:97:64: 97:65
        return;                          // scope 0 at src/lib.rs:97:65: 97:65
    }
}

fn f() -> impl Future {
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:138:14: 138:14
    let mut _1: [static generator@src/lib.rs:138:14: 140:2]; // in scope 0 at src/lib.rs:138:14: 140:2

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:138:14: 140:2
        discriminant(_1) = 0;            // scope 0 at src/lib.rs:138:14: 140:2
        _0 = from_generator::<[static generator@src/lib.rs:138:14: 140:2]>(move _1) -> bb1; // scope 0 at src/lib.rs:138:14: 140:2
                                         // mir::Constant
                                         // + span: src/lib.rs:138:14: 140:2
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:138:14: 140:2]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:138:14: 140:2]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at src/lib.rs:140:1: 140:2
        return;                          // scope 0 at src/lib.rs:140:2: 140:2
    }
}

fn dup(_1: impl Fn(i32) -> i32) -> [closure@src/lib.rs:50:5: 50:22] {
    debug f => _1;                       // in scope 0 at src/lib.rs:49:8: 49:9
    let mut _0: [closure@src/lib.rs:50:5: 50:22]; // return place in scope 0 at src/lib.rs:49:35: 49:54

    bb0: {
        (_0.0: impl Fn(i32) -> i32) = move _1; // scope 0 at src/lib.rs:50:5: 50:22
        return;                          // scope 0 at src/lib.rs:51:2: 51:2
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:131:33: 131:64]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:131:33: 131:64
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:131:33: 131:64
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:132:27: 132:64
    let mut _4: [static generator@src/lib.rs:132:33: 132:64]; // in scope 0 at src/lib.rs:132:33: 132:64
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:132:27: 132:70
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:132:27: 132:70
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:132:27: 132:70
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:132:27: 132:70
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:132:27: 132:70
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:132:27: 132:70
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:132:27: 132:70
    let mut _12: isize;                  // in scope 0 at src/lib.rs:132:27: 132:70
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:132:27: 132:70
    let mut _15: ();                     // in scope 0 at src/lib.rs:132:27: 132:70
    let mut _16: ();                     // in scope 0 at src/lib.rs:131:33: 131:64
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:131:33: 131:64
    let mut _18: u32;                    // in scope 0 at src/lib.rs:131:33: 131:64
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:131:33: 131:64])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:132:27: 132:70
        let _13: ();                     // in scope 1 at src/lib.rs:132:27: 132:70
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:132:27: 132:70
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:131:33: 131:64]))); // scope 0 at src/lib.rs:131:33: 131:64
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:131:33: 131:64
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:131:33: 131:64
        StorageLive(_3);                 // scope 0 at src/lib.rs:132:27: 132:64
        StorageLive(_4);                 // scope 0 at src/lib.rs:132:33: 132:64
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:132:33: 132:64
        _3 = from_generator::<[static generator@src/lib.rs:132:33: 132:64]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:132:27: 132:64
                                         // mir::Constant
                                         // + span: src/lib.rs:132:33: 132:64
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:132:33: 132:64]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:132:33: 132:64]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:132:63: 132:64
        (((*(_1.0: &mut [static generator@src/lib.rs:131:33: 131:64])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:132:27: 132:70
        goto -> bb3;                     // scope 1 at src/lib.rs:132:27: 132:70
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:132:27: 132:70
        StorageLive(_6);                 // scope 2 at src/lib.rs:132:27: 132:70
        StorageLive(_7);                 // scope 2 at src/lib.rs:132:27: 132:70
        StorageLive(_8);                 // scope 2 at src/lib.rs:132:27: 132:70
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:131:33: 131:64])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:132:27: 132:70
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:132:27: 132:70
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:132:27: 132:70
                                         // mir::Constant
                                         // + span: src/lib.rs:132:27: 132:70
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:132:69: 132:70
        StorageLive(_9);                 // scope 2 at src/lib.rs:132:27: 132:70
        StorageLive(_10);                // scope 2 at src/lib.rs:132:27: 132:70
        StorageLive(_11);                // scope 2 at src/lib.rs:132:27: 132:70
        _11 = _17;                       // scope 2 at src/lib.rs:132:27: 132:70
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:132:27: 132:70
                                         // mir::Constant
                                         // + span: src/lib.rs:132:27: 132:70
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:132:27: 132:70
        StorageDead(_11);                // scope 2 at src/lib.rs:132:69: 132:70
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:132:27: 132:70
                                         // mir::Constant
                                         // + span: src/lib.rs:132:27: 132:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:132:69: 132:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:132:69: 132:70
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:132:27: 132:70
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:132:27: 132:70
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:132:69: 132:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:132:69: 132:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:132:69: 132:70
        StorageLive(_14);                // scope 1 at src/lib.rs:132:27: 132:70
        StorageLive(_15);                // scope 1 at src/lib.rs:132:27: 132:70
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:132:27: 132:70
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:132:27: 132:70
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:131:33: 131:64]))) = 3; // scope 1 at src/lib.rs:132:27: 132:70
        return;                          // scope 1 at src/lib.rs:132:27: 132:70
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:132:27: 132:70
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:132:27: 132:70
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:132:27: 132:70
        _16 = _13;                       // scope 3 at src/lib.rs:132:27: 132:70
        StorageDead(_13);                // scope 1 at src/lib.rs:132:69: 132:70
        StorageDead(_10);                // scope 1 at src/lib.rs:132:69: 132:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:132:69: 132:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:132:69: 132:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:131:33: 131:64])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:132:69: 132:70
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:131:63: 131:64
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:131:64: 131:64
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:131:64: 131:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:131:33: 131:64]))) = 1; // scope 0 at src/lib.rs:131:64: 131:64
        return;                          // scope 0 at src/lib.rs:131:64: 131:64
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:132:69: 132:70
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:132:69: 132:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:132:69: 132:70
        StorageDead(_10);                // scope 1 at src/lib.rs:132:69: 132:70
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:132:69: 132:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:132:69: 132:70
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:132:69: 132:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:132:69: 132:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:131:33: 131:64])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:132:69: 132:70
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:132:63: 132:64
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:131:63: 131:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:131:33: 131:64]))) = 2; // scope 0 at src/lib.rs:131:33: 131:64
        resume;                          // scope 0 at src/lib.rs:131:33: 131:64
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:131:33: 131:64
        StorageLive(_14);                // scope 0 at src/lib.rs:131:33: 131:64
        StorageLive(_15);                // scope 0 at src/lib.rs:131:33: 131:64
        _14 = move _2;                   // scope 0 at src/lib.rs:131:33: 131:64
        StorageDead(_15);                // scope 1 at src/lib.rs:132:69: 132:70
        _17 = move _14;                  // scope 1 at src/lib.rs:132:27: 132:70
        StorageDead(_14);                // scope 1 at src/lib.rs:132:69: 132:70
        goto -> bb3;                     // scope 1 at src/lib.rs:132:27: 132:70
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:131:33: 131:64
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:131:33: 131:64
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:131:33: 131:64
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:124:34: 124:65]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:124:34: 124:65
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:124:34: 124:65
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:126:27: 126:64
    let mut _4: [static generator@src/lib.rs:126:33: 126:64]; // in scope 0 at src/lib.rs:126:33: 126:64
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:126:27: 126:70
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:126:27: 126:70
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:126:27: 126:70
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:126:27: 126:70
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:126:27: 126:70
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:126:27: 126:70
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:126:27: 126:70
    let mut _12: isize;                  // in scope 0 at src/lib.rs:126:27: 126:70
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:126:27: 126:70
    let mut _15: ();                     // in scope 0 at src/lib.rs:126:27: 126:70
    let mut _16: ();                     // in scope 0 at src/lib.rs:124:34: 124:65
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:124:34: 124:65
    let mut _18: u32;                    // in scope 0 at src/lib.rs:124:34: 124:65
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:124:34: 124:65])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:126:27: 126:70
        let _13: ();                     // in scope 1 at src/lib.rs:126:27: 126:70
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:126:27: 126:70
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:124:34: 124:65]))); // scope 0 at src/lib.rs:124:34: 124:65
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:124:34: 124:65
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:124:34: 124:65
        StorageLive(_3);                 // scope 0 at src/lib.rs:126:27: 126:64
        StorageLive(_4);                 // scope 0 at src/lib.rs:126:33: 126:64
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:126:33: 126:64
        _3 = from_generator::<[static generator@src/lib.rs:126:33: 126:64]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:126:27: 126:64
                                         // mir::Constant
                                         // + span: src/lib.rs:126:33: 126:64
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:126:33: 126:64]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:126:33: 126:64]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:126:63: 126:64
        (((*(_1.0: &mut [static generator@src/lib.rs:124:34: 124:65])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:126:27: 126:70
        goto -> bb3;                     // scope 1 at src/lib.rs:126:27: 126:70
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:126:27: 126:70
        StorageLive(_6);                 // scope 2 at src/lib.rs:126:27: 126:70
        StorageLive(_7);                 // scope 2 at src/lib.rs:126:27: 126:70
        StorageLive(_8);                 // scope 2 at src/lib.rs:126:27: 126:70
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:124:34: 124:65])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:126:27: 126:70
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:126:27: 126:70
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:126:27: 126:70
                                         // mir::Constant
                                         // + span: src/lib.rs:126:27: 126:70
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:126:69: 126:70
        StorageLive(_9);                 // scope 2 at src/lib.rs:126:27: 126:70
        StorageLive(_10);                // scope 2 at src/lib.rs:126:27: 126:70
        StorageLive(_11);                // scope 2 at src/lib.rs:126:27: 126:70
        _11 = _17;                       // scope 2 at src/lib.rs:126:27: 126:70
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:126:27: 126:70
                                         // mir::Constant
                                         // + span: src/lib.rs:126:27: 126:70
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:126:27: 126:70
        StorageDead(_11);                // scope 2 at src/lib.rs:126:69: 126:70
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:126:27: 126:70
                                         // mir::Constant
                                         // + span: src/lib.rs:126:27: 126:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:126:69: 126:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:126:69: 126:70
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:126:27: 126:70
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:126:27: 126:70
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:126:69: 126:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:126:69: 126:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:126:69: 126:70
        StorageLive(_14);                // scope 1 at src/lib.rs:126:27: 126:70
        StorageLive(_15);                // scope 1 at src/lib.rs:126:27: 126:70
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:126:27: 126:70
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:126:27: 126:70
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:124:34: 124:65]))) = 3; // scope 1 at src/lib.rs:126:27: 126:70
        return;                          // scope 1 at src/lib.rs:126:27: 126:70
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:126:27: 126:70
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:126:27: 126:70
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:126:27: 126:70
        _16 = _13;                       // scope 3 at src/lib.rs:126:27: 126:70
        StorageDead(_13);                // scope 1 at src/lib.rs:126:69: 126:70
        StorageDead(_10);                // scope 1 at src/lib.rs:126:69: 126:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:126:69: 126:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:126:69: 126:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:124:34: 124:65])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:126:69: 126:70
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:124:64: 124:65
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:124:65: 124:65
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:124:65: 124:65
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:124:34: 124:65]))) = 1; // scope 0 at src/lib.rs:124:65: 124:65
        return;                          // scope 0 at src/lib.rs:124:65: 124:65
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:126:69: 126:70
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:126:69: 126:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:126:69: 126:70
        StorageDead(_10);                // scope 1 at src/lib.rs:126:69: 126:70
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:126:69: 126:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:126:69: 126:70
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:126:69: 126:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:126:69: 126:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:124:34: 124:65])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:126:69: 126:70
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:126:63: 126:64
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:124:64: 124:65
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:124:34: 124:65]))) = 2; // scope 0 at src/lib.rs:124:34: 124:65
        resume;                          // scope 0 at src/lib.rs:124:34: 124:65
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:124:34: 124:65
        StorageLive(_14);                // scope 0 at src/lib.rs:124:34: 124:65
        StorageLive(_15);                // scope 0 at src/lib.rs:124:34: 124:65
        _14 = move _2;                   // scope 0 at src/lib.rs:124:34: 124:65
        StorageDead(_15);                // scope 1 at src/lib.rs:126:69: 126:70
        _17 = move _14;                  // scope 1 at src/lib.rs:126:27: 126:70
        StorageDead(_14);                // scope 1 at src/lib.rs:126:69: 126:70
        goto -> bb3;                     // scope 1 at src/lib.rs:126:27: 126:70
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:124:34: 124:65
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:124:34: 124:65
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:124:34: 124:65
    }
}

fn h18::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:116:39: 116:58]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:116:39: 116:58
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58])).0: &std::string::String); // in scope 0 at src/lib.rs:116:18: 116:19
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58])).1: &u64); // in scope 0 at src/lib.rs:116:30: 116:31
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:116:39: 116:58
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:116:18: 116:19
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:116:41: 116:50
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:116:45: 116:46
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:116:48: 116:49
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:116:41: 116:56
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:116:41: 116:56
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:116:41: 116:56
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:116:41: 116:56
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:116:41: 116:56
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:116:41: 116:56
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:116:41: 116:56
    let mut _15: isize;                  // in scope 0 at src/lib.rs:116:41: 116:56
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:116:41: 116:56
    let mut _18: ();                     // in scope 0 at src/lib.rs:116:41: 116:56
    let mut _19: ();                     // in scope 0 at src/lib.rs:116:39: 116:58
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:116:39: 116:58
    let mut _21: u32;                    // in scope 0 at src/lib.rs:116:39: 116:58
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:116:18: 116:19
        let _4: &u64;                    // in scope 1 at src/lib.rs:116:30: 116:31
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:116:30: 116:31
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:116:41: 116:56
                let _16: ();             // in scope 3 at src/lib.rs:116:41: 116:56
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:116:41: 116:56
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58]))); // scope 0 at src/lib.rs:116:39: 116:58
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:116:39: 116:58
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:116:39: 116:58
        StorageLive(_3);                 // scope 0 at src/lib.rs:116:18: 116:19
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58])).0: &std::string::String); // scope 0 at src/lib.rs:116:18: 116:19
        StorageLive(_4);                 // scope 1 at src/lib.rs:116:30: 116:31
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58])).1: &u64); // scope 1 at src/lib.rs:116:30: 116:31
        StorageLive(_5);                 // scope 2 at src/lib.rs:116:41: 116:50
        StorageLive(_6);                 // scope 2 at src/lib.rs:116:45: 116:46
        _6 = _3;                         // scope 2 at src/lib.rs:116:45: 116:46
        StorageLive(_7);                 // scope 2 at src/lib.rs:116:48: 116:49
        _7 = _4;                         // scope 2 at src/lib.rs:116:48: 116:49
        _5 = h17(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:116:41: 116:50
                                         // mir::Constant
                                         // + span: src/lib.rs:116:41: 116:44
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h17}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:116:49: 116:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:116:49: 116:50
        (((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:116:41: 116:56
        goto -> bb3;                     // scope 3 at src/lib.rs:116:41: 116:56
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:116:41: 116:56
        StorageLive(_9);                 // scope 4 at src/lib.rs:116:41: 116:56
        StorageLive(_10);                // scope 4 at src/lib.rs:116:41: 116:56
        StorageLive(_11);                // scope 4 at src/lib.rs:116:41: 116:56
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:116:41: 116:56
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:116:41: 116:56
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:116:41: 116:56
                                         // mir::Constant
                                         // + span: src/lib.rs:116:41: 116:56
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:116:55: 116:56
        StorageLive(_12);                // scope 4 at src/lib.rs:116:41: 116:56
        StorageLive(_13);                // scope 4 at src/lib.rs:116:41: 116:56
        StorageLive(_14);                // scope 4 at src/lib.rs:116:41: 116:56
        _14 = _20;                       // scope 4 at src/lib.rs:116:41: 116:56
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:116:41: 116:56
                                         // mir::Constant
                                         // + span: src/lib.rs:116:41: 116:56
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:116:41: 116:56
        StorageDead(_14);                // scope 4 at src/lib.rs:116:55: 116:56
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:116:41: 116:56
                                         // mir::Constant
                                         // + span: src/lib.rs:116:41: 116:56
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:116:55: 116:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:116:55: 116:56
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:116:41: 116:56
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:116:41: 116:56
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:116:55: 116:56
        StorageDead(_11);                // scope 3 at src/lib.rs:116:55: 116:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:116:55: 116:56
        StorageLive(_17);                // scope 3 at src/lib.rs:116:41: 116:56
        StorageLive(_18);                // scope 3 at src/lib.rs:116:41: 116:56
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:116:41: 116:56
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:116:41: 116:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58]))) = 3; // scope 3 at src/lib.rs:116:41: 116:56
        return;                          // scope 3 at src/lib.rs:116:41: 116:56
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:116:41: 116:56
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:116:41: 116:56
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:116:41: 116:56
        _19 = _16;                       // scope 5 at src/lib.rs:116:41: 116:56
        StorageDead(_16);                // scope 3 at src/lib.rs:116:55: 116:56
        StorageDead(_13);                // scope 3 at src/lib.rs:116:55: 116:56
        StorageDead(_11);                // scope 3 at src/lib.rs:116:55: 116:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:116:55: 116:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:116:55: 116:56
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:116:57: 116:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:116:57: 116:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:116:57: 116:58
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:116:58: 116:58
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:116:58: 116:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58]))) = 1; // scope 0 at src/lib.rs:116:58: 116:58
        return;                          // scope 0 at src/lib.rs:116:58: 116:58
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:116:55: 116:56
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:116:55: 116:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:116:55: 116:56
        StorageDead(_13);                // scope 3 at src/lib.rs:116:55: 116:56
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:116:55: 116:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:116:55: 116:56
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:116:55: 116:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:116:55: 116:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:116:55: 116:56
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:116:49: 116:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:116:49: 116:50
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:116:57: 116:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:116:57: 116:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:116:57: 116:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:116:39: 116:58]))) = 2; // scope 0 at src/lib.rs:116:39: 116:58
        resume;                          // scope 0 at src/lib.rs:116:39: 116:58
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:116:39: 116:58
        StorageLive(_4);                 // scope 0 at src/lib.rs:116:39: 116:58
        StorageLive(_5);                 // scope 0 at src/lib.rs:116:39: 116:58
        StorageLive(_17);                // scope 0 at src/lib.rs:116:39: 116:58
        StorageLive(_18);                // scope 0 at src/lib.rs:116:39: 116:58
        _17 = move _2;                   // scope 0 at src/lib.rs:116:39: 116:58
        StorageDead(_18);                // scope 3 at src/lib.rs:116:55: 116:56
        _20 = move _17;                  // scope 3 at src/lib.rs:116:41: 116:56
        StorageDead(_17);                // scope 3 at src/lib.rs:116:55: 116:56
        goto -> bb3;                     // scope 3 at src/lib.rs:116:41: 116:56
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:116:39: 116:58
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:116:39: 116:58
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:116:39: 116:58
    }
}

fn h16::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:114:39: 114:58]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:114:39: 114:58
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58])).0: &std::string::String); // in scope 0 at src/lib.rs:114:18: 114:19
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58])).1: &u64); // in scope 0 at src/lib.rs:114:30: 114:31
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:114:39: 114:58
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:114:18: 114:19
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:114:41: 114:50
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:114:45: 114:46
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:114:48: 114:49
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:114:41: 114:56
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:114:41: 114:56
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:114:41: 114:56
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:114:41: 114:56
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:114:41: 114:56
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:114:41: 114:56
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:114:41: 114:56
    let mut _15: isize;                  // in scope 0 at src/lib.rs:114:41: 114:56
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:114:41: 114:56
    let mut _18: ();                     // in scope 0 at src/lib.rs:114:41: 114:56
    let mut _19: ();                     // in scope 0 at src/lib.rs:114:39: 114:58
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:114:39: 114:58
    let mut _21: u32;                    // in scope 0 at src/lib.rs:114:39: 114:58
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:114:18: 114:19
        let _4: &u64;                    // in scope 1 at src/lib.rs:114:30: 114:31
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:114:30: 114:31
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:114:41: 114:56
                let _16: ();             // in scope 3 at src/lib.rs:114:41: 114:56
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:114:41: 114:56
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58]))); // scope 0 at src/lib.rs:114:39: 114:58
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:114:39: 114:58
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:114:39: 114:58
        StorageLive(_3);                 // scope 0 at src/lib.rs:114:18: 114:19
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58])).0: &std::string::String); // scope 0 at src/lib.rs:114:18: 114:19
        StorageLive(_4);                 // scope 1 at src/lib.rs:114:30: 114:31
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58])).1: &u64); // scope 1 at src/lib.rs:114:30: 114:31
        StorageLive(_5);                 // scope 2 at src/lib.rs:114:41: 114:50
        StorageLive(_6);                 // scope 2 at src/lib.rs:114:45: 114:46
        _6 = _3;                         // scope 2 at src/lib.rs:114:45: 114:46
        StorageLive(_7);                 // scope 2 at src/lib.rs:114:48: 114:49
        _7 = _4;                         // scope 2 at src/lib.rs:114:48: 114:49
        _5 = h15(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:114:41: 114:50
                                         // mir::Constant
                                         // + span: src/lib.rs:114:41: 114:44
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h15}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:114:49: 114:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:114:49: 114:50
        (((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:114:41: 114:56
        goto -> bb3;                     // scope 3 at src/lib.rs:114:41: 114:56
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:114:41: 114:56
        StorageLive(_9);                 // scope 4 at src/lib.rs:114:41: 114:56
        StorageLive(_10);                // scope 4 at src/lib.rs:114:41: 114:56
        StorageLive(_11);                // scope 4 at src/lib.rs:114:41: 114:56
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:114:41: 114:56
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:114:41: 114:56
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:114:41: 114:56
                                         // mir::Constant
                                         // + span: src/lib.rs:114:41: 114:56
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:114:55: 114:56
        StorageLive(_12);                // scope 4 at src/lib.rs:114:41: 114:56
        StorageLive(_13);                // scope 4 at src/lib.rs:114:41: 114:56
        StorageLive(_14);                // scope 4 at src/lib.rs:114:41: 114:56
        _14 = _20;                       // scope 4 at src/lib.rs:114:41: 114:56
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:114:41: 114:56
                                         // mir::Constant
                                         // + span: src/lib.rs:114:41: 114:56
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:114:41: 114:56
        StorageDead(_14);                // scope 4 at src/lib.rs:114:55: 114:56
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:114:41: 114:56
                                         // mir::Constant
                                         // + span: src/lib.rs:114:41: 114:56
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:114:55: 114:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:114:55: 114:56
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:114:41: 114:56
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:114:41: 114:56
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:114:55: 114:56
        StorageDead(_11);                // scope 3 at src/lib.rs:114:55: 114:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:114:55: 114:56
        StorageLive(_17);                // scope 3 at src/lib.rs:114:41: 114:56
        StorageLive(_18);                // scope 3 at src/lib.rs:114:41: 114:56
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:114:41: 114:56
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:114:41: 114:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58]))) = 3; // scope 3 at src/lib.rs:114:41: 114:56
        return;                          // scope 3 at src/lib.rs:114:41: 114:56
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:114:41: 114:56
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:114:41: 114:56
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:114:41: 114:56
        _19 = _16;                       // scope 5 at src/lib.rs:114:41: 114:56
        StorageDead(_16);                // scope 3 at src/lib.rs:114:55: 114:56
        StorageDead(_13);                // scope 3 at src/lib.rs:114:55: 114:56
        StorageDead(_11);                // scope 3 at src/lib.rs:114:55: 114:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:114:55: 114:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:114:55: 114:56
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:114:57: 114:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:114:57: 114:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:114:57: 114:58
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:114:58: 114:58
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:114:58: 114:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58]))) = 1; // scope 0 at src/lib.rs:114:58: 114:58
        return;                          // scope 0 at src/lib.rs:114:58: 114:58
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:114:55: 114:56
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:114:55: 114:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:114:55: 114:56
        StorageDead(_13);                // scope 3 at src/lib.rs:114:55: 114:56
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:114:55: 114:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:114:55: 114:56
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:114:55: 114:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:114:55: 114:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:114:55: 114:56
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:114:49: 114:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:114:49: 114:50
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:114:57: 114:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:114:57: 114:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:114:57: 114:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:114:39: 114:58]))) = 2; // scope 0 at src/lib.rs:114:39: 114:58
        resume;                          // scope 0 at src/lib.rs:114:39: 114:58
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:114:39: 114:58
        StorageLive(_4);                 // scope 0 at src/lib.rs:114:39: 114:58
        StorageLive(_5);                 // scope 0 at src/lib.rs:114:39: 114:58
        StorageLive(_17);                // scope 0 at src/lib.rs:114:39: 114:58
        StorageLive(_18);                // scope 0 at src/lib.rs:114:39: 114:58
        _17 = move _2;                   // scope 0 at src/lib.rs:114:39: 114:58
        StorageDead(_18);                // scope 3 at src/lib.rs:114:55: 114:56
        _20 = move _17;                  // scope 3 at src/lib.rs:114:41: 114:56
        StorageDead(_17);                // scope 3 at src/lib.rs:114:55: 114:56
        goto -> bb3;                     // scope 3 at src/lib.rs:114:41: 114:56
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:114:39: 114:58
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:114:39: 114:58
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:114:39: 114:58
    }
}

fn h14::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:112:39: 112:58]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:112:39: 112:58
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58])).0: &std::string::String); // in scope 0 at src/lib.rs:112:18: 112:19
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58])).1: &u64); // in scope 0 at src/lib.rs:112:30: 112:31
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:112:39: 112:58
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:112:18: 112:19
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:112:41: 112:50
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:112:45: 112:46
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:112:48: 112:49
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:112:41: 112:56
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:112:41: 112:56
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:112:41: 112:56
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:112:41: 112:56
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:112:41: 112:56
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:112:41: 112:56
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:112:41: 112:56
    let mut _15: isize;                  // in scope 0 at src/lib.rs:112:41: 112:56
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:112:41: 112:56
    let mut _18: ();                     // in scope 0 at src/lib.rs:112:41: 112:56
    let mut _19: ();                     // in scope 0 at src/lib.rs:112:39: 112:58
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:112:39: 112:58
    let mut _21: u32;                    // in scope 0 at src/lib.rs:112:39: 112:58
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:112:18: 112:19
        let _4: &u64;                    // in scope 1 at src/lib.rs:112:30: 112:31
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:112:30: 112:31
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:112:41: 112:56
                let _16: ();             // in scope 3 at src/lib.rs:112:41: 112:56
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:112:41: 112:56
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58]))); // scope 0 at src/lib.rs:112:39: 112:58
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:112:39: 112:58
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:112:39: 112:58
        StorageLive(_3);                 // scope 0 at src/lib.rs:112:18: 112:19
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58])).0: &std::string::String); // scope 0 at src/lib.rs:112:18: 112:19
        StorageLive(_4);                 // scope 1 at src/lib.rs:112:30: 112:31
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58])).1: &u64); // scope 1 at src/lib.rs:112:30: 112:31
        StorageLive(_5);                 // scope 2 at src/lib.rs:112:41: 112:50
        StorageLive(_6);                 // scope 2 at src/lib.rs:112:45: 112:46
        _6 = _3;                         // scope 2 at src/lib.rs:112:45: 112:46
        StorageLive(_7);                 // scope 2 at src/lib.rs:112:48: 112:49
        _7 = _4;                         // scope 2 at src/lib.rs:112:48: 112:49
        _5 = h13(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:112:41: 112:50
                                         // mir::Constant
                                         // + span: src/lib.rs:112:41: 112:44
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h13}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:112:49: 112:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:112:49: 112:50
        (((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:112:41: 112:56
        goto -> bb3;                     // scope 3 at src/lib.rs:112:41: 112:56
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:112:41: 112:56
        StorageLive(_9);                 // scope 4 at src/lib.rs:112:41: 112:56
        StorageLive(_10);                // scope 4 at src/lib.rs:112:41: 112:56
        StorageLive(_11);                // scope 4 at src/lib.rs:112:41: 112:56
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:112:41: 112:56
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:112:41: 112:56
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:112:41: 112:56
                                         // mir::Constant
                                         // + span: src/lib.rs:112:41: 112:56
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:112:55: 112:56
        StorageLive(_12);                // scope 4 at src/lib.rs:112:41: 112:56
        StorageLive(_13);                // scope 4 at src/lib.rs:112:41: 112:56
        StorageLive(_14);                // scope 4 at src/lib.rs:112:41: 112:56
        _14 = _20;                       // scope 4 at src/lib.rs:112:41: 112:56
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:112:41: 112:56
                                         // mir::Constant
                                         // + span: src/lib.rs:112:41: 112:56
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:112:41: 112:56
        StorageDead(_14);                // scope 4 at src/lib.rs:112:55: 112:56
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:112:41: 112:56
                                         // mir::Constant
                                         // + span: src/lib.rs:112:41: 112:56
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:112:55: 112:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:112:55: 112:56
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:112:41: 112:56
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:112:41: 112:56
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:112:55: 112:56
        StorageDead(_11);                // scope 3 at src/lib.rs:112:55: 112:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:112:55: 112:56
        StorageLive(_17);                // scope 3 at src/lib.rs:112:41: 112:56
        StorageLive(_18);                // scope 3 at src/lib.rs:112:41: 112:56
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:112:41: 112:56
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:112:41: 112:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58]))) = 3; // scope 3 at src/lib.rs:112:41: 112:56
        return;                          // scope 3 at src/lib.rs:112:41: 112:56
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:112:41: 112:56
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:112:41: 112:56
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:112:41: 112:56
        _19 = _16;                       // scope 5 at src/lib.rs:112:41: 112:56
        StorageDead(_16);                // scope 3 at src/lib.rs:112:55: 112:56
        StorageDead(_13);                // scope 3 at src/lib.rs:112:55: 112:56
        StorageDead(_11);                // scope 3 at src/lib.rs:112:55: 112:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:112:55: 112:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:112:55: 112:56
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:112:57: 112:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:112:57: 112:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:112:57: 112:58
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:112:58: 112:58
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:112:58: 112:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58]))) = 1; // scope 0 at src/lib.rs:112:58: 112:58
        return;                          // scope 0 at src/lib.rs:112:58: 112:58
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:112:55: 112:56
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:112:55: 112:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:112:55: 112:56
        StorageDead(_13);                // scope 3 at src/lib.rs:112:55: 112:56
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:112:55: 112:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:112:55: 112:56
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:112:55: 112:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:112:55: 112:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:112:55: 112:56
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:112:49: 112:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:112:49: 112:50
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:112:57: 112:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:112:57: 112:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:112:57: 112:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:112:39: 112:58]))) = 2; // scope 0 at src/lib.rs:112:39: 112:58
        resume;                          // scope 0 at src/lib.rs:112:39: 112:58
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:112:39: 112:58
        StorageLive(_4);                 // scope 0 at src/lib.rs:112:39: 112:58
        StorageLive(_5);                 // scope 0 at src/lib.rs:112:39: 112:58
        StorageLive(_17);                // scope 0 at src/lib.rs:112:39: 112:58
        StorageLive(_18);                // scope 0 at src/lib.rs:112:39: 112:58
        _17 = move _2;                   // scope 0 at src/lib.rs:112:39: 112:58
        StorageDead(_18);                // scope 3 at src/lib.rs:112:55: 112:56
        _20 = move _17;                  // scope 3 at src/lib.rs:112:41: 112:56
        StorageDead(_17);                // scope 3 at src/lib.rs:112:55: 112:56
        goto -> bb3;                     // scope 3 at src/lib.rs:112:41: 112:56
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:112:39: 112:58
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:112:39: 112:58
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:112:39: 112:58
    }
}

fn h12::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:110:39: 110:58]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:110:39: 110:58
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58])).0: &std::string::String); // in scope 0 at src/lib.rs:110:18: 110:19
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58])).1: &u64); // in scope 0 at src/lib.rs:110:30: 110:31
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:110:39: 110:58
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:110:18: 110:19
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:110:41: 110:50
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:110:45: 110:46
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:110:48: 110:49
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:110:41: 110:56
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:110:41: 110:56
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:110:41: 110:56
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:110:41: 110:56
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:110:41: 110:56
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:110:41: 110:56
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:110:41: 110:56
    let mut _15: isize;                  // in scope 0 at src/lib.rs:110:41: 110:56
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:110:41: 110:56
    let mut _18: ();                     // in scope 0 at src/lib.rs:110:41: 110:56
    let mut _19: ();                     // in scope 0 at src/lib.rs:110:39: 110:58
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:110:39: 110:58
    let mut _21: u32;                    // in scope 0 at src/lib.rs:110:39: 110:58
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:110:18: 110:19
        let _4: &u64;                    // in scope 1 at src/lib.rs:110:30: 110:31
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:110:30: 110:31
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:110:41: 110:56
                let _16: ();             // in scope 3 at src/lib.rs:110:41: 110:56
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:110:41: 110:56
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58]))); // scope 0 at src/lib.rs:110:39: 110:58
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:110:39: 110:58
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:110:39: 110:58
        StorageLive(_3);                 // scope 0 at src/lib.rs:110:18: 110:19
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58])).0: &std::string::String); // scope 0 at src/lib.rs:110:18: 110:19
        StorageLive(_4);                 // scope 1 at src/lib.rs:110:30: 110:31
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58])).1: &u64); // scope 1 at src/lib.rs:110:30: 110:31
        StorageLive(_5);                 // scope 2 at src/lib.rs:110:41: 110:50
        StorageLive(_6);                 // scope 2 at src/lib.rs:110:45: 110:46
        _6 = _3;                         // scope 2 at src/lib.rs:110:45: 110:46
        StorageLive(_7);                 // scope 2 at src/lib.rs:110:48: 110:49
        _7 = _4;                         // scope 2 at src/lib.rs:110:48: 110:49
        _5 = h11(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:110:41: 110:50
                                         // mir::Constant
                                         // + span: src/lib.rs:110:41: 110:44
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h11}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:110:49: 110:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:110:49: 110:50
        (((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:110:41: 110:56
        goto -> bb3;                     // scope 3 at src/lib.rs:110:41: 110:56
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:110:41: 110:56
        StorageLive(_9);                 // scope 4 at src/lib.rs:110:41: 110:56
        StorageLive(_10);                // scope 4 at src/lib.rs:110:41: 110:56
        StorageLive(_11);                // scope 4 at src/lib.rs:110:41: 110:56
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:110:41: 110:56
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:110:41: 110:56
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:110:41: 110:56
                                         // mir::Constant
                                         // + span: src/lib.rs:110:41: 110:56
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:110:55: 110:56
        StorageLive(_12);                // scope 4 at src/lib.rs:110:41: 110:56
        StorageLive(_13);                // scope 4 at src/lib.rs:110:41: 110:56
        StorageLive(_14);                // scope 4 at src/lib.rs:110:41: 110:56
        _14 = _20;                       // scope 4 at src/lib.rs:110:41: 110:56
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:110:41: 110:56
                                         // mir::Constant
                                         // + span: src/lib.rs:110:41: 110:56
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:110:41: 110:56
        StorageDead(_14);                // scope 4 at src/lib.rs:110:55: 110:56
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:110:41: 110:56
                                         // mir::Constant
                                         // + span: src/lib.rs:110:41: 110:56
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:110:55: 110:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:110:55: 110:56
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:110:41: 110:56
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:110:41: 110:56
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:110:55: 110:56
        StorageDead(_11);                // scope 3 at src/lib.rs:110:55: 110:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:110:55: 110:56
        StorageLive(_17);                // scope 3 at src/lib.rs:110:41: 110:56
        StorageLive(_18);                // scope 3 at src/lib.rs:110:41: 110:56
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:110:41: 110:56
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:110:41: 110:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58]))) = 3; // scope 3 at src/lib.rs:110:41: 110:56
        return;                          // scope 3 at src/lib.rs:110:41: 110:56
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:110:41: 110:56
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:110:41: 110:56
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:110:41: 110:56
        _19 = _16;                       // scope 5 at src/lib.rs:110:41: 110:56
        StorageDead(_16);                // scope 3 at src/lib.rs:110:55: 110:56
        StorageDead(_13);                // scope 3 at src/lib.rs:110:55: 110:56
        StorageDead(_11);                // scope 3 at src/lib.rs:110:55: 110:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:110:55: 110:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:110:55: 110:56
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:110:57: 110:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:110:57: 110:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:110:57: 110:58
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:110:58: 110:58
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:110:58: 110:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58]))) = 1; // scope 0 at src/lib.rs:110:58: 110:58
        return;                          // scope 0 at src/lib.rs:110:58: 110:58
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:110:55: 110:56
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:110:55: 110:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:110:55: 110:56
        StorageDead(_13);                // scope 3 at src/lib.rs:110:55: 110:56
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:110:55: 110:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:110:55: 110:56
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:110:55: 110:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:110:55: 110:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:110:55: 110:56
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:110:49: 110:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:110:49: 110:50
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:110:57: 110:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:110:57: 110:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:110:57: 110:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:110:39: 110:58]))) = 2; // scope 0 at src/lib.rs:110:39: 110:58
        resume;                          // scope 0 at src/lib.rs:110:39: 110:58
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:110:39: 110:58
        StorageLive(_4);                 // scope 0 at src/lib.rs:110:39: 110:58
        StorageLive(_5);                 // scope 0 at src/lib.rs:110:39: 110:58
        StorageLive(_17);                // scope 0 at src/lib.rs:110:39: 110:58
        StorageLive(_18);                // scope 0 at src/lib.rs:110:39: 110:58
        _17 = move _2;                   // scope 0 at src/lib.rs:110:39: 110:58
        StorageDead(_18);                // scope 3 at src/lib.rs:110:55: 110:56
        _20 = move _17;                  // scope 3 at src/lib.rs:110:41: 110:56
        StorageDead(_17);                // scope 3 at src/lib.rs:110:55: 110:56
        goto -> bb3;                     // scope 3 at src/lib.rs:110:41: 110:56
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:110:39: 110:58
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:110:39: 110:58
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:110:39: 110:58
    }
}

fn h10::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:108:39: 108:57]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:108:39: 108:57
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57])).0: &std::string::String); // in scope 0 at src/lib.rs:108:18: 108:19
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57])).1: &u64); // in scope 0 at src/lib.rs:108:30: 108:31
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:108:39: 108:57
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:108:18: 108:19
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:108:41: 108:49
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:108:44: 108:45
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:108:47: 108:48
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:108:41: 108:55
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:108:41: 108:55
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:108:41: 108:55
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:108:41: 108:55
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:108:41: 108:55
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:108:41: 108:55
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:108:41: 108:55
    let mut _15: isize;                  // in scope 0 at src/lib.rs:108:41: 108:55
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:108:41: 108:55
    let mut _18: ();                     // in scope 0 at src/lib.rs:108:41: 108:55
    let mut _19: ();                     // in scope 0 at src/lib.rs:108:39: 108:57
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:108:39: 108:57
    let mut _21: u32;                    // in scope 0 at src/lib.rs:108:39: 108:57
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:108:18: 108:19
        let _4: &u64;                    // in scope 1 at src/lib.rs:108:30: 108:31
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:108:30: 108:31
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:108:41: 108:55
                let _16: ();             // in scope 3 at src/lib.rs:108:41: 108:55
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:108:41: 108:55
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57]))); // scope 0 at src/lib.rs:108:39: 108:57
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:108:39: 108:57
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:108:39: 108:57
        StorageLive(_3);                 // scope 0 at src/lib.rs:108:18: 108:19
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57])).0: &std::string::String); // scope 0 at src/lib.rs:108:18: 108:19
        StorageLive(_4);                 // scope 1 at src/lib.rs:108:30: 108:31
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57])).1: &u64); // scope 1 at src/lib.rs:108:30: 108:31
        StorageLive(_5);                 // scope 2 at src/lib.rs:108:41: 108:49
        StorageLive(_6);                 // scope 2 at src/lib.rs:108:44: 108:45
        _6 = _3;                         // scope 2 at src/lib.rs:108:44: 108:45
        StorageLive(_7);                 // scope 2 at src/lib.rs:108:47: 108:48
        _7 = _4;                         // scope 2 at src/lib.rs:108:47: 108:48
        _5 = h9(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:108:41: 108:49
                                         // mir::Constant
                                         // + span: src/lib.rs:108:41: 108:43
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h9}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:108:48: 108:49
        StorageDead(_6);                 // scope 2 at src/lib.rs:108:48: 108:49
        (((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:108:41: 108:55
        goto -> bb3;                     // scope 3 at src/lib.rs:108:41: 108:55
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:108:41: 108:55
        StorageLive(_9);                 // scope 4 at src/lib.rs:108:41: 108:55
        StorageLive(_10);                // scope 4 at src/lib.rs:108:41: 108:55
        StorageLive(_11);                // scope 4 at src/lib.rs:108:41: 108:55
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:108:41: 108:55
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:108:41: 108:55
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:108:41: 108:55
                                         // mir::Constant
                                         // + span: src/lib.rs:108:41: 108:55
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:108:54: 108:55
        StorageLive(_12);                // scope 4 at src/lib.rs:108:41: 108:55
        StorageLive(_13);                // scope 4 at src/lib.rs:108:41: 108:55
        StorageLive(_14);                // scope 4 at src/lib.rs:108:41: 108:55
        _14 = _20;                       // scope 4 at src/lib.rs:108:41: 108:55
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:108:41: 108:55
                                         // mir::Constant
                                         // + span: src/lib.rs:108:41: 108:55
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:108:41: 108:55
        StorageDead(_14);                // scope 4 at src/lib.rs:108:54: 108:55
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:108:41: 108:55
                                         // mir::Constant
                                         // + span: src/lib.rs:108:41: 108:55
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:108:54: 108:55
        StorageDead(_9);                 // scope 4 at src/lib.rs:108:54: 108:55
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:108:41: 108:55
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:108:41: 108:55
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:108:54: 108:55
        StorageDead(_11);                // scope 3 at src/lib.rs:108:54: 108:55
        StorageDead(_8);                 // scope 3 at src/lib.rs:108:54: 108:55
        StorageLive(_17);                // scope 3 at src/lib.rs:108:41: 108:55
        StorageLive(_18);                // scope 3 at src/lib.rs:108:41: 108:55
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:108:41: 108:55
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:108:41: 108:55
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57]))) = 3; // scope 3 at src/lib.rs:108:41: 108:55
        return;                          // scope 3 at src/lib.rs:108:41: 108:55
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:108:41: 108:55
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:108:41: 108:55
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:108:41: 108:55
        _19 = _16;                       // scope 5 at src/lib.rs:108:41: 108:55
        StorageDead(_16);                // scope 3 at src/lib.rs:108:54: 108:55
        StorageDead(_13);                // scope 3 at src/lib.rs:108:54: 108:55
        StorageDead(_11);                // scope 3 at src/lib.rs:108:54: 108:55
        StorageDead(_8);                 // scope 3 at src/lib.rs:108:54: 108:55
        drop((((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:108:54: 108:55
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:108:56: 108:57
        StorageDead(_4);                 // scope 1 at src/lib.rs:108:56: 108:57
        StorageDead(_3);                 // scope 0 at src/lib.rs:108:56: 108:57
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:108:57: 108:57
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:108:57: 108:57
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57]))) = 1; // scope 0 at src/lib.rs:108:57: 108:57
        return;                          // scope 0 at src/lib.rs:108:57: 108:57
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:108:54: 108:55
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:108:54: 108:55
        StorageDead(_9);                 // scope 4 at src/lib.rs:108:54: 108:55
        StorageDead(_13);                // scope 3 at src/lib.rs:108:54: 108:55
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:108:54: 108:55
        StorageDead(_9);                 // scope 4 at src/lib.rs:108:54: 108:55
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:108:54: 108:55
        StorageDead(_8);                 // scope 3 at src/lib.rs:108:54: 108:55
        drop((((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:108:54: 108:55
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:108:48: 108:49
        StorageDead(_6);                 // scope 2 at src/lib.rs:108:48: 108:49
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:108:56: 108:57
        StorageDead(_4);                 // scope 1 at src/lib.rs:108:56: 108:57
        StorageDead(_3);                 // scope 0 at src/lib.rs:108:56: 108:57
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:108:39: 108:57]))) = 2; // scope 0 at src/lib.rs:108:39: 108:57
        resume;                          // scope 0 at src/lib.rs:108:39: 108:57
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:108:39: 108:57
        StorageLive(_4);                 // scope 0 at src/lib.rs:108:39: 108:57
        StorageLive(_5);                 // scope 0 at src/lib.rs:108:39: 108:57
        StorageLive(_17);                // scope 0 at src/lib.rs:108:39: 108:57
        StorageLive(_18);                // scope 0 at src/lib.rs:108:39: 108:57
        _17 = move _2;                   // scope 0 at src/lib.rs:108:39: 108:57
        StorageDead(_18);                // scope 3 at src/lib.rs:108:54: 108:55
        _20 = move _17;                  // scope 3 at src/lib.rs:108:41: 108:55
        StorageDead(_17);                // scope 3 at src/lib.rs:108:54: 108:55
        goto -> bb3;                     // scope 3 at src/lib.rs:108:41: 108:55
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:108:39: 108:57
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:108:39: 108:57
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:108:39: 108:57
    }
}

fn h8::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:105:38: 105:56]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:105:38: 105:56
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56])).0: &std::string::String); // in scope 0 at src/lib.rs:105:17: 105:18
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56])).1: &u64); // in scope 0 at src/lib.rs:105:29: 105:30
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:105:38: 105:56
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:105:17: 105:18
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:105:40: 105:48
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:105:43: 105:44
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:105:46: 105:47
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:105:40: 105:54
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:105:40: 105:54
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:105:40: 105:54
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:105:40: 105:54
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:105:40: 105:54
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:105:40: 105:54
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:105:40: 105:54
    let mut _15: isize;                  // in scope 0 at src/lib.rs:105:40: 105:54
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:105:40: 105:54
    let mut _18: ();                     // in scope 0 at src/lib.rs:105:40: 105:54
    let mut _19: ();                     // in scope 0 at src/lib.rs:105:38: 105:56
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:105:38: 105:56
    let mut _21: u32;                    // in scope 0 at src/lib.rs:105:38: 105:56
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:105:17: 105:18
        let _4: &u64;                    // in scope 1 at src/lib.rs:105:29: 105:30
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:105:29: 105:30
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:105:40: 105:54
                let _16: ();             // in scope 3 at src/lib.rs:105:40: 105:54
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:105:40: 105:54
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56]))); // scope 0 at src/lib.rs:105:38: 105:56
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:105:38: 105:56
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:105:38: 105:56
        StorageLive(_3);                 // scope 0 at src/lib.rs:105:17: 105:18
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56])).0: &std::string::String); // scope 0 at src/lib.rs:105:17: 105:18
        StorageLive(_4);                 // scope 1 at src/lib.rs:105:29: 105:30
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56])).1: &u64); // scope 1 at src/lib.rs:105:29: 105:30
        StorageLive(_5);                 // scope 2 at src/lib.rs:105:40: 105:48
        StorageLive(_6);                 // scope 2 at src/lib.rs:105:43: 105:44
        _6 = _3;                         // scope 2 at src/lib.rs:105:43: 105:44
        StorageLive(_7);                 // scope 2 at src/lib.rs:105:46: 105:47
        _7 = _4;                         // scope 2 at src/lib.rs:105:46: 105:47
        _5 = h7(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:105:40: 105:48
                                         // mir::Constant
                                         // + span: src/lib.rs:105:40: 105:42
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h7}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:105:47: 105:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:105:47: 105:48
        (((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:105:40: 105:54
        goto -> bb3;                     // scope 3 at src/lib.rs:105:40: 105:54
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:105:40: 105:54
        StorageLive(_9);                 // scope 4 at src/lib.rs:105:40: 105:54
        StorageLive(_10);                // scope 4 at src/lib.rs:105:40: 105:54
        StorageLive(_11);                // scope 4 at src/lib.rs:105:40: 105:54
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:105:40: 105:54
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:105:40: 105:54
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:105:40: 105:54
                                         // mir::Constant
                                         // + span: src/lib.rs:105:40: 105:54
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:105:53: 105:54
        StorageLive(_12);                // scope 4 at src/lib.rs:105:40: 105:54
        StorageLive(_13);                // scope 4 at src/lib.rs:105:40: 105:54
        StorageLive(_14);                // scope 4 at src/lib.rs:105:40: 105:54
        _14 = _20;                       // scope 4 at src/lib.rs:105:40: 105:54
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:105:40: 105:54
                                         // mir::Constant
                                         // + span: src/lib.rs:105:40: 105:54
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:105:40: 105:54
        StorageDead(_14);                // scope 4 at src/lib.rs:105:53: 105:54
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:105:40: 105:54
                                         // mir::Constant
                                         // + span: src/lib.rs:105:40: 105:54
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:105:53: 105:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:105:53: 105:54
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:105:40: 105:54
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:105:40: 105:54
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:105:53: 105:54
        StorageDead(_11);                // scope 3 at src/lib.rs:105:53: 105:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:105:53: 105:54
        StorageLive(_17);                // scope 3 at src/lib.rs:105:40: 105:54
        StorageLive(_18);                // scope 3 at src/lib.rs:105:40: 105:54
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:105:40: 105:54
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:105:40: 105:54
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56]))) = 3; // scope 3 at src/lib.rs:105:40: 105:54
        return;                          // scope 3 at src/lib.rs:105:40: 105:54
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:105:40: 105:54
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:105:40: 105:54
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:105:40: 105:54
        _19 = _16;                       // scope 5 at src/lib.rs:105:40: 105:54
        StorageDead(_16);                // scope 3 at src/lib.rs:105:53: 105:54
        StorageDead(_13);                // scope 3 at src/lib.rs:105:53: 105:54
        StorageDead(_11);                // scope 3 at src/lib.rs:105:53: 105:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:105:53: 105:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:105:53: 105:54
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:105:55: 105:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:105:55: 105:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:105:55: 105:56
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:105:56: 105:56
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:105:56: 105:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56]))) = 1; // scope 0 at src/lib.rs:105:56: 105:56
        return;                          // scope 0 at src/lib.rs:105:56: 105:56
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:105:53: 105:54
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:105:53: 105:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:105:53: 105:54
        StorageDead(_13);                // scope 3 at src/lib.rs:105:53: 105:54
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:105:53: 105:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:105:53: 105:54
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:105:53: 105:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:105:53: 105:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:105:53: 105:54
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:105:47: 105:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:105:47: 105:48
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:105:55: 105:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:105:55: 105:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:105:55: 105:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:105:38: 105:56]))) = 2; // scope 0 at src/lib.rs:105:38: 105:56
        resume;                          // scope 0 at src/lib.rs:105:38: 105:56
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:105:38: 105:56
        StorageLive(_4);                 // scope 0 at src/lib.rs:105:38: 105:56
        StorageLive(_5);                 // scope 0 at src/lib.rs:105:38: 105:56
        StorageLive(_17);                // scope 0 at src/lib.rs:105:38: 105:56
        StorageLive(_18);                // scope 0 at src/lib.rs:105:38: 105:56
        _17 = move _2;                   // scope 0 at src/lib.rs:105:38: 105:56
        StorageDead(_18);                // scope 3 at src/lib.rs:105:53: 105:54
        _20 = move _17;                  // scope 3 at src/lib.rs:105:40: 105:54
        StorageDead(_17);                // scope 3 at src/lib.rs:105:53: 105:54
        goto -> bb3;                     // scope 3 at src/lib.rs:105:40: 105:54
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:105:38: 105:56
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:105:38: 105:56
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:105:38: 105:56
    }
}

fn h6::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:103:38: 103:56]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:103:38: 103:56
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56])).0: &std::string::String); // in scope 0 at src/lib.rs:103:17: 103:18
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56])).1: &u64); // in scope 0 at src/lib.rs:103:29: 103:30
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:103:38: 103:56
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:103:17: 103:18
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:103:40: 103:48
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:103:43: 103:44
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:103:46: 103:47
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:103:40: 103:54
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:103:40: 103:54
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:103:40: 103:54
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:103:40: 103:54
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:103:40: 103:54
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:103:40: 103:54
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:103:40: 103:54
    let mut _15: isize;                  // in scope 0 at src/lib.rs:103:40: 103:54
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:103:40: 103:54
    let mut _18: ();                     // in scope 0 at src/lib.rs:103:40: 103:54
    let mut _19: ();                     // in scope 0 at src/lib.rs:103:38: 103:56
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:103:38: 103:56
    let mut _21: u32;                    // in scope 0 at src/lib.rs:103:38: 103:56
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:103:17: 103:18
        let _4: &u64;                    // in scope 1 at src/lib.rs:103:29: 103:30
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:103:29: 103:30
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:103:40: 103:54
                let _16: ();             // in scope 3 at src/lib.rs:103:40: 103:54
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:103:40: 103:54
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56]))); // scope 0 at src/lib.rs:103:38: 103:56
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:103:38: 103:56
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:103:38: 103:56
        StorageLive(_3);                 // scope 0 at src/lib.rs:103:17: 103:18
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56])).0: &std::string::String); // scope 0 at src/lib.rs:103:17: 103:18
        StorageLive(_4);                 // scope 1 at src/lib.rs:103:29: 103:30
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56])).1: &u64); // scope 1 at src/lib.rs:103:29: 103:30
        StorageLive(_5);                 // scope 2 at src/lib.rs:103:40: 103:48
        StorageLive(_6);                 // scope 2 at src/lib.rs:103:43: 103:44
        _6 = _3;                         // scope 2 at src/lib.rs:103:43: 103:44
        StorageLive(_7);                 // scope 2 at src/lib.rs:103:46: 103:47
        _7 = _4;                         // scope 2 at src/lib.rs:103:46: 103:47
        _5 = h5(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:103:40: 103:48
                                         // mir::Constant
                                         // + span: src/lib.rs:103:40: 103:42
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h5}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:103:47: 103:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:103:47: 103:48
        (((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:103:40: 103:54
        goto -> bb3;                     // scope 3 at src/lib.rs:103:40: 103:54
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:103:40: 103:54
        StorageLive(_9);                 // scope 4 at src/lib.rs:103:40: 103:54
        StorageLive(_10);                // scope 4 at src/lib.rs:103:40: 103:54
        StorageLive(_11);                // scope 4 at src/lib.rs:103:40: 103:54
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:103:40: 103:54
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:103:40: 103:54
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:103:40: 103:54
                                         // mir::Constant
                                         // + span: src/lib.rs:103:40: 103:54
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:103:53: 103:54
        StorageLive(_12);                // scope 4 at src/lib.rs:103:40: 103:54
        StorageLive(_13);                // scope 4 at src/lib.rs:103:40: 103:54
        StorageLive(_14);                // scope 4 at src/lib.rs:103:40: 103:54
        _14 = _20;                       // scope 4 at src/lib.rs:103:40: 103:54
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:103:40: 103:54
                                         // mir::Constant
                                         // + span: src/lib.rs:103:40: 103:54
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:103:40: 103:54
        StorageDead(_14);                // scope 4 at src/lib.rs:103:53: 103:54
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:103:40: 103:54
                                         // mir::Constant
                                         // + span: src/lib.rs:103:40: 103:54
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:103:53: 103:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:103:53: 103:54
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:103:40: 103:54
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:103:40: 103:54
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:103:53: 103:54
        StorageDead(_11);                // scope 3 at src/lib.rs:103:53: 103:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:103:53: 103:54
        StorageLive(_17);                // scope 3 at src/lib.rs:103:40: 103:54
        StorageLive(_18);                // scope 3 at src/lib.rs:103:40: 103:54
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:103:40: 103:54
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:103:40: 103:54
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56]))) = 3; // scope 3 at src/lib.rs:103:40: 103:54
        return;                          // scope 3 at src/lib.rs:103:40: 103:54
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:103:40: 103:54
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:103:40: 103:54
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:103:40: 103:54
        _19 = _16;                       // scope 5 at src/lib.rs:103:40: 103:54
        StorageDead(_16);                // scope 3 at src/lib.rs:103:53: 103:54
        StorageDead(_13);                // scope 3 at src/lib.rs:103:53: 103:54
        StorageDead(_11);                // scope 3 at src/lib.rs:103:53: 103:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:103:53: 103:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:103:53: 103:54
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:103:55: 103:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:103:55: 103:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:103:55: 103:56
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:103:56: 103:56
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:103:56: 103:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56]))) = 1; // scope 0 at src/lib.rs:103:56: 103:56
        return;                          // scope 0 at src/lib.rs:103:56: 103:56
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:103:53: 103:54
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:103:53: 103:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:103:53: 103:54
        StorageDead(_13);                // scope 3 at src/lib.rs:103:53: 103:54
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:103:53: 103:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:103:53: 103:54
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:103:53: 103:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:103:53: 103:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:103:53: 103:54
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:103:47: 103:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:103:47: 103:48
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:103:55: 103:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:103:55: 103:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:103:55: 103:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:103:38: 103:56]))) = 2; // scope 0 at src/lib.rs:103:38: 103:56
        resume;                          // scope 0 at src/lib.rs:103:38: 103:56
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:103:38: 103:56
        StorageLive(_4);                 // scope 0 at src/lib.rs:103:38: 103:56
        StorageLive(_5);                 // scope 0 at src/lib.rs:103:38: 103:56
        StorageLive(_17);                // scope 0 at src/lib.rs:103:38: 103:56
        StorageLive(_18);                // scope 0 at src/lib.rs:103:38: 103:56
        _17 = move _2;                   // scope 0 at src/lib.rs:103:38: 103:56
        StorageDead(_18);                // scope 3 at src/lib.rs:103:53: 103:54
        _20 = move _17;                  // scope 3 at src/lib.rs:103:40: 103:54
        StorageDead(_17);                // scope 3 at src/lib.rs:103:53: 103:54
        goto -> bb3;                     // scope 3 at src/lib.rs:103:40: 103:54
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:103:38: 103:56
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:103:38: 103:56
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:103:38: 103:56
    }
}

fn h4::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:101:38: 101:56]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:101:38: 101:56
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56])).0: &std::string::String); // in scope 0 at src/lib.rs:101:17: 101:18
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56])).1: &u64); // in scope 0 at src/lib.rs:101:29: 101:30
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:101:38: 101:56
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:101:17: 101:18
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:101:40: 101:48
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:101:43: 101:44
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:101:46: 101:47
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:101:40: 101:54
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:101:40: 101:54
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:101:40: 101:54
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:101:40: 101:54
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:101:40: 101:54
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:101:40: 101:54
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:101:40: 101:54
    let mut _15: isize;                  // in scope 0 at src/lib.rs:101:40: 101:54
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:101:40: 101:54
    let mut _18: ();                     // in scope 0 at src/lib.rs:101:40: 101:54
    let mut _19: ();                     // in scope 0 at src/lib.rs:101:38: 101:56
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:101:38: 101:56
    let mut _21: u32;                    // in scope 0 at src/lib.rs:101:38: 101:56
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:101:17: 101:18
        let _4: &u64;                    // in scope 1 at src/lib.rs:101:29: 101:30
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:101:29: 101:30
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:101:40: 101:54
                let _16: ();             // in scope 3 at src/lib.rs:101:40: 101:54
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:101:40: 101:54
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56]))); // scope 0 at src/lib.rs:101:38: 101:56
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:101:38: 101:56
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:101:38: 101:56
        StorageLive(_3);                 // scope 0 at src/lib.rs:101:17: 101:18
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56])).0: &std::string::String); // scope 0 at src/lib.rs:101:17: 101:18
        StorageLive(_4);                 // scope 1 at src/lib.rs:101:29: 101:30
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56])).1: &u64); // scope 1 at src/lib.rs:101:29: 101:30
        StorageLive(_5);                 // scope 2 at src/lib.rs:101:40: 101:48
        StorageLive(_6);                 // scope 2 at src/lib.rs:101:43: 101:44
        _6 = _3;                         // scope 2 at src/lib.rs:101:43: 101:44
        StorageLive(_7);                 // scope 2 at src/lib.rs:101:46: 101:47
        _7 = _4;                         // scope 2 at src/lib.rs:101:46: 101:47
        _5 = h3(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:101:40: 101:48
                                         // mir::Constant
                                         // + span: src/lib.rs:101:40: 101:42
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h3}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:101:47: 101:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:101:47: 101:48
        (((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:101:40: 101:54
        goto -> bb3;                     // scope 3 at src/lib.rs:101:40: 101:54
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:101:40: 101:54
        StorageLive(_9);                 // scope 4 at src/lib.rs:101:40: 101:54
        StorageLive(_10);                // scope 4 at src/lib.rs:101:40: 101:54
        StorageLive(_11);                // scope 4 at src/lib.rs:101:40: 101:54
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:101:40: 101:54
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:101:40: 101:54
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:101:40: 101:54
                                         // mir::Constant
                                         // + span: src/lib.rs:101:40: 101:54
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:101:53: 101:54
        StorageLive(_12);                // scope 4 at src/lib.rs:101:40: 101:54
        StorageLive(_13);                // scope 4 at src/lib.rs:101:40: 101:54
        StorageLive(_14);                // scope 4 at src/lib.rs:101:40: 101:54
        _14 = _20;                       // scope 4 at src/lib.rs:101:40: 101:54
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:101:40: 101:54
                                         // mir::Constant
                                         // + span: src/lib.rs:101:40: 101:54
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:101:40: 101:54
        StorageDead(_14);                // scope 4 at src/lib.rs:101:53: 101:54
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:101:40: 101:54
                                         // mir::Constant
                                         // + span: src/lib.rs:101:40: 101:54
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:101:53: 101:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:101:53: 101:54
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:101:40: 101:54
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:101:40: 101:54
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:101:53: 101:54
        StorageDead(_11);                // scope 3 at src/lib.rs:101:53: 101:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:101:53: 101:54
        StorageLive(_17);                // scope 3 at src/lib.rs:101:40: 101:54
        StorageLive(_18);                // scope 3 at src/lib.rs:101:40: 101:54
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:101:40: 101:54
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:101:40: 101:54
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56]))) = 3; // scope 3 at src/lib.rs:101:40: 101:54
        return;                          // scope 3 at src/lib.rs:101:40: 101:54
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:101:40: 101:54
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:101:40: 101:54
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:101:40: 101:54
        _19 = _16;                       // scope 5 at src/lib.rs:101:40: 101:54
        StorageDead(_16);                // scope 3 at src/lib.rs:101:53: 101:54
        StorageDead(_13);                // scope 3 at src/lib.rs:101:53: 101:54
        StorageDead(_11);                // scope 3 at src/lib.rs:101:53: 101:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:101:53: 101:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:101:53: 101:54
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:101:55: 101:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:101:55: 101:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:101:55: 101:56
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:101:56: 101:56
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:101:56: 101:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56]))) = 1; // scope 0 at src/lib.rs:101:56: 101:56
        return;                          // scope 0 at src/lib.rs:101:56: 101:56
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:101:53: 101:54
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:101:53: 101:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:101:53: 101:54
        StorageDead(_13);                // scope 3 at src/lib.rs:101:53: 101:54
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:101:53: 101:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:101:53: 101:54
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:101:53: 101:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:101:53: 101:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:101:53: 101:54
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:101:47: 101:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:101:47: 101:48
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:101:55: 101:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:101:55: 101:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:101:55: 101:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:101:38: 101:56]))) = 2; // scope 0 at src/lib.rs:101:38: 101:56
        resume;                          // scope 0 at src/lib.rs:101:38: 101:56
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:101:38: 101:56
        StorageLive(_4);                 // scope 0 at src/lib.rs:101:38: 101:56
        StorageLive(_5);                 // scope 0 at src/lib.rs:101:38: 101:56
        StorageLive(_17);                // scope 0 at src/lib.rs:101:38: 101:56
        StorageLive(_18);                // scope 0 at src/lib.rs:101:38: 101:56
        _17 = move _2;                   // scope 0 at src/lib.rs:101:38: 101:56
        StorageDead(_18);                // scope 3 at src/lib.rs:101:53: 101:54
        _20 = move _17;                  // scope 3 at src/lib.rs:101:40: 101:54
        StorageDead(_17);                // scope 3 at src/lib.rs:101:53: 101:54
        goto -> bb3;                     // scope 3 at src/lib.rs:101:40: 101:54
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:101:38: 101:56
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:101:38: 101:56
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:101:38: 101:56
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:132:33: 132:64]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:132:33: 132:64
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:132:33: 132:64
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:133:27: 133:64
    let mut _4: [static generator@src/lib.rs:133:33: 133:64]; // in scope 0 at src/lib.rs:133:33: 133:64
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:133:27: 133:70
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:133:27: 133:70
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:133:27: 133:70
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:133:27: 133:70
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:133:27: 133:70
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:133:27: 133:70
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:133:27: 133:70
    let mut _12: isize;                  // in scope 0 at src/lib.rs:133:27: 133:70
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:133:27: 133:70
    let mut _15: ();                     // in scope 0 at src/lib.rs:133:27: 133:70
    let mut _16: ();                     // in scope 0 at src/lib.rs:132:33: 132:64
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:132:33: 132:64
    let mut _18: u32;                    // in scope 0 at src/lib.rs:132:33: 132:64
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:132:33: 132:64])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:133:27: 133:70
        let _13: ();                     // in scope 1 at src/lib.rs:133:27: 133:70
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:133:27: 133:70
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:132:33: 132:64]))); // scope 0 at src/lib.rs:132:33: 132:64
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:132:33: 132:64
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:132:33: 132:64
        StorageLive(_3);                 // scope 0 at src/lib.rs:133:27: 133:64
        StorageLive(_4);                 // scope 0 at src/lib.rs:133:33: 133:64
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:133:33: 133:64
        _3 = from_generator::<[static generator@src/lib.rs:133:33: 133:64]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:133:27: 133:64
                                         // mir::Constant
                                         // + span: src/lib.rs:133:33: 133:64
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:133:33: 133:64]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:133:33: 133:64]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:133:63: 133:64
        (((*(_1.0: &mut [static generator@src/lib.rs:132:33: 132:64])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:133:27: 133:70
        goto -> bb3;                     // scope 1 at src/lib.rs:133:27: 133:70
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:133:27: 133:70
        StorageLive(_6);                 // scope 2 at src/lib.rs:133:27: 133:70
        StorageLive(_7);                 // scope 2 at src/lib.rs:133:27: 133:70
        StorageLive(_8);                 // scope 2 at src/lib.rs:133:27: 133:70
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:132:33: 132:64])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:133:27: 133:70
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:133:27: 133:70
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:133:27: 133:70
                                         // mir::Constant
                                         // + span: src/lib.rs:133:27: 133:70
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:133:69: 133:70
        StorageLive(_9);                 // scope 2 at src/lib.rs:133:27: 133:70
        StorageLive(_10);                // scope 2 at src/lib.rs:133:27: 133:70
        StorageLive(_11);                // scope 2 at src/lib.rs:133:27: 133:70
        _11 = _17;                       // scope 2 at src/lib.rs:133:27: 133:70
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:133:27: 133:70
                                         // mir::Constant
                                         // + span: src/lib.rs:133:27: 133:70
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:133:27: 133:70
        StorageDead(_11);                // scope 2 at src/lib.rs:133:69: 133:70
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:133:27: 133:70
                                         // mir::Constant
                                         // + span: src/lib.rs:133:27: 133:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:133:69: 133:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:133:69: 133:70
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:133:27: 133:70
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:133:27: 133:70
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:133:69: 133:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:133:69: 133:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:133:69: 133:70
        StorageLive(_14);                // scope 1 at src/lib.rs:133:27: 133:70
        StorageLive(_15);                // scope 1 at src/lib.rs:133:27: 133:70
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:133:27: 133:70
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:133:27: 133:70
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:132:33: 132:64]))) = 3; // scope 1 at src/lib.rs:133:27: 133:70
        return;                          // scope 1 at src/lib.rs:133:27: 133:70
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:133:27: 133:70
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:133:27: 133:70
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:133:27: 133:70
        _16 = _13;                       // scope 3 at src/lib.rs:133:27: 133:70
        StorageDead(_13);                // scope 1 at src/lib.rs:133:69: 133:70
        StorageDead(_10);                // scope 1 at src/lib.rs:133:69: 133:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:133:69: 133:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:133:69: 133:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:132:33: 132:64])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:133:69: 133:70
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:132:63: 132:64
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:132:64: 132:64
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:132:64: 132:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:132:33: 132:64]))) = 1; // scope 0 at src/lib.rs:132:64: 132:64
        return;                          // scope 0 at src/lib.rs:132:64: 132:64
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:133:69: 133:70
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:133:69: 133:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:133:69: 133:70
        StorageDead(_10);                // scope 1 at src/lib.rs:133:69: 133:70
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:133:69: 133:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:133:69: 133:70
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:133:69: 133:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:133:69: 133:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:132:33: 132:64])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:133:69: 133:70
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:133:63: 133:64
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:132:63: 132:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:132:33: 132:64]))) = 2; // scope 0 at src/lib.rs:132:33: 132:64
        resume;                          // scope 0 at src/lib.rs:132:33: 132:64
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:132:33: 132:64
        StorageLive(_14);                // scope 0 at src/lib.rs:132:33: 132:64
        StorageLive(_15);                // scope 0 at src/lib.rs:132:33: 132:64
        _14 = move _2;                   // scope 0 at src/lib.rs:132:33: 132:64
        StorageDead(_15);                // scope 1 at src/lib.rs:133:69: 133:70
        _17 = move _14;                  // scope 1 at src/lib.rs:133:27: 133:70
        StorageDead(_14);                // scope 1 at src/lib.rs:133:69: 133:70
        goto -> bb3;                     // scope 1 at src/lib.rs:133:27: 133:70
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:132:33: 132:64
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:132:33: 132:64
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:132:33: 132:64
    }
}

fn h2::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:99:38: 99:56]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:99:38: 99:56
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56])).0: &std::string::String); // in scope 0 at src/lib.rs:99:17: 99:18
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56])).1: &u64); // in scope 0 at src/lib.rs:99:29: 99:30
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:99:38: 99:56
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:99:17: 99:18
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:99:40: 99:48
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:99:43: 99:44
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:99:46: 99:47
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:99:40: 99:54
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:99:40: 99:54
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:99:40: 99:54
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:99:40: 99:54
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:99:40: 99:54
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:99:40: 99:54
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:99:40: 99:54
    let mut _15: isize;                  // in scope 0 at src/lib.rs:99:40: 99:54
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:99:40: 99:54
    let mut _18: ();                     // in scope 0 at src/lib.rs:99:40: 99:54
    let mut _19: ();                     // in scope 0 at src/lib.rs:99:38: 99:56
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:99:38: 99:56
    let mut _21: u32;                    // in scope 0 at src/lib.rs:99:38: 99:56
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:99:17: 99:18
        let _4: &u64;                    // in scope 1 at src/lib.rs:99:29: 99:30
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:99:29: 99:30
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:99:40: 99:54
                let _16: ();             // in scope 3 at src/lib.rs:99:40: 99:54
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:99:40: 99:54
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56]))); // scope 0 at src/lib.rs:99:38: 99:56
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:99:38: 99:56
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:99:38: 99:56
        StorageLive(_3);                 // scope 0 at src/lib.rs:99:17: 99:18
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56])).0: &std::string::String); // scope 0 at src/lib.rs:99:17: 99:18
        StorageLive(_4);                 // scope 1 at src/lib.rs:99:29: 99:30
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56])).1: &u64); // scope 1 at src/lib.rs:99:29: 99:30
        StorageLive(_5);                 // scope 2 at src/lib.rs:99:40: 99:48
        StorageLive(_6);                 // scope 2 at src/lib.rs:99:43: 99:44
        _6 = _3;                         // scope 2 at src/lib.rs:99:43: 99:44
        StorageLive(_7);                 // scope 2 at src/lib.rs:99:46: 99:47
        _7 = _4;                         // scope 2 at src/lib.rs:99:46: 99:47
        _5 = h1(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:99:40: 99:48
                                         // mir::Constant
                                         // + span: src/lib.rs:99:40: 99:42
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:99:47: 99:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:99:47: 99:48
        (((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:99:40: 99:54
        goto -> bb3;                     // scope 3 at src/lib.rs:99:40: 99:54
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:99:40: 99:54
        StorageLive(_9);                 // scope 4 at src/lib.rs:99:40: 99:54
        StorageLive(_10);                // scope 4 at src/lib.rs:99:40: 99:54
        StorageLive(_11);                // scope 4 at src/lib.rs:99:40: 99:54
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:99:40: 99:54
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:99:40: 99:54
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:99:40: 99:54
                                         // mir::Constant
                                         // + span: src/lib.rs:99:40: 99:54
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:99:53: 99:54
        StorageLive(_12);                // scope 4 at src/lib.rs:99:40: 99:54
        StorageLive(_13);                // scope 4 at src/lib.rs:99:40: 99:54
        StorageLive(_14);                // scope 4 at src/lib.rs:99:40: 99:54
        _14 = _20;                       // scope 4 at src/lib.rs:99:40: 99:54
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:99:40: 99:54
                                         // mir::Constant
                                         // + span: src/lib.rs:99:40: 99:54
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:99:40: 99:54
        StorageDead(_14);                // scope 4 at src/lib.rs:99:53: 99:54
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:99:40: 99:54
                                         // mir::Constant
                                         // + span: src/lib.rs:99:40: 99:54
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:99:53: 99:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:99:53: 99:54
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:99:40: 99:54
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:99:40: 99:54
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:99:53: 99:54
        StorageDead(_11);                // scope 3 at src/lib.rs:99:53: 99:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:99:53: 99:54
        StorageLive(_17);                // scope 3 at src/lib.rs:99:40: 99:54
        StorageLive(_18);                // scope 3 at src/lib.rs:99:40: 99:54
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:99:40: 99:54
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:99:40: 99:54
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56]))) = 3; // scope 3 at src/lib.rs:99:40: 99:54
        return;                          // scope 3 at src/lib.rs:99:40: 99:54
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:99:40: 99:54
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:99:40: 99:54
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:99:40: 99:54
        _19 = _16;                       // scope 5 at src/lib.rs:99:40: 99:54
        StorageDead(_16);                // scope 3 at src/lib.rs:99:53: 99:54
        StorageDead(_13);                // scope 3 at src/lib.rs:99:53: 99:54
        StorageDead(_11);                // scope 3 at src/lib.rs:99:53: 99:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:99:53: 99:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:99:53: 99:54
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:99:55: 99:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:99:55: 99:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:99:55: 99:56
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:99:56: 99:56
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:99:56: 99:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56]))) = 1; // scope 0 at src/lib.rs:99:56: 99:56
        return;                          // scope 0 at src/lib.rs:99:56: 99:56
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:99:53: 99:54
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:99:53: 99:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:99:53: 99:54
        StorageDead(_13);                // scope 3 at src/lib.rs:99:53: 99:54
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:99:53: 99:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:99:53: 99:54
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:99:53: 99:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:99:53: 99:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:99:53: 99:54
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:99:47: 99:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:99:47: 99:48
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:99:55: 99:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:99:55: 99:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:99:55: 99:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:99:38: 99:56]))) = 2; // scope 0 at src/lib.rs:99:38: 99:56
        resume;                          // scope 0 at src/lib.rs:99:38: 99:56
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:99:38: 99:56
        StorageLive(_4);                 // scope 0 at src/lib.rs:99:38: 99:56
        StorageLive(_5);                 // scope 0 at src/lib.rs:99:38: 99:56
        StorageLive(_17);                // scope 0 at src/lib.rs:99:38: 99:56
        StorageLive(_18);                // scope 0 at src/lib.rs:99:38: 99:56
        _17 = move _2;                   // scope 0 at src/lib.rs:99:38: 99:56
        StorageDead(_18);                // scope 3 at src/lib.rs:99:53: 99:54
        _20 = move _17;                  // scope 3 at src/lib.rs:99:40: 99:54
        StorageDead(_17);                // scope 3 at src/lib.rs:99:53: 99:54
        goto -> bb3;                     // scope 3 at src/lib.rs:99:40: 99:54
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:99:38: 99:56
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:99:38: 99:56
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:99:38: 99:56
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:126:33: 126:64]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:126:33: 126:64
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:126:33: 126:64
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:127:27: 127:64
    let mut _4: [static generator@src/lib.rs:127:33: 127:64]; // in scope 0 at src/lib.rs:127:33: 127:64
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:127:27: 127:70
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:127:27: 127:70
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:127:27: 127:70
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:127:27: 127:70
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:127:27: 127:70
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:127:27: 127:70
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:127:27: 127:70
    let mut _12: isize;                  // in scope 0 at src/lib.rs:127:27: 127:70
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:127:27: 127:70
    let mut _15: ();                     // in scope 0 at src/lib.rs:127:27: 127:70
    let mut _16: ();                     // in scope 0 at src/lib.rs:126:33: 126:64
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:126:33: 126:64
    let mut _18: u32;                    // in scope 0 at src/lib.rs:126:33: 126:64
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:126:33: 126:64])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:127:27: 127:70
        let _13: ();                     // in scope 1 at src/lib.rs:127:27: 127:70
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:127:27: 127:70
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:126:33: 126:64]))); // scope 0 at src/lib.rs:126:33: 126:64
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:126:33: 126:64
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:126:33: 126:64
        StorageLive(_3);                 // scope 0 at src/lib.rs:127:27: 127:64
        StorageLive(_4);                 // scope 0 at src/lib.rs:127:33: 127:64
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:127:33: 127:64
        _3 = from_generator::<[static generator@src/lib.rs:127:33: 127:64]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:127:27: 127:64
                                         // mir::Constant
                                         // + span: src/lib.rs:127:33: 127:64
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:127:33: 127:64]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:127:33: 127:64]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:127:63: 127:64
        (((*(_1.0: &mut [static generator@src/lib.rs:126:33: 126:64])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:127:27: 127:70
        goto -> bb3;                     // scope 1 at src/lib.rs:127:27: 127:70
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:127:27: 127:70
        StorageLive(_6);                 // scope 2 at src/lib.rs:127:27: 127:70
        StorageLive(_7);                 // scope 2 at src/lib.rs:127:27: 127:70
        StorageLive(_8);                 // scope 2 at src/lib.rs:127:27: 127:70
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:126:33: 126:64])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:127:27: 127:70
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:127:27: 127:70
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:127:27: 127:70
                                         // mir::Constant
                                         // + span: src/lib.rs:127:27: 127:70
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:127:69: 127:70
        StorageLive(_9);                 // scope 2 at src/lib.rs:127:27: 127:70
        StorageLive(_10);                // scope 2 at src/lib.rs:127:27: 127:70
        StorageLive(_11);                // scope 2 at src/lib.rs:127:27: 127:70
        _11 = _17;                       // scope 2 at src/lib.rs:127:27: 127:70
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:127:27: 127:70
                                         // mir::Constant
                                         // + span: src/lib.rs:127:27: 127:70
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:127:27: 127:70
        StorageDead(_11);                // scope 2 at src/lib.rs:127:69: 127:70
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:127:27: 127:70
                                         // mir::Constant
                                         // + span: src/lib.rs:127:27: 127:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:127:69: 127:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:127:69: 127:70
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:127:27: 127:70
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:127:27: 127:70
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:127:69: 127:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:127:69: 127:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:127:69: 127:70
        StorageLive(_14);                // scope 1 at src/lib.rs:127:27: 127:70
        StorageLive(_15);                // scope 1 at src/lib.rs:127:27: 127:70
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:127:27: 127:70
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:127:27: 127:70
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:126:33: 126:64]))) = 3; // scope 1 at src/lib.rs:127:27: 127:70
        return;                          // scope 1 at src/lib.rs:127:27: 127:70
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:127:27: 127:70
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:127:27: 127:70
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:127:27: 127:70
        _16 = _13;                       // scope 3 at src/lib.rs:127:27: 127:70
        StorageDead(_13);                // scope 1 at src/lib.rs:127:69: 127:70
        StorageDead(_10);                // scope 1 at src/lib.rs:127:69: 127:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:127:69: 127:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:127:69: 127:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:126:33: 126:64])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:127:69: 127:70
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:126:63: 126:64
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:126:64: 126:64
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:126:64: 126:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:126:33: 126:64]))) = 1; // scope 0 at src/lib.rs:126:64: 126:64
        return;                          // scope 0 at src/lib.rs:126:64: 126:64
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:127:69: 127:70
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:127:69: 127:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:127:69: 127:70
        StorageDead(_10);                // scope 1 at src/lib.rs:127:69: 127:70
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:127:69: 127:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:127:69: 127:70
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:127:69: 127:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:127:69: 127:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:126:33: 126:64])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:127:69: 127:70
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:127:63: 127:64
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:126:63: 126:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:126:33: 126:64]))) = 2; // scope 0 at src/lib.rs:126:33: 126:64
        resume;                          // scope 0 at src/lib.rs:126:33: 126:64
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:126:33: 126:64
        StorageLive(_14);                // scope 0 at src/lib.rs:126:33: 126:64
        StorageLive(_15);                // scope 0 at src/lib.rs:126:33: 126:64
        _14 = move _2;                   // scope 0 at src/lib.rs:126:33: 126:64
        StorageDead(_15);                // scope 1 at src/lib.rs:127:69: 127:70
        _17 = move _14;                  // scope 1 at src/lib.rs:127:27: 127:70
        StorageDead(_14);                // scope 1 at src/lib.rs:127:69: 127:70
        goto -> bb3;                     // scope 1 at src/lib.rs:127:27: 127:70
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:126:33: 126:64
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:126:33: 126:64
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:126:33: 126:64
    }
}

fn h0::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:97:38: 97:65]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _27;          // in scope 0 at src/lib.rs:97:38: 97:65
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:97:38: 97:65])).0: &std::string::String); // in scope 0 at src/lib.rs:97:17: 97:18
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:97:38: 97:65])).1: &u64); // in scope 0 at src/lib.rs:97:29: 97:30
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:97:38: 97:65
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:97:17: 97:18
    let _5: ();                          // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:62
    let mut _6: std::fmt::Arguments;     // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _7: [std::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _8: (&&std::string::String, &&u64); // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _9: &&std::string::String;   // in scope 0 at src/lib.rs:97:58: 97:59
    let mut _10: &&u64;                  // in scope 0 at src/lib.rs:97:61: 97:62
    let mut _13: std::fmt::ArgumentV1;   // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _14: &&std::string::String;  // in scope 0 at src/lib.rs:97:58: 97:59
    let mut _15: for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at src/lib.rs:97:58: 97:59
    let mut _16: std::fmt::ArgumentV1;   // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _17: &&u64;                  // in scope 0 at src/lib.rs:97:61: 97:62
    let mut _18: for<'r, 's, 't0> fn(&'r &u64, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at src/lib.rs:97:61: 97:62
    let mut _20: &[&str];                // in scope 0 at src/lib.rs:97:49: 97:56
    let mut _21: &[&str; 3];             // in scope 0 at src/lib.rs:97:49: 97:56
    let _22: &[&str; 3];                 // in scope 0 at src/lib.rs:97:49: 97:56
    let mut _23: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _24: &[std::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _26: ();                     // in scope 0 at src/lib.rs:97:38: 97:65
    let mut _27: std::future::ResumeTy;  // in scope 0 at src/lib.rs:97:38: 97:65
    let mut _28: u32;                    // in scope 0 at src/lib.rs:97:38: 97:65
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:97:17: 97:18
        let _4: &u64;                    // in scope 1 at src/lib.rs:97:29: 97:30
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:97:29: 97:30
            let _11: &&std::string::String; // in scope 2 at src/lib.rs:97:58: 97:59
            let _12: &&u64;              // in scope 2 at src/lib.rs:97:61: 97:62
            let _19: &[std::fmt::ArgumentV1; 2]; // in scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
            scope 3 {
                debug arg0 => _11;       // in scope 3 at src/lib.rs:97:58: 97:59
                debug arg1 => _12;       // in scope 3 at src/lib.rs:97:61: 97:62
            }
            scope 4 {
                debug args => _19;       // in scope 4 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                scope 5 {
                    let mut _25: &[&str; 3]; // in scope 5 at src/lib.rs:97:49: 97:56
                }
            }
        }
    }

    bb0: {
        _28 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:97:38: 97:65]))); // scope 0 at src/lib.rs:97:38: 97:65
        switchInt(move _28) -> [0_u32: bb1, 1_u32: bb8, 2_u32: bb7, otherwise: bb9]; // scope 0 at src/lib.rs:97:38: 97:65
    }

    bb1: {
        _27 = move _2;                   // scope 0 at src/lib.rs:97:38: 97:65
        StorageLive(_3);                 // scope 0 at src/lib.rs:97:17: 97:18
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:97:38: 97:65])).0: &std::string::String); // scope 0 at src/lib.rs:97:17: 97:18
        StorageLive(_4);                 // scope 1 at src/lib.rs:97:29: 97:30
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:97:38: 97:65])).1: &u64); // scope 1 at src/lib.rs:97:29: 97:30
        StorageLive(_5);                 // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:62
        StorageLive(_6);                 // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_7);                 // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_8);                 // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_9);                 // scope 2 at src/lib.rs:97:58: 97:59
        _9 = &_3;                        // scope 2 at src/lib.rs:97:58: 97:59
        StorageLive(_10);                // scope 2 at src/lib.rs:97:61: 97:62
        _10 = &_4;                       // scope 2 at src/lib.rs:97:61: 97:62
        (_8.0: &&std::string::String) = move _9; // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        (_8.1: &&u64) = move _10;        // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageDead(_10);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_9);                 // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageLive(_11);                // scope 2 at src/lib.rs:97:58: 97:59
        _11 = (_8.0: &&std::string::String); // scope 2 at src/lib.rs:97:58: 97:59
        StorageLive(_12);                // scope 2 at src/lib.rs:97:61: 97:62
        _12 = (_8.1: &&u64);             // scope 2 at src/lib.rs:97:61: 97:62
        StorageLive(_13);                // scope 3 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_14);                // scope 3 at src/lib.rs:97:58: 97:59
        _14 = _11;                       // scope 3 at src/lib.rs:97:58: 97:59
        StorageLive(_15);                // scope 3 at src/lib.rs:97:58: 97:59
        _15 = <&String as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 3 at src/lib.rs:97:58: 97:59
                                         // mir::Constant
                                         // + span: src/lib.rs:97:58: 97:59
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&std::string::String as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _13 = ArgumentV1::new::<&String>(move _14, move _15) -> [return: bb2, unwind: bb6]; // scope 3 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b> fn(&'b &std::string::String, for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<&std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_15);                // scope 3 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_14);                // scope 3 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageLive(_16);                // scope 3 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_17);                // scope 3 at src/lib.rs:97:61: 97:62
        _17 = _12;                       // scope 3 at src/lib.rs:97:61: 97:62
        StorageLive(_18);                // scope 3 at src/lib.rs:97:61: 97:62
        _18 = <&u64 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r &u64, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 3 at src/lib.rs:97:61: 97:62
                                         // mir::Constant
                                         // + span: src/lib.rs:97:61: 97:62
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &u64, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&u64 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _16 = ArgumentV1::new::<&u64>(move _17, move _18) -> [return: bb3, unwind: bb6]; // scope 3 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &u64, for<'r, 's, 't0> fn(&'r &u64, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<&u64>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_18);                // scope 3 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_17);                // scope 3 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        _7 = [move _13, move _16];       // scope 3 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageDead(_16);                // scope 3 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_13);                // scope 3 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_12);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_11);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageLive(_19);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        _19 = &_7;                       // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_20);                // scope 5 at src/lib.rs:97:49: 97:56
        StorageLive(_21);                // scope 5 at src/lib.rs:97:49: 97:56
        StorageLive(_22);                // scope 5 at src/lib.rs:97:49: 97:56
        _25 = const h0::{closure#0}::promoted[0]; // scope 5 at src/lib.rs:97:49: 97:56
                                         // ty::Const
                                         // + ty: &[&str; 3]
                                         // + val: Unevaluated(h0::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: src/lib.rs:97:49: 97:56
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:15 ~ deeply_nested_multi[cdc4]::h0::{closure#0}), const_param_did: None }, substs_: Some([<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>]), promoted: Some(promoted[0]) }) }
        _22 = _25;                       // scope 5 at src/lib.rs:97:49: 97:56
        _21 = _22;                       // scope 5 at src/lib.rs:97:49: 97:56
        _20 = move _21 as &[&str] (Pointer(Unsize)); // scope 5 at src/lib.rs:97:49: 97:56
        StorageDead(_21);                // scope 5 at src/lib.rs:97:55: 97:56
        StorageLive(_23);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_24);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        _24 = _19;                       // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        _23 = move _24 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageDead(_24);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        _6 = Arguments::new_v1(move _20, move _23) -> [return: bb4, unwind: bb6]; // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_23);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_20);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_22);                // scope 4 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_19);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        _5 = _print(move _6) -> [return: bb5, unwind: bb6]; // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_6);                 // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:61: 97:62
        StorageDead(_8);                 // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:62: 97:63
        StorageDead(_7);                 // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:62: 97:63
        StorageDead(_5);                 // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:62: 97:63
        _26 = const ();                  // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:96:23: 98:6
        StorageDead(_4);                 // scope 1 at src/lib.rs:97:64: 97:65
        StorageDead(_3);                 // scope 0 at src/lib.rs:97:64: 97:65
        ((_0 as Complete).0: ()) = move _26; // scope 0 at src/lib.rs:97:65: 97:65
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:97:65: 97:65
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:97:38: 97:65]))) = 1; // scope 0 at src/lib.rs:97:65: 97:65
        return;                          // scope 0 at src/lib.rs:97:65: 97:65
    }

    bb6 (cleanup): {
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:97:38: 97:65]))) = 2; // scope 0 at src/lib.rs:97:38: 97:65
        resume;                          // scope 0 at src/lib.rs:97:38: 97:65
    }

    bb7: {
        assert(const false, "`async fn` resumed after panicking") -> bb7; // scope 0 at src/lib.rs:97:38: 97:65
    }

    bb8: {
        assert(const false, "`async fn` resumed after completion") -> bb8; // scope 0 at src/lib.rs:97:38: 97:65
    }

    bb9: {
        unreachable;                     // scope 0 at src/lib.rs:97:38: 97:65
    }
}

promoted[0] in h0::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at src/lib.rs:97:49: 97:56
    let mut _1: [&str; 3];               // in scope 0 at src/lib.rs:97:49: 97:56

    bb0: {
        _1 = [const "", const " ", const "\n"]; // scope 0 at src/lib.rs:97:49: 97:56
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })
                                         // mir::Constant
                                         // + span: src/lib.rs:97:49: 97:56
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/lib.rs:97:49: 97:56
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/lib.rs:97:49: 97:56
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at src/lib.rs:97:49: 97:56
        return;                          // scope 0 at src/lib.rs:97:49: 97:56
    }
}

fn f::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:138:14: 140:2]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:138:14: 140:2
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:138:14: 140:2
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:121:28: 121:66
    let mut _4: [static generator@src/lib.rs:121:34: 121:66]; // in scope 0 at src/lib.rs:121:34: 121:66
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:121:28: 121:72
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:121:28: 121:72
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:121:28: 121:72
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:121:28: 121:72
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:121:28: 121:72
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:121:28: 121:72
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:121:28: 121:72
    let mut _12: isize;                  // in scope 0 at src/lib.rs:121:28: 121:72
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:121:28: 121:72
    let mut _15: ();                     // in scope 0 at src/lib.rs:121:28: 121:72
    let mut _16: ();                     // in scope 0 at src/lib.rs:138:14: 140:2
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:138:14: 140:2
    let mut _18: u32;                    // in scope 0 at src/lib.rs:138:14: 140:2
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:138:14: 140:2])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:121:28: 121:72
        let _13: ();                     // in scope 1 at src/lib.rs:121:28: 121:72
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:121:28: 121:72
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:138:14: 140:2]))); // scope 0 at src/lib.rs:138:14: 140:2
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:138:14: 140:2
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:138:14: 140:2
        StorageLive(_3);                 // scope 0 at src/lib.rs:121:28: 121:66
        StorageLive(_4);                 // scope 0 at src/lib.rs:121:34: 121:66
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:121:34: 121:66
        _3 = from_generator::<[static generator@src/lib.rs:121:34: 121:66]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:121:28: 121:66
                                         // mir::Constant
                                         // + span: src/lib.rs:121:34: 121:66
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:121:34: 121:66]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:121:34: 121:66]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:121:65: 121:66
        (((*(_1.0: &mut [static generator@src/lib.rs:138:14: 140:2])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:121:28: 121:72
        goto -> bb3;                     // scope 1 at src/lib.rs:121:28: 121:72
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:121:28: 121:72
        StorageLive(_6);                 // scope 2 at src/lib.rs:121:28: 121:72
        StorageLive(_7);                 // scope 2 at src/lib.rs:121:28: 121:72
        StorageLive(_8);                 // scope 2 at src/lib.rs:121:28: 121:72
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:138:14: 140:2])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:121:28: 121:72
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:121:28: 121:72
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:121:28: 121:72
                                         // mir::Constant
                                         // + span: src/lib.rs:121:28: 121:72
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:121:71: 121:72
        StorageLive(_9);                 // scope 2 at src/lib.rs:121:28: 121:72
        StorageLive(_10);                // scope 2 at src/lib.rs:121:28: 121:72
        StorageLive(_11);                // scope 2 at src/lib.rs:121:28: 121:72
        _11 = _17;                       // scope 2 at src/lib.rs:121:28: 121:72
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:121:28: 121:72
                                         // mir::Constant
                                         // + span: src/lib.rs:121:28: 121:72
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:121:28: 121:72
        StorageDead(_11);                // scope 2 at src/lib.rs:121:71: 121:72
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:121:28: 121:72
                                         // mir::Constant
                                         // + span: src/lib.rs:121:28: 121:72
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:121:71: 121:72
        StorageDead(_6);                 // scope 2 at src/lib.rs:121:71: 121:72
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:121:28: 121:72
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:121:28: 121:72
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:121:71: 121:72
        StorageDead(_8);                 // scope 1 at src/lib.rs:121:71: 121:72
        StorageDead(_5);                 // scope 1 at src/lib.rs:121:71: 121:72
        StorageLive(_14);                // scope 1 at src/lib.rs:121:28: 121:72
        StorageLive(_15);                // scope 1 at src/lib.rs:121:28: 121:72
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:121:28: 121:72
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:121:28: 121:72
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:138:14: 140:2]))) = 3; // scope 1 at src/lib.rs:121:28: 121:72
        return;                          // scope 1 at src/lib.rs:121:28: 121:72
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:121:28: 121:72
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:121:28: 121:72
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:121:28: 121:72
        StorageDead(_13);                // scope 1 at src/lib.rs:121:71: 121:72
        StorageDead(_10);                // scope 1 at src/lib.rs:121:71: 121:72
        StorageDead(_8);                 // scope 1 at src/lib.rs:121:71: 121:72
        StorageDead(_5);                 // scope 1 at src/lib.rs:121:71: 121:72
        drop((((*(_1.0: &mut [static generator@src/lib.rs:138:14: 140:2])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:121:71: 121:72
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:121:71: 121:72
        _16 = const ();                  // scope 0 at src/lib.rs:138:14: 140:2
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:140:2: 140:2
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:140:2: 140:2
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:138:14: 140:2]))) = 1; // scope 0 at src/lib.rs:140:2: 140:2
        return;                          // scope 0 at src/lib.rs:140:2: 140:2
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:121:71: 121:72
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:121:71: 121:72
        StorageDead(_6);                 // scope 2 at src/lib.rs:121:71: 121:72
        StorageDead(_10);                // scope 1 at src/lib.rs:121:71: 121:72
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:121:71: 121:72
        StorageDead(_6);                 // scope 2 at src/lib.rs:121:71: 121:72
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:121:71: 121:72
        StorageDead(_5);                 // scope 1 at src/lib.rs:121:71: 121:72
        drop((((*(_1.0: &mut [static generator@src/lib.rs:138:14: 140:2])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:121:71: 121:72
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:121:65: 121:66
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:121:71: 121:72
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:138:14: 140:2]))) = 2; // scope 0 at src/lib.rs:138:14: 140:2
        resume;                          // scope 0 at src/lib.rs:138:14: 140:2
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:138:14: 140:2
        StorageLive(_14);                // scope 0 at src/lib.rs:138:14: 140:2
        StorageLive(_15);                // scope 0 at src/lib.rs:138:14: 140:2
        _14 = move _2;                   // scope 0 at src/lib.rs:138:14: 140:2
        StorageDead(_15);                // scope 1 at src/lib.rs:121:71: 121:72
        _17 = move _14;                  // scope 1 at src/lib.rs:121:28: 121:72
        StorageDead(_14);                // scope 1 at src/lib.rs:121:71: 121:72
        goto -> bb3;                     // scope 1 at src/lib.rs:121:28: 121:72
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:138:14: 140:2
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:138:14: 140:2
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:138:14: 140:2
    }
}

fn h19(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:117:18: 117:19
    debug x => _2;                       // in scope 0 at src/lib.rs:117:30: 117:31
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:117:39: 117:39
    let mut _3: [static generator@src/lib.rs:117:39: 117:58]; // in scope 0 at src/lib.rs:117:39: 117:58

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:117:39: 117:58
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:117:39: 117:58
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:117:39: 117:58
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:117:39: 117:58
        _0 = from_generator::<[static generator@src/lib.rs:117:39: 117:58]>(move _3) -> bb1; // scope 0 at src/lib.rs:117:39: 117:58
                                         // mir::Constant
                                         // + span: src/lib.rs:117:39: 117:58
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:117:39: 117:58]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:117:39: 117:58]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:117:57: 117:58
        return;                          // scope 0 at src/lib.rs:117:58: 117:58
    }
}

fn foo1() -> Box<dyn Iterator<Item = ()>> {
    let mut _0: std::boxed::Box<dyn std::iter::Iterator<Item = ()>>; // return place in scope 0 at src/lib.rs:20:18: 20:46
    let mut _1: std::boxed::Box<dyn std::iter::Iterator<Item = ()>>; // in scope 0 at src/lib.rs:23:5: 40:6
    let mut _2: std::boxed::Box<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>>; // in scope 0 at src/lib.rs:23:5: 40:6
    let mut _3: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 39:24
    let mut _4: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 38:24
    let mut _5: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 37:24
    let mut _6: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 36:24
    let mut _7: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 35:24
    let mut _8: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 34:24
    let mut _9: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 33:24
    let mut _10: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 32:24
    let mut _11: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 31:24
    let mut _12: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 30:24
    let mut _13: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 29:24
    let mut _14: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 28:24
    let mut _15: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 27:24
    let mut _16: std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 26:24
    let mut _17: std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 25:24
    let mut _18: std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>; // in scope 0 at src/lib.rs:23:14: 24:24
    let mut _19: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:23:14: 23:21
    let mut _20: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:24:16: 24:23
    let mut _21: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:25:16: 25:23
    let mut _22: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:26:16: 26:23
    let mut _23: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:27:16: 27:23
    let mut _24: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:28:16: 28:23
    let mut _25: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:29:16: 29:23
    let mut _26: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:30:16: 30:23
    let mut _27: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:31:16: 31:23
    let mut _28: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:32:16: 32:23
    let mut _29: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:33:16: 33:23
    let mut _30: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:34:16: 34:23
    let mut _31: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:35:16: 35:23
    let mut _32: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:36:16: 36:23
    let mut _33: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:37:16: 37:23
    let mut _34: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:38:16: 38:23
    let mut _35: std::iter::Empty<()>;   // in scope 0 at src/lib.rs:39:16: 39:23

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:23:5: 40:6
        StorageLive(_2);                 // scope 0 at src/lib.rs:23:5: 40:6
        StorageLive(_3);                 // scope 0 at src/lib.rs:23:14: 39:24
        StorageLive(_4);                 // scope 0 at src/lib.rs:23:14: 38:24
        StorageLive(_5);                 // scope 0 at src/lib.rs:23:14: 37:24
        StorageLive(_6);                 // scope 0 at src/lib.rs:23:14: 36:24
        StorageLive(_7);                 // scope 0 at src/lib.rs:23:14: 35:24
        StorageLive(_8);                 // scope 0 at src/lib.rs:23:14: 34:24
        StorageLive(_9);                 // scope 0 at src/lib.rs:23:14: 33:24
        StorageLive(_10);                // scope 0 at src/lib.rs:23:14: 32:24
        StorageLive(_11);                // scope 0 at src/lib.rs:23:14: 31:24
        StorageLive(_12);                // scope 0 at src/lib.rs:23:14: 30:24
        StorageLive(_13);                // scope 0 at src/lib.rs:23:14: 29:24
        StorageLive(_14);                // scope 0 at src/lib.rs:23:14: 28:24
        StorageLive(_15);                // scope 0 at src/lib.rs:23:14: 27:24
        StorageLive(_16);                // scope 0 at src/lib.rs:23:14: 26:24
        StorageLive(_17);                // scope 0 at src/lib.rs:23:14: 25:24
        StorageLive(_18);                // scope 0 at src/lib.rs:23:14: 24:24
        StorageLive(_19);                // scope 0 at src/lib.rs:23:14: 23:21
        _19 = std::iter::empty::<()>() -> bb1; // scope 0 at src/lib.rs:23:14: 23:21
                                         // mir::Constant
                                         // + span: src/lib.rs:23:14: 23:19
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageLive(_20);                // scope 0 at src/lib.rs:24:16: 24:23
        _20 = std::iter::empty::<()>() -> bb2; // scope 0 at src/lib.rs:24:16: 24:23
                                         // mir::Constant
                                         // + span: src/lib.rs:24:16: 24:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _18 = <std::iter::Empty<()> as Iterator>::chain::<std::iter::Empty<()>>(move _19, move _20) -> bb3; // scope 0 at src/lib.rs:23:14: 24:24
                                         // mir::Constant
                                         // + span: src/lib.rs:24:10: 24:15
                                         // + literal: Const { ty: fn(std::iter::Empty<()>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Empty<()>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Empty<()> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_20);                // scope 0 at src/lib.rs:24:23: 24:24
        StorageDead(_19);                // scope 0 at src/lib.rs:24:23: 24:24
        StorageLive(_21);                // scope 0 at src/lib.rs:25:16: 25:23
        _21 = std::iter::empty::<()>() -> bb4; // scope 0 at src/lib.rs:25:16: 25:23
                                         // mir::Constant
                                         // + span: src/lib.rs:25:16: 25:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _17 = <std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _18, move _21) -> bb5; // scope 0 at src/lib.rs:23:14: 25:24
                                         // mir::Constant
                                         // + span: src/lib.rs:25:10: 25:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_21);                // scope 0 at src/lib.rs:25:23: 25:24
        StorageDead(_18);                // scope 0 at src/lib.rs:25:23: 25:24
        StorageLive(_22);                // scope 0 at src/lib.rs:26:16: 26:23
        _22 = std::iter::empty::<()>() -> bb6; // scope 0 at src/lib.rs:26:16: 26:23
                                         // mir::Constant
                                         // + span: src/lib.rs:26:16: 26:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _16 = <std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _17, move _22) -> bb7; // scope 0 at src/lib.rs:23:14: 26:24
                                         // mir::Constant
                                         // + span: src/lib.rs:26:10: 26:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_22);                // scope 0 at src/lib.rs:26:23: 26:24
        StorageDead(_17);                // scope 0 at src/lib.rs:26:23: 26:24
        StorageLive(_23);                // scope 0 at src/lib.rs:27:16: 27:23
        _23 = std::iter::empty::<()>() -> bb8; // scope 0 at src/lib.rs:27:16: 27:23
                                         // mir::Constant
                                         // + span: src/lib.rs:27:16: 27:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _15 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _16, move _23) -> bb9; // scope 0 at src/lib.rs:23:14: 27:24
                                         // mir::Constant
                                         // + span: src/lib.rs:27:10: 27:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_23);                // scope 0 at src/lib.rs:27:23: 27:24
        StorageDead(_16);                // scope 0 at src/lib.rs:27:23: 27:24
        StorageLive(_24);                // scope 0 at src/lib.rs:28:16: 28:23
        _24 = std::iter::empty::<()>() -> bb10; // scope 0 at src/lib.rs:28:16: 28:23
                                         // mir::Constant
                                         // + span: src/lib.rs:28:16: 28:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _14 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _15, move _24) -> bb11; // scope 0 at src/lib.rs:23:14: 28:24
                                         // mir::Constant
                                         // + span: src/lib.rs:28:10: 28:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_24);                // scope 0 at src/lib.rs:28:23: 28:24
        StorageDead(_15);                // scope 0 at src/lib.rs:28:23: 28:24
        StorageLive(_25);                // scope 0 at src/lib.rs:29:16: 29:23
        _25 = std::iter::empty::<()>() -> bb12; // scope 0 at src/lib.rs:29:16: 29:23
                                         // mir::Constant
                                         // + span: src/lib.rs:29:16: 29:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _13 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _14, move _25) -> bb13; // scope 0 at src/lib.rs:23:14: 29:24
                                         // mir::Constant
                                         // + span: src/lib.rs:29:10: 29:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_25);                // scope 0 at src/lib.rs:29:23: 29:24
        StorageDead(_14);                // scope 0 at src/lib.rs:29:23: 29:24
        StorageLive(_26);                // scope 0 at src/lib.rs:30:16: 30:23
        _26 = std::iter::empty::<()>() -> bb14; // scope 0 at src/lib.rs:30:16: 30:23
                                         // mir::Constant
                                         // + span: src/lib.rs:30:16: 30:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _12 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _13, move _26) -> bb15; // scope 0 at src/lib.rs:23:14: 30:24
                                         // mir::Constant
                                         // + span: src/lib.rs:30:10: 30:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_26);                // scope 0 at src/lib.rs:30:23: 30:24
        StorageDead(_13);                // scope 0 at src/lib.rs:30:23: 30:24
        StorageLive(_27);                // scope 0 at src/lib.rs:31:16: 31:23
        _27 = std::iter::empty::<()>() -> bb16; // scope 0 at src/lib.rs:31:16: 31:23
                                         // mir::Constant
                                         // + span: src/lib.rs:31:16: 31:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _11 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _12, move _27) -> bb17; // scope 0 at src/lib.rs:23:14: 31:24
                                         // mir::Constant
                                         // + span: src/lib.rs:31:10: 31:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_27);                // scope 0 at src/lib.rs:31:23: 31:24
        StorageDead(_12);                // scope 0 at src/lib.rs:31:23: 31:24
        StorageLive(_28);                // scope 0 at src/lib.rs:32:16: 32:23
        _28 = std::iter::empty::<()>() -> bb18; // scope 0 at src/lib.rs:32:16: 32:23
                                         // mir::Constant
                                         // + span: src/lib.rs:32:16: 32:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        _10 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _11, move _28) -> bb19; // scope 0 at src/lib.rs:23:14: 32:24
                                         // mir::Constant
                                         // + span: src/lib.rs:32:10: 32:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_28);                // scope 0 at src/lib.rs:32:23: 32:24
        StorageDead(_11);                // scope 0 at src/lib.rs:32:23: 32:24
        StorageLive(_29);                // scope 0 at src/lib.rs:33:16: 33:23
        _29 = std::iter::empty::<()>() -> bb20; // scope 0 at src/lib.rs:33:16: 33:23
                                         // mir::Constant
                                         // + span: src/lib.rs:33:16: 33:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _9 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _10, move _29) -> bb21; // scope 0 at src/lib.rs:23:14: 33:24
                                         // mir::Constant
                                         // + span: src/lib.rs:33:10: 33:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        StorageDead(_29);                // scope 0 at src/lib.rs:33:23: 33:24
        StorageDead(_10);                // scope 0 at src/lib.rs:33:23: 33:24
        StorageLive(_30);                // scope 0 at src/lib.rs:34:16: 34:23
        _30 = std::iter::empty::<()>() -> bb22; // scope 0 at src/lib.rs:34:16: 34:23
                                         // mir::Constant
                                         // + span: src/lib.rs:34:16: 34:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        _8 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _9, move _30) -> bb23; // scope 0 at src/lib.rs:23:14: 34:24
                                         // mir::Constant
                                         // + span: src/lib.rs:34:10: 34:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        StorageDead(_30);                // scope 0 at src/lib.rs:34:23: 34:24
        StorageDead(_9);                 // scope 0 at src/lib.rs:34:23: 34:24
        StorageLive(_31);                // scope 0 at src/lib.rs:35:16: 35:23
        _31 = std::iter::empty::<()>() -> bb24; // scope 0 at src/lib.rs:35:16: 35:23
                                         // mir::Constant
                                         // + span: src/lib.rs:35:16: 35:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        _7 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _8, move _31) -> bb25; // scope 0 at src/lib.rs:23:14: 35:24
                                         // mir::Constant
                                         // + span: src/lib.rs:35:10: 35:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        StorageDead(_31);                // scope 0 at src/lib.rs:35:23: 35:24
        StorageDead(_8);                 // scope 0 at src/lib.rs:35:23: 35:24
        StorageLive(_32);                // scope 0 at src/lib.rs:36:16: 36:23
        _32 = std::iter::empty::<()>() -> bb26; // scope 0 at src/lib.rs:36:16: 36:23
                                         // mir::Constant
                                         // + span: src/lib.rs:36:16: 36:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        _6 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _7, move _32) -> bb27; // scope 0 at src/lib.rs:23:14: 36:24
                                         // mir::Constant
                                         // + span: src/lib.rs:36:10: 36:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb27: {
        StorageDead(_32);                // scope 0 at src/lib.rs:36:23: 36:24
        StorageDead(_7);                 // scope 0 at src/lib.rs:36:23: 36:24
        StorageLive(_33);                // scope 0 at src/lib.rs:37:16: 37:23
        _33 = std::iter::empty::<()>() -> bb28; // scope 0 at src/lib.rs:37:16: 37:23
                                         // mir::Constant
                                         // + span: src/lib.rs:37:16: 37:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        _5 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _6, move _33) -> bb29; // scope 0 at src/lib.rs:23:14: 37:24
                                         // mir::Constant
                                         // + span: src/lib.rs:37:10: 37:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb29: {
        StorageDead(_33);                // scope 0 at src/lib.rs:37:23: 37:24
        StorageDead(_6);                 // scope 0 at src/lib.rs:37:23: 37:24
        StorageLive(_34);                // scope 0 at src/lib.rs:38:16: 38:23
        _34 = std::iter::empty::<()>() -> bb30; // scope 0 at src/lib.rs:38:16: 38:23
                                         // mir::Constant
                                         // + span: src/lib.rs:38:16: 38:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb30: {
        _4 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _5, move _34) -> bb31; // scope 0 at src/lib.rs:23:14: 38:24
                                         // mir::Constant
                                         // + span: src/lib.rs:38:10: 38:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb31: {
        StorageDead(_34);                // scope 0 at src/lib.rs:38:23: 38:24
        StorageDead(_5);                 // scope 0 at src/lib.rs:38:23: 38:24
        StorageLive(_35);                // scope 0 at src/lib.rs:39:16: 39:23
        _35 = std::iter::empty::<()>() -> bb32; // scope 0 at src/lib.rs:39:16: 39:23
                                         // mir::Constant
                                         // + span: src/lib.rs:39:16: 39:21
                                         // + literal: Const { ty: fn() -> std::iter::Empty<()> {std::iter::empty::<()>}, val: Value(Scalar(<ZST>)) }
    }

    bb32: {
        _3 = <std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as Iterator>::chain::<std::iter::Empty<()>>(move _4, move _35) -> bb33; // scope 0 at src/lib.rs:23:14: 39:24
                                         // mir::Constant
                                         // + span: src/lib.rs:39:10: 39:15
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>) -> std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, <std::iter::Empty<()> as std::iter::IntoIterator>::IntoIter> {<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>> as std::iter::Iterator>::chain::<std::iter::Empty<()>>}, val: Value(Scalar(<ZST>)) }
    }

    bb33: {
        StorageDead(_35);                // scope 0 at src/lib.rs:39:23: 39:24
        StorageDead(_4);                 // scope 0 at src/lib.rs:39:23: 39:24
        _2 = Box::<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>>::new(move _3) -> bb34; // scope 0 at src/lib.rs:23:5: 40:6
                                         // mir::Constant
                                         // + span: src/lib.rs:23:5: 23:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>) -> std::boxed::Box<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>> {std::boxed::Box::<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Chain<std::iter::Empty<()>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>, std::iter::Empty<()>>>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        _1 = move _2 as std::boxed::Box<dyn std::iter::Iterator<Item = ()>> (Pointer(Unsize)); // scope 0 at src/lib.rs:23:5: 40:6
        StorageDead(_3);                 // scope 0 at src/lib.rs:40:5: 40:6
        StorageDead(_2);                 // scope 0 at src/lib.rs:40:5: 40:6
        _0 = move _1 as std::boxed::Box<dyn std::iter::Iterator<Item = ()>> (Pointer(Unsize)); // scope 0 at src/lib.rs:23:5: 40:6
        StorageDead(_1);                 // scope 0 at src/lib.rs:41:1: 41:2
        return;                          // scope 0 at src/lib.rs:41:2: 41:2
    }
}

fn h17(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:115:18: 115:19
    debug x => _2;                       // in scope 0 at src/lib.rs:115:30: 115:31
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:115:39: 115:39
    let mut _3: [static generator@src/lib.rs:115:39: 115:58]; // in scope 0 at src/lib.rs:115:39: 115:58

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:115:39: 115:58
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:115:39: 115:58
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:115:39: 115:58
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:115:39: 115:58
        _0 = from_generator::<[static generator@src/lib.rs:115:39: 115:58]>(move _3) -> bb1; // scope 0 at src/lib.rs:115:39: 115:58
                                         // mir::Constant
                                         // + span: src/lib.rs:115:39: 115:58
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:115:39: 115:58]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:115:39: 115:58]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:115:57: 115:58
        return;                          // scope 0 at src/lib.rs:115:58: 115:58
    }
}

fn h15(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:113:18: 113:19
    debug x => _2;                       // in scope 0 at src/lib.rs:113:30: 113:31
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:113:39: 113:39
    let mut _3: [static generator@src/lib.rs:113:39: 113:58]; // in scope 0 at src/lib.rs:113:39: 113:58

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:113:39: 113:58
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:113:39: 113:58
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:113:39: 113:58
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:113:39: 113:58
        _0 = from_generator::<[static generator@src/lib.rs:113:39: 113:58]>(move _3) -> bb1; // scope 0 at src/lib.rs:113:39: 113:58
                                         // mir::Constant
                                         // + span: src/lib.rs:113:39: 113:58
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:113:39: 113:58]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:113:39: 113:58]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:113:57: 113:58
        return;                          // scope 0 at src/lib.rs:113:58: 113:58
    }
}

fn h13(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:111:18: 111:19
    debug x => _2;                       // in scope 0 at src/lib.rs:111:30: 111:31
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:111:39: 111:39
    let mut _3: [static generator@src/lib.rs:111:39: 111:58]; // in scope 0 at src/lib.rs:111:39: 111:58

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:111:39: 111:58
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:111:39: 111:58
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:111:39: 111:58
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:111:39: 111:58
        _0 = from_generator::<[static generator@src/lib.rs:111:39: 111:58]>(move _3) -> bb1; // scope 0 at src/lib.rs:111:39: 111:58
                                         // mir::Constant
                                         // + span: src/lib.rs:111:39: 111:58
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:111:39: 111:58]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:111:39: 111:58]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:111:57: 111:58
        return;                          // scope 0 at src/lib.rs:111:58: 111:58
    }
}

fn h11(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:109:18: 109:19
    debug x => _2;                       // in scope 0 at src/lib.rs:109:30: 109:31
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:109:39: 109:39
    let mut _3: [static generator@src/lib.rs:109:39: 109:58]; // in scope 0 at src/lib.rs:109:39: 109:58

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:109:39: 109:58
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:109:39: 109:58
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:109:39: 109:58
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:109:39: 109:58
        _0 = from_generator::<[static generator@src/lib.rs:109:39: 109:58]>(move _3) -> bb1; // scope 0 at src/lib.rs:109:39: 109:58
                                         // mir::Constant
                                         // + span: src/lib.rs:109:39: 109:58
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:109:39: 109:58]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:109:39: 109:58]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:109:57: 109:58
        return;                          // scope 0 at src/lib.rs:109:58: 109:58
    }
}

fn h9(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:106:17: 106:18
    debug x => _2;                       // in scope 0 at src/lib.rs:106:29: 106:30
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:106:38: 106:38
    let mut _3: [static generator@src/lib.rs:106:38: 106:56]; // in scope 0 at src/lib.rs:106:38: 106:56

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:106:38: 106:56
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:106:38: 106:56
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:106:38: 106:56
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:106:38: 106:56
        _0 = from_generator::<[static generator@src/lib.rs:106:38: 106:56]>(move _3) -> bb1; // scope 0 at src/lib.rs:106:38: 106:56
                                         // mir::Constant
                                         // + span: src/lib.rs:106:38: 106:56
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:106:38: 106:56]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:106:38: 106:56]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:106:55: 106:56
        return;                          // scope 0 at src/lib.rs:106:56: 106:56
    }
}

fn h7(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:104:17: 104:18
    debug x => _2;                       // in scope 0 at src/lib.rs:104:29: 104:30
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:104:38: 104:38
    let mut _3: [static generator@src/lib.rs:104:38: 104:56]; // in scope 0 at src/lib.rs:104:38: 104:56

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:104:38: 104:56
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:104:38: 104:56
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:104:38: 104:56
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:104:38: 104:56
        _0 = from_generator::<[static generator@src/lib.rs:104:38: 104:56]>(move _3) -> bb1; // scope 0 at src/lib.rs:104:38: 104:56
                                         // mir::Constant
                                         // + span: src/lib.rs:104:38: 104:56
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:104:38: 104:56]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:104:38: 104:56]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:104:55: 104:56
        return;                          // scope 0 at src/lib.rs:104:56: 104:56
    }
}

fn h5(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:102:17: 102:18
    debug x => _2;                       // in scope 0 at src/lib.rs:102:29: 102:30
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:102:38: 102:38
    let mut _3: [static generator@src/lib.rs:102:38: 102:56]; // in scope 0 at src/lib.rs:102:38: 102:56

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:102:38: 102:56
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:102:38: 102:56
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:102:38: 102:56
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:102:38: 102:56
        _0 = from_generator::<[static generator@src/lib.rs:102:38: 102:56]>(move _3) -> bb1; // scope 0 at src/lib.rs:102:38: 102:56
                                         // mir::Constant
                                         // + span: src/lib.rs:102:38: 102:56
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:102:38: 102:56]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:102:38: 102:56]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:102:55: 102:56
        return;                          // scope 0 at src/lib.rs:102:56: 102:56
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:133:33: 133:64]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:133:33: 133:64
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:133:33: 133:64
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:134:27: 134:64
    let mut _4: [static generator@src/lib.rs:134:33: 134:64]; // in scope 0 at src/lib.rs:134:33: 134:64
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:134:27: 134:70
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:134:27: 134:70
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:134:27: 134:70
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:134:27: 134:70
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:134:27: 134:70
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:134:27: 134:70
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:134:27: 134:70
    let mut _12: isize;                  // in scope 0 at src/lib.rs:134:27: 134:70
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:134:27: 134:70
    let mut _15: ();                     // in scope 0 at src/lib.rs:134:27: 134:70
    let mut _16: ();                     // in scope 0 at src/lib.rs:133:33: 133:64
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:133:33: 133:64
    let mut _18: u32;                    // in scope 0 at src/lib.rs:133:33: 133:64
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:133:33: 133:64])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:134:27: 134:70
        let _13: ();                     // in scope 1 at src/lib.rs:134:27: 134:70
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:134:27: 134:70
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:133:33: 133:64]))); // scope 0 at src/lib.rs:133:33: 133:64
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:133:33: 133:64
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:133:33: 133:64
        StorageLive(_3);                 // scope 0 at src/lib.rs:134:27: 134:64
        StorageLive(_4);                 // scope 0 at src/lib.rs:134:33: 134:64
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:134:33: 134:64
        _3 = from_generator::<[static generator@src/lib.rs:134:33: 134:64]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:134:27: 134:64
                                         // mir::Constant
                                         // + span: src/lib.rs:134:33: 134:64
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:134:33: 134:64]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:134:33: 134:64]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:134:63: 134:64
        (((*(_1.0: &mut [static generator@src/lib.rs:133:33: 133:64])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:134:27: 134:70
        goto -> bb3;                     // scope 1 at src/lib.rs:134:27: 134:70
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:134:27: 134:70
        StorageLive(_6);                 // scope 2 at src/lib.rs:134:27: 134:70
        StorageLive(_7);                 // scope 2 at src/lib.rs:134:27: 134:70
        StorageLive(_8);                 // scope 2 at src/lib.rs:134:27: 134:70
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:133:33: 133:64])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:134:27: 134:70
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:134:27: 134:70
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:134:27: 134:70
                                         // mir::Constant
                                         // + span: src/lib.rs:134:27: 134:70
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:134:69: 134:70
        StorageLive(_9);                 // scope 2 at src/lib.rs:134:27: 134:70
        StorageLive(_10);                // scope 2 at src/lib.rs:134:27: 134:70
        StorageLive(_11);                // scope 2 at src/lib.rs:134:27: 134:70
        _11 = _17;                       // scope 2 at src/lib.rs:134:27: 134:70
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:134:27: 134:70
                                         // mir::Constant
                                         // + span: src/lib.rs:134:27: 134:70
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:134:27: 134:70
        StorageDead(_11);                // scope 2 at src/lib.rs:134:69: 134:70
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:134:27: 134:70
                                         // mir::Constant
                                         // + span: src/lib.rs:134:27: 134:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:134:69: 134:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:134:69: 134:70
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:134:27: 134:70
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:134:27: 134:70
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:134:69: 134:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:134:69: 134:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:134:69: 134:70
        StorageLive(_14);                // scope 1 at src/lib.rs:134:27: 134:70
        StorageLive(_15);                // scope 1 at src/lib.rs:134:27: 134:70
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:134:27: 134:70
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:134:27: 134:70
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:133:33: 133:64]))) = 3; // scope 1 at src/lib.rs:134:27: 134:70
        return;                          // scope 1 at src/lib.rs:134:27: 134:70
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:134:27: 134:70
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:134:27: 134:70
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:134:27: 134:70
        _16 = _13;                       // scope 3 at src/lib.rs:134:27: 134:70
        StorageDead(_13);                // scope 1 at src/lib.rs:134:69: 134:70
        StorageDead(_10);                // scope 1 at src/lib.rs:134:69: 134:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:134:69: 134:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:134:69: 134:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:133:33: 133:64])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:134:69: 134:70
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:133:63: 133:64
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:133:64: 133:64
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:133:64: 133:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:133:33: 133:64]))) = 1; // scope 0 at src/lib.rs:133:64: 133:64
        return;                          // scope 0 at src/lib.rs:133:64: 133:64
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:134:69: 134:70
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:134:69: 134:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:134:69: 134:70
        StorageDead(_10);                // scope 1 at src/lib.rs:134:69: 134:70
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:134:69: 134:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:134:69: 134:70
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:134:69: 134:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:134:69: 134:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:133:33: 133:64])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:134:69: 134:70
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:134:63: 134:64
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:133:63: 133:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:133:33: 133:64]))) = 2; // scope 0 at src/lib.rs:133:33: 133:64
        resume;                          // scope 0 at src/lib.rs:133:33: 133:64
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:133:33: 133:64
        StorageLive(_14);                // scope 0 at src/lib.rs:133:33: 133:64
        StorageLive(_15);                // scope 0 at src/lib.rs:133:33: 133:64
        _14 = move _2;                   // scope 0 at src/lib.rs:133:33: 133:64
        StorageDead(_15);                // scope 1 at src/lib.rs:134:69: 134:70
        _17 = move _14;                  // scope 1 at src/lib.rs:134:27: 134:70
        StorageDead(_14);                // scope 1 at src/lib.rs:134:69: 134:70
        goto -> bb3;                     // scope 1 at src/lib.rs:134:27: 134:70
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:133:33: 133:64
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:133:33: 133:64
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:133:33: 133:64
    }
}

fn h3(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:100:17: 100:18
    debug x => _2;                       // in scope 0 at src/lib.rs:100:29: 100:30
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:100:38: 100:38
    let mut _3: [static generator@src/lib.rs:100:38: 100:56]; // in scope 0 at src/lib.rs:100:38: 100:56

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:100:38: 100:56
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:100:38: 100:56
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:100:38: 100:56
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:100:38: 100:56
        _0 = from_generator::<[static generator@src/lib.rs:100:38: 100:56]>(move _3) -> bb1; // scope 0 at src/lib.rs:100:38: 100:56
                                         // mir::Constant
                                         // + span: src/lib.rs:100:38: 100:56
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:100:38: 100:56]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:100:38: 100:56]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:100:55: 100:56
        return;                          // scope 0 at src/lib.rs:100:56: 100:56
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:127:33: 127:64]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:127:33: 127:64
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:127:33: 127:64
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:128:27: 128:64
    let mut _4: [static generator@src/lib.rs:128:33: 128:64]; // in scope 0 at src/lib.rs:128:33: 128:64
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:128:27: 128:70
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:128:27: 128:70
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:128:27: 128:70
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:128:27: 128:70
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:128:27: 128:70
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:128:27: 128:70
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:128:27: 128:70
    let mut _12: isize;                  // in scope 0 at src/lib.rs:128:27: 128:70
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:128:27: 128:70
    let mut _15: ();                     // in scope 0 at src/lib.rs:128:27: 128:70
    let mut _16: ();                     // in scope 0 at src/lib.rs:127:33: 127:64
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:127:33: 127:64
    let mut _18: u32;                    // in scope 0 at src/lib.rs:127:33: 127:64
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:127:33: 127:64])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:128:27: 128:70
        let _13: ();                     // in scope 1 at src/lib.rs:128:27: 128:70
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:128:27: 128:70
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:127:33: 127:64]))); // scope 0 at src/lib.rs:127:33: 127:64
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:127:33: 127:64
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:127:33: 127:64
        StorageLive(_3);                 // scope 0 at src/lib.rs:128:27: 128:64
        StorageLive(_4);                 // scope 0 at src/lib.rs:128:33: 128:64
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:128:33: 128:64
        _3 = from_generator::<[static generator@src/lib.rs:128:33: 128:64]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:128:27: 128:64
                                         // mir::Constant
                                         // + span: src/lib.rs:128:33: 128:64
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:128:33: 128:64]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:128:33: 128:64]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:128:63: 128:64
        (((*(_1.0: &mut [static generator@src/lib.rs:127:33: 127:64])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:128:27: 128:70
        goto -> bb3;                     // scope 1 at src/lib.rs:128:27: 128:70
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:128:27: 128:70
        StorageLive(_6);                 // scope 2 at src/lib.rs:128:27: 128:70
        StorageLive(_7);                 // scope 2 at src/lib.rs:128:27: 128:70
        StorageLive(_8);                 // scope 2 at src/lib.rs:128:27: 128:70
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:127:33: 127:64])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:128:27: 128:70
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:128:27: 128:70
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:128:27: 128:70
                                         // mir::Constant
                                         // + span: src/lib.rs:128:27: 128:70
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:128:69: 128:70
        StorageLive(_9);                 // scope 2 at src/lib.rs:128:27: 128:70
        StorageLive(_10);                // scope 2 at src/lib.rs:128:27: 128:70
        StorageLive(_11);                // scope 2 at src/lib.rs:128:27: 128:70
        _11 = _17;                       // scope 2 at src/lib.rs:128:27: 128:70
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:128:27: 128:70
                                         // mir::Constant
                                         // + span: src/lib.rs:128:27: 128:70
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:128:27: 128:70
        StorageDead(_11);                // scope 2 at src/lib.rs:128:69: 128:70
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:128:27: 128:70
                                         // mir::Constant
                                         // + span: src/lib.rs:128:27: 128:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:128:69: 128:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:128:69: 128:70
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:128:27: 128:70
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:128:27: 128:70
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:128:69: 128:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:128:69: 128:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:128:69: 128:70
        StorageLive(_14);                // scope 1 at src/lib.rs:128:27: 128:70
        StorageLive(_15);                // scope 1 at src/lib.rs:128:27: 128:70
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:128:27: 128:70
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:128:27: 128:70
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:127:33: 127:64]))) = 3; // scope 1 at src/lib.rs:128:27: 128:70
        return;                          // scope 1 at src/lib.rs:128:27: 128:70
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:128:27: 128:70
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:128:27: 128:70
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:128:27: 128:70
        _16 = _13;                       // scope 3 at src/lib.rs:128:27: 128:70
        StorageDead(_13);                // scope 1 at src/lib.rs:128:69: 128:70
        StorageDead(_10);                // scope 1 at src/lib.rs:128:69: 128:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:128:69: 128:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:128:69: 128:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:127:33: 127:64])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:128:69: 128:70
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:127:63: 127:64
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:127:64: 127:64
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:127:64: 127:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:127:33: 127:64]))) = 1; // scope 0 at src/lib.rs:127:64: 127:64
        return;                          // scope 0 at src/lib.rs:127:64: 127:64
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:128:69: 128:70
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:128:69: 128:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:128:69: 128:70
        StorageDead(_10);                // scope 1 at src/lib.rs:128:69: 128:70
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:128:69: 128:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:128:69: 128:70
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:128:69: 128:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:128:69: 128:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:127:33: 127:64])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:128:69: 128:70
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:128:63: 128:64
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:127:63: 127:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:127:33: 127:64]))) = 2; // scope 0 at src/lib.rs:127:33: 127:64
        resume;                          // scope 0 at src/lib.rs:127:33: 127:64
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:127:33: 127:64
        StorageLive(_14);                // scope 0 at src/lib.rs:127:33: 127:64
        StorageLive(_15);                // scope 0 at src/lib.rs:127:33: 127:64
        _14 = move _2;                   // scope 0 at src/lib.rs:127:33: 127:64
        StorageDead(_15);                // scope 1 at src/lib.rs:128:69: 128:70
        _17 = move _14;                  // scope 1 at src/lib.rs:128:27: 128:70
        StorageDead(_14);                // scope 1 at src/lib.rs:128:69: 128:70
        goto -> bb3;                     // scope 1 at src/lib.rs:128:27: 128:70
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:127:33: 127:64
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:127:33: 127:64
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:127:33: 127:64
    }
}

fn h1(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:98:17: 98:18
    debug x => _2;                       // in scope 0 at src/lib.rs:98:29: 98:30
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:98:38: 98:38
    let mut _3: [static generator@src/lib.rs:98:38: 98:56]; // in scope 0 at src/lib.rs:98:38: 98:56

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:98:38: 98:56
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:98:38: 98:56
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:98:38: 98:56
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:98:38: 98:56
        _0 = from_generator::<[static generator@src/lib.rs:98:38: 98:56]>(move _3) -> bb1; // scope 0 at src/lib.rs:98:38: 98:56
                                         // mir::Constant
                                         // + span: src/lib.rs:98:38: 98:56
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:98:38: 98:56]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:98:38: 98:56]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:98:55: 98:56
        return;                          // scope 0 at src/lib.rs:98:56: 98:56
    }
}

fn foo3() -> () {
    let mut _0: ();                      // return place in scope 0 at src/lib.rs:142:15: 142:15
    let mut _1: impl std::future::Future; // in scope 0 at src/lib.rs:143:13: 143:16
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:143:13: 143:16
        _1 = f() -> bb1;                 // scope 0 at src/lib.rs:143:13: 143:16
                                         // mir::Constant
                                         // + span: src/lib.rs:143:13: 143:14
                                         // + literal: Const { ty: fn() -> impl std::future::Future {f}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at src/lib.rs:143:16: 143:17
    }

    bb2: {
        StorageDead(_1);                 // scope 0 at src/lib.rs:143:16: 143:17
        return;                          // scope 0 at src/lib.rs:144:2: 144:2
    }
}

fn dup::{closure#0}(_1: &[closure@src/lib.rs:50:5: 50:22], _2: i32) -> i32 {
    debug a => _2;                       // in scope 0 at src/lib.rs:50:11: 50:12
    debug f => ((*_1).0: impl Fn(i32) -> i32); // in scope 0 at src/lib.rs:49:8: 49:9
    let mut _0: i32;                     // return place in scope 0 at src/lib.rs:50:14: 50:14
    let mut _3: &impl Fn(i32) -> i32;    // in scope 0 at src/lib.rs:50:14: 50:15
    let mut _4: (i32,);                  // in scope 0 at src/lib.rs:50:14: 50:22
    let mut _5: i32;                     // in scope 0 at src/lib.rs:50:16: 50:21
    let mut _6: i32;                     // in scope 0 at src/lib.rs:50:16: 50:17

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:50:14: 50:15
        _3 = &((*_1).0: impl Fn(i32) -> i32); // scope 0 at src/lib.rs:50:14: 50:15
        StorageLive(_4);                 // scope 0 at src/lib.rs:50:14: 50:22
        StorageLive(_5);                 // scope 0 at src/lib.rs:50:16: 50:21
        StorageLive(_6);                 // scope 0 at src/lib.rs:50:16: 50:17
        _6 = _2;                         // scope 0 at src/lib.rs:50:16: 50:17
        _5 = Mul(move _6, const 2_i32);  // scope 0 at src/lib.rs:50:16: 50:21
        StorageDead(_6);                 // scope 0 at src/lib.rs:50:20: 50:21
        (_4.0: i32) = move _5;           // scope 0 at src/lib.rs:50:14: 50:22
        _0 = <impl Fn(i32) -> i32 as Fn<(i32,)>>::call(move _3, move _4) -> bb1; // scope 0 at src/lib.rs:50:14: 50:22
                                         // mir::Constant
                                         // + span: src/lib.rs:50:14: 50:15
                                         // + literal: Const { ty: for<'r> extern "rust-call" fn(&'r impl Fn(i32) -> i32, (i32,)) -> <impl Fn(i32) -> i32 as std::ops::FnOnce<(i32,)>>::Output {<impl Fn(i32) -> i32 as std::ops::Fn<(i32,)>>::call}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_5);                 // scope 0 at src/lib.rs:50:21: 50:22
        StorageDead(_4);                 // scope 0 at src/lib.rs:50:21: 50:22
        StorageDead(_3);                 // scope 0 at src/lib.rs:50:21: 50:22
        return;                          // scope 0 at src/lib.rs:50:22: 50:22
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:134:33: 134:64]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:134:33: 134:64
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:134:33: 134:64
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:135:27: 135:80
    let mut _4: [static generator@src/lib.rs:135:33: 135:80]; // in scope 0 at src/lib.rs:135:33: 135:80
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:135:27: 135:86
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:135:27: 135:86
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:135:27: 135:86
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:135:27: 135:86
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:135:27: 135:86
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:135:27: 135:86
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:135:27: 135:86
    let mut _12: isize;                  // in scope 0 at src/lib.rs:135:27: 135:86
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:135:27: 135:86
    let mut _15: ();                     // in scope 0 at src/lib.rs:135:27: 135:86
    let mut _16: ();                     // in scope 0 at src/lib.rs:134:33: 134:64
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:134:33: 134:64
    let mut _18: u32;                    // in scope 0 at src/lib.rs:134:33: 134:64
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:134:33: 134:64])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:135:27: 135:86
        let _13: ();                     // in scope 1 at src/lib.rs:135:27: 135:86
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:135:27: 135:86
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:134:33: 134:64]))); // scope 0 at src/lib.rs:134:33: 134:64
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:134:33: 134:64
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:134:33: 134:64
        StorageLive(_3);                 // scope 0 at src/lib.rs:135:27: 135:80
        StorageLive(_4);                 // scope 0 at src/lib.rs:135:33: 135:80
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:135:33: 135:80
        _3 = from_generator::<[static generator@src/lib.rs:135:33: 135:80]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:135:27: 135:80
                                         // mir::Constant
                                         // + span: src/lib.rs:135:33: 135:80
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:135:33: 135:80]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:135:33: 135:80]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:135:79: 135:80
        (((*(_1.0: &mut [static generator@src/lib.rs:134:33: 134:64])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:135:27: 135:86
        goto -> bb3;                     // scope 1 at src/lib.rs:135:27: 135:86
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:135:27: 135:86
        StorageLive(_6);                 // scope 2 at src/lib.rs:135:27: 135:86
        StorageLive(_7);                 // scope 2 at src/lib.rs:135:27: 135:86
        StorageLive(_8);                 // scope 2 at src/lib.rs:135:27: 135:86
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:134:33: 134:64])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:135:27: 135:86
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:135:27: 135:86
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:135:27: 135:86
                                         // mir::Constant
                                         // + span: src/lib.rs:135:27: 135:86
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:135:85: 135:86
        StorageLive(_9);                 // scope 2 at src/lib.rs:135:27: 135:86
        StorageLive(_10);                // scope 2 at src/lib.rs:135:27: 135:86
        StorageLive(_11);                // scope 2 at src/lib.rs:135:27: 135:86
        _11 = _17;                       // scope 2 at src/lib.rs:135:27: 135:86
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:135:27: 135:86
                                         // mir::Constant
                                         // + span: src/lib.rs:135:27: 135:86
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:135:27: 135:86
        StorageDead(_11);                // scope 2 at src/lib.rs:135:85: 135:86
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:135:27: 135:86
                                         // mir::Constant
                                         // + span: src/lib.rs:135:27: 135:86
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:135:85: 135:86
        StorageDead(_6);                 // scope 2 at src/lib.rs:135:85: 135:86
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:135:27: 135:86
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:135:27: 135:86
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:135:85: 135:86
        StorageDead(_8);                 // scope 1 at src/lib.rs:135:85: 135:86
        StorageDead(_5);                 // scope 1 at src/lib.rs:135:85: 135:86
        StorageLive(_14);                // scope 1 at src/lib.rs:135:27: 135:86
        StorageLive(_15);                // scope 1 at src/lib.rs:135:27: 135:86
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:135:27: 135:86
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:135:27: 135:86
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:134:33: 134:64]))) = 3; // scope 1 at src/lib.rs:135:27: 135:86
        return;                          // scope 1 at src/lib.rs:135:27: 135:86
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:135:27: 135:86
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:135:27: 135:86
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:135:27: 135:86
        _16 = _13;                       // scope 3 at src/lib.rs:135:27: 135:86
        StorageDead(_13);                // scope 1 at src/lib.rs:135:85: 135:86
        StorageDead(_10);                // scope 1 at src/lib.rs:135:85: 135:86
        StorageDead(_8);                 // scope 1 at src/lib.rs:135:85: 135:86
        StorageDead(_5);                 // scope 1 at src/lib.rs:135:85: 135:86
        drop((((*(_1.0: &mut [static generator@src/lib.rs:134:33: 134:64])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:135:85: 135:86
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:134:63: 134:64
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:134:64: 134:64
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:134:64: 134:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:134:33: 134:64]))) = 1; // scope 0 at src/lib.rs:134:64: 134:64
        return;                          // scope 0 at src/lib.rs:134:64: 134:64
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:135:85: 135:86
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:135:85: 135:86
        StorageDead(_6);                 // scope 2 at src/lib.rs:135:85: 135:86
        StorageDead(_10);                // scope 1 at src/lib.rs:135:85: 135:86
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:135:85: 135:86
        StorageDead(_6);                 // scope 2 at src/lib.rs:135:85: 135:86
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:135:85: 135:86
        StorageDead(_5);                 // scope 1 at src/lib.rs:135:85: 135:86
        drop((((*(_1.0: &mut [static generator@src/lib.rs:134:33: 134:64])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:135:85: 135:86
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:135:79: 135:80
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:134:63: 134:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:134:33: 134:64]))) = 2; // scope 0 at src/lib.rs:134:33: 134:64
        resume;                          // scope 0 at src/lib.rs:134:33: 134:64
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:134:33: 134:64
        StorageLive(_14);                // scope 0 at src/lib.rs:134:33: 134:64
        StorageLive(_15);                // scope 0 at src/lib.rs:134:33: 134:64
        _14 = move _2;                   // scope 0 at src/lib.rs:134:33: 134:64
        StorageDead(_15);                // scope 1 at src/lib.rs:135:85: 135:86
        _17 = move _14;                  // scope 1 at src/lib.rs:135:27: 135:86
        StorageDead(_14);                // scope 1 at src/lib.rs:135:85: 135:86
        goto -> bb3;                     // scope 1 at src/lib.rs:135:27: 135:86
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:134:33: 134:64
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:134:33: 134:64
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:134:33: 134:64
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:128:33: 128:64]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:128:33: 128:64
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:128:33: 128:64
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:129:27: 129:64
    let mut _4: [static generator@src/lib.rs:129:33: 129:64]; // in scope 0 at src/lib.rs:129:33: 129:64
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:129:27: 129:70
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:129:27: 129:70
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:129:27: 129:70
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:129:27: 129:70
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:129:27: 129:70
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:129:27: 129:70
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:129:27: 129:70
    let mut _12: isize;                  // in scope 0 at src/lib.rs:129:27: 129:70
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:129:27: 129:70
    let mut _15: ();                     // in scope 0 at src/lib.rs:129:27: 129:70
    let mut _16: ();                     // in scope 0 at src/lib.rs:128:33: 128:64
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:128:33: 128:64
    let mut _18: u32;                    // in scope 0 at src/lib.rs:128:33: 128:64
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:128:33: 128:64])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:129:27: 129:70
        let _13: ();                     // in scope 1 at src/lib.rs:129:27: 129:70
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:129:27: 129:70
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:128:33: 128:64]))); // scope 0 at src/lib.rs:128:33: 128:64
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:128:33: 128:64
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:128:33: 128:64
        StorageLive(_3);                 // scope 0 at src/lib.rs:129:27: 129:64
        StorageLive(_4);                 // scope 0 at src/lib.rs:129:33: 129:64
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:129:33: 129:64
        _3 = from_generator::<[static generator@src/lib.rs:129:33: 129:64]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:129:27: 129:64
                                         // mir::Constant
                                         // + span: src/lib.rs:129:33: 129:64
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:129:33: 129:64]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:129:33: 129:64]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:129:63: 129:64
        (((*(_1.0: &mut [static generator@src/lib.rs:128:33: 128:64])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:129:27: 129:70
        goto -> bb3;                     // scope 1 at src/lib.rs:129:27: 129:70
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:129:27: 129:70
        StorageLive(_6);                 // scope 2 at src/lib.rs:129:27: 129:70
        StorageLive(_7);                 // scope 2 at src/lib.rs:129:27: 129:70
        StorageLive(_8);                 // scope 2 at src/lib.rs:129:27: 129:70
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:128:33: 128:64])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:129:27: 129:70
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:129:27: 129:70
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:129:27: 129:70
                                         // mir::Constant
                                         // + span: src/lib.rs:129:27: 129:70
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:129:69: 129:70
        StorageLive(_9);                 // scope 2 at src/lib.rs:129:27: 129:70
        StorageLive(_10);                // scope 2 at src/lib.rs:129:27: 129:70
        StorageLive(_11);                // scope 2 at src/lib.rs:129:27: 129:70
        _11 = _17;                       // scope 2 at src/lib.rs:129:27: 129:70
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:129:27: 129:70
                                         // mir::Constant
                                         // + span: src/lib.rs:129:27: 129:70
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:129:27: 129:70
        StorageDead(_11);                // scope 2 at src/lib.rs:129:69: 129:70
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:129:27: 129:70
                                         // mir::Constant
                                         // + span: src/lib.rs:129:27: 129:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:129:69: 129:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:129:69: 129:70
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:129:27: 129:70
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:129:27: 129:70
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:129:69: 129:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:129:69: 129:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:129:69: 129:70
        StorageLive(_14);                // scope 1 at src/lib.rs:129:27: 129:70
        StorageLive(_15);                // scope 1 at src/lib.rs:129:27: 129:70
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:129:27: 129:70
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:129:27: 129:70
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:128:33: 128:64]))) = 3; // scope 1 at src/lib.rs:129:27: 129:70
        return;                          // scope 1 at src/lib.rs:129:27: 129:70
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:129:27: 129:70
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:129:27: 129:70
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:129:27: 129:70
        _16 = _13;                       // scope 3 at src/lib.rs:129:27: 129:70
        StorageDead(_13);                // scope 1 at src/lib.rs:129:69: 129:70
        StorageDead(_10);                // scope 1 at src/lib.rs:129:69: 129:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:129:69: 129:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:129:69: 129:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:128:33: 128:64])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:129:69: 129:70
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:128:63: 128:64
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:128:64: 128:64
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:128:64: 128:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:128:33: 128:64]))) = 1; // scope 0 at src/lib.rs:128:64: 128:64
        return;                          // scope 0 at src/lib.rs:128:64: 128:64
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:129:69: 129:70
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:129:69: 129:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:129:69: 129:70
        StorageDead(_10);                // scope 1 at src/lib.rs:129:69: 129:70
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:129:69: 129:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:129:69: 129:70
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:129:69: 129:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:129:69: 129:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:128:33: 128:64])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:129:69: 129:70
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:129:63: 129:64
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:128:63: 128:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:128:33: 128:64]))) = 2; // scope 0 at src/lib.rs:128:33: 128:64
        resume;                          // scope 0 at src/lib.rs:128:33: 128:64
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:128:33: 128:64
        StorageLive(_14);                // scope 0 at src/lib.rs:128:33: 128:64
        StorageLive(_15);                // scope 0 at src/lib.rs:128:33: 128:64
        _14 = move _2;                   // scope 0 at src/lib.rs:128:33: 128:64
        StorageDead(_15);                // scope 1 at src/lib.rs:129:69: 129:70
        _17 = move _14;                  // scope 1 at src/lib.rs:129:27: 129:70
        StorageDead(_14);                // scope 1 at src/lib.rs:129:69: 129:70
        goto -> bb3;                     // scope 1 at src/lib.rs:129:27: 129:70
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:128:33: 128:64
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:128:33: 128:64
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:128:33: 128:64
    }
}

fn f::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:121:34: 121:66]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:121:34: 121:66
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:121:34: 121:66
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:122:28: 122:66
    let mut _4: [static generator@src/lib.rs:122:34: 122:66]; // in scope 0 at src/lib.rs:122:34: 122:66
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:122:28: 122:72
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:122:28: 122:72
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:122:28: 122:72
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:122:28: 122:72
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:122:28: 122:72
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:122:28: 122:72
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:122:28: 122:72
    let mut _12: isize;                  // in scope 0 at src/lib.rs:122:28: 122:72
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:122:28: 122:72
    let mut _15: ();                     // in scope 0 at src/lib.rs:122:28: 122:72
    let mut _16: ();                     // in scope 0 at src/lib.rs:121:34: 121:66
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:121:34: 121:66
    let mut _18: u32;                    // in scope 0 at src/lib.rs:121:34: 121:66
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:121:34: 121:66])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:122:28: 122:72
        let _13: ();                     // in scope 1 at src/lib.rs:122:28: 122:72
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:122:28: 122:72
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:121:34: 121:66]))); // scope 0 at src/lib.rs:121:34: 121:66
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:121:34: 121:66
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:121:34: 121:66
        StorageLive(_3);                 // scope 0 at src/lib.rs:122:28: 122:66
        StorageLive(_4);                 // scope 0 at src/lib.rs:122:34: 122:66
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:122:34: 122:66
        _3 = from_generator::<[static generator@src/lib.rs:122:34: 122:66]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:122:28: 122:66
                                         // mir::Constant
                                         // + span: src/lib.rs:122:34: 122:66
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:122:34: 122:66]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:122:34: 122:66]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:122:65: 122:66
        (((*(_1.0: &mut [static generator@src/lib.rs:121:34: 121:66])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:122:28: 122:72
        goto -> bb3;                     // scope 1 at src/lib.rs:122:28: 122:72
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:122:28: 122:72
        StorageLive(_6);                 // scope 2 at src/lib.rs:122:28: 122:72
        StorageLive(_7);                 // scope 2 at src/lib.rs:122:28: 122:72
        StorageLive(_8);                 // scope 2 at src/lib.rs:122:28: 122:72
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:121:34: 121:66])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:122:28: 122:72
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:122:28: 122:72
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:122:28: 122:72
                                         // mir::Constant
                                         // + span: src/lib.rs:122:28: 122:72
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:122:71: 122:72
        StorageLive(_9);                 // scope 2 at src/lib.rs:122:28: 122:72
        StorageLive(_10);                // scope 2 at src/lib.rs:122:28: 122:72
        StorageLive(_11);                // scope 2 at src/lib.rs:122:28: 122:72
        _11 = _17;                       // scope 2 at src/lib.rs:122:28: 122:72
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:122:28: 122:72
                                         // mir::Constant
                                         // + span: src/lib.rs:122:28: 122:72
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:122:28: 122:72
        StorageDead(_11);                // scope 2 at src/lib.rs:122:71: 122:72
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:122:28: 122:72
                                         // mir::Constant
                                         // + span: src/lib.rs:122:28: 122:72
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:122:71: 122:72
        StorageDead(_6);                 // scope 2 at src/lib.rs:122:71: 122:72
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:122:28: 122:72
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:122:28: 122:72
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:122:71: 122:72
        StorageDead(_8);                 // scope 1 at src/lib.rs:122:71: 122:72
        StorageDead(_5);                 // scope 1 at src/lib.rs:122:71: 122:72
        StorageLive(_14);                // scope 1 at src/lib.rs:122:28: 122:72
        StorageLive(_15);                // scope 1 at src/lib.rs:122:28: 122:72
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:122:28: 122:72
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:122:28: 122:72
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:121:34: 121:66]))) = 3; // scope 1 at src/lib.rs:122:28: 122:72
        return;                          // scope 1 at src/lib.rs:122:28: 122:72
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:122:28: 122:72
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:122:28: 122:72
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:122:28: 122:72
        _16 = _13;                       // scope 3 at src/lib.rs:122:28: 122:72
        StorageDead(_13);                // scope 1 at src/lib.rs:122:71: 122:72
        StorageDead(_10);                // scope 1 at src/lib.rs:122:71: 122:72
        StorageDead(_8);                 // scope 1 at src/lib.rs:122:71: 122:72
        StorageDead(_5);                 // scope 1 at src/lib.rs:122:71: 122:72
        drop((((*(_1.0: &mut [static generator@src/lib.rs:121:34: 121:66])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:122:71: 122:72
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:121:65: 121:66
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:121:66: 121:66
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:121:66: 121:66
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:121:34: 121:66]))) = 1; // scope 0 at src/lib.rs:121:66: 121:66
        return;                          // scope 0 at src/lib.rs:121:66: 121:66
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:122:71: 122:72
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:122:71: 122:72
        StorageDead(_6);                 // scope 2 at src/lib.rs:122:71: 122:72
        StorageDead(_10);                // scope 1 at src/lib.rs:122:71: 122:72
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:122:71: 122:72
        StorageDead(_6);                 // scope 2 at src/lib.rs:122:71: 122:72
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:122:71: 122:72
        StorageDead(_5);                 // scope 1 at src/lib.rs:122:71: 122:72
        drop((((*(_1.0: &mut [static generator@src/lib.rs:121:34: 121:66])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:122:71: 122:72
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:122:65: 122:66
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:121:65: 121:66
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:121:34: 121:66]))) = 2; // scope 0 at src/lib.rs:121:34: 121:66
        resume;                          // scope 0 at src/lib.rs:121:34: 121:66
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:121:34: 121:66
        StorageLive(_14);                // scope 0 at src/lib.rs:121:34: 121:66
        StorageLive(_15);                // scope 0 at src/lib.rs:121:34: 121:66
        _14 = move _2;                   // scope 0 at src/lib.rs:121:34: 121:66
        StorageDead(_15);                // scope 1 at src/lib.rs:122:71: 122:72
        _17 = move _14;                  // scope 1 at src/lib.rs:122:28: 122:72
        StorageDead(_14);                // scope 1 at src/lib.rs:122:71: 122:72
        goto -> bb3;                     // scope 1 at src/lib.rs:122:28: 122:72
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:121:34: 121:66
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:121:34: 121:66
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:121:34: 121:66
    }
}

fn foo2() -> () {
    let mut _0: ();                      // return place in scope 0 at src/lib.rs:53:15: 53:15
    let _1: [closure@src/lib.rs:54:13: 54:18]; // in scope 0 at src/lib.rs:54:9: 54:10
    let mut _3: [closure@src/lib.rs:54:13: 54:18]; // in scope 0 at src/lib.rs:56:17: 56:18
    let mut _5: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:57:17: 57:18
    let mut _7: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:58:17: 58:18
    let mut _9: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:59:17: 59:18
    let mut _11: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:60:17: 60:18
    let mut _13: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:62:17: 62:18
    let mut _15: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:63:17: 63:18
    let mut _17: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:64:17: 64:18
    let mut _19: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:65:17: 65:18
    let mut _21: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:66:17: 66:18
    let mut _23: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:68:17: 68:18
    let mut _25: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:69:17: 69:18
    let mut _27: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:70:17: 70:18
    let mut _29: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:71:17: 71:18
    let mut _31: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:72:17: 72:18
    let mut _33: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:74:17: 74:18
    let mut _35: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:75:17: 75:18
    let mut _37: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:76:17: 76:18
    let mut _39: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:77:17: 77:18
    let mut _41: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:78:17: 78:18
    let mut _43: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:80:17: 80:18
    let mut _45: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:81:17: 81:18
    let mut _47: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:82:17: 82:18
    let mut _49: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:83:17: 83:18
    let mut _51: impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:84:17: 84:18
    let _52: ();                         // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:62
    let mut _53: std::fmt::Arguments;    // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _54: [std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _55: (&i32,);                // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _56: &i32;                   // in scope 0 at src/lib.rs:86:43: 86:47
    let _57: i32;                        // in scope 0 at src/lib.rs:86:43: 86:47
    let mut _58: &impl std::ops::Fn<(i32,)>; // in scope 0 at src/lib.rs:86:43: 86:44
    let mut _59: (i32,);                 // in scope 0 at src/lib.rs:86:43: 86:47
    let mut _61: std::fmt::ArgumentV1;   // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _62: &i32;                   // in scope 0 at src/lib.rs:86:43: 86:47
    let mut _63: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at src/lib.rs:86:43: 86:47
    let mut _65: &[&str];                // in scope 0 at src/lib.rs:86:14: 86:41
    let mut _66: &[&str; 2];             // in scope 0 at src/lib.rs:86:14: 86:41
    let _67: &[&str; 2];                 // in scope 0 at src/lib.rs:86:14: 86:41
    let mut _68: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _69: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    scope 1 {
        debug f => _1;                   // in scope 1 at src/lib.rs:54:9: 54:10
        let _2: impl std::ops::Fn<(i32,)>; // in scope 1 at src/lib.rs:56:9: 56:10
        scope 2 {
            debug f => _2;               // in scope 2 at src/lib.rs:56:9: 56:10
            let _4: impl std::ops::Fn<(i32,)>; // in scope 2 at src/lib.rs:57:9: 57:10
            scope 3 {
                debug f => _4;           // in scope 3 at src/lib.rs:57:9: 57:10
                let _6: impl std::ops::Fn<(i32,)>; // in scope 3 at src/lib.rs:58:9: 58:10
                scope 4 {
                    debug f => _6;       // in scope 4 at src/lib.rs:58:9: 58:10
                    let _8: impl std::ops::Fn<(i32,)>; // in scope 4 at src/lib.rs:59:9: 59:10
                    scope 5 {
                        debug f => _8;   // in scope 5 at src/lib.rs:59:9: 59:10
                        let _10: impl std::ops::Fn<(i32,)>; // in scope 5 at src/lib.rs:60:9: 60:10
                        scope 6 {
                            debug f => _10; // in scope 6 at src/lib.rs:60:9: 60:10
                            let _12: impl std::ops::Fn<(i32,)>; // in scope 6 at src/lib.rs:62:9: 62:10
                            scope 7 {
                                debug f => _12; // in scope 7 at src/lib.rs:62:9: 62:10
                                let _14: impl std::ops::Fn<(i32,)>; // in scope 7 at src/lib.rs:63:9: 63:10
                                scope 8 {
                                    debug f => _14; // in scope 8 at src/lib.rs:63:9: 63:10
                                    let _16: impl std::ops::Fn<(i32,)>; // in scope 8 at src/lib.rs:64:9: 64:10
                                    scope 9 {
                                        debug f => _16; // in scope 9 at src/lib.rs:64:9: 64:10
                                        let _18: impl std::ops::Fn<(i32,)>; // in scope 9 at src/lib.rs:65:9: 65:10
                                        scope 10 {
                                            debug f => _18; // in scope 10 at src/lib.rs:65:9: 65:10
                                            let _20: impl std::ops::Fn<(i32,)>; // in scope 10 at src/lib.rs:66:9: 66:10
                                            scope 11 {
                                                debug f => _20; // in scope 11 at src/lib.rs:66:9: 66:10
                                                let _22: impl std::ops::Fn<(i32,)>; // in scope 11 at src/lib.rs:68:9: 68:10
                                                scope 12 {
                                                    debug f => _22; // in scope 12 at src/lib.rs:68:9: 68:10
                                                    let _24: impl std::ops::Fn<(i32,)>; // in scope 12 at src/lib.rs:69:9: 69:10
                                                    scope 13 {
                                                        debug f => _24; // in scope 13 at src/lib.rs:69:9: 69:10
                                                        let _26: impl std::ops::Fn<(i32,)>; // in scope 13 at src/lib.rs:70:9: 70:10
                                                        scope 14 {
                                                            debug f => _26; // in scope 14 at src/lib.rs:70:9: 70:10
                                                            let _28: impl std::ops::Fn<(i32,)>; // in scope 14 at src/lib.rs:71:9: 71:10
                                                            scope 15 {
                                                                debug f => _28; // in scope 15 at src/lib.rs:71:9: 71:10
                                                                let _30: impl std::ops::Fn<(i32,)>; // in scope 15 at src/lib.rs:72:9: 72:10
                                                                scope 16 {
                                                                    debug f => _30; // in scope 16 at src/lib.rs:72:9: 72:10
                                                                    let _32: impl std::ops::Fn<(i32,)>; // in scope 16 at src/lib.rs:74:9: 74:10
                                                                    scope 17 {
                                                                        debug f => _32; // in scope 17 at src/lib.rs:74:9: 74:10
                                                                        let _34: impl std::ops::Fn<(i32,)>; // in scope 17 at src/lib.rs:75:9: 75:10
                                                                        scope 18 {
                                                                            debug f => _34; // in scope 18 at src/lib.rs:75:9: 75:10
                                                                            let _36: impl std::ops::Fn<(i32,)>; // in scope 18 at src/lib.rs:76:9: 76:10
                                                                            scope 19 {
                                                                                debug f => _36; // in scope 19 at src/lib.rs:76:9: 76:10
                                                                                let _38: impl std::ops::Fn<(i32,)>; // in scope 19 at src/lib.rs:77:9: 77:10
                                                                                scope 20 {
                                                                                    debug f => _38; // in scope 20 at src/lib.rs:77:9: 77:10
                                                                                    let _40: impl std::ops::Fn<(i32,)>; // in scope 20 at src/lib.rs:78:9: 78:10
                                                                                    scope 21 {
                                                                                        debug f => _40; // in scope 21 at src/lib.rs:78:9: 78:10
                                                                                        let _42: impl std::ops::Fn<(i32,)>; // in scope 21 at src/lib.rs:80:9: 80:10
                                                                                        scope 22 {
                                                                                            debug f => _42; // in scope 22 at src/lib.rs:80:9: 80:10
                                                                                            let _44: impl std::ops::Fn<(i32,)>; // in scope 22 at src/lib.rs:81:9: 81:10
                                                                                            scope 23 {
                                                                                                debug f => _44; // in scope 23 at src/lib.rs:81:9: 81:10
                                                                                                let _46: impl std::ops::Fn<(i32,)>; // in scope 23 at src/lib.rs:82:9: 82:10
                                                                                                scope 24 {
                                                                                                    debug f => _46; // in scope 24 at src/lib.rs:82:9: 82:10
                                                                                                    let _48: impl std::ops::Fn<(i32,)>; // in scope 24 at src/lib.rs:83:9: 83:10
                                                                                                    scope 25 {
                                                                                                        debug f => _48; // in scope 25 at src/lib.rs:83:9: 83:10
                                                                                                        let _50: impl std::ops::Fn<(i32,)>; // in scope 25 at src/lib.rs:84:9: 84:10
                                                                                                        scope 26 {
                                                                                                            debug f => _50; // in scope 26 at src/lib.rs:84:9: 84:10
                                                                                                            let _60: &i32; // in scope 26 at src/lib.rs:86:43: 86:47
                                                                                                            let _64: &[std::fmt::ArgumentV1; 1]; // in scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                                                                                            scope 27 {
                                                                                                                debug arg0 => _60; // in scope 27 at src/lib.rs:86:43: 86:47
                                                                                                            }
                                                                                                            scope 28 {
                                                                                                                debug args => _64; // in scope 28 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                                                                                                scope 29 {
                                                                                                                    let mut _70: &[&str; 2]; // in scope 29 at src/lib.rs:86:14: 86:41
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src/lib.rs:54:9: 54:10
        StorageLive(_2);                 // scope 1 at src/lib.rs:56:9: 56:10
        StorageLive(_3);                 // scope 1 at src/lib.rs:56:17: 56:18
        _2 = dup::<[closure@src/lib.rs:54:13: 54:18]>(move _3) -> bb1; // scope 1 at src/lib.rs:56:13: 56:19
                                         // mir::Constant
                                         // + span: src/lib.rs:56:13: 56:16
                                         // + literal: Const { ty: fn([closure@src/lib.rs:54:13: 54:18]) -> impl std::ops::Fn<(i32,)> {dup::<[closure@src/lib.rs:54:13: 54:18]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 1 at src/lib.rs:56:18: 56:19
        StorageLive(_4);                 // scope 2 at src/lib.rs:57:9: 57:10
        StorageLive(_5);                 // scope 2 at src/lib.rs:57:17: 57:18
        _4 = dup::<impl Fn<(i32,)>>(move _5) -> bb2; // scope 2 at src/lib.rs:57:13: 57:19
                                         // mir::Constant
                                         // + span: src/lib.rs:57:13: 57:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:57:18: 57:19
        StorageLive(_6);                 // scope 3 at src/lib.rs:58:9: 58:10
        StorageLive(_7);                 // scope 3 at src/lib.rs:58:17: 58:18
        _6 = dup::<impl Fn<(i32,)>>(move _7) -> bb3; // scope 3 at src/lib.rs:58:13: 58:19
                                         // mir::Constant
                                         // + span: src/lib.rs:58:13: 58:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_7);                 // scope 3 at src/lib.rs:58:18: 58:19
        StorageLive(_8);                 // scope 4 at src/lib.rs:59:9: 59:10
        StorageLive(_9);                 // scope 4 at src/lib.rs:59:17: 59:18
        _8 = dup::<impl Fn<(i32,)>>(move _9) -> bb4; // scope 4 at src/lib.rs:59:13: 59:19
                                         // mir::Constant
                                         // + span: src/lib.rs:59:13: 59:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_9);                 // scope 4 at src/lib.rs:59:18: 59:19
        StorageLive(_10);                // scope 5 at src/lib.rs:60:9: 60:10
        StorageLive(_11);                // scope 5 at src/lib.rs:60:17: 60:18
        _10 = dup::<impl Fn<(i32,)>>(move _11) -> bb5; // scope 5 at src/lib.rs:60:13: 60:19
                                         // mir::Constant
                                         // + span: src/lib.rs:60:13: 60:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_11);                // scope 5 at src/lib.rs:60:18: 60:19
        StorageLive(_12);                // scope 6 at src/lib.rs:62:9: 62:10
        StorageLive(_13);                // scope 6 at src/lib.rs:62:17: 62:18
        _12 = dup::<impl Fn<(i32,)>>(move _13) -> bb6; // scope 6 at src/lib.rs:62:13: 62:19
                                         // mir::Constant
                                         // + span: src/lib.rs:62:13: 62:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_13);                // scope 6 at src/lib.rs:62:18: 62:19
        StorageLive(_14);                // scope 7 at src/lib.rs:63:9: 63:10
        StorageLive(_15);                // scope 7 at src/lib.rs:63:17: 63:18
        _14 = dup::<impl Fn<(i32,)>>(move _15) -> bb7; // scope 7 at src/lib.rs:63:13: 63:19
                                         // mir::Constant
                                         // + span: src/lib.rs:63:13: 63:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_15);                // scope 7 at src/lib.rs:63:18: 63:19
        StorageLive(_16);                // scope 8 at src/lib.rs:64:9: 64:10
        StorageLive(_17);                // scope 8 at src/lib.rs:64:17: 64:18
        _16 = dup::<impl Fn<(i32,)>>(move _17) -> bb8; // scope 8 at src/lib.rs:64:13: 64:19
                                         // mir::Constant
                                         // + span: src/lib.rs:64:13: 64:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_17);                // scope 8 at src/lib.rs:64:18: 64:19
        StorageLive(_18);                // scope 9 at src/lib.rs:65:9: 65:10
        StorageLive(_19);                // scope 9 at src/lib.rs:65:17: 65:18
        _18 = dup::<impl Fn<(i32,)>>(move _19) -> bb9; // scope 9 at src/lib.rs:65:13: 65:19
                                         // mir::Constant
                                         // + span: src/lib.rs:65:13: 65:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_19);                // scope 9 at src/lib.rs:65:18: 65:19
        StorageLive(_20);                // scope 10 at src/lib.rs:66:9: 66:10
        StorageLive(_21);                // scope 10 at src/lib.rs:66:17: 66:18
        _20 = dup::<impl Fn<(i32,)>>(move _21) -> bb10; // scope 10 at src/lib.rs:66:13: 66:19
                                         // mir::Constant
                                         // + span: src/lib.rs:66:13: 66:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_21);                // scope 10 at src/lib.rs:66:18: 66:19
        StorageLive(_22);                // scope 11 at src/lib.rs:68:9: 68:10
        StorageLive(_23);                // scope 11 at src/lib.rs:68:17: 68:18
        _22 = dup::<impl Fn<(i32,)>>(move _23) -> bb11; // scope 11 at src/lib.rs:68:13: 68:19
                                         // mir::Constant
                                         // + span: src/lib.rs:68:13: 68:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_23);                // scope 11 at src/lib.rs:68:18: 68:19
        StorageLive(_24);                // scope 12 at src/lib.rs:69:9: 69:10
        StorageLive(_25);                // scope 12 at src/lib.rs:69:17: 69:18
        _24 = dup::<impl Fn<(i32,)>>(move _25) -> bb12; // scope 12 at src/lib.rs:69:13: 69:19
                                         // mir::Constant
                                         // + span: src/lib.rs:69:13: 69:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_25);                // scope 12 at src/lib.rs:69:18: 69:19
        StorageLive(_26);                // scope 13 at src/lib.rs:70:9: 70:10
        StorageLive(_27);                // scope 13 at src/lib.rs:70:17: 70:18
        _26 = dup::<impl Fn<(i32,)>>(move _27) -> bb13; // scope 13 at src/lib.rs:70:13: 70:19
                                         // mir::Constant
                                         // + span: src/lib.rs:70:13: 70:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_27);                // scope 13 at src/lib.rs:70:18: 70:19
        StorageLive(_28);                // scope 14 at src/lib.rs:71:9: 71:10
        StorageLive(_29);                // scope 14 at src/lib.rs:71:17: 71:18
        _28 = dup::<impl Fn<(i32,)>>(move _29) -> bb14; // scope 14 at src/lib.rs:71:13: 71:19
                                         // mir::Constant
                                         // + span: src/lib.rs:71:13: 71:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_29);                // scope 14 at src/lib.rs:71:18: 71:19
        StorageLive(_30);                // scope 15 at src/lib.rs:72:9: 72:10
        StorageLive(_31);                // scope 15 at src/lib.rs:72:17: 72:18
        _30 = dup::<impl Fn<(i32,)>>(move _31) -> bb15; // scope 15 at src/lib.rs:72:13: 72:19
                                         // mir::Constant
                                         // + span: src/lib.rs:72:13: 72:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_31);                // scope 15 at src/lib.rs:72:18: 72:19
        StorageLive(_32);                // scope 16 at src/lib.rs:74:9: 74:10
        StorageLive(_33);                // scope 16 at src/lib.rs:74:17: 74:18
        _32 = dup::<impl Fn<(i32,)>>(move _33) -> bb16; // scope 16 at src/lib.rs:74:13: 74:19
                                         // mir::Constant
                                         // + span: src/lib.rs:74:13: 74:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_33);                // scope 16 at src/lib.rs:74:18: 74:19
        StorageLive(_34);                // scope 17 at src/lib.rs:75:9: 75:10
        StorageLive(_35);                // scope 17 at src/lib.rs:75:17: 75:18
        _34 = dup::<impl Fn<(i32,)>>(move _35) -> bb17; // scope 17 at src/lib.rs:75:13: 75:19
                                         // mir::Constant
                                         // + span: src/lib.rs:75:13: 75:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_35);                // scope 17 at src/lib.rs:75:18: 75:19
        StorageLive(_36);                // scope 18 at src/lib.rs:76:9: 76:10
        StorageLive(_37);                // scope 18 at src/lib.rs:76:17: 76:18
        _36 = dup::<impl Fn<(i32,)>>(move _37) -> bb18; // scope 18 at src/lib.rs:76:13: 76:19
                                         // mir::Constant
                                         // + span: src/lib.rs:76:13: 76:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_37);                // scope 18 at src/lib.rs:76:18: 76:19
        StorageLive(_38);                // scope 19 at src/lib.rs:77:9: 77:10
        StorageLive(_39);                // scope 19 at src/lib.rs:77:17: 77:18
        _38 = dup::<impl Fn<(i32,)>>(move _39) -> bb19; // scope 19 at src/lib.rs:77:13: 77:19
                                         // mir::Constant
                                         // + span: src/lib.rs:77:13: 77:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_39);                // scope 19 at src/lib.rs:77:18: 77:19
        StorageLive(_40);                // scope 20 at src/lib.rs:78:9: 78:10
        StorageLive(_41);                // scope 20 at src/lib.rs:78:17: 78:18
        _40 = dup::<impl Fn<(i32,)>>(move _41) -> bb20; // scope 20 at src/lib.rs:78:13: 78:19
                                         // mir::Constant
                                         // + span: src/lib.rs:78:13: 78:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        StorageDead(_41);                // scope 20 at src/lib.rs:78:18: 78:19
        StorageLive(_42);                // scope 21 at src/lib.rs:80:9: 80:10
        StorageLive(_43);                // scope 21 at src/lib.rs:80:17: 80:18
        _42 = dup::<impl Fn<(i32,)>>(move _43) -> bb21; // scope 21 at src/lib.rs:80:13: 80:19
                                         // mir::Constant
                                         // + span: src/lib.rs:80:13: 80:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        StorageDead(_43);                // scope 21 at src/lib.rs:80:18: 80:19
        StorageLive(_44);                // scope 22 at src/lib.rs:81:9: 81:10
        StorageLive(_45);                // scope 22 at src/lib.rs:81:17: 81:18
        _44 = dup::<impl Fn<(i32,)>>(move _45) -> bb22; // scope 22 at src/lib.rs:81:13: 81:19
                                         // mir::Constant
                                         // + span: src/lib.rs:81:13: 81:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_45);                // scope 22 at src/lib.rs:81:18: 81:19
        StorageLive(_46);                // scope 23 at src/lib.rs:82:9: 82:10
        StorageLive(_47);                // scope 23 at src/lib.rs:82:17: 82:18
        _46 = dup::<impl Fn<(i32,)>>(move _47) -> bb23; // scope 23 at src/lib.rs:82:13: 82:19
                                         // mir::Constant
                                         // + span: src/lib.rs:82:13: 82:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        StorageDead(_47);                // scope 23 at src/lib.rs:82:18: 82:19
        StorageLive(_48);                // scope 24 at src/lib.rs:83:9: 83:10
        StorageLive(_49);                // scope 24 at src/lib.rs:83:17: 83:18
        _48 = dup::<impl Fn<(i32,)>>(move _49) -> bb24; // scope 24 at src/lib.rs:83:13: 83:19
                                         // mir::Constant
                                         // + span: src/lib.rs:83:13: 83:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        StorageDead(_49);                // scope 24 at src/lib.rs:83:18: 83:19
        StorageLive(_50);                // scope 25 at src/lib.rs:84:9: 84:10
        StorageLive(_51);                // scope 25 at src/lib.rs:84:17: 84:18
        _50 = dup::<impl Fn<(i32,)>>(move _51) -> bb25; // scope 25 at src/lib.rs:84:13: 84:19
                                         // mir::Constant
                                         // + span: src/lib.rs:84:13: 84:16
                                         // + literal: Const { ty: fn(impl std::ops::Fn<(i32,)>) -> impl std::ops::Fn<(i32,)> {dup::<impl std::ops::Fn<(i32,)>>}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        StorageDead(_51);                // scope 25 at src/lib.rs:84:18: 84:19
        StorageLive(_52);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:62
        StorageLive(_53);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_54);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_55);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_56);                // scope 26 at src/lib.rs:86:43: 86:47
        StorageLive(_57);                // scope 26 at src/lib.rs:86:43: 86:47
        StorageLive(_58);                // scope 26 at src/lib.rs:86:43: 86:44
        _58 = &_50;                      // scope 26 at src/lib.rs:86:43: 86:44
        StorageLive(_59);                // scope 26 at src/lib.rs:86:43: 86:47
        (_59.0: i32) = const 1_i32;      // scope 26 at src/lib.rs:86:43: 86:47
        _57 = <impl Fn<(i32,)> as Fn<(i32,)>>::call(move _58, move _59) -> bb26; // scope 26 at src/lib.rs:86:43: 86:47
                                         // mir::Constant
                                         // + span: src/lib.rs:86:43: 86:44
                                         // + literal: Const { ty: for<'r> extern "rust-call" fn(&'r impl std::ops::Fn<(i32,)>, (i32,)) -> <impl std::ops::Fn<(i32,)> as std::ops::FnOnce<(i32,)>>::Output {<impl std::ops::Fn<(i32,)> as std::ops::Fn<(i32,)>>::call}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        StorageDead(_59);                // scope 26 at src/lib.rs:86:46: 86:47
        StorageDead(_58);                // scope 26 at src/lib.rs:86:46: 86:47
        _56 = &_57;                      // scope 26 at src/lib.rs:86:43: 86:47
        (_55.0: &i32) = move _56;        // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageDead(_56);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageLive(_60);                // scope 26 at src/lib.rs:86:43: 86:47
        _60 = (_55.0: &i32);             // scope 26 at src/lib.rs:86:43: 86:47
        StorageLive(_61);                // scope 27 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_62);                // scope 27 at src/lib.rs:86:43: 86:47
        _62 = _60;                       // scope 27 at src/lib.rs:86:43: 86:47
        StorageLive(_63);                // scope 27 at src/lib.rs:86:43: 86:47
        _63 = <i32 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 27 at src/lib.rs:86:43: 86:47
                                         // mir::Constant
                                         // + span: src/lib.rs:86:43: 86:47
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<i32 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _61 = ArgumentV1::new::<i32>(move _62, move _63) -> bb27; // scope 27 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b> fn(&'b i32, for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb27: {
        StorageDead(_63);                // scope 27 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_62);                // scope 27 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        _54 = [move _61];                // scope 27 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageDead(_61);                // scope 27 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_60);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageLive(_64);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        _64 = &_54;                      // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_65);                // scope 29 at src/lib.rs:86:14: 86:41
        StorageLive(_66);                // scope 29 at src/lib.rs:86:14: 86:41
        StorageLive(_67);                // scope 29 at src/lib.rs:86:14: 86:41
        _70 = const foo2::promoted[0];   // scope 29 at src/lib.rs:86:14: 86:41
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(foo2, [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: src/lib.rs:86:14: 86:41
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:11 ~ deeply_nested_multi[cdc4]::foo2), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }
        _67 = _70;                       // scope 29 at src/lib.rs:86:14: 86:41
        _66 = _67;                       // scope 29 at src/lib.rs:86:14: 86:41
        _65 = move _66 as &[&str] (Pointer(Unsize)); // scope 29 at src/lib.rs:86:14: 86:41
        StorageDead(_66);                // scope 29 at src/lib.rs:86:40: 86:41
        StorageLive(_68);                // scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_69);                // scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        _69 = _64;                       // scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        _68 = move _69 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageDead(_69);                // scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        _53 = Arguments::new_v1(move _65, move _68) -> bb28; // scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        StorageDead(_68);                // scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_65);                // scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_67);                // scope 28 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_64);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        _52 = _print(move _53) -> bb29;  // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb29: {
        StorageDead(_53);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:61: 97:62
        StorageDead(_57);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:62: 97:63
        StorageDead(_55);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:62: 97:63
        StorageDead(_54);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:62: 97:63
        StorageDead(_52);                // scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:62: 97:63
        StorageDead(_50);                // scope 25 at src/lib.rs:87:1: 87:2
        StorageDead(_48);                // scope 24 at src/lib.rs:87:1: 87:2
        StorageDead(_46);                // scope 23 at src/lib.rs:87:1: 87:2
        StorageDead(_44);                // scope 22 at src/lib.rs:87:1: 87:2
        StorageDead(_42);                // scope 21 at src/lib.rs:87:1: 87:2
        StorageDead(_40);                // scope 20 at src/lib.rs:87:1: 87:2
        StorageDead(_38);                // scope 19 at src/lib.rs:87:1: 87:2
        StorageDead(_36);                // scope 18 at src/lib.rs:87:1: 87:2
        StorageDead(_34);                // scope 17 at src/lib.rs:87:1: 87:2
        StorageDead(_32);                // scope 16 at src/lib.rs:87:1: 87:2
        StorageDead(_30);                // scope 15 at src/lib.rs:87:1: 87:2
        StorageDead(_28);                // scope 14 at src/lib.rs:87:1: 87:2
        StorageDead(_26);                // scope 13 at src/lib.rs:87:1: 87:2
        StorageDead(_24);                // scope 12 at src/lib.rs:87:1: 87:2
        StorageDead(_22);                // scope 11 at src/lib.rs:87:1: 87:2
        StorageDead(_20);                // scope 10 at src/lib.rs:87:1: 87:2
        StorageDead(_18);                // scope 9 at src/lib.rs:87:1: 87:2
        StorageDead(_16);                // scope 8 at src/lib.rs:87:1: 87:2
        StorageDead(_14);                // scope 7 at src/lib.rs:87:1: 87:2
        StorageDead(_12);                // scope 6 at src/lib.rs:87:1: 87:2
        StorageDead(_10);                // scope 5 at src/lib.rs:87:1: 87:2
        StorageDead(_8);                 // scope 4 at src/lib.rs:87:1: 87:2
        StorageDead(_6);                 // scope 3 at src/lib.rs:87:1: 87:2
        StorageDead(_4);                 // scope 2 at src/lib.rs:87:1: 87:2
        StorageDead(_2);                 // scope 1 at src/lib.rs:87:1: 87:2
        StorageDead(_1);                 // scope 0 at src/lib.rs:87:1: 87:2
        return;                          // scope 0 at src/lib.rs:87:2: 87:2
    }
}

promoted[0] in foo2: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at src/lib.rs:86:14: 86:41
    let mut _1: [&str; 2];               // in scope 0 at src/lib.rs:86:14: 86:41

    bb0: {
        _1 = [const "Type size was at least ", const "\n"]; // scope 0 at src/lib.rs:86:14: 86:41
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [84, 121, 112, 101, 32, 115, 105, 122, 101, 32, 119, 97, 115, 32, 97, 116, 32, 108, 101, 97, 115, 116, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8388607], len: Size { raw: 23 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 23 })
                                         // mir::Constant
                                         // + span: src/lib.rs:86:14: 86:41
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [84, 121, 112, 101, 32, 115, 105, 122, 101, 32, 119, 97, 115, 32, 97, 116, 32, 108, 101, 97, 115, 116, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8388607], len: Size { raw: 23 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 23 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/lib.rs:86:14: 86:41
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at src/lib.rs:86:14: 86:41
        return;                          // scope 0 at src/lib.rs:86:14: 86:41
    }
}

fn h19::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:117:39: 117:58]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:117:39: 117:58
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58])).0: &std::string::String); // in scope 0 at src/lib.rs:117:18: 117:19
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58])).1: &u64); // in scope 0 at src/lib.rs:117:30: 117:31
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:117:39: 117:58
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:117:18: 117:19
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:117:41: 117:50
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:117:45: 117:46
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:117:48: 117:49
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:117:41: 117:56
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:117:41: 117:56
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:117:41: 117:56
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:117:41: 117:56
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:117:41: 117:56
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:117:41: 117:56
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:117:41: 117:56
    let mut _15: isize;                  // in scope 0 at src/lib.rs:117:41: 117:56
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:117:41: 117:56
    let mut _18: ();                     // in scope 0 at src/lib.rs:117:41: 117:56
    let mut _19: ();                     // in scope 0 at src/lib.rs:117:39: 117:58
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:117:39: 117:58
    let mut _21: u32;                    // in scope 0 at src/lib.rs:117:39: 117:58
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:117:18: 117:19
        let _4: &u64;                    // in scope 1 at src/lib.rs:117:30: 117:31
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:117:30: 117:31
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:117:41: 117:56
                let _16: ();             // in scope 3 at src/lib.rs:117:41: 117:56
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:117:41: 117:56
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58]))); // scope 0 at src/lib.rs:117:39: 117:58
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:117:39: 117:58
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:117:39: 117:58
        StorageLive(_3);                 // scope 0 at src/lib.rs:117:18: 117:19
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58])).0: &std::string::String); // scope 0 at src/lib.rs:117:18: 117:19
        StorageLive(_4);                 // scope 1 at src/lib.rs:117:30: 117:31
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58])).1: &u64); // scope 1 at src/lib.rs:117:30: 117:31
        StorageLive(_5);                 // scope 2 at src/lib.rs:117:41: 117:50
        StorageLive(_6);                 // scope 2 at src/lib.rs:117:45: 117:46
        _6 = _3;                         // scope 2 at src/lib.rs:117:45: 117:46
        StorageLive(_7);                 // scope 2 at src/lib.rs:117:48: 117:49
        _7 = _4;                         // scope 2 at src/lib.rs:117:48: 117:49
        _5 = h18(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:117:41: 117:50
                                         // mir::Constant
                                         // + span: src/lib.rs:117:41: 117:44
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h18}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:117:49: 117:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:117:49: 117:50
        (((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:117:41: 117:56
        goto -> bb3;                     // scope 3 at src/lib.rs:117:41: 117:56
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:117:41: 117:56
        StorageLive(_9);                 // scope 4 at src/lib.rs:117:41: 117:56
        StorageLive(_10);                // scope 4 at src/lib.rs:117:41: 117:56
        StorageLive(_11);                // scope 4 at src/lib.rs:117:41: 117:56
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:117:41: 117:56
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:117:41: 117:56
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:117:41: 117:56
                                         // mir::Constant
                                         // + span: src/lib.rs:117:41: 117:56
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:117:55: 117:56
        StorageLive(_12);                // scope 4 at src/lib.rs:117:41: 117:56
        StorageLive(_13);                // scope 4 at src/lib.rs:117:41: 117:56
        StorageLive(_14);                // scope 4 at src/lib.rs:117:41: 117:56
        _14 = _20;                       // scope 4 at src/lib.rs:117:41: 117:56
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:117:41: 117:56
                                         // mir::Constant
                                         // + span: src/lib.rs:117:41: 117:56
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:117:41: 117:56
        StorageDead(_14);                // scope 4 at src/lib.rs:117:55: 117:56
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:117:41: 117:56
                                         // mir::Constant
                                         // + span: src/lib.rs:117:41: 117:56
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:117:55: 117:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:117:55: 117:56
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:117:41: 117:56
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:117:41: 117:56
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:117:55: 117:56
        StorageDead(_11);                // scope 3 at src/lib.rs:117:55: 117:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:117:55: 117:56
        StorageLive(_17);                // scope 3 at src/lib.rs:117:41: 117:56
        StorageLive(_18);                // scope 3 at src/lib.rs:117:41: 117:56
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:117:41: 117:56
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:117:41: 117:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58]))) = 3; // scope 3 at src/lib.rs:117:41: 117:56
        return;                          // scope 3 at src/lib.rs:117:41: 117:56
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:117:41: 117:56
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:117:41: 117:56
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:117:41: 117:56
        _19 = _16;                       // scope 5 at src/lib.rs:117:41: 117:56
        StorageDead(_16);                // scope 3 at src/lib.rs:117:55: 117:56
        StorageDead(_13);                // scope 3 at src/lib.rs:117:55: 117:56
        StorageDead(_11);                // scope 3 at src/lib.rs:117:55: 117:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:117:55: 117:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:117:55: 117:56
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:117:57: 117:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:117:57: 117:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:117:57: 117:58
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:117:58: 117:58
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:117:58: 117:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58]))) = 1; // scope 0 at src/lib.rs:117:58: 117:58
        return;                          // scope 0 at src/lib.rs:117:58: 117:58
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:117:55: 117:56
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:117:55: 117:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:117:55: 117:56
        StorageDead(_13);                // scope 3 at src/lib.rs:117:55: 117:56
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:117:55: 117:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:117:55: 117:56
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:117:55: 117:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:117:55: 117:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:117:55: 117:56
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:117:49: 117:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:117:49: 117:50
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:117:57: 117:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:117:57: 117:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:117:57: 117:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:117:39: 117:58]))) = 2; // scope 0 at src/lib.rs:117:39: 117:58
        resume;                          // scope 0 at src/lib.rs:117:39: 117:58
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:117:39: 117:58
        StorageLive(_4);                 // scope 0 at src/lib.rs:117:39: 117:58
        StorageLive(_5);                 // scope 0 at src/lib.rs:117:39: 117:58
        StorageLive(_17);                // scope 0 at src/lib.rs:117:39: 117:58
        StorageLive(_18);                // scope 0 at src/lib.rs:117:39: 117:58
        _17 = move _2;                   // scope 0 at src/lib.rs:117:39: 117:58
        StorageDead(_18);                // scope 3 at src/lib.rs:117:55: 117:56
        _20 = move _17;                  // scope 3 at src/lib.rs:117:41: 117:56
        StorageDead(_17);                // scope 3 at src/lib.rs:117:55: 117:56
        goto -> bb3;                     // scope 3 at src/lib.rs:117:41: 117:56
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:117:39: 117:58
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:117:39: 117:58
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:117:39: 117:58
    }
}

fn h17::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:115:39: 115:58]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:115:39: 115:58
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58])).0: &std::string::String); // in scope 0 at src/lib.rs:115:18: 115:19
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58])).1: &u64); // in scope 0 at src/lib.rs:115:30: 115:31
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:115:39: 115:58
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:115:18: 115:19
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:115:41: 115:50
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:115:45: 115:46
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:115:48: 115:49
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:115:41: 115:56
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:115:41: 115:56
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:115:41: 115:56
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:115:41: 115:56
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:115:41: 115:56
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:115:41: 115:56
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:115:41: 115:56
    let mut _15: isize;                  // in scope 0 at src/lib.rs:115:41: 115:56
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:115:41: 115:56
    let mut _18: ();                     // in scope 0 at src/lib.rs:115:41: 115:56
    let mut _19: ();                     // in scope 0 at src/lib.rs:115:39: 115:58
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:115:39: 115:58
    let mut _21: u32;                    // in scope 0 at src/lib.rs:115:39: 115:58
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:115:18: 115:19
        let _4: &u64;                    // in scope 1 at src/lib.rs:115:30: 115:31
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:115:30: 115:31
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:115:41: 115:56
                let _16: ();             // in scope 3 at src/lib.rs:115:41: 115:56
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:115:41: 115:56
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58]))); // scope 0 at src/lib.rs:115:39: 115:58
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:115:39: 115:58
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:115:39: 115:58
        StorageLive(_3);                 // scope 0 at src/lib.rs:115:18: 115:19
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58])).0: &std::string::String); // scope 0 at src/lib.rs:115:18: 115:19
        StorageLive(_4);                 // scope 1 at src/lib.rs:115:30: 115:31
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58])).1: &u64); // scope 1 at src/lib.rs:115:30: 115:31
        StorageLive(_5);                 // scope 2 at src/lib.rs:115:41: 115:50
        StorageLive(_6);                 // scope 2 at src/lib.rs:115:45: 115:46
        _6 = _3;                         // scope 2 at src/lib.rs:115:45: 115:46
        StorageLive(_7);                 // scope 2 at src/lib.rs:115:48: 115:49
        _7 = _4;                         // scope 2 at src/lib.rs:115:48: 115:49
        _5 = h16(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:115:41: 115:50
                                         // mir::Constant
                                         // + span: src/lib.rs:115:41: 115:44
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h16}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:115:49: 115:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:115:49: 115:50
        (((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:115:41: 115:56
        goto -> bb3;                     // scope 3 at src/lib.rs:115:41: 115:56
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:115:41: 115:56
        StorageLive(_9);                 // scope 4 at src/lib.rs:115:41: 115:56
        StorageLive(_10);                // scope 4 at src/lib.rs:115:41: 115:56
        StorageLive(_11);                // scope 4 at src/lib.rs:115:41: 115:56
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:115:41: 115:56
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:115:41: 115:56
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:115:41: 115:56
                                         // mir::Constant
                                         // + span: src/lib.rs:115:41: 115:56
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:115:55: 115:56
        StorageLive(_12);                // scope 4 at src/lib.rs:115:41: 115:56
        StorageLive(_13);                // scope 4 at src/lib.rs:115:41: 115:56
        StorageLive(_14);                // scope 4 at src/lib.rs:115:41: 115:56
        _14 = _20;                       // scope 4 at src/lib.rs:115:41: 115:56
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:115:41: 115:56
                                         // mir::Constant
                                         // + span: src/lib.rs:115:41: 115:56
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:115:41: 115:56
        StorageDead(_14);                // scope 4 at src/lib.rs:115:55: 115:56
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:115:41: 115:56
                                         // mir::Constant
                                         // + span: src/lib.rs:115:41: 115:56
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:115:55: 115:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:115:55: 115:56
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:115:41: 115:56
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:115:41: 115:56
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:115:55: 115:56
        StorageDead(_11);                // scope 3 at src/lib.rs:115:55: 115:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:115:55: 115:56
        StorageLive(_17);                // scope 3 at src/lib.rs:115:41: 115:56
        StorageLive(_18);                // scope 3 at src/lib.rs:115:41: 115:56
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:115:41: 115:56
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:115:41: 115:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58]))) = 3; // scope 3 at src/lib.rs:115:41: 115:56
        return;                          // scope 3 at src/lib.rs:115:41: 115:56
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:115:41: 115:56
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:115:41: 115:56
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:115:41: 115:56
        _19 = _16;                       // scope 5 at src/lib.rs:115:41: 115:56
        StorageDead(_16);                // scope 3 at src/lib.rs:115:55: 115:56
        StorageDead(_13);                // scope 3 at src/lib.rs:115:55: 115:56
        StorageDead(_11);                // scope 3 at src/lib.rs:115:55: 115:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:115:55: 115:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:115:55: 115:56
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:115:57: 115:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:115:57: 115:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:115:57: 115:58
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:115:58: 115:58
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:115:58: 115:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58]))) = 1; // scope 0 at src/lib.rs:115:58: 115:58
        return;                          // scope 0 at src/lib.rs:115:58: 115:58
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:115:55: 115:56
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:115:55: 115:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:115:55: 115:56
        StorageDead(_13);                // scope 3 at src/lib.rs:115:55: 115:56
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:115:55: 115:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:115:55: 115:56
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:115:55: 115:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:115:55: 115:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:115:55: 115:56
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:115:49: 115:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:115:49: 115:50
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:115:57: 115:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:115:57: 115:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:115:57: 115:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:115:39: 115:58]))) = 2; // scope 0 at src/lib.rs:115:39: 115:58
        resume;                          // scope 0 at src/lib.rs:115:39: 115:58
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:115:39: 115:58
        StorageLive(_4);                 // scope 0 at src/lib.rs:115:39: 115:58
        StorageLive(_5);                 // scope 0 at src/lib.rs:115:39: 115:58
        StorageLive(_17);                // scope 0 at src/lib.rs:115:39: 115:58
        StorageLive(_18);                // scope 0 at src/lib.rs:115:39: 115:58
        _17 = move _2;                   // scope 0 at src/lib.rs:115:39: 115:58
        StorageDead(_18);                // scope 3 at src/lib.rs:115:55: 115:56
        _20 = move _17;                  // scope 3 at src/lib.rs:115:41: 115:56
        StorageDead(_17);                // scope 3 at src/lib.rs:115:55: 115:56
        goto -> bb3;                     // scope 3 at src/lib.rs:115:41: 115:56
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:115:39: 115:58
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:115:39: 115:58
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:115:39: 115:58
    }
}

fn h15::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:113:39: 113:58]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:113:39: 113:58
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58])).0: &std::string::String); // in scope 0 at src/lib.rs:113:18: 113:19
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58])).1: &u64); // in scope 0 at src/lib.rs:113:30: 113:31
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:113:39: 113:58
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:113:18: 113:19
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:113:41: 113:50
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:113:45: 113:46
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:113:48: 113:49
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:113:41: 113:56
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:113:41: 113:56
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:113:41: 113:56
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:113:41: 113:56
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:113:41: 113:56
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:113:41: 113:56
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:113:41: 113:56
    let mut _15: isize;                  // in scope 0 at src/lib.rs:113:41: 113:56
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:113:41: 113:56
    let mut _18: ();                     // in scope 0 at src/lib.rs:113:41: 113:56
    let mut _19: ();                     // in scope 0 at src/lib.rs:113:39: 113:58
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:113:39: 113:58
    let mut _21: u32;                    // in scope 0 at src/lib.rs:113:39: 113:58
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:113:18: 113:19
        let _4: &u64;                    // in scope 1 at src/lib.rs:113:30: 113:31
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:113:30: 113:31
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:113:41: 113:56
                let _16: ();             // in scope 3 at src/lib.rs:113:41: 113:56
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:113:41: 113:56
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58]))); // scope 0 at src/lib.rs:113:39: 113:58
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:113:39: 113:58
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:113:39: 113:58
        StorageLive(_3);                 // scope 0 at src/lib.rs:113:18: 113:19
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58])).0: &std::string::String); // scope 0 at src/lib.rs:113:18: 113:19
        StorageLive(_4);                 // scope 1 at src/lib.rs:113:30: 113:31
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58])).1: &u64); // scope 1 at src/lib.rs:113:30: 113:31
        StorageLive(_5);                 // scope 2 at src/lib.rs:113:41: 113:50
        StorageLive(_6);                 // scope 2 at src/lib.rs:113:45: 113:46
        _6 = _3;                         // scope 2 at src/lib.rs:113:45: 113:46
        StorageLive(_7);                 // scope 2 at src/lib.rs:113:48: 113:49
        _7 = _4;                         // scope 2 at src/lib.rs:113:48: 113:49
        _5 = h14(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:113:41: 113:50
                                         // mir::Constant
                                         // + span: src/lib.rs:113:41: 113:44
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h14}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:113:49: 113:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:113:49: 113:50
        (((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:113:41: 113:56
        goto -> bb3;                     // scope 3 at src/lib.rs:113:41: 113:56
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:113:41: 113:56
        StorageLive(_9);                 // scope 4 at src/lib.rs:113:41: 113:56
        StorageLive(_10);                // scope 4 at src/lib.rs:113:41: 113:56
        StorageLive(_11);                // scope 4 at src/lib.rs:113:41: 113:56
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:113:41: 113:56
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:113:41: 113:56
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:113:41: 113:56
                                         // mir::Constant
                                         // + span: src/lib.rs:113:41: 113:56
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:113:55: 113:56
        StorageLive(_12);                // scope 4 at src/lib.rs:113:41: 113:56
        StorageLive(_13);                // scope 4 at src/lib.rs:113:41: 113:56
        StorageLive(_14);                // scope 4 at src/lib.rs:113:41: 113:56
        _14 = _20;                       // scope 4 at src/lib.rs:113:41: 113:56
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:113:41: 113:56
                                         // mir::Constant
                                         // + span: src/lib.rs:113:41: 113:56
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:113:41: 113:56
        StorageDead(_14);                // scope 4 at src/lib.rs:113:55: 113:56
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:113:41: 113:56
                                         // mir::Constant
                                         // + span: src/lib.rs:113:41: 113:56
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:113:55: 113:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:113:55: 113:56
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:113:41: 113:56
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:113:41: 113:56
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:113:55: 113:56
        StorageDead(_11);                // scope 3 at src/lib.rs:113:55: 113:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:113:55: 113:56
        StorageLive(_17);                // scope 3 at src/lib.rs:113:41: 113:56
        StorageLive(_18);                // scope 3 at src/lib.rs:113:41: 113:56
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:113:41: 113:56
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:113:41: 113:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58]))) = 3; // scope 3 at src/lib.rs:113:41: 113:56
        return;                          // scope 3 at src/lib.rs:113:41: 113:56
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:113:41: 113:56
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:113:41: 113:56
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:113:41: 113:56
        _19 = _16;                       // scope 5 at src/lib.rs:113:41: 113:56
        StorageDead(_16);                // scope 3 at src/lib.rs:113:55: 113:56
        StorageDead(_13);                // scope 3 at src/lib.rs:113:55: 113:56
        StorageDead(_11);                // scope 3 at src/lib.rs:113:55: 113:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:113:55: 113:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:113:55: 113:56
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:113:57: 113:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:113:57: 113:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:113:57: 113:58
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:113:58: 113:58
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:113:58: 113:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58]))) = 1; // scope 0 at src/lib.rs:113:58: 113:58
        return;                          // scope 0 at src/lib.rs:113:58: 113:58
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:113:55: 113:56
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:113:55: 113:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:113:55: 113:56
        StorageDead(_13);                // scope 3 at src/lib.rs:113:55: 113:56
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:113:55: 113:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:113:55: 113:56
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:113:55: 113:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:113:55: 113:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:113:55: 113:56
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:113:49: 113:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:113:49: 113:50
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:113:57: 113:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:113:57: 113:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:113:57: 113:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:113:39: 113:58]))) = 2; // scope 0 at src/lib.rs:113:39: 113:58
        resume;                          // scope 0 at src/lib.rs:113:39: 113:58
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:113:39: 113:58
        StorageLive(_4);                 // scope 0 at src/lib.rs:113:39: 113:58
        StorageLive(_5);                 // scope 0 at src/lib.rs:113:39: 113:58
        StorageLive(_17);                // scope 0 at src/lib.rs:113:39: 113:58
        StorageLive(_18);                // scope 0 at src/lib.rs:113:39: 113:58
        _17 = move _2;                   // scope 0 at src/lib.rs:113:39: 113:58
        StorageDead(_18);                // scope 3 at src/lib.rs:113:55: 113:56
        _20 = move _17;                  // scope 3 at src/lib.rs:113:41: 113:56
        StorageDead(_17);                // scope 3 at src/lib.rs:113:55: 113:56
        goto -> bb3;                     // scope 3 at src/lib.rs:113:41: 113:56
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:113:39: 113:58
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:113:39: 113:58
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:113:39: 113:58
    }
}

fn h13::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:111:39: 111:58]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:111:39: 111:58
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58])).0: &std::string::String); // in scope 0 at src/lib.rs:111:18: 111:19
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58])).1: &u64); // in scope 0 at src/lib.rs:111:30: 111:31
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:111:39: 111:58
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:111:18: 111:19
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:111:41: 111:50
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:111:45: 111:46
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:111:48: 111:49
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:111:41: 111:56
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:111:41: 111:56
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:111:41: 111:56
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:111:41: 111:56
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:111:41: 111:56
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:111:41: 111:56
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:111:41: 111:56
    let mut _15: isize;                  // in scope 0 at src/lib.rs:111:41: 111:56
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:111:41: 111:56
    let mut _18: ();                     // in scope 0 at src/lib.rs:111:41: 111:56
    let mut _19: ();                     // in scope 0 at src/lib.rs:111:39: 111:58
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:111:39: 111:58
    let mut _21: u32;                    // in scope 0 at src/lib.rs:111:39: 111:58
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:111:18: 111:19
        let _4: &u64;                    // in scope 1 at src/lib.rs:111:30: 111:31
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:111:30: 111:31
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:111:41: 111:56
                let _16: ();             // in scope 3 at src/lib.rs:111:41: 111:56
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:111:41: 111:56
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58]))); // scope 0 at src/lib.rs:111:39: 111:58
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:111:39: 111:58
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:111:39: 111:58
        StorageLive(_3);                 // scope 0 at src/lib.rs:111:18: 111:19
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58])).0: &std::string::String); // scope 0 at src/lib.rs:111:18: 111:19
        StorageLive(_4);                 // scope 1 at src/lib.rs:111:30: 111:31
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58])).1: &u64); // scope 1 at src/lib.rs:111:30: 111:31
        StorageLive(_5);                 // scope 2 at src/lib.rs:111:41: 111:50
        StorageLive(_6);                 // scope 2 at src/lib.rs:111:45: 111:46
        _6 = _3;                         // scope 2 at src/lib.rs:111:45: 111:46
        StorageLive(_7);                 // scope 2 at src/lib.rs:111:48: 111:49
        _7 = _4;                         // scope 2 at src/lib.rs:111:48: 111:49
        _5 = h12(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:111:41: 111:50
                                         // mir::Constant
                                         // + span: src/lib.rs:111:41: 111:44
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h12}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:111:49: 111:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:111:49: 111:50
        (((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:111:41: 111:56
        goto -> bb3;                     // scope 3 at src/lib.rs:111:41: 111:56
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:111:41: 111:56
        StorageLive(_9);                 // scope 4 at src/lib.rs:111:41: 111:56
        StorageLive(_10);                // scope 4 at src/lib.rs:111:41: 111:56
        StorageLive(_11);                // scope 4 at src/lib.rs:111:41: 111:56
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:111:41: 111:56
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:111:41: 111:56
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:111:41: 111:56
                                         // mir::Constant
                                         // + span: src/lib.rs:111:41: 111:56
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:111:55: 111:56
        StorageLive(_12);                // scope 4 at src/lib.rs:111:41: 111:56
        StorageLive(_13);                // scope 4 at src/lib.rs:111:41: 111:56
        StorageLive(_14);                // scope 4 at src/lib.rs:111:41: 111:56
        _14 = _20;                       // scope 4 at src/lib.rs:111:41: 111:56
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:111:41: 111:56
                                         // mir::Constant
                                         // + span: src/lib.rs:111:41: 111:56
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:111:41: 111:56
        StorageDead(_14);                // scope 4 at src/lib.rs:111:55: 111:56
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:111:41: 111:56
                                         // mir::Constant
                                         // + span: src/lib.rs:111:41: 111:56
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:111:55: 111:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:111:55: 111:56
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:111:41: 111:56
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:111:41: 111:56
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:111:55: 111:56
        StorageDead(_11);                // scope 3 at src/lib.rs:111:55: 111:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:111:55: 111:56
        StorageLive(_17);                // scope 3 at src/lib.rs:111:41: 111:56
        StorageLive(_18);                // scope 3 at src/lib.rs:111:41: 111:56
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:111:41: 111:56
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:111:41: 111:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58]))) = 3; // scope 3 at src/lib.rs:111:41: 111:56
        return;                          // scope 3 at src/lib.rs:111:41: 111:56
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:111:41: 111:56
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:111:41: 111:56
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:111:41: 111:56
        _19 = _16;                       // scope 5 at src/lib.rs:111:41: 111:56
        StorageDead(_16);                // scope 3 at src/lib.rs:111:55: 111:56
        StorageDead(_13);                // scope 3 at src/lib.rs:111:55: 111:56
        StorageDead(_11);                // scope 3 at src/lib.rs:111:55: 111:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:111:55: 111:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:111:55: 111:56
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:111:57: 111:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:111:57: 111:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:111:57: 111:58
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:111:58: 111:58
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:111:58: 111:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58]))) = 1; // scope 0 at src/lib.rs:111:58: 111:58
        return;                          // scope 0 at src/lib.rs:111:58: 111:58
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:111:55: 111:56
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:111:55: 111:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:111:55: 111:56
        StorageDead(_13);                // scope 3 at src/lib.rs:111:55: 111:56
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:111:55: 111:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:111:55: 111:56
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:111:55: 111:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:111:55: 111:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:111:55: 111:56
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:111:49: 111:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:111:49: 111:50
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:111:57: 111:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:111:57: 111:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:111:57: 111:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:111:39: 111:58]))) = 2; // scope 0 at src/lib.rs:111:39: 111:58
        resume;                          // scope 0 at src/lib.rs:111:39: 111:58
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:111:39: 111:58
        StorageLive(_4);                 // scope 0 at src/lib.rs:111:39: 111:58
        StorageLive(_5);                 // scope 0 at src/lib.rs:111:39: 111:58
        StorageLive(_17);                // scope 0 at src/lib.rs:111:39: 111:58
        StorageLive(_18);                // scope 0 at src/lib.rs:111:39: 111:58
        _17 = move _2;                   // scope 0 at src/lib.rs:111:39: 111:58
        StorageDead(_18);                // scope 3 at src/lib.rs:111:55: 111:56
        _20 = move _17;                  // scope 3 at src/lib.rs:111:41: 111:56
        StorageDead(_17);                // scope 3 at src/lib.rs:111:55: 111:56
        goto -> bb3;                     // scope 3 at src/lib.rs:111:41: 111:56
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:111:39: 111:58
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:111:39: 111:58
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:111:39: 111:58
    }
}

fn h11::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:109:39: 109:58]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:109:39: 109:58
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58])).0: &std::string::String); // in scope 0 at src/lib.rs:109:18: 109:19
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58])).1: &u64); // in scope 0 at src/lib.rs:109:30: 109:31
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:109:39: 109:58
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:109:18: 109:19
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:109:41: 109:50
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:109:45: 109:46
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:109:48: 109:49
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:109:41: 109:56
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:109:41: 109:56
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:109:41: 109:56
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:109:41: 109:56
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:109:41: 109:56
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:109:41: 109:56
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:109:41: 109:56
    let mut _15: isize;                  // in scope 0 at src/lib.rs:109:41: 109:56
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:109:41: 109:56
    let mut _18: ();                     // in scope 0 at src/lib.rs:109:41: 109:56
    let mut _19: ();                     // in scope 0 at src/lib.rs:109:39: 109:58
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:109:39: 109:58
    let mut _21: u32;                    // in scope 0 at src/lib.rs:109:39: 109:58
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:109:18: 109:19
        let _4: &u64;                    // in scope 1 at src/lib.rs:109:30: 109:31
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:109:30: 109:31
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:109:41: 109:56
                let _16: ();             // in scope 3 at src/lib.rs:109:41: 109:56
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:109:41: 109:56
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58]))); // scope 0 at src/lib.rs:109:39: 109:58
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:109:39: 109:58
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:109:39: 109:58
        StorageLive(_3);                 // scope 0 at src/lib.rs:109:18: 109:19
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58])).0: &std::string::String); // scope 0 at src/lib.rs:109:18: 109:19
        StorageLive(_4);                 // scope 1 at src/lib.rs:109:30: 109:31
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58])).1: &u64); // scope 1 at src/lib.rs:109:30: 109:31
        StorageLive(_5);                 // scope 2 at src/lib.rs:109:41: 109:50
        StorageLive(_6);                 // scope 2 at src/lib.rs:109:45: 109:46
        _6 = _3;                         // scope 2 at src/lib.rs:109:45: 109:46
        StorageLive(_7);                 // scope 2 at src/lib.rs:109:48: 109:49
        _7 = _4;                         // scope 2 at src/lib.rs:109:48: 109:49
        _5 = h10(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:109:41: 109:50
                                         // mir::Constant
                                         // + span: src/lib.rs:109:41: 109:44
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h10}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:109:49: 109:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:109:49: 109:50
        (((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:109:41: 109:56
        goto -> bb3;                     // scope 3 at src/lib.rs:109:41: 109:56
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:109:41: 109:56
        StorageLive(_9);                 // scope 4 at src/lib.rs:109:41: 109:56
        StorageLive(_10);                // scope 4 at src/lib.rs:109:41: 109:56
        StorageLive(_11);                // scope 4 at src/lib.rs:109:41: 109:56
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:109:41: 109:56
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:109:41: 109:56
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:109:41: 109:56
                                         // mir::Constant
                                         // + span: src/lib.rs:109:41: 109:56
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:109:55: 109:56
        StorageLive(_12);                // scope 4 at src/lib.rs:109:41: 109:56
        StorageLive(_13);                // scope 4 at src/lib.rs:109:41: 109:56
        StorageLive(_14);                // scope 4 at src/lib.rs:109:41: 109:56
        _14 = _20;                       // scope 4 at src/lib.rs:109:41: 109:56
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:109:41: 109:56
                                         // mir::Constant
                                         // + span: src/lib.rs:109:41: 109:56
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:109:41: 109:56
        StorageDead(_14);                // scope 4 at src/lib.rs:109:55: 109:56
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:109:41: 109:56
                                         // mir::Constant
                                         // + span: src/lib.rs:109:41: 109:56
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:109:55: 109:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:109:55: 109:56
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:109:41: 109:56
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:109:41: 109:56
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:109:55: 109:56
        StorageDead(_11);                // scope 3 at src/lib.rs:109:55: 109:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:109:55: 109:56
        StorageLive(_17);                // scope 3 at src/lib.rs:109:41: 109:56
        StorageLive(_18);                // scope 3 at src/lib.rs:109:41: 109:56
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:109:41: 109:56
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:109:41: 109:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58]))) = 3; // scope 3 at src/lib.rs:109:41: 109:56
        return;                          // scope 3 at src/lib.rs:109:41: 109:56
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:109:41: 109:56
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:109:41: 109:56
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:109:41: 109:56
        _19 = _16;                       // scope 5 at src/lib.rs:109:41: 109:56
        StorageDead(_16);                // scope 3 at src/lib.rs:109:55: 109:56
        StorageDead(_13);                // scope 3 at src/lib.rs:109:55: 109:56
        StorageDead(_11);                // scope 3 at src/lib.rs:109:55: 109:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:109:55: 109:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:109:55: 109:56
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:109:57: 109:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:109:57: 109:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:109:57: 109:58
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:109:58: 109:58
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:109:58: 109:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58]))) = 1; // scope 0 at src/lib.rs:109:58: 109:58
        return;                          // scope 0 at src/lib.rs:109:58: 109:58
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:109:55: 109:56
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:109:55: 109:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:109:55: 109:56
        StorageDead(_13);                // scope 3 at src/lib.rs:109:55: 109:56
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:109:55: 109:56
        StorageDead(_9);                 // scope 4 at src/lib.rs:109:55: 109:56
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:109:55: 109:56
        StorageDead(_8);                 // scope 3 at src/lib.rs:109:55: 109:56
        drop((((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:109:55: 109:56
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:109:49: 109:50
        StorageDead(_6);                 // scope 2 at src/lib.rs:109:49: 109:50
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:109:57: 109:58
        StorageDead(_4);                 // scope 1 at src/lib.rs:109:57: 109:58
        StorageDead(_3);                 // scope 0 at src/lib.rs:109:57: 109:58
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:109:39: 109:58]))) = 2; // scope 0 at src/lib.rs:109:39: 109:58
        resume;                          // scope 0 at src/lib.rs:109:39: 109:58
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:109:39: 109:58
        StorageLive(_4);                 // scope 0 at src/lib.rs:109:39: 109:58
        StorageLive(_5);                 // scope 0 at src/lib.rs:109:39: 109:58
        StorageLive(_17);                // scope 0 at src/lib.rs:109:39: 109:58
        StorageLive(_18);                // scope 0 at src/lib.rs:109:39: 109:58
        _17 = move _2;                   // scope 0 at src/lib.rs:109:39: 109:58
        StorageDead(_18);                // scope 3 at src/lib.rs:109:55: 109:56
        _20 = move _17;                  // scope 3 at src/lib.rs:109:41: 109:56
        StorageDead(_17);                // scope 3 at src/lib.rs:109:55: 109:56
        goto -> bb3;                     // scope 3 at src/lib.rs:109:41: 109:56
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:109:39: 109:58
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:109:39: 109:58
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:109:39: 109:58
    }
}

fn h9::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:106:38: 106:56]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:106:38: 106:56
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56])).0: &std::string::String); // in scope 0 at src/lib.rs:106:17: 106:18
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56])).1: &u64); // in scope 0 at src/lib.rs:106:29: 106:30
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:106:38: 106:56
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:106:17: 106:18
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:106:40: 106:48
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:106:43: 106:44
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:106:46: 106:47
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:106:40: 106:54
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:106:40: 106:54
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:106:40: 106:54
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:106:40: 106:54
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:106:40: 106:54
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:106:40: 106:54
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:106:40: 106:54
    let mut _15: isize;                  // in scope 0 at src/lib.rs:106:40: 106:54
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:106:40: 106:54
    let mut _18: ();                     // in scope 0 at src/lib.rs:106:40: 106:54
    let mut _19: ();                     // in scope 0 at src/lib.rs:106:38: 106:56
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:106:38: 106:56
    let mut _21: u32;                    // in scope 0 at src/lib.rs:106:38: 106:56
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:106:17: 106:18
        let _4: &u64;                    // in scope 1 at src/lib.rs:106:29: 106:30
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:106:29: 106:30
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:106:40: 106:54
                let _16: ();             // in scope 3 at src/lib.rs:106:40: 106:54
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:106:40: 106:54
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56]))); // scope 0 at src/lib.rs:106:38: 106:56
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:106:38: 106:56
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:106:38: 106:56
        StorageLive(_3);                 // scope 0 at src/lib.rs:106:17: 106:18
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56])).0: &std::string::String); // scope 0 at src/lib.rs:106:17: 106:18
        StorageLive(_4);                 // scope 1 at src/lib.rs:106:29: 106:30
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56])).1: &u64); // scope 1 at src/lib.rs:106:29: 106:30
        StorageLive(_5);                 // scope 2 at src/lib.rs:106:40: 106:48
        StorageLive(_6);                 // scope 2 at src/lib.rs:106:43: 106:44
        _6 = _3;                         // scope 2 at src/lib.rs:106:43: 106:44
        StorageLive(_7);                 // scope 2 at src/lib.rs:106:46: 106:47
        _7 = _4;                         // scope 2 at src/lib.rs:106:46: 106:47
        _5 = h8(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:106:40: 106:48
                                         // mir::Constant
                                         // + span: src/lib.rs:106:40: 106:42
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:106:47: 106:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:106:47: 106:48
        (((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:106:40: 106:54
        goto -> bb3;                     // scope 3 at src/lib.rs:106:40: 106:54
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:106:40: 106:54
        StorageLive(_9);                 // scope 4 at src/lib.rs:106:40: 106:54
        StorageLive(_10);                // scope 4 at src/lib.rs:106:40: 106:54
        StorageLive(_11);                // scope 4 at src/lib.rs:106:40: 106:54
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:106:40: 106:54
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:106:40: 106:54
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:106:40: 106:54
                                         // mir::Constant
                                         // + span: src/lib.rs:106:40: 106:54
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:106:53: 106:54
        StorageLive(_12);                // scope 4 at src/lib.rs:106:40: 106:54
        StorageLive(_13);                // scope 4 at src/lib.rs:106:40: 106:54
        StorageLive(_14);                // scope 4 at src/lib.rs:106:40: 106:54
        _14 = _20;                       // scope 4 at src/lib.rs:106:40: 106:54
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:106:40: 106:54
                                         // mir::Constant
                                         // + span: src/lib.rs:106:40: 106:54
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:106:40: 106:54
        StorageDead(_14);                // scope 4 at src/lib.rs:106:53: 106:54
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:106:40: 106:54
                                         // mir::Constant
                                         // + span: src/lib.rs:106:40: 106:54
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:106:53: 106:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:106:53: 106:54
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:106:40: 106:54
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:106:40: 106:54
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:106:53: 106:54
        StorageDead(_11);                // scope 3 at src/lib.rs:106:53: 106:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:106:53: 106:54
        StorageLive(_17);                // scope 3 at src/lib.rs:106:40: 106:54
        StorageLive(_18);                // scope 3 at src/lib.rs:106:40: 106:54
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:106:40: 106:54
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:106:40: 106:54
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56]))) = 3; // scope 3 at src/lib.rs:106:40: 106:54
        return;                          // scope 3 at src/lib.rs:106:40: 106:54
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:106:40: 106:54
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:106:40: 106:54
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:106:40: 106:54
        _19 = _16;                       // scope 5 at src/lib.rs:106:40: 106:54
        StorageDead(_16);                // scope 3 at src/lib.rs:106:53: 106:54
        StorageDead(_13);                // scope 3 at src/lib.rs:106:53: 106:54
        StorageDead(_11);                // scope 3 at src/lib.rs:106:53: 106:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:106:53: 106:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:106:53: 106:54
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:106:55: 106:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:106:55: 106:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:106:55: 106:56
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:106:56: 106:56
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:106:56: 106:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56]))) = 1; // scope 0 at src/lib.rs:106:56: 106:56
        return;                          // scope 0 at src/lib.rs:106:56: 106:56
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:106:53: 106:54
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:106:53: 106:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:106:53: 106:54
        StorageDead(_13);                // scope 3 at src/lib.rs:106:53: 106:54
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:106:53: 106:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:106:53: 106:54
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:106:53: 106:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:106:53: 106:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:106:53: 106:54
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:106:47: 106:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:106:47: 106:48
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:106:55: 106:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:106:55: 106:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:106:55: 106:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:106:38: 106:56]))) = 2; // scope 0 at src/lib.rs:106:38: 106:56
        resume;                          // scope 0 at src/lib.rs:106:38: 106:56
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:106:38: 106:56
        StorageLive(_4);                 // scope 0 at src/lib.rs:106:38: 106:56
        StorageLive(_5);                 // scope 0 at src/lib.rs:106:38: 106:56
        StorageLive(_17);                // scope 0 at src/lib.rs:106:38: 106:56
        StorageLive(_18);                // scope 0 at src/lib.rs:106:38: 106:56
        _17 = move _2;                   // scope 0 at src/lib.rs:106:38: 106:56
        StorageDead(_18);                // scope 3 at src/lib.rs:106:53: 106:54
        _20 = move _17;                  // scope 3 at src/lib.rs:106:40: 106:54
        StorageDead(_17);                // scope 3 at src/lib.rs:106:53: 106:54
        goto -> bb3;                     // scope 3 at src/lib.rs:106:40: 106:54
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:106:38: 106:56
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:106:38: 106:56
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:106:38: 106:56
    }
}

fn h7::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:104:38: 104:56]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:104:38: 104:56
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56])).0: &std::string::String); // in scope 0 at src/lib.rs:104:17: 104:18
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56])).1: &u64); // in scope 0 at src/lib.rs:104:29: 104:30
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:104:38: 104:56
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:104:17: 104:18
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:104:40: 104:48
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:104:43: 104:44
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:104:46: 104:47
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:104:40: 104:54
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:104:40: 104:54
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:104:40: 104:54
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:104:40: 104:54
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:104:40: 104:54
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:104:40: 104:54
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:104:40: 104:54
    let mut _15: isize;                  // in scope 0 at src/lib.rs:104:40: 104:54
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:104:40: 104:54
    let mut _18: ();                     // in scope 0 at src/lib.rs:104:40: 104:54
    let mut _19: ();                     // in scope 0 at src/lib.rs:104:38: 104:56
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:104:38: 104:56
    let mut _21: u32;                    // in scope 0 at src/lib.rs:104:38: 104:56
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:104:17: 104:18
        let _4: &u64;                    // in scope 1 at src/lib.rs:104:29: 104:30
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:104:29: 104:30
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:104:40: 104:54
                let _16: ();             // in scope 3 at src/lib.rs:104:40: 104:54
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:104:40: 104:54
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56]))); // scope 0 at src/lib.rs:104:38: 104:56
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:104:38: 104:56
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:104:38: 104:56
        StorageLive(_3);                 // scope 0 at src/lib.rs:104:17: 104:18
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56])).0: &std::string::String); // scope 0 at src/lib.rs:104:17: 104:18
        StorageLive(_4);                 // scope 1 at src/lib.rs:104:29: 104:30
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56])).1: &u64); // scope 1 at src/lib.rs:104:29: 104:30
        StorageLive(_5);                 // scope 2 at src/lib.rs:104:40: 104:48
        StorageLive(_6);                 // scope 2 at src/lib.rs:104:43: 104:44
        _6 = _3;                         // scope 2 at src/lib.rs:104:43: 104:44
        StorageLive(_7);                 // scope 2 at src/lib.rs:104:46: 104:47
        _7 = _4;                         // scope 2 at src/lib.rs:104:46: 104:47
        _5 = h6(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:104:40: 104:48
                                         // mir::Constant
                                         // + span: src/lib.rs:104:40: 104:42
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h6}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:104:47: 104:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:104:47: 104:48
        (((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:104:40: 104:54
        goto -> bb3;                     // scope 3 at src/lib.rs:104:40: 104:54
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:104:40: 104:54
        StorageLive(_9);                 // scope 4 at src/lib.rs:104:40: 104:54
        StorageLive(_10);                // scope 4 at src/lib.rs:104:40: 104:54
        StorageLive(_11);                // scope 4 at src/lib.rs:104:40: 104:54
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:104:40: 104:54
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:104:40: 104:54
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:104:40: 104:54
                                         // mir::Constant
                                         // + span: src/lib.rs:104:40: 104:54
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:104:53: 104:54
        StorageLive(_12);                // scope 4 at src/lib.rs:104:40: 104:54
        StorageLive(_13);                // scope 4 at src/lib.rs:104:40: 104:54
        StorageLive(_14);                // scope 4 at src/lib.rs:104:40: 104:54
        _14 = _20;                       // scope 4 at src/lib.rs:104:40: 104:54
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:104:40: 104:54
                                         // mir::Constant
                                         // + span: src/lib.rs:104:40: 104:54
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:104:40: 104:54
        StorageDead(_14);                // scope 4 at src/lib.rs:104:53: 104:54
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:104:40: 104:54
                                         // mir::Constant
                                         // + span: src/lib.rs:104:40: 104:54
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:104:53: 104:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:104:53: 104:54
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:104:40: 104:54
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:104:40: 104:54
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:104:53: 104:54
        StorageDead(_11);                // scope 3 at src/lib.rs:104:53: 104:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:104:53: 104:54
        StorageLive(_17);                // scope 3 at src/lib.rs:104:40: 104:54
        StorageLive(_18);                // scope 3 at src/lib.rs:104:40: 104:54
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:104:40: 104:54
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:104:40: 104:54
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56]))) = 3; // scope 3 at src/lib.rs:104:40: 104:54
        return;                          // scope 3 at src/lib.rs:104:40: 104:54
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:104:40: 104:54
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:104:40: 104:54
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:104:40: 104:54
        _19 = _16;                       // scope 5 at src/lib.rs:104:40: 104:54
        StorageDead(_16);                // scope 3 at src/lib.rs:104:53: 104:54
        StorageDead(_13);                // scope 3 at src/lib.rs:104:53: 104:54
        StorageDead(_11);                // scope 3 at src/lib.rs:104:53: 104:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:104:53: 104:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:104:53: 104:54
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:104:55: 104:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:104:55: 104:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:104:55: 104:56
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:104:56: 104:56
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:104:56: 104:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56]))) = 1; // scope 0 at src/lib.rs:104:56: 104:56
        return;                          // scope 0 at src/lib.rs:104:56: 104:56
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:104:53: 104:54
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:104:53: 104:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:104:53: 104:54
        StorageDead(_13);                // scope 3 at src/lib.rs:104:53: 104:54
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:104:53: 104:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:104:53: 104:54
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:104:53: 104:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:104:53: 104:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:104:53: 104:54
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:104:47: 104:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:104:47: 104:48
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:104:55: 104:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:104:55: 104:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:104:55: 104:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:104:38: 104:56]))) = 2; // scope 0 at src/lib.rs:104:38: 104:56
        resume;                          // scope 0 at src/lib.rs:104:38: 104:56
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:104:38: 104:56
        StorageLive(_4);                 // scope 0 at src/lib.rs:104:38: 104:56
        StorageLive(_5);                 // scope 0 at src/lib.rs:104:38: 104:56
        StorageLive(_17);                // scope 0 at src/lib.rs:104:38: 104:56
        StorageLive(_18);                // scope 0 at src/lib.rs:104:38: 104:56
        _17 = move _2;                   // scope 0 at src/lib.rs:104:38: 104:56
        StorageDead(_18);                // scope 3 at src/lib.rs:104:53: 104:54
        _20 = move _17;                  // scope 3 at src/lib.rs:104:40: 104:54
        StorageDead(_17);                // scope 3 at src/lib.rs:104:53: 104:54
        goto -> bb3;                     // scope 3 at src/lib.rs:104:40: 104:54
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:104:38: 104:56
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:104:38: 104:56
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:104:38: 104:56
    }
}

fn h5::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:102:38: 102:56]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:102:38: 102:56
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56])).0: &std::string::String); // in scope 0 at src/lib.rs:102:17: 102:18
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56])).1: &u64); // in scope 0 at src/lib.rs:102:29: 102:30
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:102:38: 102:56
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:102:17: 102:18
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:102:40: 102:48
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:102:43: 102:44
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:102:46: 102:47
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:102:40: 102:54
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:102:40: 102:54
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:102:40: 102:54
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:102:40: 102:54
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:102:40: 102:54
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:102:40: 102:54
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:102:40: 102:54
    let mut _15: isize;                  // in scope 0 at src/lib.rs:102:40: 102:54
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:102:40: 102:54
    let mut _18: ();                     // in scope 0 at src/lib.rs:102:40: 102:54
    let mut _19: ();                     // in scope 0 at src/lib.rs:102:38: 102:56
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:102:38: 102:56
    let mut _21: u32;                    // in scope 0 at src/lib.rs:102:38: 102:56
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:102:17: 102:18
        let _4: &u64;                    // in scope 1 at src/lib.rs:102:29: 102:30
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:102:29: 102:30
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:102:40: 102:54
                let _16: ();             // in scope 3 at src/lib.rs:102:40: 102:54
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:102:40: 102:54
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56]))); // scope 0 at src/lib.rs:102:38: 102:56
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:102:38: 102:56
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:102:38: 102:56
        StorageLive(_3);                 // scope 0 at src/lib.rs:102:17: 102:18
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56])).0: &std::string::String); // scope 0 at src/lib.rs:102:17: 102:18
        StorageLive(_4);                 // scope 1 at src/lib.rs:102:29: 102:30
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56])).1: &u64); // scope 1 at src/lib.rs:102:29: 102:30
        StorageLive(_5);                 // scope 2 at src/lib.rs:102:40: 102:48
        StorageLive(_6);                 // scope 2 at src/lib.rs:102:43: 102:44
        _6 = _3;                         // scope 2 at src/lib.rs:102:43: 102:44
        StorageLive(_7);                 // scope 2 at src/lib.rs:102:46: 102:47
        _7 = _4;                         // scope 2 at src/lib.rs:102:46: 102:47
        _5 = h4(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:102:40: 102:48
                                         // mir::Constant
                                         // + span: src/lib.rs:102:40: 102:42
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h4}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:102:47: 102:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:102:47: 102:48
        (((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:102:40: 102:54
        goto -> bb3;                     // scope 3 at src/lib.rs:102:40: 102:54
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:102:40: 102:54
        StorageLive(_9);                 // scope 4 at src/lib.rs:102:40: 102:54
        StorageLive(_10);                // scope 4 at src/lib.rs:102:40: 102:54
        StorageLive(_11);                // scope 4 at src/lib.rs:102:40: 102:54
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:102:40: 102:54
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:102:40: 102:54
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:102:40: 102:54
                                         // mir::Constant
                                         // + span: src/lib.rs:102:40: 102:54
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:102:53: 102:54
        StorageLive(_12);                // scope 4 at src/lib.rs:102:40: 102:54
        StorageLive(_13);                // scope 4 at src/lib.rs:102:40: 102:54
        StorageLive(_14);                // scope 4 at src/lib.rs:102:40: 102:54
        _14 = _20;                       // scope 4 at src/lib.rs:102:40: 102:54
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:102:40: 102:54
                                         // mir::Constant
                                         // + span: src/lib.rs:102:40: 102:54
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:102:40: 102:54
        StorageDead(_14);                // scope 4 at src/lib.rs:102:53: 102:54
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:102:40: 102:54
                                         // mir::Constant
                                         // + span: src/lib.rs:102:40: 102:54
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:102:53: 102:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:102:53: 102:54
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:102:40: 102:54
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:102:40: 102:54
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:102:53: 102:54
        StorageDead(_11);                // scope 3 at src/lib.rs:102:53: 102:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:102:53: 102:54
        StorageLive(_17);                // scope 3 at src/lib.rs:102:40: 102:54
        StorageLive(_18);                // scope 3 at src/lib.rs:102:40: 102:54
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:102:40: 102:54
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:102:40: 102:54
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56]))) = 3; // scope 3 at src/lib.rs:102:40: 102:54
        return;                          // scope 3 at src/lib.rs:102:40: 102:54
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:102:40: 102:54
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:102:40: 102:54
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:102:40: 102:54
        _19 = _16;                       // scope 5 at src/lib.rs:102:40: 102:54
        StorageDead(_16);                // scope 3 at src/lib.rs:102:53: 102:54
        StorageDead(_13);                // scope 3 at src/lib.rs:102:53: 102:54
        StorageDead(_11);                // scope 3 at src/lib.rs:102:53: 102:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:102:53: 102:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:102:53: 102:54
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:102:55: 102:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:102:55: 102:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:102:55: 102:56
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:102:56: 102:56
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:102:56: 102:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56]))) = 1; // scope 0 at src/lib.rs:102:56: 102:56
        return;                          // scope 0 at src/lib.rs:102:56: 102:56
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:102:53: 102:54
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:102:53: 102:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:102:53: 102:54
        StorageDead(_13);                // scope 3 at src/lib.rs:102:53: 102:54
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:102:53: 102:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:102:53: 102:54
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:102:53: 102:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:102:53: 102:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:102:53: 102:54
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:102:47: 102:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:102:47: 102:48
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:102:55: 102:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:102:55: 102:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:102:55: 102:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:102:38: 102:56]))) = 2; // scope 0 at src/lib.rs:102:38: 102:56
        resume;                          // scope 0 at src/lib.rs:102:38: 102:56
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:102:38: 102:56
        StorageLive(_4);                 // scope 0 at src/lib.rs:102:38: 102:56
        StorageLive(_5);                 // scope 0 at src/lib.rs:102:38: 102:56
        StorageLive(_17);                // scope 0 at src/lib.rs:102:38: 102:56
        StorageLive(_18);                // scope 0 at src/lib.rs:102:38: 102:56
        _17 = move _2;                   // scope 0 at src/lib.rs:102:38: 102:56
        StorageDead(_18);                // scope 3 at src/lib.rs:102:53: 102:54
        _20 = move _17;                  // scope 3 at src/lib.rs:102:40: 102:54
        StorageDead(_17);                // scope 3 at src/lib.rs:102:53: 102:54
        goto -> bb3;                     // scope 3 at src/lib.rs:102:40: 102:54
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:102:38: 102:56
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:102:38: 102:56
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:102:38: 102:56
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:135:33: 135:80]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _31;          // in scope 0 at src/lib.rs:135:33: 135:80
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:135:33: 135:80
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:135:35: 135:64
    let mut _4: &std::string::String;    // in scope 0 at src/lib.rs:135:39: 135:59
    let _5: &std::string::String;        // in scope 0 at src/lib.rs:135:39: 135:59
    let mut _6: &u64;                    // in scope 0 at src/lib.rs:135:61: 135:63
    let _7: &u64;                        // in scope 0 at src/lib.rs:135:61: 135:63
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:135:35: 135:70
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:135:35: 135:70
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:135:35: 135:70
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:135:35: 135:70
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:135:35: 135:70
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:135:35: 135:70
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:135:35: 135:70
    let mut _15: isize;                  // in scope 0 at src/lib.rs:135:35: 135:70
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:135:35: 135:70
    let mut _18: ();                     // in scope 0 at src/lib.rs:135:35: 135:70
    let _19: ();                         // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:62
    let mut _20: std::fmt::Arguments;    // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let _21: &[std::fmt::ArgumentV1; 0]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _22: &[&str];                // in scope 0 at src/lib.rs:139:35: 139:42
    let mut _23: &[&str; 1];             // in scope 0 at src/lib.rs:139:35: 139:42
    let _24: &[&str; 1];                 // in scope 0 at src/lib.rs:139:35: 139:42
    let mut _25: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _26: &[std::fmt::ArgumentV1; 0]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _28: &[std::fmt::ArgumentV1; 0]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _29: &u64;                   // in scope 0 at src/lib.rs:135:61: 135:63
    let mut _30: ();                     // in scope 0 at src/lib.rs:135:33: 135:80
    let mut _31: std::future::ResumeTy;  // in scope 0 at src/lib.rs:135:33: 135:80
    let mut _32: u32;                    // in scope 0 at src/lib.rs:135:33: 135:80
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80])) as variant#3).1: impl std::future::Future); // in scope 1 at src/lib.rs:135:35: 135:70
        let _16: ();                     // in scope 1 at src/lib.rs:135:35: 135:70
        scope 2 {
        }
        scope 3 {
            debug result => _16;         // in scope 3 at src/lib.rs:135:35: 135:70
        }
    }
    scope 4 {
        debug args => _21;               // in scope 4 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        scope 5 {
            let mut _27: &[&str; 1];     // in scope 5 at src/lib.rs:139:35: 139:42
        }
    }

    bb0: {
        _32 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80]))); // scope 0 at src/lib.rs:135:33: 135:80
        switchInt(move _32) -> [0_u32: bb1, 1_u32: bb28, 2_u32: bb27, 3_u32: bb26, otherwise: bb29]; // scope 0 at src/lib.rs:135:33: 135:80
    }

    bb1: {
        _31 = move _2;                   // scope 0 at src/lib.rs:135:33: 135:80
        StorageLive(_3);                 // scope 0 at src/lib.rs:135:35: 135:64
        StorageLive(_4);                 // scope 0 at src/lib.rs:135:39: 135:59
        StorageLive(_5);                 // scope 0 at src/lib.rs:135:39: 135:59
        (((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80])) as variant#3).0: std::string::String) = <String as From<&str>>::from(const "owo") -> [return: bb2, unwind: bb23]; // scope 0 at src/lib.rs:135:40: 135:59
                                         // mir::Constant
                                         // + span: src/lib.rs:135:40: 135:52
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<std::string::String as std::convert::From<&str>>::from}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [111, 119, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 })
                                         // mir::Constant
                                         // + span: src/lib.rs:135:53: 135:58
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [111, 119, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 }) }
    }

    bb2: {
        _5 = &(((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80])) as variant#3).0: std::string::String); // scope 0 at src/lib.rs:135:39: 135:59
        _4 = _5;                         // scope 0 at src/lib.rs:135:39: 135:59
        StorageLive(_6);                 // scope 0 at src/lib.rs:135:61: 135:63
        StorageLive(_7);                 // scope 0 at src/lib.rs:135:61: 135:63
        _29 = const f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::promoted[2]; // scope 0 at src/lib.rs:135:61: 135:63
                                         // ty::Const
                                         // + ty: &u64
                                         // + val: Unevaluated(f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[2]))
                                         // mir::Constant
                                         // + span: src/lib.rs:135:61: 135:63
                                         // + literal: Const { ty: &u64, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:91 ~ deeply_nested_multi[cdc4]::f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}), const_param_did: None }, substs_: Some([<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>]), promoted: Some(promoted[2]) }) }
        _7 = _29;                        // scope 0 at src/lib.rs:135:61: 135:63
        _6 = _7;                         // scope 0 at src/lib.rs:135:61: 135:63
        _3 = h19(move _4, move _6) -> [return: bb3, unwind: bb21]; // scope 0 at src/lib.rs:135:35: 135:64
                                         // mir::Constant
                                         // + span: src/lib.rs:135:35: 135:38
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h19}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_6);                 // scope 0 at src/lib.rs:135:63: 135:64
        StorageDead(_4);                 // scope 0 at src/lib.rs:135:63: 135:64
        (((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80])) as variant#3).1: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:135:35: 135:70
        goto -> bb4;                     // scope 1 at src/lib.rs:135:35: 135:70
    }

    bb4: {
        StorageLive(_8);                 // scope 1 at src/lib.rs:135:35: 135:70
        StorageLive(_9);                 // scope 2 at src/lib.rs:135:35: 135:70
        StorageLive(_10);                // scope 2 at src/lib.rs:135:35: 135:70
        StorageLive(_11);                // scope 2 at src/lib.rs:135:35: 135:70
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80])) as variant#3).1: impl std::future::Future); // scope 2 at src/lib.rs:135:35: 135:70
        _10 = &mut (*_11);               // scope 2 at src/lib.rs:135:35: 135:70
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb5, unwind: bb19]; // scope 2 at src/lib.rs:135:35: 135:70
                                         // mir::Constant
                                         // + span: src/lib.rs:135:35: 135:70
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_10);                // scope 2 at src/lib.rs:135:69: 135:70
        StorageLive(_12);                // scope 2 at src/lib.rs:135:35: 135:70
        StorageLive(_13);                // scope 2 at src/lib.rs:135:35: 135:70
        StorageLive(_14);                // scope 2 at src/lib.rs:135:35: 135:70
        _14 = _31;                       // scope 2 at src/lib.rs:135:35: 135:70
        _13 = get_context(move _14) -> [return: bb6, unwind: bb17]; // scope 2 at src/lib.rs:135:35: 135:70
                                         // mir::Constant
                                         // + span: src/lib.rs:135:35: 135:70
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _12 = &mut (*_13);               // scope 2 at src/lib.rs:135:35: 135:70
        StorageDead(_14);                // scope 2 at src/lib.rs:135:69: 135:70
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb7, unwind: bb18]; // scope 2 at src/lib.rs:135:35: 135:70
                                         // mir::Constant
                                         // + span: src/lib.rs:135:35: 135:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_12);                // scope 2 at src/lib.rs:135:69: 135:70
        StorageDead(_9);                 // scope 2 at src/lib.rs:135:69: 135:70
        _15 = discriminant(_8);          // scope 1 at src/lib.rs:135:35: 135:70
        switchInt(move _15) -> [0_isize: bb10, 1_isize: bb8, otherwise: bb9]; // scope 1 at src/lib.rs:135:35: 135:70
    }

    bb8: {
        StorageDead(_13);                // scope 1 at src/lib.rs:135:69: 135:70
        StorageDead(_11);                // scope 1 at src/lib.rs:135:69: 135:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:135:69: 135:70
        StorageLive(_17);                // scope 1 at src/lib.rs:135:35: 135:70
        StorageLive(_18);                // scope 1 at src/lib.rs:135:35: 135:70
        ((_0 as Yielded).0: ()) = move _18; // scope 1 at src/lib.rs:135:35: 135:70
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:135:35: 135:70
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80]))) = 3; // scope 1 at src/lib.rs:135:35: 135:70
        return;                          // scope 1 at src/lib.rs:135:35: 135:70
    }

    bb9: {
        unreachable;                     // scope 1 at src/lib.rs:135:35: 135:70
    }

    bb10: {
        StorageLive(_16);                // scope 1 at src/lib.rs:135:35: 135:70
        _16 = ((_8 as Ready).0: ());     // scope 1 at src/lib.rs:135:35: 135:70
        StorageDead(_16);                // scope 1 at src/lib.rs:135:69: 135:70
        StorageDead(_13);                // scope 1 at src/lib.rs:135:69: 135:70
        StorageDead(_11);                // scope 1 at src/lib.rs:135:69: 135:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:135:69: 135:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80])) as variant#3).1: impl std::future::Future)) -> [return: bb11, unwind: bb22]; // scope 0 at src/lib.rs:135:69: 135:70
    }

    bb11: {
        StorageDead(_7);                 // scope 0 at src/lib.rs:135:70: 135:71
        drop((((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80])) as variant#3).0: std::string::String)) -> [return: bb12, unwind: bb24]; // scope 0 at src/lib.rs:135:70: 135:71
    }

    bb12: {
        StorageDead(_5);                 // scope 0 at src/lib.rs:135:70: 135:71
        StorageDead(_3);                 // scope 0 at src/lib.rs:135:70: 135:71
        StorageLive(_19);                // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:62
        StorageLive(_20);                // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_21);                // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        _28 = const f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::promoted[1]; // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: &[std::fmt::ArgumentV1; 0]
                                         // + val: Unevaluated(f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // + literal: Const { ty: &[std::fmt::ArgumentV1; 0], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:91 ~ deeply_nested_multi[cdc4]::f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}), const_param_did: None }, substs_: Some([<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>]), promoted: Some(promoted[1]) }) }
        _21 = _28;                       // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_22);                // scope 5 at src/lib.rs:139:35: 139:42
        StorageLive(_23);                // scope 5 at src/lib.rs:139:35: 139:42
        StorageLive(_24);                // scope 5 at src/lib.rs:139:35: 139:42
        _27 = const f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::promoted[0]; // scope 5 at src/lib.rs:139:35: 139:42
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: src/lib.rs:139:35: 139:42
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:91 ~ deeply_nested_multi[cdc4]::f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}), const_param_did: None }, substs_: Some([<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>]), promoted: Some(promoted[0]) }) }
        _24 = _27;                       // scope 5 at src/lib.rs:139:35: 139:42
        _23 = _24;                       // scope 5 at src/lib.rs:139:35: 139:42
        _22 = move _23 as &[&str] (Pointer(Unsize)); // scope 5 at src/lib.rs:139:35: 139:42
        StorageDead(_23);                // scope 5 at src/lib.rs:139:41: 139:42
        StorageLive(_25);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageLive(_26);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        _26 = _21;                       // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        _25 = move _26 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        StorageDead(_26);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        _20 = Arguments::new_v1(move _22, move _25) -> [return: bb13, unwind: bb15]; // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_25);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_22);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_24);                // scope 4 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_21);                // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        _19 = _print(move _20) -> [return: bb14, unwind: bb16]; // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_20);                // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:61: 97:62
        StorageDead(_19);                // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:62: 97:63
        _30 = const ();                  // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:96:23: 98:6
        ((_0 as Complete).0: ()) = move _30; // scope 0 at src/lib.rs:135:80: 135:80
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:135:80: 135:80
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80]))) = 1; // scope 0 at src/lib.rs:135:80: 135:80
        return;                          // scope 0 at src/lib.rs:135:80: 135:80
    }

    bb15 (cleanup): {
        StorageDead(_25);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_22);                // scope 5 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_24);                // scope 4 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        StorageDead(_21);                // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:60: 97:61
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_20);                // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:61: 97:62
        StorageDead(_19);                // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:62: 97:63
        goto -> bb25;                    // scope 0 at no-location
    }

    bb17 (cleanup): {
        StorageDead(_14);                // scope 2 at src/lib.rs:135:69: 135:70
        goto -> bb18;                    // scope 2 at no-location
    }

    bb18 (cleanup): {
        StorageDead(_12);                // scope 2 at src/lib.rs:135:69: 135:70
        StorageDead(_9);                 // scope 2 at src/lib.rs:135:69: 135:70
        StorageDead(_13);                // scope 1 at src/lib.rs:135:69: 135:70
        goto -> bb20;                    // scope 1 at no-location
    }

    bb19 (cleanup): {
        StorageDead(_10);                // scope 2 at src/lib.rs:135:69: 135:70
        StorageDead(_9);                 // scope 2 at src/lib.rs:135:69: 135:70
        goto -> bb20;                    // scope 2 at no-location
    }

    bb20 (cleanup): {
        StorageDead(_11);                // scope 1 at src/lib.rs:135:69: 135:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:135:69: 135:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80])) as variant#3).1: impl std::future::Future)) -> bb22; // scope 0 at src/lib.rs:135:69: 135:70
    }

    bb21 (cleanup): {
        StorageDead(_6);                 // scope 0 at src/lib.rs:135:63: 135:64
        StorageDead(_4);                 // scope 0 at src/lib.rs:135:63: 135:64
        goto -> bb22;                    // scope 0 at no-location
    }

    bb22 (cleanup): {
        StorageDead(_7);                 // scope 0 at src/lib.rs:135:70: 135:71
        drop((((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80])) as variant#3).0: std::string::String)) -> bb24; // scope 0 at src/lib.rs:135:70: 135:71
    }

    bb23 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:135:63: 135:64
        goto -> bb24;                    // scope 0 at no-location
    }

    bb24 (cleanup): {
        StorageDead(_5);                 // scope 0 at src/lib.rs:135:70: 135:71
        StorageDead(_3);                 // scope 0 at src/lib.rs:135:70: 135:71
        goto -> bb25;                    // scope 0 at no-location
    }

    bb25 (cleanup): {
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:135:33: 135:80]))) = 2; // scope 0 at src/lib.rs:135:33: 135:80
        resume;                          // scope 0 at src/lib.rs:135:33: 135:80
    }

    bb26: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:135:33: 135:80
        StorageLive(_5);                 // scope 0 at src/lib.rs:135:33: 135:80
        StorageLive(_7);                 // scope 0 at src/lib.rs:135:33: 135:80
        StorageLive(_17);                // scope 0 at src/lib.rs:135:33: 135:80
        StorageLive(_18);                // scope 0 at src/lib.rs:135:33: 135:80
        _17 = move _2;                   // scope 0 at src/lib.rs:135:33: 135:80
        StorageDead(_18);                // scope 1 at src/lib.rs:135:69: 135:70
        _31 = move _17;                  // scope 1 at src/lib.rs:135:35: 135:70
        StorageDead(_17);                // scope 1 at src/lib.rs:135:69: 135:70
        goto -> bb4;                     // scope 1 at src/lib.rs:135:35: 135:70
    }

    bb27: {
        assert(const false, "`async fn` resumed after panicking") -> bb27; // scope 0 at src/lib.rs:135:33: 135:80
    }

    bb28: {
        assert(const false, "`async fn` resumed after completion") -> bb28; // scope 0 at src/lib.rs:135:33: 135:80
    }

    bb29: {
        unreachable;                     // scope 0 at src/lib.rs:135:33: 135:80
    }
}

promoted[0] in f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at src/lib.rs:139:35: 139:42
    let mut _1: [&str; 1];               // in scope 0 at src/lib.rs:139:35: 139:42

    bb0: {
        _1 = [const "hello\n"];          // scope 0 at src/lib.rs:139:35: 139:42
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/lib.rs:139:35: 139:42
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _0 = &_1;                        // scope 0 at src/lib.rs:139:35: 139:42
        return;                          // scope 0 at src/lib.rs:139:35: 139:42
    }
}

promoted[1] in f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}: &[ArgumentV1; 0] = {
    let mut _0: &[std::fmt::ArgumentV1; 0]; // return place in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    let mut _1: [std::fmt::ArgumentV1; 0]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        _0 = &_1;                        // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
        return;                          // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/macros.rs:97:28: 97:61
    }
}

promoted[2] in f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}: &u64 = {
    let mut _0: &u64;                    // return place in scope 0 at src/lib.rs:135:61: 135:63
    let mut _1: u64;                     // in scope 0 at src/lib.rs:135:62: 135:63

    bb0: {
        _1 = const 0_u64;                // scope 0 at src/lib.rs:135:62: 135:63
        _0 = &_1;                        // scope 0 at src/lib.rs:135:61: 135:63
        return;                          // scope 0 at src/lib.rs:135:61: 135:63
    }
}

fn h3::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:100:38: 100:56]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:100:38: 100:56
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56])).0: &std::string::String); // in scope 0 at src/lib.rs:100:17: 100:18
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56])).1: &u64); // in scope 0 at src/lib.rs:100:29: 100:30
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:100:38: 100:56
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:100:17: 100:18
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:100:40: 100:48
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:100:43: 100:44
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:100:46: 100:47
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:100:40: 100:54
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:100:40: 100:54
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:100:40: 100:54
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:100:40: 100:54
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:100:40: 100:54
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:100:40: 100:54
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:100:40: 100:54
    let mut _15: isize;                  // in scope 0 at src/lib.rs:100:40: 100:54
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:100:40: 100:54
    let mut _18: ();                     // in scope 0 at src/lib.rs:100:40: 100:54
    let mut _19: ();                     // in scope 0 at src/lib.rs:100:38: 100:56
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:100:38: 100:56
    let mut _21: u32;                    // in scope 0 at src/lib.rs:100:38: 100:56
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:100:17: 100:18
        let _4: &u64;                    // in scope 1 at src/lib.rs:100:29: 100:30
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:100:29: 100:30
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:100:40: 100:54
                let _16: ();             // in scope 3 at src/lib.rs:100:40: 100:54
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:100:40: 100:54
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56]))); // scope 0 at src/lib.rs:100:38: 100:56
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:100:38: 100:56
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:100:38: 100:56
        StorageLive(_3);                 // scope 0 at src/lib.rs:100:17: 100:18
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56])).0: &std::string::String); // scope 0 at src/lib.rs:100:17: 100:18
        StorageLive(_4);                 // scope 1 at src/lib.rs:100:29: 100:30
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56])).1: &u64); // scope 1 at src/lib.rs:100:29: 100:30
        StorageLive(_5);                 // scope 2 at src/lib.rs:100:40: 100:48
        StorageLive(_6);                 // scope 2 at src/lib.rs:100:43: 100:44
        _6 = _3;                         // scope 2 at src/lib.rs:100:43: 100:44
        StorageLive(_7);                 // scope 2 at src/lib.rs:100:46: 100:47
        _7 = _4;                         // scope 2 at src/lib.rs:100:46: 100:47
        _5 = h2(move _6, move _7) -> [return: bb2, unwind: bb15]; // scope 2 at src/lib.rs:100:40: 100:48
                                         // mir::Constant
                                         // + span: src/lib.rs:100:40: 100:42
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h2}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:100:47: 100:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:100:47: 100:48
        (((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:100:40: 100:54
        goto -> bb3;                     // scope 3 at src/lib.rs:100:40: 100:54
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:100:40: 100:54
        StorageLive(_9);                 // scope 4 at src/lib.rs:100:40: 100:54
        StorageLive(_10);                // scope 4 at src/lib.rs:100:40: 100:54
        StorageLive(_11);                // scope 4 at src/lib.rs:100:40: 100:54
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:100:40: 100:54
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:100:40: 100:54
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb13]; // scope 4 at src/lib.rs:100:40: 100:54
                                         // mir::Constant
                                         // + span: src/lib.rs:100:40: 100:54
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:100:53: 100:54
        StorageLive(_12);                // scope 4 at src/lib.rs:100:40: 100:54
        StorageLive(_13);                // scope 4 at src/lib.rs:100:40: 100:54
        StorageLive(_14);                // scope 4 at src/lib.rs:100:40: 100:54
        _14 = _20;                       // scope 4 at src/lib.rs:100:40: 100:54
        _13 = get_context(move _14) -> [return: bb5, unwind: bb11]; // scope 4 at src/lib.rs:100:40: 100:54
                                         // mir::Constant
                                         // + span: src/lib.rs:100:40: 100:54
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:100:40: 100:54
        StorageDead(_14);                // scope 4 at src/lib.rs:100:53: 100:54
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb12]; // scope 4 at src/lib.rs:100:40: 100:54
                                         // mir::Constant
                                         // + span: src/lib.rs:100:40: 100:54
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:100:53: 100:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:100:53: 100:54
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:100:40: 100:54
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:100:40: 100:54
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:100:53: 100:54
        StorageDead(_11);                // scope 3 at src/lib.rs:100:53: 100:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:100:53: 100:54
        StorageLive(_17);                // scope 3 at src/lib.rs:100:40: 100:54
        StorageLive(_18);                // scope 3 at src/lib.rs:100:40: 100:54
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:100:40: 100:54
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:100:40: 100:54
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56]))) = 3; // scope 3 at src/lib.rs:100:40: 100:54
        return;                          // scope 3 at src/lib.rs:100:40: 100:54
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:100:40: 100:54
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:100:40: 100:54
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:100:40: 100:54
        _19 = _16;                       // scope 5 at src/lib.rs:100:40: 100:54
        StorageDead(_16);                // scope 3 at src/lib.rs:100:53: 100:54
        StorageDead(_13);                // scope 3 at src/lib.rs:100:53: 100:54
        StorageDead(_11);                // scope 3 at src/lib.rs:100:53: 100:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:100:53: 100:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 2 at src/lib.rs:100:53: 100:54
    }

    bb10: {
        StorageDead(_5);                 // scope 2 at src/lib.rs:100:55: 100:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:100:55: 100:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:100:55: 100:56
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:100:56: 100:56
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:100:56: 100:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56]))) = 1; // scope 0 at src/lib.rs:100:56: 100:56
        return;                          // scope 0 at src/lib.rs:100:56: 100:56
    }

    bb11 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:100:53: 100:54
        goto -> bb12;                    // scope 4 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:100:53: 100:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:100:53: 100:54
        StorageDead(_13);                // scope 3 at src/lib.rs:100:53: 100:54
        goto -> bb14;                    // scope 3 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:100:53: 100:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:100:53: 100:54
        goto -> bb14;                    // scope 4 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:100:53: 100:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:100:53: 100:54
        drop((((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 2 at src/lib.rs:100:53: 100:54
    }

    bb15 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:100:47: 100:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:100:47: 100:48
        goto -> bb16;                    // scope 2 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:100:55: 100:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:100:55: 100:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:100:55: 100:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:100:38: 100:56]))) = 2; // scope 0 at src/lib.rs:100:38: 100:56
        resume;                          // scope 0 at src/lib.rs:100:38: 100:56
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:100:38: 100:56
        StorageLive(_4);                 // scope 0 at src/lib.rs:100:38: 100:56
        StorageLive(_5);                 // scope 0 at src/lib.rs:100:38: 100:56
        StorageLive(_17);                // scope 0 at src/lib.rs:100:38: 100:56
        StorageLive(_18);                // scope 0 at src/lib.rs:100:38: 100:56
        _17 = move _2;                   // scope 0 at src/lib.rs:100:38: 100:56
        StorageDead(_18);                // scope 3 at src/lib.rs:100:53: 100:54
        _20 = move _17;                  // scope 3 at src/lib.rs:100:40: 100:54
        StorageDead(_17);                // scope 3 at src/lib.rs:100:53: 100:54
        goto -> bb3;                     // scope 3 at src/lib.rs:100:40: 100:54
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:100:38: 100:56
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:100:38: 100:56
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:100:38: 100:56
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:129:33: 129:64]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:129:33: 129:64
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:129:33: 129:64
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:130:27: 130:64
    let mut _4: [static generator@src/lib.rs:130:33: 130:64]; // in scope 0 at src/lib.rs:130:33: 130:64
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:130:27: 130:70
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:130:27: 130:70
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:130:27: 130:70
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:130:27: 130:70
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:130:27: 130:70
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:130:27: 130:70
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:130:27: 130:70
    let mut _12: isize;                  // in scope 0 at src/lib.rs:130:27: 130:70
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:130:27: 130:70
    let mut _15: ();                     // in scope 0 at src/lib.rs:130:27: 130:70
    let mut _16: ();                     // in scope 0 at src/lib.rs:129:33: 129:64
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:129:33: 129:64
    let mut _18: u32;                    // in scope 0 at src/lib.rs:129:33: 129:64
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:129:33: 129:64])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:130:27: 130:70
        let _13: ();                     // in scope 1 at src/lib.rs:130:27: 130:70
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:130:27: 130:70
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:129:33: 129:64]))); // scope 0 at src/lib.rs:129:33: 129:64
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:129:33: 129:64
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:129:33: 129:64
        StorageLive(_3);                 // scope 0 at src/lib.rs:130:27: 130:64
        StorageLive(_4);                 // scope 0 at src/lib.rs:130:33: 130:64
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:130:33: 130:64
        _3 = from_generator::<[static generator@src/lib.rs:130:33: 130:64]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:130:27: 130:64
                                         // mir::Constant
                                         // + span: src/lib.rs:130:33: 130:64
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:130:33: 130:64]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:130:33: 130:64]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:130:63: 130:64
        (((*(_1.0: &mut [static generator@src/lib.rs:129:33: 129:64])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:130:27: 130:70
        goto -> bb3;                     // scope 1 at src/lib.rs:130:27: 130:70
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:130:27: 130:70
        StorageLive(_6);                 // scope 2 at src/lib.rs:130:27: 130:70
        StorageLive(_7);                 // scope 2 at src/lib.rs:130:27: 130:70
        StorageLive(_8);                 // scope 2 at src/lib.rs:130:27: 130:70
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:129:33: 129:64])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:130:27: 130:70
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:130:27: 130:70
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:130:27: 130:70
                                         // mir::Constant
                                         // + span: src/lib.rs:130:27: 130:70
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:130:69: 130:70
        StorageLive(_9);                 // scope 2 at src/lib.rs:130:27: 130:70
        StorageLive(_10);                // scope 2 at src/lib.rs:130:27: 130:70
        StorageLive(_11);                // scope 2 at src/lib.rs:130:27: 130:70
        _11 = _17;                       // scope 2 at src/lib.rs:130:27: 130:70
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:130:27: 130:70
                                         // mir::Constant
                                         // + span: src/lib.rs:130:27: 130:70
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:130:27: 130:70
        StorageDead(_11);                // scope 2 at src/lib.rs:130:69: 130:70
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:130:27: 130:70
                                         // mir::Constant
                                         // + span: src/lib.rs:130:27: 130:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:130:69: 130:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:130:69: 130:70
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:130:27: 130:70
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:130:27: 130:70
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:130:69: 130:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:130:69: 130:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:130:69: 130:70
        StorageLive(_14);                // scope 1 at src/lib.rs:130:27: 130:70
        StorageLive(_15);                // scope 1 at src/lib.rs:130:27: 130:70
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:130:27: 130:70
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:130:27: 130:70
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:129:33: 129:64]))) = 3; // scope 1 at src/lib.rs:130:27: 130:70
        return;                          // scope 1 at src/lib.rs:130:27: 130:70
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:130:27: 130:70
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:130:27: 130:70
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:130:27: 130:70
        _16 = _13;                       // scope 3 at src/lib.rs:130:27: 130:70
        StorageDead(_13);                // scope 1 at src/lib.rs:130:69: 130:70
        StorageDead(_10);                // scope 1 at src/lib.rs:130:69: 130:70
        StorageDead(_8);                 // scope 1 at src/lib.rs:130:69: 130:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:130:69: 130:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:129:33: 129:64])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:130:69: 130:70
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:129:63: 129:64
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:129:64: 129:64
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:129:64: 129:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:129:33: 129:64]))) = 1; // scope 0 at src/lib.rs:129:64: 129:64
        return;                          // scope 0 at src/lib.rs:129:64: 129:64
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:130:69: 130:70
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:130:69: 130:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:130:69: 130:70
        StorageDead(_10);                // scope 1 at src/lib.rs:130:69: 130:70
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:130:69: 130:70
        StorageDead(_6);                 // scope 2 at src/lib.rs:130:69: 130:70
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:130:69: 130:70
        StorageDead(_5);                 // scope 1 at src/lib.rs:130:69: 130:70
        drop((((*(_1.0: &mut [static generator@src/lib.rs:129:33: 129:64])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:130:69: 130:70
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:130:63: 130:64
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:129:63: 129:64
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:129:33: 129:64]))) = 2; // scope 0 at src/lib.rs:129:33: 129:64
        resume;                          // scope 0 at src/lib.rs:129:33: 129:64
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:129:33: 129:64
        StorageLive(_14);                // scope 0 at src/lib.rs:129:33: 129:64
        StorageLive(_15);                // scope 0 at src/lib.rs:129:33: 129:64
        _14 = move _2;                   // scope 0 at src/lib.rs:129:33: 129:64
        StorageDead(_15);                // scope 1 at src/lib.rs:130:69: 130:70
        _17 = move _14;                  // scope 1 at src/lib.rs:130:27: 130:70
        StorageDead(_14);                // scope 1 at src/lib.rs:130:69: 130:70
        goto -> bb3;                     // scope 1 at src/lib.rs:130:27: 130:70
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:129:33: 129:64
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:129:33: 129:64
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:129:33: 129:64
    }
}

fn h1::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:98:38: 98:56]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _20;          // in scope 0 at src/lib.rs:98:38: 98:56
    debug v => ((*(_1.0: &mut [static generator@src/lib.rs:98:38: 98:56])).0: &std::string::String); // in scope 0 at src/lib.rs:98:17: 98:18
    debug x => ((*(_1.0: &mut [static generator@src/lib.rs:98:38: 98:56])).1: &u64); // in scope 0 at src/lib.rs:98:29: 98:30
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:98:38: 98:56
    let _3: &std::string::String;        // in scope 0 at src/lib.rs:98:17: 98:18
    let mut _5: impl std::future::Future; // in scope 0 at src/lib.rs:98:40: 98:48
    let mut _6: &std::string::String;    // in scope 0 at src/lib.rs:98:43: 98:44
    let mut _7: &u64;                    // in scope 0 at src/lib.rs:98:46: 98:47
    let mut _8: std::task::Poll<()>;     // in scope 0 at src/lib.rs:98:40: 98:54
    let mut _9: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:98:40: 98:54
    let mut _10: &mut impl std::future::Future; // in scope 0 at src/lib.rs:98:40: 98:54
    let mut _11: &mut impl std::future::Future; // in scope 0 at src/lib.rs:98:40: 98:54
    let mut _12: &mut std::task::Context; // in scope 0 at src/lib.rs:98:40: 98:54
    let mut _13: &mut std::task::Context; // in scope 0 at src/lib.rs:98:40: 98:54
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:98:40: 98:54
    let mut _15: isize;                  // in scope 0 at src/lib.rs:98:40: 98:54
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:98:40: 98:54
    let mut _18: ();                     // in scope 0 at src/lib.rs:98:40: 98:54
    let mut _19: ();                     // in scope 0 at src/lib.rs:98:38: 98:56
    let mut _20: std::future::ResumeTy;  // in scope 0 at src/lib.rs:98:38: 98:56
    let mut _21: u32;                    // in scope 0 at src/lib.rs:98:38: 98:56
    scope 1 {
        debug v => _3;                   // in scope 1 at src/lib.rs:98:17: 98:18
        let _4: &u64;                    // in scope 1 at src/lib.rs:98:29: 98:30
        scope 2 {
            debug x => _4;               // in scope 2 at src/lib.rs:98:29: 98:30
            scope 3 {
                debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:98:38: 98:56])) as variant#3).0: impl std::future::Future); // in scope 3 at src/lib.rs:98:40: 98:54
                let _16: ();             // in scope 3 at src/lib.rs:98:40: 98:54
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at src/lib.rs:98:40: 98:54
                }
            }
        }
    }

    bb0: {
        _21 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:98:38: 98:56]))); // scope 0 at src/lib.rs:98:38: 98:56
        switchInt(move _21) -> [0_u32: bb1, 1_u32: bb18, 2_u32: bb17, 3_u32: bb16, otherwise: bb19]; // scope 0 at src/lib.rs:98:38: 98:56
    }

    bb1: {
        _20 = move _2;                   // scope 0 at src/lib.rs:98:38: 98:56
        StorageLive(_3);                 // scope 0 at src/lib.rs:98:17: 98:18
        _3 = ((*(_1.0: &mut [static generator@src/lib.rs:98:38: 98:56])).0: &std::string::String); // scope 0 at src/lib.rs:98:17: 98:18
        StorageLive(_4);                 // scope 1 at src/lib.rs:98:29: 98:30
        _4 = ((*(_1.0: &mut [static generator@src/lib.rs:98:38: 98:56])).1: &u64); // scope 1 at src/lib.rs:98:29: 98:30
        StorageLive(_5);                 // scope 2 at src/lib.rs:98:40: 98:48
        StorageLive(_6);                 // scope 2 at src/lib.rs:98:43: 98:44
        _6 = _3;                         // scope 2 at src/lib.rs:98:43: 98:44
        StorageLive(_7);                 // scope 2 at src/lib.rs:98:46: 98:47
        _7 = _4;                         // scope 2 at src/lib.rs:98:46: 98:47
        _5 = h0(move _6, move _7) -> [return: bb2, unwind: bb14]; // scope 2 at src/lib.rs:98:40: 98:48
                                         // mir::Constant
                                         // + span: src/lib.rs:98:40: 98:42
                                         // + literal: Const { ty: for<'_, '_> fn(&std::string::String, &u64) -> impl for<'_, '_> std::future::Future {h0}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:98:47: 98:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:98:47: 98:48
        (((*(_1.0: &mut [static generator@src/lib.rs:98:38: 98:56])) as variant#3).0: impl std::future::Future) = move _5; // scope 2 at src/lib.rs:98:40: 98:54
        goto -> bb3;                     // scope 3 at src/lib.rs:98:40: 98:54
    }

    bb3: {
        StorageLive(_8);                 // scope 3 at src/lib.rs:98:40: 98:54
        StorageLive(_9);                 // scope 4 at src/lib.rs:98:40: 98:54
        StorageLive(_10);                // scope 4 at src/lib.rs:98:40: 98:54
        StorageLive(_11);                // scope 4 at src/lib.rs:98:40: 98:54
        _11 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:98:38: 98:56])) as variant#3).0: impl std::future::Future); // scope 4 at src/lib.rs:98:40: 98:54
        _10 = &mut (*_11);               // scope 4 at src/lib.rs:98:40: 98:54
        _9 = Pin::<&mut impl Future>::new_unchecked(move _10) -> [return: bb4, unwind: bb12]; // scope 4 at src/lib.rs:98:40: 98:54
                                         // mir::Constant
                                         // + span: src/lib.rs:98:40: 98:54
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 4 at src/lib.rs:98:53: 98:54
        StorageLive(_12);                // scope 4 at src/lib.rs:98:40: 98:54
        StorageLive(_13);                // scope 4 at src/lib.rs:98:40: 98:54
        StorageLive(_14);                // scope 4 at src/lib.rs:98:40: 98:54
        _14 = _20;                       // scope 4 at src/lib.rs:98:40: 98:54
        _13 = get_context(move _14) -> [return: bb5, unwind: bb10]; // scope 4 at src/lib.rs:98:40: 98:54
                                         // mir::Constant
                                         // + span: src/lib.rs:98:40: 98:54
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_13);               // scope 4 at src/lib.rs:98:40: 98:54
        StorageDead(_14);                // scope 4 at src/lib.rs:98:53: 98:54
        _8 = <impl Future as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb11]; // scope 4 at src/lib.rs:98:40: 98:54
                                         // mir::Constant
                                         // + span: src/lib.rs:98:40: 98:54
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_12);                // scope 4 at src/lib.rs:98:53: 98:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:98:53: 98:54
        _15 = discriminant(_8);          // scope 3 at src/lib.rs:98:40: 98:54
        switchInt(move _15) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 3 at src/lib.rs:98:40: 98:54
    }

    bb7: {
        StorageDead(_13);                // scope 3 at src/lib.rs:98:53: 98:54
        StorageDead(_11);                // scope 3 at src/lib.rs:98:53: 98:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:98:53: 98:54
        StorageLive(_17);                // scope 3 at src/lib.rs:98:40: 98:54
        StorageLive(_18);                // scope 3 at src/lib.rs:98:40: 98:54
        ((_0 as Yielded).0: ()) = move _18; // scope 3 at src/lib.rs:98:40: 98:54
        discriminant(_0) = 0;            // scope 3 at src/lib.rs:98:40: 98:54
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:98:38: 98:56]))) = 3; // scope 3 at src/lib.rs:98:40: 98:54
        return;                          // scope 3 at src/lib.rs:98:40: 98:54
    }

    bb8: {
        unreachable;                     // scope 3 at src/lib.rs:98:40: 98:54
    }

    bb9: {
        StorageLive(_16);                // scope 3 at src/lib.rs:98:40: 98:54
        _16 = ((_8 as Ready).0: ());     // scope 3 at src/lib.rs:98:40: 98:54
        _19 = _16;                       // scope 5 at src/lib.rs:98:40: 98:54
        StorageDead(_16);                // scope 3 at src/lib.rs:98:53: 98:54
        StorageDead(_13);                // scope 3 at src/lib.rs:98:53: 98:54
        StorageDead(_11);                // scope 3 at src/lib.rs:98:53: 98:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:98:53: 98:54
        StorageDead(_5);                 // scope 2 at src/lib.rs:98:55: 98:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:98:55: 98:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:98:55: 98:56
        ((_0 as Complete).0: ()) = move _19; // scope 0 at src/lib.rs:98:56: 98:56
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:98:56: 98:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:98:38: 98:56]))) = 1; // scope 0 at src/lib.rs:98:56: 98:56
        return;                          // scope 0 at src/lib.rs:98:56: 98:56
    }

    bb10 (cleanup): {
        StorageDead(_14);                // scope 4 at src/lib.rs:98:53: 98:54
        goto -> bb11;                    // scope 4 at no-location
    }

    bb11 (cleanup): {
        StorageDead(_12);                // scope 4 at src/lib.rs:98:53: 98:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:98:53: 98:54
        StorageDead(_13);                // scope 3 at src/lib.rs:98:53: 98:54
        goto -> bb13;                    // scope 3 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_10);                // scope 4 at src/lib.rs:98:53: 98:54
        StorageDead(_9);                 // scope 4 at src/lib.rs:98:53: 98:54
        goto -> bb13;                    // scope 4 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_11);                // scope 3 at src/lib.rs:98:53: 98:54
        StorageDead(_8);                 // scope 3 at src/lib.rs:98:53: 98:54
        goto -> bb15;                    // scope 2 at src/lib.rs:98:55: 98:56
    }

    bb14 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:98:47: 98:48
        StorageDead(_6);                 // scope 2 at src/lib.rs:98:47: 98:48
        goto -> bb15;                    // scope 2 at no-location
    }

    bb15 (cleanup): {
        StorageDead(_5);                 // scope 2 at src/lib.rs:98:55: 98:56
        StorageDead(_4);                 // scope 1 at src/lib.rs:98:55: 98:56
        StorageDead(_3);                 // scope 0 at src/lib.rs:98:55: 98:56
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:98:38: 98:56]))) = 2; // scope 0 at src/lib.rs:98:38: 98:56
        resume;                          // scope 0 at src/lib.rs:98:38: 98:56
    }

    bb16: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:98:38: 98:56
        StorageLive(_4);                 // scope 0 at src/lib.rs:98:38: 98:56
        StorageLive(_5);                 // scope 0 at src/lib.rs:98:38: 98:56
        StorageLive(_17);                // scope 0 at src/lib.rs:98:38: 98:56
        StorageLive(_18);                // scope 0 at src/lib.rs:98:38: 98:56
        _17 = move _2;                   // scope 0 at src/lib.rs:98:38: 98:56
        StorageDead(_18);                // scope 3 at src/lib.rs:98:53: 98:54
        _20 = move _17;                  // scope 3 at src/lib.rs:98:40: 98:54
        StorageDead(_17);                // scope 3 at src/lib.rs:98:53: 98:54
        goto -> bb3;                     // scope 3 at src/lib.rs:98:40: 98:54
    }

    bb17: {
        assert(const false, "`async fn` resumed after panicking") -> bb17; // scope 0 at src/lib.rs:98:38: 98:56
    }

    bb18: {
        assert(const false, "`async fn` resumed after completion") -> bb18; // scope 0 at src/lib.rs:98:38: 98:56
    }

    bb19: {
        unreachable;                     // scope 0 at src/lib.rs:98:38: 98:56
    }
}

fn f::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [static generator@src/lib.rs:122:34: 122:66]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _17;          // in scope 0 at src/lib.rs:122:34: 122:66
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/lib.rs:122:34: 122:66
    let mut _3: impl std::future::Future; // in scope 0 at src/lib.rs:123:28: 123:66
    let mut _4: [static generator@src/lib.rs:123:34: 123:66]; // in scope 0 at src/lib.rs:123:34: 123:66
    let mut _5: std::task::Poll<()>;     // in scope 0 at src/lib.rs:123:28: 123:72
    let mut _6: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/lib.rs:123:28: 123:72
    let mut _7: &mut impl std::future::Future; // in scope 0 at src/lib.rs:123:28: 123:72
    let mut _8: &mut impl std::future::Future; // in scope 0 at src/lib.rs:123:28: 123:72
    let mut _9: &mut std::task::Context; // in scope 0 at src/lib.rs:123:28: 123:72
    let mut _10: &mut std::task::Context; // in scope 0 at src/lib.rs:123:28: 123:72
    let mut _11: std::future::ResumeTy;  // in scope 0 at src/lib.rs:123:28: 123:72
    let mut _12: isize;                  // in scope 0 at src/lib.rs:123:28: 123:72
    let mut _14: std::future::ResumeTy;  // in scope 0 at src/lib.rs:123:28: 123:72
    let mut _15: ();                     // in scope 0 at src/lib.rs:123:28: 123:72
    let mut _16: ();                     // in scope 0 at src/lib.rs:122:34: 122:66
    let mut _17: std::future::ResumeTy;  // in scope 0 at src/lib.rs:122:34: 122:66
    let mut _18: u32;                    // in scope 0 at src/lib.rs:122:34: 122:66
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/lib.rs:122:34: 122:66])) as variant#3).0: impl std::future::Future); // in scope 1 at src/lib.rs:123:28: 123:72
        let _13: ();                     // in scope 1 at src/lib.rs:123:28: 123:72
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at src/lib.rs:123:28: 123:72
        }
    }

    bb0: {
        _18 = discriminant((*(_1.0: &mut [static generator@src/lib.rs:122:34: 122:66]))); // scope 0 at src/lib.rs:122:34: 122:66
        switchInt(move _18) -> [0_u32: bb1, 1_u32: bb19, 2_u32: bb18, 3_u32: bb17, otherwise: bb20]; // scope 0 at src/lib.rs:122:34: 122:66
    }

    bb1: {
        _17 = move _2;                   // scope 0 at src/lib.rs:122:34: 122:66
        StorageLive(_3);                 // scope 0 at src/lib.rs:123:28: 123:66
        StorageLive(_4);                 // scope 0 at src/lib.rs:123:34: 123:66
        discriminant(_4) = 0;            // scope 0 at src/lib.rs:123:34: 123:66
        _3 = from_generator::<[static generator@src/lib.rs:123:34: 123:66]>(move _4) -> [return: bb2, unwind: bb15]; // scope 0 at src/lib.rs:123:28: 123:66
                                         // mir::Constant
                                         // + span: src/lib.rs:123:34: 123:66
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:123:34: 123:66]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:123:34: 123:66]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at src/lib.rs:123:65: 123:66
        (((*(_1.0: &mut [static generator@src/lib.rs:122:34: 122:66])) as variant#3).0: impl std::future::Future) = move _3; // scope 0 at src/lib.rs:123:28: 123:72
        goto -> bb3;                     // scope 1 at src/lib.rs:123:28: 123:72
    }

    bb3: {
        StorageLive(_5);                 // scope 1 at src/lib.rs:123:28: 123:72
        StorageLive(_6);                 // scope 2 at src/lib.rs:123:28: 123:72
        StorageLive(_7);                 // scope 2 at src/lib.rs:123:28: 123:72
        StorageLive(_8);                 // scope 2 at src/lib.rs:123:28: 123:72
        _8 = &mut (((*(_1.0: &mut [static generator@src/lib.rs:122:34: 122:66])) as variant#3).0: impl std::future::Future); // scope 2 at src/lib.rs:123:28: 123:72
        _7 = &mut (*_8);                 // scope 2 at src/lib.rs:123:28: 123:72
        _6 = Pin::<&mut impl Future>::new_unchecked(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at src/lib.rs:123:28: 123:72
                                         // mir::Constant
                                         // + span: src/lib.rs:123:28: 123:72
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/lib.rs:123:71: 123:72
        StorageLive(_9);                 // scope 2 at src/lib.rs:123:28: 123:72
        StorageLive(_10);                // scope 2 at src/lib.rs:123:28: 123:72
        StorageLive(_11);                // scope 2 at src/lib.rs:123:28: 123:72
        _11 = _17;                       // scope 2 at src/lib.rs:123:28: 123:72
        _10 = get_context(move _11) -> [return: bb5, unwind: bb11]; // scope 2 at src/lib.rs:123:28: 123:72
                                         // mir::Constant
                                         // + span: src/lib.rs:123:28: 123:72
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = &mut (*_10);                // scope 2 at src/lib.rs:123:28: 123:72
        StorageDead(_11);                // scope 2 at src/lib.rs:123:71: 123:72
        _5 = <impl Future as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb12]; // scope 2 at src/lib.rs:123:28: 123:72
                                         // mir::Constant
                                         // + span: src/lib.rs:123:28: 123:72
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_9);                 // scope 2 at src/lib.rs:123:71: 123:72
        StorageDead(_6);                 // scope 2 at src/lib.rs:123:71: 123:72
        _12 = discriminant(_5);          // scope 1 at src/lib.rs:123:28: 123:72
        switchInt(move _12) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 1 at src/lib.rs:123:28: 123:72
    }

    bb7: {
        StorageDead(_10);                // scope 1 at src/lib.rs:123:71: 123:72
        StorageDead(_8);                 // scope 1 at src/lib.rs:123:71: 123:72
        StorageDead(_5);                 // scope 1 at src/lib.rs:123:71: 123:72
        StorageLive(_14);                // scope 1 at src/lib.rs:123:28: 123:72
        StorageLive(_15);                // scope 1 at src/lib.rs:123:28: 123:72
        ((_0 as Yielded).0: ()) = move _15; // scope 1 at src/lib.rs:123:28: 123:72
        discriminant(_0) = 0;            // scope 1 at src/lib.rs:123:28: 123:72
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:122:34: 122:66]))) = 3; // scope 1 at src/lib.rs:123:28: 123:72
        return;                          // scope 1 at src/lib.rs:123:28: 123:72
    }

    bb8: {
        unreachable;                     // scope 1 at src/lib.rs:123:28: 123:72
    }

    bb9: {
        StorageLive(_13);                // scope 1 at src/lib.rs:123:28: 123:72
        _13 = ((_5 as Ready).0: ());     // scope 1 at src/lib.rs:123:28: 123:72
        _16 = _13;                       // scope 3 at src/lib.rs:123:28: 123:72
        StorageDead(_13);                // scope 1 at src/lib.rs:123:71: 123:72
        StorageDead(_10);                // scope 1 at src/lib.rs:123:71: 123:72
        StorageDead(_8);                 // scope 1 at src/lib.rs:123:71: 123:72
        StorageDead(_5);                 // scope 1 at src/lib.rs:123:71: 123:72
        drop((((*(_1.0: &mut [static generator@src/lib.rs:122:34: 122:66])) as variant#3).0: impl std::future::Future)) -> [return: bb10, unwind: bb16]; // scope 0 at src/lib.rs:123:71: 123:72
    }

    bb10: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:122:65: 122:66
        ((_0 as Complete).0: ()) = move _16; // scope 0 at src/lib.rs:122:66: 122:66
        discriminant(_0) = 1;            // scope 0 at src/lib.rs:122:66: 122:66
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:122:34: 122:66]))) = 1; // scope 0 at src/lib.rs:122:66: 122:66
        return;                          // scope 0 at src/lib.rs:122:66: 122:66
    }

    bb11 (cleanup): {
        StorageDead(_11);                // scope 2 at src/lib.rs:123:71: 123:72
        goto -> bb12;                    // scope 2 at no-location
    }

    bb12 (cleanup): {
        StorageDead(_9);                 // scope 2 at src/lib.rs:123:71: 123:72
        StorageDead(_6);                 // scope 2 at src/lib.rs:123:71: 123:72
        StorageDead(_10);                // scope 1 at src/lib.rs:123:71: 123:72
        goto -> bb14;                    // scope 1 at no-location
    }

    bb13 (cleanup): {
        StorageDead(_7);                 // scope 2 at src/lib.rs:123:71: 123:72
        StorageDead(_6);                 // scope 2 at src/lib.rs:123:71: 123:72
        goto -> bb14;                    // scope 2 at no-location
    }

    bb14 (cleanup): {
        StorageDead(_8);                 // scope 1 at src/lib.rs:123:71: 123:72
        StorageDead(_5);                 // scope 1 at src/lib.rs:123:71: 123:72
        drop((((*(_1.0: &mut [static generator@src/lib.rs:122:34: 122:66])) as variant#3).0: impl std::future::Future)) -> bb16; // scope 0 at src/lib.rs:123:71: 123:72
    }

    bb15 (cleanup): {
        StorageDead(_4);                 // scope 0 at src/lib.rs:123:65: 123:66
        goto -> bb16;                    // scope 0 at no-location
    }

    bb16 (cleanup): {
        StorageDead(_3);                 // scope 0 at src/lib.rs:122:65: 122:66
        discriminant((*(_1.0: &mut [static generator@src/lib.rs:122:34: 122:66]))) = 2; // scope 0 at src/lib.rs:122:34: 122:66
        resume;                          // scope 0 at src/lib.rs:122:34: 122:66
    }

    bb17: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:122:34: 122:66
        StorageLive(_14);                // scope 0 at src/lib.rs:122:34: 122:66
        StorageLive(_15);                // scope 0 at src/lib.rs:122:34: 122:66
        _14 = move _2;                   // scope 0 at src/lib.rs:122:34: 122:66
        StorageDead(_15);                // scope 1 at src/lib.rs:123:71: 123:72
        _17 = move _14;                  // scope 1 at src/lib.rs:123:28: 123:72
        StorageDead(_14);                // scope 1 at src/lib.rs:123:71: 123:72
        goto -> bb3;                     // scope 1 at src/lib.rs:123:28: 123:72
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at src/lib.rs:122:34: 122:66
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at src/lib.rs:122:34: 122:66
    }

    bb20: {
        unreachable;                     // scope 0 at src/lib.rs:122:34: 122:66
    }
}

fn foo2::{closure#0}(_1: &[closure@src/lib.rs:54:13: 54:18], _2: i32) -> i32 {
    debug a => _2;                       // in scope 0 at src/lib.rs:54:14: 54:15
    let mut _0: i32;                     // return place in scope 0 at src/lib.rs:54:17: 54:17

    bb0: {
        _0 = _2;                         // scope 0 at src/lib.rs:54:17: 54:18
        return;                          // scope 0 at src/lib.rs:54:18: 54:18
    }
}

fn h18(_1: &String, _2: &u64) -> impl Future {
    debug v => _1;                       // in scope 0 at src/lib.rs:116:18: 116:19
    debug x => _2;                       // in scope 0 at src/lib.rs:116:30: 116:31
    let mut _0: impl std::future::Future; // return place in scope 0 at src/lib.rs:116:39: 116:39
    let mut _3: [static generator@src/lib.rs:116:39: 116:58]; // in scope 0 at src/lib.rs:116:39: 116:58

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lib.rs:116:39: 116:58
        (_3.0: &std::string::String) = _1; // scope 0 at src/lib.rs:116:39: 116:58
        (_3.1: &u64) = _2;               // scope 0 at src/lib.rs:116:39: 116:58
        discriminant(_3) = 0;            // scope 0 at src/lib.rs:116:39: 116:58
        _0 = from_generator::<[static generator@src/lib.rs:116:39: 116:58]>(move _3) -> bb1; // scope 0 at src/lib.rs:116:39: 116:58
                                         // mir::Constant
                                         // + span: src/lib.rs:116:39: 116:58
                                         // + literal: Const { ty: fn([static generator@src/lib.rs:116:39: 116:58]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/lib.rs:116:39: 116:58]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/lib.rs:116:57: 116:58
        return;                          // scope 0 at src/lib.rs:116:58: 116:58
    }
}
