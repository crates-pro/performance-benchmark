// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: &str;
    let _3: &str;
    let mut _4: std::result::Result<std::option::Option<broot::launchable::Launchable>, broot::errors::ProgramError>;
    let mut _5: isize;
    let mut _6: isize;
    let _7: broot::launchable::Launchable;
    let mut _9: bool;
    let mut _10: &cli_log::Level;
    let mut _11: bool;
    let mut _12: &cli_log::Level;
    let mut _13: &cli_log::LevelFilter;
    let _14: cli_log::LevelFilter;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &broot::launchable::Launchable;
    let mut _23: &[core::fmt::rt::Placeholder];
    let _24: &[core::fmt::rt::Placeholder; 1];
    let _25: [core::fmt::rt::Placeholder; 1];
    let mut _26: core::fmt::rt::Placeholder;
    let mut _27: core::fmt::rt::Alignment;
    let mut _28: core::fmt::rt::Count;
    let mut _29: core::fmt::rt::Count;
    let mut _30: core::fmt::rt::UnsafeArg;
    let mut _31: cli_log::Level;
    let mut _32: std::result::Result<(), broot::errors::ProgramError>;
    let mut _33: &broot::launchable::Launchable;
    let mut _34: std::option::Option<&mut std::io::BufWriter<std::io::Stderr>>;
    let mut _35: isize;
    let mut _38: bool;
    let mut _39: &cli_log::Level;
    let mut _40: bool;
    let mut _41: &cli_log::Level;
    let mut _42: &cli_log::LevelFilter;
    let _43: cli_log::LevelFilter;
    let _44: ();
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let mut _47: &[core::fmt::rt::Argument<'_>];
    let _48: &[core::fmt::rt::Argument<'_>; 1];
    let _49: [core::fmt::rt::Argument<'_>; 1];
    let mut _50: core::fmt::rt::Argument<'_>;
    let _51: &&broot::launchable::Launchable;
    let _52: &broot::launchable::Launchable;
    let mut _53: cli_log::Level;
    let mut _55: bool;
    let mut _56: &cli_log::Level;
    let mut _57: bool;
    let mut _58: &cli_log::Level;
    let mut _59: &cli_log::LevelFilter;
    let _60: cli_log::LevelFilter;
    let _61: ();
    let mut _62: std::fmt::Arguments<'_>;
    let mut _63: &[&str];
    let mut _64: &[core::fmt::rt::Argument<'_>];
    let _65: &[core::fmt::rt::Argument<'_>; 1];
    let _66: [core::fmt::rt::Argument<'_>; 1];
    let mut _67: core::fmt::rt::Argument<'_>;
    let _68: &broot::errors::ProgramError;
    let mut _69: cli_log::Level;
    let _70: ();
    let mut _71: std::fmt::Arguments<'_>;
    let mut _72: &[&str];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: [core::fmt::rt::Argument<'_>; 1];
    let mut _76: core::fmt::rt::Argument<'_>;
    let _77: &broot::errors::ProgramError;
    let _78: broot::errors::ProgramError;
    let mut _80: bool;
    let mut _81: &cli_log::Level;
    let mut _82: bool;
    let mut _83: &cli_log::Level;
    let mut _84: &cli_log::LevelFilter;
    let _85: cli_log::LevelFilter;
    let _86: ();
    let mut _87: std::fmt::Arguments<'_>;
    let mut _88: &[&str];
    let mut _89: &[core::fmt::rt::Argument<'_>];
    let _90: &[core::fmt::rt::Argument<'_>; 1];
    let _91: [core::fmt::rt::Argument<'_>; 1];
    let mut _92: core::fmt::rt::Argument<'_>;
    let _93: &broot::errors::ProgramError;
    let mut _94: cli_log::Level;
    let _95: ();
    let mut _96: std::fmt::Arguments<'_>;
    let mut _97: &[&str];
    let mut _98: &[core::fmt::rt::Argument<'_>];
    let _99: &[core::fmt::rt::Argument<'_>; 1];
    let _100: [core::fmt::rt::Argument<'_>; 1];
    let mut _101: core::fmt::rt::Argument<'_>;
    let _102: &broot::errors::ProgramError;
    let _103: ();
    let mut _104: cli_log::Level;
    let _105: cli_log::Level;
    let mut _106: bool;
    let mut _107: &cli_log::Level;
    let mut _108: bool;
    let mut _109: &cli_log::Level;
    let mut _110: &cli_log::LevelFilter;
    let _111: cli_log::LevelFilter;
    let _112: ();
    let mut _113: std::fmt::Arguments<'_>;
    let mut _114: &[&str];
    let mut _115: cli_log::Level;
    let mut _133: bool;
    let mut _134: isize;
    let mut _135: isize;
    scope 1 {
        debug launchable => _7;
        let _8: cli_log::Level;
        scope 2 {
            debug lvl => _8;
            let mut _130: &(&str, &str, &str, u32);
            let mut _131: &[&str; 1];
            let mut _132: &cli_log::LevelFilter;
            scope 3 {
            }
        }
        scope 4 {
            debug e => _36;
            let _36: broot::errors::ProgramError;
            let _37: cli_log::Level;
            let _54: cli_log::Level;
            let mut _123: &[&str; 2];
            scope 5 {
                debug lvl => _37;
                let mut _127: &(&str, &str, &str, u32);
                let mut _128: &[&str; 1];
                let mut _129: &cli_log::LevelFilter;
            }
            scope 6 {
                debug lvl => _54;
                let mut _124: &(&str, &str, &str, u32);
                let mut _125: &[&str; 1];
                let mut _126: &cli_log::LevelFilter;
            }
        }
    }
    scope 7 {
        debug e => _78;
        let _79: cli_log::Level;
        let mut _119: &[&str; 2];
        scope 8 {
            debug lvl => _79;
            let mut _120: &(&str, &str, &str, u32);
            let mut _121: &[&str; 1];
            let mut _122: &cli_log::LevelFilter;
        }
    }
    scope 9 {
        debug lvl => _105;
        let mut _116: &(&str, &str, &str, u32);
        let mut _117: &[&str; 1];
        let mut _118: &cli_log::LevelFilter;
    }

    bb0: {
        _133 = const false;
        _2 = const "broot";
        _3 = const "1.6.4";
        _1 = init(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = run() -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _5 = discriminant(((_4 as Ok).0: std::option::Option<broot::launchable::Launchable>));
        switchInt(move _5) -> [0: bb67, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _78 = move ((_4 as Err).0: broot::errors::ProgramError);
        _79 = cli_log::Level::Warn;
        _81 = &_79;
        _122 = const _;
        _80 = <cli_log::Level as PartialOrd<LevelFilter>>::le(move _81, _122) -> [return: bb38, unwind: bb57];
    }

    bb6: {
        _7 = move ((((_4 as Ok).0: std::option::Option<broot::launchable::Launchable>) as Some).0: broot::launchable::Launchable);
        _8 = cli_log::Level::Debug;
        _10 = &_8;
        _132 = const _;
        _9 = <cli_log::Level as PartialOrd<LevelFilter>>::le(move _10, _132) -> [return: bb7, unwind: bb59];
    }

    bb7: {
        switchInt(move _9) -> [0: bb16, otherwise: bb8];
    }

    bb8: {
        _12 = &_8;
        _14 = max_level() -> [return: bb9, unwind: bb59];
    }

    bb9: {
        _13 = &_14;
        _11 = <cli_log::Level as PartialOrd<LevelFilter>>::le(move _12, move _13) -> [return: bb10, unwind: bb59];
    }

    bb10: {
        switchInt(move _11) -> [0: bb16, otherwise: bb11];
    }

    bb11: {
        _131 = const _;
        _17 = _131 as &[&str] (PointerCoercion(Unsize));
        _22 = &_7;
        _21 = core::fmt::rt::Argument::<'_>::new_debug::<Launchable>(_22) -> [return: bb12, unwind: bb59];
    }

    bb12: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _27 = core::fmt::rt::Alignment::Unknown;
        _28 = core::fmt::rt::Count::Implied;
        _29 = core::fmt::rt::Count::Implied;
        _26 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _27, const 4_u32, move _28, move _29) -> [return: bb13, unwind: bb59];
    }

    bb13: {
        _25 = [move _26];
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _30 = core::fmt::rt::UnsafeArg::new() -> [return: bb14, unwind: bb59];
    }

    bb14: {
        _16 = Arguments::<'_>::new_v1_formatted(move _17, move _18, move _23, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb15, unwind: bb59];
    }

    bb15: {
        _31 = _8;
        _130 = const _;
        _15 = __private_api_log(move _16, move _31, _130) -> [return: bb68, unwind: bb59];
    }

    bb16: {
        _33 = &_7;
        _34 = Option::<&mut BufWriter<Stderr>>::None;
        _32 = Launchable::execute(move _33, move _34) -> [return: bb17, unwind: bb59];
    }

    bb17: {
        _133 = const true;
        _35 = discriminant(_32);
        switchInt(move _35) -> [1: bb18, otherwise: bb64];
    }

    bb18: {
        _133 = const false;
        _36 = move ((_32 as Err).0: broot::errors::ProgramError);
        _37 = cli_log::Level::Warn;
        _39 = &_37;
        _129 = const _;
        _38 = <cli_log::Level as PartialOrd<LevelFilter>>::le(move _39, _129) -> [return: bb19, unwind: bb58];
    }

    bb19: {
        switchInt(move _38) -> [0: bb26, otherwise: bb20];
    }

    bb20: {
        _41 = &_37;
        _43 = max_level() -> [return: bb21, unwind: bb58];
    }

    bb21: {
        _42 = &_43;
        _40 = <cli_log::Level as PartialOrd<LevelFilter>>::le(move _41, move _42) -> [return: bb22, unwind: bb58];
    }

    bb22: {
        switchInt(move _40) -> [0: bb26, otherwise: bb23];
    }

    bb23: {
        _128 = const _;
        _46 = _128 as &[&str] (PointerCoercion(Unsize));
        _52 = &_7;
        _51 = &_52;
        _50 = core::fmt::rt::Argument::<'_>::new_debug::<&Launchable>(_51) -> [return: bb24, unwind: bb58];
    }

    bb24: {
        _49 = [move _50];
        _48 = &_49;
        _47 = _48 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _45 = Arguments::<'_>::new_v1(move _46, move _47) -> [return: bb25, unwind: bb58];
    }

    bb25: {
        _53 = _37;
        _127 = const _;
        _44 = __private_api_log(move _45, move _53, _127) -> [return: bb69, unwind: bb58];
    }

    bb26: {
        _54 = cli_log::Level::Warn;
        _56 = &_54;
        _126 = const _;
        _55 = <cli_log::Level as PartialOrd<LevelFilter>>::le(move _56, _126) -> [return: bb27, unwind: bb58];
    }

    bb27: {
        switchInt(move _55) -> [0: bb34, otherwise: bb28];
    }

    bb28: {
        _58 = &_54;
        _60 = max_level() -> [return: bb29, unwind: bb58];
    }

    bb29: {
        _59 = &_60;
        _57 = <cli_log::Level as PartialOrd<LevelFilter>>::le(move _58, move _59) -> [return: bb30, unwind: bb58];
    }

    bb30: {
        switchInt(move _57) -> [0: bb34, otherwise: bb31];
    }

    bb31: {
        _125 = const _;
        _63 = _125 as &[&str] (PointerCoercion(Unsize));
        _68 = &_36;
        _67 = core::fmt::rt::Argument::<'_>::new_debug::<ProgramError>(_68) -> [return: bb32, unwind: bb58];
    }

    bb32: {
        _66 = [move _67];
        _65 = &_66;
        _64 = _65 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _62 = Arguments::<'_>::new_v1(move _63, move _64) -> [return: bb33, unwind: bb58];
    }

    bb33: {
        _69 = _54;
        _124 = const _;
        _61 = __private_api_log(move _62, move _69, _124) -> [return: bb70, unwind: bb58];
    }

    bb34: {
        _123 = const _;
        _72 = _123 as &[&str] (PointerCoercion(Unsize));
        _77 = &_36;
        _76 = core::fmt::rt::Argument::<'_>::new_display::<ProgramError>(_77) -> [return: bb35, unwind: bb58];
    }

    bb35: {
        _75 = [move _76];
        _74 = &_75;
        _73 = _74 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _71 = Arguments::<'_>::new_v1(move _72, move _73) -> [return: bb36, unwind: bb58];
    }

    bb36: {
        _70 = _eprint(move _71) -> [return: bb37, unwind: bb58];
    }

    bb37: {
        drop(_36) -> [return: bb64, unwind: bb59];
    }

    bb38: {
        switchInt(move _80) -> [0: bb45, otherwise: bb39];
    }

    bb39: {
        _83 = &_79;
        _85 = max_level() -> [return: bb40, unwind: bb57];
    }

    bb40: {
        _84 = &_85;
        _82 = <cli_log::Level as PartialOrd<LevelFilter>>::le(move _83, move _84) -> [return: bb41, unwind: bb57];
    }

    bb41: {
        switchInt(move _82) -> [0: bb45, otherwise: bb42];
    }

    bb42: {
        _121 = const _;
        _88 = _121 as &[&str] (PointerCoercion(Unsize));
        _93 = &_78;
        _92 = core::fmt::rt::Argument::<'_>::new_display::<ProgramError>(_93) -> [return: bb43, unwind: bb57];
    }

    bb43: {
        _91 = [move _92];
        _90 = &_91;
        _89 = _90 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _87 = Arguments::<'_>::new_v1(move _88, move _89) -> [return: bb44, unwind: bb57];
    }

    bb44: {
        _94 = _79;
        _120 = const _;
        _86 = __private_api_log(move _87, move _94, _120) -> [return: bb71, unwind: bb57];
    }

    bb45: {
        _119 = const _;
        _97 = _119 as &[&str] (PointerCoercion(Unsize));
        _102 = &_78;
        _101 = core::fmt::rt::Argument::<'_>::new_display::<ProgramError>(_102) -> [return: bb46, unwind: bb57];
    }

    bb46: {
        _100 = [move _101];
        _99 = &_100;
        _98 = _99 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _96 = Arguments::<'_>::new_v1(move _97, move _98) -> [return: bb47, unwind: bb57];
    }

    bb47: {
        _95 = _eprint(move _96) -> [return: bb48, unwind: bb57];
    }

    bb48: {
        drop(_78) -> [return: bb67, unwind continue];
    }

    bb49: {
        _105 = cli_log::Level::Info;
        _107 = &_105;
        _118 = const _;
        _106 = <cli_log::Level as PartialOrd<LevelFilter>>::le(move _107, _118) -> [return: bb50, unwind continue];
    }

    bb50: {
        switchInt(move _106) -> [0: bb56, otherwise: bb51];
    }

    bb51: {
        _109 = &_105;
        _111 = max_level() -> [return: bb52, unwind continue];
    }

    bb52: {
        _110 = &_111;
        _108 = <cli_log::Level as PartialOrd<LevelFilter>>::le(move _109, move _110) -> [return: bb53, unwind continue];
    }

    bb53: {
        switchInt(move _108) -> [0: bb56, otherwise: bb54];
    }

    bb54: {
        _117 = const _;
        _114 = _117 as &[&str] (PointerCoercion(Unsize));
        _113 = Arguments::<'_>::new_const(move _114) -> [return: bb55, unwind continue];
    }

    bb55: {
        _115 = _105;
        _116 = const _;
        _112 = __private_api_log(move _113, move _115, _116) -> [return: bb56, unwind continue];
    }

    bb56: {
        return;
    }

    bb57 (cleanup): {
        drop(_78) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_36) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_7) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        resume;
    }

    bb61: {
        _133 = const false;
        drop(_7) -> [return: bb67, unwind continue];
    }

    bb62: {
        switchInt(_133) -> [0: bb61, otherwise: bb63];
    }

    bb63: {
        drop(((_32 as Err).0: broot::errors::ProgramError)) -> [return: bb61, unwind: bb59];
    }

    bb64: {
        _134 = discriminant(_32);
        switchInt(move _134) -> [1: bb62, otherwise: bb61];
    }

    bb65: {
        _104 = cli_log::Level::Info;
        _103 = cli_log::log_mem(move _104) -> [return: bb49, unwind continue];
    }

    bb66: {
        goto -> bb65;
    }

    bb67: {
        _135 = discriminant(_4);
        switchInt(move _135) -> [0: bb66, otherwise: bb65];
    }

    bb68: {
        goto -> bb16;
    }

    bb69: {
        goto -> bb26;
    }

    bb70: {
        goto -> bb34;
    }

    bb71: {
        goto -> bb45;
    }
}

promoted[0] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "broot";
        _2 = &(*_3);
        _1 = (move _2, const "broot", const "src/main.rs", const 22_u32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "bye"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &LevelFilter = {
    let mut _0: &cli_log::LevelFilter;
    let mut _1: cli_log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "broot";
        _2 = &(*_3);
        _1 = (move _2, const "broot", const "src/main.rs", const 17_u32);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Error: "];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &LevelFilter = {
    let mut _0: &cli_log::LevelFilter;
    let mut _1: cli_log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "broot";
        _2 = &(*_3);
        _1 = (move _2, const "broot", const "src/main.rs", const 10_u32);
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Error: "];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &LevelFilter = {
    let mut _0: &cli_log::LevelFilter;
    let mut _1: cli_log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "broot";
        _2 = &(*_3);
        _1 = (move _2, const "broot", const "src/main.rs", const 9_u32);
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed to launch "];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &LevelFilter = {
    let mut _0: &cli_log::LevelFilter;
    let mut _1: cli_log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "broot";
        _2 = &(*_3);
        _1 = (move _2, const "broot", const "src/main.rs", const 7_u32);
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "launching "];
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &LevelFilter = {
    let mut _0: &cli_log::LevelFilter;
    let mut _1: cli_log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
