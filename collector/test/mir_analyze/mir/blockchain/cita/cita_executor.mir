// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Priority::Proposal::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at cita-executor/src/backlogs.rs:24:16: 24:17

    bb0: {
        _0 = const 1_isize;              // scope 0 at cita-executor/src/backlogs.rs:24:16: 24:17
        return;                          // scope 0 at cita-executor/src/backlogs.rs:24:16: 24:17
    }
}

Priority::Synchronized::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at cita-executor/src/backlogs.rs:25:20: 25:21

    bb0: {
        _0 = const 2_isize;              // scope 0 at cita-executor/src/backlogs.rs:25:20: 25:21
        return;                          // scope 0 at cita-executor/src/backlogs.rs:25:20: 25:21
    }
}

Priority::BlockWithProof::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at cita-executor/src/backlogs.rs:26:22: 26:23

    bb0: {
        _0 = const 3_isize;              // scope 0 at cita-executor/src/backlogs.rs:26:22: 26:23
        return;                          // scope 0 at cita-executor/src/backlogs.rs:26:22: 26:23
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:22:10: 22:15>::fmt(_1: &Priority, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
    debug f => _2;                       // in scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
    let mut _3: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
    let mut _4: isize;                   // in scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
    let _5: &str;                        // in scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
    let _6: &str;                        // in scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
    let _7: &str;                        // in scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
        switchInt(move _4) -> [1: bb3, 2: bb4, 3: bb1, otherwise: bb2]; // scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
    }

    bb1: {
        _7 = const "BlockWithProof";     // scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
        goto -> bb5;                     // scope 0 at cita-executor/src/backlogs.rs:22:14: 22:15
    }

    bb2: {
        unreachable;                     // scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
    }

    bb3: {
        _5 = const "Proposal";           // scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
        goto -> bb5;                     // scope 0 at cita-executor/src/backlogs.rs:22:14: 22:15
    }

    bb4: {
        _6 = const "Synchronized";       // scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
        goto -> bb5;                     // scope 0 at cita-executor/src/backlogs.rs:22:14: 22:15
    }

    bb5: {
        _0 = std::fmt::Formatter::<'_>::write_str(_2, move _3) -> bb6; // scope 0 at cita-executor/src/backlogs.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:22:10: 22:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:22:15: 22:15
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:22:23: 22:28>::clone(_1: &Priority) -> Priority {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:22:23: 22:28
    let mut _0: backlogs::Priority;      // return place in scope 0 at cita-executor/src/backlogs.rs:22:23: 22:28

    bb0: {
        _0 = (*_1);                      // scope 0 at cita-executor/src/backlogs.rs:22:23: 22:28
        return;                          // scope 0 at cita-executor/src/backlogs.rs:22:28: 22:28
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:36:1: 36:25>::default() -> Backlog {
    let mut _0: backlogs::Backlog;       // return place in scope 0 at cita-executor/src/backlogs.rs:37:21: 37:25
    let mut _1: std::option::Option<types::block::OpenBlock>; // in scope 0 at cita-executor/src/backlogs.rs:39:25: 39:29
    let mut _2: std::option::Option<libproto::Proof>; // in scope 0 at cita-executor/src/backlogs.rs:40:20: 40:24
    let mut _3: std::option::Option<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/backlogs.rs:41:27: 41:31
    let mut _4: std::option::Option<backlogs::Priority>; // in scope 0 at cita-executor/src/backlogs.rs:42:23: 42:27

    bb0: {
        _1 = std::option::Option::<OpenBlock>::None; // scope 0 at cita-executor/src/backlogs.rs:39:25: 39:29
        _2 = std::option::Option::<libproto::Proof>::None; // scope 0 at cita-executor/src/backlogs.rs:40:20: 40:24
        _3 = std::option::Option::<ClosedBlock>::None; // scope 0 at cita-executor/src/backlogs.rs:41:27: 41:31
        _4 = const std::option::Option::<Priority>::None; // scope 0 at cita-executor/src/backlogs.rs:42:23: 42:27
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<Priority>, val: Value(Scalar(0x00)) }
        _0 = Backlog { open_block: move _1, proof: move _2, closed_block: move _3, priority: move _4 }; // scope 0 at cita-executor/src/backlogs.rs:38:9: 43:10
        return;                          // scope 0 at cita-executor/src/backlogs.rs:44:6: 44:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::is_completed(_1: &Backlog) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:52:25: 52:30
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/backlogs.rs:52:35: 52:39
    let mut _2: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:53:9: 53:25
    let mut _3: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:53:29: 53:46

    bb0: {
        _2 = Backlog::all_exist(_1) -> bb4; // scope 0 at cita-executor/src/backlogs.rs:53:9: 53:25
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:53:14: 53:23
                                         // + literal: Const { ty: for<'a> fn(&'a Backlog) -> bool {Backlog::all_exist}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-executor/src/backlogs.rs:53:9: 53:46
        goto -> bb3;                     // scope 0 at cita-executor/src/backlogs.rs:53:9: 53:46
    }

    bb2: {
        _3 = Backlog::is_matched(_1) -> bb5; // scope 0 at cita-executor/src/backlogs.rs:53:29: 53:46
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:53:34: 53:44
                                         // + literal: Const { ty: for<'a> fn(&'a Backlog) -> bool {Backlog::is_matched}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:54:6: 54:6
    }

    bb4: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-executor/src/backlogs.rs:53:9: 53:46
    }

    bb5: {
        _0 = move _3;                    // scope 0 at cita-executor/src/backlogs.rs:53:9: 53:46
        goto -> bb3;                     // scope 0 at cita-executor/src/backlogs.rs:53:9: 53:46
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::all_exist(_1: &Backlog) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:56:18: 56:23
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/backlogs.rs:56:28: 56:32
    let _2: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _3: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _5: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _7: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _8: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _9: log::LevelFilter;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _11: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _12: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:58:13: 58:58
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _14: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:59:13: 59:38
    let _17: &bool;                      // in scope 0 at cita-executor/src/backlogs.rs:59:13: 59:38
    let _18: bool;                       // in scope 0 at cita-executor/src/backlogs.rs:59:13: 59:38
    let mut _19: &std::option::Option<types::block::OpenBlock>; // in scope 0 at cita-executor/src/backlogs.rs:59:13: 59:38
    let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:60:13: 60:33
    let _21: &bool;                      // in scope 0 at cita-executor/src/backlogs.rs:60:13: 60:33
    let _22: bool;                       // in scope 0 at cita-executor/src/backlogs.rs:60:13: 60:33
    let mut _23: &std::option::Option<libproto::Proof>; // in scope 0 at cita-executor/src/backlogs.rs:60:13: 60:33
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:61:13: 61:40
    let _25: &bool;                      // in scope 0 at cita-executor/src/backlogs.rs:61:13: 61:40
    let _26: bool;                       // in scope 0 at cita-executor/src/backlogs.rs:61:13: 61:40
    let mut _27: &std::option::Option<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/backlogs.rs:61:13: 61:40
    let mut _28: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:63:9: 63:58
    let mut _29: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:63:9: 63:34
    let mut _30: &std::option::Option<types::block::OpenBlock>; // in scope 0 at cita-executor/src/backlogs.rs:63:9: 63:34
    let mut _31: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:63:38: 63:58
    let mut _32: &std::option::Option<libproto::Proof>; // in scope 0 at cita-executor/src/backlogs.rs:63:38: 63:58
    let mut _33: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:63:62: 63:89
    let mut _34: &std::option::Option<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/backlogs.rs:63:62: 63:89
    scope 1 {
        debug lvl => _2;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _35: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _36: &[&str; 3];         // in scope 1 at cita-executor/src/backlogs.rs:58:13: 58:58
        let mut _37: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _2 = log::Level::Trace;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _5 = &_2;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _37 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Backlog::all_exist, [], Some(promoted[2])) }
        _4 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _5, _37) -> bb4; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _7 = &_2;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _9 = log::max_level() -> bb5;    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _3) -> [0: bb15, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _4) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _8 = &_9;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _6 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _7, move _8) -> bb6; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _3 = move _6;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _36 = const _;                   // scope 1 at cita-executor/src/backlogs.rs:58:13: 58:58
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:58:13: 58:58
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Backlog::all_exist, [], Some(promoted[1])) }
        _12 = _36 as &[&str] (Pointer(Unsize)); // scope 1 at cita-executor/src/backlogs.rs:58:13: 58:58
        _19 = &((*_1).0: std::option::Option<types::block::OpenBlock>); // scope 1 at cita-executor/src/backlogs.rs:59:13: 59:38
        _18 = std::option::Option::<OpenBlock>::is_some(move _19) -> bb8; // scope 1 at cita-executor/src/backlogs.rs:59:13: 59:38
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:59:29: 59:36
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<OpenBlock>) -> bool {std::option::Option::<OpenBlock>::is_some}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = &_18;                      // scope 1 at cita-executor/src/backlogs.rs:59:13: 59:38
        _16 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(_17) -> bb9; // scope 1 at cita-executor/src/backlogs.rs:59:13: 59:38
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:59:13: 59:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb9: {
        _23 = &((*_1).1: std::option::Option<libproto::Proof>); // scope 1 at cita-executor/src/backlogs.rs:60:13: 60:33
        _22 = std::option::Option::<libproto::Proof>::is_some(move _23) -> bb10; // scope 1 at cita-executor/src/backlogs.rs:60:13: 60:33
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:60:24: 60:31
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<libproto::Proof>) -> bool {std::option::Option::<libproto::Proof>::is_some}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = &_22;                      // scope 1 at cita-executor/src/backlogs.rs:60:13: 60:33
        _20 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(_21) -> bb11; // scope 1 at cita-executor/src/backlogs.rs:60:13: 60:33
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:60:13: 60:33
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb11: {
        _27 = &((*_1).2: std::option::Option<core::libexecutor::block::ClosedBlock>); // scope 1 at cita-executor/src/backlogs.rs:61:13: 61:40
        _26 = std::option::Option::<ClosedBlock>::is_some(move _27) -> bb12; // scope 1 at cita-executor/src/backlogs.rs:61:13: 61:40
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:61:31: 61:38
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<ClosedBlock>) -> bool {std::option::Option::<ClosedBlock>::is_some}, val: Value(<ZST>) }
    }

    bb12: {
        _25 = &_26;                      // scope 1 at cita-executor/src/backlogs.rs:61:13: 61:40
        _24 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(_25) -> bb13; // scope 1 at cita-executor/src/backlogs.rs:61:13: 61:40
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:61:13: 61:40
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb13: {
        _15 = [move _16, move _20, move _24]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = &_15;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _13 = _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> bb14; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb14: {
        _35 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Backlog::all_exist, [], Some(promoted[0])) }
        _10 = log::__private_api_log(move _11, _2, _35) -> bb15; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb15: {
        _30 = &((*_1).0: std::option::Option<types::block::OpenBlock>); // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:34
        _29 = std::option::Option::<OpenBlock>::is_some(move _30) -> bb22; // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:34
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:63:25: 63:32
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<OpenBlock>) -> bool {std::option::Option::<OpenBlock>::is_some}, val: Value(<ZST>) }
    }

    bb16: {
        _0 = const false;                // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:89
        goto -> bb18;                    // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:89
    }

    bb17: {
        _34 = &((*_1).2: std::option::Option<core::libexecutor::block::ClosedBlock>); // scope 0 at cita-executor/src/backlogs.rs:63:62: 63:89
        _33 = std::option::Option::<ClosedBlock>::is_some(move _34) -> bb24; // scope 0 at cita-executor/src/backlogs.rs:63:62: 63:89
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:63:80: 63:87
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<ClosedBlock>) -> bool {std::option::Option::<ClosedBlock>::is_some}, val: Value(<ZST>) }
    }

    bb18: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:64:6: 64:6
    }

    bb19: {
        _28 = const false;               // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:58
        goto -> bb21;                    // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:58
    }

    bb20: {
        _32 = &((*_1).1: std::option::Option<libproto::Proof>); // scope 0 at cita-executor/src/backlogs.rs:63:38: 63:58
        _31 = std::option::Option::<libproto::Proof>::is_some(move _32) -> bb23; // scope 0 at cita-executor/src/backlogs.rs:63:38: 63:58
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:63:49: 63:56
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<libproto::Proof>) -> bool {std::option::Option::<libproto::Proof>::is_some}, val: Value(<ZST>) }
    }

    bb21: {
        switchInt(move _28) -> [0: bb16, otherwise: bb17]; // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:89
    }

    bb22: {
        switchInt(move _29) -> [0: bb19, otherwise: bb20]; // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:58
    }

    bb23: {
        _28 = move _31;                  // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:58
        goto -> bb21;                    // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:58
    }

    bb24: {
        _0 = move _33;                   // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:89
        goto -> bb18;                    // scope 0 at cita-executor/src/backlogs.rs:63:9: 63:89
    }
}

promoted[0] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::all_exist: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:57:9: 62:10
    let mut _7: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:57:9: 62:10

    bb0: {
        _3 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/backlogs.rs"; // scope 0 at cita-executor/src/backlogs.rs:57:9: 62:10
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:57:9: 62:10
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/backlogs.rs:57:9: 62:10
        _1 = (move _2, move _4, move _6, const 57_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::all_exist: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at cita-executor/src/backlogs.rs:58:13: 58:58
    let mut _1: [&str; 3];               // in scope 0 at cita-executor/src/backlogs.rs:58:13: 58:58

    bb0: {
        _1 = [const "open_block: ", const ", proof: ", const ", closed_block: "]; // scope 0 at cita-executor/src/backlogs.rs:58:13: 58:58
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:58:13: 58:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:58:13: 58:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:58:13: 58:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:58:13: 58:58
        return;                          // scope 0 at cita-executor/src/backlogs.rs:58:13: 58:58
    }
}

promoted[2] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::all_exist: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::is_matched(_1: &Backlog) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:67:23: 67:28
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/backlogs.rs:67:33: 67:37
    let mut _2: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:68:12: 68:68
    let mut _3: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:68:12: 68:37
    let mut _4: &std::option::Option<types::block::OpenBlock>; // in scope 0 at cita-executor/src/backlogs.rs:68:12: 68:37
    let mut _5: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:68:41: 68:68
    let mut _6: &std::option::Option<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/backlogs.rs:68:41: 68:68
    let _7: &types::block::OpenBlock;    // in scope 0 at cita-executor/src/backlogs.rs:72:13: 72:23
    let mut _8: std::option::Option<&types::block::OpenBlock>; // in scope 0 at cita-executor/src/backlogs.rs:72:26: 72:50
    let mut _9: &std::option::Option<types::block::OpenBlock>; // in scope 0 at cita-executor/src/backlogs.rs:72:26: 72:50
    let mut _11: std::option::Option<&core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/backlogs.rs:73:28: 73:54
    let mut _12: &std::option::Option<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/backlogs.rs:73:28: 73:54
    let mut _13: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:74:9: 74:47
    let _14: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:74:9: 74:47
    let mut _15: &types::header::Header; // in scope 0 at cita-executor/src/backlogs.rs:74:9: 74:47
    let _16: &types::header::Header;     // in scope 0 at cita-executor/src/backlogs.rs:74:9: 74:47
    let mut _17: &types::block::Block;   // in scope 0 at cita-executor/src/backlogs.rs:74:9: 74:47
    let _18: &types::block::Block;       // in scope 0 at cita-executor/src/backlogs.rs:74:9: 74:47
    let mut _19: &core::libexecutor::block::ClosedBlock; // in scope 0 at cita-executor/src/backlogs.rs:74:9: 74:47
    let mut _20: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:74:36: 74:46
    let _21: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:74:36: 74:46
    let mut _22: &types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:74:36: 74:46
    scope 1 {
        debug open_block => _7;          // in scope 1 at cita-executor/src/backlogs.rs:72:13: 72:23
        let _10: &core::libexecutor::block::ClosedBlock; // in scope 1 at cita-executor/src/backlogs.rs:73:13: 73:25
        scope 2 {
            debug closed_block => _10;   // in scope 2 at cita-executor/src/backlogs.rs:73:13: 73:25
        }
    }

    bb0: {
        _4 = &((*_1).0: std::option::Option<types::block::OpenBlock>); // scope 0 at cita-executor/src/backlogs.rs:68:12: 68:37
        _3 = std::option::Option::<OpenBlock>::is_none(move _4) -> bb4; // scope 0 at cita-executor/src/backlogs.rs:68:12: 68:37
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:68:28: 68:35
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<OpenBlock>) -> bool {std::option::Option::<OpenBlock>::is_none}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = const true;                 // scope 0 at cita-executor/src/backlogs.rs:68:12: 68:68
        goto -> bb3;                     // scope 0 at cita-executor/src/backlogs.rs:68:12: 68:68
    }

    bb2: {
        _6 = &((*_1).2: std::option::Option<core::libexecutor::block::ClosedBlock>); // scope 0 at cita-executor/src/backlogs.rs:68:41: 68:68
        _5 = std::option::Option::<ClosedBlock>::is_none(move _6) -> bb5; // scope 0 at cita-executor/src/backlogs.rs:68:41: 68:68
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:68:59: 68:66
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<ClosedBlock>) -> bool {std::option::Option::<ClosedBlock>::is_none}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _2) -> [0: bb7, otherwise: bb6]; // scope 0 at cita-executor/src/backlogs.rs:68:12: 68:68
    }

    bb4: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at cita-executor/src/backlogs.rs:68:12: 68:68
    }

    bb5: {
        _2 = move _5;                    // scope 0 at cita-executor/src/backlogs.rs:68:12: 68:68
        goto -> bb3;                     // scope 0 at cita-executor/src/backlogs.rs:68:12: 68:68
    }

    bb6: {
        _0 = const false;                // scope 0 at cita-executor/src/backlogs.rs:69:20: 69:25
        goto -> bb16;                    // scope 0 at cita-executor/src/backlogs.rs:75:6: 75:6
    }

    bb7: {
        _9 = &((*_1).0: std::option::Option<types::block::OpenBlock>); // scope 0 at cita-executor/src/backlogs.rs:72:26: 72:50
        _8 = std::option::Option::<OpenBlock>::as_ref(move _9) -> bb8; // scope 0 at cita-executor/src/backlogs.rs:72:26: 72:50
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:72:42: 72:48
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<OpenBlock>) -> std::option::Option<&'a OpenBlock> {std::option::Option::<OpenBlock>::as_ref}, val: Value(<ZST>) }
    }

    bb8: {
        _7 = std::option::Option::<&OpenBlock>::unwrap(move _8) -> bb9; // scope 0 at cita-executor/src/backlogs.rs:72:26: 72:59
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:72:51: 72:57
                                         // + literal: Const { ty: fn(std::option::Option<&OpenBlock>) -> &OpenBlock {std::option::Option::<&OpenBlock>::unwrap}, val: Value(<ZST>) }
    }

    bb9: {
        _12 = &((*_1).2: std::option::Option<core::libexecutor::block::ClosedBlock>); // scope 1 at cita-executor/src/backlogs.rs:73:28: 73:54
        _11 = std::option::Option::<ClosedBlock>::as_ref(move _12) -> bb10; // scope 1 at cita-executor/src/backlogs.rs:73:28: 73:54
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:73:46: 73:52
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<ClosedBlock>) -> std::option::Option<&'a ClosedBlock> {std::option::Option::<ClosedBlock>::as_ref}, val: Value(<ZST>) }
    }

    bb10: {
        _10 = std::option::Option::<&ClosedBlock>::unwrap(move _11) -> bb11; // scope 1 at cita-executor/src/backlogs.rs:73:28: 73:63
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:73:55: 73:61
                                         // + literal: Const { ty: fn(std::option::Option<&ClosedBlock>) -> &ClosedBlock {std::option::Option::<&ClosedBlock>::unwrap}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = _10;                       // scope 2 at cita-executor/src/backlogs.rs:74:9: 74:47
        _18 = <ClosedBlock as Deref>::deref(move _19) -> bb12; // scope 2 at cita-executor/src/backlogs.rs:74:9: 74:47
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:74:9: 74:47
                                         // + literal: Const { ty: for<'a> fn(&'a ClosedBlock) -> &'a <ClosedBlock as Deref>::Target {<ClosedBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb12: {
        _17 = _18;                       // scope 2 at cita-executor/src/backlogs.rs:74:9: 74:47
        _16 = <types::block::Block as Deref>::deref(move _17) -> bb13; // scope 2 at cita-executor/src/backlogs.rs:74:9: 74:47
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:74:9: 74:47
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a <types::block::Block as Deref>::Target {<types::block::Block as Deref>::deref}, val: Value(<ZST>) }
    }

    bb13: {
        _15 = _16;                       // scope 2 at cita-executor/src/backlogs.rs:74:9: 74:47
        _14 = <Header as Deref>::deref(move _15) -> bb14; // scope 2 at cita-executor/src/backlogs.rs:74:9: 74:47
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:74:9: 74:47
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _13 = _14;                       // scope 2 at cita-executor/src/backlogs.rs:74:9: 74:47
        _22 = _7;                        // scope 2 at cita-executor/src/backlogs.rs:74:36: 74:46
        _21 = <OpenBlock as Deref>::deref(move _22) -> bb15; // scope 2 at cita-executor/src/backlogs.rs:74:36: 74:46
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:74:36: 74:46
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _20 = _21;                       // scope 2 at cita-executor/src/backlogs.rs:74:36: 74:46
        _0 = OpenHeader::is_equivalent(move _13, move _20) -> bb16; // scope 2 at cita-executor/src/backlogs.rs:74:9: 74:47
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:74:22: 74:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a OpenHeader, &'b OpenHeader) -> bool {OpenHeader::is_equivalent}, val: Value(<ZST>) }
    }

    bb16: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:75:6: 75:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::is_block_ok(_1: &Backlog, _2: &H256, _3: u64) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:77:24: 77:29
    debug current_hash => _2;            // in scope 0 at cita-executor/src/backlogs.rs:77:31: 77:43
    debug current_height => _3;          // in scope 0 at cita-executor/src/backlogs.rs:77:64: 77:78
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/backlogs.rs:77:88: 77:92
    let _4: &cita_types::H256;           // in scope 0 at cita-executor/src/backlogs.rs:78:14: 78:25
    let _5: u64;                         // in scope 0 at cita-executor/src/backlogs.rs:78:27: 78:33
    let mut _6: (&cita_types::H256, u64); // in scope 0 at cita-executor/src/backlogs.rs:78:37: 81:10
    let _7: &types::block::OpenBlock;    // in scope 0 at cita-executor/src/backlogs.rs:79:17: 79:27
    let mut _8: std::option::Option<&types::block::OpenBlock>; // in scope 0 at cita-executor/src/backlogs.rs:79:30: 79:54
    let mut _9: &std::option::Option<types::block::OpenBlock>; // in scope 0 at cita-executor/src/backlogs.rs:79:30: 79:54
    let mut _10: &cita_types::H256;      // in scope 0 at cita-executor/src/backlogs.rs:80:14: 80:38
    let mut _11: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:80:14: 80:38
    let _12: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:80:14: 80:38
    let mut _13: &types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:80:14: 80:38
    let mut _14: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:80:40: 80:59
    let mut _15: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:80:40: 80:59
    let _16: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:80:40: 80:59
    let mut _17: &types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:80:40: 80:59
    let mut _18: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:82:12: 82:39
    let mut _19: &&cita_types::H256;     // in scope 0 at cita-executor/src/backlogs.rs:82:12: 82:23
    let mut _20: &&cita_types::H256;     // in scope 0 at cita-executor/src/backlogs.rs:82:27: 82:39
    let mut _22: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _23: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _24: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _25: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _26: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _27: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _28: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _29: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _30: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _31: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:84:17: 84:89
    let mut _32: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _33: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _34: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _35: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:85:17: 85:28
    let _36: &&cita_types::H256;         // in scope 0 at cita-executor/src/backlogs.rs:85:17: 85:28
    let mut _37: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:86:17: 86:29
    let _38: &&cita_types::H256;         // in scope 0 at cita-executor/src/backlogs.rs:86:17: 86:29
    let mut _39: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:89:9: 89:36
    let mut _40: &&cita_types::H256;     // in scope 0 at cita-executor/src/backlogs.rs:89:9: 89:20
    let mut _41: &&cita_types::H256;     // in scope 0 at cita-executor/src/backlogs.rs:89:24: 89:36
    let mut _42: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:89:40: 89:68
    let mut _43: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:89:50: 89:68
    let mut _44: (u64, bool);            // in scope 0 at cita-executor/src/backlogs.rs:89:50: 89:68
    scope 1 {
        debug parent_hash => _4;         // in scope 1 at cita-executor/src/backlogs.rs:78:14: 78:25
        debug height => _5;              // in scope 1 at cita-executor/src/backlogs.rs:78:27: 78:33
        let _21: log::Level;             // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        scope 3 {
            debug lvl => _21;            // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _45: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _46: &[&str; 3];     // in scope 3 at cita-executor/src/backlogs.rs:84:17: 84:89
            let mut _47: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
    }
    scope 2 {
        debug open_block => _7;          // in scope 2 at cita-executor/src/backlogs.rs:79:17: 79:27
    }

    bb0: {
        _9 = &((*_1).0: std::option::Option<types::block::OpenBlock>); // scope 0 at cita-executor/src/backlogs.rs:79:30: 79:54
        _8 = std::option::Option::<OpenBlock>::as_ref(move _9) -> bb1; // scope 0 at cita-executor/src/backlogs.rs:79:30: 79:54
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:79:46: 79:52
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<OpenBlock>) -> std::option::Option<&'a OpenBlock> {std::option::Option::<OpenBlock>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = std::option::Option::<&OpenBlock>::unwrap(move _8) -> bb2; // scope 0 at cita-executor/src/backlogs.rs:79:30: 79:63
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:79:55: 79:61
                                         // + literal: Const { ty: fn(std::option::Option<&OpenBlock>) -> &OpenBlock {std::option::Option::<&OpenBlock>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = _7;                        // scope 2 at cita-executor/src/backlogs.rs:80:14: 80:38
        _12 = <OpenBlock as Deref>::deref(move _13) -> bb3; // scope 2 at cita-executor/src/backlogs.rs:80:14: 80:38
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:80:14: 80:38
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = _12;                       // scope 2 at cita-executor/src/backlogs.rs:80:14: 80:38
        _10 = OpenHeader::parent_hash(move _11) -> bb4; // scope 2 at cita-executor/src/backlogs.rs:80:14: 80:38
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:80:25: 80:36
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::parent_hash}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = _7;                        // scope 2 at cita-executor/src/backlogs.rs:80:40: 80:59
        _16 = <OpenBlock as Deref>::deref(move _17) -> bb5; // scope 2 at cita-executor/src/backlogs.rs:80:40: 80:59
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:80:40: 80:59
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = _16;                       // scope 2 at cita-executor/src/backlogs.rs:80:40: 80:59
        _14 = OpenHeader::number(move _15) -> bb6; // scope 2 at cita-executor/src/backlogs.rs:80:40: 80:59
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:80:51: 80:57
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb6: {
        _6 = (move _10, move _14);       // scope 2 at cita-executor/src/backlogs.rs:80:13: 80:60
        _4 = (_6.0: &cita_types::H256);  // scope 0 at cita-executor/src/backlogs.rs:78:14: 78:25
        _5 = (_6.1: u64);                // scope 0 at cita-executor/src/backlogs.rs:78:27: 78:33
        _19 = &_4;                       // scope 1 at cita-executor/src/backlogs.rs:82:12: 82:23
        _20 = &_2;                       // scope 1 at cita-executor/src/backlogs.rs:82:27: 82:39
        _18 = <&H256 as PartialEq>::ne(move _19, move _20) -> bb7; // scope 1 at cita-executor/src/backlogs.rs:82:12: 82:39
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:82:12: 82:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H256, &'b &H256) -> bool {<&H256 as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _18) -> [0: bb19, otherwise: bb8]; // scope 1 at cita-executor/src/backlogs.rs:82:12: 82:39
    }

    bb8: {
        _21 = log::Level::Trace;         // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _24 = &_21;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _47 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Backlog::is_block_ok, [], Some(promoted[2])) }
        _23 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _24, _47) -> bb12; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb11;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        _26 = &_21;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _28 = log::max_level() -> bb13;  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb11: {
        switchInt(move _22) -> [0: bb19, otherwise: bb15]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb12: {
        switchInt(move _23) -> [0: bb9, otherwise: bb10]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        _27 = &_28;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _25 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _26, move _27) -> bb14; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb14: {
        _22 = move _25;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb11;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb15: {
        _46 = const _;                   // scope 3 at cita-executor/src/backlogs.rs:84:17: 84:89
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:84:17: 84:89
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Backlog::is_block_ok, [], Some(promoted[1])) }
        _31 = _46 as &[&str] (Pointer(Unsize)); // scope 3 at cita-executor/src/backlogs.rs:84:17: 84:89
        _36 = &_4;                       // scope 3 at cita-executor/src/backlogs.rs:85:17: 85:28
        _35 = core::fmt::ArgumentV1::<'_>::new_debug::<&H256>(_36) -> bb16; // scope 3 at cita-executor/src/backlogs.rs:85:17: 85:28
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:85:17: 85:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &H256) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&H256>}, val: Value(<ZST>) }
    }

    bb16: {
        _38 = &_2;                       // scope 3 at cita-executor/src/backlogs.rs:86:17: 86:29
        _37 = core::fmt::ArgumentV1::<'_>::new_debug::<&H256>(_38) -> bb17; // scope 3 at cita-executor/src/backlogs.rs:86:17: 86:29
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:86:17: 86:29
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &H256) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&H256>}, val: Value(<ZST>) }
    }

    bb17: {
        _34 = [move _35, move _37];      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _33 = &_34;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _32 = _33 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> bb18; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb18: {
        _45 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Backlog::is_block_ok, [], Some(promoted[0])) }
        _29 = log::__private_api_log(move _30, _21, _45) -> bb19; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb19: {
        _40 = &_4;                       // scope 1 at cita-executor/src/backlogs.rs:89:9: 89:20
        _41 = &_2;                       // scope 1 at cita-executor/src/backlogs.rs:89:24: 89:36
        _39 = <&H256 as PartialEq>::eq(move _40, move _41) -> bb23; // scope 1 at cita-executor/src/backlogs.rs:89:9: 89:36
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:89:9: 89:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H256, &'b &H256) -> bool {<&H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb20: {
        _0 = const false;                // scope 1 at cita-executor/src/backlogs.rs:89:9: 89:68
        goto -> bb22;                    // scope 1 at cita-executor/src/backlogs.rs:89:9: 89:68
    }

    bb21: {
        _44 = CheckedAdd(_3, const 1_u64); // scope 1 at cita-executor/src/backlogs.rs:89:50: 89:68
        assert(!move (_44.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_u64) -> bb24; // scope 1 at cita-executor/src/backlogs.rs:89:50: 89:68
    }

    bb22: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:90:6: 90:6
    }

    bb23: {
        switchInt(move _39) -> [0: bb20, otherwise: bb21]; // scope 1 at cita-executor/src/backlogs.rs:89:9: 89:68
    }

    bb24: {
        _43 = move (_44.0: u64);         // scope 1 at cita-executor/src/backlogs.rs:89:50: 89:68
        _42 = Eq(_5, move _43);          // scope 1 at cita-executor/src/backlogs.rs:89:40: 89:68
        _0 = move _42;                   // scope 1 at cita-executor/src/backlogs.rs:89:9: 89:68
        goto -> bb22;                    // scope 1 at cita-executor/src/backlogs.rs:89:9: 89:68
    }
}

promoted[0] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::is_block_ok: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:83:13: 87:14
    let mut _7: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:83:13: 87:14

    bb0: {
        _3 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/backlogs.rs"; // scope 0 at cita-executor/src/backlogs.rs:83:13: 87:14
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:83:13: 87:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/backlogs.rs:83:13: 87:14
        _1 = (move _2, move _4, move _6, const 83_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::is_block_ok: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at cita-executor/src/backlogs.rs:84:17: 84:89
    let mut _1: [&str; 3];               // in scope 0 at cita-executor/src/backlogs.rs:84:17: 84:89

    bb0: {
        _1 = [const "invalid open_block, open_block.parent_hash(", const ") != current_hash(", const ")"]; // scope 0 at cita-executor/src/backlogs.rs:84:17: 84:89
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:84:17: 84:89
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:84:17: 84:89
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:84:17: 84:89
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:84:17: 84:89
        return;                          // scope 0 at cita-executor/src/backlogs.rs:84:17: 84:89
    }
}

promoted[2] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::is_block_ok: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::complete(_1: Backlog) -> ClosedBlock {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:95:21: 95:25
    let mut _0: core::libexecutor::block::ClosedBlock; // return place in scope 0 at cita-executor/src/backlogs.rs:98:13: 98:29
    let mut _2: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:96:9: 96:37
    let mut _3: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:96:17: 96:36
    let mut _4: &backlogs::Backlog;      // in scope 0 at cita-executor/src/backlogs.rs:96:17: 96:36
    let mut _5: !;                       // in scope 0 at cita-executor/src/backlogs.rs:96:9: 96:37
    let mut _6: std::option::Option<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/backlogs.rs:98:32: 98:49
    let mut _8: std::option::Option<libproto::Proof>; // in scope 0 at cita-executor/src/backlogs.rs:99:21: 99:31
    let _9: ();                          // in scope 0 at cita-executor/src/backlogs.rs:101:9: 101:38
    let mut _10: &mut types::header::Header; // in scope 0 at cita-executor/src/backlogs.rs:101:9: 101:38
    let mut _11: &mut types::header::Header; // in scope 0 at cita-executor/src/backlogs.rs:101:9: 101:38
    let mut _12: &mut types::block::Block; // in scope 0 at cita-executor/src/backlogs.rs:101:9: 101:38
    let mut _13: &mut types::block::Block; // in scope 0 at cita-executor/src/backlogs.rs:101:9: 101:38
    let mut _14: &mut core::libexecutor::block::ClosedBlock; // in scope 0 at cita-executor/src/backlogs.rs:101:9: 101:38
    let mut _15: libproto::Proof;        // in scope 0 at cita-executor/src/backlogs.rs:101:32: 101:37
    let _16: ();                         // in scope 0 at cita-executor/src/backlogs.rs:102:9: 102:30
    let mut _17: &mut types::header::Header; // in scope 0 at cita-executor/src/backlogs.rs:102:9: 102:30
    let mut _18: &mut types::header::Header; // in scope 0 at cita-executor/src/backlogs.rs:102:9: 102:30
    let mut _19: &mut types::block::Block; // in scope 0 at cita-executor/src/backlogs.rs:102:9: 102:30
    let mut _20: &mut types::block::Block; // in scope 0 at cita-executor/src/backlogs.rs:102:9: 102:30
    let mut _21: &mut core::libexecutor::block::ClosedBlock; // in scope 0 at cita-executor/src/backlogs.rs:102:9: 102:30
    let mut _22: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:104:5: 104:6
    let mut _23: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:104:5: 104:6
    let mut _24: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:104:5: 104:6
    scope 1 {
        debug closed_block => _0;        // in scope 1 at cita-executor/src/backlogs.rs:98:13: 98:29
        let _7: libproto::Proof;         // in scope 1 at cita-executor/src/backlogs.rs:99:13: 99:18
        scope 2 {
            debug proof => _7;           // in scope 2 at cita-executor/src/backlogs.rs:99:13: 99:18
        }
    }

    bb0: {
        _24 = const false;               // scope 0 at cita-executor/src/backlogs.rs:96:9: 96:37
        _22 = const false;               // scope 0 at cita-executor/src/backlogs.rs:96:9: 96:37
        _23 = const false;               // scope 0 at cita-executor/src/backlogs.rs:96:9: 96:37
        _23 = const true;                // scope 0 at cita-executor/src/backlogs.rs:96:9: 96:37
        _24 = const true;                // scope 0 at cita-executor/src/backlogs.rs:96:9: 96:37
        _4 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:96:17: 96:36
        _3 = Backlog::is_completed(move _4) -> [return: bb1, unwind: bb21]; // scope 0 at cita-executor/src/backlogs.rs:96:17: 96:36
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:96:22: 96:34
                                         // + literal: Const { ty: for<'a> fn(&'a Backlog) -> bool {Backlog::is_completed}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Not(move _3);               // scope 0 at cita-executor/src/backlogs.rs:96:9: 96:37
        switchInt(move _2) -> [0: bb3, otherwise: bb2]; // scope 0 at cita-executor/src/backlogs.rs:96:9: 96:37
    }

    bb2: {
        _5 = core::panicking::panic(const "assertion failed: self.is_completed()") -> bb21; // scope 0 at cita-executor/src/backlogs.rs:96:9: 96:37
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:96:9: 96:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _24 = const false;               // scope 0 at cita-executor/src/backlogs.rs:98:32: 98:49
        _6 = move (_1.2: std::option::Option<core::libexecutor::block::ClosedBlock>); // scope 0 at cita-executor/src/backlogs.rs:98:32: 98:49
        _0 = std::option::Option::<ClosedBlock>::unwrap(move _6) -> [return: bb4, unwind: bb21]; // scope 0 at cita-executor/src/backlogs.rs:98:32: 98:58
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:98:50: 98:56
                                         // + literal: Const { ty: fn(std::option::Option<ClosedBlock>) -> ClosedBlock {std::option::Option::<ClosedBlock>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = const false;               // scope 1 at cita-executor/src/backlogs.rs:99:21: 99:31
        _8 = move (_1.1: std::option::Option<libproto::Proof>); // scope 1 at cita-executor/src/backlogs.rs:99:21: 99:31
        _7 = std::option::Option::<libproto::Proof>::unwrap(move _8) -> [return: bb5, unwind: bb12]; // scope 1 at cita-executor/src/backlogs.rs:99:21: 99:40
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:99:32: 99:38
                                         // + literal: Const { ty: fn(std::option::Option<libproto::Proof>) -> libproto::Proof {std::option::Option::<libproto::Proof>::unwrap}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = const true;                // scope 1 at cita-executor/src/backlogs.rs:99:39: 99:40
        _14 = &mut _0;                   // scope 2 at cita-executor/src/backlogs.rs:101:9: 101:38
        _13 = <ClosedBlock as DerefMut>::deref_mut(move _14) -> [return: bb6, unwind: bb16]; // scope 2 at cita-executor/src/backlogs.rs:101:9: 101:38
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:101:9: 101:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut ClosedBlock) -> &'a mut <ClosedBlock as Deref>::Target {<ClosedBlock as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = _13;                       // scope 2 at cita-executor/src/backlogs.rs:101:9: 101:38
        _11 = <types::block::Block as DerefMut>::deref_mut(move _12) -> [return: bb7, unwind: bb16]; // scope 2 at cita-executor/src/backlogs.rs:101:9: 101:38
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:101:9: 101:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut types::block::Block) -> &'a mut <types::block::Block as Deref>::Target {<types::block::Block as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = _11;                       // scope 2 at cita-executor/src/backlogs.rs:101:9: 101:38
        _22 = const false;               // scope 2 at cita-executor/src/backlogs.rs:101:32: 101:37
        _15 = move _7;                   // scope 2 at cita-executor/src/backlogs.rs:101:32: 101:37
        _9 = Header::set_proof(move _10, move _15) -> [return: bb8, unwind: bb16]; // scope 2 at cita-executor/src/backlogs.rs:101:9: 101:38
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:101:22: 101:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header, libproto::Proof) {Header::set_proof}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = &mut _0;                   // scope 2 at cita-executor/src/backlogs.rs:102:9: 102:30
        _20 = <ClosedBlock as DerefMut>::deref_mut(move _21) -> [return: bb9, unwind: bb16]; // scope 2 at cita-executor/src/backlogs.rs:102:9: 102:30
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:102:9: 102:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut ClosedBlock) -> &'a mut <ClosedBlock as Deref>::Target {<ClosedBlock as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = _20;                       // scope 2 at cita-executor/src/backlogs.rs:102:9: 102:30
        _18 = <types::block::Block as DerefMut>::deref_mut(move _19) -> [return: bb10, unwind: bb16]; // scope 2 at cita-executor/src/backlogs.rs:102:9: 102:30
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:102:9: 102:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut types::block::Block) -> &'a mut <types::block::Block as Deref>::Target {<types::block::Block as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = _18;                       // scope 2 at cita-executor/src/backlogs.rs:102:9: 102:30
        _16 = Header::rehash(move _17) -> [return: bb11, unwind: bb16]; // scope 2 at cita-executor/src/backlogs.rs:102:9: 102:30
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:102:22: 102:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) {Header::rehash}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = const false;               // scope 1 at cita-executor/src/backlogs.rs:104:5: 104:6
        drop((_1.0: std::option::Option<types::block::OpenBlock>)) -> bb14; // scope 0 at cita-executor/src/backlogs.rs:104:5: 104:6
    }

    bb12 (cleanup): {
        drop(_0) -> bb21;                // scope 0 at cita-executor/src/backlogs.rs:104:5: 104:6
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/backlogs.rs:95:5: 104:6
    }

    bb14: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:104:6: 104:6
    }

    bb15 (cleanup): {
        drop(_7) -> bb12;                // scope 1 at cita-executor/src/backlogs.rs:104:5: 104:6
    }

    bb16 (cleanup): {
        switchInt(_22) -> [0: bb12, otherwise: bb15]; // scope 1 at cita-executor/src/backlogs.rs:104:5: 104:6
    }

    bb17 (cleanup): {
        switchInt(_24) -> [0: bb13, otherwise: bb18]; // scope 0 at cita-executor/src/backlogs.rs:104:5: 104:6
    }

    bb18 (cleanup): {
        drop((_1.2: std::option::Option<core::libexecutor::block::ClosedBlock>)) -> bb13; // scope 0 at cita-executor/src/backlogs.rs:104:5: 104:6
    }

    bb19 (cleanup): {
        switchInt(_23) -> [0: bb17, otherwise: bb20]; // scope 0 at cita-executor/src/backlogs.rs:104:5: 104:6
    }

    bb20 (cleanup): {
        drop((_1.1: std::option::Option<libproto::Proof>)) -> bb17; // scope 0 at cita-executor/src/backlogs.rs:104:5: 104:6
    }

    bb21 (cleanup): {
        drop((_1.0: std::option::Option<types::block::OpenBlock>)) -> bb19; // scope 0 at cita-executor/src/backlogs.rs:104:5: 104:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::insert_open(_1: &mut Backlog, _2: u64, _3: Priority, _4: OpenBlock, _5: std::option::Option<libproto::Proof>) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:107:9: 107:18
    debug height => _2;                  // in scope 0 at cita-executor/src/backlogs.rs:108:9: 108:15
    debug priority => _3;                // in scope 0 at cita-executor/src/backlogs.rs:109:9: 109:17
    debug open_block => _4;              // in scope 0 at cita-executor/src/backlogs.rs:110:9: 110:19
    debug proof => _5;                   // in scope 0 at cita-executor/src/backlogs.rs:111:9: 111:14
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/backlogs.rs:112:10: 112:14
    let mut _6: isize;                   // in scope 0 at cita-executor/src/backlogs.rs:114:16: 114:42
    let mut _8: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:115:16: 115:56
    let mut _9: u8;                      // in scope 0 at cita-executor/src/backlogs.rs:115:16: 115:39
    let _10: backlogs::Priority;         // in scope 0 at cita-executor/src/backlogs.rs:115:16: 115:33
    let mut _11: isize;                  // in scope 0 at cita-executor/src/backlogs.rs:115:16: 115:33
    let mut _12: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:115:16: 115:39
    let mut _13: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:115:16: 115:39
    let mut _14: u8;                     // in scope 0 at cita-executor/src/backlogs.rs:115:42: 115:56
    let mut _15: isize;                  // in scope 0 at cita-executor/src/backlogs.rs:115:42: 115:50
    let mut _16: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:115:42: 115:56
    let mut _17: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:115:42: 115:56
    let mut _19: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _20: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _21: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _22: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _23: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _24: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _25: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _26: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _27: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _28: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:117:21: 117:91
    let mut _29: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _30: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _31: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _32: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:118:21: 118:27
    let _33: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:118:21: 118:27
    let mut _34: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:119:21: 119:29
    let _35: &backlogs::Priority;        // in scope 0 at cita-executor/src/backlogs.rs:119:21: 119:29
    let mut _36: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:120:21: 120:37
    let _37: &&backlogs::Priority;       // in scope 0 at cita-executor/src/backlogs.rs:120:21: 120:37
    let mut _38: isize;                  // in scope 0 at cita-executor/src/backlogs.rs:127:16: 127:31
    let mut _41: libproto::Proof;        // in scope 0 at cita-executor/src/backlogs.rs:128:51: 128:64
    let mut _43: usize;                  // in scope 0 at cita-executor/src/backlogs.rs:129:44: 129:60
    let mut _44: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:130:16: 130:42
    let mut _45: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:130:16: 130:32
    let mut _46: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:130:16: 130:28
    let mut _47: (u64, bool);            // in scope 0 at cita-executor/src/backlogs.rs:130:16: 130:32
    let mut _49: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _50: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _51: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _52: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _53: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _54: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _55: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _56: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _57: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _58: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:132:21: 132:76
    let mut _59: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _60: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _61: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _62: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:133:21: 133:27
    let _63: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:133:21: 133:27
    let mut _64: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:134:21: 134:33
    let _65: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:134:21: 134:33
    let mut _66: std::option::Option<backlogs::Priority>; // in scope 0 at cita-executor/src/backlogs.rs:140:25: 140:39
    let mut _67: std::option::Option<types::block::OpenBlock>; // in scope 0 at cita-executor/src/backlogs.rs:141:27: 141:43
    let mut _68: types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:141:32: 141:42
    let mut _69: std::option::Option<libproto::Proof>; // in scope 0 at cita-executor/src/backlogs.rs:142:22: 142:27
    let mut _76: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:144:5: 144:6
    let mut _77: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:144:5: 144:6
    scope 1 {
        debug present_priority => _7;    // in scope 1 at cita-executor/src/backlogs.rs:114:21: 114:41
        let _7: &backlogs::Priority;     // in scope 1 at cita-executor/src/backlogs.rs:114:21: 114:41
        let _18: log::Level;             // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        scope 2 {
            debug lvl => _18;            // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _73: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _74: &[&str; 4];     // in scope 2 at cita-executor/src/backlogs.rs:117:21: 117:91
            let mut _75: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
    }
    scope 3 {
        debug proof => _39;              // in scope 3 at cita-executor/src/backlogs.rs:127:21: 127:30
        let _39: &libproto::Proof;       // in scope 3 at cita-executor/src/backlogs.rs:127:21: 127:30
        let _40: proof::BftProof;        // in scope 3 at cita-executor/src/backlogs.rs:128:17: 128:26
        scope 4 {
            debug bft_proof => _40;      // in scope 4 at cita-executor/src/backlogs.rs:128:17: 128:26
            let _42: u64;                // in scope 4 at cita-executor/src/backlogs.rs:129:17: 129:29
            scope 5 {
                debug proof_height => _42; // in scope 5 at cita-executor/src/backlogs.rs:129:17: 129:29
                let _48: log::Level;     // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                scope 6 {
                    debug lvl => _48;    // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let mut _70: &(&str, &str, &str, u32); // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                    let mut _71: &[&str; 3]; // in scope 6 at cita-executor/src/backlogs.rs:132:21: 132:76
                    let mut _72: &log::LevelFilter; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                }
            }
        }
    }

    bb0: {
        _77 = const false;               // scope 0 at cita-executor/src/backlogs.rs:114:9: 124:10
        _76 = const false;               // scope 0 at cita-executor/src/backlogs.rs:114:9: 124:10
        _77 = const true;                // scope 0 at cita-executor/src/backlogs.rs:114:9: 124:10
        _76 = const true;                // scope 0 at cita-executor/src/backlogs.rs:114:9: 124:10
        _6 = discriminant(((*_1).3: std::option::Option<backlogs::Priority>)); // scope 1 at cita-executor/src/backlogs.rs:114:16: 114:42
        switchInt(move _6) -> [1: bb1, otherwise: bb15]; // scope 1 at cita-executor/src/backlogs.rs:114:16: 114:42
    }

    bb1: {
        _7 = &((((*_1).3: std::option::Option<backlogs::Priority>) as Some).0: backlogs::Priority); // scope 1 at cita-executor/src/backlogs.rs:114:21: 114:41
        _10 = (*_7);                     // scope 1 at cita-executor/src/backlogs.rs:115:16: 115:33
        _11 = discriminant(_10);         // scope 1 at cita-executor/src/backlogs.rs:115:16: 115:39
        _12 = Ge(const 3_isize, _11);    // scope 1 at cita-executor/src/backlogs.rs:115:16: 115:39
        assume(_12);                     // scope 1 at cita-executor/src/backlogs.rs:115:16: 115:39
        _13 = Le(const 1_isize, _11);    // scope 1 at cita-executor/src/backlogs.rs:115:16: 115:39
        assume(_13);                     // scope 1 at cita-executor/src/backlogs.rs:115:16: 115:39
        _9 = move _11 as u8 (IntToInt);  // scope 1 at cita-executor/src/backlogs.rs:115:16: 115:39
        _15 = discriminant(_3);          // scope 1 at cita-executor/src/backlogs.rs:115:42: 115:56
        _16 = Ge(const 3_isize, _15);    // scope 1 at cita-executor/src/backlogs.rs:115:42: 115:56
        assume(_16);                     // scope 1 at cita-executor/src/backlogs.rs:115:42: 115:56
        _17 = Le(const 1_isize, _15);    // scope 1 at cita-executor/src/backlogs.rs:115:42: 115:56
        assume(_17);                     // scope 1 at cita-executor/src/backlogs.rs:115:42: 115:56
        _14 = move _15 as u8 (IntToInt); // scope 1 at cita-executor/src/backlogs.rs:115:42: 115:56
        _8 = Gt(move _9, move _14);      // scope 1 at cita-executor/src/backlogs.rs:115:16: 115:56
        switchInt(move _8) -> [0: bb15, otherwise: bb2]; // scope 1 at cita-executor/src/backlogs.rs:115:16: 115:56
    }

    bb2: {
        _18 = log::Level::Trace;         // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _21 = &_18;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _75 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Backlog::insert_open, [], Some(promoted[5])) }
        _20 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _21, _75) -> [return: bb6, unwind: bb45]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb3: {
        _19 = const false;               // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb5;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        _23 = &_18;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _25 = log::max_level() -> [return: bb7, unwind: bb45]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _19) -> [0: bb14, otherwise: bb9]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb6: {
        switchInt(move _20) -> [0: bb3, otherwise: bb4]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _24 = &_25;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _22 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _23, move _24) -> [return: bb8, unwind: bb45]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = move _22;                  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb5;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        _74 = const _;                   // scope 2 at cita-executor/src/backlogs.rs:117:21: 117:91
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:117:21: 117:91
                                         // + literal: Const { ty: &[&str; 4], val: Unevaluated(Backlog::insert_open, [], Some(promoted[4])) }
        _28 = _74 as &[&str] (Pointer(Unsize)); // scope 2 at cita-executor/src/backlogs.rs:117:21: 117:91
        _33 = &_2;                       // scope 2 at cita-executor/src/backlogs.rs:118:21: 118:27
        _32 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_33) -> [return: bb10, unwind: bb45]; // scope 2 at cita-executor/src/backlogs.rs:118:21: 118:27
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:118:21: 118:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb10: {
        _35 = &_3;                       // scope 2 at cita-executor/src/backlogs.rs:119:21: 119:29
        _34 = core::fmt::ArgumentV1::<'_>::new_debug::<Priority>(_35) -> [return: bb11, unwind: bb45]; // scope 2 at cita-executor/src/backlogs.rs:119:21: 119:29
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:119:21: 119:29
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b Priority) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Priority>}, val: Value(<ZST>) }
    }

    bb11: {
        _37 = &_7;                       // scope 2 at cita-executor/src/backlogs.rs:120:21: 120:37
        _36 = core::fmt::ArgumentV1::<'_>::new_debug::<&Priority>(_37) -> [return: bb12, unwind: bb45]; // scope 2 at cita-executor/src/backlogs.rs:120:21: 120:37
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:120:21: 120:37
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &Priority) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&Priority>}, val: Value(<ZST>) }
    }

    bb12: {
        _31 = [move _32, move _34, move _36]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _30 = &_31;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _29 = _30 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _27 = Arguments::<'_>::new_v1(move _28, move _29) -> [return: bb13, unwind: bb45]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb13: {
        _73 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Backlog::insert_open, [], Some(promoted[3])) }
        _26 = log::__private_api_log(move _27, _18, _73) -> [return: bb48, unwind: bb45]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb14: {
        _0 = const false;                // scope 1 at cita-executor/src/backlogs.rs:122:24: 122:29
        goto -> bb39;                    // scope 0 at no-location
    }

    bb15: {
        _38 = discriminant(_5);          // scope 3 at cita-executor/src/backlogs.rs:127:16: 127:31
        switchInt(move _38) -> [1: bb16, otherwise: bb34]; // scope 3 at cita-executor/src/backlogs.rs:127:16: 127:31
    }

    bb16: {
        _39 = &((_5 as Some).0: libproto::Proof); // scope 3 at cita-executor/src/backlogs.rs:127:21: 127:30
        _41 = <libproto::Proof as Clone>::clone(_39) -> [return: bb17, unwind: bb45]; // scope 3 at cita-executor/src/backlogs.rs:128:51: 128:64
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:128:57: 128:62
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb17: {
        _40 = <proof::BftProof as From<libproto::Proof>>::from(move _41) -> [return: bb18, unwind: bb45]; // scope 3 at cita-executor/src/backlogs.rs:128:29: 128:65
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:128:29: 128:50
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(libproto::Proof) -> proof::BftProof {<proof::BftProof as From<libproto::Proof>>::from}, val: Value(<ZST>) }
    }

    bb18: {
        _43 = (_40.1: usize);            // scope 4 at cita-executor/src/backlogs.rs:129:44: 129:60
        _42 = wrap_height(move _43) -> [return: bb19, unwind: bb42]; // scope 4 at cita-executor/src/backlogs.rs:129:32: 129:61
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:129:32: 129:43
                                         // + literal: Const { ty: fn(usize) -> u64 {wrap_height}, val: Value(<ZST>) }
    }

    bb19: {
        _46 = _42;                       // scope 5 at cita-executor/src/backlogs.rs:130:16: 130:28
        _47 = CheckedAdd(_46, const 1_u64); // scope 5 at cita-executor/src/backlogs.rs:130:16: 130:32
        assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _46, const 1_u64) -> [success: bb20, unwind: bb42]; // scope 5 at cita-executor/src/backlogs.rs:130:16: 130:32
    }

    bb20: {
        _45 = move (_47.0: u64);         // scope 5 at cita-executor/src/backlogs.rs:130:16: 130:32
        _44 = Ne(move _45, _2);          // scope 5 at cita-executor/src/backlogs.rs:130:16: 130:42
        switchInt(move _44) -> [0: bb33, otherwise: bb21]; // scope 5 at cita-executor/src/backlogs.rs:130:16: 130:42
    }

    bb21: {
        _48 = log::Level::Trace;         // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _51 = &_48;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _72 = const _;                   // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Backlog::insert_open, [], Some(promoted[2])) }
        _50 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _51, _72) -> [return: bb25, unwind: bb42]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb22: {
        _49 = const false;               // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb24;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb23: {
        _53 = &_48;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _55 = log::max_level() -> [return: bb26, unwind: bb42]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb24: {
        switchInt(move _49) -> [0: bb32, otherwise: bb28]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb25: {
        switchInt(move _50) -> [0: bb22, otherwise: bb23]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb26: {
        _54 = &_55;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _52 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _53, move _54) -> [return: bb27, unwind: bb42]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb27: {
        _49 = move _52;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb24;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb28: {
        _71 = const _;                   // scope 6 at cita-executor/src/backlogs.rs:132:21: 132:76
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:132:21: 132:76
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Backlog::insert_open, [], Some(promoted[1])) }
        _58 = _71 as &[&str] (Pointer(Unsize)); // scope 6 at cita-executor/src/backlogs.rs:132:21: 132:76
        _63 = &_2;                       // scope 6 at cita-executor/src/backlogs.rs:133:21: 133:27
        _62 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_63) -> [return: bb29, unwind: bb42]; // scope 6 at cita-executor/src/backlogs.rs:133:21: 133:27
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:133:21: 133:27
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb29: {
        _65 = &_42;                      // scope 6 at cita-executor/src/backlogs.rs:134:21: 134:33
        _64 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_65) -> [return: bb30, unwind: bb42]; // scope 6 at cita-executor/src/backlogs.rs:134:21: 134:33
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:134:21: 134:33
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb30: {
        _61 = [move _62, move _64];      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _60 = &_61;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _59 = _60 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _57 = Arguments::<'_>::new_v1(move _58, move _59) -> [return: bb31, unwind: bb42]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb31: {
        _70 = const _;                   // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Backlog::insert_open, [], Some(promoted[0])) }
        _56 = log::__private_api_log(move _57, _48, _70) -> [return: bb49, unwind: bb42]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb32: {
        _0 = const false;                // scope 5 at cita-executor/src/backlogs.rs:136:24: 136:29
        drop(_40) -> [return: bb39, unwind: bb45]; // scope 3 at cita-executor/src/backlogs.rs:138:9: 138:10
    }

    bb33: {
        drop(_40) -> [return: bb34, unwind: bb45]; // scope 3 at cita-executor/src/backlogs.rs:138:9: 138:10
    }

    bb34: {
        _66 = std::option::Option::<Priority>::Some(_3); // scope 0 at cita-executor/src/backlogs.rs:140:25: 140:39
        ((*_1).3: std::option::Option<backlogs::Priority>) = move _66; // scope 0 at cita-executor/src/backlogs.rs:140:9: 140:39
        _77 = const false;               // scope 0 at cita-executor/src/backlogs.rs:141:32: 141:42
        _68 = move _4;                   // scope 0 at cita-executor/src/backlogs.rs:141:32: 141:42
        _67 = std::option::Option::<OpenBlock>::Some(move _68); // scope 0 at cita-executor/src/backlogs.rs:141:27: 141:43
        drop(((*_1).0: std::option::Option<types::block::OpenBlock>)) -> [return: bb35, unwind: bb36]; // scope 0 at cita-executor/src/backlogs.rs:141:9: 141:24
    }

    bb35: {
        ((*_1).0: std::option::Option<types::block::OpenBlock>) = move _67; // scope 0 at cita-executor/src/backlogs.rs:141:9: 141:24
        _76 = const false;               // scope 0 at cita-executor/src/backlogs.rs:142:22: 142:27
        _69 = move _5;                   // scope 0 at cita-executor/src/backlogs.rs:142:22: 142:27
        drop(((*_1).1: std::option::Option<libproto::Proof>)) -> [return: bb37, unwind: bb38]; // scope 0 at cita-executor/src/backlogs.rs:142:9: 142:19
    }

    bb36 (cleanup): {
        ((*_1).0: std::option::Option<types::block::OpenBlock>) = move _67; // scope 0 at cita-executor/src/backlogs.rs:141:9: 141:24
        goto -> bb45;                    // scope 0 at cita-executor/src/backlogs.rs:141:9: 141:24
    }

    bb37: {
        ((*_1).1: std::option::Option<libproto::Proof>) = move _69; // scope 0 at cita-executor/src/backlogs.rs:142:9: 142:19
        _0 = const true;                 // scope 0 at cita-executor/src/backlogs.rs:143:9: 143:13
        goto -> bb41;                    // scope 0 at cita-executor/src/backlogs.rs:144:5: 144:6
    }

    bb38 (cleanup): {
        ((*_1).1: std::option::Option<libproto::Proof>) = move _69; // scope 0 at cita-executor/src/backlogs.rs:142:9: 142:19
        goto -> bb45;                    // scope 0 at cita-executor/src/backlogs.rs:142:26: 142:27
    }

    bb39: {
        drop(_5) -> [return: bb40, unwind: bb47]; // scope 0 at cita-executor/src/backlogs.rs:144:5: 144:6
    }

    bb40: {
        drop(_4) -> bb41;                // scope 0 at cita-executor/src/backlogs.rs:144:5: 144:6
    }

    bb41: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:144:6: 144:6
    }

    bb42 (cleanup): {
        drop(_40) -> bb45;               // scope 3 at cita-executor/src/backlogs.rs:138:9: 138:10
    }

    bb43 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/backlogs.rs:106:5: 144:6
    }

    bb44 (cleanup): {
        drop(_5) -> bb47;                // scope 0 at cita-executor/src/backlogs.rs:144:5: 144:6
    }

    bb45 (cleanup): {
        switchInt(_76) -> [0: bb47, otherwise: bb44]; // scope 0 at cita-executor/src/backlogs.rs:144:5: 144:6
    }

    bb46 (cleanup): {
        drop(_4) -> bb43;                // scope 0 at cita-executor/src/backlogs.rs:144:5: 144:6
    }

    bb47 (cleanup): {
        switchInt(_77) -> [0: bb43, otherwise: bb46]; // scope 0 at cita-executor/src/backlogs.rs:144:5: 144:6
    }

    bb48: {
        goto -> bb14;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb49: {
        goto -> bb32;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::insert_open: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:131:17: 135:18
    let mut _7: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:131:17: 135:18

    bb0: {
        _3 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/backlogs.rs"; // scope 0 at cita-executor/src/backlogs.rs:131:17: 135:18
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:131:17: 135:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/backlogs.rs:131:17: 135:18
        _1 = (move _2, move _4, move _6, const 131_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::insert_open: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at cita-executor/src/backlogs.rs:132:21: 132:76
    let mut _1: [&str; 3];               // in scope 0 at cita-executor/src/backlogs.rs:132:21: 132:76

    bb0: {
        _1 = [const "arrived ", const "-th OpenBlock with invalid proof.height(", const ")"]; // scope 0 at cita-executor/src/backlogs.rs:132:21: 132:76
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:132:21: 132:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:132:21: 132:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:132:21: 132:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:132:21: 132:76
        return;                          // scope 0 at cita-executor/src/backlogs.rs:132:21: 132:76
    }
}

promoted[2] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::insert_open: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::insert_open: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:116:17: 121:18
    let mut _7: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:116:17: 121:18

    bb0: {
        _3 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/backlogs.rs"; // scope 0 at cita-executor/src/backlogs.rs:116:17: 121:18
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:116:17: 121:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/backlogs.rs:116:17: 121:18
        _1 = (move _2, move _4, move _6, const 116_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::insert_open: &[&str; 4] = {
    let mut _0: &[&str; 4];              // return place in scope 0 at cita-executor/src/backlogs.rs:117:21: 117:91
    let mut _1: [&str; 4];               // in scope 0 at cita-executor/src/backlogs.rs:117:21: 117:91

    bb0: {
        _1 = [const "arrived ", const "-th OpenBlock with priority(", const ") < present.priority(", const ")"]; // scope 0 at cita-executor/src/backlogs.rs:117:21: 117:91
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:117:21: 117:91
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:117:21: 117:91
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:117:21: 117:91
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:117:21: 117:91
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:117:21: 117:91
        return;                          // scope 0 at cita-executor/src/backlogs.rs:117:21: 117:91
    }
}

promoted[5] in backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::insert_open: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::get_open_block(_1: &Backlog) -> std::option::Option<&OpenBlock> {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:146:27: 146:32
    let mut _0: std::option::Option<&types::block::OpenBlock>; // return place in scope 0 at cita-executor/src/backlogs.rs:146:37: 146:55
    let mut _2: &std::option::Option<types::block::OpenBlock>; // in scope 0 at cita-executor/src/backlogs.rs:147:9: 147:33

    bb0: {
        _2 = &((*_1).0: std::option::Option<types::block::OpenBlock>); // scope 0 at cita-executor/src/backlogs.rs:147:9: 147:33
        _0 = std::option::Option::<OpenBlock>::as_ref(move _2) -> bb1; // scope 0 at cita-executor/src/backlogs.rs:147:9: 147:33
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:147:25: 147:31
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<OpenBlock>) -> std::option::Option<&'a OpenBlock> {std::option::Option::<OpenBlock>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:148:6: 148:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:47:1: 47:13>::get_proof(_1: &Backlog) -> std::option::Option<&libproto::Proof> {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:150:22: 150:27
    let mut _0: std::option::Option<&libproto::Proof>; // return place in scope 0 at cita-executor/src/backlogs.rs:150:32: 150:46
    let mut _2: &std::option::Option<libproto::Proof>; // in scope 0 at cita-executor/src/backlogs.rs:151:9: 151:28

    bb0: {
        _2 = &((*_1).1: std::option::Option<libproto::Proof>); // scope 0 at cita-executor/src/backlogs.rs:151:9: 151:28
        _0 = std::option::Option::<libproto::Proof>::as_ref(move _2) -> bb1; // scope 0 at cita-executor/src/backlogs.rs:151:9: 151:28
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:151:20: 151:26
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<libproto::Proof>) -> std::option::Option<&'a libproto::Proof> {std::option::Option::<libproto::Proof>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:152:6: 152:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::new(_1: u64, _2: H256) -> Backlogs {
    debug current_height => _1;          // in scope 0 at cita-executor/src/backlogs.rs:170:16: 170:30
    debug current_hash => _2;            // in scope 0 at cita-executor/src/backlogs.rs:170:37: 170:49
    let mut _0: backlogs::Backlogs;      // return place in scope 0 at cita-executor/src/backlogs.rs:170:72: 170:80
    let mut _3: std::collections::BTreeMap<u64, backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:174:23: 174:38
    let mut _4: std::collections::BTreeMap<u64, libproto::ExecutedResult>; // in scope 0 at cita-executor/src/backlogs.rs:175:24: 175:39

    bb0: {
        _3 = BTreeMap::<u64, Backlog>::new() -> bb1; // scope 0 at cita-executor/src/backlogs.rs:174:23: 174:38
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:174:23: 174:36
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> BTreeMap<u64, Backlog> {BTreeMap::<u64, Backlog>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = BTreeMap::<u64, libproto::ExecutedResult>::new() -> [return: bb2, unwind: bb3]; // scope 0 at cita-executor/src/backlogs.rs:175:24: 175:39
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:175:24: 175:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> BTreeMap<u64, libproto::ExecutedResult> {BTreeMap::<u64, libproto::ExecutedResult>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Backlogs { current_height: _1, current_hash: _2, backlogs: move _3, completed: move _4 }; // scope 0 at cita-executor/src/backlogs.rs:171:9: 176:10
        return;                          // scope 0 at cita-executor/src/backlogs.rs:177:6: 177:6
    }

    bb3 (cleanup): {
        drop(_3) -> bb4;                 // scope 0 at cita-executor/src/backlogs.rs:176:9: 176:10
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/backlogs.rs:170:5: 177:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::get_current_height(_1: &Backlogs) -> u64 {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:179:31: 179:36
    let mut _0: u64;                     // return place in scope 0 at cita-executor/src/backlogs.rs:179:41: 179:44

    bb0: {
        _0 = ((*_1).0: u64);             // scope 0 at cita-executor/src/backlogs.rs:180:9: 180:28
        return;                          // scope 0 at cita-executor/src/backlogs.rs:181:6: 181:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::get_current_hash(_1: &Backlogs) -> &H256 {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:183:29: 183:34
    let mut _0: &cita_types::H256;       // return place in scope 0 at cita-executor/src/backlogs.rs:184:9: 184:27

    bb0: {
        _0 = &((*_1).1: cita_types::H256); // scope 0 at cita-executor/src/backlogs.rs:184:9: 184:27
        return;                          // scope 0 at cita-executor/src/backlogs.rs:185:6: 185:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::get_completed_result(_1: &Backlogs, _2: u64) -> std::option::Option<&libproto::ExecutedResult> {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:187:33: 187:38
    debug height => _2;                  // in scope 0 at cita-executor/src/backlogs.rs:187:40: 187:46
    let mut _0: std::option::Option<&libproto::ExecutedResult>; // return place in scope 0 at cita-executor/src/backlogs.rs:187:56: 187:79
    let mut _3: &std::collections::BTreeMap<u64, libproto::ExecutedResult>; // in scope 0 at cita-executor/src/backlogs.rs:188:9: 188:36
    let _4: &u64;                        // in scope 0 at cita-executor/src/backlogs.rs:188:28: 188:35

    bb0: {
        _3 = &((*_1).3: std::collections::BTreeMap<u64, libproto::ExecutedResult>); // scope 0 at cita-executor/src/backlogs.rs:188:9: 188:36
        _4 = &_2;                        // scope 0 at cita-executor/src/backlogs.rs:188:28: 188:35
        _0 = BTreeMap::<u64, libproto::ExecutedResult>::get::<u64>(move _3, _4) -> bb1; // scope 0 at cita-executor/src/backlogs.rs:188:9: 188:36
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:188:24: 188:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTreeMap<u64, libproto::ExecutedResult>, &'b u64) -> std::option::Option<&'a libproto::ExecutedResult> {BTreeMap::<u64, libproto::ExecutedResult>::get::<u64>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:189:6: 189:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_completed_result(_1: &mut Backlogs, _2: u64, _3: libproto::ExecutedResult) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:191:36: 191:45
    debug height => _2;                  // in scope 0 at cita-executor/src/backlogs.rs:191:47: 191:53
    debug executed_result => _3;         // in scope 0 at cita-executor/src/backlogs.rs:191:60: 191:75
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/backlogs.rs:191:93: 191:93
    let _4: std::option::Option<libproto::ExecutedResult>; // in scope 0 at cita-executor/src/backlogs.rs:192:9: 192:55
    let mut _5: &mut std::collections::BTreeMap<u64, libproto::ExecutedResult>; // in scope 0 at cita-executor/src/backlogs.rs:192:9: 192:55

    bb0: {
        _5 = &mut ((*_1).3: std::collections::BTreeMap<u64, libproto::ExecutedResult>); // scope 0 at cita-executor/src/backlogs.rs:192:9: 192:55
        _4 = BTreeMap::<u64, libproto::ExecutedResult>::insert(move _5, _2, move _3) -> bb1; // scope 0 at cita-executor/src/backlogs.rs:192:9: 192:55
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:192:24: 192:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeMap<u64, libproto::ExecutedResult>, u64, libproto::ExecutedResult) -> std::option::Option<libproto::ExecutedResult> {BTreeMap::<u64, libproto::ExecutedResult>::insert}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_4) -> bb2;                 // scope 0 at cita-executor/src/backlogs.rs:192:55: 192:56
    }

    bb2: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:193:6: 193:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_proposal(_1: &mut Backlogs, _2: OpenBlock) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:195:28: 195:37
    debug open_block => _2;              // in scope 0 at cita-executor/src/backlogs.rs:195:39: 195:49
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/backlogs.rs:195:65: 195:69
    let _3: u64;                         // in scope 0 at cita-executor/src/backlogs.rs:196:13: 196:19
    let mut _4: usize;                   // in scope 0 at cita-executor/src/backlogs.rs:196:34: 196:62
    let mut _5: u64;                     // in scope 0 at cita-executor/src/backlogs.rs:196:34: 196:53
    let mut _6: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:196:34: 196:53
    let _7: &types::header::OpenHeader;  // in scope 0 at cita-executor/src/backlogs.rs:196:34: 196:53
    let mut _8: &types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:196:34: 196:53
    let mut _9: u64;                     // in scope 0 at cita-executor/src/backlogs.rs:197:26: 197:32
    let mut _10: backlogs::Priority;     // in scope 0 at cita-executor/src/backlogs.rs:197:34: 197:52
    let mut _11: types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:197:54: 197:64
    let mut _12: std::option::Option<libproto::Proof>; // in scope 0 at cita-executor/src/backlogs.rs:197:66: 197:70
    let mut _13: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:198:5: 198:6
    scope 1 {
        debug height => _3;              // in scope 1 at cita-executor/src/backlogs.rs:196:13: 196:19
    }

    bb0: {
        _13 = const false;               // scope 0 at cita-executor/src/backlogs.rs:196:13: 196:19
        _13 = const true;                // scope 0 at cita-executor/src/backlogs.rs:196:13: 196:19
        _8 = &_2;                        // scope 0 at cita-executor/src/backlogs.rs:196:34: 196:53
        _7 = <OpenBlock as Deref>::deref(move _8) -> [return: bb1, unwind: bb7]; // scope 0 at cita-executor/src/backlogs.rs:196:34: 196:53
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:196:34: 196:53
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 0 at cita-executor/src/backlogs.rs:196:34: 196:53
        _5 = OpenHeader::number(move _6) -> [return: bb2, unwind: bb7]; // scope 0 at cita-executor/src/backlogs.rs:196:34: 196:53
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:196:45: 196:51
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = move _5 as usize (IntToInt); // scope 0 at cita-executor/src/backlogs.rs:196:34: 196:62
        _3 = wrap_height(move _4) -> [return: bb3, unwind: bb7]; // scope 0 at cita-executor/src/backlogs.rs:196:22: 196:63
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:196:22: 196:33
                                         // + literal: Const { ty: fn(usize) -> u64 {wrap_height}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _3;                         // scope 1 at cita-executor/src/backlogs.rs:197:26: 197:32
        _10 = const Priority::Proposal;  // scope 1 at cita-executor/src/backlogs.rs:197:34: 197:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Priority, val: Value(Scalar(0x01)) }
        _13 = const false;               // scope 1 at cita-executor/src/backlogs.rs:197:54: 197:64
        _11 = move _2;                   // scope 1 at cita-executor/src/backlogs.rs:197:54: 197:64
        _12 = std::option::Option::<libproto::Proof>::None; // scope 1 at cita-executor/src/backlogs.rs:197:66: 197:70
        _0 = Backlogs::insert_open(_1, move _9, move _10, move _11, move _12) -> [return: bb4, unwind: bb7]; // scope 1 at cita-executor/src/backlogs.rs:197:9: 197:71
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:197:14: 197:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Backlogs, u64, Priority, OpenBlock, std::option::Option<libproto::Proof>) -> bool {Backlogs::insert_open}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:198:6: 198:6
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/backlogs.rs:195:5: 198:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-executor/src/backlogs.rs:198:5: 198:6
    }

    bb7 (cleanup): {
        switchInt(_13) -> [0: bb5, otherwise: bb6]; // scope 0 at cita-executor/src/backlogs.rs:198:5: 198:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_synchronized(_1: &mut Backlogs, _2: OpenBlock) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:200:32: 200:41
    debug open_block => _2;              // in scope 0 at cita-executor/src/backlogs.rs:200:43: 200:53
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/backlogs.rs:200:69: 200:73
    let _3: u64;                         // in scope 0 at cita-executor/src/backlogs.rs:201:13: 201:19
    let mut _4: usize;                   // in scope 0 at cita-executor/src/backlogs.rs:201:34: 201:62
    let mut _5: u64;                     // in scope 0 at cita-executor/src/backlogs.rs:201:34: 201:53
    let mut _6: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:201:34: 201:53
    let _7: &types::header::OpenHeader;  // in scope 0 at cita-executor/src/backlogs.rs:201:34: 201:53
    let mut _8: &types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:201:34: 201:53
    let mut _10: &libproto::Proof;       // in scope 0 at cita-executor/src/backlogs.rs:202:21: 202:47
    let _11: &libproto::Proof;           // in scope 0 at cita-executor/src/backlogs.rs:202:21: 202:39
    let mut _12: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:202:21: 202:39
    let _13: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:202:21: 202:39
    let mut _14: &types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:202:21: 202:39
    let mut _15: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:203:26: 203:32
    let mut _16: backlogs::Priority;     // in scope 0 at cita-executor/src/backlogs.rs:203:34: 203:56
    let mut _17: types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:203:58: 203:68
    let mut _18: std::option::Option<libproto::Proof>; // in scope 0 at cita-executor/src/backlogs.rs:203:70: 203:81
    let mut _19: libproto::Proof;        // in scope 0 at cita-executor/src/backlogs.rs:203:75: 203:80
    let mut _20: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:219:5: 219:6
    scope 1 {
        debug height => _3;              // in scope 1 at cita-executor/src/backlogs.rs:201:13: 201:19
        let _9: libproto::Proof;         // in scope 1 at cita-executor/src/backlogs.rs:202:13: 202:18
        scope 2 {
            debug proof => _9;           // in scope 2 at cita-executor/src/backlogs.rs:202:13: 202:18
        }
    }

    bb0: {
        _20 = const false;               // scope 0 at cita-executor/src/backlogs.rs:201:13: 201:19
        _20 = const true;                // scope 0 at cita-executor/src/backlogs.rs:201:13: 201:19
        _8 = &_2;                        // scope 0 at cita-executor/src/backlogs.rs:201:34: 201:53
        _7 = <OpenBlock as Deref>::deref(move _8) -> [return: bb1, unwind: bb10]; // scope 0 at cita-executor/src/backlogs.rs:201:34: 201:53
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:201:34: 201:53
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 0 at cita-executor/src/backlogs.rs:201:34: 201:53
        _5 = OpenHeader::number(move _6) -> [return: bb2, unwind: bb10]; // scope 0 at cita-executor/src/backlogs.rs:201:34: 201:53
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:201:45: 201:51
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = move _5 as usize (IntToInt); // scope 0 at cita-executor/src/backlogs.rs:201:34: 201:62
        _3 = wrap_height(move _4) -> [return: bb3, unwind: bb10]; // scope 0 at cita-executor/src/backlogs.rs:201:22: 201:63
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:201:22: 201:33
                                         // + literal: Const { ty: fn(usize) -> u64 {wrap_height}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = &_2;                       // scope 1 at cita-executor/src/backlogs.rs:202:21: 202:39
        _13 = <OpenBlock as Deref>::deref(move _14) -> [return: bb4, unwind: bb10]; // scope 1 at cita-executor/src/backlogs.rs:202:21: 202:39
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:202:21: 202:39
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = _13;                       // scope 1 at cita-executor/src/backlogs.rs:202:21: 202:39
        _11 = OpenHeader::proof(move _12) -> [return: bb5, unwind: bb10]; // scope 1 at cita-executor/src/backlogs.rs:202:21: 202:39
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:202:32: 202:37
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a libproto::Proof {OpenHeader::proof}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = _11;                       // scope 1 at cita-executor/src/backlogs.rs:202:21: 202:47
        _9 = <libproto::Proof as Clone>::clone(move _10) -> [return: bb6, unwind: bb10]; // scope 1 at cita-executor/src/backlogs.rs:202:21: 202:47
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:202:40: 202:45
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = _3;                        // scope 2 at cita-executor/src/backlogs.rs:203:26: 203:32
        _16 = const Priority::Synchronized; // scope 2 at cita-executor/src/backlogs.rs:203:34: 203:56
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Priority, val: Value(Scalar(0x02)) }
        _20 = const false;               // scope 2 at cita-executor/src/backlogs.rs:203:58: 203:68
        _17 = move _2;                   // scope 2 at cita-executor/src/backlogs.rs:203:58: 203:68
        _19 = move _9;                   // scope 2 at cita-executor/src/backlogs.rs:203:75: 203:80
        _18 = std::option::Option::<libproto::Proof>::Some(move _19); // scope 2 at cita-executor/src/backlogs.rs:203:70: 203:81
        _0 = Backlogs::insert_open(_1, move _15, move _16, move _17, move _18) -> [return: bb7, unwind: bb10]; // scope 2 at cita-executor/src/backlogs.rs:203:9: 203:82
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:203:14: 203:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Backlogs, u64, Priority, OpenBlock, std::option::Option<libproto::Proof>) -> bool {Backlogs::insert_open}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:219:6: 219:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/backlogs.rs:200:5: 219:6
    }

    bb9 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at cita-executor/src/backlogs.rs:219:5: 219:6
    }

    bb10 (cleanup): {
        switchInt(_20) -> [0: bb8, otherwise: bb9]; // scope 0 at cita-executor/src/backlogs.rs:219:5: 219:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_block_with_proof(_1: &mut Backlogs, _2: OpenBlock, _3: &libproto::Proof) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:222:9: 222:18
    debug open_block => _2;              // in scope 0 at cita-executor/src/backlogs.rs:223:9: 223:19
    debug present_proof => _3;           // in scope 0 at cita-executor/src/backlogs.rs:224:9: 224:22
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/backlogs.rs:225:10: 225:14
    let _4: u64;                         // in scope 0 at cita-executor/src/backlogs.rs:226:13: 226:25
    let mut _5: usize;                   // in scope 0 at cita-executor/src/backlogs.rs:226:40: 226:68
    let mut _6: u64;                     // in scope 0 at cita-executor/src/backlogs.rs:226:40: 226:59
    let mut _7: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:226:40: 226:59
    let _8: &types::header::OpenHeader;  // in scope 0 at cita-executor/src/backlogs.rs:226:40: 226:59
    let mut _9: &types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:226:40: 226:59
    let mut _10: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:227:12: 227:59
    let mut _11: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:227:12: 227:24
    let mut _12: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:227:28: 227:59
    let mut _13: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:227:29: 227:54
    let mut _14: &backlogs::Backlogs;    // in scope 0 at cita-executor/src/backlogs.rs:227:29: 227:54
    let mut _15: (u64, bool);            // in scope 0 at cita-executor/src/backlogs.rs:227:28: 227:59
    let mut _17: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _18: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _19: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _20: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _21: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _22: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _23: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _24: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _25: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _26: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:228:19: 228:63
    let mut _27: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _28: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _29: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _30: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:228:65: 228:77
    let _31: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:228:65: 228:77
    let mut _33: &libproto::Proof;       // in scope 0 at cita-executor/src/backlogs.rs:230:30: 230:56
    let _34: &libproto::Proof;           // in scope 0 at cita-executor/src/backlogs.rs:230:30: 230:48
    let mut _35: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:230:30: 230:48
    let _36: &types::header::OpenHeader; // in scope 0 at cita-executor/src/backlogs.rs:230:30: 230:48
    let mut _37: &types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:230:30: 230:48
    let mut _39: libproto::Proof;        // in scope 0 at cita-executor/src/backlogs.rs:231:51: 231:73
    let mut _40: &libproto::Proof;       // in scope 0 at cita-executor/src/backlogs.rs:231:51: 231:73
    let mut _41: (&u64, &u64);           // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:15: 51:32
    let mut _42: &u64;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:16: 51:22
    let _43: u64;                        // in scope 0 at cita-executor/src/backlogs.rs:233:13: 233:29
    let mut _44: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:233:13: 233:25
    let mut _45: (u64, bool);            // in scope 0 at cita-executor/src/backlogs.rs:233:13: 233:29
    let mut _46: &u64;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:24: 51:31
    let _47: u64;                        // in scope 0 at cita-executor/src/backlogs.rs:234:13: 234:51
    let mut _48: usize;                  // in scope 0 at cita-executor/src/backlogs.rs:234:25: 234:50
    let mut _51: bool;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:20: 53:46
    let mut _52: bool;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:21: 53:46
    let mut _53: u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:22: 53:31
    let mut _54: u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:35: 53:45
    let _56: !;                          // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:21: 58:146
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:85: 58:145
    let mut _58: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
    let mut _59: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:235:13: 235:66
    let mut _60: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
    let _61: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
    let _62: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
    let mut _63: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:236:13: 236:29
    let _64: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:236:13: 236:29
    let _65: u64;                        // in scope 0 at cita-executor/src/backlogs.rs:236:13: 236:29
    let mut _66: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:236:13: 236:25
    let mut _67: (u64, bool);            // in scope 0 at cita-executor/src/backlogs.rs:236:13: 236:29
    let mut _68: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:237:13: 237:51
    let _69: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:237:13: 237:51
    let _70: u64;                        // in scope 0 at cita-executor/src/backlogs.rs:237:13: 237:51
    let mut _71: usize;                  // in scope 0 at cita-executor/src/backlogs.rs:237:25: 237:50
    let mut _73: libproto::Proof;        // in scope 0 at cita-executor/src/backlogs.rs:240:50: 240:71
    let mut _75: (&u64, &u64);           // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:15: 51:32
    let mut _76: &u64;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:16: 51:22
    let mut _77: &u64;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:24: 51:31
    let _78: u64;                        // in scope 0 at cita-executor/src/backlogs.rs:244:13: 244:44
    let mut _81: bool;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:20: 53:46
    let mut _82: bool;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:21: 53:46
    let mut _83: u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:22: 53:31
    let mut _84: u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:35: 53:45
    let _86: !;                          // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:21: 58:146
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:85: 58:145
    let mut _88: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
    let mut _89: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:245:13: 245:65
    let mut _90: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
    let _91: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
    let _92: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
    let mut _93: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:246:13: 246:25
    let _94: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:246:13: 246:25
    let mut _95: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:247:13: 247:44
    let _96: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:247:13: 247:44
    let _97: u64;                        // in scope 0 at cita-executor/src/backlogs.rs:247:13: 247:44
    let mut _98: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:250:12: 250:78
    let mut _99: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:250:13: 250:78
    let mut _100: &backlogs::Backlogs;   // in scope 0 at cita-executor/src/backlogs.rs:250:13: 250:78
    let mut _101: u64;                   // in scope 0 at cita-executor/src/backlogs.rs:250:30: 250:61
    let mut _102: usize;                 // in scope 0 at cita-executor/src/backlogs.rs:250:30: 250:54
    let _103: &&libproto::Proof;         // in scope 0 at cita-executor/src/backlogs.rs:250:63: 250:77
    let mut _105: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _106: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _107: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _108: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _109: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _110: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _111: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _112: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _113: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _114: &[&str];               // in scope 0 at cita-executor/src/backlogs.rs:252:17: 252:53
    let mut _115: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _116: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _117: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _118: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:253:17: 253:54
    let _119: &u64;                      // in scope 0 at cita-executor/src/backlogs.rs:253:17: 253:54
    let _120: u64;                       // in scope 0 at cita-executor/src/backlogs.rs:253:17: 253:54
    let mut _121: usize;                 // in scope 0 at cita-executor/src/backlogs.rs:253:29: 253:53
    let mut _122: u64;                   // in scope 0 at cita-executor/src/backlogs.rs:259:13: 259:25
    let mut _123: backlogs::Priority;    // in scope 0 at cita-executor/src/backlogs.rs:260:13: 260:37
    let mut _124: types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:261:13: 261:23
    let mut _125: std::option::Option<libproto::Proof>; // in scope 0 at cita-executor/src/backlogs.rs:262:13: 262:33
    let mut _126: libproto::Proof;       // in scope 0 at cita-executor/src/backlogs.rs:262:18: 262:32
    let mut _135: &libproto::Proof;      // in scope 0 at cita-executor/src/backlogs.rs:250:63: 250:77
    let mut _136: bool;                  // in scope 0 at cita-executor/src/backlogs.rs:264:5: 264:6
    let mut _137: bool;                  // in scope 0 at cita-executor/src/backlogs.rs:264:5: 264:6
    scope 1 {
        debug block_height => _4;        // in scope 1 at cita-executor/src/backlogs.rs:226:13: 226:25
        let _16: log::Level;             // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let _32: libproto::Proof;        // in scope 1 at cita-executor/src/backlogs.rs:230:13: 230:27
        scope 2 {
            debug lvl => _16;            // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _132: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _133: &[&str; 2];    // in scope 2 at cita-executor/src/backlogs.rs:228:19: 228:63
            let mut _134: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
        scope 3 {
            debug previous_proof => _32; // in scope 3 at cita-executor/src/backlogs.rs:230:13: 230:27
            let _38: proof::BftProof;    // in scope 3 at cita-executor/src/backlogs.rs:231:13: 231:31
            scope 4 {
                debug previous_bft_proof => _38; // in scope 4 at cita-executor/src/backlogs.rs:231:13: 231:31
                let _49: &u64;           // in scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:14: 52:22
                let _50: &u64;           // in scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:24: 52:33
                let _72: proof::BftProof; // in scope 4 at cita-executor/src/backlogs.rs:240:13: 240:30
                scope 5 {
                    debug left_val => _49; // in scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:14: 52:22
                    debug right_val => _50; // in scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:24: 52:33
                    let _55: core::panicking::AssertKind; // in scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:54:25: 54:29
                    scope 6 {
                        debug kind => _55; // in scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:54:25: 54:29
                        let mut _131: &[&str; 3]; // in scope 6 at cita-executor/src/backlogs.rs:235:13: 235:66
                    }
                }
                scope 7 {
                    debug present_bft_proof => _72; // in scope 7 at cita-executor/src/backlogs.rs:240:13: 240:30
                    let _74: usize;      // in scope 7 at cita-executor/src/backlogs.rs:241:13: 241:31
                    scope 8 {
                        debug present_bft_height => _74; // in scope 8 at cita-executor/src/backlogs.rs:241:13: 241:31
                        let _79: &u64;   // in scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:14: 52:22
                        let _80: &u64;   // in scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:24: 52:33
                        let _104: log::Level; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        scope 9 {
                            debug left_val => _79; // in scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:14: 52:22
                            debug right_val => _80; // in scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:24: 52:33
                            let _85: core::panicking::AssertKind; // in scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:54:25: 54:29
                            scope 10 {
                                debug kind => _85; // in scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:54:25: 54:29
                                let mut _130: &[&str; 3]; // in scope 10 at cita-executor/src/backlogs.rs:245:13: 245:65
                            }
                        }
                        scope 11 {
                            debug lvl => _104; // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                            let mut _127: &(&str, &str, &str, u32); // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                            let mut _128: &[&str; 2]; // in scope 11 at cita-executor/src/backlogs.rs:252:17: 252:53
                            let mut _129: &log::LevelFilter; // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _137 = const false;              // scope 0 at cita-executor/src/backlogs.rs:226:13: 226:25
        _136 = const false;              // scope 0 at cita-executor/src/backlogs.rs:226:13: 226:25
        _137 = const true;               // scope 0 at cita-executor/src/backlogs.rs:226:13: 226:25
        _9 = &_2;                        // scope 0 at cita-executor/src/backlogs.rs:226:40: 226:59
        _8 = <OpenBlock as Deref>::deref(move _9) -> [return: bb1, unwind: bb67]; // scope 0 at cita-executor/src/backlogs.rs:226:40: 226:59
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:226:40: 226:59
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _8;                         // scope 0 at cita-executor/src/backlogs.rs:226:40: 226:59
        _6 = OpenHeader::number(move _7) -> [return: bb2, unwind: bb67]; // scope 0 at cita-executor/src/backlogs.rs:226:40: 226:59
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:226:51: 226:57
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _6 as usize (IntToInt); // scope 0 at cita-executor/src/backlogs.rs:226:40: 226:68
        _4 = wrap_height(move _5) -> [return: bb3, unwind: bb67]; // scope 0 at cita-executor/src/backlogs.rs:226:28: 226:69
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:226:28: 226:39
                                         // + literal: Const { ty: fn(usize) -> u64 {wrap_height}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = _4;                        // scope 1 at cita-executor/src/backlogs.rs:227:12: 227:24
        _14 = &(*_1);                    // scope 1 at cita-executor/src/backlogs.rs:227:29: 227:54
        _13 = Backlogs::get_current_height(move _14) -> [return: bb4, unwind: bb67]; // scope 1 at cita-executor/src/backlogs.rs:227:29: 227:54
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:227:34: 227:52
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs) -> u64 {Backlogs::get_current_height}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = CheckedAdd(_13, const 1_u64); // scope 1 at cita-executor/src/backlogs.rs:227:28: 227:59
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const 1_u64) -> [success: bb5, unwind: bb67]; // scope 1 at cita-executor/src/backlogs.rs:227:28: 227:59
    }

    bb5: {
        _12 = move (_15.0: u64);         // scope 1 at cita-executor/src/backlogs.rs:227:28: 227:59
        _10 = Ne(move _11, move _12);    // scope 1 at cita-executor/src/backlogs.rs:227:12: 227:59
        switchInt(move _10) -> [0: bb16, otherwise: bb6]; // scope 1 at cita-executor/src/backlogs.rs:227:12: 227:59
    }

    bb6: {
        _16 = log::Level::Warn;          // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _19 = &_16;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _134 = const _;                  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Backlogs::insert_block_with_proof, [], Some(promoted[7])) }
        _18 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _19, _134) -> [return: bb10, unwind: bb67]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = const false;               // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb9;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        _21 = &_16;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _23 = log::max_level() -> [return: bb11, unwind: bb67]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _17) -> [0: bb16, otherwise: bb13]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        switchInt(move _18) -> [0: bb7, otherwise: bb8]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _22 = &_23;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _20 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _21, move _22) -> [return: bb12, unwind: bb67]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb12: {
        _17 = move _20;                  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb9;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        _133 = const _;                  // scope 2 at cita-executor/src/backlogs.rs:228:19: 228:63
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:228:19: 228:63
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Backlogs::insert_block_with_proof, [], Some(promoted[6])) }
        _26 = _133 as &[&str] (Pointer(Unsize)); // scope 2 at cita-executor/src/backlogs.rs:228:19: 228:63
        _31 = &_4;                       // scope 2 at cita-executor/src/backlogs.rs:228:65: 228:77
        _30 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_31) -> [return: bb14, unwind: bb67]; // scope 2 at cita-executor/src/backlogs.rs:228:65: 228:77
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:228:65: 228:77
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb14: {
        _29 = [move _30];                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _28 = &_29;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _27 = _28 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> [return: bb15, unwind: bb67]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb15: {
        _132 = const _;                  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Backlogs::insert_block_with_proof, [], Some(promoted[5])) }
        _24 = log::__private_api_log(move _25, _16, _132) -> [return: bb68, unwind: bb67]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb16: {
        _37 = &_2;                       // scope 1 at cita-executor/src/backlogs.rs:230:30: 230:48
        _36 = <OpenBlock as Deref>::deref(move _37) -> [return: bb17, unwind: bb67]; // scope 1 at cita-executor/src/backlogs.rs:230:30: 230:48
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:230:30: 230:48
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb17: {
        _35 = _36;                       // scope 1 at cita-executor/src/backlogs.rs:230:30: 230:48
        _34 = OpenHeader::proof(move _35) -> [return: bb18, unwind: bb67]; // scope 1 at cita-executor/src/backlogs.rs:230:30: 230:48
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:230:41: 230:46
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a libproto::Proof {OpenHeader::proof}, val: Value(<ZST>) }
    }

    bb18: {
        _33 = _34;                       // scope 1 at cita-executor/src/backlogs.rs:230:30: 230:56
        _32 = <libproto::Proof as Clone>::clone(move _33) -> [return: bb19, unwind: bb67]; // scope 1 at cita-executor/src/backlogs.rs:230:30: 230:56
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:230:49: 230:54
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb19: {
        _136 = const true;               // scope 1 at cita-executor/src/backlogs.rs:230:55: 230:56
        _40 = &_32;                      // scope 3 at cita-executor/src/backlogs.rs:231:51: 231:73
        _39 = <libproto::Proof as Clone>::clone(move _40) -> [return: bb20, unwind: bb65]; // scope 3 at cita-executor/src/backlogs.rs:231:51: 231:73
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:231:66: 231:71
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb20: {
        _38 = <libproto::Proof as Into<proof::BftProof>>::into(move _39) -> [return: bb21, unwind: bb65]; // scope 3 at cita-executor/src/backlogs.rs:231:51: 231:80
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:231:74: 231:78
                                         // + literal: Const { ty: fn(libproto::Proof) -> proof::BftProof {<libproto::Proof as Into<proof::BftProof>>::into}, val: Value(<ZST>) }
    }

    bb21: {
        _44 = _4;                        // scope 4 at cita-executor/src/backlogs.rs:233:13: 233:25
        _45 = CheckedSub(_44, const 1_u64); // scope 4 at cita-executor/src/backlogs.rs:233:13: 233:29
        assert(!move (_45.1: bool), "attempt to compute `{} - {}`, which would overflow", move _44, const 1_u64) -> [success: bb22, unwind: bb62]; // scope 4 at cita-executor/src/backlogs.rs:233:13: 233:29
    }

    bb22: {
        _43 = move (_45.0: u64);         // scope 4 at cita-executor/src/backlogs.rs:233:13: 233:29
        _42 = &_43;                      // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:16: 51:22
        _48 = (_38.1: usize);            // scope 4 at cita-executor/src/backlogs.rs:234:25: 234:50
        _47 = wrap_height(move _48) -> [return: bb23, unwind: bb62]; // scope 4 at cita-executor/src/backlogs.rs:234:13: 234:51
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:234:13: 234:24
                                         // + literal: Const { ty: fn(usize) -> u64 {wrap_height}, val: Value(<ZST>) }
    }

    bb23: {
        _46 = &_47;                      // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:24: 51:31
        _41 = (move _42, move _46);      // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:15: 51:32
        _49 = (_41.0: &u64);             // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:14: 52:22
        _50 = (_41.1: &u64);             // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:24: 52:33
        _53 = (*_49);                    // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:22: 53:31
        _54 = (*_50);                    // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:35: 53:45
        _52 = Eq(move _53, move _54);    // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:21: 53:46
        _51 = Not(move _52);             // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:20: 53:46
        switchInt(move _51) -> [0: bb30, otherwise: bb24]; // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:20: 53:46
    }

    bb24: {
        _55 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:54:32: 54:65
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _131 = const _;                  // scope 6 at cita-executor/src/backlogs.rs:235:13: 235:66
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:235:13: 235:66
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Backlogs::insert_block_with_proof, [], Some(promoted[4])) }
        _59 = _131 as &[&str] (Pointer(Unsize)); // scope 6 at cita-executor/src/backlogs.rs:235:13: 235:66
        _66 = _4;                        // scope 6 at cita-executor/src/backlogs.rs:236:13: 236:25
        _67 = CheckedSub(_66, const 1_u64); // scope 6 at cita-executor/src/backlogs.rs:236:13: 236:29
        assert(!move (_67.1: bool), "attempt to compute `{} - {}`, which would overflow", move _66, const 1_u64) -> [success: bb25, unwind: bb62]; // scope 6 at cita-executor/src/backlogs.rs:236:13: 236:29
    }

    bb25: {
        _65 = move (_67.0: u64);         // scope 6 at cita-executor/src/backlogs.rs:236:13: 236:29
        _64 = &_65;                      // scope 6 at cita-executor/src/backlogs.rs:236:13: 236:29
        _63 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_64) -> [return: bb26, unwind: bb62]; // scope 6 at cita-executor/src/backlogs.rs:236:13: 236:29
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:236:13: 236:29
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb26: {
        _71 = (_38.1: usize);            // scope 6 at cita-executor/src/backlogs.rs:237:25: 237:50
        _70 = wrap_height(move _71) -> [return: bb27, unwind: bb62]; // scope 6 at cita-executor/src/backlogs.rs:237:13: 237:51
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:237:13: 237:24
                                         // + literal: Const { ty: fn(usize) -> u64 {wrap_height}, val: Value(<ZST>) }
    }

    bb27: {
        _69 = &_70;                      // scope 6 at cita-executor/src/backlogs.rs:237:13: 237:51
        _68 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_69) -> [return: bb28, unwind: bb62]; // scope 6 at cita-executor/src/backlogs.rs:237:13: 237:51
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:237:13: 237:51
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb28: {
        _62 = [move _63, move _68];      // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
        _61 = &_62;                      // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
        _60 = _61 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
        _58 = Arguments::<'_>::new_v1(move _59, move _60) -> [return: bb29, unwind: bb62]; // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb29: {
        _57 = std::option::Option::<Arguments<'_>>::Some(move _58); // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:85: 58:145
        _56 = core::panicking::assert_failed::<u64, u64>(move _55, _49, _50, move _57) -> bb62; // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:21: 58:146
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:21: 58:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, std::option::Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb30: {
        _73 = <libproto::Proof as Clone>::clone(_3) -> [return: bb31, unwind: bb62]; // scope 4 at cita-executor/src/backlogs.rs:240:50: 240:71
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:240:64: 240:69
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb31: {
        _72 = <libproto::Proof as Into<proof::BftProof>>::into(move _73) -> [return: bb32, unwind: bb62]; // scope 4 at cita-executor/src/backlogs.rs:240:50: 240:78
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:240:72: 240:76
                                         // + literal: Const { ty: fn(libproto::Proof) -> proof::BftProof {<libproto::Proof as Into<proof::BftProof>>::into}, val: Value(<ZST>) }
    }

    bb32: {
        _74 = (_72.1: usize);            // scope 7 at cita-executor/src/backlogs.rs:241:34: 241:58
        _76 = &_4;                       // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:16: 51:22
        _78 = wrap_height(_74) -> [return: bb33, unwind: bb61]; // scope 8 at cita-executor/src/backlogs.rs:244:13: 244:44
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:244:13: 244:24
                                         // + literal: Const { ty: fn(usize) -> u64 {wrap_height}, val: Value(<ZST>) }
    }

    bb33: {
        _77 = &_78;                      // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:24: 51:31
        _75 = (move _76, move _77);      // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:51:15: 51:32
        _79 = (_75.0: &u64);             // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:14: 52:22
        _80 = (_75.1: &u64);             // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:52:24: 52:33
        _83 = (*_79);                    // scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:22: 53:31
        _84 = (*_80);                    // scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:35: 53:45
        _82 = Eq(move _83, move _84);    // scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:21: 53:46
        _81 = Not(move _82);             // scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:20: 53:46
        switchInt(move _81) -> [0: bb39, otherwise: bb34]; // scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:53:20: 53:46
    }

    bb34: {
        _85 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:54:32: 54:65
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _130 = const _;                  // scope 10 at cita-executor/src/backlogs.rs:245:13: 245:65
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:245:13: 245:65
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Backlogs::insert_block_with_proof, [], Some(promoted[3])) }
        _89 = _130 as &[&str] (Pointer(Unsize)); // scope 10 at cita-executor/src/backlogs.rs:245:13: 245:65
        _94 = &_4;                       // scope 10 at cita-executor/src/backlogs.rs:246:13: 246:25
        _93 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_94) -> [return: bb35, unwind: bb61]; // scope 10 at cita-executor/src/backlogs.rs:246:13: 246:25
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:246:13: 246:25
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb35: {
        _97 = wrap_height(_74) -> [return: bb36, unwind: bb61]; // scope 10 at cita-executor/src/backlogs.rs:247:13: 247:44
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:247:13: 247:24
                                         // + literal: Const { ty: fn(usize) -> u64 {wrap_height}, val: Value(<ZST>) }
    }

    bb36: {
        _96 = &_97;                      // scope 10 at cita-executor/src/backlogs.rs:247:13: 247:44
        _95 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_96) -> [return: bb37, unwind: bb61]; // scope 10 at cita-executor/src/backlogs.rs:247:13: 247:44
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:247:13: 247:44
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb37: {
        _92 = [move _93, move _95];      // scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
        _91 = &_92;                      // scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
        _90 = _91 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
        _88 = Arguments::<'_>::new_v1(move _89, move _90) -> [return: bb38, unwind: bb61]; // scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:114: 58:144
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb38: {
        _87 = std::option::Option::<Arguments<'_>>::Some(move _88); // scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:85: 58:145
        _86 = core::panicking::assert_failed::<u64, u64>(move _85, _79, _80, move _87) -> bb61; // scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:21: 58:146
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:58:21: 58:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, std::option::Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb39: {
        _100 = &(*_1);                   // scope 8 at cita-executor/src/backlogs.rs:250:13: 250:78
        _102 = (_72.1: usize);           // scope 8 at cita-executor/src/backlogs.rs:250:30: 250:54
        _101 = move _102 as u64 (IntToInt); // scope 8 at cita-executor/src/backlogs.rs:250:30: 250:61
        _103 = &_3;                      // scope 8 at cita-executor/src/backlogs.rs:250:63: 250:77
        _135 = deref_copy (*_103);       // scope 8 at cita-executor/src/backlogs.rs:250:63: 250:77
        _99 = Backlogs::is_proof_ok(move _100, move _101, _135) -> [return: bb40, unwind: bb61]; // scope 8 at cita-executor/src/backlogs.rs:250:13: 250:78
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:250:18: 250:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Backlogs, u64, &'b libproto::Proof) -> bool {Backlogs::is_proof_ok}, val: Value(<ZST>) }
    }

    bb40: {
        _98 = Not(move _99);             // scope 8 at cita-executor/src/backlogs.rs:250:12: 250:78
        switchInt(move _98) -> [0: bb53, otherwise: bb41]; // scope 8 at cita-executor/src/backlogs.rs:250:12: 250:78
    }

    bb41: {
        _104 = log::Level::Warn;         // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _107 = &_104;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _129 = const _;                  // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Backlogs::insert_block_with_proof, [], Some(promoted[2])) }
        _106 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _107, _129) -> [return: bb45, unwind: bb61]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb42: {
        _105 = const false;              // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb44;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb43: {
        _109 = &_104;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _111 = log::max_level() -> [return: bb46, unwind: bb61]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb44: {
        switchInt(move _105) -> [0: bb52, otherwise: bb48]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb45: {
        switchInt(move _106) -> [0: bb42, otherwise: bb43]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb46: {
        _110 = &_111;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _108 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _109, move _110) -> [return: bb47, unwind: bb61]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb47: {
        _105 = move _108;                // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb44;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb48: {
        _128 = const _;                  // scope 11 at cita-executor/src/backlogs.rs:252:17: 252:53
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:252:17: 252:53
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Backlogs::insert_block_with_proof, [], Some(promoted[1])) }
        _114 = _128 as &[&str] (Pointer(Unsize)); // scope 11 at cita-executor/src/backlogs.rs:252:17: 252:53
        _121 = (_72.1: usize);           // scope 11 at cita-executor/src/backlogs.rs:253:29: 253:53
        _120 = wrap_height(move _121) -> [return: bb49, unwind: bb61]; // scope 11 at cita-executor/src/backlogs.rs:253:17: 253:54
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:253:17: 253:28
                                         // + literal: Const { ty: fn(usize) -> u64 {wrap_height}, val: Value(<ZST>) }
    }

    bb49: {
        _119 = &_120;                    // scope 11 at cita-executor/src/backlogs.rs:253:17: 253:54
        _118 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_119) -> [return: bb50, unwind: bb61]; // scope 11 at cita-executor/src/backlogs.rs:253:17: 253:54
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:253:17: 253:54
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb50: {
        _117 = [move _118];              // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _116 = &_117;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _115 = _116 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _113 = Arguments::<'_>::new_v1(move _114, move _115) -> [return: bb51, unwind: bb61]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb51: {
        _127 = const _;                  // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Backlogs::insert_block_with_proof, [], Some(promoted[0])) }
        _112 = log::__private_api_log(move _113, _104, _127) -> [return: bb69, unwind: bb61]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb52: {
        _0 = const false;                // scope 8 at cita-executor/src/backlogs.rs:255:20: 255:25
        drop(_72) -> [return: bb57, unwind: bb62]; // scope 4 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb53: {
        _122 = _4;                       // scope 8 at cita-executor/src/backlogs.rs:259:13: 259:25
        _123 = const Priority::BlockWithProof; // scope 8 at cita-executor/src/backlogs.rs:260:13: 260:37
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Priority, val: Value(Scalar(0x03)) }
        _137 = const false;              // scope 8 at cita-executor/src/backlogs.rs:261:13: 261:23
        _124 = move _2;                  // scope 8 at cita-executor/src/backlogs.rs:261:13: 261:23
        _136 = const false;              // scope 8 at cita-executor/src/backlogs.rs:262:18: 262:32
        _126 = move _32;                 // scope 8 at cita-executor/src/backlogs.rs:262:18: 262:32
        _125 = std::option::Option::<libproto::Proof>::Some(move _126); // scope 8 at cita-executor/src/backlogs.rs:262:13: 262:33
        _0 = Backlogs::insert_open(_1, move _122, move _123, move _124, move _125) -> [return: bb54, unwind: bb61]; // scope 8 at cita-executor/src/backlogs.rs:258:9: 263:10
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:258:14: 258:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Backlogs, u64, Priority, OpenBlock, std::option::Option<libproto::Proof>) -> bool {Backlogs::insert_open}, val: Value(<ZST>) }
    }

    bb54: {
        drop(_72) -> [return: bb55, unwind: bb62]; // scope 4 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb55: {
        drop(_38) -> [return: bb56, unwind: bb65]; // scope 3 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb56: {
        _136 = const false;              // scope 1 at cita-executor/src/backlogs.rs:264:5: 264:6
        goto -> bb60;                    // scope 0 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb57: {
        drop(_38) -> [return: bb58, unwind: bb65]; // scope 3 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb58: {
        drop(_32) -> [return: bb59, unwind: bb67]; // scope 1 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb59: {
        _136 = const false;              // scope 1 at cita-executor/src/backlogs.rs:264:5: 264:6
        drop(_2) -> bb60;                // scope 0 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb60: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:264:6: 264:6
    }

    bb61 (cleanup): {
        drop(_72) -> bb62;               // scope 4 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb62 (cleanup): {
        drop(_38) -> bb65;               // scope 3 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb63 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/backlogs.rs:221:5: 264:6
    }

    bb64 (cleanup): {
        drop(_32) -> bb67;               // scope 1 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb65 (cleanup): {
        switchInt(_136) -> [0: bb67, otherwise: bb64]; // scope 1 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb66 (cleanup): {
        drop(_2) -> bb63;                // scope 0 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb67 (cleanup): {
        switchInt(_137) -> [0: bb63, otherwise: bb66]; // scope 0 at cita-executor/src/backlogs.rs:264:5: 264:6
    }

    bb68: {
        goto -> bb16;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb69: {
        goto -> bb52;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_block_with_proof: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:251:13: 254:14
    let mut _7: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:251:13: 254:14

    bb0: {
        _3 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/backlogs.rs"; // scope 0 at cita-executor/src/backlogs.rs:251:13: 254:14
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:251:13: 254:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/backlogs.rs:251:13: 254:14
        _1 = (move _2, move _4, move _6, const 251_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_block_with_proof: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/backlogs.rs:252:17: 252:53
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/backlogs.rs:252:17: 252:53

    bb0: {
        _1 = [const "", const "-th present bft proof is invalid"]; // scope 0 at cita-executor/src/backlogs.rs:252:17: 252:53
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:252:17: 252:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:252:17: 252:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:252:17: 252:53
        return;                          // scope 0 at cita-executor/src/backlogs.rs:252:17: 252:53
    }
}

promoted[2] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_block_with_proof: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_block_with_proof: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at cita-executor/src/backlogs.rs:245:13: 245:65
    let mut _1: [&str; 3];               // in scope 0 at cita-executor/src/backlogs.rs:245:13: 245:65

    bb0: {
        _1 = [const "", const "-th block's height != ", const "-th present_proof.height"]; // scope 0 at cita-executor/src/backlogs.rs:245:13: 245:65
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:245:13: 245:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:245:13: 245:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:245:13: 245:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:245:13: 245:65
        return;                          // scope 0 at cita-executor/src/backlogs.rs:245:13: 245:65
    }
}

promoted[4] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_block_with_proof: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at cita-executor/src/backlogs.rs:235:13: 235:66
    let mut _1: [&str; 3];               // in scope 0 at cita-executor/src/backlogs.rs:235:13: 235:66

    bb0: {
        _1 = [const "", const "-th block's height != ", const "-th previous_proof.height"]; // scope 0 at cita-executor/src/backlogs.rs:235:13: 235:66
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:235:13: 235:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:235:13: 235:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:235:13: 235:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:235:13: 235:66
        return;                          // scope 0 at cita-executor/src/backlogs.rs:235:13: 235:66
    }
}

promoted[5] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_block_with_proof: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:228:13: 228:78
    let mut _7: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:228:13: 228:78

    bb0: {
        _3 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/backlogs.rs"; // scope 0 at cita-executor/src/backlogs.rs:228:13: 228:78
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:228:13: 228:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/backlogs.rs:228:13: 228:78
        _1 = (move _2, move _4, move _6, const 228_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[6] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_block_with_proof: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/backlogs.rs:228:19: 228:63
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/backlogs.rs:228:19: 228:63

    bb0: {
        _1 = [const "executor had received ", const "=th blockWithProof"]; // scope 0 at cita-executor/src/backlogs.rs:228:19: 228:63
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:228:19: 228:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:228:19: 228:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:228:19: 228:63
        return;                          // scope 0 at cita-executor/src/backlogs.rs:228:19: 228:63
    }
}

promoted[7] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_block_with_proof: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_open(_1: &mut Backlogs, _2: u64, _3: Priority, _4: OpenBlock, _5: std::option::Option<libproto::Proof>) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:267:9: 267:18
    debug height => _2;                  // in scope 0 at cita-executor/src/backlogs.rs:268:9: 268:15
    debug priority => _3;                // in scope 0 at cita-executor/src/backlogs.rs:269:9: 269:17
    debug open_block => _4;              // in scope 0 at cita-executor/src/backlogs.rs:270:9: 270:19
    debug proof => _5;                   // in scope 0 at cita-executor/src/backlogs.rs:271:9: 271:14
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/backlogs.rs:272:10: 272:14
    let mut _6: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:274:12: 274:47
    let mut _7: u64;                     // in scope 0 at cita-executor/src/backlogs.rs:274:22: 274:47
    let mut _8: &backlogs::Backlogs;     // in scope 0 at cita-executor/src/backlogs.rs:274:22: 274:47
    let mut _9: &mut backlogs::Backlog;  // in scope 0 at cita-executor/src/backlogs.rs:277:9: 280:62
    let mut _10: &mut backlogs::Backlog; // in scope 0 at cita-executor/src/backlogs.rs:277:9: 279:26
    let mut _11: std::collections::btree_map::Entry<'_, u64, backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:277:9: 278:27
    let mut _12: &mut std::collections::BTreeMap<u64, backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:277:9: 278:27
    let mut _13: types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:280:44: 280:54
    let mut _14: std::option::Option<libproto::Proof>; // in scope 0 at cita-executor/src/backlogs.rs:280:56: 280:61
    let mut _15: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:281:5: 281:6
    let mut _16: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:281:5: 281:6

    bb0: {
        _16 = const false;               // scope 0 at cita-executor/src/backlogs.rs:274:9: 276:10
        _15 = const false;               // scope 0 at cita-executor/src/backlogs.rs:274:9: 276:10
        _16 = const true;                // scope 0 at cita-executor/src/backlogs.rs:274:9: 276:10
        _15 = const true;                // scope 0 at cita-executor/src/backlogs.rs:274:9: 276:10
        _8 = &(*_1);                     // scope 0 at cita-executor/src/backlogs.rs:274:22: 274:47
        _7 = Backlogs::get_current_height(move _8) -> [return: bb1, unwind: bb10]; // scope 0 at cita-executor/src/backlogs.rs:274:22: 274:47
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:274:27: 274:45
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs) -> u64 {Backlogs::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = Le(_2, move _7);            // scope 0 at cita-executor/src/backlogs.rs:274:12: 274:47
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 0 at cita-executor/src/backlogs.rs:274:12: 274:47
    }

    bb2: {
        _0 = const false;                // scope 0 at cita-executor/src/backlogs.rs:275:20: 275:25
        drop(_5) -> [return: bb6, unwind: bb12]; // scope 0 at cita-executor/src/backlogs.rs:281:5: 281:6
    }

    bb3: {
        _12 = &mut ((*_1).2: std::collections::BTreeMap<u64, backlogs::Backlog>); // scope 0 at cita-executor/src/backlogs.rs:277:9: 278:27
        _11 = BTreeMap::<u64, Backlog>::entry(move _12, _2) -> [return: bb4, unwind: bb10]; // scope 0 at cita-executor/src/backlogs.rs:277:9: 278:27
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:278:14: 278:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeMap<u64, Backlog>, u64) -> std::collections::btree_map::Entry<'a, u64, Backlog> {BTreeMap::<u64, Backlog>::entry}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = std::collections::btree_map::Entry::<'_, u64, Backlog>::or_default(move _11) -> [return: bb5, unwind: bb10]; // scope 0 at cita-executor/src/backlogs.rs:277:9: 279:26
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:279:14: 279:24
                                         // + literal: Const { ty: fn(std::collections::btree_map::Entry<'_, u64, Backlog>) -> &mut Backlog {std::collections::btree_map::Entry::<'_, u64, Backlog>::or_default}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = _10;                        // scope 0 at cita-executor/src/backlogs.rs:277:9: 280:62
        _16 = const false;               // scope 0 at cita-executor/src/backlogs.rs:280:44: 280:54
        _13 = move _4;                   // scope 0 at cita-executor/src/backlogs.rs:280:44: 280:54
        _15 = const false;               // scope 0 at cita-executor/src/backlogs.rs:280:56: 280:61
        _14 = move _5;                   // scope 0 at cita-executor/src/backlogs.rs:280:56: 280:61
        _0 = Backlog::insert_open(move _9, _2, _3, move _13, move _14) -> [return: bb13, unwind: bb10]; // scope 0 at cita-executor/src/backlogs.rs:277:9: 280:62
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:280:14: 280:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Backlog, u64, Priority, OpenBlock, std::option::Option<libproto::Proof>) -> bool {Backlog::insert_open}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_4) -> bb7;                 // scope 0 at cita-executor/src/backlogs.rs:281:5: 281:6
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:281:6: 281:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/backlogs.rs:266:5: 281:6
    }

    bb9 (cleanup): {
        drop(_5) -> bb12;                // scope 0 at cita-executor/src/backlogs.rs:281:5: 281:6
    }

    bb10 (cleanup): {
        switchInt(_15) -> [0: bb12, otherwise: bb9]; // scope 0 at cita-executor/src/backlogs.rs:281:5: 281:6
    }

    bb11 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at cita-executor/src/backlogs.rs:281:5: 281:6
    }

    bb12 (cleanup): {
        switchInt(_16) -> [0: bb8, otherwise: bb11]; // scope 0 at cita-executor/src/backlogs.rs:281:5: 281:6
    }

    bb13: {
        goto -> bb7;                     // scope 0 at cita-executor/src/backlogs.rs:277:9: 280:62
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::insert_closed(_1: &mut Backlogs, _2: u64, _3: ClosedBlock) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:283:26: 283:35
    debug height => _2;                  // in scope 0 at cita-executor/src/backlogs.rs:283:37: 283:43
    debug closed_block => _3;            // in scope 0 at cita-executor/src/backlogs.rs:283:50: 283:62
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/backlogs.rs:283:80: 283:84
    let mut _4: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:284:12: 284:47
    let mut _5: u64;                     // in scope 0 at cita-executor/src/backlogs.rs:284:12: 284:37
    let mut _6: &backlogs::Backlogs;     // in scope 0 at cita-executor/src/backlogs.rs:284:12: 284:37
    let _7: &mut backlogs::Backlog;      // in scope 0 at cita-executor/src/backlogs.rs:287:13: 287:20
    let mut _8: std::collections::btree_map::Entry<'_, u64, backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:287:23: 287:50
    let mut _9: &mut std::collections::BTreeMap<u64, backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:287:23: 287:50
    let mut _10: std::option::Option<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/backlogs.rs:288:32: 288:50
    let mut _11: core::libexecutor::block::ClosedBlock; // in scope 0 at cita-executor/src/backlogs.rs:288:37: 288:49
    let mut _12: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:290:5: 290:6
    scope 1 {
        debug backlog => _7;             // in scope 1 at cita-executor/src/backlogs.rs:287:13: 287:20
    }

    bb0: {
        _12 = const false;               // scope 0 at cita-executor/src/backlogs.rs:284:9: 286:10
        _12 = const true;                // scope 0 at cita-executor/src/backlogs.rs:284:9: 286:10
        _6 = &(*_1);                     // scope 0 at cita-executor/src/backlogs.rs:284:12: 284:37
        _5 = Backlogs::get_current_height(move _6) -> [return: bb1, unwind: bb11]; // scope 0 at cita-executor/src/backlogs.rs:284:12: 284:37
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:284:17: 284:35
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs) -> u64 {Backlogs::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Ge(move _5, _2);            // scope 0 at cita-executor/src/backlogs.rs:284:12: 284:47
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 0 at cita-executor/src/backlogs.rs:284:12: 284:47
    }

    bb2: {
        _0 = const false;                // scope 0 at cita-executor/src/backlogs.rs:285:20: 285:25
        drop(_3) -> bb8;                 // scope 0 at cita-executor/src/backlogs.rs:290:5: 290:6
    }

    bb3: {
        _9 = &mut ((*_1).2: std::collections::BTreeMap<u64, backlogs::Backlog>); // scope 0 at cita-executor/src/backlogs.rs:287:23: 287:50
        _8 = BTreeMap::<u64, Backlog>::entry(move _9, _2) -> [return: bb4, unwind: bb11]; // scope 0 at cita-executor/src/backlogs.rs:287:23: 287:50
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:287:37: 287:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeMap<u64, Backlog>, u64) -> std::collections::btree_map::Entry<'a, u64, Backlog> {BTreeMap::<u64, Backlog>::entry}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = std::collections::btree_map::Entry::<'_, u64, Backlog>::or_default(move _8) -> [return: bb5, unwind: bb11]; // scope 0 at cita-executor/src/backlogs.rs:287:23: 287:63
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:287:51: 287:61
                                         // + literal: Const { ty: fn(std::collections::btree_map::Entry<'_, u64, Backlog>) -> &mut Backlog {std::collections::btree_map::Entry::<'_, u64, Backlog>::or_default}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = const false;               // scope 1 at cita-executor/src/backlogs.rs:288:37: 288:49
        _11 = move _3;                   // scope 1 at cita-executor/src/backlogs.rs:288:37: 288:49
        _10 = std::option::Option::<ClosedBlock>::Some(move _11); // scope 1 at cita-executor/src/backlogs.rs:288:32: 288:50
        drop(((*_7).2: std::option::Option<core::libexecutor::block::ClosedBlock>)) -> [return: bb6, unwind: bb7]; // scope 1 at cita-executor/src/backlogs.rs:288:9: 288:29
    }

    bb6: {
        ((*_7).2: std::option::Option<core::libexecutor::block::ClosedBlock>) = move _10; // scope 1 at cita-executor/src/backlogs.rs:288:9: 288:29
        _0 = const true;                 // scope 1 at cita-executor/src/backlogs.rs:289:9: 289:13
        goto -> bb8;                     // scope 0 at cita-executor/src/backlogs.rs:290:5: 290:6
    }

    bb7 (cleanup): {
        ((*_7).2: std::option::Option<core::libexecutor::block::ClosedBlock>) = move _10; // scope 1 at cita-executor/src/backlogs.rs:288:9: 288:29
        goto -> bb11;                    // scope 1 at cita-executor/src/backlogs.rs:288:9: 288:29
    }

    bb8: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:290:6: 290:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/backlogs.rs:283:5: 290:6
    }

    bb10 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at cita-executor/src/backlogs.rs:290:5: 290:6
    }

    bb11 (cleanup): {
        switchInt(_12) -> [0: bb9, otherwise: bb10]; // scope 0 at cita-executor/src/backlogs.rs:290:5: 290:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::check_completed(_1: &Backlogs, _2: u64) -> Result<(), std::string::String> {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:292:28: 292:33
    debug height => _2;                  // in scope 0 at cita-executor/src/backlogs.rs:292:35: 292:41
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at cita-executor/src/backlogs.rs:292:51: 292:69
    let mut _3: (&u64, &u64);            // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: u64;                         // in scope 0 at cita-executor/src/backlogs.rs:293:20: 293:45
    let mut _6: &u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: u64;                         // in scope 0 at cita-executor/src/backlogs.rs:293:47: 293:57
    let mut _8: (u64, bool);             // in scope 0 at cita-executor/src/backlogs.rs:293:47: 293:57
    let _9: &u64;                        // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &u64;                       // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _18: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:295:12: 295:48
    let mut _19: &std::option::Option<&backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:295:12: 295:48
    let _20: std::option::Option<&backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:295:12: 295:38
    let mut _21: &std::collections::BTreeMap<u64, backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:295:12: 295:38
    let _22: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:295:30: 295:37
    let mut _23: std::string::String;    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let _24: std::string::String;        // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _25: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _26: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:297:17: 297:74
    let mut _27: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _28: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _29: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _30: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:298:17: 298:23
    let _31: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:298:17: 298:23
    let _32: &backlogs::Backlog;         // in scope 0 at cita-executor/src/backlogs.rs:301:13: 301:20
    let _33: &backlogs::Backlog;         // in scope 0 at cita-executor/src/backlogs.rs:301:24: 301:46
    let mut _34: &std::collections::BTreeMap<u64, backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:301:24: 301:37
    let _35: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:301:38: 301:45
    let mut _36: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:302:12: 302:35
    let mut _37: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:302:13: 302:35
    let mut _38: std::string::String;    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let mut _40: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _41: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:304:17: 304:77
    let mut _42: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _43: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _44: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _45: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:305:17: 305:23
    let _46: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:305:17: 305:23
    let mut _48: std::option::Option<&libproto::Proof>; // in scope 0 at cita-executor/src/backlogs.rs:308:21: 308:40
    let mut _49: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:309:12: 309:48
    let mut _50: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:309:13: 309:48
    let mut _51: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:309:30: 309:40
    let mut _52: (u64, bool);            // in scope 0 at cita-executor/src/backlogs.rs:309:30: 309:40
    let mut _53: &libproto::Proof;       // in scope 0 at cita-executor/src/backlogs.rs:309:42: 309:47
    let mut _54: std::string::String;    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let mut _56: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _57: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:311:17: 311:72
    let mut _58: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _59: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _60: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _61: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:312:17: 312:23
    let _62: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:312:17: 312:23
    let mut _65: &[&str; 2];             // in scope 0 at cita-executor/src/backlogs.rs:297:17: 297:74
    scope 1 {
        debug left_val => _9;            // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug res => _24;                // in scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }
    scope 4 {
        debug backlog => _32;            // in scope 4 at cita-executor/src/backlogs.rs:301:13: 301:20
        let _39: std::string::String;    // in scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        let _47: &libproto::Proof;       // in scope 4 at cita-executor/src/backlogs.rs:308:13: 308:18
        let mut _64: &[&str; 2];         // in scope 4 at cita-executor/src/backlogs.rs:304:17: 304:77
        scope 5 {
            debug res => _39;            // in scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        }
        scope 6 {
            debug proof => _47;          // in scope 6 at cita-executor/src/backlogs.rs:308:13: 308:18
            let _55: std::string::String; // in scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
            let mut _63: &[&str; 2];     // in scope 6 at cita-executor/src/backlogs.rs:311:17: 311:72
            scope 7 {
                debug res => _55;        // in scope 7 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
            }
        }
    }

    bb0: {
        _5 = Backlogs::get_current_height(_1) -> bb1; // scope 0 at cita-executor/src/backlogs.rs:293:20: 293:45
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:293:25: 293:43
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs) -> u64 {Backlogs::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = CheckedSub(_2, const 1_u64); // scope 0 at cita-executor/src/backlogs.rs:293:47: 293:57
        assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 1_u64) -> bb2; // scope 0 at cita-executor/src/backlogs.rs:293:47: 293:57
    }

    bb2: {
        _7 = move (_8.0: u64);           // scope 0 at cita-executor/src/backlogs.rs:293:47: 293:57
        _6 = &_7;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _6);         // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_3.0: &u64);               // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_3.1: &u64);              // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = (*_10);                    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _15 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = std::option::Option::<Arguments<'_>>::None; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<u64, u64>(move _15, _9, _10, move _17); // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, std::option::Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = &((*_1).2: std::collections::BTreeMap<u64, backlogs::Backlog>); // scope 0 at cita-executor/src/backlogs.rs:295:12: 295:38
        _22 = &_2;                       // scope 0 at cita-executor/src/backlogs.rs:295:30: 295:37
        _20 = BTreeMap::<u64, Backlog>::get::<u64>(move _21, _22) -> bb5; // scope 0 at cita-executor/src/backlogs.rs:295:12: 295:38
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:295:26: 295:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTreeMap<u64, Backlog>, &'b u64) -> std::option::Option<&'a Backlog> {BTreeMap::<u64, Backlog>::get::<u64>}, val: Value(<ZST>) }
    }

    bb5: {
        _19 = &_20;                      // scope 0 at cita-executor/src/backlogs.rs:295:12: 295:48
        _18 = std::option::Option::<&Backlog>::is_none(move _19) -> bb6; // scope 0 at cita-executor/src/backlogs.rs:295:12: 295:48
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:295:39: 295:46
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<&Backlog>) -> bool {std::option::Option::<&Backlog>::is_none}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _18) -> [0: bb11, otherwise: bb7]; // scope 0 at cita-executor/src/backlogs.rs:295:12: 295:48
    }

    bb7: {
        _65 = const _;                   // scope 0 at cita-executor/src/backlogs.rs:297:17: 297:74
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:297:17: 297:74
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Backlogs::check_completed, [], Some(promoted[2])) }
        _26 = _65 as &[&str] (Pointer(Unsize)); // scope 0 at cita-executor/src/backlogs.rs:297:17: 297:74
        _31 = &_2;                       // scope 0 at cita-executor/src/backlogs.rs:298:17: 298:23
        _30 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_31) -> bb8; // scope 0 at cita-executor/src/backlogs.rs:298:17: 298:23
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:298:17: 298:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb8: {
        _29 = [move _30];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _28 = &_29;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _27 = _28 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> bb9; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _24 = std::fmt::format(move _25) -> bb10; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = move _24;                  // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _0 = Result::<(), std::string::String>::Err(move _23); // scope 0 at cita-executor/src/backlogs.rs:296:20: 299:15
        goto -> bb28;                    // scope 0 at no-location
    }

    bb11: {
        _34 = &((*_1).2: std::collections::BTreeMap<u64, backlogs::Backlog>); // scope 0 at cita-executor/src/backlogs.rs:301:24: 301:37
        _35 = &_2;                       // scope 0 at cita-executor/src/backlogs.rs:301:38: 301:45
        _33 = <BTreeMap<u64, Backlog> as std::ops::Index<&u64>>::index(move _34, _35) -> bb12; // scope 0 at cita-executor/src/backlogs.rs:301:24: 301:46
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:301:24: 301:46
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeMap<u64, Backlog>, &u64) -> &'a <BTreeMap<u64, Backlog> as std::ops::Index<&u64>>::Output {<BTreeMap<u64, Backlog> as std::ops::Index<&u64>>::index}, val: Value(<ZST>) }
    }

    bb12: {
        _32 = _33;                       // scope 0 at cita-executor/src/backlogs.rs:301:23: 301:46
        _37 = Backlog::is_completed(_32) -> bb13; // scope 4 at cita-executor/src/backlogs.rs:302:13: 302:35
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:302:21: 302:33
                                         // + literal: Const { ty: for<'a> fn(&'a Backlog) -> bool {Backlog::is_completed}, val: Value(<ZST>) }
    }

    bb13: {
        _36 = Not(move _37);             // scope 4 at cita-executor/src/backlogs.rs:302:12: 302:35
        switchInt(move _36) -> [0: bb18, otherwise: bb14]; // scope 4 at cita-executor/src/backlogs.rs:302:12: 302:35
    }

    bb14: {
        _64 = const _;                   // scope 4 at cita-executor/src/backlogs.rs:304:17: 304:77
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:304:17: 304:77
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Backlogs::check_completed, [], Some(promoted[1])) }
        _41 = _64 as &[&str] (Pointer(Unsize)); // scope 4 at cita-executor/src/backlogs.rs:304:17: 304:77
        _46 = &_2;                       // scope 4 at cita-executor/src/backlogs.rs:305:17: 305:23
        _45 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_46) -> bb15; // scope 4 at cita-executor/src/backlogs.rs:305:17: 305:23
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:305:17: 305:23
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb15: {
        _44 = [move _45];                // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _43 = &_44;                      // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _42 = _43 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> bb16; // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb16: {
        _39 = std::fmt::format(move _40) -> bb17; // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb17: {
        _38 = move _39;                  // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _0 = Result::<(), std::string::String>::Err(move _38); // scope 4 at cita-executor/src/backlogs.rs:303:20: 306:15
        goto -> bb28;                    // scope 4 at no-location
    }

    bb18: {
        _48 = Backlog::get_proof(_32) -> bb19; // scope 4 at cita-executor/src/backlogs.rs:308:21: 308:40
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:308:29: 308:38
                                         // + literal: Const { ty: for<'a> fn(&'a Backlog) -> std::option::Option<&'a libproto::Proof> {Backlog::get_proof}, val: Value(<ZST>) }
    }

    bb19: {
        _47 = std::option::Option::<&libproto::Proof>::unwrap(move _48) -> bb20; // scope 4 at cita-executor/src/backlogs.rs:308:21: 308:49
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:308:41: 308:47
                                         // + literal: Const { ty: fn(std::option::Option<&libproto::Proof>) -> &libproto::Proof {std::option::Option::<&libproto::Proof>::unwrap}, val: Value(<ZST>) }
    }

    bb20: {
        _52 = CheckedSub(_2, const 1_u64); // scope 6 at cita-executor/src/backlogs.rs:309:30: 309:40
        assert(!move (_52.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 1_u64) -> bb21; // scope 6 at cita-executor/src/backlogs.rs:309:30: 309:40
    }

    bb21: {
        _51 = move (_52.0: u64);         // scope 6 at cita-executor/src/backlogs.rs:309:30: 309:40
        _53 = _47;                       // scope 6 at cita-executor/src/backlogs.rs:309:42: 309:47
        _50 = Backlogs::is_proof_ok(_1, move _51, move _53) -> bb22; // scope 6 at cita-executor/src/backlogs.rs:309:13: 309:48
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:309:18: 309:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Backlogs, u64, &'b libproto::Proof) -> bool {Backlogs::is_proof_ok}, val: Value(<ZST>) }
    }

    bb22: {
        _49 = Not(move _50);             // scope 6 at cita-executor/src/backlogs.rs:309:12: 309:48
        switchInt(move _49) -> [0: bb27, otherwise: bb23]; // scope 6 at cita-executor/src/backlogs.rs:309:12: 309:48
    }

    bb23: {
        _63 = const _;                   // scope 6 at cita-executor/src/backlogs.rs:311:17: 311:72
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:311:17: 311:72
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Backlogs::check_completed, [], Some(promoted[0])) }
        _57 = _63 as &[&str] (Pointer(Unsize)); // scope 6 at cita-executor/src/backlogs.rs:311:17: 311:72
        _62 = &_2;                       // scope 6 at cita-executor/src/backlogs.rs:312:17: 312:23
        _61 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_62) -> bb24; // scope 6 at cita-executor/src/backlogs.rs:312:17: 312:23
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:312:17: 312:23
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb24: {
        _60 = [move _61];                // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _59 = &_60;                      // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _58 = _59 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _56 = Arguments::<'_>::new_v1(move _57, move _58) -> bb25; // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb25: {
        _55 = std::fmt::format(move _56) -> bb26; // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb26: {
        _54 = move _55;                  // scope 7 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _0 = Result::<(), std::string::String>::Err(move _54); // scope 6 at cita-executor/src/backlogs.rs:310:20: 313:15
        goto -> bb28;                    // scope 4 at no-location
    }

    bb27: {
        _0 = Result::<(), std::string::String>::Ok(const ()); // scope 6 at cita-executor/src/backlogs.rs:316:9: 316:15
        goto -> bb28;                    // scope 0 at cita-executor/src/backlogs.rs:317:6: 317:6
    }

    bb28: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:317:6: 317:6
    }
}

promoted[0] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::check_completed: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/backlogs.rs:311:17: 311:72
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/backlogs.rs:311:17: 311:72

    bb0: {
        _1 = [const "", const "-th is not completed cause backlog.proof is invalid"]; // scope 0 at cita-executor/src/backlogs.rs:311:17: 311:72
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:311:17: 311:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:311:17: 311:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:311:17: 311:72
        return;                          // scope 0 at cita-executor/src/backlogs.rs:311:17: 311:72
    }
}

promoted[1] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::check_completed: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/backlogs.rs:304:17: 304:77
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/backlogs.rs:304:17: 304:77

    bb0: {
        _1 = [const "", const "-th is not completed cause backlog.is_completed is false"]; // scope 0 at cita-executor/src/backlogs.rs:304:17: 304:77
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:304:17: 304:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:304:17: 304:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:304:17: 304:77
        return;                          // scope 0 at cita-executor/src/backlogs.rs:304:17: 304:77
    }
}

promoted[2] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::check_completed: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/backlogs.rs:297:17: 297:74
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/backlogs.rs:297:17: 297:74

    bb0: {
        _1 = [const "", const "-th is not completed cause backlog.open_block is None"]; // scope 0 at cita-executor/src/backlogs.rs:297:17: 297:74
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:297:17: 297:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:297:17: 297:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:297:17: 297:74
        return;                          // scope 0 at cita-executor/src/backlogs.rs:297:17: 297:74
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::ready(_1: &Backlogs, _2: u64) -> Result<&OpenBlock, std::string::String> {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:319:18: 319:23
    debug height => _2;                  // in scope 0 at cita-executor/src/backlogs.rs:319:25: 319:31
    let mut _0: std::result::Result<&types::block::OpenBlock, std::string::String>; // return place in scope 0 at cita-executor/src/backlogs.rs:319:41: 319:67
    let mut _3: (&u64, &u64);            // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: u64;                         // in scope 0 at cita-executor/src/backlogs.rs:320:20: 320:45
    let mut _6: &u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: u64;                         // in scope 0 at cita-executor/src/backlogs.rs:320:47: 320:57
    let mut _8: (u64, bool);             // in scope 0 at cita-executor/src/backlogs.rs:320:47: 320:57
    let _9: &u64;                        // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &u64;                       // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: u64;                    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _18: std::option::Option<&backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:321:15: 321:41
    let mut _19: &std::collections::BTreeMap<u64, backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:321:15: 321:41
    let _20: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:321:33: 321:40
    let mut _21: isize;                  // in scope 0 at cita-executor/src/backlogs.rs:322:13: 322:17
    let mut _22: std::string::String;    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let _23: std::string::String;        // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _24: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _25: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:322:33: 322:60
    let mut _26: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _27: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _28: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _29: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:322:62: 322:68
    let _30: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:322:62: 322:68
    let _31: &backlogs::Backlog;         // in scope 0 at cita-executor/src/backlogs.rs:323:18: 323:25
    let mut _34: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:326:20: 326:70
    let mut _35: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:326:21: 326:70
    let mut _36: &cita_types::H256;      // in scope 0 at cita-executor/src/backlogs.rs:326:41: 326:53
    let mut _37: u64;                    // in scope 0 at cita-executor/src/backlogs.rs:326:55: 326:69
    let mut _38: std::string::String;    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let mut _40: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _41: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:327:40: 327:68
    let mut _42: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _43: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _44: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _45: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:327:70: 327:76
    let _46: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:327:70: 327:76
    let mut _47: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:329:20: 329:40
    let mut _48: std::string::String;    // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let mut _50: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _51: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:330:40: 330:83
    let mut _52: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _53: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _54: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _55: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:330:85: 330:91
    let _56: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:330:85: 330:91
    let mut _57: &types::block::OpenBlock; // in scope 0 at cita-executor/src/backlogs.rs:332:20: 332:53
    let _58: &types::block::OpenBlock;   // in scope 0 at cita-executor/src/backlogs.rs:332:20: 332:53
    let mut _59: std::option::Option<&types::block::OpenBlock>; // in scope 0 at cita-executor/src/backlogs.rs:332:20: 332:44
    let mut _60: &[&str; 2];             // in scope 0 at cita-executor/src/backlogs.rs:322:33: 322:60
    scope 1 {
        debug left_val => _9;            // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug res => _23;                // in scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }
    scope 4 {
        debug backlog => _31;            // in scope 4 at cita-executor/src/backlogs.rs:323:18: 323:25
        let _32: &cita_types::H256;      // in scope 4 at cita-executor/src/backlogs.rs:324:21: 324:33
        scope 5 {
            debug current_hash => _32;   // in scope 5 at cita-executor/src/backlogs.rs:324:21: 324:33
            let _33: u64;                // in scope 5 at cita-executor/src/backlogs.rs:325:21: 325:35
            scope 6 {
                debug current_height => _33; // in scope 6 at cita-executor/src/backlogs.rs:325:21: 325:35
                let _39: std::string::String; // in scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
                let _49: std::string::String; // in scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
                let mut _61: &[&str; 2]; // in scope 6 at cita-executor/src/backlogs.rs:330:40: 330:83
                let mut _62: &[&str; 2]; // in scope 6 at cita-executor/src/backlogs.rs:327:40: 327:68
                scope 7 {
                    debug res => _39;    // in scope 7 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
                }
                scope 8 {
                    debug res => _49;    // in scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
                }
            }
        }
    }

    bb0: {
        _5 = Backlogs::get_current_height(_1) -> bb1; // scope 0 at cita-executor/src/backlogs.rs:320:20: 320:45
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:320:25: 320:43
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs) -> u64 {Backlogs::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = CheckedSub(_2, const 1_u64); // scope 0 at cita-executor/src/backlogs.rs:320:47: 320:57
        assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 1_u64) -> bb2; // scope 0 at cita-executor/src/backlogs.rs:320:47: 320:57
    }

    bb2: {
        _7 = move (_8.0: u64);           // scope 0 at cita-executor/src/backlogs.rs:320:47: 320:57
        _6 = &_7;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _6);         // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_3.0: &u64);               // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_3.1: &u64);              // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = (*_10);                    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _15 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = std::option::Option::<Arguments<'_>>::None; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<u64, u64>(move _15, _9, _10, move _17); // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, std::option::Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = &((*_1).2: std::collections::BTreeMap<u64, backlogs::Backlog>); // scope 0 at cita-executor/src/backlogs.rs:321:15: 321:41
        _20 = &_2;                       // scope 0 at cita-executor/src/backlogs.rs:321:33: 321:40
        _18 = BTreeMap::<u64, Backlog>::get::<u64>(move _19, _20) -> bb5; // scope 0 at cita-executor/src/backlogs.rs:321:15: 321:41
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:321:29: 321:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTreeMap<u64, Backlog>, &'b u64) -> std::option::Option<&'a Backlog> {BTreeMap::<u64, Backlog>::get::<u64>}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = discriminant(_18);         // scope 0 at cita-executor/src/backlogs.rs:321:15: 321:41
        switchInt(move _21) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 0 at cita-executor/src/backlogs.rs:321:9: 321:41
    }

    bb6: {
        _31 = ((_18 as Some).0: &backlogs::Backlog); // scope 0 at cita-executor/src/backlogs.rs:323:18: 323:25
        _32 = Backlogs::get_current_hash(_1) -> bb12; // scope 4 at cita-executor/src/backlogs.rs:324:36: 324:59
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:324:41: 324:57
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs) -> &'a H256 {Backlogs::get_current_hash}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 0 at cita-executor/src/backlogs.rs:321:15: 321:41
    }

    bb8: {
        _60 = const _;                   // scope 0 at cita-executor/src/backlogs.rs:322:33: 322:60
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:322:33: 322:60
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Backlogs::ready, [], Some(promoted[0])) }
        _25 = _60 as &[&str] (Pointer(Unsize)); // scope 0 at cita-executor/src/backlogs.rs:322:33: 322:60
        _30 = &_2;                       // scope 0 at cita-executor/src/backlogs.rs:322:62: 322:68
        _29 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_30) -> bb9; // scope 0 at cita-executor/src/backlogs.rs:322:62: 322:68
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:322:62: 322:68
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb9: {
        _28 = [move _29];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _27 = &_28;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _26 = _27 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _24 = Arguments::<'_>::new_v1(move _25, move _26) -> bb10; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = std::fmt::format(move _24) -> bb11; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = move _23;                  // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _0 = Result::<&OpenBlock, std::string::String>::Err(move _22); // scope 0 at cita-executor/src/backlogs.rs:322:21: 322:70
        goto -> bb28;                    // scope 0 at cita-executor/src/backlogs.rs:322:69: 322:70
    }

    bb12: {
        _33 = Backlogs::get_current_height(_1) -> bb13; // scope 5 at cita-executor/src/backlogs.rs:325:38: 325:63
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:325:43: 325:61
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs) -> u64 {Backlogs::get_current_height}, val: Value(<ZST>) }
    }

    bb13: {
        _36 = _32;                       // scope 6 at cita-executor/src/backlogs.rs:326:41: 326:53
        _37 = _33;                       // scope 6 at cita-executor/src/backlogs.rs:326:55: 326:69
        _35 = Backlog::is_block_ok(_31, move _36, move _37) -> bb14; // scope 6 at cita-executor/src/backlogs.rs:326:21: 326:70
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:326:29: 326:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Backlog, &'b H256, u64) -> bool {Backlog::is_block_ok}, val: Value(<ZST>) }
    }

    bb14: {
        _34 = Not(move _35);             // scope 6 at cita-executor/src/backlogs.rs:326:20: 326:70
        switchInt(move _34) -> [0: bb19, otherwise: bb15]; // scope 6 at cita-executor/src/backlogs.rs:326:20: 326:70
    }

    bb15: {
        _62 = const _;                   // scope 6 at cita-executor/src/backlogs.rs:327:40: 327:68
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:327:40: 327:68
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Backlogs::ready, [], Some(promoted[2])) }
        _41 = _62 as &[&str] (Pointer(Unsize)); // scope 6 at cita-executor/src/backlogs.rs:327:40: 327:68
        _46 = &_2;                       // scope 6 at cita-executor/src/backlogs.rs:327:70: 327:76
        _45 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_46) -> bb16; // scope 6 at cita-executor/src/backlogs.rs:327:70: 327:76
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:327:70: 327:76
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb16: {
        _44 = [move _45];                // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _43 = &_44;                      // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _42 = _43 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> bb17; // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb17: {
        _39 = std::fmt::format(move _40) -> bb18; // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb18: {
        _38 = move _39;                  // scope 7 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _0 = Result::<&OpenBlock, std::string::String>::Err(move _38); // scope 6 at cita-executor/src/backlogs.rs:327:28: 327:78
        goto -> bb28;                    // scope 6 at no-location
    }

    bb19: {
        _47 = Backlog::is_matched(_31) -> bb20; // scope 6 at cita-executor/src/backlogs.rs:329:20: 329:40
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:329:28: 329:38
                                         // + literal: Const { ty: for<'a> fn(&'a Backlog) -> bool {Backlog::is_matched}, val: Value(<ZST>) }
    }

    bb20: {
        switchInt(move _47) -> [0: bb25, otherwise: bb21]; // scope 6 at cita-executor/src/backlogs.rs:329:20: 329:40
    }

    bb21: {
        _61 = const _;                   // scope 6 at cita-executor/src/backlogs.rs:330:40: 330:83
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:330:40: 330:83
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Backlogs::ready, [], Some(promoted[1])) }
        _51 = _61 as &[&str] (Pointer(Unsize)); // scope 6 at cita-executor/src/backlogs.rs:330:40: 330:83
        _56 = &_2;                       // scope 6 at cita-executor/src/backlogs.rs:330:85: 330:91
        _55 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_56) -> bb22; // scope 6 at cita-executor/src/backlogs.rs:330:85: 330:91
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:330:85: 330:91
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb22: {
        _54 = [move _55];                // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _53 = &_54;                      // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _52 = _53 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _50 = Arguments::<'_>::new_v1(move _51, move _52) -> bb23; // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb23: {
        _49 = std::fmt::format(move _50) -> bb24; // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb24: {
        _48 = move _49;                  // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _0 = Result::<&OpenBlock, std::string::String>::Err(move _48); // scope 6 at cita-executor/src/backlogs.rs:330:28: 330:93
        goto -> bb28;                    // scope 6 at no-location
    }

    bb25: {
        _59 = Backlog::get_open_block(_31) -> bb26; // scope 6 at cita-executor/src/backlogs.rs:332:20: 332:44
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:332:28: 332:42
                                         // + literal: Const { ty: for<'a> fn(&'a Backlog) -> std::option::Option<&'a OpenBlock> {Backlog::get_open_block}, val: Value(<ZST>) }
    }

    bb26: {
        _58 = std::option::Option::<&OpenBlock>::unwrap(move _59) -> bb27; // scope 6 at cita-executor/src/backlogs.rs:332:20: 332:53
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:332:45: 332:51
                                         // + literal: Const { ty: fn(std::option::Option<&OpenBlock>) -> &OpenBlock {std::option::Option::<&OpenBlock>::unwrap}, val: Value(<ZST>) }
    }

    bb27: {
        _57 = _58;                       // scope 6 at cita-executor/src/backlogs.rs:332:20: 332:53
        _0 = Result::<&OpenBlock, std::string::String>::Ok(move _57); // scope 6 at cita-executor/src/backlogs.rs:332:17: 332:54
        goto -> bb28;                    // scope 0 at cita-executor/src/backlogs.rs:333:13: 333:14
    }

    bb28: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:335:6: 335:6
    }
}

promoted[0] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::ready: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/backlogs.rs:322:33: 322:60
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/backlogs.rs:322:33: 322:60

    bb0: {
        _1 = [const "", const "-th OpenBlock not found"]; // scope 0 at cita-executor/src/backlogs.rs:322:33: 322:60
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:322:33: 322:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:322:33: 322:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:322:33: 322:60
        return;                          // scope 0 at cita-executor/src/backlogs.rs:322:33: 322:60
    }
}

promoted[1] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::ready: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/backlogs.rs:330:40: 330:83
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/backlogs.rs:330:40: 330:83

    bb0: {
        _1 = [const "", const "-th OpenBlock has already been executed"]; // scope 0 at cita-executor/src/backlogs.rs:330:40: 330:83
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:330:40: 330:83
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:330:40: 330:83
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:330:40: 330:83
        return;                          // scope 0 at cita-executor/src/backlogs.rs:330:40: 330:83
    }
}

promoted[2] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::ready: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/backlogs.rs:327:40: 327:68
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/backlogs.rs:327:40: 327:68

    bb0: {
        _1 = [const "", const "-th OpenBlock is invalid"]; // scope 0 at cita-executor/src/backlogs.rs:327:40: 327:68
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:327:40: 327:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:327:40: 327:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:327:40: 327:68
        return;                          // scope 0 at cita-executor/src/backlogs.rs:327:40: 327:68
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::is_proof_ok(_1: &Backlogs, _2: u64, _3: &libproto::Proof) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:338:24: 338:29
    debug height => _2;                  // in scope 0 at cita-executor/src/backlogs.rs:338:31: 338:37
    debug proof => _3;                   // in scope 0 at cita-executor/src/backlogs.rs:338:44: 338:49
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/backlogs.rs:338:62: 338:66
    let _4: u64;                         // in scope 0 at cita-executor/src/backlogs.rs:344:13: 344:24
    let mut _5: (u64, bool);             // in scope 0 at cita-executor/src/backlogs.rs:344:27: 344:37
    let mut _6: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:345:12: 345:54
    let mut _7: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:345:13: 345:54
    let mut _8: &std::collections::BTreeMap<u64, libproto::ExecutedResult>; // in scope 0 at cita-executor/src/backlogs.rs:345:13: 345:54
    let _9: &u64;                        // in scope 0 at cita-executor/src/backlogs.rs:345:41: 345:53
    let mut _11: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _12: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _13: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _14: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _15: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _16: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _17: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _18: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _19: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _20: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:346:19: 346:51
    let mut _21: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _23: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:346:53: 346:64
    let _25: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:346:53: 346:64
    let _27: &libproto::ExecutedResult;  // in scope 0 at cita-executor/src/backlogs.rs:350:32: 350:60
    let mut _28: &std::collections::BTreeMap<u64, libproto::ExecutedResult>; // in scope 0 at cita-executor/src/backlogs.rs:350:32: 350:46
    let _29: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:350:47: 350:59
    let mut _31: &libproto::ConsensusConfig; // in scope 0 at cita-executor/src/backlogs.rs:351:26: 351:71
    let _32: &libproto::ConsensusConfig; // in scope 0 at cita-executor/src/backlogs.rs:351:26: 351:54
    let mut _34: std::iter::Map<std::slice::Iter<'_, std::vec::Vec<u8>>, [closure@cita-executor/src/backlogs.rs:354:18: 354:23]>; // in scope 0 at cita-executor/src/backlogs.rs:352:44: 354:54
    let mut _35: std::slice::Iter<'_, std::vec::Vec<u8>>; // in scope 0 at cita-executor/src/backlogs.rs:352:44: 353:20
    let mut _36: &[std::vec::Vec<u8>];   // in scope 0 at cita-executor/src/backlogs.rs:352:44: 353:20
    let mut _37: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:358:12: 358:37
    let mut _38: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/backlogs.rs:358:12: 358:37
    let mut _40: libproto::Proof;        // in scope 0 at cita-executor/src/backlogs.rs:361:47: 361:60
    let mut _41: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:363:12: 363:62
    let mut _42: bool;                   // in scope 0 at cita-executor/src/backlogs.rs:363:13: 363:62
    let mut _43: &proof::BftProof;       // in scope 0 at cita-executor/src/backlogs.rs:363:13: 363:62
    let mut _44: usize;                  // in scope 0 at cita-executor/src/backlogs.rs:363:29: 363:44
    let mut _45: &[cita_types::H160];    // in scope 0 at cita-executor/src/backlogs.rs:363:46: 363:61
    let _46: &[cita_types::H160];        // in scope 0 at cita-executor/src/backlogs.rs:363:46: 363:61
    let _47: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/backlogs.rs:363:46: 363:61
    let mut _49: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _50: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _51: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _52: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _53: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _54: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _55: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _56: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _57: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _58: &[&str];                // in scope 0 at cita-executor/src/backlogs.rs:365:17: 365:78
    let mut _59: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _60: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _61: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _62: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:366:17: 366:31
    let _63: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/backlogs.rs:366:17: 366:31
    let mut _64: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/backlogs.rs:367:17: 367:26
    let _65: &proof::BftProof;           // in scope 0 at cita-executor/src/backlogs.rs:367:17: 367:26
    scope 1 {
        debug prev_height => _4;         // in scope 1 at cita-executor/src/backlogs.rs:344:13: 344:24
        let _10: log::Level;             // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let _26: &libproto::ExecutedResult; // in scope 1 at cita-executor/src/backlogs.rs:350:13: 350:28
        scope 2 {
            debug lvl => _10;            // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _69: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _70: &[&str; 2];     // in scope 2 at cita-executor/src/backlogs.rs:346:19: 346:51
            let mut _71: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
        scope 3 {
            debug executed_result => _26; // in scope 3 at cita-executor/src/backlogs.rs:350:13: 350:28
            let _30: &[std::vec::Vec<u8>]; // in scope 3 at cita-executor/src/backlogs.rs:351:13: 351:23
            scope 4 {
                debug validators => _30; // in scope 4 at cita-executor/src/backlogs.rs:351:13: 351:23
                let _33: std::vec::Vec<cita_types::H160>; // in scope 4 at cita-executor/src/backlogs.rs:352:13: 352:27
                scope 5 {
                    debug proof_checkers => _33; // in scope 5 at cita-executor/src/backlogs.rs:352:13: 352:27
                    let _39: proof::BftProof; // in scope 5 at cita-executor/src/backlogs.rs:361:13: 361:22
                    scope 6 {
                        debug bft_proof => _39; // in scope 6 at cita-executor/src/backlogs.rs:361:13: 361:22
                        let _48: log::Level; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        scope 7 {
                            debug lvl => _48; // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                            let mut _66: &(&str, &str, &str, u32); // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                            let mut _67: &[&str; 2]; // in scope 7 at cita-executor/src/backlogs.rs:365:17: 365:78
                            let mut _68: &log::LevelFilter; // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                        }
                    }
                }
            }
        }
    }

    bb0: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-executor/src/backlogs.rs:340:12: 340:23
    }

    bb1: {
        _0 = const true;                 // scope 0 at cita-executor/src/backlogs.rs:341:20: 341:24
        goto -> bb43;                    // scope 0 at no-location
    }

    bb2: {
        _5 = CheckedSub(_2, const 1_u64); // scope 0 at cita-executor/src/backlogs.rs:344:27: 344:37
        assert(!move (_5.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 1_u64) -> bb3; // scope 0 at cita-executor/src/backlogs.rs:344:27: 344:37
    }

    bb3: {
        _4 = move (_5.0: u64);           // scope 0 at cita-executor/src/backlogs.rs:344:27: 344:37
        _8 = &((*_1).3: std::collections::BTreeMap<u64, libproto::ExecutedResult>); // scope 1 at cita-executor/src/backlogs.rs:345:13: 345:54
        _9 = &_4;                        // scope 1 at cita-executor/src/backlogs.rs:345:41: 345:53
        _7 = BTreeMap::<u64, libproto::ExecutedResult>::contains_key::<u64>(move _8, _9) -> bb4; // scope 1 at cita-executor/src/backlogs.rs:345:13: 345:54
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:345:28: 345:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTreeMap<u64, libproto::ExecutedResult>, &'b u64) -> bool {BTreeMap::<u64, libproto::ExecutedResult>::contains_key::<u64>}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = Not(move _7);               // scope 1 at cita-executor/src/backlogs.rs:345:12: 345:54
        switchInt(move _6) -> [0: bb16, otherwise: bb5]; // scope 1 at cita-executor/src/backlogs.rs:345:12: 345:54
    }

    bb5: {
        _10 = log::Level::Warn;          // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _13 = &_10;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _71 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Backlogs::is_proof_ok, [], Some(promoted[5])) }
        _12 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _13, _71) -> bb9; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = const false;               // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb8;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _15 = &_10;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _17 = log::max_level() -> bb10;  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb8: {
        switchInt(move _11) -> [0: bb15, otherwise: bb12]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        switchInt(move _12) -> [0: bb6, otherwise: bb7]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        _16 = &_17;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _14 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _15, move _16) -> bb11; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb11: {
        _11 = move _14;                  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb8;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb12: {
        _70 = const _;                   // scope 2 at cita-executor/src/backlogs.rs:346:19: 346:51
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:346:19: 346:51
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Backlogs::is_proof_ok, [], Some(promoted[4])) }
        _20 = _70 as &[&str] (Pointer(Unsize)); // scope 2 at cita-executor/src/backlogs.rs:346:19: 346:51
        _25 = &_4;                       // scope 2 at cita-executor/src/backlogs.rs:346:53: 346:64
        _24 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_25) -> bb13; // scope 2 at cita-executor/src/backlogs.rs:346:53: 346:64
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:346:53: 346:64
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb13: {
        _23 = [move _24];                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _22 = &_23;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _21 = _22 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _19 = Arguments::<'_>::new_v1(move _20, move _21) -> bb14; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb14: {
        _69 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Backlogs::is_proof_ok, [], Some(promoted[3])) }
        _18 = log::__private_api_log(move _19, _10, _69) -> bb15; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb15: {
        _0 = const false;                // scope 1 at cita-executor/src/backlogs.rs:347:20: 347:25
        goto -> bb43;                    // scope 1 at no-location
    }

    bb16: {
        _28 = &((*_1).3: std::collections::BTreeMap<u64, libproto::ExecutedResult>); // scope 1 at cita-executor/src/backlogs.rs:350:32: 350:46
        _29 = &_4;                       // scope 1 at cita-executor/src/backlogs.rs:350:47: 350:59
        _27 = <BTreeMap<u64, libproto::ExecutedResult> as std::ops::Index<&u64>>::index(move _28, _29) -> bb17; // scope 1 at cita-executor/src/backlogs.rs:350:32: 350:60
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:350:32: 350:60
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeMap<u64, libproto::ExecutedResult>, &u64) -> &'a <BTreeMap<u64, libproto::ExecutedResult> as std::ops::Index<&u64>>::Output {<BTreeMap<u64, libproto::ExecutedResult> as std::ops::Index<&u64>>::index}, val: Value(<ZST>) }
    }

    bb17: {
        _26 = _27;                       // scope 1 at cita-executor/src/backlogs.rs:350:31: 350:60
        _32 = libproto::ExecutedResult::get_config(_26) -> bb18; // scope 3 at cita-executor/src/backlogs.rs:351:26: 351:54
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:351:42: 351:52
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::ExecutedResult) -> &'a ConsensusConfig {libproto::ExecutedResult::get_config}, val: Value(<ZST>) }
    }

    bb18: {
        _31 = _32;                       // scope 3 at cita-executor/src/backlogs.rs:351:26: 351:71
        _30 = ConsensusConfig::get_validators(move _31) -> bb19; // scope 3 at cita-executor/src/backlogs.rs:351:26: 351:71
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:351:55: 351:69
                                         // + literal: Const { ty: for<'a> fn(&'a ConsensusConfig) -> &'a [Vec<u8>] {ConsensusConfig::get_validators}, val: Value(<ZST>) }
    }

    bb19: {
        _36 = _30;                       // scope 4 at cita-executor/src/backlogs.rs:352:44: 353:20
        _35 = core::slice::<impl [Vec<u8>]>::iter(move _36) -> bb20; // scope 4 at cita-executor/src/backlogs.rs:352:44: 353:20
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:353:14: 353:18
                                         // + literal: Const { ty: for<'a> fn(&'a [Vec<u8>]) -> std::slice::Iter<'a, Vec<u8>> {core::slice::<impl [Vec<u8>]>::iter}, val: Value(<ZST>) }
    }

    bb20: {
        _34 = <std::slice::Iter<'_, Vec<u8>> as Iterator>::map::<H160, [closure@cita-executor/src/backlogs.rs:354:18: 354:23]>(move _35, const ZeroSized: [closure@cita-executor/src/backlogs.rs:354:18: 354:23]) -> bb21; // scope 4 at cita-executor/src/backlogs.rs:352:44: 354:54
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:354:14: 354:17
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, Vec<u8>>, [closure@cita-executor/src/backlogs.rs:354:18: 354:23]) -> std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-executor/src/backlogs.rs:354:18: 354:23]> {<std::slice::Iter<'_, Vec<u8>> as Iterator>::map::<H160, [closure@cita-executor/src/backlogs.rs:354:18: 354:23]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-executor/src/backlogs.rs:354:18: 354:23], val: Value(<ZST>) }
    }

    bb21: {
        _33 = <std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-executor/src/backlogs.rs:354:18: 354:23]> as Iterator>::collect::<Vec<H160>>(move _34) -> bb22; // scope 4 at cita-executor/src/backlogs.rs:352:44: 355:23
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:355:14: 355:21
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-executor/src/backlogs.rs:354:18: 354:23]>) -> Vec<H160> {<std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-executor/src/backlogs.rs:354:18: 354:23]> as Iterator>::collect::<Vec<H160>>}, val: Value(<ZST>) }
    }

    bb22: {
        _38 = &_33;                      // scope 5 at cita-executor/src/backlogs.rs:358:12: 358:37
        _37 = Vec::<H160>::is_empty(move _38) -> [return: bb23, unwind: bb45]; // scope 5 at cita-executor/src/backlogs.rs:358:12: 358:37
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:358:27: 358:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> bool {Vec::<H160>::is_empty}, val: Value(<ZST>) }
    }

    bb23: {
        switchInt(move _37) -> [0: bb25, otherwise: bb24]; // scope 5 at cita-executor/src/backlogs.rs:358:12: 358:37
    }

    bb24: {
        _0 = const true;                 // scope 5 at cita-executor/src/backlogs.rs:359:20: 359:24
        drop(_33) -> bb43;               // scope 4 at cita-executor/src/backlogs.rs:371:5: 371:6
    }

    bb25: {
        _40 = <libproto::Proof as Clone>::clone(_3) -> [return: bb26, unwind: bb45]; // scope 5 at cita-executor/src/backlogs.rs:361:47: 361:60
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:361:53: 361:58
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb26: {
        _39 = <proof::BftProof as From<libproto::Proof>>::from(move _40) -> [return: bb27, unwind: bb45]; // scope 5 at cita-executor/src/backlogs.rs:361:25: 361:61
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:361:25: 361:46
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(libproto::Proof) -> proof::BftProof {<proof::BftProof as From<libproto::Proof>>::from}, val: Value(<ZST>) }
    }

    bb27: {
        _43 = &_39;                      // scope 6 at cita-executor/src/backlogs.rs:363:13: 363:62
        _44 = _2 as usize (IntToInt);    // scope 6 at cita-executor/src/backlogs.rs:363:29: 363:44
        _47 = &_33;                      // scope 6 at cita-executor/src/backlogs.rs:363:46: 363:61
        _46 = <Vec<H160> as Deref>::deref(_47) -> [return: bb28, unwind: bb44]; // scope 6 at cita-executor/src/backlogs.rs:363:46: 363:61
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:363:46: 363:61
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> &'a <Vec<H160> as Deref>::Target {<Vec<H160> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb28: {
        _45 = _46;                       // scope 6 at cita-executor/src/backlogs.rs:363:46: 363:61
        _42 = proof::BftProof::check(move _43, move _44, move _45) -> [return: bb29, unwind: bb44]; // scope 6 at cita-executor/src/backlogs.rs:363:13: 363:62
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:363:23: 363:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a proof::BftProof, usize, &'b [H160]) -> bool {proof::BftProof::check}, val: Value(<ZST>) }
    }

    bb29: {
        _41 = Not(move _42);             // scope 6 at cita-executor/src/backlogs.rs:363:12: 363:62
        switchInt(move _41) -> [0: bb41, otherwise: bb30]; // scope 6 at cita-executor/src/backlogs.rs:363:12: 363:62
    }

    bb30: {
        _48 = log::Level::Trace;         // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _51 = &_48;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _68 = const _;                   // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Backlogs::is_proof_ok, [], Some(promoted[2])) }
        _50 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _51, _68) -> [return: bb34, unwind: bb44]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb31: {
        _49 = const false;               // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb33;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb32: {
        _53 = &_48;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _55 = log::max_level() -> [return: bb35, unwind: bb44]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb33: {
        switchInt(move _49) -> [0: bb41, otherwise: bb37]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb34: {
        switchInt(move _50) -> [0: bb31, otherwise: bb32]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb35: {
        _54 = &_55;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _52 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _53, move _54) -> [return: bb36, unwind: bb44]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb36: {
        _49 = move _52;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb33;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb37: {
        _67 = const _;                   // scope 7 at cita-executor/src/backlogs.rs:365:17: 365:78
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:365:17: 365:78
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Backlogs::is_proof_ok, [], Some(promoted[1])) }
        _58 = _67 as &[&str] (Pointer(Unsize)); // scope 7 at cita-executor/src/backlogs.rs:365:17: 365:78
        _63 = &_33;                      // scope 7 at cita-executor/src/backlogs.rs:366:17: 366:31
        _62 = core::fmt::ArgumentV1::<'_>::new_debug::<Vec<H160>>(_63) -> [return: bb38, unwind: bb44]; // scope 7 at cita-executor/src/backlogs.rs:366:17: 366:31
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:366:17: 366:31
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b Vec<H160>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Vec<H160>>}, val: Value(<ZST>) }
    }

    bb38: {
        _65 = &_39;                      // scope 7 at cita-executor/src/backlogs.rs:367:17: 367:26
        _64 = core::fmt::ArgumentV1::<'_>::new_debug::<proof::BftProof>(_65) -> [return: bb39, unwind: bb44]; // scope 7 at cita-executor/src/backlogs.rs:367:17: 367:26
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:367:17: 367:26
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b proof::BftProof) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<proof::BftProof>}, val: Value(<ZST>) }
    }

    bb39: {
        _61 = [move _62, move _64];      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _60 = &_61;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _59 = _60 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _57 = Arguments::<'_>::new_v1(move _58, move _59) -> [return: bb40, unwind: bb44]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb40: {
        _66 = const _;                   // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Backlogs::is_proof_ok, [], Some(promoted[0])) }
        _56 = log::__private_api_log(move _57, _48, _66) -> [return: bb47, unwind: bb44]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb41: {
        _0 = const true;                 // scope 6 at cita-executor/src/backlogs.rs:370:9: 370:13
        drop(_39) -> [return: bb42, unwind: bb45]; // scope 5 at cita-executor/src/backlogs.rs:371:5: 371:6
    }

    bb42: {
        drop(_33) -> bb43;               // scope 4 at cita-executor/src/backlogs.rs:371:5: 371:6
    }

    bb43: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:371:6: 371:6
    }

    bb44 (cleanup): {
        drop(_39) -> bb45;               // scope 5 at cita-executor/src/backlogs.rs:371:5: 371:6
    }

    bb45 (cleanup): {
        drop(_33) -> bb46;               // scope 4 at cita-executor/src/backlogs.rs:371:5: 371:6
    }

    bb46 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/backlogs.rs:338:5: 371:6
    }

    bb47: {
        goto -> bb41;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::is_proof_ok: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:364:13: 368:14
    let mut _7: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:364:13: 368:14

    bb0: {
        _3 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/backlogs.rs"; // scope 0 at cita-executor/src/backlogs.rs:364:13: 368:14
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:364:13: 368:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/backlogs.rs:364:13: 368:14
        _1 = (move _2, move _4, move _6, const 364_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::is_proof_ok: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/backlogs.rs:365:17: 365:78
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/backlogs.rs:365:17: 365:78

    bb0: {
        _1 = [const "bft_proof is invalid, proof_checkers: ", const ", bft_proof: "]; // scope 0 at cita-executor/src/backlogs.rs:365:17: 365:78
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:365:17: 365:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:365:17: 365:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:365:17: 365:78
        return;                          // scope 0 at cita-executor/src/backlogs.rs:365:17: 365:78
    }
}

promoted[2] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::is_proof_ok: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::is_proof_ok: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:346:13: 346:65
    let mut _7: &str;                    // in scope 0 at cita-executor/src/backlogs.rs:346:13: 346:65

    bb0: {
        _3 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::backlogs"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/backlogs.rs"; // scope 0 at cita-executor/src/backlogs.rs:346:13: 346:65
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:346:13: 346:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/backlogs.rs:346:13: 346:65
        _1 = (move _2, move _4, move _6, const 346_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::is_proof_ok: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/backlogs.rs:346:19: 346:51
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/backlogs.rs:346:19: 346:51

    bb0: {
        _1 = [const "", const "-th ExecutedResult not exist"]; // scope 0 at cita-executor/src/backlogs.rs:346:19: 346:51
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:346:19: 346:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:346:19: 346:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/backlogs.rs:346:19: 346:51
        return;                          // scope 0 at cita-executor/src/backlogs.rs:346:19: 346:51
    }
}

promoted[5] in backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::is_proof_ok: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::is_proof_ok::{closure#0}(_1: &mut [closure@cita-executor/src/backlogs.rs:354:18: 354:23], _2: &Vec<u8>) -> H160 {
    debug vec => _2;                     // in scope 0 at cita-executor/src/backlogs.rs:354:19: 354:22
    let mut _0: cita_types::H160;        // return place in scope 0 at cita-executor/src/backlogs.rs:354:24: 354:24
    let _3: &[u8];                       // in scope 0 at cita-executor/src/backlogs.rs:354:44: 354:52
    let _4: &[u8];                       // in scope 0 at cita-executor/src/backlogs.rs:354:45: 354:52

    bb0: {
        _4 = <Vec<u8> as std::ops::Index<RangeFull>>::index(_2, const RangeFull) -> bb1; // scope 0 at cita-executor/src/backlogs.rs:354:45: 354:52
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:354:45: 354:52
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>, RangeFull) -> &'a <Vec<u8> as std::ops::Index<RangeFull>>::Output {<Vec<u8> as std::ops::Index<RangeFull>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: RangeFull, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-executor/src/backlogs.rs:354:44: 354:52
        _0 = H160::from_slice(_3) -> bb2; // scope 0 at cita-executor/src/backlogs.rs:354:24: 354:53
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:354:24: 354:43
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H160 {H160::from_slice}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:354:53: 354:53
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::complete(_1: &mut Backlogs, _2: u64) -> Result<ClosedBlock, std::string::String> {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:373:21: 373:30
    debug height => _2;                  // in scope 0 at cita-executor/src/backlogs.rs:373:32: 373:38
    let mut _0: std::result::Result<core::libexecutor::block::ClosedBlock, std::string::String>; // return place in scope 0 at cita-executor/src/backlogs.rs:373:48: 373:75
    let mut _3: std::result::Result<(), std::string::String>; // in scope 0 at cita-executor/src/backlogs.rs:374:30: 374:58
    let mut _4: &backlogs::Backlogs;     // in scope 0 at cita-executor/src/backlogs.rs:374:30: 374:58
    let mut _5: isize;                   // in scope 0 at cita-executor/src/backlogs.rs:374:16: 374:27
    let _7: backlogs::Backlog;           // in scope 0 at cita-executor/src/backlogs.rs:378:13: 378:20
    let mut _8: std::option::Option<backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:378:23: 378:52
    let mut _9: &mut std::collections::BTreeMap<u64, backlogs::Backlog>; // in scope 0 at cita-executor/src/backlogs.rs:378:23: 378:52
    let _10: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:378:44: 378:51
    let mut _12: backlogs::Backlog;      // in scope 0 at cita-executor/src/backlogs.rs:379:28: 379:35
    let mut _13: (u64, bool);            // in scope 0 at cita-executor/src/backlogs.rs:380:9: 380:33
    let mut _14: cita_types::H256;       // in scope 0 at cita-executor/src/backlogs.rs:381:29: 383:64
    let mut _15: std::option::Option<cita_types::H256>; // in scope 0 at cita-executor/src/backlogs.rs:381:29: 382:20
    let mut _16: &types::header::Header; // in scope 0 at cita-executor/src/backlogs.rs:381:29: 382:20
    let _17: &types::header::Header;     // in scope 0 at cita-executor/src/backlogs.rs:381:29: 382:20
    let mut _18: &types::block::Block;   // in scope 0 at cita-executor/src/backlogs.rs:381:29: 382:20
    let _19: &types::block::Block;       // in scope 0 at cita-executor/src/backlogs.rs:381:29: 382:20
    let mut _20: &core::libexecutor::block::ClosedBlock; // in scope 0 at cita-executor/src/backlogs.rs:381:29: 382:20
    let _21: &str;                       // in scope 0 at cita-executor/src/backlogs.rs:383:21: 383:63
    let mut _22: core::libexecutor::block::ClosedBlock; // in scope 0 at cita-executor/src/backlogs.rs:384:12: 384:24
    scope 1 {
        debug reason => _6;              // in scope 1 at cita-executor/src/backlogs.rs:374:20: 374:26
        let _6: std::string::String;     // in scope 1 at cita-executor/src/backlogs.rs:374:20: 374:26
    }
    scope 2 {
        debug backlog => _7;             // in scope 2 at cita-executor/src/backlogs.rs:378:13: 378:20
        let _11: core::libexecutor::block::ClosedBlock; // in scope 2 at cita-executor/src/backlogs.rs:379:13: 379:25
        scope 3 {
            debug closed_block => _11;   // in scope 3 at cita-executor/src/backlogs.rs:379:13: 379:25
        }
    }

    bb0: {
        _4 = &(*_1);                     // scope 1 at cita-executor/src/backlogs.rs:374:30: 374:58
        _3 = Backlogs::check_completed(move _4, _2) -> bb1; // scope 1 at cita-executor/src/backlogs.rs:374:30: 374:58
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:374:35: 374:50
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs, u64) -> Result<(), std::string::String> {Backlogs::check_completed}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 1 at cita-executor/src/backlogs.rs:374:16: 374:27
        switchInt(move _5) -> [1: bb2, otherwise: bb3]; // scope 1 at cita-executor/src/backlogs.rs:374:16: 374:27
    }

    bb2: {
        _6 = move ((_3 as Err).0: std::string::String); // scope 1 at cita-executor/src/backlogs.rs:374:20: 374:26
        _0 = Result::<ClosedBlock, std::string::String>::Err(move _6); // scope 1 at cita-executor/src/backlogs.rs:375:20: 375:31
        goto -> bb13;                    // scope 0 at cita-executor/src/backlogs.rs:385:6: 385:6
    }

    bb3: {
        drop(_3) -> bb4;                 // scope 0 at cita-executor/src/backlogs.rs:376:9: 376:10
    }

    bb4: {
        _9 = &mut ((*_1).2: std::collections::BTreeMap<u64, backlogs::Backlog>); // scope 0 at cita-executor/src/backlogs.rs:378:23: 378:52
        _10 = &_2;                       // scope 0 at cita-executor/src/backlogs.rs:378:44: 378:51
        _8 = BTreeMap::<u64, Backlog>::remove::<u64>(move _9, _10) -> bb5; // scope 0 at cita-executor/src/backlogs.rs:378:23: 378:52
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:378:37: 378:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut BTreeMap<u64, Backlog>, &'b u64) -> std::option::Option<Backlog> {BTreeMap::<u64, Backlog>::remove::<u64>}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = std::option::Option::<Backlog>::unwrap(move _8) -> bb6; // scope 0 at cita-executor/src/backlogs.rs:378:23: 378:61
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:378:53: 378:59
                                         // + literal: Const { ty: fn(std::option::Option<Backlog>) -> Backlog {std::option::Option::<Backlog>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = move _7;                   // scope 2 at cita-executor/src/backlogs.rs:379:28: 379:35
        _11 = Backlog::complete(move _12) -> bb7; // scope 2 at cita-executor/src/backlogs.rs:379:28: 379:46
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:379:36: 379:44
                                         // + literal: Const { ty: fn(Backlog) -> ClosedBlock {Backlog::complete}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = CheckedAdd(((*_1).0: u64), const 1_u64); // scope 3 at cita-executor/src/backlogs.rs:380:9: 380:33
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: u64), const 1_u64) -> [success: bb8, unwind: bb14]; // scope 3 at cita-executor/src/backlogs.rs:380:9: 380:33
    }

    bb8: {
        ((*_1).0: u64) = move (_13.0: u64); // scope 3 at cita-executor/src/backlogs.rs:380:9: 380:33
        _20 = &_11;                      // scope 3 at cita-executor/src/backlogs.rs:381:29: 382:20
        _19 = <ClosedBlock as Deref>::deref(move _20) -> [return: bb9, unwind: bb14]; // scope 3 at cita-executor/src/backlogs.rs:381:29: 382:20
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:381:29: 382:20
                                         // + literal: Const { ty: for<'a> fn(&'a ClosedBlock) -> &'a <ClosedBlock as Deref>::Target {<ClosedBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = _19;                       // scope 3 at cita-executor/src/backlogs.rs:381:29: 382:20
        _17 = <types::block::Block as Deref>::deref(move _18) -> [return: bb10, unwind: bb14]; // scope 3 at cita-executor/src/backlogs.rs:381:29: 382:20
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:381:29: 382:20
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a <types::block::Block as Deref>::Target {<types::block::Block as Deref>::deref}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = _17;                       // scope 3 at cita-executor/src/backlogs.rs:381:29: 382:20
        _15 = Header::hash(move _16) -> [return: bb11, unwind: bb14]; // scope 3 at cita-executor/src/backlogs.rs:381:29: 382:20
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:382:14: 382:18
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> std::option::Option<H256> {Header::hash}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = const "already rehash at backlog.complete below"; // scope 3 at cita-executor/src/backlogs.rs:383:21: 383:63
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:383:21: 383:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = std::option::Option::<H256>::expect(move _15, _21) -> [return: bb12, unwind: bb14]; // scope 3 at cita-executor/src/backlogs.rs:381:29: 383:64
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:383:14: 383:20
                                         // + literal: Const { ty: for<'a> fn(std::option::Option<H256>, &'a str) -> H256 {std::option::Option::<H256>::expect}, val: Value(<ZST>) }
    }

    bb12: {
        ((*_1).1: cita_types::H256) = move _14; // scope 3 at cita-executor/src/backlogs.rs:381:9: 383:64
        _22 = move _11;                  // scope 3 at cita-executor/src/backlogs.rs:384:12: 384:24
        _0 = Result::<ClosedBlock, std::string::String>::Ok(move _22); // scope 3 at cita-executor/src/backlogs.rs:384:9: 384:25
        goto -> bb13;                    // scope 0 at cita-executor/src/backlogs.rs:385:6: 385:6
    }

    bb13: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:385:6: 385:6
    }

    bb14 (cleanup): {
        drop(_11) -> bb15;               // scope 2 at cita-executor/src/backlogs.rs:385:5: 385:6
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/backlogs.rs:373:5: 385:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::completed_keys(_1: &Backlogs) -> Vec<&u64> {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:387:27: 387:32
    let mut _0: std::vec::Vec<&u64>;     // return place in scope 0 at cita-executor/src/backlogs.rs:387:37: 387:58
    let mut _2: std::collections::btree_map::Keys<'_, u64, libproto::ExecutedResult>; // in scope 0 at cita-executor/src/backlogs.rs:388:9: 388:30
    let mut _3: &std::collections::BTreeMap<u64, libproto::ExecutedResult>; // in scope 0 at cita-executor/src/backlogs.rs:388:9: 388:30

    bb0: {
        _3 = &((*_1).3: std::collections::BTreeMap<u64, libproto::ExecutedResult>); // scope 0 at cita-executor/src/backlogs.rs:388:9: 388:30
        _2 = BTreeMap::<u64, libproto::ExecutedResult>::keys(move _3) -> bb1; // scope 0 at cita-executor/src/backlogs.rs:388:9: 388:30
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:388:24: 388:28
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeMap<u64, libproto::ExecutedResult>) -> std::collections::btree_map::Keys<'a, u64, libproto::ExecutedResult> {BTreeMap::<u64, libproto::ExecutedResult>::keys}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <std::collections::btree_map::Keys<'_, u64, libproto::ExecutedResult> as Itertools>::sorted(move _2) -> bb2; // scope 0 at cita-executor/src/backlogs.rs:388:9: 388:39
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:388:31: 388:37
                                         // + literal: Const { ty: fn(std::collections::btree_map::Keys<'_, u64, libproto::ExecutedResult>) -> Vec<<std::collections::btree_map::Keys<'_, u64, libproto::ExecutedResult> as Iterator>::Item> {<std::collections::btree_map::Keys<'_, u64, libproto::ExecutedResult> as Itertools>::sorted}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:389:6: 389:6
    }
}

fn backlogs::<impl at cita-executor/src/backlogs.rs:169:1: 169:14>::prune(_1: &mut Backlogs, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/backlogs.rs:391:18: 391:27
    debug height => _2;                  // in scope 0 at cita-executor/src/backlogs.rs:391:29: 391:35
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/backlogs.rs:391:42: 391:42
    let mut _3: bool;                    // in scope 0 at cita-executor/src/backlogs.rs:395:12: 395:41
    let mut _4: u64;                     // in scope 0 at cita-executor/src/backlogs.rs:395:12: 395:37
    let mut _5: &backlogs::Backlogs;     // in scope 0 at cita-executor/src/backlogs.rs:395:12: 395:37
    let _6: u64;                         // in scope 0 at cita-executor/src/backlogs.rs:396:17: 396:29
    let mut _7: u64;                     // in scope 0 at cita-executor/src/backlogs.rs:396:44: 396:73
    let mut _8: u64;                     // in scope 0 at cita-executor/src/backlogs.rs:396:44: 396:69
    let mut _9: &backlogs::Backlogs;     // in scope 0 at cita-executor/src/backlogs.rs:396:44: 396:69
    let mut _10: (u64, bool);            // in scope 0 at cita-executor/src/backlogs.rs:396:44: 396:73
    let mut _11: std::collections::BTreeMap<u64, libproto::ExecutedResult>; // in scope 0 at cita-executor/src/backlogs.rs:397:30: 397:69
    let mut _12: &mut std::collections::BTreeMap<u64, libproto::ExecutedResult>; // in scope 0 at cita-executor/src/backlogs.rs:397:30: 397:69
    let _13: &u64;                       // in scope 0 at cita-executor/src/backlogs.rs:397:55: 397:68
    scope 1 {
        debug split_height => _6;        // in scope 1 at cita-executor/src/backlogs.rs:396:17: 396:29
    }

    bb0: {
        _5 = &(*_1);                     // scope 0 at cita-executor/src/backlogs.rs:395:12: 395:37
        _4 = Backlogs::get_current_height(move _5) -> bb1; // scope 0 at cita-executor/src/backlogs.rs:395:12: 395:37
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:395:17: 395:35
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs) -> u64 {Backlogs::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Gt(move _4, const 2_u64);   // scope 0 at cita-executor/src/backlogs.rs:395:12: 395:41
        switchInt(move _3) -> [0: bb9, otherwise: bb2]; // scope 0 at cita-executor/src/backlogs.rs:395:12: 395:41
    }

    bb2: {
        _9 = &(*_1);                     // scope 0 at cita-executor/src/backlogs.rs:396:44: 396:69
        _8 = Backlogs::get_current_height(move _9) -> bb3; // scope 0 at cita-executor/src/backlogs.rs:396:44: 396:69
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:396:49: 396:67
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs) -> u64 {Backlogs::get_current_height}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = CheckedSub(_8, const 2_u64); // scope 0 at cita-executor/src/backlogs.rs:396:44: 396:73
        assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _8, const 2_u64) -> bb4; // scope 0 at cita-executor/src/backlogs.rs:396:44: 396:73
    }

    bb4: {
        _7 = move (_10.0: u64);          // scope 0 at cita-executor/src/backlogs.rs:396:44: 396:73
        _6 = std::cmp::min::<u64>(_2, move _7) -> bb5; // scope 0 at cita-executor/src/backlogs.rs:396:32: 396:74
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:396:32: 396:35
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {std::cmp::min::<u64>}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &mut ((*_1).3: std::collections::BTreeMap<u64, libproto::ExecutedResult>); // scope 1 at cita-executor/src/backlogs.rs:397:30: 397:69
        _13 = &_6;                       // scope 1 at cita-executor/src/backlogs.rs:397:55: 397:68
        _11 = BTreeMap::<u64, libproto::ExecutedResult>::split_off::<u64>(move _12, _13) -> bb6; // scope 1 at cita-executor/src/backlogs.rs:397:30: 397:69
                                         // mir::Constant
                                         // + span: cita-executor/src/backlogs.rs:397:45: 397:54
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut BTreeMap<u64, libproto::ExecutedResult>, &'b u64) -> BTreeMap<u64, libproto::ExecutedResult> {BTreeMap::<u64, libproto::ExecutedResult>::split_off::<u64>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(((*_1).3: std::collections::BTreeMap<u64, libproto::ExecutedResult>)) -> [return: bb7, unwind: bb8]; // scope 1 at cita-executor/src/backlogs.rs:397:13: 397:27
    }

    bb7: {
        ((*_1).3: std::collections::BTreeMap<u64, libproto::ExecutedResult>) = move _11; // scope 1 at cita-executor/src/backlogs.rs:397:13: 397:27
        goto -> bb9;                     // scope 0 at cita-executor/src/backlogs.rs:395:9: 398:10
    }

    bb8 (cleanup): {
        ((*_1).3: std::collections::BTreeMap<u64, libproto::ExecutedResult>) = move _11; // scope 1 at cita-executor/src/backlogs.rs:397:13: 397:27
        resume;                          // scope 0 at cita-executor/src/backlogs.rs:391:5: 399:6
    }

    bb9: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:399:6: 399:6
    }
}

fn wrap_height(_1: usize) -> u64 {
    debug height => _1;                  // in scope 0 at cita-executor/src/backlogs.rs:404:20: 404:26
    let mut _0: u64;                     // return place in scope 0 at cita-executor/src/backlogs.rs:404:38: 404:41

    bb0: {
        switchInt(_1) -> [18446744073709551615: bb2, otherwise: bb1]; // scope 0 at cita-executor/src/backlogs.rs:405:5: 405:17
    }

    bb1: {
        _0 = _1 as u64 (IntToInt);       // scope 0 at cita-executor/src/backlogs.rs:407:14: 407:27
        goto -> bb3;                     // scope 0 at cita-executor/src/backlogs.rs:407:26: 407:27
    }

    bb2: {
        _0 = const 0_u64;                // scope 0 at cita-executor/src/backlogs.rs:406:30: 406:31
        goto -> bb3;                     // scope 0 at cita-executor/src/backlogs.rs:406:30: 406:31
    }

    bb3: {
        return;                          // scope 0 at cita-executor/src/backlogs.rs:409:2: 409:2
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::new(_1: u64, _2: H256, _3: crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>, _4: crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, _5: crossbeam_channel::Sender<OpenBlock>, _6: crossbeam_channel::Receiver<ClosedBlock>, _7: crossbeam_channel::Sender<core::libexecutor::command::Command>, _8: crossbeam_channel::Receiver<CommandResp>) -> Postman {
    debug current_height => _1;          // in scope 0 at cita-executor/src/postman.rs:59:9: 59:23
    debug current_hash => _2;            // in scope 0 at cita-executor/src/postman.rs:60:9: 60:21
    debug mq_req_receiver => _3;         // in scope 0 at cita-executor/src/postman.rs:61:9: 61:24
    debug mq_resp_sender => _4;          // in scope 0 at cita-executor/src/postman.rs:62:9: 62:23
    debug fsm_req_sender => _5;          // in scope 0 at cita-executor/src/postman.rs:63:9: 63:23
    debug fsm_resp_receiver => _6;       // in scope 0 at cita-executor/src/postman.rs:64:9: 64:26
    debug command_req_sender => _7;      // in scope 0 at cita-executor/src/postman.rs:65:9: 65:27
    debug command_resp_receiver => _8;   // in scope 0 at cita-executor/src/postman.rs:66:9: 66:30
    let mut _0: postman::Postman;        // return place in scope 0 at cita-executor/src/postman.rs:67:10: 67:14
    let mut _9: backlogs::Backlogs;      // in scope 0 at cita-executor/src/postman.rs:69:23: 69:66
    let mut _10: std::sync::RwLock<core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>; // in scope 0 at cita-executor/src/postman.rs:70:31: 70:69
    let mut _11: core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:70:43: 70:68
    let mut _12: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/postman.rs:71:13: 71:28
    let mut _13: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/postman.rs:72:13: 72:27
    let mut _14: crossbeam_channel::Sender<types::block::OpenBlock>; // in scope 0 at cita-executor/src/postman.rs:73:13: 73:27
    let mut _15: crossbeam_channel::Receiver<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/postman.rs:74:13: 74:30
    let mut _16: crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:75:13: 75:31
    let mut _17: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:76:13: 76:34

    bb0: {
        _9 = Backlogs::new(_1, _2) -> [return: bb1, unwind: bb5]; // scope 0 at cita-executor/src/postman.rs:69:23: 69:66
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:69:23: 69:36
                                         // + literal: Const { ty: fn(u64, H256) -> Backlogs {Backlogs::new}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = LRUCache::<u64, H160>::new(const 10000000_u64) -> [return: bb2, unwind: bb4]; // scope 0 at cita-executor/src/postman.rs:70:43: 70:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:70:43: 70:56
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u64) -> LRUCache<u64, H160> {LRUCache::<u64, H160>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = RwLock::<LRUCache<u64, H160>>::new(move _11) -> [return: bb3, unwind: bb4]; // scope 0 at cita-executor/src/postman.rs:70:31: 70:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:70:31: 70:42
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(LRUCache<u64, H160>) -> RwLock<LRUCache<u64, H160>> {RwLock::<LRUCache<u64, H160>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = move _3;                   // scope 0 at cita-executor/src/postman.rs:71:13: 71:28
        _13 = move _4;                   // scope 0 at cita-executor/src/postman.rs:72:13: 72:27
        _14 = move _5;                   // scope 0 at cita-executor/src/postman.rs:73:13: 73:27
        _15 = move _6;                   // scope 0 at cita-executor/src/postman.rs:74:13: 74:30
        _16 = move _7;                   // scope 0 at cita-executor/src/postman.rs:75:13: 75:31
        _17 = move _8;                   // scope 0 at cita-executor/src/postman.rs:76:13: 76:34
        _0 = Postman { backlogs: move _9, black_list_cache: move _10, mq_req_receiver: move _12, mq_resp_sender: move _13, fsm_req_sender: move _14, fsm_resp_receiver: move _15, command_req_sender: move _16, command_resp_receiver: move _17 }; // scope 0 at cita-executor/src/postman.rs:68:9: 77:10
        return;                          // scope 0 at cita-executor/src/postman.rs:78:6: 78:6
    }

    bb4 (cleanup): {
        drop(_9) -> bb5;                 // scope 0 at cita-executor/src/postman.rs:77:9: 77:10
    }

    bb5 (cleanup): {
        drop(_8) -> bb6;                 // scope 0 at cita-executor/src/postman.rs:78:5: 78:6
    }

    bb6 (cleanup): {
        drop(_7) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:78:5: 78:6
    }

    bb7 (cleanup): {
        drop(_6) -> bb8;                 // scope 0 at cita-executor/src/postman.rs:78:5: 78:6
    }

    bb8 (cleanup): {
        drop(_5) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:78:5: 78:6
    }

    bb9 (cleanup): {
        drop(_4) -> bb10;                // scope 0 at cita-executor/src/postman.rs:78:5: 78:6
    }

    bb10 (cleanup): {
        drop(_3) -> bb11;                // scope 0 at cita-executor/src/postman.rs:78:5: 78:6
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:58:5: 78:6
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::do_loop(_1: &mut Postman) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:80:20: 80:29
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:80:31: 80:31
    let _2: ();                          // in scope 0 at cita-executor/src/postman.rs:82:9: 82:35
    let mut _3: (std::option::Option<(std::string::String, std::vec::Vec<u8>)>, std::option::Option<core::libexecutor::block::ClosedBlock>); // in scope 0 at cita-executor/src/postman.rs:86:19: 86:30
    let mut _4: &postman::Postman;       // in scope 0 at cita-executor/src/postman.rs:86:19: 86:30
    let mut _5: isize;                   // in scope 0 at cita-executor/src/postman.rs:87:24: 87:28
    let mut _6: isize;                   // in scope 0 at cita-executor/src/postman.rs:87:42: 87:49
    let mut _7: isize;                   // in scope 0 at cita-executor/src/postman.rs:87:18: 87:22
    let _8: std::string::String;         // in scope 0 at cita-executor/src/postman.rs:88:24: 88:27
    let _9: std::vec::Vec<u8>;           // in scope 0 at cita-executor/src/postman.rs:88:29: 88:36
    let mut _11: &str;                   // in scope 0 at cita-executor/src/postman.rs:89:57: 89:69
    let _12: &str;                       // in scope 0 at cita-executor/src/postman.rs:89:57: 89:69
    let mut _13: &std::string::String;   // in scope 0 at cita-executor/src/postman.rs:89:57: 89:69
    let mut _14: std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:89:71: 89:78
    let mut _15: isize;                  // in scope 0 at cita-executor/src/postman.rs:90:28: 90:44
    let _17: ();                         // in scope 0 at cita-executor/src/postman.rs:91:25: 91:48
    let mut _18: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:91:25: 91:48
    let _19: core::libexecutor::block::ClosedBlock; // in scope 0 at cita-executor/src/postman.rs:95:29: 95:41
    let _20: ();                         // in scope 0 at cita-executor/src/postman.rs:96:21: 96:59
    let _21: ();                         // in scope 0 at cita-executor/src/postman.rs:97:21: 97:35
    let _22: ();                         // in scope 0 at cita-executor/src/postman.rs:98:21: 98:46
    let mut _23: bool;                   // in scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    let mut _24: bool;                   // in scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    let mut _25: bool;                   // in scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    let mut _26: bool;                   // in scope 0 at cita-executor/src/postman.rs:94:17: 94:18
    let mut _27: isize;                  // in scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    let mut _28: isize;                  // in scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    let mut _29: isize;                  // in scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    scope 1 {
        debug key => _8;                 // in scope 1 at cita-executor/src/postman.rs:88:24: 88:27
        debug msg_vec => _9;             // in scope 1 at cita-executor/src/postman.rs:88:29: 88:36
        let _10: std::result::Result<(), types::block_number::BlockTag>; // in scope 1 at cita-executor/src/postman.rs:89:25: 89:31
        scope 2 {
            debug result => _10;         // in scope 2 at cita-executor/src/postman.rs:89:25: 89:31
            scope 3 {
                debug rollback_id => _16; // in scope 3 at cita-executor/src/postman.rs:90:32: 90:43
                let _16: types::block_number::BlockTag; // in scope 3 at cita-executor/src/postman.rs:90:32: 90:43
            }
        }
    }
    scope 4 {
        debug closed_block => _19;       // in scope 4 at cita-executor/src/postman.rs:95:29: 95:41
    }

    bb0: {
        _24 = const false;               // scope 0 at cita-executor/src/postman.rs:82:9: 82:35
        _26 = const false;               // scope 0 at cita-executor/src/postman.rs:82:9: 82:35
        _25 = const false;               // scope 0 at cita-executor/src/postman.rs:82:9: 82:35
        _23 = const false;               // scope 0 at cita-executor/src/postman.rs:82:9: 82:35
        _2 = Postman::bootstrap_broadcast(_1) -> bb1; // scope 0 at cita-executor/src/postman.rs:82:9: 82:35
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:82:14: 82:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Postman) {Postman::bootstrap_broadcast}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &(*_1);                     // scope 0 at cita-executor/src/postman.rs:86:19: 86:30
        _23 = const true;                // scope 0 at cita-executor/src/postman.rs:86:19: 86:30
        _24 = const true;                // scope 0 at cita-executor/src/postman.rs:86:19: 86:30
        _25 = const true;                // scope 0 at cita-executor/src/postman.rs:86:19: 86:30
        _3 = Postman::recv(move _4) -> bb2; // scope 0 at cita-executor/src/postman.rs:86:19: 86:30
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:86:24: 86:28
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) -> (std::option::Option<(std::string::String, Vec<u8>)>, std::option::Option<ClosedBlock>) {Postman::recv}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = discriminant((_3.0: std::option::Option<(std::string::String, std::vec::Vec<u8>)>)); // scope 0 at cita-executor/src/postman.rs:86:19: 86:30
        switchInt(move _7) -> [0: bb3, 1: bb6, otherwise: bb5]; // scope 0 at cita-executor/src/postman.rs:86:13: 86:30
    }

    bb3: {
        _5 = discriminant((_3.1: std::option::Option<core::libexecutor::block::ClosedBlock>)); // scope 0 at cita-executor/src/postman.rs:86:19: 86:30
        switchInt(move _5) -> [0: bb31, 1: bb4, otherwise: bb5]; // scope 0 at cita-executor/src/postman.rs:86:13: 86:30
    }

    bb4: {
        _25 = const false;               // scope 0 at cita-executor/src/postman.rs:95:29: 95:41
        _19 = move (((_3.1: std::option::Option<core::libexecutor::block::ClosedBlock>) as Some).0: core::libexecutor::block::ClosedBlock); // scope 0 at cita-executor/src/postman.rs:95:29: 95:41
        _20 = Postman::handle_fsm_response(_1, move _19) -> bb13; // scope 4 at cita-executor/src/postman.rs:96:21: 96:59
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:96:26: 96:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut Postman, ClosedBlock) {Postman::handle_fsm_response}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 0 at cita-executor/src/postman.rs:86:19: 86:30
    }

    bb6: {
        _6 = discriminant((_3.1: std::option::Option<core::libexecutor::block::ClosedBlock>)); // scope 0 at cita-executor/src/postman.rs:86:19: 86:30
        switchInt(move _6) -> [0: bb7, 1: bb31, otherwise: bb5]; // scope 0 at cita-executor/src/postman.rs:86:13: 86:30
    }

    bb7: {
        _24 = const false;               // scope 0 at cita-executor/src/postman.rs:88:24: 88:27
        _8 = move ((((_3.0: std::option::Option<(std::string::String, std::vec::Vec<u8>)>) as Some).0: (std::string::String, std::vec::Vec<u8>)).0: std::string::String); // scope 0 at cita-executor/src/postman.rs:88:24: 88:27
        _23 = const false;               // scope 0 at cita-executor/src/postman.rs:88:29: 88:36
        _26 = const true;                // scope 0 at cita-executor/src/postman.rs:88:29: 88:36
        _9 = move ((((_3.0: std::option::Option<(std::string::String, std::vec::Vec<u8>)>) as Some).0: (std::string::String, std::vec::Vec<u8>)).1: std::vec::Vec<u8>); // scope 0 at cita-executor/src/postman.rs:88:29: 88:36
        _13 = &_8;                       // scope 1 at cita-executor/src/postman.rs:89:57: 89:69
        _12 = std::string::String::as_str(move _13) -> [return: bb8, unwind: bb33]; // scope 1 at cita-executor/src/postman.rs:89:57: 89:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:89:61: 89:67
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a str {std::string::String::as_str}, val: Value(<ZST>) }
    }

    bb8: {
        _11 = _12;                       // scope 1 at cita-executor/src/postman.rs:89:57: 89:69
        _26 = const false;               // scope 1 at cita-executor/src/postman.rs:89:71: 89:78
        _14 = move _9;                   // scope 1 at cita-executor/src/postman.rs:89:71: 89:78
        _10 = Postman::handle_mq_message(_1, move _11, move _14) -> [return: bb9, unwind: bb33]; // scope 1 at cita-executor/src/postman.rs:89:34: 89:79
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:89:39: 89:56
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Postman, &'b str, Vec<u8>) -> Result<(), types::block_number::BlockTag> {Postman::handle_mq_message}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = discriminant(_10);         // scope 3 at cita-executor/src/postman.rs:90:28: 90:44
        switchInt(move _15) -> [1: bb10, otherwise: bb12]; // scope 3 at cita-executor/src/postman.rs:90:28: 90:44
    }

    bb10: {
        _16 = ((_10 as Err).0: types::block_number::BlockTag); // scope 3 at cita-executor/src/postman.rs:90:32: 90:43
        _18 = &(*_1);                    // scope 3 at cita-executor/src/postman.rs:91:25: 91:48
        _17 = Postman::close(move _18, _16) -> [return: bb11, unwind: bb33]; // scope 3 at cita-executor/src/postman.rs:91:25: 91:48
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:91:30: 91:35
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, types::block_number::BlockTag) {Postman::close}, val: Value(<ZST>) }
    }

    bb11: {
        _26 = const false;               // scope 0 at cita-executor/src/postman.rs:94:17: 94:18
        drop(_8) -> bb31;                // scope 0 at cita-executor/src/postman.rs:94:17: 94:18
    }

    bb12: {
        _26 = const false;               // scope 0 at cita-executor/src/postman.rs:94:17: 94:18
        drop(_8) -> bb17;                // scope 0 at cita-executor/src/postman.rs:94:17: 94:18
    }

    bb13: {
        _21 = Postman::grow_up(_1) -> bb14; // scope 4 at cita-executor/src/postman.rs:97:21: 97:35
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:97:26: 97:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Postman) {Postman::grow_up}, val: Value(<ZST>) }
    }

    bb14: {
        _22 = Postman::execute_next_block(_1) -> bb17; // scope 4 at cita-executor/src/postman.rs:98:21: 98:46
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:98:26: 98:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut Postman) {Postman::execute_next_block}, val: Value(<ZST>) }
    }

    bb15 (cleanup): {
        drop(_8) -> bb16;                // scope 0 at cita-executor/src/postman.rs:94:17: 94:18
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:80:5: 102:6
    }

    bb17: {
        _23 = const false;               // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
        _24 = const false;               // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
        _25 = const false;               // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
        goto -> bb1;                     // scope 0 at cita-executor/src/postman.rs:85:9: 101:10
    }

    bb18 (cleanup): {
        _27 = discriminant((_3.1: std::option::Option<core::libexecutor::block::ClosedBlock>)); // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
        switchInt(move _27) -> [1: bb19, otherwise: bb16]; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb19 (cleanup): {
        switchInt(_25) -> [0: bb16, otherwise: bb20]; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb20 (cleanup): {
        drop((((_3.1: std::option::Option<core::libexecutor::block::ClosedBlock>) as Some).0: core::libexecutor::block::ClosedBlock)) -> bb16; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb21: {
        _23 = const false;               // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
        _24 = const false;               // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
        _25 = const false;               // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
        return;                          // scope 0 at cita-executor/src/postman.rs:102:6: 102:6
    }

    bb22: {
        switchInt(_25) -> [0: bb21, otherwise: bb23]; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb23: {
        drop((((_3.1: std::option::Option<core::libexecutor::block::ClosedBlock>) as Some).0: core::libexecutor::block::ClosedBlock)) -> bb21; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb24: {
        _28 = discriminant((_3.1: std::option::Option<core::libexecutor::block::ClosedBlock>)); // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
        switchInt(move _28) -> [1: bb22, otherwise: bb21]; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb25: {
        switchInt(_24) -> [0: bb28, otherwise: bb30]; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb26 (cleanup): {
        switchInt(_23) -> [0: bb18, otherwise: bb27]; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb27 (cleanup): {
        drop(((((_3.0: std::option::Option<(std::string::String, std::vec::Vec<u8>)>) as Some).0: (std::string::String, std::vec::Vec<u8>)).1: std::vec::Vec<u8>)) -> bb18; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb28: {
        switchInt(_23) -> [0: bb24, otherwise: bb29]; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb29: {
        drop(((((_3.0: std::option::Option<(std::string::String, std::vec::Vec<u8>)>) as Some).0: (std::string::String, std::vec::Vec<u8>)).1: std::vec::Vec<u8>)) -> [return: bb24, unwind: bb18]; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb30: {
        drop(((((_3.0: std::option::Option<(std::string::String, std::vec::Vec<u8>)>) as Some).0: (std::string::String, std::vec::Vec<u8>)).0: std::string::String)) -> [return: bb28, unwind: bb26]; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb31: {
        _29 = discriminant((_3.0: std::option::Option<(std::string::String, std::vec::Vec<u8>)>)); // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
        switchInt(move _29) -> [1: bb25, otherwise: bb24]; // scope 0 at cita-executor/src/postman.rs:101:9: 101:10
    }

    bb32 (cleanup): {
        drop(_9) -> bb15;                // scope 0 at cita-executor/src/postman.rs:94:17: 94:18
    }

    bb33 (cleanup): {
        switchInt(_26) -> [0: bb15, otherwise: bb32]; // scope 0 at cita-executor/src/postman.rs:94:17: 94:18
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::bootstrap_broadcast(_1: &mut Postman) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:107:28: 107:37
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:107:39: 107:39
    let _2: u64;                         // in scope 0 at cita-executor/src/postman.rs:109:13: 109:27
    let mut _3: &postman::Postman;       // in scope 0 at cita-executor/src/postman.rs:109:30: 109:55
    let _4: ();                          // in scope 0 at cita-executor/src/postman.rs:110:9: 110:50
    let mut _5: u64;                     // in scope 0 at cita-executor/src/postman.rs:110:35: 110:49
    let mut _6: u64;                     // in scope 0 at cita-executor/src/postman.rs:111:12: 111:26
    let _7: ();                          // in scope 0 at cita-executor/src/postman.rs:112:13: 112:58
    let mut _8: u64;                     // in scope 0 at cita-executor/src/postman.rs:112:39: 112:57
    let mut _9: u64;                     // in scope 0 at cita-executor/src/postman.rs:112:39: 112:53
    let mut _10: (u64, bool);            // in scope 0 at cita-executor/src/postman.rs:112:39: 112:57
    let mut _12: std::option::Option<&libproto::ExecutedResult>; // in scope 0 at cita-executor/src/postman.rs:116:41: 118:50
    let mut _13: &backlogs::Backlogs;    // in scope 0 at cita-executor/src/postman.rs:116:41: 118:50
    let mut _14: u64;                    // in scope 0 at cita-executor/src/postman.rs:118:35: 118:49
    let _15: &str;                       // in scope 0 at cita-executor/src/postman.rs:119:21: 119:63
    let mut _17: libproto::ExecutedResult; // in scope 0 at cita-executor/src/postman.rs:120:28: 120:61
    let mut _18: &libproto::ExecutedResult; // in scope 0 at cita-executor/src/postman.rs:120:28: 120:61
    let _19: ();                         // in scope 0 at cita-executor/src/postman.rs:121:9: 124:10
    let mut _20: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:121:9: 124:10
    let mut _21: std::string::String;    // in scope 0 at cita-executor/src/postman.rs:122:13: 122:60
    let mut _22: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _23: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _24: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _25: std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:123:13: 123:36
    let mut _26: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-executor/src/postman.rs:123:13: 123:27
    let mut _27: libproto::Message;      // in scope 0 at cita-executor/src/postman.rs:123:13: 123:16
    let _28: ();                         // in scope 0 at cita-executor/src/postman.rs:126:9: 126:35
    let mut _29: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:126:9: 126:35
    let mut _30: bool;                   // in scope 0 at cita-executor/src/postman.rs:124:9: 124:10
    let mut _31: bool;                   // in scope 0 at cita-executor/src/postman.rs:127:5: 127:6
    scope 1 {
        debug current_height => _2;      // in scope 1 at cita-executor/src/postman.rs:109:13: 109:27
        let _11: &libproto::ExecutedResult; // in scope 1 at cita-executor/src/postman.rs:116:13: 116:38
        scope 2 {
            debug bootstrap_executed_result => _11; // in scope 2 at cita-executor/src/postman.rs:116:13: 116:38
            let _16: libproto::Message;  // in scope 2 at cita-executor/src/postman.rs:120:13: 120:16
            scope 3 {
                debug msg => _16;        // in scope 3 at cita-executor/src/postman.rs:120:13: 120:16
            }
        }
    }

    bb0: {
        _31 = const false;               // scope 0 at cita-executor/src/postman.rs:109:13: 109:27
        _30 = const false;               // scope 0 at cita-executor/src/postman.rs:109:13: 109:27
        _3 = &(*_1);                     // scope 0 at cita-executor/src/postman.rs:109:30: 109:55
        _2 = Postman::get_current_height(move _3) -> bb1; // scope 0 at cita-executor/src/postman.rs:109:30: 109:55
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:109:35: 109:53
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) -> u64 {Postman::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _2;                         // scope 1 at cita-executor/src/postman.rs:110:35: 110:49
        _4 = Postman::load_executed_result(_1, move _5) -> bb2; // scope 1 at cita-executor/src/postman.rs:110:9: 110:50
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:110:14: 110:34
                                         // + literal: Const { ty: for<'a> fn(&'a mut Postman, u64) {Postman::load_executed_result}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _2;                         // scope 1 at cita-executor/src/postman.rs:111:12: 111:26
        switchInt(move _6) -> [0: bb5, otherwise: bb3]; // scope 1 at cita-executor/src/postman.rs:111:12: 111:31
    }

    bb3: {
        _9 = _2;                         // scope 1 at cita-executor/src/postman.rs:112:39: 112:53
        _10 = CheckedSub(_9, const 1_u64); // scope 1 at cita-executor/src/postman.rs:112:39: 112:57
        assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _9, const 1_u64) -> bb4; // scope 1 at cita-executor/src/postman.rs:112:39: 112:57
    }

    bb4: {
        _8 = move (_10.0: u64);          // scope 1 at cita-executor/src/postman.rs:112:39: 112:57
        _7 = Postman::load_executed_result(_1, move _8) -> bb5; // scope 1 at cita-executor/src/postman.rs:112:13: 112:58
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:112:18: 112:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut Postman, u64) {Postman::load_executed_result}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &((*_1).0: backlogs::Backlogs); // scope 1 at cita-executor/src/postman.rs:116:41: 118:50
        _14 = _2;                        // scope 1 at cita-executor/src/postman.rs:118:35: 118:49
        _12 = Backlogs::get_completed_result(move _13, move _14) -> bb6; // scope 1 at cita-executor/src/postman.rs:116:41: 118:50
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:118:14: 118:34
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs, u64) -> std::option::Option<&'a libproto::ExecutedResult> {Backlogs::get_completed_result}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = const "loaded from the previous step above; qed"; // scope 1 at cita-executor/src/postman.rs:119:21: 119:63
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:119:21: 119:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = std::option::Option::<&libproto::ExecutedResult>::expect(move _12, _15) -> bb7; // scope 1 at cita-executor/src/postman.rs:116:41: 119:64
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:119:14: 119:20
                                         // + literal: Const { ty: for<'a> fn(std::option::Option<&libproto::ExecutedResult>, &'a str) -> &libproto::ExecutedResult {std::option::Option::<&libproto::ExecutedResult>::expect}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = _11;                       // scope 2 at cita-executor/src/postman.rs:120:28: 120:61
        _17 = <libproto::ExecutedResult as Clone>::clone(move _18) -> bb8; // scope 2 at cita-executor/src/postman.rs:120:28: 120:61
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:120:54: 120:59
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::ExecutedResult) -> libproto::ExecutedResult {<libproto::ExecutedResult as Clone>::clone}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = <libproto::ExecutedResult as Into<libproto::Message>>::into(move _17) -> bb9; // scope 2 at cita-executor/src/postman.rs:120:28: 120:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:120:62: 120:66
                                         // + literal: Const { ty: fn(libproto::ExecutedResult) -> libproto::Message {<libproto::ExecutedResult as Into<libproto::Message>>::into}, val: Value(<ZST>) }
    }

    bb9: {
        _31 = const true;                // scope 2 at cita-executor/src/postman.rs:120:67: 120:68
        _20 = &(*_1);                    // scope 3 at cita-executor/src/postman.rs:121:9: 124:10
        _23 = const libproto::router::SubModules::Executor; // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x05)) }
        _24 = const libproto::router::MsgType::ExecutedResult; // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x10)) }
        _22 = RoutingKey(move _23, move _24); // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _21 = <RoutingKey as Into<std::string::String>>::into(move _22) -> [return: bb10, unwind: bb19]; // scope 3 at cita-executor/src/postman.rs:122:13: 122:60
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:122:54: 122:58
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb10: {
        _30 = const true;                // scope 3 at cita-executor/src/postman.rs:122:59: 122:60
        _31 = const false;               // scope 3 at cita-executor/src/postman.rs:123:13: 123:16
        _27 = move _16;                  // scope 3 at cita-executor/src/postman.rs:123:13: 123:16
        _26 = <libproto::Message as libproto::TryInto<Vec<u8>>>::try_into(move _27) -> [return: bb11, unwind: bb17]; // scope 3 at cita-executor/src/postman.rs:123:13: 123:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:123:17: 123:25
                                         // + literal: Const { ty: fn(libproto::Message) -> Result<Vec<u8>, <libproto::Message as libproto::TryInto<Vec<u8>>>::Error> {<libproto::Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb11: {
        _25 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _26) -> [return: bb12, unwind: bb17]; // scope 3 at cita-executor/src/postman.rs:123:13: 123:36
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:123:28: 123:34
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb12: {
        _30 = const false;               // scope 3 at cita-executor/src/postman.rs:121:9: 124:10
        _19 = Postman::response_mq(move _20, move _21, move _25) -> [return: bb13, unwind: bb17]; // scope 3 at cita-executor/src/postman.rs:121:9: 124:10
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:121:14: 121:25
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, std::string::String, Vec<u8>) {Postman::response_mq}, val: Value(<ZST>) }
    }

    bb13: {
        _30 = const false;               // scope 3 at cita-executor/src/postman.rs:124:9: 124:10
        _29 = &(*_1);                    // scope 3 at cita-executor/src/postman.rs:126:9: 126:35
        _28 = Postman::pub_init_black_list(move _29) -> [return: bb14, unwind: bb19]; // scope 3 at cita-executor/src/postman.rs:126:9: 126:35
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:126:14: 126:33
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) {Postman::pub_init_black_list}, val: Value(<ZST>) }
    }

    bb14: {
        _31 = const false;               // scope 2 at cita-executor/src/postman.rs:127:5: 127:6
        return;                          // scope 0 at cita-executor/src/postman.rs:127:6: 127:6
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:107:5: 127:6
    }

    bb16 (cleanup): {
        drop(_21) -> bb19;               // scope 3 at cita-executor/src/postman.rs:124:9: 124:10
    }

    bb17 (cleanup): {
        switchInt(_30) -> [0: bb19, otherwise: bb16]; // scope 3 at cita-executor/src/postman.rs:124:9: 124:10
    }

    bb18 (cleanup): {
        drop(_16) -> bb15;               // scope 2 at cita-executor/src/postman.rs:127:5: 127:6
    }

    bb19 (cleanup): {
        switchInt(_31) -> [0: bb15, otherwise: bb18]; // scope 2 at cita-executor/src/postman.rs:127:5: 127:6
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::close(_1: &Postman, _2: types::block_number::BlockTag) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:130:14: 130:19
    debug rollback_id => _2;             // in scope 0 at cita-executor/src/postman.rs:130:21: 130:32
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:130:44: 130:44
    let mut _3: bool;                    // in scope 0 at cita-executor/src/postman.rs:131:12: 131:69
    let mut _4: &types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:131:12: 131:23
    let _5: ();                          // in scope 0 at cita-executor/src/postman.rs:132:13: 136:14
    let _6: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:133:17: 133:41
    let _7: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:134:17: 134:44
    let mut _8: &types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:131:27: 131:69

    bb0: {
        _4 = &_2;                        // scope 0 at cita-executor/src/postman.rs:131:12: 131:23
        _8 = const _;                    // scope 0 at cita-executor/src/postman.rs:131:27: 131:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:131:27: 131:69
                                         // + literal: Const { ty: &types::block_number::BlockTag, val: Unevaluated(Postman::close, [], Some(promoted[0])) }
        _3 = <types::block_number::BlockTag as PartialEq>::ne(move _4, _8) -> bb1; // scope 0 at cita-executor/src/postman.rs:131:12: 131:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:131:12: 131:69
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a types::block_number::BlockTag, &'b types::block_number::BlockTag) -> bool {<types::block_number::BlockTag as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at cita-executor/src/postman.rs:131:12: 131:69
    }

    bb2: {
        _6 = &((*_1).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 0 at cita-executor/src/postman.rs:133:17: 133:41
        _7 = &((*_1).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 0 at cita-executor/src/postman.rs:134:17: 134:44
        _5 = core::libexecutor::command::exit(_6, _7, _2) -> bb3; // scope 0 at cita-executor/src/postman.rs:132:13: 136:14
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:132:13: 132:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, types::block_number::BlockTag) {core::libexecutor::command::exit}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-executor/src/postman.rs:138:6: 138:6
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::close: &types::block_number::BlockTag = {
    let mut _0: &types::block_number::BlockTag; // return place in scope 0 at cita-executor/src/postman.rs:131:27: 131:69
    let mut _1: types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:131:27: 131:69
    let mut _2: u64;                     // in scope 0 at cita-executor/src/postman.rs:131:44: 131:68

    bb0: {
        _2 = const _ as u64 (IntToInt);  // scope 0 at cita-executor/src/postman.rs:131:44: 131:68
        _1 = types::block_number::BlockTag::Height(move _2); // scope 0 at cita-executor/src/postman.rs:131:27: 131:69
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:131:27: 131:69
        return;                          // scope 0 at cita-executor/src/postman.rs:131:27: 131:69
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::recv(_1: &Postman) -> (std::option::Option<(std::string::String, Vec<u8>)>, std::option::Option<ClosedBlock>) {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:147:13: 147:18
    let mut _0: (std::option::Option<(std::string::String, std::vec::Vec<u8>)>, std::option::Option<core::libexecutor::block::ClosedBlock>); // return place in scope 0 at cita-executor/src/postman.rs:147:23: 147:71
    let _2: &dyn crossbeam_channel::internal::SelectHandle; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:764:13: 764:20
    let _3: &crossbeam_channel::Receiver<()>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:764:56: 764:78
    let _4: crossbeam_channel::Receiver<()>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:764:57: 764:78
    let mut _6: (&dyn crossbeam_channel::internal::SelectHandle, usize, *const u8); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:767:25: 767:53
    let mut _7: *const u8;               // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:767:38: 767:52
    let _10: &crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:933:21: 933:31
    let mut _11: &dyn crossbeam_channel::internal::SelectHandle; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:29: 935:33
    let mut _12: *const u8;              // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:39: 935:86
    let mut _13: *const crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:39: 935:73
    let _14: usize;                      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:775:18: 775:24
    let _17: &crossbeam_channel::Receiver<core::libexecutor::block::ClosedBlock>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:933:21: 933:31
    let mut _18: &dyn crossbeam_channel::internal::SelectHandle; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:29: 935:33
    let mut _19: *const u8;              // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:39: 935:86
    let mut _20: *const crossbeam_channel::Receiver<core::libexecutor::block::ClosedBlock>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:39: 935:73
    let _21: usize;                      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:776:18: 776:24
    let mut _24: &mut [(&dyn crossbeam_channel::internal::SelectHandle, usize, *const u8)]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:829:50: 829:59
    let mut _25: &mut [(&dyn crossbeam_channel::internal::SelectHandle, usize, *const u8); 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:829:50: 829:59
    let mut _26: crossbeam_channel::SelectedOperation<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:833:44: 833:49
    let mut _27: usize;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:12: 988:25
    let mut _28: &crossbeam_channel::SelectedOperation<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:12: 988:25
    let mut _30: crossbeam_channel::SelectedOperation<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:24: 989:29
    let _31: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:990:13: 990:35
    let mut _32: [(&dyn crossbeam_channel::internal::SelectHandle, usize, *const u8); 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:990:30: 990:34
    let mut _34: isize;                  // in scope 0 at cita-executor/src/postman.rs:151:21: 151:31
    let mut _36: std::option::Option<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/postman.rs:151:36: 151:48
    let mut _37: std::option::Option<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/postman.rs:151:50: 151:54
    let mut _38: std::option::Option<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/postman.rs:152:32: 152:36
    let mut _39: std::option::Option<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/postman.rs:152:38: 152:42
    let mut _40: usize;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:12: 988:25
    let mut _41: &crossbeam_channel::SelectedOperation<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:12: 988:25
    let mut _43: crossbeam_channel::SelectedOperation<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:24: 989:29
    let _44: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:990:13: 990:35
    let mut _45: [(&dyn crossbeam_channel::internal::SelectHandle, usize, *const u8); 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:990:30: 990:34
    let mut _47: isize;                  // in scope 0 at cita-executor/src/postman.rs:157:21: 157:33
    let mut _49: std::option::Option<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/postman.rs:157:38: 157:42
    let mut _50: std::option::Option<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/postman.rs:157:44: 157:58
    let mut _51: std::option::Option<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/postman.rs:158:32: 158:36
    let mut _52: std::option::Option<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/postman.rs:158:38: 158:42
    let mut _53: !;                      // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:73:9: 73:54
    let mut _55: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:994:9: 994:10
    let mut _56: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:994:9: 994:10
    let mut _57: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:842:5: 842:6
    scope 1 {
        debug _handle => _2;             // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:764:13: 764:20
        scope 2 {
            debug _sel => _5;            // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:767:13: 767:21
            let _8: &crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:924:13: 924:19
            scope 4 {
                debug _r => _8;          // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:924:13: 924:19
                scope 5 {
                    debug _oper0 => _9;  // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:926:21: 926:25
                    let _15: &crossbeam_channel::Receiver<core::libexecutor::block::ClosedBlock>; // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:924:13: 924:19
                    scope 9 {
                        debug _r => _15; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:924:13: 924:19
                        scope 10 {
                            debug _oper1 => _16; // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:926:21: 926:25
                            let _22: crossbeam_channel::SelectedOperation<'_>; // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:828:13: 828:18
                            let _23: crossbeam_channel::SelectedOperation<'_>; // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:829:17: 829:22
                            scope 14 {
                                debug _oper => _22; // in scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:828:13: 828:18
                                let _29: std::result::Result<(std::string::String, std::vec::Vec<u8>), crossbeam_channel::RecvError>; // in scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:17: 989:21
                                let _42: std::result::Result<core::libexecutor::block::ClosedBlock, crossbeam_channel::RecvError>; // in scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:17: 989:21
                                let mut _54: &&str; // in scope 14 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:73:48: 73:53
                                scope 18 {
                                    debug _res => _29; // in scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:17: 989:21
                                    let _33: std::result::Result<(std::string::String, std::vec::Vec<u8>), crossbeam_channel::RecvError>; // in scope 18 at cita-executor/src/postman.rs:149:43: 149:49
                                    scope 19 {
                                        debug mq_req => _33; // in scope 19 at cita-executor/src/postman.rs:149:43: 149:49
                                        let _35: (std::string::String, std::vec::Vec<u8>); // in scope 19 at cita-executor/src/postman.rs:151:24: 151:30
                                        scope 20 {
                                            debug mq_req => _35; // in scope 20 at cita-executor/src/postman.rs:151:24: 151:30
                                        }
                                    }
                                }
                                scope 21 {
                                    debug _res => _42; // in scope 21 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:17: 989:21
                                    let _46: std::result::Result<core::libexecutor::block::ClosedBlock, crossbeam_channel::RecvError>; // in scope 21 at cita-executor/src/postman.rs:155:45: 155:53
                                    scope 22 {
                                        debug fsm_resp => _46; // in scope 22 at cita-executor/src/postman.rs:155:45: 155:53
                                        let _48: core::libexecutor::block::ClosedBlock; // in scope 22 at cita-executor/src/postman.rs:157:24: 157:32
                                        scope 23 {
                                            debug fsm_resp => _48; // in scope 23 at cita-executor/src/postman.rs:157:24: 157:32
                                        }
                                    }
                                }
                            }
                            scope 15 {
                                debug _oper => _23; // in scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:829:17: 829:22
                                scope 16 {
                                    scope 17 {
                                    }
                                }
                            }
                        }
                        scope 11 {
                            let _16: &crossbeam_channel::Receiver<core::libexecutor::block::ClosedBlock>; // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:926:21: 926:25
                            scope 12 {
                                scope 13 {
                                    debug _r => _15; // in scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:927:25: 927:27
                                }
                            }
                        }
                    }
                }
                scope 6 {
                    let _9: &crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:926:21: 926:25
                    scope 7 {
                        scope 8 {
                            debug _r => _8; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:927:25: 927:27
                        }
                    }
                }
            }
        }
        scope 3 {
            let mut _5: [(&dyn crossbeam_channel::internal::SelectHandle, usize, *const u8); 2]; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:767:13: 767:21
        }
    }

    bb0: {
        _55 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:764:13: 764:20
        _56 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:764:13: 764:20
        _57 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:764:13: 764:20
        _4 = never::<()>() -> bb1;       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:764:57: 764:78
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:764:57: 764:76
                                         // + literal: Const { ty: fn() -> crossbeam_channel::Receiver<()> {never::<()>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:764:56: 764:78
        _2 = _3 as &dyn crossbeam_channel::internal::SelectHandle (Pointer(Unsize)); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:764:56: 764:78
        _7 = const {0x0 as *const u8};   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:767:38: 767:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: *const u8, val: Value(Scalar(0x0000000000000000)) }
        _6 = (_2, const 0_usize, move _7); // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:767:25: 767:53
        _5 = [move _6; 2];               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:767:24: 767:60
        _8 = &((*_1).2: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:924:13: 924:19
        _10 = Postman::recv::unbind::<'_, crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>>(_8) -> [return: bb2, unwind: bb26]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:933:21: 933:31
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:933:21: 933:27
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) -> &crossbeam_channel::Receiver<(std::string::String, Vec<u8>)> {Postman::recv::unbind::<'_, crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _10;                        // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:933:21: 933:31
        _11 = _9 as &dyn crossbeam_channel::internal::SelectHandle (Pointer(Unsize)); // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:29: 935:33
        _13 = &raw const (*_9);          // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:39: 935:43
        _12 = _13 as *const u8 (PtrToPtr); // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:39: 935:86
        _14 = const 0_usize;             // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:775:18: 775:24
        _5[_14] = (move _11, const 0_usize, move _12); // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:17: 935:87
        _15 = &((*_1).5: crossbeam_channel::Receiver<core::libexecutor::block::ClosedBlock>); // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:924:13: 924:19
        _17 = Postman::recv::unbind::<'_, crossbeam_channel::Receiver<ClosedBlock>>(_15) -> [return: bb3, unwind: bb26]; // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:933:21: 933:31
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:933:21: 933:27
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a crossbeam_channel::Receiver<ClosedBlock>) -> &crossbeam_channel::Receiver<ClosedBlock> {Postman::recv::unbind::<'_, crossbeam_channel::Receiver<ClosedBlock>>}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = _17;                       // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:933:21: 933:31
        _18 = _16 as &dyn crossbeam_channel::internal::SelectHandle (Pointer(Unsize)); // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:29: 935:33
        _20 = &raw const (*_16);         // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:39: 935:43
        _19 = _20 as *const u8 (PtrToPtr); // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:39: 935:86
        _21 = const 1_usize;             // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:776:18: 776:24
        _5[_21] = (move _18, const 1_usize, move _19); // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:935:17: 935:87
        _25 = &mut _5;                   // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:829:50: 829:59
        _24 = _25 as &mut [(&dyn crossbeam_channel::internal::SelectHandle, usize, *const u8)] (Pointer(Unsize)); // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:829:50: 829:59
        _23 = select(move _24) -> [return: bb4, unwind: bb26]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:829:25: 829:60
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:829:25: 829:49
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut [(&'a (dyn SelectHandle + 'a), usize, *const u8)]) -> SelectedOperation<'a> {select}, val: Value(<ZST>) }
    }

    bb4: {
        _26 = move _23;                  // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:833:44: 833:49
        _22 = transmute::<SelectedOperation<'_>, SelectedOperation<'_>>(move _26) -> bb5; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:833:22: 833:50
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:833:22: 833:43
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(SelectedOperation<'_>) -> SelectedOperation<'_> {transmute::<SelectedOperation<'_>, SelectedOperation<'_>>}, val: Value(<ZST>) }
    }

    bb5: {
        _57 = const true;                // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:833:49: 833:50
        _28 = &_22;                      // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:12: 988:25
        _27 = SelectedOperation::<'_>::index(move _28) -> [return: bb6, unwind: bb33]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:12: 988:25
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:18: 988:23
                                         // + literal: Const { ty: for<'a> fn(&'a SelectedOperation<'_>) -> usize {SelectedOperation::<'_>::index}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _27) -> [0: bb7, otherwise: bb14]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:775:18: 988:25
    }

    bb7: {
        _57 = const false;               // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:24: 989:29
        _30 = move _22;                  // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:24: 989:29
        _29 = SelectedOperation::<'_>::recv::<(std::string::String, Vec<u8>)>(move _30, _9) -> [return: bb8, unwind: bb33]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:24: 989:38
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:30: 989:34
                                         // + literal: Const { ty: for<'a> fn(SelectedOperation<'_>, &'a crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) -> Result<(std::string::String, Vec<u8>), crossbeam_channel::RecvError> {SelectedOperation::<'_>::recv::<(std::string::String, Vec<u8>)>}, val: Value(<ZST>) }
    }

    bb8: {
        _56 = const true;                // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:37: 989:38
        _32 = _5;                        // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:990:30: 990:34
        _31 = std::mem::drop::<[(&dyn SelectHandle, usize, *const u8); 2]>(move _32) -> [return: bb9, unwind: bb31]; // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:990:13: 990:35
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:990:13: 990:29
                                         // + literal: Const { ty: fn([(&dyn SelectHandle, usize, *const u8); 2]) {std::mem::drop::<[(&dyn SelectHandle, usize, *const u8); 2]>}, val: Value(<ZST>) }
    }

    bb9: {
        _56 = const false;               // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:992:24: 992:28
        _33 = move _29;                  // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:992:24: 992:28
        _34 = discriminant(_33);         // scope 19 at cita-executor/src/postman.rs:150:23: 150:29
        switchInt(move _34) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 19 at cita-executor/src/postman.rs:150:17: 150:29
    }

    bb10: {
        _38 = std::option::Option::<(std::string::String, Vec<u8>)>::None; // scope 19 at cita-executor/src/postman.rs:152:32: 152:36
        _39 = std::option::Option::<ClosedBlock>::None; // scope 19 at cita-executor/src/postman.rs:152:38: 152:42
        _0 = (move _38, move _39);       // scope 19 at cita-executor/src/postman.rs:152:31: 152:43
        goto -> bb13;                    // scope 19 at cita-executor/src/postman.rs:152:42: 152:43
    }

    bb11: {
        unreachable;                     // scope 19 at cita-executor/src/postman.rs:150:23: 150:29
    }

    bb12: {
        _35 = move ((_33 as Ok).0: (std::string::String, std::vec::Vec<u8>)); // scope 19 at cita-executor/src/postman.rs:151:24: 151:30
        _36 = std::option::Option::<(std::string::String, Vec<u8>)>::Some(move _35); // scope 20 at cita-executor/src/postman.rs:151:36: 151:48
        _37 = std::option::Option::<ClosedBlock>::None; // scope 20 at cita-executor/src/postman.rs:151:50: 151:54
        _0 = (move _36, move _37);       // scope 20 at cita-executor/src/postman.rs:151:35: 151:55
        goto -> bb13;                    // scope 19 at cita-executor/src/postman.rs:151:54: 151:55
    }

    bb13: {
        _56 = const false;               // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:994:9: 994:10
        goto -> bb24;                    // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:9: 1001:10
    }

    bb14: {
        _41 = &_22;                      // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:12: 988:25
        _40 = SelectedOperation::<'_>::index(move _41) -> [return: bb15, unwind: bb33]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:12: 988:25
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:18: 988:23
                                         // + literal: Const { ty: for<'a> fn(&'a SelectedOperation<'_>) -> usize {SelectedOperation::<'_>::index}, val: Value(<ZST>) }
    }

    bb15: {
        switchInt(move _40) -> [1: bb16, otherwise: bb23]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:776:18: 988:25
    }

    bb16: {
        _57 = const false;               // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:24: 989:29
        _43 = move _22;                  // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:24: 989:29
        _42 = SelectedOperation::<'_>::recv::<ClosedBlock>(move _43, _16) -> [return: bb17, unwind: bb33]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:24: 989:38
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:30: 989:34
                                         // + literal: Const { ty: for<'a> fn(SelectedOperation<'_>, &'a crossbeam_channel::Receiver<ClosedBlock>) -> Result<ClosedBlock, crossbeam_channel::RecvError> {SelectedOperation::<'_>::recv::<ClosedBlock>}, val: Value(<ZST>) }
    }

    bb17: {
        _55 = const true;                // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:989:37: 989:38
        _45 = _5;                        // scope 21 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:990:30: 990:34
        _44 = std::mem::drop::<[(&dyn SelectHandle, usize, *const u8); 2]>(move _45) -> [return: bb18, unwind: bb29]; // scope 21 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:990:13: 990:35
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:990:13: 990:29
                                         // + literal: Const { ty: fn([(&dyn SelectHandle, usize, *const u8); 2]) {std::mem::drop::<[(&dyn SelectHandle, usize, *const u8); 2]>}, val: Value(<ZST>) }
    }

    bb18: {
        _55 = const false;               // scope 21 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:992:24: 992:28
        _46 = move _42;                  // scope 21 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:992:24: 992:28
        _47 = discriminant(_46);         // scope 22 at cita-executor/src/postman.rs:156:23: 156:31
        switchInt(move _47) -> [0: bb21, 1: bb19, otherwise: bb20]; // scope 22 at cita-executor/src/postman.rs:156:17: 156:31
    }

    bb19: {
        _51 = std::option::Option::<(std::string::String, Vec<u8>)>::None; // scope 22 at cita-executor/src/postman.rs:158:32: 158:36
        _52 = std::option::Option::<ClosedBlock>::None; // scope 22 at cita-executor/src/postman.rs:158:38: 158:42
        _0 = (move _51, move _52);       // scope 22 at cita-executor/src/postman.rs:158:31: 158:43
        goto -> bb22;                    // scope 22 at cita-executor/src/postman.rs:158:42: 158:43
    }

    bb20: {
        unreachable;                     // scope 22 at cita-executor/src/postman.rs:156:23: 156:31
    }

    bb21: {
        _48 = move ((_46 as Ok).0: core::libexecutor::block::ClosedBlock); // scope 22 at cita-executor/src/postman.rs:157:24: 157:32
        _49 = std::option::Option::<(std::string::String, Vec<u8>)>::None; // scope 23 at cita-executor/src/postman.rs:157:38: 157:42
        _50 = std::option::Option::<ClosedBlock>::Some(move _48); // scope 23 at cita-executor/src/postman.rs:157:44: 157:58
        _0 = (move _49, move _50);       // scope 23 at cita-executor/src/postman.rs:157:37: 157:59
        goto -> bb22;                    // scope 22 at cita-executor/src/postman.rs:157:58: 157:59
    }

    bb22: {
        _55 = const false;               // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:994:9: 994:10
        goto -> bb24;                    // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:988:9: 1001:10
    }

    bb23: {
        _54 = const _;                   // scope 14 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:73:48: 73:53
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:73:48: 73:53
                                         // + literal: Const { ty: &&str, val: Unevaluated(Postman::recv, [], Some(promoted[0])) }
        _53 = core::panicking::unreachable_display::<&str>(_54) -> bb33; // scope 14 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:73:9: 73:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:73:9: 73:47
                                         // + literal: Const { ty: for<'a> fn(&'a &str) -> ! {core::panicking::unreachable_display::<&str>}, val: Value(<ZST>) }
    }

    bb24: {
        _57 = const false;               // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:842:5: 842:6
        drop(_4) -> bb25;                // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:810:5: 810:6
    }

    bb25: {
        return;                          // scope 0 at cita-executor/src/postman.rs:162:6: 162:6
    }

    bb26 (cleanup): {
        drop(_4) -> bb27;                // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:810:5: 810:6
    }

    bb27 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:147:5: 162:6
    }

    bb28 (cleanup): {
        drop(_42) -> bb33;               // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:994:9: 994:10
    }

    bb29 (cleanup): {
        switchInt(_55) -> [0: bb33, otherwise: bb28]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:994:9: 994:10
    }

    bb30 (cleanup): {
        drop(_29) -> bb33;               // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:994:9: 994:10
    }

    bb31 (cleanup): {
        switchInt(_56) -> [0: bb33, otherwise: bb30]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:994:9: 994:10
    }

    bb32 (cleanup): {
        drop(_22) -> bb26;               // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:842:5: 842:6
    }

    bb33 (cleanup): {
        switchInt(_57) -> [0: bb26, otherwise: bb32]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:842:5: 842:6
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::recv: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:73:48: 73:53
    let mut _1: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:1031:13: 1031:64

    bb0: {
        _1 = const "internal error in crossbeam-channel: invalid case"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:1031:13: 1031:64
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:1031:13: 1031:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:73:48: 73:53
        return;                          // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:73:48: 73:53
    }
}

const _LEN: usize = {
    let mut _0: usize;                   // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:763:21: 763:26
    let mut _1: usize;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:817:9: 817:61
    let mut _2: (usize, bool);           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:817:9: 817:61
    let mut _3: (usize, bool);           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:817:9: 817:61

    bb0: {
        StorageLive(_1);                 // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:817:9: 817:61
        _2 = CheckedAdd(const 1_usize, const 0_usize); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:817:9: 817:61
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 0_usize) -> bb1; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:817:9: 817:61
    }

    bb1: {
        _1 = move (_2.0: usize);         // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:817:9: 817:61
        _3 = CheckedAdd(const 1_usize, _1); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:817:9: 817:61
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, move _1) -> bb2; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:817:9: 817:61
    }

    bb2: {
        _0 = move (_3.0: usize);         // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:817:9: 817:61
        StorageDead(_1);                 // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:817:60: 817:61
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:763:9: 763:78
    }
}

postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::recv::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:767:55: 767:59

    bb0: {
        _0 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:767:55: 767:59
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:767:55: 767:59
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::recv::unbind(_1: &T) -> &T {
    debug x => _1;                       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:930:45: 930:46
    let mut _0: &T;                      // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:930:55: 930:60

    bb0: {
        _0 = transmute::<&T, &T>(_1) -> bb1; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:931:25: 931:49
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:931:25: 931:46
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&T) -> &T {transmute::<&T, &T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:932:22: 932:22
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::recv::unbind(_1: &T) -> &T {
    debug x => _1;                       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:930:45: 930:46
    let mut _0: &T;                      // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:930:55: 930:60

    bb0: {
        _0 = transmute::<&T, &T>(_1) -> bb1; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:931:25: 931:49
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:931:25: 931:46
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&T) -> &T {transmute::<&T, &T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-channel-0.3.9/src/select_macro.rs:932:22: 932:22
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::handle_fsm_response(_1: &mut Postman, _2: ClosedBlock) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:165:28: 165:37
    debug closed_block => _2;            // in scope 0 at cita-executor/src/postman.rs:165:39: 165:51
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:165:66: 165:66
    let _3: u64;                         // in scope 0 at cita-executor/src/postman.rs:166:13: 166:19
    let mut _4: &types::header::OpenHeader; // in scope 0 at cita-executor/src/postman.rs:166:22: 166:43
    let _5: &types::header::OpenHeader;  // in scope 0 at cita-executor/src/postman.rs:166:22: 166:43
    let mut _6: &types::header::Header;  // in scope 0 at cita-executor/src/postman.rs:166:22: 166:43
    let _7: &types::header::Header;      // in scope 0 at cita-executor/src/postman.rs:166:22: 166:43
    let mut _8: &types::block::Block;    // in scope 0 at cita-executor/src/postman.rs:166:22: 166:43
    let _9: &types::block::Block;        // in scope 0 at cita-executor/src/postman.rs:166:22: 166:43
    let mut _10: &core::libexecutor::block::ClosedBlock; // in scope 0 at cita-executor/src/postman.rs:166:22: 166:43
    let mut _12: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _13: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _14: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _15: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _16: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _17: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _18: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _19: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _20: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _21: &[&str];                // in scope 0 at cita-executor/src/postman.rs:167:15: 167:64
    let mut _22: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _23: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _24: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _25: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:167:66: 167:72
    let _26: &u64;                       // in scope 0 at cita-executor/src/postman.rs:167:66: 167:72
    let _27: bool;                       // in scope 0 at cita-executor/src/postman.rs:168:9: 168:58
    let mut _28: &mut backlogs::Backlogs; // in scope 0 at cita-executor/src/postman.rs:168:9: 168:58
    let mut _29: u64;                    // in scope 0 at cita-executor/src/postman.rs:168:37: 168:43
    let mut _30: core::libexecutor::block::ClosedBlock; // in scope 0 at cita-executor/src/postman.rs:168:45: 168:57
    let mut _34: bool;                   // in scope 0 at cita-executor/src/postman.rs:169:5: 169:6
    scope 1 {
        debug height => _3;              // in scope 1 at cita-executor/src/postman.rs:166:13: 166:19
        let _11: log::Level;             // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        scope 2 {
            debug lvl => _11;            // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _31: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _32: &[&str; 2];     // in scope 2 at cita-executor/src/postman.rs:167:15: 167:64
            let mut _33: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
    }

    bb0: {
        _34 = const false;               // scope 0 at cita-executor/src/postman.rs:166:13: 166:19
        _34 = const true;                // scope 0 at cita-executor/src/postman.rs:166:13: 166:19
        _10 = &_2;                       // scope 0 at cita-executor/src/postman.rs:166:22: 166:43
        _9 = <ClosedBlock as Deref>::deref(move _10) -> [return: bb1, unwind: bb18]; // scope 0 at cita-executor/src/postman.rs:166:22: 166:43
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:166:22: 166:43
                                         // + literal: Const { ty: for<'a> fn(&'a ClosedBlock) -> &'a <ClosedBlock as Deref>::Target {<ClosedBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _9;                         // scope 0 at cita-executor/src/postman.rs:166:22: 166:43
        _7 = <types::block::Block as Deref>::deref(move _8) -> [return: bb2, unwind: bb18]; // scope 0 at cita-executor/src/postman.rs:166:22: 166:43
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:166:22: 166:43
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a <types::block::Block as Deref>::Target {<types::block::Block as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _7;                         // scope 0 at cita-executor/src/postman.rs:166:22: 166:43
        _5 = <Header as Deref>::deref(move _6) -> [return: bb3, unwind: bb18]; // scope 0 at cita-executor/src/postman.rs:166:22: 166:43
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:166:22: 166:43
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _5;                         // scope 0 at cita-executor/src/postman.rs:166:22: 166:43
        _3 = OpenHeader::number(move _4) -> [return: bb4, unwind: bb18]; // scope 0 at cita-executor/src/postman.rs:166:22: 166:43
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:166:35: 166:41
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = log::Level::Info;          // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _14 = &_11;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _33 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::handle_fsm_response, [], Some(promoted[2])) }
        _13 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _14, _33) -> [return: bb8, unwind: bb18]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = const false;               // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb7;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb6: {
        _16 = &_11;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _18 = log::max_level() -> [return: bb9, unwind: bb18]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _12) -> [0: bb14, otherwise: bb11]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        switchInt(move _13) -> [0: bb5, otherwise: bb6]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        _17 = &_18;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _15 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _16, move _17) -> [return: bb10, unwind: bb18]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb10: {
        _12 = move _15;                  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb7;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _32 = const _;                   // scope 2 at cita-executor/src/postman.rs:167:15: 167:64
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:167:15: 167:64
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Postman::handle_fsm_response, [], Some(promoted[1])) }
        _21 = _32 as &[&str] (Pointer(Unsize)); // scope 2 at cita-executor/src/postman.rs:167:15: 167:64
        _26 = &_3;                       // scope 2 at cita-executor/src/postman.rs:167:66: 167:72
        _25 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_26) -> [return: bb12, unwind: bb18]; // scope 2 at cita-executor/src/postman.rs:167:66: 167:72
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:167:66: 167:72
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb12: {
        _24 = [move _25];                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _23 = &_24;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _22 = _23 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb13, unwind: bb18]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb13: {
        _31 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::handle_fsm_response, [], Some(promoted[0])) }
        _19 = log::__private_api_log(move _20, _11, _31) -> [return: bb19, unwind: bb18]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb14: {
        _28 = &mut ((*_1).0: backlogs::Backlogs); // scope 1 at cita-executor/src/postman.rs:168:9: 168:58
        _29 = _3;                        // scope 1 at cita-executor/src/postman.rs:168:37: 168:43
        _34 = const false;               // scope 1 at cita-executor/src/postman.rs:168:45: 168:57
        _30 = move _2;                   // scope 1 at cita-executor/src/postman.rs:168:45: 168:57
        _27 = Backlogs::insert_closed(move _28, move _29, move _30) -> [return: bb15, unwind: bb18]; // scope 1 at cita-executor/src/postman.rs:168:9: 168:58
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:168:23: 168:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut Backlogs, u64, ClosedBlock) -> bool {Backlogs::insert_closed}, val: Value(<ZST>) }
    }

    bb15: {
        return;                          // scope 0 at cita-executor/src/postman.rs:169:6: 169:6
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:165:5: 169:6
    }

    bb17 (cleanup): {
        drop(_2) -> bb16;                // scope 0 at cita-executor/src/postman.rs:169:5: 169:6
    }

    bb18 (cleanup): {
        switchInt(_34) -> [0: bb16, otherwise: bb17]; // scope 0 at cita-executor/src/postman.rs:169:5: 169:6
    }

    bb19: {
        goto -> bb14;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::handle_fsm_response: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:167:9: 167:73
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:167:9: 167:73

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:167:9: 167:73
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:167:9: 167:73
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:167:9: 167:73
        _1 = (move _2, move _4, move _6, const 167_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::handle_fsm_response: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/postman.rs:167:15: 167:64
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/postman.rs:167:15: 167:64

    bb0: {
        _1 = [const "postman receive ", const "-th ClosedBlock from executor"]; // scope 0 at cita-executor/src/postman.rs:167:15: 167:64
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:167:15: 167:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:167:15: 167:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:167:15: 167:64
        return;                          // scope 0 at cita-executor/src/postman.rs:167:15: 167:64
    }
}

promoted[2] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::handle_fsm_response: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::handle_mq_message(_1: &mut Postman, _2: &str, _3: Vec<u8>) -> Result<(), types::block_number::BlockTag> {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:171:26: 171:35
    debug key => _2;                     // in scope 0 at cita-executor/src/postman.rs:171:37: 171:40
    debug msg_vec => _3;                 // in scope 0 at cita-executor/src/postman.rs:171:48: 171:55
    let mut _0: std::result::Result<(), types::block_number::BlockTag>; // return place in scope 0 at cita-executor/src/postman.rs:171:69: 171:89
    let mut _4: libproto::Message;       // in scope 0 at cita-executor/src/postman.rs:172:13: 172:20
    let mut _5: std::result::Result<libproto::Message, libproto::TryFromConvertError>; // in scope 0 at cita-executor/src/postman.rs:172:23: 172:49
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _8: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _9: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _10: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _11: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _12: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _13: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _14: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _16: &[&str];                // in scope 0 at cita-executor/src/postman.rs:173:16: 173:42
    let mut _17: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _18: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _19: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:173:44: 173:47
    let _21: &&str;                      // in scope 0 at cita-executor/src/postman.rs:173:44: 173:47
    let mut _22: libproto::router::RoutingKey; // in scope 0 at cita-executor/src/postman.rs:174:15: 174:36
    let mut _23: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _24: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _25: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _26: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _27: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let _28: ();                         // in scope 0 at cita-executor/src/postman.rs:176:17: 176:48
    let mut _29: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:176:17: 176:48
    let mut _31: std::option::Option<libproto::Request>; // in scope 0 at cita-executor/src/postman.rs:180:27: 180:45
    let mut _32: &mut libproto::Message; // in scope 0 at cita-executor/src/postman.rs:180:27: 180:45
    let _33: ();                         // in scope 0 at cita-executor/src/postman.rs:181:17: 181:46
    let mut _34: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:181:17: 181:46
    let mut _35: libproto::Request;      // in scope 0 at cita-executor/src/postman.rs:181:42: 181:45
    let mut _36: std::option::Option<libproto::RichStatus>; // in scope 0 at cita-executor/src/postman.rs:185:39: 185:61
    let mut _37: &mut libproto::Message; // in scope 0 at cita-executor/src/postman.rs:185:39: 185:61
    let mut _38: isize;                  // in scope 0 at cita-executor/src/postman.rs:185:24: 185:36
    let _40: ();                         // in scope 0 at cita-executor/src/postman.rs:186:21: 186:56
    let _41: &libproto::RichStatus;      // in scope 0 at cita-executor/src/postman.rs:186:48: 186:55
    let mut _42: std::option::Option<libproto::StateSignal>; // in scope 0 at cita-executor/src/postman.rs:191:45: 191:68
    let mut _43: &mut libproto::Message; // in scope 0 at cita-executor/src/postman.rs:191:45: 191:68
    let mut _44: isize;                  // in scope 0 at cita-executor/src/postman.rs:191:24: 191:42
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, types::block_number::BlockTag>>; // in scope 0 at cita-executor/src/postman.rs:192:21: 192:66
    let mut _47: std::result::Result<(), types::block_number::BlockTag>; // in scope 0 at cita-executor/src/postman.rs:192:21: 192:65
    let mut _48: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:192:21: 192:65
    let _49: &libproto::StateSignal;     // in scope 0 at cita-executor/src/postman.rs:192:51: 192:64
    let mut _50: isize;                  // in scope 0 at cita-executor/src/postman.rs:192:65: 192:66
    let _52: bool;                       // in scope 0 at cita-executor/src/postman.rs:200:17: 200:46
    let mut _53: libproto::Message;      // in scope 0 at cita-executor/src/postman.rs:200:42: 200:45
    let _54: ();                         // in scope 0 at cita-executor/src/postman.rs:201:17: 201:31
    let _55: ();                         // in scope 0 at cita-executor/src/postman.rs:202:17: 202:42
    let mut _57: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _58: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _59: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _60: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _61: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _62: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _63: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _64: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _65: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _66: &[&str];                // in scope 0 at cita-executor/src/postman.rs:206:24: 206:54
    let mut _67: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _68: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _69: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _70: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:206:56: 206:59
    let _71: &&str;                      // in scope 0 at cita-executor/src/postman.rs:206:56: 206:59
    let mut _78: bool;                   // in scope 0 at cita-executor/src/postman.rs:187:18: 187:19
    let mut _79: bool;                   // in scope 0 at cita-executor/src/postman.rs:194:13: 194:14
    let mut _80: bool;                   // in scope 0 at cita-executor/src/postman.rs:210:5: 210:6
    let mut _81: isize;                  // in scope 0 at cita-executor/src/postman.rs:187:18: 187:19
    let mut _82: isize;                  // in scope 0 at cita-executor/src/postman.rs:194:13: 194:14
    scope 1 {
        debug msg => _4;                 // in scope 1 at cita-executor/src/postman.rs:172:13: 172:20
        let _6: log::Level;              // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let _30: libproto::Request;      // in scope 1 at cita-executor/src/postman.rs:180:21: 180:24
        let _56: log::Level;             // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        scope 2 {
            debug lvl => _6;             // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _75: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _76: &[&str; 2];     // in scope 2 at cita-executor/src/postman.rs:173:16: 173:42
            let mut _77: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
        scope 3 {
            debug req => _30;            // in scope 3 at cita-executor/src/postman.rs:180:21: 180:24
        }
        scope 4 {
            debug status => _39;         // in scope 4 at cita-executor/src/postman.rs:185:29: 185:35
            let _39: libproto::RichStatus; // in scope 4 at cita-executor/src/postman.rs:185:29: 185:35
        }
        scope 5 {
            debug state_signal => _45;   // in scope 5 at cita-executor/src/postman.rs:191:29: 191:41
            let _45: libproto::StateSignal; // in scope 5 at cita-executor/src/postman.rs:191:29: 191:41
            let _51: std::result::Result<std::convert::Infallible, types::block_number::BlockTag>; // in scope 5 at cita-executor/src/postman.rs:192:65: 192:66
            scope 6 {
                debug residual => _51;   // in scope 6 at cita-executor/src/postman.rs:192:65: 192:66
                scope 7 {
                }
            }
            scope 8 {
                debug val => const ();   // in scope 8 at cita-executor/src/postman.rs:192:21: 192:66
                scope 9 {
                }
            }
        }
        scope 10 {
            debug lvl => _56;            // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _72: &(&str, &str, &str, u32); // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _73: &[&str; 2];     // in scope 10 at cita-executor/src/postman.rs:206:24: 206:54
            let mut _74: &log::LevelFilter; // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
    }

    bb0: {
        _80 = const false;               // scope 0 at cita-executor/src/postman.rs:172:13: 172:20
        _79 = const false;               // scope 0 at cita-executor/src/postman.rs:172:13: 172:20
        _78 = const false;               // scope 0 at cita-executor/src/postman.rs:172:13: 172:20
        _5 = <libproto::Message as libproto::TryFrom<Vec<u8>>>::try_from(move _3) -> bb1; // scope 0 at cita-executor/src/postman.rs:172:23: 172:49
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:172:23: 172:40
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Vec<u8>) -> Result<libproto::Message, <libproto::Message as libproto::TryFrom<Vec<u8>>>::Error> {<libproto::Message as libproto::TryFrom<Vec<u8>>>::try_from}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Result::<libproto::Message, TryFromConvertError>::unwrap(move _5) -> bb2; // scope 0 at cita-executor/src/postman.rs:172:23: 172:58
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:172:50: 172:56
                                         // + literal: Const { ty: fn(Result<libproto::Message, TryFromConvertError>) -> libproto::Message {Result::<libproto::Message, TryFromConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _80 = const true;                // scope 0 at cita-executor/src/postman.rs:172:57: 172:58
        _6 = log::Level::Trace;          // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _9 = &_6;                        // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _77 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::handle_mq_message, [], Some(promoted[5])) }
        _8 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _9, _77) -> [return: bb6, unwind: bb66]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = const false;                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb5;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        _11 = &_6;                       // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _13 = log::max_level() -> [return: bb7, unwind: bb66]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _7) -> [0: bb12, otherwise: bb9]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb6: {
        switchInt(move _8) -> [0: bb3, otherwise: bb4]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _12 = &_13;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _10 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _11, move _12) -> [return: bb8, unwind: bb66]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb8: {
        _7 = move _10;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb5;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        _76 = const _;                   // scope 2 at cita-executor/src/postman.rs:173:16: 173:42
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:173:16: 173:42
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Postman::handle_mq_message, [], Some(promoted[4])) }
        _16 = _76 as &[&str] (Pointer(Unsize)); // scope 2 at cita-executor/src/postman.rs:173:16: 173:42
        _21 = &_2;                       // scope 2 at cita-executor/src/postman.rs:173:44: 173:47
        _20 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_21) -> [return: bb10, unwind: bb66]; // scope 2 at cita-executor/src/postman.rs:173:44: 173:47
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:173:44: 173:47
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb10: {
        _19 = [move _20];                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _18 = &_19;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _17 = _18 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> [return: bb11, unwind: bb66]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _75 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::handle_mq_message, [], Some(promoted[3])) }
        _14 = log::__private_api_log(move _15, _6, _75) -> [return: bb67, unwind: bb66]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb12: {
        _22 = <RoutingKey as From<&str>>::from(_2) -> [return: bb13, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:174:15: 174:36
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:174:15: 174:31
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&str) -> RoutingKey {<RoutingKey as From<&str>>::from}, val: Value(<ZST>) }
    }

    bb13: {
        _27 = discriminant((_22.0: libproto::router::SubModules)); // scope 1 at cita-executor/src/postman.rs:174:15: 174:36
        switchInt(move _27) -> [1: bb15, 2: bb16, 3: bb17, 4: bb18, otherwise: bb14]; // scope 1 at cita-executor/src/postman.rs:174:9: 174:36
    }

    bb14: {
        _56 = log::Level::Error;         // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _59 = &_56;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _74 = const _;                   // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::handle_mq_message, [], Some(promoted[2])) }
        _58 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _59, _74) -> [return: bb42, unwind: bb66]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb15: {
        _23 = discriminant((_22.1: libproto::router::MsgType)); // scope 1 at cita-executor/src/postman.rs:174:15: 174:36
        switchInt(move _23) -> [4: bb36, otherwise: bb14]; // scope 1 at cita-executor/src/postman.rs:174:9: 174:36
    }

    bb16: {
        _24 = discriminant((_22.1: libproto::router::MsgType)); // scope 1 at cita-executor/src/postman.rs:174:15: 174:36
        switchInt(move _24) -> [1: bb20, 6: bb23, 22: bb27, 31: bb36, otherwise: bb14]; // scope 1 at cita-executor/src/postman.rs:174:9: 174:36
    }

    bb17: {
        _25 = discriminant((_22.1: libproto::router::MsgType)); // scope 1 at cita-executor/src/postman.rs:174:15: 174:36
        switchInt(move _25) -> [7: bb36, 9: bb36, otherwise: bb14]; // scope 1 at cita-executor/src/postman.rs:174:9: 174:36
    }

    bb18: {
        _26 = discriminant((_22.1: libproto::router::MsgType)); // scope 1 at cita-executor/src/postman.rs:174:15: 174:36
        switchInt(move _26) -> [20: bb19, otherwise: bb14]; // scope 1 at cita-executor/src/postman.rs:174:9: 174:36
    }

    bb19: {
        _29 = &(*_1);                    // scope 1 at cita-executor/src/postman.rs:176:17: 176:48
        _28 = Postman::reply_auth_miscellaneous(move _29) -> [return: bb68, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:176:17: 176:48
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:176:22: 176:46
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) {Postman::reply_auth_miscellaneous}, val: Value(<ZST>) }
    }

    bb20: {
        _32 = &mut _4;                   // scope 1 at cita-executor/src/postman.rs:180:27: 180:45
        _31 = libproto::Message::take_request(move _32) -> [return: bb21, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:180:27: 180:45
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:180:31: 180:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Message) -> std::option::Option<libproto::Request> {libproto::Message::take_request}, val: Value(<ZST>) }
    }

    bb21: {
        _30 = std::option::Option::<libproto::Request>::unwrap(move _31) -> [return: bb22, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:180:27: 180:54
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:180:46: 180:52
                                         // + literal: Const { ty: fn(std::option::Option<libproto::Request>) -> libproto::Request {std::option::Option::<libproto::Request>::unwrap}, val: Value(<ZST>) }
    }

    bb22: {
        _34 = &(*_1);                    // scope 3 at cita-executor/src/postman.rs:181:17: 181:46
        _35 = move _30;                  // scope 3 at cita-executor/src/postman.rs:181:42: 181:45
        _33 = Postman::reply_chain_request(move _34, move _35) -> [return: bb69, unwind: bb66]; // scope 3 at cita-executor/src/postman.rs:181:17: 181:46
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:181:22: 181:41
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, libproto::Request) {Postman::reply_chain_request}, val: Value(<ZST>) }
    }

    bb23: {
        _37 = &mut _4;                   // scope 4 at cita-executor/src/postman.rs:185:39: 185:61
        _36 = libproto::Message::take_rich_status(move _37) -> [return: bb24, unwind: bb66]; // scope 4 at cita-executor/src/postman.rs:185:39: 185:61
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:185:43: 185:59
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Message) -> std::option::Option<libproto::RichStatus> {libproto::Message::take_rich_status}, val: Value(<ZST>) }
    }

    bb24: {
        _78 = const true;                // scope 4 at cita-executor/src/postman.rs:185:60: 185:61
        _38 = discriminant(_36);         // scope 4 at cita-executor/src/postman.rs:185:24: 185:36
        switchInt(move _38) -> [1: bb25, otherwise: bb59]; // scope 4 at cita-executor/src/postman.rs:185:24: 185:36
    }

    bb25: {
        _78 = const false;               // scope 4 at cita-executor/src/postman.rs:185:29: 185:35
        _39 = move ((_36 as Some).0: libproto::RichStatus); // scope 4 at cita-executor/src/postman.rs:185:29: 185:35
        _41 = &_39;                      // scope 4 at cita-executor/src/postman.rs:186:48: 186:55
        _40 = Postman::update_by_rich_status(_1, _41) -> [return: bb26, unwind: bb54]; // scope 4 at cita-executor/src/postman.rs:186:21: 186:56
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:186:26: 186:47
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Postman, &'b libproto::RichStatus) {Postman::update_by_rich_status}, val: Value(<ZST>) }
    }

    bb26: {
        drop(_39) -> [return: bb59, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:187:17: 187:18
    }

    bb27: {
        _43 = &mut _4;                   // scope 5 at cita-executor/src/postman.rs:191:45: 191:68
        _42 = libproto::Message::take_state_signal(move _43) -> [return: bb28, unwind: bb66]; // scope 5 at cita-executor/src/postman.rs:191:45: 191:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:191:49: 191:66
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Message) -> std::option::Option<libproto::StateSignal> {libproto::Message::take_state_signal}, val: Value(<ZST>) }
    }

    bb28: {
        _79 = const true;                // scope 5 at cita-executor/src/postman.rs:191:67: 191:68
        _44 = discriminant(_42);         // scope 5 at cita-executor/src/postman.rs:191:24: 191:42
        switchInt(move _44) -> [1: bb29, otherwise: bb63]; // scope 5 at cita-executor/src/postman.rs:191:24: 191:42
    }

    bb29: {
        _79 = const false;               // scope 5 at cita-executor/src/postman.rs:191:29: 191:41
        _45 = move ((_42 as Some).0: libproto::StateSignal); // scope 5 at cita-executor/src/postman.rs:191:29: 191:41
        _48 = &(*_1);                    // scope 5 at cita-executor/src/postman.rs:192:21: 192:65
        _49 = &_45;                      // scope 5 at cita-executor/src/postman.rs:192:51: 192:64
        _47 = Postman::reply_chain_state_signal(move _48, _49) -> [return: bb30, unwind: bb53]; // scope 5 at cita-executor/src/postman.rs:192:21: 192:65
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:192:26: 192:50
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Postman, &'b libproto::StateSignal) -> Result<(), types::block_number::BlockTag> {Postman::reply_chain_state_signal}, val: Value(<ZST>) }
    }

    bb30: {
        _46 = <Result<(), types::block_number::BlockTag> as Try>::branch(move _47) -> [return: bb31, unwind: bb53]; // scope 5 at cita-executor/src/postman.rs:192:21: 192:66
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:192:21: 192:66
                                         // + literal: Const { ty: fn(Result<(), types::block_number::BlockTag>) -> ControlFlow<<Result<(), types::block_number::BlockTag> as Try>::Residual, <Result<(), types::block_number::BlockTag> as Try>::Output> {<Result<(), types::block_number::BlockTag> as Try>::branch}, val: Value(<ZST>) }
    }

    bb31: {
        _50 = discriminant(_46);         // scope 5 at cita-executor/src/postman.rs:192:21: 192:66
        switchInt(move _50) -> [0: bb32, 1: bb34, otherwise: bb33]; // scope 5 at cita-executor/src/postman.rs:192:21: 192:66
    }

    bb32: {
        drop(_45) -> [return: bb63, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:193:17: 193:18
    }

    bb33: {
        unreachable;                     // scope 5 at cita-executor/src/postman.rs:192:21: 192:66
    }

    bb34: {
        _51 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, types::block_number::BlockTag>); // scope 5 at cita-executor/src/postman.rs:192:65: 192:66
        _0 = <Result<(), types::block_number::BlockTag> as FromResidual<Result<Infallible, types::block_number::BlockTag>>>::from_residual(_51) -> [return: bb35, unwind: bb53]; // scope 7 at cita-executor/src/postman.rs:192:21: 192:66
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:192:65: 192:66
                                         // + literal: Const { ty: fn(Result<Infallible, types::block_number::BlockTag>) -> Result<(), types::block_number::BlockTag> {<Result<(), types::block_number::BlockTag> as FromResidual<Result<Infallible, types::block_number::BlockTag>>>::from_residual}, val: Value(<ZST>) }
    }

    bb35: {
        drop(_45) -> [return: bb50, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:193:17: 193:18
    }

    bb36: {
        _80 = const false;               // scope 1 at cita-executor/src/postman.rs:200:42: 200:45
        _53 = move _4;                   // scope 1 at cita-executor/src/postman.rs:200:42: 200:45
        _52 = Postman::update_backlog(_1, _2, move _53) -> [return: bb37, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:200:17: 200:46
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:200:22: 200:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Postman, &'b str, libproto::Message) -> bool {Postman::update_backlog}, val: Value(<ZST>) }
    }

    bb37: {
        _54 = Postman::grow_up(_1) -> [return: bb38, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:201:17: 201:31
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:201:22: 201:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut Postman) {Postman::grow_up}, val: Value(<ZST>) }
    }

    bb38: {
        _55 = Postman::execute_next_block(_1) -> [return: bb70, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:202:17: 202:42
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:202:22: 202:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut Postman) {Postman::execute_next_block}, val: Value(<ZST>) }
    }

    bb39: {
        _57 = const false;               // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb41;                    // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb40: {
        _61 = &_56;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _63 = log::max_level() -> [return: bb43, unwind: bb66]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb41: {
        switchInt(move _57) -> [0: bb48, otherwise: bb45]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb42: {
        switchInt(move _58) -> [0: bb39, otherwise: bb40]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb43: {
        _62 = &_63;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _60 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _61, move _62) -> [return: bb44, unwind: bb66]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb44: {
        _57 = move _60;                  // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb41;                    // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb45: {
        _73 = const _;                   // scope 10 at cita-executor/src/postman.rs:206:24: 206:54
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:206:24: 206:54
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Postman::handle_mq_message, [], Some(promoted[1])) }
        _66 = _73 as &[&str] (Pointer(Unsize)); // scope 10 at cita-executor/src/postman.rs:206:24: 206:54
        _71 = &_2;                       // scope 10 at cita-executor/src/postman.rs:206:56: 206:59
        _70 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_71) -> [return: bb46, unwind: bb66]; // scope 10 at cita-executor/src/postman.rs:206:56: 206:59
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:206:56: 206:59
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb46: {
        _69 = [move _70];                // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _68 = &_69;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _67 = _68 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _65 = Arguments::<'_>::new_v1(move _66, move _67) -> [return: bb47, unwind: bb66]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb47: {
        _72 = const _;                   // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::handle_mq_message, [], Some(promoted[0])) }
        _64 = log::__private_api_log(move _65, _56, _72) -> [return: bb71, unwind: bb66]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb48: {
        _0 = Result::<(), types::block_number::BlockTag>::Ok(const ()); // scope 1 at cita-executor/src/postman.rs:209:9: 209:15
        switchInt(_80) -> [0: bb49, otherwise: bb64]; // scope 0 at cita-executor/src/postman.rs:210:5: 210:6
    }

    bb49: {
        _80 = const false;               // scope 0 at cita-executor/src/postman.rs:210:5: 210:6
        goto -> bb52;                    // scope 0 at cita-executor/src/postman.rs:210:5: 210:6
    }

    bb50: {
        _79 = const false;               // scope 1 at cita-executor/src/postman.rs:194:13: 194:14
        drop(_4) -> bb51;                // scope 0 at cita-executor/src/postman.rs:210:5: 210:6
    }

    bb51: {
        _80 = const false;               // scope 0 at cita-executor/src/postman.rs:210:5: 210:6
        goto -> bb52;                    // scope 0 at cita-executor/src/postman.rs:210:5: 210:6
    }

    bb52: {
        return;                          // scope 0 at cita-executor/src/postman.rs:210:6: 210:6
    }

    bb53 (cleanup): {
        drop(_45) -> bb66;               // scope 1 at cita-executor/src/postman.rs:193:17: 193:18
    }

    bb54 (cleanup): {
        drop(_39) -> bb66;               // scope 1 at cita-executor/src/postman.rs:187:17: 187:18
    }

    bb55 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:171:5: 210:6
    }

    bb56: {
        _78 = const false;               // scope 1 at cita-executor/src/postman.rs:187:18: 187:19
        goto -> bb48;                    // scope 1 at cita-executor/src/postman.rs:184:50: 188:14
    }

    bb57: {
        switchInt(_78) -> [0: bb56, otherwise: bb58]; // scope 1 at cita-executor/src/postman.rs:187:18: 187:19
    }

    bb58: {
        drop(((_36 as Some).0: libproto::RichStatus)) -> [return: bb56, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:187:18: 187:19
    }

    bb59: {
        _81 = discriminant(_36);         // scope 1 at cita-executor/src/postman.rs:187:18: 187:19
        switchInt(move _81) -> [1: bb57, otherwise: bb56]; // scope 1 at cita-executor/src/postman.rs:187:18: 187:19
    }

    bb60: {
        _79 = const false;               // scope 1 at cita-executor/src/postman.rs:194:13: 194:14
        goto -> bb48;                    // scope 1 at cita-executor/src/postman.rs:194:13: 194:14
    }

    bb61: {
        switchInt(_79) -> [0: bb60, otherwise: bb62]; // scope 1 at cita-executor/src/postman.rs:194:13: 194:14
    }

    bb62: {
        drop(((_42 as Some).0: libproto::StateSignal)) -> [return: bb60, unwind: bb66]; // scope 1 at cita-executor/src/postman.rs:194:13: 194:14
    }

    bb63: {
        _82 = discriminant(_42);         // scope 1 at cita-executor/src/postman.rs:194:13: 194:14
        switchInt(move _82) -> [1: bb61, otherwise: bb60]; // scope 1 at cita-executor/src/postman.rs:194:13: 194:14
    }

    bb64: {
        drop(_4) -> bb49;                // scope 0 at cita-executor/src/postman.rs:210:5: 210:6
    }

    bb65 (cleanup): {
        drop(_4) -> bb55;                // scope 0 at cita-executor/src/postman.rs:210:5: 210:6
    }

    bb66 (cleanup): {
        switchInt(_80) -> [0: bb55, otherwise: bb65]; // scope 0 at cita-executor/src/postman.rs:210:5: 210:6
    }

    bb67: {
        goto -> bb12;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb68: {
        goto -> bb48;                    // scope 1 at cita-executor/src/postman.rs:176:17: 176:48
    }

    bb69: {
        goto -> bb48;                    // scope 3 at cita-executor/src/postman.rs:181:17: 181:46
    }

    bb70: {
        goto -> bb48;                    // scope 1 at cita-executor/src/postman.rs:202:17: 202:42
    }

    bb71: {
        goto -> bb48;                    // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::handle_mq_message: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:206:17: 206:60
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:206:17: 206:60

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:206:17: 206:60
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:206:17: 206:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:206:17: 206:60
        _1 = (move _2, move _4, move _6, const 206_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::handle_mq_message: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/postman.rs:206:24: 206:54
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/postman.rs:206:24: 206:54

    bb0: {
        _1 = [const "receive unknown key: ", const " !!!!"]; // scope 0 at cita-executor/src/postman.rs:206:24: 206:54
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:206:24: 206:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:206:24: 206:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:206:24: 206:54
        return;                          // scope 0 at cita-executor/src/postman.rs:206:24: 206:54
    }
}

promoted[2] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::handle_mq_message: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::handle_mq_message: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:173:9: 173:48
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:173:9: 173:48

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:173:9: 173:48
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:173:9: 173:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:173:9: 173:48
        _1 = (move _2, move _4, move _6, const 173_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::handle_mq_message: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/postman.rs:173:16: 173:42
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/postman.rs:173:16: 173:42

    bb0: {
        _1 = [const "receive ", const " from RabbitMQ"]; // scope 0 at cita-executor/src/postman.rs:173:16: 173:42
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:173:16: 173:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:173:16: 173:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:173:16: 173:42
        return;                          // scope 0 at cita-executor/src/postman.rs:173:16: 173:42
    }
}

promoted[5] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::handle_mq_message: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_state_signal(_1: &Postman, _2: &libproto::StateSignal) -> Result<(), types::block_number::BlockTag> {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:214:33: 214:38
    debug state_signal => _2;            // in scope 0 at cita-executor/src/postman.rs:214:40: 214:52
    let mut _0: std::result::Result<(), types::block_number::BlockTag>; // return place in scope 0 at cita-executor/src/postman.rs:214:71: 214:91
    let _3: u64;                         // in scope 0 at cita-executor/src/postman.rs:215:13: 215:29
    let mut _4: bool;                    // in scope 0 at cita-executor/src/postman.rs:216:12: 216:56
    let mut _5: u64;                     // in scope 0 at cita-executor/src/postman.rs:216:12: 216:28
    let mut _6: u64;                     // in scope 0 at cita-executor/src/postman.rs:216:31: 216:56
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, types::block_number::BlockTag>>; // in scope 0 at cita-executor/src/postman.rs:217:13: 217:68
    let mut _8: std::result::Result<(), types::block_number::BlockTag>; // in scope 0 at cita-executor/src/postman.rs:217:13: 217:67
    let mut _9: u64;                     // in scope 0 at cita-executor/src/postman.rs:217:46: 217:66
    let mut _10: u64;                    // in scope 0 at cita-executor/src/postman.rs:217:46: 217:62
    let mut _11: (u64, bool);            // in scope 0 at cita-executor/src/postman.rs:217:46: 217:66
    let mut _12: isize;                  // in scope 0 at cita-executor/src/postman.rs:217:67: 217:68
    let mut _14: std::vec::IntoIter<&u64>; // in scope 0 at cita-executor/src/postman.rs:218:27: 218:57
    let mut _15: std::vec::Vec<&u64>;    // in scope 0 at cita-executor/src/postman.rs:218:27: 218:57
    let mut _16: &backlogs::Backlogs;    // in scope 0 at cita-executor/src/postman.rs:218:27: 218:57
    let mut _18: std::option::Option<&u64>; // in scope 0 at cita-executor/src/postman.rs:218:27: 218:57
    let mut _19: &mut std::vec::IntoIter<&u64>; // in scope 0 at cita-executor/src/postman.rs:218:27: 218:57
    let mut _20: isize;                  // in scope 0 at cita-executor/src/postman.rs:218:13: 222:14
    let mut _22: bool;                   // in scope 0 at cita-executor/src/postman.rs:219:20: 219:50
    let mut _23: u64;                    // in scope 0 at cita-executor/src/postman.rs:219:20: 219:27
    let mut _24: u64;                    // in scope 0 at cita-executor/src/postman.rs:219:30: 219:50
    let mut _25: u64;                    // in scope 0 at cita-executor/src/postman.rs:219:30: 219:46
    let mut _26: (u64, bool);            // in scope 0 at cita-executor/src/postman.rs:219:30: 219:50
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, types::block_number::BlockTag>>; // in scope 0 at cita-executor/src/postman.rs:220:21: 220:63
    let mut _28: std::result::Result<(), types::block_number::BlockTag>; // in scope 0 at cita-executor/src/postman.rs:220:21: 220:62
    let mut _29: u64;                    // in scope 0 at cita-executor/src/postman.rs:220:54: 220:61
    let mut _30: isize;                  // in scope 0 at cita-executor/src/postman.rs:220:62: 220:63
    let mut _32: bool;                   // in scope 0 at cita-executor/src/postman.rs:223:19: 223:63
    let mut _33: u64;                    // in scope 0 at cita-executor/src/postman.rs:223:19: 223:35
    let mut _34: u64;                    // in scope 0 at cita-executor/src/postman.rs:223:38: 223:63
    let _35: ();                         // in scope 0 at cita-executor/src/postman.rs:224:13: 224:35
    scope 1 {
        debug specified_height => _3;    // in scope 1 at cita-executor/src/postman.rs:215:13: 215:29
        let _13: std::result::Result<std::convert::Infallible, types::block_number::BlockTag>; // in scope 1 at cita-executor/src/postman.rs:217:67: 217:68
        let mut _17: std::vec::IntoIter<&u64>; // in scope 1 at cita-executor/src/postman.rs:218:27: 218:57
        scope 2 {
            debug residual => _13;       // in scope 2 at cita-executor/src/postman.rs:217:67: 217:68
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();       // in scope 4 at cita-executor/src/postman.rs:217:13: 217:68
            scope 5 {
            }
        }
        scope 6 {
            debug iter => _17;           // in scope 6 at cita-executor/src/postman.rs:218:27: 218:57
            let _21: &u64;               // in scope 6 at cita-executor/src/postman.rs:218:17: 218:23
            scope 7 {
                debug height => _21;     // in scope 7 at cita-executor/src/postman.rs:218:17: 218:23
                let _31: std::result::Result<std::convert::Infallible, types::block_number::BlockTag>; // in scope 7 at cita-executor/src/postman.rs:220:62: 220:63
                scope 8 {
                    debug residual => _31; // in scope 8 at cita-executor/src/postman.rs:220:62: 220:63
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => const (); // in scope 10 at cita-executor/src/postman.rs:220:21: 220:63
                    scope 11 {
                    }
                }
            }
        }
    }

    bb0: {
        _3 = libproto::StateSignal::get_height(_2) -> bb1; // scope 0 at cita-executor/src/postman.rs:215:32: 215:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:215:45: 215:55
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::StateSignal) -> u64 {libproto::StateSignal::get_height}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _3;                         // scope 1 at cita-executor/src/postman.rs:216:12: 216:28
        _6 = Postman::get_current_height(_1) -> bb2; // scope 1 at cita-executor/src/postman.rs:216:31: 216:56
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:216:36: 216:54
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) -> u64 {Postman::get_current_height}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Lt(move _5, move _6);       // scope 1 at cita-executor/src/postman.rs:216:12: 216:56
        switchInt(move _4) -> [0: bb24, otherwise: bb3]; // scope 1 at cita-executor/src/postman.rs:216:12: 216:56
    }

    bb3: {
        _10 = _3;                        // scope 1 at cita-executor/src/postman.rs:217:46: 217:62
        _11 = CheckedAdd(_10, const 1_u64); // scope 1 at cita-executor/src/postman.rs:217:46: 217:66
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_u64) -> bb4; // scope 1 at cita-executor/src/postman.rs:217:46: 217:66
    }

    bb4: {
        _9 = move (_11.0: u64);          // scope 1 at cita-executor/src/postman.rs:217:46: 217:66
        _8 = Postman::send_executed_info_to_chain(_1, move _9) -> bb5; // scope 1 at cita-executor/src/postman.rs:217:13: 217:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:217:18: 217:45
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, u64) -> Result<(), types::block_number::BlockTag> {Postman::send_executed_info_to_chain}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = <Result<(), types::block_number::BlockTag> as Try>::branch(move _8) -> bb6; // scope 1 at cita-executor/src/postman.rs:217:13: 217:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:217:13: 217:68
                                         // + literal: Const { ty: fn(Result<(), types::block_number::BlockTag>) -> ControlFlow<<Result<(), types::block_number::BlockTag> as Try>::Residual, <Result<(), types::block_number::BlockTag> as Try>::Output> {<Result<(), types::block_number::BlockTag> as Try>::branch}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = discriminant(_7);          // scope 1 at cita-executor/src/postman.rs:217:13: 217:68
        switchInt(move _12) -> [0: bb7, 1: bb9, otherwise: bb8]; // scope 1 at cita-executor/src/postman.rs:217:13: 217:68
    }

    bb7: {
        _16 = &((*_1).0: backlogs::Backlogs); // scope 1 at cita-executor/src/postman.rs:218:27: 218:57
        _15 = Backlogs::completed_keys(move _16) -> bb10; // scope 1 at cita-executor/src/postman.rs:218:27: 218:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:218:41: 218:55
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs) -> Vec<&'a u64> {Backlogs::completed_keys}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 1 at cita-executor/src/postman.rs:217:13: 217:68
    }

    bb9: {
        _13 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, types::block_number::BlockTag>); // scope 1 at cita-executor/src/postman.rs:217:67: 217:68
        _0 = <Result<(), types::block_number::BlockTag> as FromResidual<Result<Infallible, types::block_number::BlockTag>>>::from_residual(_13) -> bb28; // scope 3 at cita-executor/src/postman.rs:217:13: 217:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:217:67: 217:68
                                         // + literal: Const { ty: fn(Result<Infallible, types::block_number::BlockTag>) -> Result<(), types::block_number::BlockTag> {<Result<(), types::block_number::BlockTag> as FromResidual<Result<Infallible, types::block_number::BlockTag>>>::from_residual}, val: Value(<ZST>) }
    }

    bb10: {
        _14 = <Vec<&u64> as IntoIterator>::into_iter(move _15) -> bb11; // scope 1 at cita-executor/src/postman.rs:218:27: 218:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:218:27: 218:57
                                         // + literal: Const { ty: fn(Vec<&u64>) -> <Vec<&u64> as IntoIterator>::IntoIter {<Vec<&u64> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb11: {
        _17 = move _14;                  // scope 1 at cita-executor/src/postman.rs:218:27: 218:57
        goto -> bb12;                    // scope 6 at cita-executor/src/postman.rs:218:13: 222:14
    }

    bb12: {
        _19 = &mut _17;                  // scope 6 at cita-executor/src/postman.rs:218:27: 218:57
        _18 = <std::vec::IntoIter<&u64> as Iterator>::next(_19) -> [return: bb13, unwind: bb29]; // scope 6 at cita-executor/src/postman.rs:218:27: 218:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:218:27: 218:57
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<&u64>) -> std::option::Option<<std::vec::IntoIter<&u64> as Iterator>::Item> {<std::vec::IntoIter<&u64> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb13: {
        _20 = discriminant(_18);         // scope 6 at cita-executor/src/postman.rs:218:27: 218:57
        switchInt(move _20) -> [0: bb16, 1: bb14, otherwise: bb15]; // scope 6 at cita-executor/src/postman.rs:218:27: 218:57
    }

    bb14: {
        _21 = ((_18 as Some).0: &u64);   // scope 6 at cita-executor/src/postman.rs:218:17: 218:23
        _23 = (*_21);                    // scope 7 at cita-executor/src/postman.rs:219:20: 219:27
        _25 = _3;                        // scope 7 at cita-executor/src/postman.rs:219:30: 219:46
        _26 = CheckedAdd(_25, const 1_u64); // scope 7 at cita-executor/src/postman.rs:219:30: 219:50
        assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", move _25, const 1_u64) -> [success: bb17, unwind: bb29]; // scope 7 at cita-executor/src/postman.rs:219:30: 219:50
    }

    bb15: {
        unreachable;                     // scope 6 at cita-executor/src/postman.rs:218:27: 218:57
    }

    bb16: {
        drop(_17) -> bb27;               // scope 1 at cita-executor/src/postman.rs:222:13: 222:14
    }

    bb17: {
        _24 = move (_26.0: u64);         // scope 7 at cita-executor/src/postman.rs:219:30: 219:50
        _22 = Gt(move _23, move _24);    // scope 7 at cita-executor/src/postman.rs:219:20: 219:50
        switchInt(move _22) -> [0: bb12, otherwise: bb18]; // scope 7 at cita-executor/src/postman.rs:219:20: 219:50
    }

    bb18: {
        _29 = (*_21);                    // scope 7 at cita-executor/src/postman.rs:220:54: 220:61
        _28 = Postman::send_executed_info_to_chain(_1, move _29) -> [return: bb19, unwind: bb29]; // scope 7 at cita-executor/src/postman.rs:220:21: 220:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:220:26: 220:53
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, u64) -> Result<(), types::block_number::BlockTag> {Postman::send_executed_info_to_chain}, val: Value(<ZST>) }
    }

    bb19: {
        _27 = <Result<(), types::block_number::BlockTag> as Try>::branch(move _28) -> [return: bb20, unwind: bb29]; // scope 7 at cita-executor/src/postman.rs:220:21: 220:63
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:220:21: 220:63
                                         // + literal: Const { ty: fn(Result<(), types::block_number::BlockTag>) -> ControlFlow<<Result<(), types::block_number::BlockTag> as Try>::Residual, <Result<(), types::block_number::BlockTag> as Try>::Output> {<Result<(), types::block_number::BlockTag> as Try>::branch}, val: Value(<ZST>) }
    }

    bb20: {
        _30 = discriminant(_27);         // scope 7 at cita-executor/src/postman.rs:220:21: 220:63
        switchInt(move _30) -> [0: bb12, 1: bb22, otherwise: bb21]; // scope 7 at cita-executor/src/postman.rs:220:21: 220:63
    }

    bb21: {
        unreachable;                     // scope 7 at cita-executor/src/postman.rs:220:21: 220:63
    }

    bb22: {
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, types::block_number::BlockTag>); // scope 7 at cita-executor/src/postman.rs:220:62: 220:63
        _0 = <Result<(), types::block_number::BlockTag> as FromResidual<Result<Infallible, types::block_number::BlockTag>>>::from_residual(_31) -> [return: bb23, unwind: bb29]; // scope 9 at cita-executor/src/postman.rs:220:21: 220:63
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:220:62: 220:63
                                         // + literal: Const { ty: fn(Result<Infallible, types::block_number::BlockTag>) -> Result<(), types::block_number::BlockTag> {<Result<(), types::block_number::BlockTag> as FromResidual<Result<Infallible, types::block_number::BlockTag>>>::from_residual}, val: Value(<ZST>) }
    }

    bb23: {
        drop(_17) -> bb28;               // scope 1 at cita-executor/src/postman.rs:222:13: 222:14
    }

    bb24: {
        _33 = _3;                        // scope 1 at cita-executor/src/postman.rs:223:19: 223:35
        _34 = Postman::get_current_height(_1) -> bb25; // scope 1 at cita-executor/src/postman.rs:223:38: 223:63
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:223:43: 223:61
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) -> u64 {Postman::get_current_height}, val: Value(<ZST>) }
    }

    bb25: {
        _32 = Gt(move _33, move _34);    // scope 1 at cita-executor/src/postman.rs:223:19: 223:63
        switchInt(move _32) -> [0: bb27, otherwise: bb26]; // scope 1 at cita-executor/src/postman.rs:223:19: 223:63
    }

    bb26: {
        _35 = Postman::signal_to_chain(_1) -> bb27; // scope 1 at cita-executor/src/postman.rs:224:13: 224:35
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:224:18: 224:33
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) {Postman::signal_to_chain}, val: Value(<ZST>) }
    }

    bb27: {
        _0 = Result::<(), types::block_number::BlockTag>::Ok(const ()); // scope 1 at cita-executor/src/postman.rs:226:9: 226:15
        goto -> bb28;                    // scope 0 at cita-executor/src/postman.rs:227:6: 227:6
    }

    bb28: {
        return;                          // scope 0 at cita-executor/src/postman.rs:227:6: 227:6
    }

    bb29 (cleanup): {
        drop(_17) -> bb30;               // scope 1 at cita-executor/src/postman.rs:222:13: 222:14
    }

    bb30 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:214:5: 227:6
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::send_executed_info_to_chain(_1: &Postman, _2: u64) -> Result<(), types::block_number::BlockTag> {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:229:36: 229:41
    debug height => _2;                  // in scope 0 at cita-executor/src/postman.rs:229:43: 229:49
    let mut _0: std::result::Result<(), types::block_number::BlockTag>; // return place in scope 0 at cita-executor/src/postman.rs:229:59: 229:79
    let mut _3: bool;                    // in scope 0 at cita-executor/src/postman.rs:230:12: 230:46
    let mut _4: u64;                     // in scope 0 at cita-executor/src/postman.rs:230:21: 230:46
    let _5: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _9: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _10: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _11: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _12: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _13: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _14: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _15: &[&str];                // in scope 0 at cita-executor/src/postman.rs:231:20: 231:86
    let _16: std::option::Option<&libproto::ExecutedResult>; // in scope 0 at cita-executor/src/postman.rs:235:13: 235:28
    let mut _17: &backlogs::Backlogs;    // in scope 0 at cita-executor/src/postman.rs:235:31: 235:73
    let mut _18: bool;                   // in scope 0 at cita-executor/src/postman.rs:262:12: 262:37
    let mut _19: &std::option::Option<&libproto::ExecutedResult>; // in scope 0 at cita-executor/src/postman.rs:262:12: 262:37
    let mut _21: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _22: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _23: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _24: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _25: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _26: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _27: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _28: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _29: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _30: &[&str];                // in scope 0 at cita-executor/src/postman.rs:264:17: 265:40
    let mut _31: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _32: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _33: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _34: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:266:17: 266:23
    let _35: &u64;                       // in scope 0 at cita-executor/src/postman.rs:266:17: 266:23
    let mut _36: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:267:17: 267:42
    let _37: &u64;                       // in scope 0 at cita-executor/src/postman.rs:267:17: 267:42
    let _38: u64;                        // in scope 0 at cita-executor/src/postman.rs:267:17: 267:42
    let mut _39: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:268:17: 268:27
    let _40: &u64;                       // in scope 0 at cita-executor/src/postman.rs:268:17: 268:27
    let _41: u64;                        // in scope 0 at cita-executor/src/postman.rs:268:17: 268:27
    let mut _42: (u64, bool);            // in scope 0 at cita-executor/src/postman.rs:268:17: 268:27
    let mut _43: types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:270:24: 270:52
    let mut _44: u64;                    // in scope 0 at cita-executor/src/postman.rs:270:41: 270:51
    let mut _45: (u64, bool);            // in scope 0 at cita-executor/src/postman.rs:270:41: 270:51
    let mut _47: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _48: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _49: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _50: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _51: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _52: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _53: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _54: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _55: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _56: &[&str];                // in scope 0 at cita-executor/src/postman.rs:273:16: 273:43
    let mut _57: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _58: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _59: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _60: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:273:45: 273:51
    let _61: &u64;                       // in scope 0 at cita-executor/src/postman.rs:273:45: 273:51
    let mut _63: &libproto::ExecutedResult; // in scope 0 at cita-executor/src/postman.rs:274:31: 274:63
    let _64: &libproto::ExecutedResult;  // in scope 0 at cita-executor/src/postman.rs:274:31: 274:55
    let mut _65: std::option::Option<&libproto::ExecutedResult>; // in scope 0 at cita-executor/src/postman.rs:274:31: 274:46
    let mut _67: libproto::ExecutedResult; // in scope 0 at cita-executor/src/postman.rs:275:28: 275:43
    let _68: ();                         // in scope 0 at cita-executor/src/postman.rs:276:9: 279:10
    let mut _69: std::string::String;    // in scope 0 at cita-executor/src/postman.rs:277:13: 277:60
    let mut _70: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _71: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _72: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _73: std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:278:13: 278:36
    let mut _74: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-executor/src/postman.rs:278:13: 278:27
    let mut _75: libproto::Message;      // in scope 0 at cita-executor/src/postman.rs:278:13: 278:16
    let mut _85: bool;                   // in scope 0 at cita-executor/src/postman.rs:279:9: 279:10
    let mut _86: bool;                   // in scope 0 at cita-executor/src/postman.rs:281:5: 281:6
    scope 1 {
        debug lvl => _5;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _82: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _83: &[&str; 1];         // in scope 1 at cita-executor/src/postman.rs:231:20: 231:86
        let mut _84: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
    scope 2 {
        debug executed_result => _16;    // in scope 2 at cita-executor/src/postman.rs:235:13: 235:28
        let _20: log::Level;             // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let _46: log::Level;             // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let _62: libproto::ExecutedResult; // in scope 2 at cita-executor/src/postman.rs:274:13: 274:28
        scope 3 {
            debug lvl => _20;            // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _79: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _80: &[&str; 3];     // in scope 3 at cita-executor/src/postman.rs:264:17: 265:40
            let mut _81: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
        scope 4 {
            debug lvl => _46;            // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _76: &(&str, &str, &str, u32); // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _77: &[&str; 2];     // in scope 4 at cita-executor/src/postman.rs:273:16: 273:43
            let mut _78: &log::LevelFilter; // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
        scope 5 {
            debug executed_result => _62; // in scope 5 at cita-executor/src/postman.rs:274:13: 274:28
            let _66: libproto::Message;  // in scope 5 at cita-executor/src/postman.rs:275:13: 275:16
            scope 6 {
                debug msg => _66;        // in scope 6 at cita-executor/src/postman.rs:275:13: 275:16
            }
        }
    }

    bb0: {
        _86 = const false;               // scope 0 at cita-executor/src/postman.rs:230:9: 233:10
        _85 = const false;               // scope 0 at cita-executor/src/postman.rs:230:9: 233:10
        _4 = Postman::get_current_height(_1) -> bb1; // scope 0 at cita-executor/src/postman.rs:230:21: 230:46
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:230:26: 230:44
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) -> u64 {Postman::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Gt(_2, move _4);            // scope 0 at cita-executor/src/postman.rs:230:12: 230:46
        switchInt(move _3) -> [0: bb12, otherwise: bb2]; // scope 0 at cita-executor/src/postman.rs:230:12: 230:46
    }

    bb2: {
        _5 = log::Level::Error;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _8 = &_5;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _84 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::send_executed_info_to_chain, [], Some(promoted[8])) }
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, _84) -> bb6; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb5;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        _10 = &_5;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _12 = log::max_level() -> bb7;   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _6) -> [0: bb11, otherwise: bb9]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb6: {
        switchInt(move _7) -> [0: bb3, otherwise: bb4]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _11 = &_12;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _9 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _10, move _11) -> bb8; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb8: {
        _6 = move _9;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb5;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        _83 = const _;                   // scope 1 at cita-executor/src/postman.rs:231:20: 231:86
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:231:20: 231:86
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::send_executed_info_to_chain, [], Some(promoted[7])) }
        _15 = _83 as &[&str] (Pointer(Unsize)); // scope 1 at cita-executor/src/postman.rs:231:20: 231:86
        _14 = Arguments::<'_>::new_const(move _15) -> bb10; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb10: {
        _82 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::send_executed_info_to_chain, [], Some(promoted[6])) }
        _13 = log::__private_api_log(move _14, _5, _82) -> bb11; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = Result::<(), types::block_number::BlockTag>::Ok(const ()); // scope 0 at cita-executor/src/postman.rs:232:20: 232:26
        goto -> bb49;                    // scope 0 at no-location
    }

    bb12: {
        _17 = &((*_1).0: backlogs::Backlogs); // scope 0 at cita-executor/src/postman.rs:235:31: 235:73
        _16 = Backlogs::get_completed_result(move _17, _2) -> bb13; // scope 0 at cita-executor/src/postman.rs:235:31: 235:73
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:235:45: 235:65
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs, u64) -> std::option::Option<&'a libproto::ExecutedResult> {Backlogs::get_completed_result}, val: Value(<ZST>) }
    }

    bb13: {
        _19 = &_16;                      // scope 2 at cita-executor/src/postman.rs:262:12: 262:37
        _18 = std::option::Option::<&libproto::ExecutedResult>::is_none(move _19) -> bb14; // scope 2 at cita-executor/src/postman.rs:262:12: 262:37
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:262:28: 262:35
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<&libproto::ExecutedResult>) -> bool {std::option::Option::<&libproto::ExecutedResult>::is_none}, val: Value(<ZST>) }
    }

    bb14: {
        switchInt(move _18) -> [0: bb31, otherwise: bb15]; // scope 2 at cita-executor/src/postman.rs:262:12: 262:37
    }

    bb15: {
        _20 = log::Level::Warn;          // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _23 = &_20;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _81 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::send_executed_info_to_chain, [], Some(promoted[5])) }
        _22 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _23, _81) -> bb19; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb16: {
        _21 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb18;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb17: {
        _25 = &_20;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _27 = log::max_level() -> bb20;  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _21) -> [0: bb29, otherwise: bb22]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb19: {
        switchInt(move _22) -> [0: bb16, otherwise: bb17]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb20: {
        _26 = &_27;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _24 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _25, move _26) -> bb21; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb21: {
        _21 = move _24;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb18;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb22: {
        _80 = const _;                   // scope 3 at cita-executor/src/postman.rs:264:17: 265:40
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:264:17: 265:40
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Postman::send_executed_info_to_chain, [], Some(promoted[4])) }
        _30 = _80 as &[&str] (Pointer(Unsize)); // scope 3 at cita-executor/src/postman.rs:264:17: 265:40
        _35 = &_2;                       // scope 3 at cita-executor/src/postman.rs:266:17: 266:23
        _34 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_35) -> bb23; // scope 3 at cita-executor/src/postman.rs:266:17: 266:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:266:17: 266:23
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb23: {
        _38 = Postman::get_current_height(_1) -> bb24; // scope 3 at cita-executor/src/postman.rs:267:17: 267:42
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:267:22: 267:40
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) -> u64 {Postman::get_current_height}, val: Value(<ZST>) }
    }

    bb24: {
        _37 = &_38;                      // scope 3 at cita-executor/src/postman.rs:267:17: 267:42
        _36 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_37) -> bb25; // scope 3 at cita-executor/src/postman.rs:267:17: 267:42
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:267:17: 267:42
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb25: {
        _42 = CheckedSub(_2, const 1_u64); // scope 3 at cita-executor/src/postman.rs:268:17: 268:27
        assert(!move (_42.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 1_u64) -> bb26; // scope 3 at cita-executor/src/postman.rs:268:17: 268:27
    }

    bb26: {
        _41 = move (_42.0: u64);         // scope 3 at cita-executor/src/postman.rs:268:17: 268:27
        _40 = &_41;                      // scope 3 at cita-executor/src/postman.rs:268:17: 268:27
        _39 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_40) -> bb27; // scope 3 at cita-executor/src/postman.rs:268:17: 268:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:268:17: 268:27
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb27: {
        _33 = [move _34, move _36, move _39]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _32 = &_33;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _31 = _32 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _29 = Arguments::<'_>::new_v1(move _30, move _31) -> bb28; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb28: {
        _79 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::send_executed_info_to_chain, [], Some(promoted[3])) }
        _28 = log::__private_api_log(move _29, _20, _79) -> bb29; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb29: {
        _45 = CheckedSub(_2, const 1_u64); // scope 2 at cita-executor/src/postman.rs:270:41: 270:51
        assert(!move (_45.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 1_u64) -> bb30; // scope 2 at cita-executor/src/postman.rs:270:41: 270:51
    }

    bb30: {
        _44 = move (_45.0: u64);         // scope 2 at cita-executor/src/postman.rs:270:41: 270:51
        _43 = types::block_number::BlockTag::Height(move _44); // scope 2 at cita-executor/src/postman.rs:270:24: 270:52
        _0 = Result::<(), types::block_number::BlockTag>::Err(move _43); // scope 2 at cita-executor/src/postman.rs:270:20: 270:53
        goto -> bb49;                    // scope 0 at no-location
    }

    bb31: {
        _46 = log::Level::Trace;         // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _49 = &_46;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _78 = const _;                   // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::send_executed_info_to_chain, [], Some(promoted[2])) }
        _48 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _49, _78) -> bb35; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb32: {
        _47 = const false;               // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb34;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb33: {
        _51 = &_46;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _53 = log::max_level() -> bb36;  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb34: {
        switchInt(move _47) -> [0: bb41, otherwise: bb38]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb35: {
        switchInt(move _48) -> [0: bb32, otherwise: bb33]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb36: {
        _52 = &_53;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _50 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _51, move _52) -> bb37; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb37: {
        _47 = move _50;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb34;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb38: {
        _77 = const _;                   // scope 4 at cita-executor/src/postman.rs:273:16: 273:43
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:273:16: 273:43
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Postman::send_executed_info_to_chain, [], Some(promoted[1])) }
        _56 = _77 as &[&str] (Pointer(Unsize)); // scope 4 at cita-executor/src/postman.rs:273:16: 273:43
        _61 = &_2;                       // scope 4 at cita-executor/src/postman.rs:273:45: 273:51
        _60 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_61) -> bb39; // scope 4 at cita-executor/src/postman.rs:273:45: 273:51
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:273:45: 273:51
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb39: {
        _59 = [move _60];                // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _58 = &_59;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _57 = _58 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _55 = Arguments::<'_>::new_v1(move _56, move _57) -> bb40; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb40: {
        _76 = const _;                   // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::send_executed_info_to_chain, [], Some(promoted[0])) }
        _54 = log::__private_api_log(move _55, _46, _76) -> bb41; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb41: {
        _65 = _16;                       // scope 2 at cita-executor/src/postman.rs:274:31: 274:46
        _64 = std::option::Option::<&libproto::ExecutedResult>::unwrap(move _65) -> bb42; // scope 2 at cita-executor/src/postman.rs:274:31: 274:55
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:274:47: 274:53
                                         // + literal: Const { ty: fn(std::option::Option<&libproto::ExecutedResult>) -> &libproto::ExecutedResult {std::option::Option::<&libproto::ExecutedResult>::unwrap}, val: Value(<ZST>) }
    }

    bb42: {
        _63 = _64;                       // scope 2 at cita-executor/src/postman.rs:274:31: 274:63
        _62 = <libproto::ExecutedResult as Clone>::clone(move _63) -> bb43; // scope 2 at cita-executor/src/postman.rs:274:31: 274:63
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:274:56: 274:61
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::ExecutedResult) -> libproto::ExecutedResult {<libproto::ExecutedResult as Clone>::clone}, val: Value(<ZST>) }
    }

    bb43: {
        _67 = move _62;                  // scope 5 at cita-executor/src/postman.rs:275:28: 275:43
        _66 = <libproto::ExecutedResult as Into<libproto::Message>>::into(move _67) -> bb44; // scope 5 at cita-executor/src/postman.rs:275:28: 275:50
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:275:44: 275:48
                                         // + literal: Const { ty: fn(libproto::ExecutedResult) -> libproto::Message {<libproto::ExecutedResult as Into<libproto::Message>>::into}, val: Value(<ZST>) }
    }

    bb44: {
        _86 = const true;                // scope 5 at cita-executor/src/postman.rs:275:49: 275:50
        _71 = const libproto::router::SubModules::Executor; // scope 6 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x05)) }
        _72 = const libproto::router::MsgType::ExecutedResult; // scope 6 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x10)) }
        _70 = RoutingKey(move _71, move _72); // scope 6 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _69 = <RoutingKey as Into<std::string::String>>::into(move _70) -> [return: bb45, unwind: bb54]; // scope 6 at cita-executor/src/postman.rs:277:13: 277:60
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:277:54: 277:58
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb45: {
        _85 = const true;                // scope 6 at cita-executor/src/postman.rs:277:59: 277:60
        _86 = const false;               // scope 6 at cita-executor/src/postman.rs:278:13: 278:16
        _75 = move _66;                  // scope 6 at cita-executor/src/postman.rs:278:13: 278:16
        _74 = <libproto::Message as libproto::TryInto<Vec<u8>>>::try_into(move _75) -> [return: bb46, unwind: bb52]; // scope 6 at cita-executor/src/postman.rs:278:13: 278:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:278:17: 278:25
                                         // + literal: Const { ty: fn(libproto::Message) -> Result<Vec<u8>, <libproto::Message as libproto::TryInto<Vec<u8>>>::Error> {<libproto::Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb46: {
        _73 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _74) -> [return: bb47, unwind: bb52]; // scope 6 at cita-executor/src/postman.rs:278:13: 278:36
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:278:28: 278:34
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb47: {
        _85 = const false;               // scope 6 at cita-executor/src/postman.rs:276:9: 279:10
        _68 = Postman::response_mq(_1, move _69, move _73) -> [return: bb48, unwind: bb52]; // scope 6 at cita-executor/src/postman.rs:276:9: 279:10
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:276:14: 276:25
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, std::string::String, Vec<u8>) {Postman::response_mq}, val: Value(<ZST>) }
    }

    bb48: {
        _85 = const false;               // scope 6 at cita-executor/src/postman.rs:279:9: 279:10
        _0 = Result::<(), types::block_number::BlockTag>::Ok(const ()); // scope 6 at cita-executor/src/postman.rs:280:9: 280:15
        _86 = const false;               // scope 5 at cita-executor/src/postman.rs:281:5: 281:6
        goto -> bb49;                    // scope 0 at cita-executor/src/postman.rs:281:6: 281:6
    }

    bb49: {
        return;                          // scope 0 at cita-executor/src/postman.rs:281:6: 281:6
    }

    bb50 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:229:5: 281:6
    }

    bb51 (cleanup): {
        drop(_69) -> bb54;               // scope 6 at cita-executor/src/postman.rs:279:9: 279:10
    }

    bb52 (cleanup): {
        switchInt(_85) -> [0: bb54, otherwise: bb51]; // scope 6 at cita-executor/src/postman.rs:279:9: 279:10
    }

    bb53 (cleanup): {
        drop(_66) -> bb50;               // scope 5 at cita-executor/src/postman.rs:281:5: 281:6
    }

    bb54 (cleanup): {
        switchInt(_86) -> [0: bb50, otherwise: bb53]; // scope 5 at cita-executor/src/postman.rs:281:5: 281:6
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::send_executed_info_to_chain: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:273:9: 273:52
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:273:9: 273:52

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:273:9: 273:52
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:273:9: 273:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:273:9: 273:52
        _1 = (move _2, move _4, move _6, const 273_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::send_executed_info_to_chain: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/postman.rs:273:16: 273:43
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/postman.rs:273:16: 273:43

    bb0: {
        _1 = [const "send ", const "-th ExecutedResult"]; // scope 0 at cita-executor/src/postman.rs:273:16: 273:43
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:273:16: 273:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:273:16: 273:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:273:16: 273:43
        return;                          // scope 0 at cita-executor/src/postman.rs:273:16: 273:43
    }
}

promoted[2] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::send_executed_info_to_chain: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::send_executed_info_to_chain: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:263:13: 269:14
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:263:13: 269:14

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:263:13: 269:14
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:263:13: 269:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:263:13: 269:14
        _1 = (move _2, move _4, move _6, const 263_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::send_executed_info_to_chain: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at cita-executor/src/postman.rs:264:17: 265:40
    let mut _1: [&str; 3];               // in scope 0 at cita-executor/src/postman.rs:264:17: 265:40

    bb0: {
        _1 = [const "chain(height=", const ") is lagging behind executor(height=", const "). Gonna roll back to "]; // scope 0 at cita-executor/src/postman.rs:264:17: 265:40
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:264:17: 265:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:264:17: 265:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:264:17: 265:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:264:17: 265:40
        return;                          // scope 0 at cita-executor/src/postman.rs:264:17: 265:40
    }
}

promoted[5] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::send_executed_info_to_chain: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[6] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::send_executed_info_to_chain: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:231:13: 231:87
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:231:13: 231:87

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:231:13: 231:87
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:231:13: 231:87
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:231:13: 231:87
        _1 = (move _2, move _4, move _6, const 231_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[7] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::send_executed_info_to_chain: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:231:20: 231:86
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:231:20: 231:86

    bb0: {
        _1 = [const "This must be because the Executor database was manually deleted."]; // scope 0 at cita-executor/src/postman.rs:231:20: 231:86
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:231:20: 231:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:231:20: 231:86
        return;                          // scope 0 at cita-executor/src/postman.rs:231:20: 231:86
    }
}

promoted[8] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::send_executed_info_to_chain: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::update_backlog(_1: &mut Postman, _2: &str, _3: libproto::Message) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:283:23: 283:32
    debug key => _2;                     // in scope 0 at cita-executor/src/postman.rs:283:34: 283:37
    debug msg => _3;                     // in scope 0 at cita-executor/src/postman.rs:283:45: 283:52
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/postman.rs:283:66: 283:70
    let mut _4: libproto::router::RoutingKey; // in scope 0 at cita-executor/src/postman.rs:284:15: 284:36
    let mut _5: isize;                   // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _6: isize;                   // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _7: isize;                   // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _8: isize;                   // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _9: libproto::SignedProposal; // in scope 0 at cita-executor/src/postman.rs:287:21: 287:33
    let mut _10: std::option::Option<libproto::SignedProposal>; // in scope 0 at cita-executor/src/postman.rs:287:36: 287:62
    let mut _11: &mut libproto::Message; // in scope 0 at cita-executor/src/postman.rs:287:36: 287:62
    let mut _13: libproto::Block;        // in scope 0 at cita-executor/src/postman.rs:288:50: 288:87
    let mut _14: &mut libproto::Proposal; // in scope 0 at cita-executor/src/postman.rs:288:50: 288:87
    let mut _15: libproto::Proposal;     // in scope 0 at cita-executor/src/postman.rs:288:50: 288:74
    let mut _16: &mut libproto::SignedProposal; // in scope 0 at cita-executor/src/postman.rs:288:50: 288:74
    let mut _17: &mut backlogs::Backlogs; // in scope 0 at cita-executor/src/postman.rs:289:17: 289:58
    let mut _18: types::block::OpenBlock; // in scope 0 at cita-executor/src/postman.rs:289:47: 289:57
    let mut _19: libproto::BlockWithProof; // in scope 0 at cita-executor/src/postman.rs:296:21: 296:32
    let mut _20: std::option::Option<libproto::BlockWithProof>; // in scope 0 at cita-executor/src/postman.rs:296:35: 296:62
    let mut _21: &mut libproto::Message; // in scope 0 at cita-executor/src/postman.rs:296:35: 296:62
    let mut _23: libproto::Block;        // in scope 0 at cita-executor/src/postman.rs:297:50: 297:68
    let mut _24: &mut libproto::BlockWithProof; // in scope 0 at cita-executor/src/postman.rs:297:50: 297:68
    let mut _26: &mut libproto::BlockWithProof; // in scope 0 at cita-executor/src/postman.rs:298:37: 298:57
    let mut _27: &mut backlogs::Backlogs; // in scope 0 at cita-executor/src/postman.rs:299:17: 300:73
    let mut _28: types::block::OpenBlock; // in scope 0 at cita-executor/src/postman.rs:300:46: 300:56
    let _29: &libproto::Proof;           // in scope 0 at cita-executor/src/postman.rs:300:58: 300:72
    let mut _30: libproto::SyncResponse; // in scope 0 at cita-executor/src/postman.rs:306:21: 306:33
    let mut _31: std::option::Option<libproto::SyncResponse>; // in scope 0 at cita-executor/src/postman.rs:306:36: 306:60
    let mut _32: &mut libproto::Message; // in scope 0 at cita-executor/src/postman.rs:306:36: 306:60
    let mut _33: std::vec::IntoIter<libproto::Block>; // in scope 0 at cita-executor/src/postman.rs:307:36: 307:70
    let mut _34: std::vec::IntoIter<libproto::Block>; // in scope 0 at cita-executor/src/postman.rs:307:36: 307:70
    let mut _35: protobuf::repeated::RepeatedField<libproto::Block>; // in scope 0 at cita-executor/src/postman.rs:307:36: 307:58
    let mut _36: &mut libproto::SyncResponse; // in scope 0 at cita-executor/src/postman.rs:307:36: 307:58
    let mut _38: std::option::Option<libproto::Block>; // in scope 0 at cita-executor/src/postman.rs:307:36: 307:70
    let mut _39: &mut std::vec::IntoIter<libproto::Block>; // in scope 0 at cita-executor/src/postman.rs:307:36: 307:70
    let mut _40: isize;                  // in scope 0 at cita-executor/src/postman.rs:307:17: 312:18
    let mut _43: bool;                   // in scope 0 at cita-executor/src/postman.rs:309:25: 309:70
    let mut _44: &mut backlogs::Backlogs; // in scope 0 at cita-executor/src/postman.rs:309:25: 309:70
    let mut _45: types::block::OpenBlock; // in scope 0 at cita-executor/src/postman.rs:309:59: 309:69
    let mut _46: !;                      // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _47: bool;                   // in scope 0 at cita-executor/src/postman.rs:301:13: 301:14
    let mut _48: bool;                   // in scope 0 at cita-executor/src/postman.rs:290:13: 290:14
    scope 1 {
        debug proposal => _9;            // in scope 1 at cita-executor/src/postman.rs:287:21: 287:33
        let _12: types::block::OpenBlock; // in scope 1 at cita-executor/src/postman.rs:288:21: 288:31
        scope 2 {
            debug open_block => _12;     // in scope 2 at cita-executor/src/postman.rs:288:21: 288:31
        }
    }
    scope 3 {
        debug proofed => _19;            // in scope 3 at cita-executor/src/postman.rs:296:21: 296:32
        let _22: types::block::OpenBlock; // in scope 3 at cita-executor/src/postman.rs:297:21: 297:31
        scope 4 {
            debug open_block => _22;     // in scope 4 at cita-executor/src/postman.rs:297:21: 297:31
            let _25: libproto::Proof;    // in scope 4 at cita-executor/src/postman.rs:298:21: 298:34
            scope 5 {
                debug present_proof => _25; // in scope 5 at cita-executor/src/postman.rs:298:21: 298:34
            }
        }
    }
    scope 6 {
        debug sync_res => _30;           // in scope 6 at cita-executor/src/postman.rs:306:21: 306:33
        let mut _37: std::vec::IntoIter<libproto::Block>; // in scope 6 at cita-executor/src/postman.rs:307:36: 307:70
        scope 7 {
            debug iter => _37;           // in scope 7 at cita-executor/src/postman.rs:307:36: 307:70
            let _41: libproto::Block;    // in scope 7 at cita-executor/src/postman.rs:307:21: 307:32
            scope 8 {
                debug proto_block => _41; // in scope 8 at cita-executor/src/postman.rs:307:21: 307:32
                let _42: types::block::OpenBlock; // in scope 8 at cita-executor/src/postman.rs:308:25: 308:35
                scope 9 {
                    debug open_block => _42; // in scope 9 at cita-executor/src/postman.rs:308:25: 308:35
                }
            }
        }
    }

    bb0: {
        _48 = const false;               // scope 0 at cita-executor/src/postman.rs:284:15: 284:36
        _47 = const false;               // scope 0 at cita-executor/src/postman.rs:284:15: 284:36
        _4 = <RoutingKey as From<&str>>::from(_2) -> [return: bb1, unwind: bb44]; // scope 0 at cita-executor/src/postman.rs:284:15: 284:36
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:284:15: 284:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> RoutingKey {<RoutingKey as From<&str>>::from}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = discriminant((_4.0: libproto::router::SubModules)); // scope 0 at cita-executor/src/postman.rs:284:15: 284:36
        switchInt(move _8) -> [1: bb3, 2: bb4, 3: bb5, otherwise: bb2]; // scope 0 at cita-executor/src/postman.rs:284:9: 284:36
    }

    bb2: {
        _46 = core::panicking::panic(const "not implemented") -> bb44; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _5 = discriminant((_4.1: libproto::router::MsgType)); // scope 0 at cita-executor/src/postman.rs:284:15: 284:36
        switchInt(move _5) -> [4: bb22, otherwise: bb2]; // scope 0 at cita-executor/src/postman.rs:284:9: 284:36
    }

    bb4: {
        _6 = discriminant((_4.1: libproto::router::MsgType)); // scope 0 at cita-executor/src/postman.rs:284:15: 284:36
        switchInt(move _6) -> [31: bb22, otherwise: bb2]; // scope 0 at cita-executor/src/postman.rs:284:9: 284:36
    }

    bb5: {
        _7 = discriminant((_4.1: libproto::router::MsgType)); // scope 0 at cita-executor/src/postman.rs:284:15: 284:36
        switchInt(move _7) -> [7: bb6, 9: bb14, otherwise: bb2]; // scope 0 at cita-executor/src/postman.rs:284:9: 284:36
    }

    bb6: {
        _11 = &mut _3;                   // scope 0 at cita-executor/src/postman.rs:287:36: 287:62
        _10 = libproto::Message::take_signed_proposal(move _11) -> [return: bb7, unwind: bb44]; // scope 0 at cita-executor/src/postman.rs:287:36: 287:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:287:40: 287:60
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Message) -> std::option::Option<libproto::SignedProposal> {libproto::Message::take_signed_proposal}, val: Value(<ZST>) }
    }

    bb7: {
        _9 = std::option::Option::<libproto::SignedProposal>::unwrap(move _10) -> [return: bb8, unwind: bb44]; // scope 0 at cita-executor/src/postman.rs:287:36: 287:71
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:287:63: 287:69
                                         // + literal: Const { ty: fn(std::option::Option<libproto::SignedProposal>) -> libproto::SignedProposal {std::option::Option::<libproto::SignedProposal>::unwrap}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = &mut _9;                   // scope 1 at cita-executor/src/postman.rs:288:50: 288:74
        _15 = libproto::SignedProposal::take_proposal(move _16) -> [return: bb9, unwind: bb43]; // scope 1 at cita-executor/src/postman.rs:288:50: 288:74
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:288:59: 288:72
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::SignedProposal) -> libproto::Proposal {libproto::SignedProposal::take_proposal}, val: Value(<ZST>) }
    }

    bb9: {
        _14 = &mut _15;                  // scope 1 at cita-executor/src/postman.rs:288:50: 288:87
        _13 = libproto::Proposal::take_block(move _14) -> [return: bb10, unwind: bb42]; // scope 1 at cita-executor/src/postman.rs:288:50: 288:87
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:288:75: 288:85
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Proposal) -> libproto::Block {libproto::Proposal::take_block}, val: Value(<ZST>) }
    }

    bb10: {
        _12 = <OpenBlock as From<libproto::Block>>::from(move _13) -> [return: bb11, unwind: bb42]; // scope 1 at cita-executor/src/postman.rs:288:34: 288:88
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:288:34: 288:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(libproto::Block) -> OpenBlock {<OpenBlock as From<libproto::Block>>::from}, val: Value(<ZST>) }
    }

    bb11: {
        _48 = const true;                // scope 1 at cita-executor/src/postman.rs:288:87: 288:88
        drop(_15) -> [return: bb12, unwind: bb49]; // scope 1 at cita-executor/src/postman.rs:288:88: 288:89
    }

    bb12: {
        _17 = &mut ((*_1).0: backlogs::Backlogs); // scope 2 at cita-executor/src/postman.rs:289:17: 289:58
        _48 = const false;               // scope 2 at cita-executor/src/postman.rs:289:47: 289:57
        _18 = move _12;                  // scope 2 at cita-executor/src/postman.rs:289:47: 289:57
        _0 = Backlogs::insert_proposal(move _17, move _18) -> [return: bb13, unwind: bb49]; // scope 2 at cita-executor/src/postman.rs:289:17: 289:58
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:289:31: 289:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut Backlogs, OpenBlock) -> bool {Backlogs::insert_proposal}, val: Value(<ZST>) }
    }

    bb13: {
        _48 = const false;               // scope 1 at cita-executor/src/postman.rs:290:13: 290:14
        drop(_9) -> [return: bb36, unwind: bb44]; // scope 0 at cita-executor/src/postman.rs:290:13: 290:14
    }

    bb14: {
        _21 = &mut _3;                   // scope 0 at cita-executor/src/postman.rs:296:35: 296:62
        _20 = libproto::Message::take_block_with_proof(move _21) -> [return: bb15, unwind: bb44]; // scope 0 at cita-executor/src/postman.rs:296:35: 296:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:296:39: 296:60
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Message) -> std::option::Option<libproto::BlockWithProof> {libproto::Message::take_block_with_proof}, val: Value(<ZST>) }
    }

    bb15: {
        _19 = std::option::Option::<libproto::BlockWithProof>::unwrap(move _20) -> [return: bb16, unwind: bb44]; // scope 0 at cita-executor/src/postman.rs:296:35: 296:71
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:296:63: 296:69
                                         // + literal: Const { ty: fn(std::option::Option<libproto::BlockWithProof>) -> libproto::BlockWithProof {std::option::Option::<libproto::BlockWithProof>::unwrap}, val: Value(<ZST>) }
    }

    bb16: {
        _24 = &mut _19;                  // scope 3 at cita-executor/src/postman.rs:297:50: 297:68
        _23 = libproto::BlockWithProof::take_blk(move _24) -> [return: bb17, unwind: bb41]; // scope 3 at cita-executor/src/postman.rs:297:50: 297:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:297:58: 297:66
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockWithProof) -> libproto::Block {libproto::BlockWithProof::take_blk}, val: Value(<ZST>) }
    }

    bb17: {
        _22 = <OpenBlock as From<libproto::Block>>::from(move _23) -> [return: bb18, unwind: bb41]; // scope 3 at cita-executor/src/postman.rs:297:34: 297:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:297:34: 297:49
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(libproto::Block) -> OpenBlock {<OpenBlock as From<libproto::Block>>::from}, val: Value(<ZST>) }
    }

    bb18: {
        _47 = const true;                // scope 3 at cita-executor/src/postman.rs:297:68: 297:69
        _26 = &mut _19;                  // scope 4 at cita-executor/src/postman.rs:298:37: 298:57
        _25 = libproto::BlockWithProof::take_proof(move _26) -> [return: bb19, unwind: bb47]; // scope 4 at cita-executor/src/postman.rs:298:37: 298:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:298:45: 298:55
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockWithProof) -> libproto::Proof {libproto::BlockWithProof::take_proof}, val: Value(<ZST>) }
    }

    bb19: {
        _27 = &mut ((*_1).0: backlogs::Backlogs); // scope 5 at cita-executor/src/postman.rs:299:17: 300:73
        _47 = const false;               // scope 5 at cita-executor/src/postman.rs:300:46: 300:56
        _28 = move _22;                  // scope 5 at cita-executor/src/postman.rs:300:46: 300:56
        _29 = &_25;                      // scope 5 at cita-executor/src/postman.rs:300:58: 300:72
        _0 = Backlogs::insert_block_with_proof(move _27, move _28, _29) -> [return: bb20, unwind: bb40]; // scope 5 at cita-executor/src/postman.rs:299:17: 300:73
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:300:22: 300:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Backlogs, OpenBlock, &'b libproto::Proof) -> bool {Backlogs::insert_block_with_proof}, val: Value(<ZST>) }
    }

    bb20: {
        drop(_25) -> [return: bb21, unwind: bb47]; // scope 4 at cita-executor/src/postman.rs:301:13: 301:14
    }

    bb21: {
        _47 = const false;               // scope 3 at cita-executor/src/postman.rs:301:13: 301:14
        drop(_19) -> [return: bb36, unwind: bb44]; // scope 0 at cita-executor/src/postman.rs:301:13: 301:14
    }

    bb22: {
        _32 = &mut _3;                   // scope 0 at cita-executor/src/postman.rs:306:36: 306:60
        _31 = libproto::Message::take_sync_response(move _32) -> [return: bb23, unwind: bb44]; // scope 0 at cita-executor/src/postman.rs:306:36: 306:60
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:306:40: 306:58
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Message) -> std::option::Option<libproto::SyncResponse> {libproto::Message::take_sync_response}, val: Value(<ZST>) }
    }

    bb23: {
        _30 = std::option::Option::<libproto::SyncResponse>::unwrap(move _31) -> [return: bb24, unwind: bb44]; // scope 0 at cita-executor/src/postman.rs:306:36: 306:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:306:61: 306:67
                                         // + literal: Const { ty: fn(std::option::Option<libproto::SyncResponse>) -> libproto::SyncResponse {std::option::Option::<libproto::SyncResponse>::unwrap}, val: Value(<ZST>) }
    }

    bb24: {
        _36 = &mut _30;                  // scope 6 at cita-executor/src/postman.rs:307:36: 307:58
        _35 = libproto::SyncResponse::take_blocks(move _36) -> [return: bb25, unwind: bb39]; // scope 6 at cita-executor/src/postman.rs:307:36: 307:58
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:307:45: 307:56
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::SyncResponse) -> protobuf::repeated::RepeatedField<libproto::Block> {libproto::SyncResponse::take_blocks}, val: Value(<ZST>) }
    }

    bb25: {
        _34 = protobuf::repeated::RepeatedField::<libproto::Block>::into_iter(move _35) -> [return: bb26, unwind: bb39]; // scope 6 at cita-executor/src/postman.rs:307:36: 307:70
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:307:59: 307:68
                                         // + literal: Const { ty: fn(protobuf::repeated::RepeatedField<libproto::Block>) -> std::vec::IntoIter<libproto::Block> {protobuf::repeated::RepeatedField::<libproto::Block>::into_iter}, val: Value(<ZST>) }
    }

    bb26: {
        _33 = <std::vec::IntoIter<libproto::Block> as IntoIterator>::into_iter(move _34) -> [return: bb27, unwind: bb39]; // scope 6 at cita-executor/src/postman.rs:307:36: 307:70
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:307:36: 307:70
                                         // + literal: Const { ty: fn(std::vec::IntoIter<libproto::Block>) -> <std::vec::IntoIter<libproto::Block> as IntoIterator>::IntoIter {<std::vec::IntoIter<libproto::Block> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb27: {
        _37 = move _33;                  // scope 6 at cita-executor/src/postman.rs:307:36: 307:70
        goto -> bb28;                    // scope 7 at cita-executor/src/postman.rs:307:17: 312:18
    }

    bb28: {
        _39 = &mut _37;                  // scope 7 at cita-executor/src/postman.rs:307:36: 307:70
        _38 = <std::vec::IntoIter<libproto::Block> as Iterator>::next(_39) -> [return: bb29, unwind: bb38]; // scope 7 at cita-executor/src/postman.rs:307:36: 307:70
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:307:36: 307:70
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<libproto::Block>) -> std::option::Option<<std::vec::IntoIter<libproto::Block> as Iterator>::Item> {<std::vec::IntoIter<libproto::Block> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb29: {
        _40 = discriminant(_38);         // scope 7 at cita-executor/src/postman.rs:307:36: 307:70
        switchInt(move _40) -> [0: bb32, 1: bb30, otherwise: bb31]; // scope 7 at cita-executor/src/postman.rs:307:36: 307:70
    }

    bb30: {
        _41 = move ((_38 as Some).0: libproto::Block); // scope 7 at cita-executor/src/postman.rs:307:21: 307:32
        _42 = <OpenBlock as From<libproto::Block>>::from(move _41) -> [return: bb33, unwind: bb38]; // scope 8 at cita-executor/src/postman.rs:308:38: 308:66
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:308:38: 308:53
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(libproto::Block) -> OpenBlock {<OpenBlock as From<libproto::Block>>::from}, val: Value(<ZST>) }
    }

    bb31: {
        unreachable;                     // scope 7 at cita-executor/src/postman.rs:307:36: 307:70
    }

    bb32: {
        drop(_37) -> [return: bb35, unwind: bb39]; // scope 6 at cita-executor/src/postman.rs:312:17: 312:18
    }

    bb33: {
        _44 = &mut ((*_1).0: backlogs::Backlogs); // scope 9 at cita-executor/src/postman.rs:309:25: 309:70
        _45 = move _42;                  // scope 9 at cita-executor/src/postman.rs:309:59: 309:69
        _43 = Backlogs::insert_synchronized(move _44, move _45) -> [return: bb34, unwind: bb38]; // scope 9 at cita-executor/src/postman.rs:309:25: 309:70
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:309:39: 309:58
                                         // + literal: Const { ty: for<'a> fn(&'a mut Backlogs, OpenBlock) -> bool {Backlogs::insert_synchronized}, val: Value(<ZST>) }
    }

    bb34: {
        goto -> bb28;                    // scope 9 at cita-executor/src/postman.rs:309:24: 309:70
    }

    bb35: {
        _0 = const true;                 // scope 6 at cita-executor/src/postman.rs:313:17: 313:21
        drop(_30) -> [return: bb36, unwind: bb44]; // scope 0 at cita-executor/src/postman.rs:314:13: 314:14
    }

    bb36: {
        drop(_3) -> bb37;                // scope 0 at cita-executor/src/postman.rs:317:5: 317:6
    }

    bb37: {
        return;                          // scope 0 at cita-executor/src/postman.rs:317:6: 317:6
    }

    bb38 (cleanup): {
        drop(_37) -> bb39;               // scope 6 at cita-executor/src/postman.rs:312:17: 312:18
    }

    bb39 (cleanup): {
        drop(_30) -> bb44;               // scope 0 at cita-executor/src/postman.rs:314:13: 314:14
    }

    bb40 (cleanup): {
        drop(_25) -> bb47;               // scope 4 at cita-executor/src/postman.rs:301:13: 301:14
    }

    bb41 (cleanup): {
        drop(_19) -> bb44;               // scope 0 at cita-executor/src/postman.rs:301:13: 301:14
    }

    bb42 (cleanup): {
        drop(_15) -> bb43;               // scope 1 at cita-executor/src/postman.rs:288:88: 288:89
    }

    bb43 (cleanup): {
        drop(_9) -> bb44;                // scope 0 at cita-executor/src/postman.rs:290:13: 290:14
    }

    bb44 (cleanup): {
        drop(_3) -> bb45;                // scope 0 at cita-executor/src/postman.rs:317:5: 317:6
    }

    bb45 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:283:5: 317:6
    }

    bb46 (cleanup): {
        drop(_22) -> bb41;               // scope 3 at cita-executor/src/postman.rs:301:13: 301:14
    }

    bb47 (cleanup): {
        switchInt(_47) -> [0: bb41, otherwise: bb46]; // scope 3 at cita-executor/src/postman.rs:301:13: 301:14
    }

    bb48 (cleanup): {
        drop(_12) -> bb43;               // scope 1 at cita-executor/src/postman.rs:290:13: 290:14
    }

    bb49 (cleanup): {
        switchInt(_48) -> [0: bb43, otherwise: bb48]; // scope 1 at cita-executor/src/postman.rs:290:13: 290:14
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::load_executed_result(_1: &mut Postman, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:319:29: 319:38
    debug height => _2;                  // in scope 0 at cita-executor/src/postman.rs:319:40: 319:46
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:319:53: 319:53
    let _3: libproto::ExecutedResult;    // in scope 0 at cita-executor/src/postman.rs:320:13: 320:28
    let _4: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:321:13: 321:37
    let _5: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:322:13: 322:40
    let _6: ();                          // in scope 0 at cita-executor/src/postman.rs:325:9: 326:62
    let mut _7: &mut backlogs::Backlogs; // in scope 0 at cita-executor/src/postman.rs:325:9: 326:62
    let mut _8: libproto::ExecutedResult; // in scope 0 at cita-executor/src/postman.rs:326:46: 326:61
    scope 1 {
        debug executed_result => _3;     // in scope 1 at cita-executor/src/postman.rs:320:13: 320:28
    }

    bb0: {
        _4 = &((*_1).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 0 at cita-executor/src/postman.rs:321:13: 321:37
        _5 = &((*_1).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 0 at cita-executor/src/postman.rs:322:13: 322:40
        _3 = core::libexecutor::command::load_executed_result(_4, _5, _2) -> bb1; // scope 0 at cita-executor/src/postman.rs:320:31: 324:10
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:320:31: 320:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, u64) -> libproto::ExecutedResult {core::libexecutor::command::load_executed_result}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &mut ((*_1).0: backlogs::Backlogs); // scope 1 at cita-executor/src/postman.rs:325:9: 326:62
        _8 = move _3;                    // scope 1 at cita-executor/src/postman.rs:326:46: 326:61
        _6 = Backlogs::insert_completed_result(move _7, _2, move _8) -> bb2; // scope 1 at cita-executor/src/postman.rs:325:9: 326:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:326:14: 326:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut Backlogs, u64, libproto::ExecutedResult) {Backlogs::insert_completed_result}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-executor/src/postman.rs:327:6: 327:6
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::grow_up(_1: &mut Postman) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:334:16: 334:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:334:27: 334:27
    let _2: u64;                         // in scope 0 at cita-executor/src/postman.rs:335:13: 335:24
    let mut _3: u64;                     // in scope 0 at cita-executor/src/postman.rs:335:27: 335:52
    let mut _4: &postman::Postman;       // in scope 0 at cita-executor/src/postman.rs:335:27: 335:52
    let mut _5: (u64, bool);             // in scope 0 at cita-executor/src/postman.rs:335:27: 335:56
    let mut _6: std::result::Result<core::libexecutor::block::ClosedBlock, std::string::String>; // in scope 0 at cita-executor/src/postman.rs:336:15: 336:50
    let mut _7: &mut backlogs::Backlogs; // in scope 0 at cita-executor/src/postman.rs:336:15: 336:50
    let mut _8: isize;                   // in scope 0 at cita-executor/src/postman.rs:337:13: 337:29
    let mut _11: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _12: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _13: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _14: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _15: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _16: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _17: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _18: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _19: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _20: &[&str];                // in scope 0 at cita-executor/src/postman.rs:338:24: 338:66
    let mut _21: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _23: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:338:68: 338:79
    let _25: &u64;                       // in scope 0 at cita-executor/src/postman.rs:338:68: 338:79
    let _26: ();                         // in scope 0 at cita-executor/src/postman.rs:339:17: 339:51
    let mut _27: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:339:17: 339:51
    let _28: &core::libexecutor::block::ClosedBlock; // in scope 0 at cita-executor/src/postman.rs:339:37: 339:50
    let _30: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:341:21: 341:45
    let _31: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:342:21: 342:48
    let mut _32: core::libexecutor::block::ClosedBlock; // in scope 0 at cita-executor/src/postman.rs:343:21: 343:33
    let _33: ();                         // in scope 0 at cita-executor/src/postman.rs:345:17: 346:75
    let mut _34: &mut backlogs::Backlogs; // in scope 0 at cita-executor/src/postman.rs:345:17: 346:75
    let mut _35: libproto::ExecutedResult; // in scope 0 at cita-executor/src/postman.rs:346:59: 346:74
    let _36: ();                         // in scope 0 at cita-executor/src/postman.rs:347:17: 347:71
    let mut _37: std::result::Result<(), types::block_number::BlockTag>; // in scope 0 at cita-executor/src/postman.rs:347:17: 347:62
    let mut _38: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:347:17: 347:62
    let mut _41: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _42: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _43: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _44: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _45: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _46: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _47: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _48: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _49: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _50: &[&str];                // in scope 0 at cita-executor/src/postman.rs:349:35: 349:39
    let mut _51: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _52: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _53: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _54: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:349:41: 349:47
    let _55: &std::string::String;       // in scope 0 at cita-executor/src/postman.rs:349:41: 349:47
    let mut _62: bool;                   // in scope 0 at cita-executor/src/postman.rs:348:13: 348:14
    scope 1 {
        debug next_height => _2;         // in scope 1 at cita-executor/src/postman.rs:335:13: 335:24
        let _9: core::libexecutor::block::ClosedBlock; // in scope 1 at cita-executor/src/postman.rs:337:16: 337:28
        let _39: std::string::String;    // in scope 1 at cita-executor/src/postman.rs:349:17: 349:23
        scope 2 {
            debug closed_block => _9;    // in scope 2 at cita-executor/src/postman.rs:337:16: 337:28
            let _10: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let _29: libproto::ExecutedResult; // in scope 2 at cita-executor/src/postman.rs:340:21: 340:36
            scope 3 {
                debug lvl => _10;        // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _56: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _57: &[&str; 1]; // in scope 3 at cita-executor/src/postman.rs:338:24: 338:66
                let mut _58: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 4 {
                debug executed_result => _29; // in scope 4 at cita-executor/src/postman.rs:340:21: 340:36
            }
        }
        scope 5 {
            debug reason => _39;         // in scope 5 at cita-executor/src/postman.rs:349:17: 349:23
            let _40: log::Level;         // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 6 {
                debug lvl => _40;        // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _59: &(&str, &str, &str, u32); // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _60: &[&str; 1]; // in scope 6 at cita-executor/src/postman.rs:349:35: 349:39
                let mut _61: &log::LevelFilter; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
        }
    }

    bb0: {
        _62 = const false;               // scope 0 at cita-executor/src/postman.rs:335:13: 335:24
        _4 = &(*_1);                     // scope 0 at cita-executor/src/postman.rs:335:27: 335:52
        _3 = Postman::get_current_height(move _4) -> bb1; // scope 0 at cita-executor/src/postman.rs:335:27: 335:52
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:335:32: 335:50
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) -> u64 {Postman::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = CheckedAdd(_3, const 1_u64); // scope 0 at cita-executor/src/postman.rs:335:27: 335:56
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_u64) -> bb2; // scope 0 at cita-executor/src/postman.rs:335:27: 335:56
    }

    bb2: {
        _2 = move (_5.0: u64);           // scope 0 at cita-executor/src/postman.rs:335:27: 335:56
        _7 = &mut ((*_1).0: backlogs::Backlogs); // scope 1 at cita-executor/src/postman.rs:336:15: 336:50
        _6 = Backlogs::complete(move _7, _2) -> bb3; // scope 1 at cita-executor/src/postman.rs:336:15: 336:50
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:336:29: 336:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut Backlogs, u64) -> Result<ClosedBlock, std::string::String> {Backlogs::complete}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_6);           // scope 1 at cita-executor/src/postman.rs:336:15: 336:50
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at cita-executor/src/postman.rs:336:9: 336:50
    }

    bb4: {
        _39 = move ((_6 as Err).0: std::string::String); // scope 1 at cita-executor/src/postman.rs:349:17: 349:23
        _40 = log::Level::Trace;         // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _43 = &_40;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _61 = const _;                   // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::grow_up, [], Some(promoted[5])) }
        _42 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _43, _61) -> [return: bb25, unwind: bb33]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at cita-executor/src/postman.rs:336:15: 336:50
    }

    bb6: {
        _62 = const true;                // scope 1 at cita-executor/src/postman.rs:337:16: 337:28
        _9 = move ((_6 as Ok).0: core::libexecutor::block::ClosedBlock); // scope 1 at cita-executor/src/postman.rs:337:16: 337:28
        _10 = log::Level::Trace;         // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _13 = &_10;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _58 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::grow_up, [], Some(promoted[2])) }
        _12 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _13, _58) -> [return: bb10, unwind: bb35]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb9;                     // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        _15 = &_10;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _17 = log::max_level() -> [return: bb11, unwind: bb35]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _11) -> [0: bb16, otherwise: bb13]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        switchInt(move _12) -> [0: bb7, otherwise: bb8]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _16 = &_17;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _14 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _15, move _16) -> [return: bb12, unwind: bb35]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb12: {
        _11 = move _14;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb9;                     // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        _57 = const _;                   // scope 3 at cita-executor/src/postman.rs:338:24: 338:66
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:338:24: 338:66
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::grow_up, [], Some(promoted[1])) }
        _20 = _57 as &[&str] (Pointer(Unsize)); // scope 3 at cita-executor/src/postman.rs:338:24: 338:66
        _25 = &_2;                       // scope 3 at cita-executor/src/postman.rs:338:68: 338:79
        _24 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_25) -> [return: bb14, unwind: bb35]; // scope 3 at cita-executor/src/postman.rs:338:68: 338:79
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:338:68: 338:79
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb14: {
        _23 = [move _24];                // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _22 = &_23;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _21 = _22 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _19 = Arguments::<'_>::new_v1(move _20, move _21) -> [return: bb15, unwind: bb35]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb15: {
        _56 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::grow_up, [], Some(promoted[0])) }
        _18 = log::__private_api_log(move _19, _10, _56) -> [return: bb37, unwind: bb35]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb16: {
        _27 = &(*_1);                    // scope 2 at cita-executor/src/postman.rs:339:17: 339:51
        _28 = &_9;                       // scope 2 at cita-executor/src/postman.rs:339:37: 339:50
        _26 = Postman::pub_black_list(move _27, _28) -> [return: bb17, unwind: bb35]; // scope 2 at cita-executor/src/postman.rs:339:17: 339:51
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:339:22: 339:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Postman, &'b ClosedBlock) {Postman::pub_black_list}, val: Value(<ZST>) }
    }

    bb17: {
        _30 = &((*_1).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 2 at cita-executor/src/postman.rs:341:21: 341:45
        _31 = &((*_1).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 2 at cita-executor/src/postman.rs:342:21: 342:48
        _62 = const false;               // scope 2 at cita-executor/src/postman.rs:343:21: 343:33
        _32 = move _9;                   // scope 2 at cita-executor/src/postman.rs:343:21: 343:33
        _29 = core::libexecutor::command::grow(_30, _31, move _32) -> [return: bb18, unwind: bb35]; // scope 2 at cita-executor/src/postman.rs:340:39: 344:18
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:340:39: 340:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, ClosedBlock) -> libproto::ExecutedResult {core::libexecutor::command::grow}, val: Value(<ZST>) }
    }

    bb18: {
        _34 = &mut ((*_1).0: backlogs::Backlogs); // scope 4 at cita-executor/src/postman.rs:345:17: 346:75
        _35 = move _29;                  // scope 4 at cita-executor/src/postman.rs:346:59: 346:74
        _33 = Backlogs::insert_completed_result(move _34, _2, move _35) -> [return: bb19, unwind: bb35]; // scope 4 at cita-executor/src/postman.rs:345:17: 346:75
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:346:22: 346:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut Backlogs, u64, libproto::ExecutedResult) {Backlogs::insert_completed_result}, val: Value(<ZST>) }
    }

    bb19: {
        _38 = &(*_1);                    // scope 4 at cita-executor/src/postman.rs:347:17: 347:62
        _37 = Postman::send_executed_info_to_chain(move _38, _2) -> [return: bb20, unwind: bb35]; // scope 4 at cita-executor/src/postman.rs:347:17: 347:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:347:22: 347:49
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, u64) -> Result<(), types::block_number::BlockTag> {Postman::send_executed_info_to_chain}, val: Value(<ZST>) }
    }

    bb20: {
        _36 = Result::<(), types::block_number::BlockTag>::unwrap(move _37) -> [return: bb21, unwind: bb35]; // scope 4 at cita-executor/src/postman.rs:347:17: 347:71
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:347:63: 347:69
                                         // + literal: Const { ty: fn(Result<(), types::block_number::BlockTag>) {Result::<(), types::block_number::BlockTag>::unwrap}, val: Value(<ZST>) }
    }

    bb21: {
        _62 = const false;               // scope 1 at cita-executor/src/postman.rs:348:13: 348:14
        goto -> bb32;                    // scope 1 at cita-executor/src/postman.rs:348:13: 348:14
    }

    bb22: {
        _41 = const false;               // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb24;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb23: {
        _45 = &_40;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _47 = log::max_level() -> [return: bb26, unwind: bb33]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb24: {
        switchInt(move _41) -> [0: bb31, otherwise: bb28]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb25: {
        switchInt(move _42) -> [0: bb22, otherwise: bb23]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb26: {
        _46 = &_47;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _44 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _45, move _46) -> [return: bb27, unwind: bb33]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb27: {
        _41 = move _44;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb24;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb28: {
        _60 = const _;                   // scope 6 at cita-executor/src/postman.rs:349:35: 349:39
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:349:35: 349:39
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::grow_up, [], Some(promoted[4])) }
        _50 = _60 as &[&str] (Pointer(Unsize)); // scope 6 at cita-executor/src/postman.rs:349:35: 349:39
        _55 = &_39;                      // scope 6 at cita-executor/src/postman.rs:349:41: 349:47
        _54 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_55) -> [return: bb29, unwind: bb33]; // scope 6 at cita-executor/src/postman.rs:349:41: 349:47
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:349:41: 349:47
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb29: {
        _53 = [move _54];                // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _52 = &_53;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _51 = _52 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _49 = Arguments::<'_>::new_v1(move _50, move _51) -> [return: bb30, unwind: bb33]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb30: {
        _59 = const _;                   // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::grow_up, [], Some(promoted[3])) }
        _48 = log::__private_api_log(move _49, _40, _59) -> [return: bb38, unwind: bb33]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb31: {
        drop(_39) -> bb32;               // scope 1 at cita-executor/src/postman.rs:349:47: 349:48
    }

    bb32: {
        return;                          // scope 0 at cita-executor/src/postman.rs:351:6: 351:6
    }

    bb33 (cleanup): {
        drop(_39) -> bb36;               // scope 1 at cita-executor/src/postman.rs:349:47: 349:48
    }

    bb34 (cleanup): {
        drop(_9) -> bb36;                // scope 1 at cita-executor/src/postman.rs:348:13: 348:14
    }

    bb35 (cleanup): {
        switchInt(_62) -> [0: bb36, otherwise: bb34]; // scope 1 at cita-executor/src/postman.rs:348:13: 348:14
    }

    bb36 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:334:5: 351:6
    }

    bb37: {
        goto -> bb16;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb38: {
        goto -> bb31;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::grow_up: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:338:17: 338:80
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:338:17: 338:80

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:338:17: 338:80
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:338:17: 338:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:338:17: 338:80
        _1 = (move _2, move _4, move _6, const 338_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::grow_up: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:338:24: 338:66
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:338:24: 338:66

    bb0: {
        _1 = [const "postman notice executor to grow up to "]; // scope 0 at cita-executor/src/postman.rs:338:24: 338:66
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:338:24: 338:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:338:24: 338:66
        return;                          // scope 0 at cita-executor/src/postman.rs:338:24: 338:66
    }
}

promoted[2] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::grow_up: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::grow_up: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:349:28: 349:48
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:349:28: 349:48

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:349:28: 349:48
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:349:28: 349:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:349:28: 349:48
        _1 = (move _2, move _4, move _6, const 349_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::grow_up: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:349:35: 349:39
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:349:35: 349:39

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-executor/src/postman.rs:349:35: 349:39
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:349:35: 349:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:349:35: 349:39
        return;                          // scope 0 at cita-executor/src/postman.rs:349:35: 349:39
    }
}

promoted[5] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::grow_up: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::execute_next_block(_1: &mut Postman) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:353:27: 353:36
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:353:38: 353:38
    let _2: u64;                         // in scope 0 at cita-executor/src/postman.rs:354:13: 354:24
    let mut _3: u64;                     // in scope 0 at cita-executor/src/postman.rs:354:27: 354:52
    let mut _4: &postman::Postman;       // in scope 0 at cita-executor/src/postman.rs:354:27: 354:52
    let mut _5: (u64, bool);             // in scope 0 at cita-executor/src/postman.rs:354:27: 354:56
    let mut _6: std::result::Result<&types::block::OpenBlock, std::string::String>; // in scope 0 at cita-executor/src/postman.rs:355:15: 355:47
    let mut _7: &backlogs::Backlogs;     // in scope 0 at cita-executor/src/postman.rs:355:15: 355:47
    let mut _8: isize;                   // in scope 0 at cita-executor/src/postman.rs:356:13: 356:27
    let mut _11: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _12: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _13: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _14: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _15: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _16: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _17: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _18: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _19: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _20: &[&str];                // in scope 0 at cita-executor/src/postman.rs:357:24: 357:62
    let mut _21: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _23: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:357:64: 357:75
    let _25: &u64;                       // in scope 0 at cita-executor/src/postman.rs:357:64: 357:75
    let mut _26: std::result::Result<(), crossbeam_channel::SendError<types::block::OpenBlock>>; // in scope 0 at cita-executor/src/postman.rs:358:25: 358:69
    let mut _27: &crossbeam_channel::Sender<types::block::OpenBlock>; // in scope 0 at cita-executor/src/postman.rs:358:25: 358:69
    let mut _28: types::block::OpenBlock; // in scope 0 at cita-executor/src/postman.rs:358:50: 358:68
    let mut _31: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _32: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _33: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _34: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _35: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _36: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _37: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _38: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _39: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _40: &[&str];                // in scope 0 at cita-executor/src/postman.rs:360:35: 360:39
    let mut _41: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _42: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _43: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _44: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:360:41: 360:47
    let _45: &std::string::String;       // in scope 0 at cita-executor/src/postman.rs:360:41: 360:47
    scope 1 {
        debug next_height => _2;         // in scope 1 at cita-executor/src/postman.rs:354:13: 354:24
        let _9: &types::block::OpenBlock; // in scope 1 at cita-executor/src/postman.rs:356:16: 356:26
        let _29: std::string::String;    // in scope 1 at cita-executor/src/postman.rs:360:17: 360:23
        scope 2 {
            debug open_block => _9;      // in scope 2 at cita-executor/src/postman.rs:356:16: 356:26
            let _10: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 3 {
                debug lvl => _10;        // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _46: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _47: &[&str; 2]; // in scope 3 at cita-executor/src/postman.rs:357:24: 357:62
                let mut _48: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 4 {
            }
        }
        scope 5 {
            debug reason => _29;         // in scope 5 at cita-executor/src/postman.rs:360:17: 360:23
            let _30: log::Level;         // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 6 {
                debug lvl => _30;        // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _49: &(&str, &str, &str, u32); // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _50: &[&str; 1]; // in scope 6 at cita-executor/src/postman.rs:360:35: 360:39
                let mut _51: &log::LevelFilter; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
        }
    }

    bb0: {
        _4 = &(*_1);                     // scope 0 at cita-executor/src/postman.rs:354:27: 354:52
        _3 = Postman::get_current_height(move _4) -> bb1; // scope 0 at cita-executor/src/postman.rs:354:27: 354:52
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:354:32: 354:50
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) -> u64 {Postman::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = CheckedAdd(_3, const 1_u64); // scope 0 at cita-executor/src/postman.rs:354:27: 354:56
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_u64) -> bb2; // scope 0 at cita-executor/src/postman.rs:354:27: 354:56
    }

    bb2: {
        _2 = move (_5.0: u64);           // scope 0 at cita-executor/src/postman.rs:354:27: 354:56
        _7 = &((*_1).0: backlogs::Backlogs); // scope 1 at cita-executor/src/postman.rs:355:15: 355:47
        _6 = Backlogs::ready(move _7, _2) -> bb3; // scope 1 at cita-executor/src/postman.rs:355:15: 355:47
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:355:29: 355:34
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs, u64) -> Result<&'a OpenBlock, std::string::String> {Backlogs::ready}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_6);           // scope 1 at cita-executor/src/postman.rs:355:15: 355:47
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at cita-executor/src/postman.rs:355:9: 355:47
    }

    bb4: {
        _29 = move ((_6 as Err).0: std::string::String); // scope 1 at cita-executor/src/postman.rs:360:17: 360:23
        _30 = log::Level::Trace;         // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _33 = &_30;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _51 = const _;                   // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::execute_next_block, [], Some(promoted[5])) }
        _32 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _33, _51) -> [return: bb22, unwind: bb30]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at cita-executor/src/postman.rs:355:15: 355:47
    }

    bb6: {
        _9 = ((_6 as Ok).0: &types::block::OpenBlock); // scope 1 at cita-executor/src/postman.rs:356:16: 356:26
        _10 = log::Level::Trace;         // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _13 = &_10;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _48 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::execute_next_block, [], Some(promoted[2])) }
        _12 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _13, _48) -> bb10; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb9;                     // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        _15 = &_10;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _17 = log::max_level() -> bb11;  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _11) -> [0: bb16, otherwise: bb13]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        switchInt(move _12) -> [0: bb7, otherwise: bb8]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _16 = &_17;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _14 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _15, move _16) -> bb12; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb12: {
        _11 = move _14;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb9;                     // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        _47 = const _;                   // scope 3 at cita-executor/src/postman.rs:357:24: 357:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:357:24: 357:62
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Postman::execute_next_block, [], Some(promoted[1])) }
        _20 = _47 as &[&str] (Pointer(Unsize)); // scope 3 at cita-executor/src/postman.rs:357:24: 357:62
        _25 = &_2;                       // scope 3 at cita-executor/src/postman.rs:357:64: 357:75
        _24 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_25) -> bb14; // scope 3 at cita-executor/src/postman.rs:357:64: 357:75
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:357:64: 357:75
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb14: {
        _23 = [move _24];                // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _22 = &_23;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _21 = _22 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _19 = Arguments::<'_>::new_v1(move _20, move _21) -> bb15; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb15: {
        _46 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::execute_next_block, [], Some(promoted[0])) }
        _18 = log::__private_api_log(move _19, _10, _46) -> bb16; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb16: {
        _27 = &((*_1).4: crossbeam_channel::Sender<types::block::OpenBlock>); // scope 2 at cita-executor/src/postman.rs:358:25: 358:69
        _28 = <OpenBlock as Clone>::clone(_9) -> bb17; // scope 2 at cita-executor/src/postman.rs:358:50: 358:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:358:61: 358:66
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> OpenBlock {<OpenBlock as Clone>::clone}, val: Value(<ZST>) }
    }

    bb17: {
        _26 = crossbeam_channel::Sender::<OpenBlock>::send(move _27, move _28) -> bb18; // scope 2 at cita-executor/src/postman.rs:358:25: 358:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:358:45: 358:49
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Sender<OpenBlock>, OpenBlock) -> Result<(), crossbeam_channel::SendError<OpenBlock>> {crossbeam_channel::Sender::<OpenBlock>::send}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_26) -> bb29;               // scope 2 at cita-executor/src/postman.rs:358:69: 358:70
    }

    bb19: {
        _31 = const false;               // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb21;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb20: {
        _35 = &_30;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _37 = log::max_level() -> [return: bb23, unwind: bb30]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb21: {
        switchInt(move _31) -> [0: bb28, otherwise: bb25]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb22: {
        switchInt(move _32) -> [0: bb19, otherwise: bb20]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb23: {
        _36 = &_37;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _34 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _35, move _36) -> [return: bb24, unwind: bb30]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb24: {
        _31 = move _34;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb21;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb25: {
        _50 = const _;                   // scope 6 at cita-executor/src/postman.rs:360:35: 360:39
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:360:35: 360:39
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::execute_next_block, [], Some(promoted[4])) }
        _40 = _50 as &[&str] (Pointer(Unsize)); // scope 6 at cita-executor/src/postman.rs:360:35: 360:39
        _45 = &_29;                      // scope 6 at cita-executor/src/postman.rs:360:41: 360:47
        _44 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_45) -> [return: bb26, unwind: bb30]; // scope 6 at cita-executor/src/postman.rs:360:41: 360:47
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:360:41: 360:47
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb26: {
        _43 = [move _44];                // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _42 = &_43;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _41 = _42 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _39 = Arguments::<'_>::new_v1(move _40, move _41) -> [return: bb27, unwind: bb30]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb27: {
        _49 = const _;                   // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::execute_next_block, [], Some(promoted[3])) }
        _38 = log::__private_api_log(move _39, _30, _49) -> [return: bb32, unwind: bb30]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb28: {
        drop(_29) -> bb29;               // scope 1 at cita-executor/src/postman.rs:360:47: 360:48
    }

    bb29: {
        return;                          // scope 0 at cita-executor/src/postman.rs:362:6: 362:6
    }

    bb30 (cleanup): {
        drop(_29) -> bb31;               // scope 1 at cita-executor/src/postman.rs:360:47: 360:48
    }

    bb31 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:353:5: 362:6
    }

    bb32: {
        goto -> bb28;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::execute_next_block: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:357:17: 357:76
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:357:17: 357:76

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:357:17: 357:76
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:357:17: 357:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:357:17: 357:76
        _1 = (move _2, move _4, move _6, const 357_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::execute_next_block: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/postman.rs:357:24: 357:62
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/postman.rs:357:24: 357:62

    bb0: {
        _1 = [const "postman send ", const "-th block to executor"]; // scope 0 at cita-executor/src/postman.rs:357:24: 357:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:357:24: 357:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:357:24: 357:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:357:24: 357:62
        return;                          // scope 0 at cita-executor/src/postman.rs:357:24: 357:62
    }
}

promoted[2] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::execute_next_block: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::execute_next_block: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:360:28: 360:48
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:360:28: 360:48

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:360:28: 360:48
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:360:28: 360:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:360:28: 360:48
        _1 = (move _2, move _4, move _6, const 360_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::execute_next_block: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:360:35: 360:39
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:360:35: 360:39

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-executor/src/postman.rs:360:35: 360:39
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:360:35: 360:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:360:35: 360:39
        return;                          // scope 0 at cita-executor/src/postman.rs:360:35: 360:39
    }
}

promoted[5] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::execute_next_block: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_init_black_list(_1: &Postman) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:365:28: 365:33
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:365:35: 365:35
    let mut _2: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:366:13: 366:26
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:367:9: 367:43
    let mut _4: &mut std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:367:9: 367:43
    let mut _5: cita_types::H160;        // in scope 0 at cita-executor/src/postman.rs:367:24: 367:42
    let mut _7: core::libexecutor::blacklist::BlackList; // in scope 0 at cita-executor/src/postman.rs:368:26: 369:47
    let mut _8: core::libexecutor::blacklist::BlackList; // in scope 0 at cita-executor/src/postman.rs:368:26: 368:42
    let mut _9: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:369:29: 369:46
    let mut _10: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:369:29: 369:46
    let mut _11: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:370:29: 370:38
    let mut _13: libproto::BlackList;    // in scope 0 at cita-executor/src/postman.rs:372:41: 372:62
    let mut _14: &core::libexecutor::blacklist::BlackList; // in scope 0 at cita-executor/src/postman.rs:372:41: 372:62
    let _15: ();                         // in scope 0 at cita-executor/src/postman.rs:373:9: 376:10
    let mut _16: std::string::String;    // in scope 0 at cita-executor/src/postman.rs:374:13: 374:55
    let mut _17: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _18: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _19: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _20: std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:375:13: 375:49
    let mut _21: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-executor/src/postman.rs:375:13: 375:40
    let mut _22: libproto::Message;      // in scope 0 at cita-executor/src/postman.rs:375:13: 375:29
    let mut _23: bool;                   // in scope 0 at cita-executor/src/postman.rs:376:9: 376:10
    let mut _24: bool;                   // in scope 0 at cita-executor/src/postman.rs:377:5: 377:6
    let mut _25: bool;                   // in scope 0 at cita-executor/src/postman.rs:369:46: 369:47
    let mut _26: bool;                   // in scope 0 at cita-executor/src/postman.rs:377:5: 377:6
    scope 1 {
        debug init_list => _2;           // in scope 1 at cita-executor/src/postman.rs:366:13: 366:26
        let _6: core::libexecutor::blacklist::BlackList; // in scope 1 at cita-executor/src/postman.rs:368:13: 368:23
        scope 2 {
            debug black_list => _6;      // in scope 2 at cita-executor/src/postman.rs:368:13: 368:23
            let _12: libproto::Message;  // in scope 2 at cita-executor/src/postman.rs:372:13: 372:29
            scope 3 {
                debug black_list_bytes => _12; // in scope 3 at cita-executor/src/postman.rs:372:13: 372:29
            }
        }
    }

    bb0: {
        _25 = const false;               // scope 0 at cita-executor/src/postman.rs:366:13: 366:26
        _26 = const false;               // scope 0 at cita-executor/src/postman.rs:366:13: 366:26
        _24 = const false;               // scope 0 at cita-executor/src/postman.rs:366:13: 366:26
        _23 = const false;               // scope 0 at cita-executor/src/postman.rs:366:13: 366:26
        _26 = const true;                // scope 0 at cita-executor/src/postman.rs:366:29: 366:39
        _2 = Vec::<H160>::new() -> bb1;  // scope 0 at cita-executor/src/postman.rs:366:29: 366:39
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:366:29: 366:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<H160> {Vec::<H160>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _2;                    // scope 1 at cita-executor/src/postman.rs:367:9: 367:43
        _5 = <H160 as Default>::default() -> [return: bb2, unwind: bb24]; // scope 1 at cita-executor/src/postman.rs:367:24: 367:42
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:367:24: 367:40
                                         // + literal: Const { ty: fn() -> H160 {<H160 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Vec::<H160>::push(move _4, move _5) -> [return: bb3, unwind: bb24]; // scope 1 at cita-executor/src/postman.rs:367:9: 367:43
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:367:19: 367:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<H160>, H160) {Vec::<H160>::push}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = core::libexecutor::blacklist::BlackList::new() -> [return: bb4, unwind: bb24]; // scope 1 at cita-executor/src/postman.rs:368:26: 368:42
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:368:26: 368:40
                                         // + literal: Const { ty: fn() -> core::libexecutor::blacklist::BlackList {core::libexecutor::blacklist::BlackList::new}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = const true;                // scope 1 at cita-executor/src/postman.rs:369:29: 369:46
        _10 = &_2;                       // scope 1 at cita-executor/src/postman.rs:369:29: 369:46
        _9 = <Vec<H160> as Clone>::clone(move _10) -> [return: bb5, unwind: bb22]; // scope 1 at cita-executor/src/postman.rs:369:29: 369:46
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:369:39: 369:44
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> Vec<H160> {<Vec<H160> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = const false;               // scope 1 at cita-executor/src/postman.rs:368:26: 369:47
        _7 = core::libexecutor::blacklist::BlackList::set_black_list(move _8, move _9) -> [return: bb6, unwind: bb22]; // scope 1 at cita-executor/src/postman.rs:368:26: 369:47
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:369:14: 369:28
                                         // + literal: Const { ty: fn(core::libexecutor::blacklist::BlackList, Vec<H160>) -> core::libexecutor::blacklist::BlackList {core::libexecutor::blacklist::BlackList::set_black_list}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = const false;               // scope 1 at cita-executor/src/postman.rs:369:46: 369:47
        _26 = const false;               // scope 1 at cita-executor/src/postman.rs:370:29: 370:38
        _11 = move _2;                   // scope 1 at cita-executor/src/postman.rs:370:29: 370:38
        _6 = core::libexecutor::blacklist::BlackList::set_clear_list(move _7, move _11) -> [return: bb7, unwind: bb24]; // scope 1 at cita-executor/src/postman.rs:368:26: 370:39
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:370:14: 370:28
                                         // + literal: Const { ty: fn(core::libexecutor::blacklist::BlackList, Vec<H160>) -> core::libexecutor::blacklist::BlackList {core::libexecutor::blacklist::BlackList::set_clear_list}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = &_6;                       // scope 2 at cita-executor/src/postman.rs:372:41: 372:62
        _13 = core::libexecutor::blacklist::BlackList::protobuf(move _14) -> [return: bb8, unwind: bb15]; // scope 2 at cita-executor/src/postman.rs:372:41: 372:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:372:52: 372:60
                                         // + literal: Const { ty: for<'a> fn(&'a core::libexecutor::blacklist::BlackList) -> libproto::BlackList {core::libexecutor::blacklist::BlackList::protobuf}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = <libproto::BlackList as Into<libproto::Message>>::into(move _13) -> [return: bb9, unwind: bb15]; // scope 2 at cita-executor/src/postman.rs:372:41: 372:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:372:63: 372:67
                                         // + literal: Const { ty: fn(libproto::BlackList) -> libproto::Message {<libproto::BlackList as Into<libproto::Message>>::into}, val: Value(<ZST>) }
    }

    bb9: {
        _24 = const true;                // scope 2 at cita-executor/src/postman.rs:372:68: 372:69
        _18 = const libproto::router::SubModules::Executor; // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x05)) }
        _19 = const libproto::router::MsgType::BlackList; // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x15)) }
        _17 = RoutingKey(move _18, move _19); // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _16 = <RoutingKey as Into<std::string::String>>::into(move _17) -> [return: bb10, unwind: bb20]; // scope 3 at cita-executor/src/postman.rs:374:13: 374:55
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:374:49: 374:53
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = const true;                // scope 3 at cita-executor/src/postman.rs:374:54: 374:55
        _24 = const false;               // scope 3 at cita-executor/src/postman.rs:375:13: 375:29
        _22 = move _12;                  // scope 3 at cita-executor/src/postman.rs:375:13: 375:29
        _21 = <libproto::Message as libproto::TryInto<Vec<u8>>>::try_into(move _22) -> [return: bb11, unwind: bb18]; // scope 3 at cita-executor/src/postman.rs:375:13: 375:40
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:375:30: 375:38
                                         // + literal: Const { ty: fn(libproto::Message) -> Result<Vec<u8>, <libproto::Message as libproto::TryInto<Vec<u8>>>::Error> {<libproto::Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb11: {
        _20 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _21) -> [return: bb12, unwind: bb18]; // scope 3 at cita-executor/src/postman.rs:375:13: 375:49
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:375:41: 375:47
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb12: {
        _23 = const false;               // scope 3 at cita-executor/src/postman.rs:373:9: 376:10
        _15 = Postman::response_mq(_1, move _16, move _20) -> [return: bb13, unwind: bb18]; // scope 3 at cita-executor/src/postman.rs:373:9: 376:10
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:373:14: 373:25
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, std::string::String, Vec<u8>) {Postman::response_mq}, val: Value(<ZST>) }
    }

    bb13: {
        _23 = const false;               // scope 3 at cita-executor/src/postman.rs:376:9: 376:10
        _24 = const false;               // scope 2 at cita-executor/src/postman.rs:377:5: 377:6
        drop(_6) -> [return: bb14, unwind: bb24]; // scope 1 at cita-executor/src/postman.rs:377:5: 377:6
    }

    bb14: {
        _26 = const false;               // scope 0 at cita-executor/src/postman.rs:377:5: 377:6
        return;                          // scope 0 at cita-executor/src/postman.rs:377:6: 377:6
    }

    bb15 (cleanup): {
        drop(_6) -> bb24;                // scope 1 at cita-executor/src/postman.rs:377:5: 377:6
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:365:5: 377:6
    }

    bb17 (cleanup): {
        drop(_16) -> bb20;               // scope 3 at cita-executor/src/postman.rs:376:9: 376:10
    }

    bb18 (cleanup): {
        switchInt(_23) -> [0: bb20, otherwise: bb17]; // scope 3 at cita-executor/src/postman.rs:376:9: 376:10
    }

    bb19 (cleanup): {
        drop(_12) -> bb15;               // scope 2 at cita-executor/src/postman.rs:377:5: 377:6
    }

    bb20 (cleanup): {
        switchInt(_24) -> [0: bb15, otherwise: bb19]; // scope 2 at cita-executor/src/postman.rs:377:5: 377:6
    }

    bb21 (cleanup): {
        drop(_8) -> bb24;                // scope 1 at cita-executor/src/postman.rs:369:46: 369:47
    }

    bb22 (cleanup): {
        switchInt(_25) -> [0: bb24, otherwise: bb21]; // scope 1 at cita-executor/src/postman.rs:369:46: 369:47
    }

    bb23 (cleanup): {
        drop(_2) -> bb16;                // scope 0 at cita-executor/src/postman.rs:377:5: 377:6
    }

    bb24 (cleanup): {
        switchInt(_26) -> [0: bb16, otherwise: bb23]; // scope 0 at cita-executor/src/postman.rs:377:5: 377:6
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_black_list(_1: &Postman, _2: &ClosedBlock) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:383:23: 383:28
    debug close_block => _2;             // in scope 0 at cita-executor/src/postman.rs:383:30: 383:41
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:383:57: 383:57
    let _3: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-executor/src/postman.rs:385:13: 385:39
    let mut _4: std::iter::Filter<std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>, [closure@cita-executor/src/postman.rs:392:18: 392:27]>, [closure@cita-executor/src/postman.rs:393:21: 393:27]>; // in scope 0 at cita-executor/src/postman.rs:385:53: 393:53
    let mut _5: std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>, [closure@cita-executor/src/postman.rs:392:18: 392:27]>; // in scope 0 at cita-executor/src/postman.rs:385:53: 392:53
    let mut _6: std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>; // in scope 0 at cita-executor/src/postman.rs:385:53: 391:15
    let mut _7: std::slice::Iter<'_, types::receipt::Receipt>; // in scope 0 at cita-executor/src/postman.rs:385:53: 387:20
    let mut _8: &[types::receipt::Receipt]; // in scope 0 at cita-executor/src/postman.rs:385:53: 387:20
    let _9: &[types::receipt::Receipt];  // in scope 0 at cita-executor/src/postman.rs:385:53: 387:20
    let mut _10: &std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-executor/src/postman.rs:385:53: 387:20
    let mut _13: usize;                  // in scope 0 at cita-executor/src/postman.rs:399:38: 399:53
    let mut _14: usize;                  // in scope 0 at cita-executor/src/postman.rs:399:55: 399:77
    let mut _16: std::iter::Cloned<std::iter::Filter<std::collections::btree_map::Keys<'_, cita_types::H160, u64>, [closure@cita-executor/src/postman.rs:405:21: 405:30]>>; // in scope 0 at cita-executor/src/postman.rs:400:44: 415:22
    let mut _17: std::iter::Filter<std::collections::btree_map::Keys<'_, cita_types::H160, u64>, [closure@cita-executor/src/postman.rs:405:21: 405:30]>; // in scope 0 at cita-executor/src/postman.rs:400:44: 414:15
    let mut _18: std::collections::btree_map::Keys<'_, cita_types::H160, u64>; // in scope 0 at cita-executor/src/postman.rs:400:44: 404:22
    let mut _19: &core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:400:44: 404:22
    let _20: &core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:400:44: 404:22
    let mut _21: &std::sync::RwLockReadGuard<'_, core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>; // in scope 0 at cita-executor/src/postman.rs:400:44: 404:22
    let _22: std::sync::RwLockReadGuard<'_, core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>; // in scope 0 at cita-executor/src/postman.rs:400:44: 403:22
    let mut _23: std::result::Result<std::sync::RwLockReadGuard<'_, core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>>>; // in scope 0 at cita-executor/src/postman.rs:400:44: 402:20
    let mut _24: &std::sync::RwLock<core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>; // in scope 0 at cita-executor/src/postman.rs:400:44: 402:20
    let mut _25: [closure@cita-executor/src/postman.rs:405:21: 405:30]; // in scope 0 at cita-executor/src/postman.rs:405:21: 414:14
    let mut _26: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:405:21: 414:14
    let mut _27: &usize;                 // in scope 0 at cita-executor/src/postman.rs:405:21: 414:14
    let mut _29: std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::transaction::SignedTransaction>, [closure@cita-executor/src/postman.rs:423:21: 423:25]>, [closure@cita-executor/src/postman.rs:424:18: 424:22]>; // in scope 0 at cita-executor/src/postman.rs:419:39: 424:36
    let mut _30: std::iter::Filter<std::slice::Iter<'_, types::transaction::SignedTransaction>, [closure@cita-executor/src/postman.rs:423:21: 423:25]>; // in scope 0 at cita-executor/src/postman.rs:419:39: 423:90
    let mut _31: std::slice::Iter<'_, types::transaction::SignedTransaction>; // in scope 0 at cita-executor/src/postman.rs:419:39: 422:20
    let mut _32: &[types::transaction::SignedTransaction]; // in scope 0 at cita-executor/src/postman.rs:419:39: 422:20
    let _33: &[types::transaction::SignedTransaction]; // in scope 0 at cita-executor/src/postman.rs:419:39: 421:28
    let mut _34: &types::block::BlockBody; // in scope 0 at cita-executor/src/postman.rs:419:39: 421:28
    let _35: &types::block::BlockBody;   // in scope 0 at cita-executor/src/postman.rs:419:39: 420:20
    let mut _36: &types::block::Block;   // in scope 0 at cita-executor/src/postman.rs:419:39: 420:20
    let _37: &types::block::Block;       // in scope 0 at cita-executor/src/postman.rs:419:39: 420:20
    let mut _38: [closure@cita-executor/src/postman.rs:423:21: 423:25]; // in scope 0 at cita-executor/src/postman.rs:423:21: 423:89
    let mut _39: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-executor/src/postman.rs:423:21: 423:89
    let mut _41: std::result::Result<std::sync::RwLockWriteGuard<'_, core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>, std::sync::PoisonError<std::sync::RwLockWriteGuard<'_, core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>>>; // in scope 0 at cita-executor/src/postman.rs:428:40: 428:69
    let mut _42: &std::sync::RwLock<core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>; // in scope 0 at cita-executor/src/postman.rs:428:40: 428:69
    let _43: &mut core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:429:13: 431:62
    let mut _44: &mut core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:429:13: 431:62
    let mut _45: &mut core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:429:13: 430:36
    let mut _46: &mut core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:429:13: 430:36
    let mut _47: &mut core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:429:13: 430:36
    let mut _48: &mut std::sync::RwLockWriteGuard<'_, core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>; // in scope 0 at cita-executor/src/postman.rs:429:13: 430:36
    let mut _49: &[cita_types::H160];    // in scope 0 at cita-executor/src/postman.rs:430:24: 430:35
    let _50: &[cita_types::H160];        // in scope 0 at cita-executor/src/postman.rs:430:24: 430:35
    let _51: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:430:24: 430:35
    let _52: &[cita_types::H160];        // in scope 0 at cita-executor/src/postman.rs:431:25: 431:39
    let _53: &[cita_types::H160];        // in scope 0 at cita-executor/src/postman.rs:431:26: 431:39
    let mut _54: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:431:26: 431:35
    let mut _55: u64;                    // in scope 0 at cita-executor/src/postman.rs:431:41: 431:61
    let mut _56: &types::header::OpenHeader; // in scope 0 at cita-executor/src/postman.rs:431:41: 431:61
    let _57: &types::header::OpenHeader; // in scope 0 at cita-executor/src/postman.rs:431:41: 431:61
    let mut _58: &types::header::Header; // in scope 0 at cita-executor/src/postman.rs:431:41: 431:61
    let _59: &types::header::Header;     // in scope 0 at cita-executor/src/postman.rs:431:41: 431:61
    let mut _60: &types::block::Block;   // in scope 0 at cita-executor/src/postman.rs:431:41: 431:61
    let _61: &types::block::Block;       // in scope 0 at cita-executor/src/postman.rs:431:41: 431:61
    let _62: ();                         // in scope 0 at cita-executor/src/postman.rs:432:13: 432:61
    let mut _63: &mut std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:432:13: 432:61
    let mut _64: std::slice::Iter<'_, cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:432:31: 432:60
    let mut _65: &[cita_types::H160];    // in scope 0 at cita-executor/src/postman.rs:432:31: 432:60
    let _66: &[cita_types::H160];        // in scope 0 at cita-executor/src/postman.rs:432:31: 432:60
    let mut _67: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:432:31: 432:60
    let _68: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:432:31: 432:53
    let mut _69: &mut core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:432:31: 432:53
    let mut _70: &mut core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:432:31: 432:53
    let mut _71: &mut std::sync::RwLockWriteGuard<'_, core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>; // in scope 0 at cita-executor/src/postman.rs:432:31: 432:53
    let mut _73: core::libexecutor::blacklist::BlackList; // in scope 0 at cita-executor/src/postman.rs:435:26: 436:39
    let mut _74: core::libexecutor::blacklist::BlackList; // in scope 0 at cita-executor/src/postman.rs:435:26: 435:42
    let mut _75: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:436:29: 436:38
    let mut _76: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:437:29: 437:39
    let mut _77: bool;                   // in scope 0 at cita-executor/src/postman.rs:439:12: 439:34
    let mut _78: bool;                   // in scope 0 at cita-executor/src/postman.rs:439:13: 439:34
    let mut _79: &core::libexecutor::blacklist::BlackList; // in scope 0 at cita-executor/src/postman.rs:439:13: 439:34
    let mut _81: libproto::BlackList;    // in scope 0 at cita-executor/src/postman.rs:440:45: 440:66
    let mut _82: &core::libexecutor::blacklist::BlackList; // in scope 0 at cita-executor/src/postman.rs:440:45: 440:66
    let mut _84: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _85: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _86: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _87: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _88: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _89: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _90: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _91: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _92: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _93: &[&str];                // in scope 0 at cita-executor/src/postman.rs:443:17: 443:57
    let mut _94: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _95: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _96: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _97: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:444:17: 444:40
    let _98: &&std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:444:17: 444:40
    let _99: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:444:17: 444:40
    let mut _100: &core::libexecutor::blacklist::BlackList; // in scope 0 at cita-executor/src/postman.rs:444:17: 444:40
    let mut _101: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:445:17: 445:40
    let _102: &&std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:445:17: 445:40
    let _103: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-executor/src/postman.rs:445:17: 445:40
    let mut _104: &core::libexecutor::blacklist::BlackList; // in scope 0 at cita-executor/src/postman.rs:445:17: 445:40
    let _105: ();                        // in scope 0 at cita-executor/src/postman.rs:448:13: 451:14
    let mut _106: std::string::String;   // in scope 0 at cita-executor/src/postman.rs:449:17: 449:59
    let mut _107: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _108: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _109: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _110: std::vec::Vec<u8>;     // in scope 0 at cita-executor/src/postman.rs:450:17: 450:53
    let mut _111: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-executor/src/postman.rs:450:17: 450:44
    let mut _112: libproto::Message;     // in scope 0 at cita-executor/src/postman.rs:450:17: 450:33
    let mut _116: bool;                  // in scope 0 at cita-executor/src/postman.rs:451:13: 451:14
    let mut _117: bool;                  // in scope 0 at cita-executor/src/postman.rs:452:9: 452:10
    let mut _118: bool;                  // in scope 0 at cita-executor/src/postman.rs:453:5: 453:6
    let mut _119: bool;                  // in scope 0 at cita-executor/src/postman.rs:453:5: 453:6
    scope 1 {
        debug blacklist_transaction_hash => _3; // in scope 1 at cita-executor/src/postman.rs:385:13: 385:39
        let _11: core::tx_gas_schedule::TxGasSchedule; // in scope 1 at cita-executor/src/postman.rs:396:13: 396:21
        scope 2 {
            debug schedule => _11;       // in scope 2 at cita-executor/src/postman.rs:396:13: 396:21
            let _12: usize;              // in scope 2 at cita-executor/src/postman.rs:399:13: 399:21
            scope 3 {
                debug bm_value => _12;   // in scope 3 at cita-executor/src/postman.rs:399:13: 399:21
                let mut _15: std::vec::Vec<cita_types::H160>; // in scope 3 at cita-executor/src/postman.rs:400:13: 400:27
                scope 4 {
                    debug clear_list => _15; // in scope 4 at cita-executor/src/postman.rs:400:13: 400:27
                    let _28: std::vec::Vec<cita_types::H160>; // in scope 4 at cita-executor/src/postman.rs:419:13: 419:22
                    scope 5 {
                        debug blacklist => _28; // in scope 5 at cita-executor/src/postman.rs:419:13: 419:22
                        let mut _40: std::sync::RwLockWriteGuard<'_, core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>; // in scope 5 at cita-executor/src/postman.rs:428:17: 428:37
                        let _72: core::libexecutor::blacklist::BlackList; // in scope 5 at cita-executor/src/postman.rs:435:13: 435:23
                        scope 6 {
                            debug black_list_cache => _40; // in scope 6 at cita-executor/src/postman.rs:428:17: 428:37
                        }
                        scope 7 {
                            debug black_list => _72; // in scope 7 at cita-executor/src/postman.rs:435:13: 435:23
                            let _80: libproto::Message; // in scope 7 at cita-executor/src/postman.rs:440:17: 440:33
                            scope 8 {
                                debug black_list_bytes => _80; // in scope 8 at cita-executor/src/postman.rs:440:17: 440:33
                                let _83: log::Level; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                scope 9 {
                                    debug lvl => _83; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                    let mut _113: &(&str, &str, &str, u32); // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                    let mut _114: &[&str; 2]; // in scope 9 at cita-executor/src/postman.rs:443:17: 443:57
                                    let mut _115: &log::LevelFilter; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _116 = const false;              // scope 0 at cita-executor/src/postman.rs:385:13: 385:39
        _117 = const false;              // scope 0 at cita-executor/src/postman.rs:385:13: 385:39
        _118 = const false;              // scope 0 at cita-executor/src/postman.rs:385:13: 385:39
        _119 = const false;              // scope 0 at cita-executor/src/postman.rs:385:13: 385:39
        _10 = &((*_2).1: std::vec::Vec<types::receipt::Receipt>); // scope 0 at cita-executor/src/postman.rs:385:53: 387:20
        _9 = <Vec<types::receipt::Receipt> as Deref>::deref(move _10) -> bb1; // scope 0 at cita-executor/src/postman.rs:385:53: 387:20
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:385:53: 387:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::receipt::Receipt>) -> &'a <Vec<types::receipt::Receipt> as Deref>::Target {<Vec<types::receipt::Receipt> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _9;                         // scope 0 at cita-executor/src/postman.rs:385:53: 387:20
        _7 = core::slice::<impl [types::receipt::Receipt]>::iter(move _8) -> bb2; // scope 0 at cita-executor/src/postman.rs:385:53: 387:20
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:387:14: 387:18
                                         // + literal: Const { ty: for<'a> fn(&'a [types::receipt::Receipt]) -> std::slice::Iter<'a, types::receipt::Receipt> {core::slice::<impl [types::receipt::Receipt]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = <std::slice::Iter<'_, types::receipt::Receipt> as Iterator>::filter::<[closure@cita-executor/src/postman.rs:388:21: 388:34]>(move _7, const ZeroSized: [closure@cita-executor/src/postman.rs:388:21: 388:34]) -> bb3; // scope 0 at cita-executor/src/postman.rs:385:53: 391:15
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:388:14: 388:20
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]) -> std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]> {<std::slice::Iter<'_, types::receipt::Receipt> as Iterator>::filter::<[closure@cita-executor/src/postman.rs:388:21: 388:34]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-executor/src/postman.rs:388:21: 388:34], val: Value(<ZST>) }
    }

    bb3: {
        _5 = <std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]> as Iterator>::map::<H256, [closure@cita-executor/src/postman.rs:392:18: 392:27]>(move _6, const ZeroSized: [closure@cita-executor/src/postman.rs:392:18: 392:27]) -> bb4; // scope 0 at cita-executor/src/postman.rs:385:53: 392:53
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:392:14: 392:17
                                         // + literal: Const { ty: fn(std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>, [closure@cita-executor/src/postman.rs:392:18: 392:27]) -> std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>, [closure@cita-executor/src/postman.rs:392:18: 392:27]> {<std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]> as Iterator>::map::<H256, [closure@cita-executor/src/postman.rs:392:18: 392:27]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-executor/src/postman.rs:392:18: 392:27], val: Value(<ZST>) }
    }

    bb4: {
        _4 = <std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>, [closure@cita-executor/src/postman.rs:392:18: 392:27]> as Iterator>::filter::<[closure@cita-executor/src/postman.rs:393:21: 393:27]>(move _5, const ZeroSized: [closure@cita-executor/src/postman.rs:393:21: 393:27]) -> bb5; // scope 0 at cita-executor/src/postman.rs:385:53: 393:53
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:393:14: 393:20
                                         // + literal: Const { ty: fn(std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>, [closure@cita-executor/src/postman.rs:392:18: 392:27]>, [closure@cita-executor/src/postman.rs:393:21: 393:27]) -> std::iter::Filter<std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>, [closure@cita-executor/src/postman.rs:392:18: 392:27]>, [closure@cita-executor/src/postman.rs:393:21: 393:27]> {<std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>, [closure@cita-executor/src/postman.rs:392:18: 392:27]> as Iterator>::filter::<[closure@cita-executor/src/postman.rs:393:21: 393:27]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-executor/src/postman.rs:393:21: 393:27], val: Value(<ZST>) }
    }

    bb5: {
        _3 = <std::iter::Filter<std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>, [closure@cita-executor/src/postman.rs:392:18: 392:27]>, [closure@cita-executor/src/postman.rs:393:21: 393:27]> as Iterator>::collect::<Vec<H256>>(move _4) -> bb6; // scope 0 at cita-executor/src/postman.rs:385:53: 394:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:394:14: 394:21
                                         // + literal: Const { ty: fn(std::iter::Filter<std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>, [closure@cita-executor/src/postman.rs:392:18: 392:27]>, [closure@cita-executor/src/postman.rs:393:21: 393:27]>) -> Vec<H256> {<std::iter::Filter<std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-executor/src/postman.rs:388:21: 388:34]>, [closure@cita-executor/src/postman.rs:392:18: 392:27]>, [closure@cita-executor/src/postman.rs:393:21: 393:27]> as Iterator>::collect::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = <TxGasSchedule as Default>::default() -> [return: bb7, unwind: bb73]; // scope 1 at cita-executor/src/postman.rs:396:24: 396:48
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:396:24: 396:46
                                         // + literal: Const { ty: fn() -> TxGasSchedule {<TxGasSchedule as Default>::default}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = (_11.0: usize);            // scope 2 at cita-executor/src/postman.rs:399:38: 399:53
        _14 = (_11.1: usize);            // scope 2 at cita-executor/src/postman.rs:399:55: 399:77
        _12 = std::cmp::min::<usize>(move _13, move _14) -> [return: bb8, unwind: bb73]; // scope 2 at cita-executor/src/postman.rs:399:24: 399:78
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:399:24: 399:37
                                         // + literal: Const { ty: fn(usize, usize) -> usize {std::cmp::min::<usize>}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = &((*_1).1: std::sync::RwLock<core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>); // scope 3 at cita-executor/src/postman.rs:400:44: 402:20
        _23 = RwLock::<LRUCache<u64, H160>>::read(move _24) -> [return: bb9, unwind: bb73]; // scope 3 at cita-executor/src/postman.rs:400:44: 402:20
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:402:14: 402:18
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<LRUCache<u64, H160>>) -> Result<RwLockReadGuard<'a, LRUCache<u64, H160>>, PoisonError<RwLockReadGuard<'a, LRUCache<u64, H160>>>> {RwLock::<LRUCache<u64, H160>>::read}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = Result::<RwLockReadGuard<'_, LRUCache<u64, H160>>, PoisonError<RwLockReadGuard<'_, LRUCache<u64, H160>>>>::unwrap(move _23) -> [return: bb10, unwind: bb73]; // scope 3 at cita-executor/src/postman.rs:400:44: 403:22
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:403:14: 403:20
                                         // + literal: Const { ty: fn(Result<RwLockReadGuard<'_, LRUCache<u64, H160>>, PoisonError<RwLockReadGuard<'_, LRUCache<u64, H160>>>>) -> RwLockReadGuard<'_, LRUCache<u64, H160>> {Result::<RwLockReadGuard<'_, LRUCache<u64, H160>>, PoisonError<RwLockReadGuard<'_, LRUCache<u64, H160>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = &_22;                      // scope 3 at cita-executor/src/postman.rs:400:44: 404:22
        _20 = <RwLockReadGuard<'_, LRUCache<u64, H160>> as Deref>::deref(move _21) -> [return: bb11, unwind: bb72]; // scope 3 at cita-executor/src/postman.rs:400:44: 404:22
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:400:44: 404:22
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockReadGuard<'_, LRUCache<u64, H160>>) -> &'a <RwLockReadGuard<'_, LRUCache<u64, H160>> as Deref>::Target {<RwLockReadGuard<'_, LRUCache<u64, H160>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = _20;                       // scope 3 at cita-executor/src/postman.rs:400:44: 404:22
        _18 = LRUCache::<u64, H160>::values(move _19) -> [return: bb12, unwind: bb72]; // scope 3 at cita-executor/src/postman.rs:400:44: 404:22
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:404:14: 404:20
                                         // + literal: Const { ty: for<'a> fn(&'a LRUCache<u64, H160>) -> std::collections::btree_map::Keys<'a, H160, u64> {LRUCache::<u64, H160>::values}, val: Value(<ZST>) }
    }

    bb12: {
        _26 = &_1;                       // scope 3 at cita-executor/src/postman.rs:405:21: 414:14
        _27 = &_12;                      // scope 3 at cita-executor/src/postman.rs:405:21: 414:14
        _25 = [closure@cita-executor/src/postman.rs:405:21: 405:30] { self: move _26, bm_value: move _27 }; // scope 3 at cita-executor/src/postman.rs:405:21: 414:14
                                         // closure
                                         // + def_id: DefId(0:151 ~ cita_executor[bbb2]::postman::{impl#0}::pub_black_list::{closure#3})
                                         // + substs: [
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a &cita_types::H160,)) -> bool,
                                         //     (&&postman::Postman, &usize),
                                         // ]
        _17 = <std::collections::btree_map::Keys<'_, H160, u64> as Iterator>::filter::<[closure@cita-executor/src/postman.rs:405:21: 405:30]>(move _18, move _25) -> [return: bb13, unwind: bb72]; // scope 3 at cita-executor/src/postman.rs:400:44: 414:15
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:405:14: 405:20
                                         // + literal: Const { ty: fn(std::collections::btree_map::Keys<'_, H160, u64>, [closure@cita-executor/src/postman.rs:405:21: 405:30]) -> std::iter::Filter<std::collections::btree_map::Keys<'_, H160, u64>, [closure@cita-executor/src/postman.rs:405:21: 405:30]> {<std::collections::btree_map::Keys<'_, H160, u64> as Iterator>::filter::<[closure@cita-executor/src/postman.rs:405:21: 405:30]>}, val: Value(<ZST>) }
    }

    bb13: {
        _16 = <std::iter::Filter<std::collections::btree_map::Keys<'_, H160, u64>, [closure@cita-executor/src/postman.rs:405:21: 405:30]> as Iterator>::cloned::<'_, H160>(move _17) -> [return: bb14, unwind: bb72]; // scope 3 at cita-executor/src/postman.rs:400:44: 415:22
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:415:14: 415:20
                                         // + literal: Const { ty: fn(std::iter::Filter<std::collections::btree_map::Keys<'_, H160, u64>, [closure@cita-executor/src/postman.rs:405:21: 405:30]>) -> Cloned<std::iter::Filter<std::collections::btree_map::Keys<'_, H160, u64>, [closure@cita-executor/src/postman.rs:405:21: 405:30]>> {<std::iter::Filter<std::collections::btree_map::Keys<'_, H160, u64>, [closure@cita-executor/src/postman.rs:405:21: 405:30]> as Iterator>::cloned::<'_, H160>}, val: Value(<ZST>) }
    }

    bb14: {
        _15 = <Cloned<std::iter::Filter<std::collections::btree_map::Keys<'_, H160, u64>, [closure@cita-executor/src/postman.rs:405:21: 405:30]>> as Iterator>::collect::<Vec<H160>>(move _16) -> [return: bb15, unwind: bb72]; // scope 3 at cita-executor/src/postman.rs:400:44: 416:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:416:14: 416:21
                                         // + literal: Const { ty: fn(Cloned<std::iter::Filter<std::collections::btree_map::Keys<'_, H160, u64>, [closure@cita-executor/src/postman.rs:405:21: 405:30]>>) -> Vec<H160> {<Cloned<std::iter::Filter<std::collections::btree_map::Keys<'_, H160, u64>, [closure@cita-executor/src/postman.rs:405:21: 405:30]>> as Iterator>::collect::<Vec<H160>>}, val: Value(<ZST>) }
    }

    bb15: {
        _119 = const true;               // scope 3 at cita-executor/src/postman.rs:416:22: 416:23
        drop(_22) -> [return: bb16, unwind: bb82]; // scope 3 at cita-executor/src/postman.rs:416:23: 416:24
    }

    bb16: {
        _37 = <ClosedBlock as Deref>::deref(_2) -> [return: bb17, unwind: bb82]; // scope 4 at cita-executor/src/postman.rs:419:39: 420:20
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:419:39: 420:20
                                         // + literal: Const { ty: for<'a> fn(&'a ClosedBlock) -> &'a <ClosedBlock as Deref>::Target {<ClosedBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb17: {
        _36 = _37;                       // scope 4 at cita-executor/src/postman.rs:419:39: 420:20
        _35 = types::block::Block::body(move _36) -> [return: bb18, unwind: bb82]; // scope 4 at cita-executor/src/postman.rs:419:39: 420:20
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:420:14: 420:18
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a types::block::BlockBody {types::block::Block::body}, val: Value(<ZST>) }
    }

    bb18: {
        _34 = _35;                       // scope 4 at cita-executor/src/postman.rs:419:39: 421:28
        _33 = types::block::BlockBody::transactions(move _34) -> [return: bb19, unwind: bb82]; // scope 4 at cita-executor/src/postman.rs:419:39: 421:28
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:421:14: 421:26
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> &'a [types::transaction::SignedTransaction] {types::block::BlockBody::transactions}, val: Value(<ZST>) }
    }

    bb19: {
        _32 = _33;                       // scope 4 at cita-executor/src/postman.rs:419:39: 422:20
        _31 = core::slice::<impl [types::transaction::SignedTransaction]>::iter(move _32) -> [return: bb20, unwind: bb82]; // scope 4 at cita-executor/src/postman.rs:419:39: 422:20
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:422:14: 422:18
                                         // + literal: Const { ty: for<'a> fn(&'a [types::transaction::SignedTransaction]) -> std::slice::Iter<'a, types::transaction::SignedTransaction> {core::slice::<impl [types::transaction::SignedTransaction]>::iter}, val: Value(<ZST>) }
    }

    bb20: {
        _39 = &_3;                       // scope 4 at cita-executor/src/postman.rs:423:21: 423:89
        _38 = [closure@cita-executor/src/postman.rs:423:21: 423:25] { blacklist_transaction_hash: move _39 }; // scope 4 at cita-executor/src/postman.rs:423:21: 423:89
                                         // closure
                                         // + def_id: DefId(0:153 ~ cita_executor[bbb2]::postman::{impl#0}::pub_black_list::{closure#4})
                                         // + substs: [
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a &types::transaction::SignedTransaction,)) -> bool,
                                         //     (&std::vec::Vec<cita_types::H256>,),
                                         // ]
        _30 = <std::slice::Iter<'_, types::transaction::SignedTransaction> as Iterator>::filter::<[closure@cita-executor/src/postman.rs:423:21: 423:25]>(move _31, move _38) -> [return: bb21, unwind: bb82]; // scope 4 at cita-executor/src/postman.rs:419:39: 423:90
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:423:14: 423:20
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, types::transaction::SignedTransaction>, [closure@cita-executor/src/postman.rs:423:21: 423:25]) -> std::iter::Filter<std::slice::Iter<'_, types::transaction::SignedTransaction>, [closure@cita-executor/src/postman.rs:423:21: 423:25]> {<std::slice::Iter<'_, types::transaction::SignedTransaction> as Iterator>::filter::<[closure@cita-executor/src/postman.rs:423:21: 423:25]>}, val: Value(<ZST>) }
    }

    bb21: {
        _29 = <std::iter::Filter<std::slice::Iter<'_, types::transaction::SignedTransaction>, [closure@cita-executor/src/postman.rs:423:21: 423:25]> as Iterator>::map::<H160, [closure@cita-executor/src/postman.rs:424:18: 424:22]>(move _30, const ZeroSized: [closure@cita-executor/src/postman.rs:424:18: 424:22]) -> [return: bb22, unwind: bb82]; // scope 4 at cita-executor/src/postman.rs:419:39: 424:36
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:424:14: 424:17
                                         // + literal: Const { ty: fn(std::iter::Filter<std::slice::Iter<'_, types::transaction::SignedTransaction>, [closure@cita-executor/src/postman.rs:423:21: 423:25]>, [closure@cita-executor/src/postman.rs:424:18: 424:22]) -> std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::transaction::SignedTransaction>, [closure@cita-executor/src/postman.rs:423:21: 423:25]>, [closure@cita-executor/src/postman.rs:424:18: 424:22]> {<std::iter::Filter<std::slice::Iter<'_, types::transaction::SignedTransaction>, [closure@cita-executor/src/postman.rs:423:21: 423:25]> as Iterator>::map::<H160, [closure@cita-executor/src/postman.rs:424:18: 424:22]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-executor/src/postman.rs:424:18: 424:22], val: Value(<ZST>) }
    }

    bb22: {
        _28 = <std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::transaction::SignedTransaction>, [closure@cita-executor/src/postman.rs:423:21: 423:25]>, [closure@cita-executor/src/postman.rs:424:18: 424:22]> as Iterator>::collect::<Vec<H160>>(move _29) -> [return: bb23, unwind: bb82]; // scope 4 at cita-executor/src/postman.rs:419:39: 425:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:425:14: 425:21
                                         // + literal: Const { ty: fn(std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::transaction::SignedTransaction>, [closure@cita-executor/src/postman.rs:423:21: 423:25]>, [closure@cita-executor/src/postman.rs:424:18: 424:22]>) -> Vec<H160> {<std::iter::Map<std::iter::Filter<std::slice::Iter<'_, types::transaction::SignedTransaction>, [closure@cita-executor/src/postman.rs:423:21: 423:25]>, [closure@cita-executor/src/postman.rs:424:18: 424:22]> as Iterator>::collect::<Vec<H160>>}, val: Value(<ZST>) }
    }

    bb23: {
        _118 = const true;               // scope 4 at cita-executor/src/postman.rs:425:22: 425:23
        _42 = &((*_1).1: std::sync::RwLock<core::libexecutor::lru_cache::LRUCache<u64, cita_types::H160>>); // scope 5 at cita-executor/src/postman.rs:428:40: 428:69
        _41 = RwLock::<LRUCache<u64, H160>>::write(move _42) -> [return: bb24, unwind: bb80]; // scope 5 at cita-executor/src/postman.rs:428:40: 428:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:428:62: 428:67
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<LRUCache<u64, H160>>) -> Result<RwLockWriteGuard<'a, LRUCache<u64, H160>>, PoisonError<RwLockWriteGuard<'a, LRUCache<u64, H160>>>> {RwLock::<LRUCache<u64, H160>>::write}, val: Value(<ZST>) }
    }

    bb24: {
        _40 = Result::<RwLockWriteGuard<'_, LRUCache<u64, H160>>, PoisonError<RwLockWriteGuard<'_, LRUCache<u64, H160>>>>::unwrap(move _41) -> [return: bb25, unwind: bb80]; // scope 5 at cita-executor/src/postman.rs:428:40: 428:78
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:428:70: 428:76
                                         // + literal: Const { ty: fn(Result<RwLockWriteGuard<'_, LRUCache<u64, H160>>, PoisonError<RwLockWriteGuard<'_, LRUCache<u64, H160>>>>) -> RwLockWriteGuard<'_, LRUCache<u64, H160>> {Result::<RwLockWriteGuard<'_, LRUCache<u64, H160>>, PoisonError<RwLockWriteGuard<'_, LRUCache<u64, H160>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb25: {
        _48 = &mut _40;                  // scope 6 at cita-executor/src/postman.rs:429:13: 430:36
        _47 = <RwLockWriteGuard<'_, LRUCache<u64, H160>> as DerefMut>::deref_mut(move _48) -> [return: bb26, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:429:13: 430:36
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:429:13: 430:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut RwLockWriteGuard<'_, LRUCache<u64, H160>>) -> &'a mut <RwLockWriteGuard<'_, LRUCache<u64, H160>> as Deref>::Target {<RwLockWriteGuard<'_, LRUCache<u64, H160>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb26: {
        _46 = _47;                       // scope 6 at cita-executor/src/postman.rs:429:13: 430:36
        _51 = &_15;                      // scope 6 at cita-executor/src/postman.rs:430:24: 430:35
        _50 = <Vec<H160> as Deref>::deref(_51) -> [return: bb27, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:430:24: 430:35
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:430:24: 430:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> &'a <Vec<H160> as Deref>::Target {<Vec<H160> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb27: {
        _49 = _50;                       // scope 6 at cita-executor/src/postman.rs:430:24: 430:35
        _45 = LRUCache::<u64, H160>::prune(move _46, move _49) -> [return: bb28, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:429:13: 430:36
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:430:18: 430:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut LRUCache<u64, H160>, &'b [H160]) -> &'a mut LRUCache<u64, H160> {LRUCache::<u64, H160>::prune}, val: Value(<ZST>) }
    }

    bb28: {
        _44 = _45;                       // scope 6 at cita-executor/src/postman.rs:429:13: 431:62
        _54 = &_28;                      // scope 6 at cita-executor/src/postman.rs:431:26: 431:35
        _53 = <Vec<H160> as std::ops::Index<RangeFull>>::index(move _54, const RangeFull) -> [return: bb29, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:431:26: 431:39
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:431:26: 431:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>, RangeFull) -> &'a <Vec<H160> as std::ops::Index<RangeFull>>::Output {<Vec<H160> as std::ops::Index<RangeFull>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: RangeFull, val: Value(<ZST>) }
    }

    bb29: {
        _52 = _53;                       // scope 6 at cita-executor/src/postman.rs:431:25: 431:39
        _61 = <ClosedBlock as Deref>::deref(_2) -> [return: bb30, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:431:41: 431:61
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:431:41: 431:61
                                         // + literal: Const { ty: for<'a> fn(&'a ClosedBlock) -> &'a <ClosedBlock as Deref>::Target {<ClosedBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb30: {
        _60 = _61;                       // scope 6 at cita-executor/src/postman.rs:431:41: 431:61
        _59 = <types::block::Block as Deref>::deref(move _60) -> [return: bb31, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:431:41: 431:61
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:431:41: 431:61
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a <types::block::Block as Deref>::Target {<types::block::Block as Deref>::deref}, val: Value(<ZST>) }
    }

    bb31: {
        _58 = _59;                       // scope 6 at cita-executor/src/postman.rs:431:41: 431:61
        _57 = <Header as Deref>::deref(move _58) -> [return: bb32, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:431:41: 431:61
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:431:41: 431:61
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb32: {
        _56 = _57;                       // scope 6 at cita-executor/src/postman.rs:431:41: 431:61
        _55 = OpenHeader::number(move _56) -> [return: bb33, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:431:41: 431:61
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:431:53: 431:59
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb33: {
        _43 = LRUCache::<u64, H160>::extend(move _44, _52, move _55) -> [return: bb34, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:429:13: 431:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:431:18: 431:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut LRUCache<u64, H160>, &'b [H160], u64) -> &'a mut LRUCache<u64, H160> {LRUCache::<u64, H160>::extend}, val: Value(<ZST>) }
    }

    bb34: {
        _63 = &mut _15;                  // scope 6 at cita-executor/src/postman.rs:432:13: 432:61
        _71 = &mut _40;                  // scope 6 at cita-executor/src/postman.rs:432:31: 432:53
        _70 = <RwLockWriteGuard<'_, LRUCache<u64, H160>> as DerefMut>::deref_mut(move _71) -> [return: bb35, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:432:31: 432:53
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:432:31: 432:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut RwLockWriteGuard<'_, LRUCache<u64, H160>>) -> &'a mut <RwLockWriteGuard<'_, LRUCache<u64, H160>> as Deref>::Target {<RwLockWriteGuard<'_, LRUCache<u64, H160>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb35: {
        _69 = _70;                       // scope 6 at cita-executor/src/postman.rs:432:31: 432:53
        _68 = LRUCache::<u64, H160>::lru(move _69) -> [return: bb36, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:432:31: 432:53
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:432:48: 432:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut LRUCache<u64, H160>) -> Vec<H160> {LRUCache::<u64, H160>::lru}, val: Value(<ZST>) }
    }

    bb36: {
        _67 = &_68;                      // scope 6 at cita-executor/src/postman.rs:432:31: 432:60
        _66 = <Vec<H160> as Deref>::deref(move _67) -> [return: bb37, unwind: bb70]; // scope 6 at cita-executor/src/postman.rs:432:31: 432:60
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:432:31: 432:60
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> &'a <Vec<H160> as Deref>::Target {<Vec<H160> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb37: {
        _65 = _66;                       // scope 6 at cita-executor/src/postman.rs:432:31: 432:60
        _64 = core::slice::<impl [H160]>::iter(move _65) -> [return: bb38, unwind: bb70]; // scope 6 at cita-executor/src/postman.rs:432:31: 432:60
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:432:54: 432:58
                                         // + literal: Const { ty: for<'a> fn(&'a [H160]) -> std::slice::Iter<'a, H160> {core::slice::<impl [H160]>::iter}, val: Value(<ZST>) }
    }

    bb38: {
        _62 = <Vec<H160> as Extend<&H160>>::extend::<std::slice::Iter<'_, H160>>(move _63, move _64) -> [return: bb39, unwind: bb70]; // scope 6 at cita-executor/src/postman.rs:432:13: 432:61
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:432:24: 432:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<H160>, std::slice::Iter<'_, H160>) {<Vec<H160> as Extend<&H160>>::extend::<std::slice::Iter<'_, H160>>}, val: Value(<ZST>) }
    }

    bb39: {
        drop(_68) -> [return: bb40, unwind: bb71]; // scope 6 at cita-executor/src/postman.rs:432:61: 432:62
    }

    bb40: {
        drop(_40) -> [return: bb41, unwind: bb80]; // scope 5 at cita-executor/src/postman.rs:433:9: 433:10
    }

    bb41: {
        _74 = core::libexecutor::blacklist::BlackList::new() -> [return: bb42, unwind: bb80]; // scope 5 at cita-executor/src/postman.rs:435:26: 435:42
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:435:26: 435:40
                                         // + literal: Const { ty: fn() -> core::libexecutor::blacklist::BlackList {core::libexecutor::blacklist::BlackList::new}, val: Value(<ZST>) }
    }

    bb42: {
        _118 = const false;              // scope 5 at cita-executor/src/postman.rs:436:29: 436:38
        _75 = move _28;                  // scope 5 at cita-executor/src/postman.rs:436:29: 436:38
        _73 = core::libexecutor::blacklist::BlackList::set_black_list(move _74, move _75) -> [return: bb43, unwind: bb80]; // scope 5 at cita-executor/src/postman.rs:435:26: 436:39
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:436:14: 436:28
                                         // + literal: Const { ty: fn(core::libexecutor::blacklist::BlackList, Vec<H160>) -> core::libexecutor::blacklist::BlackList {core::libexecutor::blacklist::BlackList::set_black_list}, val: Value(<ZST>) }
    }

    bb43: {
        _119 = const false;              // scope 5 at cita-executor/src/postman.rs:437:29: 437:39
        _76 = move _15;                  // scope 5 at cita-executor/src/postman.rs:437:29: 437:39
        _72 = core::libexecutor::blacklist::BlackList::set_clear_list(move _73, move _76) -> [return: bb44, unwind: bb80]; // scope 5 at cita-executor/src/postman.rs:435:26: 437:40
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:437:14: 437:28
                                         // + literal: Const { ty: fn(core::libexecutor::blacklist::BlackList, Vec<H160>) -> core::libexecutor::blacklist::BlackList {core::libexecutor::blacklist::BlackList::set_clear_list}, val: Value(<ZST>) }
    }

    bb44: {
        _79 = &_72;                      // scope 7 at cita-executor/src/postman.rs:439:13: 439:34
        _78 = core::libexecutor::blacklist::BlackList::is_empty(move _79) -> [return: bb45, unwind: bb69]; // scope 7 at cita-executor/src/postman.rs:439:13: 439:34
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:439:24: 439:32
                                         // + literal: Const { ty: for<'a> fn(&'a core::libexecutor::blacklist::BlackList) -> bool {core::libexecutor::blacklist::BlackList::is_empty}, val: Value(<ZST>) }
    }

    bb45: {
        _77 = Not(move _78);             // scope 7 at cita-executor/src/postman.rs:439:12: 439:34
        switchInt(move _77) -> [0: bb66, otherwise: bb46]; // scope 7 at cita-executor/src/postman.rs:439:12: 439:34
    }

    bb46: {
        _82 = &_72;                      // scope 7 at cita-executor/src/postman.rs:440:45: 440:66
        _81 = core::libexecutor::blacklist::BlackList::protobuf(move _82) -> [return: bb47, unwind: bb69]; // scope 7 at cita-executor/src/postman.rs:440:45: 440:66
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:440:56: 440:64
                                         // + literal: Const { ty: for<'a> fn(&'a core::libexecutor::blacklist::BlackList) -> libproto::BlackList {core::libexecutor::blacklist::BlackList::protobuf}, val: Value(<ZST>) }
    }

    bb47: {
        _80 = <libproto::BlackList as Into<libproto::Message>>::into(move _81) -> [return: bb48, unwind: bb69]; // scope 7 at cita-executor/src/postman.rs:440:45: 440:73
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:440:67: 440:71
                                         // + literal: Const { ty: fn(libproto::BlackList) -> libproto::Message {<libproto::BlackList as Into<libproto::Message>>::into}, val: Value(<ZST>) }
    }

    bb48: {
        _117 = const true;               // scope 7 at cita-executor/src/postman.rs:440:72: 440:73
        _83 = log::Level::Info;          // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _86 = &_83;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _115 = const _;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::pub_black_list, [], Some(promoted[2])) }
        _85 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _86, _115) -> [return: bb52, unwind: bb78]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb49: {
        _84 = const false;               // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb51;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb50: {
        _88 = &_83;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _90 = log::max_level() -> [return: bb53, unwind: bb78]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb51: {
        switchInt(move _84) -> [0: bb61, otherwise: bb55]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb52: {
        switchInt(move _85) -> [0: bb49, otherwise: bb50]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb53: {
        _89 = &_90;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _87 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _88, move _89) -> [return: bb54, unwind: bb78]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb54: {
        _84 = move _87;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb51;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb55: {
        _114 = const _;                  // scope 9 at cita-executor/src/postman.rs:443:17: 443:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:443:17: 443:57
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Postman::pub_black_list, [], Some(promoted[1])) }
        _93 = _114 as &[&str] (Pointer(Unsize)); // scope 9 at cita-executor/src/postman.rs:443:17: 443:57
        _100 = &_72;                     // scope 9 at cita-executor/src/postman.rs:444:17: 444:40
        _99 = core::libexecutor::blacklist::BlackList::black_list(move _100) -> [return: bb56, unwind: bb78]; // scope 9 at cita-executor/src/postman.rs:444:17: 444:40
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:444:28: 444:38
                                         // + literal: Const { ty: for<'a> fn(&'a core::libexecutor::blacklist::BlackList) -> &'a Vec<H160> {core::libexecutor::blacklist::BlackList::black_list}, val: Value(<ZST>) }
    }

    bb56: {
        _98 = &_99;                      // scope 9 at cita-executor/src/postman.rs:444:17: 444:40
        _97 = core::fmt::ArgumentV1::<'_>::new_debug::<&Vec<H160>>(_98) -> [return: bb57, unwind: bb78]; // scope 9 at cita-executor/src/postman.rs:444:17: 444:40
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:444:17: 444:40
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b> fn(&'b &Vec<H160>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&Vec<H160>>}, val: Value(<ZST>) }
    }

    bb57: {
        _104 = &_72;                     // scope 9 at cita-executor/src/postman.rs:445:17: 445:40
        _103 = core::libexecutor::blacklist::BlackList::clear_list(move _104) -> [return: bb58, unwind: bb78]; // scope 9 at cita-executor/src/postman.rs:445:17: 445:40
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:445:28: 445:38
                                         // + literal: Const { ty: for<'a> fn(&'a core::libexecutor::blacklist::BlackList) -> &'a Vec<H160> {core::libexecutor::blacklist::BlackList::clear_list}, val: Value(<ZST>) }
    }

    bb58: {
        _102 = &_103;                    // scope 9 at cita-executor/src/postman.rs:445:17: 445:40
        _101 = core::fmt::ArgumentV1::<'_>::new_debug::<&Vec<H160>>(_102) -> [return: bb59, unwind: bb78]; // scope 9 at cita-executor/src/postman.rs:445:17: 445:40
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:445:17: 445:40
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b> fn(&'b &Vec<H160>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&Vec<H160>>}, val: Value(<ZST>) }
    }

    bb59: {
        _96 = [move _97, move _101];     // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _95 = &_96;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _94 = _95 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _92 = Arguments::<'_>::new_v1(move _93, move _94) -> [return: bb60, unwind: bb78]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb60: {
        _113 = const _;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::pub_black_list, [], Some(promoted[0])) }
        _91 = log::__private_api_log(move _92, _83, _113) -> [return: bb83, unwind: bb78]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb61: {
        _108 = const libproto::router::SubModules::Executor; // scope 8 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x05)) }
        _109 = const libproto::router::MsgType::BlackList; // scope 8 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x15)) }
        _107 = RoutingKey(move _108, move _109); // scope 8 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _106 = <RoutingKey as Into<std::string::String>>::into(move _107) -> [return: bb62, unwind: bb78]; // scope 8 at cita-executor/src/postman.rs:449:17: 449:59
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:449:53: 449:57
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb62: {
        _116 = const true;               // scope 8 at cita-executor/src/postman.rs:449:58: 449:59
        _117 = const false;              // scope 8 at cita-executor/src/postman.rs:450:17: 450:33
        _112 = move _80;                 // scope 8 at cita-executor/src/postman.rs:450:17: 450:33
        _111 = <libproto::Message as libproto::TryInto<Vec<u8>>>::try_into(move _112) -> [return: bb63, unwind: bb76]; // scope 8 at cita-executor/src/postman.rs:450:17: 450:44
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:450:34: 450:42
                                         // + literal: Const { ty: fn(libproto::Message) -> Result<Vec<u8>, <libproto::Message as libproto::TryInto<Vec<u8>>>::Error> {<libproto::Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb63: {
        _110 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _111) -> [return: bb64, unwind: bb76]; // scope 8 at cita-executor/src/postman.rs:450:17: 450:53
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:450:45: 450:51
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb64: {
        _116 = const false;              // scope 8 at cita-executor/src/postman.rs:448:13: 451:14
        _105 = Postman::response_mq(_1, move _106, move _110) -> [return: bb65, unwind: bb76]; // scope 8 at cita-executor/src/postman.rs:448:13: 451:14
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:448:18: 448:29
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, std::string::String, Vec<u8>) {Postman::response_mq}, val: Value(<ZST>) }
    }

    bb65: {
        _116 = const false;              // scope 8 at cita-executor/src/postman.rs:451:13: 451:14
        _117 = const false;              // scope 7 at cita-executor/src/postman.rs:452:9: 452:10
        goto -> bb66;                    // scope 7 at cita-executor/src/postman.rs:439:9: 452:10
    }

    bb66: {
        drop(_72) -> [return: bb67, unwind: bb80]; // scope 5 at cita-executor/src/postman.rs:453:5: 453:6
    }

    bb67: {
        _118 = const false;              // scope 4 at cita-executor/src/postman.rs:453:5: 453:6
        _119 = const false;              // scope 3 at cita-executor/src/postman.rs:453:5: 453:6
        drop(_3) -> bb68;                // scope 0 at cita-executor/src/postman.rs:453:5: 453:6
    }

    bb68: {
        return;                          // scope 0 at cita-executor/src/postman.rs:453:6: 453:6
    }

    bb69 (cleanup): {
        drop(_72) -> bb80;               // scope 5 at cita-executor/src/postman.rs:453:5: 453:6
    }

    bb70 (cleanup): {
        drop(_68) -> bb71;               // scope 6 at cita-executor/src/postman.rs:432:61: 432:62
    }

    bb71 (cleanup): {
        drop(_40) -> bb80;               // scope 5 at cita-executor/src/postman.rs:433:9: 433:10
    }

    bb72 (cleanup): {
        drop(_22) -> bb73;               // scope 3 at cita-executor/src/postman.rs:416:23: 416:24
    }

    bb73 (cleanup): {
        drop(_3) -> bb74;                // scope 0 at cita-executor/src/postman.rs:453:5: 453:6
    }

    bb74 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:383:5: 453:6
    }

    bb75 (cleanup): {
        drop(_106) -> bb78;              // scope 8 at cita-executor/src/postman.rs:451:13: 451:14
    }

    bb76 (cleanup): {
        switchInt(_116) -> [0: bb78, otherwise: bb75]; // scope 8 at cita-executor/src/postman.rs:451:13: 451:14
    }

    bb77 (cleanup): {
        drop(_80) -> bb69;               // scope 7 at cita-executor/src/postman.rs:452:9: 452:10
    }

    bb78 (cleanup): {
        switchInt(_117) -> [0: bb69, otherwise: bb77]; // scope 7 at cita-executor/src/postman.rs:452:9: 452:10
    }

    bb79 (cleanup): {
        drop(_28) -> bb82;               // scope 4 at cita-executor/src/postman.rs:453:5: 453:6
    }

    bb80 (cleanup): {
        switchInt(_118) -> [0: bb82, otherwise: bb79]; // scope 4 at cita-executor/src/postman.rs:453:5: 453:6
    }

    bb81 (cleanup): {
        drop(_15) -> bb73;               // scope 3 at cita-executor/src/postman.rs:453:5: 453:6
    }

    bb82 (cleanup): {
        switchInt(_119) -> [0: bb73, otherwise: bb81]; // scope 3 at cita-executor/src/postman.rs:453:5: 453:6
    }

    bb83: {
        goto -> bb61;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_black_list: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:442:13: 446:14
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:442:13: 446:14

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:442:13: 446:14
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:442:13: 446:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:442:13: 446:14
        _1 = (move _2, move _4, move _6, const 442_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_black_list: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/postman.rs:443:17: 443:57
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/postman.rs:443:17: 443:57

    bb0: {
        _1 = [const "black list is ", const ", clear list is "]; // scope 0 at cita-executor/src/postman.rs:443:17: 443:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:443:17: 443:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:443:17: 443:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:443:17: 443:57
        return;                          // scope 0 at cita-executor/src/postman.rs:443:17: 443:57
    }
}

promoted[2] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_black_list: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_black_list::{closure#0}(_1: &mut [closure@cita-executor/src/postman.rs:388:21: 388:34], _2: &&types::receipt::Receipt) -> bool {
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/postman.rs:388:35: 388:35
    let _3: &&&types::receipt::Receipt;  // in scope 0 at cita-executor/src/postman.rs:388:22: 388:33
    let mut _4: isize;                   // in scope 0 at cita-executor/src/postman.rs:389:22: 389:49
    let mut _5: isize;                   // in scope 0 at cita-executor/src/postman.rs:389:17: 389:50
    let mut _6: &&types::receipt::Receipt; // in scope 0 at cita-executor/src/postman.rs:388:22: 388:33
    let mut _7: &types::receipt::Receipt; // in scope 0 at cita-executor/src/postman.rs:388:22: 388:33
    let mut _8: &&types::receipt::Receipt; // in scope 0 at cita-executor/src/postman.rs:388:22: 388:33
    let mut _9: &types::receipt::Receipt; // in scope 0 at cita-executor/src/postman.rs:388:22: 388:33
    scope 1 {
        debug receipt => _3;             // in scope 1 at cita-executor/src/postman.rs:388:22: 388:33
    }

    bb0: {
        _3 = &_2;                        // scope 0 at cita-executor/src/postman.rs:388:22: 388:33
        _6 = deref_copy (*_3);           // scope 1 at cita-executor/src/postman.rs:388:41: 388:54
        _7 = deref_copy (*_6);           // scope 1 at cita-executor/src/postman.rs:388:41: 388:54
        _5 = discriminant(((*_7).4: std::option::Option<types::errors::ReceiptError>)); // scope 1 at cita-executor/src/postman.rs:388:41: 388:54
        switchInt(move _5) -> [1: bb2, otherwise: bb1]; // scope 1 at cita-executor/src/postman.rs:388:35: 388:54
    }

    bb1: {
        _0 = const false;                // scope 1 at cita-executor/src/postman.rs:390:22: 390:27
        goto -> bb4;                     // scope 1 at cita-executor/src/postman.rs:390:22: 390:27
    }

    bb2: {
        _8 = deref_copy (*_3);           // scope 1 at cita-executor/src/postman.rs:388:41: 388:54
        _9 = deref_copy (*_8);           // scope 1 at cita-executor/src/postman.rs:388:41: 388:54
        _4 = discriminant(((((*_9).4: std::option::Option<types::errors::ReceiptError>) as Some).0: types::errors::ReceiptError)); // scope 1 at cita-executor/src/postman.rs:388:41: 388:54
        switchInt(move _4) -> [0: bb3, 4: bb3, otherwise: bb1]; // scope 1 at cita-executor/src/postman.rs:388:35: 388:54
    }

    bb3: {
        _0 = const true;                 // scope 1 at cita-executor/src/postman.rs:389:95: 389:99
        goto -> bb4;                     // scope 1 at cita-executor/src/postman.rs:389:95: 389:99
    }

    bb4: {
        return;                          // scope 0 at cita-executor/src/postman.rs:391:14: 391:14
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_black_list::{closure#1}(_1: &mut [closure@cita-executor/src/postman.rs:392:18: 392:27], _2: &types::receipt::Receipt) -> H256 {
    debug receipt => _2;                 // in scope 0 at cita-executor/src/postman.rs:392:19: 392:26
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-executor/src/postman.rs:392:28: 392:28

    bb0: {
        _0 = ((*_2).6: cita_types::H256); // scope 0 at cita-executor/src/postman.rs:392:28: 392:52
        return;                          // scope 0 at cita-executor/src/postman.rs:392:52: 392:52
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_black_list::{closure#2}(_1: &mut [closure@cita-executor/src/postman.rs:393:21: 393:27], _2: &H256) -> bool {
    debug hash => _2;                    // in scope 0 at cita-executor/src/postman.rs:393:22: 393:26
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/postman.rs:393:28: 393:28
    let mut _3: &&cita_types::H256;      // in scope 0 at cita-executor/src/postman.rs:393:28: 393:32
    let mut _4: &&cita_types::H256;      // in scope 0 at cita-executor/src/postman.rs:393:36: 393:52
    let _5: &cita_types::H256;           // in scope 0 at cita-executor/src/postman.rs:393:36: 393:52
    let _6: cita_types::H256;            // in scope 0 at cita-executor/src/postman.rs:393:37: 393:52

    bb0: {
        _3 = &_2;                        // scope 0 at cita-executor/src/postman.rs:393:28: 393:32
        _6 = <H256 as Default>::default() -> bb1; // scope 0 at cita-executor/src/postman.rs:393:37: 393:52
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:393:37: 393:50
                                         // + literal: Const { ty: fn() -> H256 {<H256 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 0 at cita-executor/src/postman.rs:393:36: 393:52
        _4 = &_5;                        // scope 0 at cita-executor/src/postman.rs:393:36: 393:52
        _0 = <&H256 as PartialEq>::ne(move _3, move _4) -> bb2; // scope 0 at cita-executor/src/postman.rs:393:28: 393:52
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:393:28: 393:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H256, &'b &H256) -> bool {<&H256 as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-executor/src/postman.rs:393:52: 393:52
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_black_list::{closure#3}(_1: &mut [closure@cita-executor/src/postman.rs:405:21: 405:30], _2: &&H160) -> bool {
    debug address => _2;                 // in scope 0 at cita-executor/src/postman.rs:405:22: 405:29
    debug self => (*((*_1).0: &&postman::Postman)); // in scope 0 at cita-executor/src/postman.rs:383:24: 383:28
    debug bm_value => (*((*_1).1: &usize)); // in scope 0 at cita-executor/src/postman.rs:399:13: 399:21
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/postman.rs:405:31: 405:31
    let mut _3: std::option::Option<bool>; // in scope 0 at cita-executor/src/postman.rs:406:17: 412:75
    let mut _4: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-executor/src/postman.rs:406:17: 411:18
    let _5: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:407:21: 407:45
    let _6: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:408:21: 408:48
    let mut _7: cita_types::H160;        // in scope 0 at cita-executor/src/postman.rs:409:21: 409:30
    let mut _8: types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:410:21: 410:47
    let mut _9: types::block_number::Tag; // in scope 0 at cita-executor/src/postman.rs:410:35: 410:46
    let mut _10: [closure@cita-executor/src/postman.rs:412:22: 412:25]; // in scope 0 at cita-executor/src/postman.rs:412:22: 412:74
    let mut _11: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:405:21: 414:14
    let mut _12: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:405:21: 414:14
    let mut _13: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:405:21: 414:14
    let mut _14: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:405:21: 414:14
    let mut _15: &cita_types::H160;      // in scope 0 at cita-executor/src/postman.rs:405:22: 405:29
    let mut _16: &usize;                 // in scope 0 at cita-executor/src/postman.rs:405:21: 414:14

    bb0: {
        _11 = deref_copy ((*_1).0: &&postman::Postman); // scope 0 at cita-executor/src/postman.rs:407:21: 407:45
        _12 = deref_copy (*_11);         // scope 0 at cita-executor/src/postman.rs:407:21: 407:45
        _5 = &((*_12).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 0 at cita-executor/src/postman.rs:407:21: 407:45
        _13 = deref_copy ((*_1).0: &&postman::Postman); // scope 0 at cita-executor/src/postman.rs:408:21: 408:48
        _14 = deref_copy (*_13);         // scope 0 at cita-executor/src/postman.rs:408:21: 408:48
        _6 = &((*_14).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 0 at cita-executor/src/postman.rs:408:21: 408:48
        _15 = deref_copy (*_2);          // scope 0 at cita-executor/src/postman.rs:409:21: 409:30
        _7 = (*_15);                     // scope 0 at cita-executor/src/postman.rs:409:21: 409:30
        _9 = const types::block_number::Tag::Latest; // scope 0 at cita-executor/src/postman.rs:410:35: 410:46
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: types::block_number::Tag, val: Value(Scalar(0x00)) }
        _8 = types::block_number::BlockTag::Tag(move _9); // scope 0 at cita-executor/src/postman.rs:410:21: 410:47
        _4 = core::libexecutor::command::balance_at(_5, _6, move _7, move _8) -> bb1; // scope 0 at cita-executor/src/postman.rs:406:17: 411:18
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:406:17: 406:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, H160, types::block_number::BlockTag) -> std::option::Option<Vec<u8>> {core::libexecutor::command::balance_at}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = deref_copy ((*_1).1: &usize); // scope 0 at cita-executor/src/postman.rs:412:22: 412:74
        _10 = [closure@cita-executor/src/postman.rs:412:22: 412:25] { bm_value: _16 }; // scope 0 at cita-executor/src/postman.rs:412:22: 412:74
                                         // closure
                                         // + def_id: DefId(0:152 ~ cita_executor[bbb2]::postman::{impl#0}::pub_black_list::{closure#3}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::vec::Vec<u8>,)) -> bool,
                                         //     (&usize,),
                                         // ]
        _3 = std::option::Option::<Vec<u8>>::map::<bool, [closure@cita-executor/src/postman.rs:412:22: 412:25]>(move _4, move _10) -> bb2; // scope 0 at cita-executor/src/postman.rs:406:17: 412:75
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:412:18: 412:21
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-executor/src/postman.rs:412:22: 412:25]) -> std::option::Option<bool> {std::option::Option::<Vec<u8>>::map::<bool, [closure@cita-executor/src/postman.rs:412:22: 412:25]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = std::option::Option::<bool>::unwrap_or(move _3, const false) -> bb3; // scope 0 at cita-executor/src/postman.rs:406:17: 413:34
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:413:18: 413:27
                                         // + literal: Const { ty: fn(std::option::Option<bool>, bool) -> bool {std::option::Option::<bool>::unwrap_or}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-executor/src/postman.rs:414:14: 414:14
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_black_list::{closure#3}::{closure#0}(_1: [closure@cita-executor/src/postman.rs:412:22: 412:25], _2: Vec<u8>) -> bool {
    debug x => _2;                       // in scope 0 at cita-executor/src/postman.rs:412:23: 412:24
    debug bm_value => (*(_1.0: &usize)); // in scope 0 at cita-executor/src/postman.rs:399:13: 399:21
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/postman.rs:412:26: 412:26
    let mut _3: &cita_types::U256;       // in scope 0 at cita-executor/src/postman.rs:412:26: 412:50
    let _4: cita_types::U256;            // in scope 0 at cita-executor/src/postman.rs:412:26: 412:50
    let mut _5: &[u8];                   // in scope 0 at cita-executor/src/postman.rs:412:37: 412:49
    let mut _6: &std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:412:37: 412:49
    let mut _7: &cita_types::U256;       // in scope 0 at cita-executor/src/postman.rs:412:54: 412:74
    let _8: cita_types::U256;            // in scope 0 at cita-executor/src/postman.rs:412:54: 412:74
    let mut _9: usize;                   // in scope 0 at cita-executor/src/postman.rs:412:65: 412:73
    let mut _10: &usize;                 // in scope 0 at cita-executor/src/postman.rs:412:22: 412:74

    bb0: {
        _6 = &_2;                        // scope 0 at cita-executor/src/postman.rs:412:37: 412:49
        _5 = Vec::<u8>::as_slice(move _6) -> [return: bb1, unwind: bb6]; // scope 0 at cita-executor/src/postman.rs:412:37: 412:49
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:412:39: 412:47
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a [u8] {Vec::<u8>::as_slice}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <U256 as From<&[u8]>>::from(move _5) -> [return: bb2, unwind: bb6]; // scope 0 at cita-executor/src/postman.rs:412:26: 412:50
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:412:26: 412:36
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[u8]) -> U256 {<U256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at cita-executor/src/postman.rs:412:26: 412:50
        _10 = deref_copy (_1.0: &usize); // scope 0 at cita-executor/src/postman.rs:412:65: 412:73
        _9 = (*_10);                     // scope 0 at cita-executor/src/postman.rs:412:65: 412:73
        _8 = <U256 as From<usize>>::from(move _9) -> [return: bb3, unwind: bb6]; // scope 0 at cita-executor/src/postman.rs:412:54: 412:74
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:412:54: 412:64
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(usize) -> U256 {<U256 as From<usize>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &_8;                        // scope 0 at cita-executor/src/postman.rs:412:54: 412:74
        _0 = <U256 as PartialOrd>::ge(move _3, move _7) -> [return: bb4, unwind: bb6]; // scope 0 at cita-executor/src/postman.rs:412:26: 412:74
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:412:26: 412:74
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U256, &'b U256) -> bool {<U256 as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_2) -> bb5;                 // scope 0 at cita-executor/src/postman.rs:412:73: 412:74
    }

    bb5: {
        return;                          // scope 0 at cita-executor/src/postman.rs:412:74: 412:74
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:412:73: 412:74
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:412:22: 412:74
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_black_list::{closure#4}(_1: &mut [closure@cita-executor/src/postman.rs:423:21: 423:25], _2: &&types::transaction::SignedTransaction) -> bool {
    debug tx => _2;                      // in scope 0 at cita-executor/src/postman.rs:423:22: 423:24
    debug blacklist_transaction_hash => (*((*_1).0: &std::vec::Vec<cita_types::H256>)); // in scope 0 at cita-executor/src/postman.rs:385:13: 385:39
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/postman.rs:423:26: 423:26
    let mut _3: &[cita_types::H256];     // in scope 0 at cita-executor/src/postman.rs:423:26: 423:89
    let _4: &[cita_types::H256];         // in scope 0 at cita-executor/src/postman.rs:423:26: 423:89
    let _5: &cita_types::H256;           // in scope 0 at cita-executor/src/postman.rs:423:62: 423:88
    let _6: cita_types::H256;            // in scope 0 at cita-executor/src/postman.rs:423:63: 423:88
    let mut _7: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-executor/src/postman.rs:423:21: 423:89
    let mut _8: &types::transaction::SignedTransaction; // in scope 0 at cita-executor/src/postman.rs:423:22: 423:24

    bb0: {
        _7 = deref_copy ((*_1).0: &std::vec::Vec<cita_types::H256>); // scope 0 at cita-executor/src/postman.rs:423:26: 423:89
        _4 = <Vec<H256> as Deref>::deref(_7) -> bb1; // scope 0 at cita-executor/src/postman.rs:423:26: 423:89
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:423:26: 423:89
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> &'a <Vec<H256> as Deref>::Target {<Vec<H256> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-executor/src/postman.rs:423:26: 423:89
        _8 = deref_copy (*_2);           // scope 0 at cita-executor/src/postman.rs:423:63: 423:88
        _6 = types::transaction::SignedTransaction::get_transaction_hash(_8) -> bb2; // scope 0 at cita-executor/src/postman.rs:423:63: 423:88
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:423:66: 423:86
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::SignedTransaction) -> H256 {types::transaction::SignedTransaction::get_transaction_hash}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 0 at cita-executor/src/postman.rs:423:62: 423:88
        _0 = core::slice::<impl [H256]>::contains(move _3, _5) -> bb3; // scope 0 at cita-executor/src/postman.rs:423:26: 423:89
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:423:53: 423:61
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [H256], &'b H256) -> bool {core::slice::<impl [H256]>::contains}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-executor/src/postman.rs:423:89: 423:89
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::pub_black_list::{closure#5}(_1: &mut [closure@cita-executor/src/postman.rs:424:18: 424:22], _2: &types::transaction::SignedTransaction) -> H160 {
    debug tx => _2;                      // in scope 0 at cita-executor/src/postman.rs:424:19: 424:21
    let mut _0: cita_types::H160;        // return place in scope 0 at cita-executor/src/postman.rs:424:23: 424:23
    let mut _3: &cita_types::H160;       // in scope 0 at cita-executor/src/postman.rs:424:24: 424:35

    bb0: {
        _3 = types::transaction::SignedTransaction::sender(_2) -> bb1; // scope 0 at cita-executor/src/postman.rs:424:24: 424:35
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:424:27: 424:33
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::SignedTransaction) -> &'a H160 {types::transaction::SignedTransaction::sender}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = (*_3);                      // scope 0 at cita-executor/src/postman.rs:424:23: 424:35
        return;                          // scope 0 at cita-executor/src/postman.rs:424:35: 424:35
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::update_by_rich_status(_1: &mut Postman, _2: &libproto::RichStatus) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:455:30: 455:39
    debug rich_status => _2;             // in scope 0 at cita-executor/src/postman.rs:455:41: 455:52
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:455:67: 455:67
    let _3: u64;                         // in scope 0 at cita-executor/src/postman.rs:456:13: 456:24
    let mut _4: usize;                   // in scope 0 at cita-executor/src/postman.rs:456:39: 456:76
    let mut _5: usize;                   // in scope 0 at cita-executor/src/postman.rs:456:39: 456:72
    let mut _6: u64;                     // in scope 0 at cita-executor/src/postman.rs:456:39: 456:63
    let mut _7: (usize, bool);           // in scope 0 at cita-executor/src/postman.rs:456:39: 456:76
    let _8: ();                          // in scope 0 at cita-executor/src/postman.rs:457:9: 457:41
    let mut _9: &mut backlogs::Backlogs; // in scope 0 at cita-executor/src/postman.rs:457:9: 457:41
    let mut _10: u64;                    // in scope 0 at cita-executor/src/postman.rs:457:29: 457:40
    scope 1 {
        debug next_height => _3;         // in scope 1 at cita-executor/src/postman.rs:456:13: 456:24
    }

    bb0: {
        _6 = libproto::RichStatus::get_height(_2) -> bb1; // scope 0 at cita-executor/src/postman.rs:456:39: 456:63
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:456:51: 456:61
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::RichStatus) -> u64 {libproto::RichStatus::get_height}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _6 as usize (IntToInt); // scope 0 at cita-executor/src/postman.rs:456:39: 456:72
        _7 = CheckedAdd(_5, const 1_usize); // scope 0 at cita-executor/src/postman.rs:456:39: 456:76
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, const 1_usize) -> bb2; // scope 0 at cita-executor/src/postman.rs:456:39: 456:76
    }

    bb2: {
        _4 = move (_7.0: usize);         // scope 0 at cita-executor/src/postman.rs:456:39: 456:76
        _3 = wrap_height(move _4) -> bb3; // scope 0 at cita-executor/src/postman.rs:456:27: 456:77
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:456:27: 456:38
                                         // + literal: Const { ty: fn(usize) -> u64 {wrap_height}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut ((*_1).0: backlogs::Backlogs); // scope 1 at cita-executor/src/postman.rs:457:9: 457:41
        _10 = _3;                        // scope 1 at cita-executor/src/postman.rs:457:29: 457:40
        _8 = Backlogs::prune(move _9, move _10) -> bb4; // scope 1 at cita-executor/src/postman.rs:457:9: 457:41
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:457:23: 457:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut Backlogs, u64) {Backlogs::prune}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at cita-executor/src/postman.rs:458:6: 458:6
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_auth_miscellaneous(_1: &Postman) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:460:33: 460:38
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:460:40: 460:40
    let mut _2: libproto::Miscellaneous; // in scope 0 at cita-executor/src/postman.rs:461:13: 461:30
    let _4: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:462:40: 462:64
    let _5: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:462:66: 462:93
    let mut _6: isize;                   // in scope 0 at cita-executor/src/postman.rs:463:16: 463:30
    let _8: ();                          // in scope 0 at cita-executor/src/postman.rs:464:13: 467:14
    let mut _9: isize;                   // in scope 0 at cita-executor/src/postman.rs:465:17: 465:32
    let mut _11: &mut libproto::Miscellaneous; // in scope 0 at cita-executor/src/postman.rs:465:36: 465:66
    let mut _13: &mut libproto::Miscellaneous; // in scope 0 at cita-executor/src/postman.rs:466:36: 466:96
    let mut _14: std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:466:66: 466:95
    let mut _15: &[u8];                  // in scope 0 at cita-executor/src/postman.rs:466:66: 466:95
    let mut _16: &[u8; 32];              // in scope 0 at cita-executor/src/postman.rs:466:66: 466:95
    let _17: [u8; 32];                   // in scope 0 at cita-executor/src/postman.rs:466:66: 466:86
    let mut _19: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _20: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _21: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _22: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _23: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _24: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _25: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _26: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _27: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _28: &[&str];                // in scope 0 at cita-executor/src/postman.rs:469:20: 469:61
    let mut _29: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _30: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _31: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _32: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:469:63: 469:71
    let _33: &core::contracts::solc::sys_config::ChainId; // in scope 0 at cita-executor/src/postman.rs:469:63: 469:71
    let mut _35: libproto::Miscellaneous; // in scope 0 at cita-executor/src/postman.rs:472:28: 472:41
    let _36: ();                         // in scope 0 at cita-executor/src/postman.rs:473:9: 476:10
    let mut _37: std::string::String;    // in scope 0 at cita-executor/src/postman.rs:474:13: 474:59
    let mut _38: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _39: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _40: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _41: std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:475:13: 475:36
    let mut _42: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-executor/src/postman.rs:475:13: 475:27
    let mut _43: libproto::Message;      // in scope 0 at cita-executor/src/postman.rs:475:13: 475:16
    let mut _47: bool;                   // in scope 0 at cita-executor/src/postman.rs:476:9: 476:10
    let mut _48: bool;                   // in scope 0 at cita-executor/src/postman.rs:477:5: 477:6
    let mut _49: bool;                   // in scope 0 at cita-executor/src/postman.rs:477:5: 477:6
    scope 1 {
        debug miscellaneous => _2;       // in scope 1 at cita-executor/src/postman.rs:461:13: 461:30
        let _3: std::option::Option<core::contracts::solc::sys_config::ChainId>; // in scope 1 at cita-executor/src/postman.rs:462:13: 462:19
        scope 2 {
            debug option => _3;          // in scope 2 at cita-executor/src/postman.rs:462:13: 462:19
            let _34: libproto::Message;  // in scope 2 at cita-executor/src/postman.rs:472:13: 472:16
            scope 3 {
                debug chain_id => _7;    // in scope 3 at cita-executor/src/postman.rs:463:21: 463:29
                let _7: core::contracts::solc::sys_config::ChainId; // in scope 3 at cita-executor/src/postman.rs:463:21: 463:29
                let _10: u32;            // in scope 3 at cita-executor/src/postman.rs:465:29: 465:31
                let _12: cita_types::U256; // in scope 3 at cita-executor/src/postman.rs:466:29: 466:31
                let _18: log::Level;     // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                scope 4 {
                    debug v0 => _10;     // in scope 4 at cita-executor/src/postman.rs:465:29: 465:31
                }
                scope 5 {
                    debug v1 => _12;     // in scope 5 at cita-executor/src/postman.rs:466:29: 466:31
                }
                scope 6 {
                    debug lvl => _18;    // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let mut _44: &(&str, &str, &str, u32); // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                    let mut _45: &[&str; 1]; // in scope 6 at cita-executor/src/postman.rs:469:20: 469:61
                    let mut _46: &log::LevelFilter; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                }
            }
            scope 7 {
                debug msg => _34;        // in scope 7 at cita-executor/src/postman.rs:472:13: 472:16
            }
        }
    }

    bb0: {
        _47 = const false;               // scope 0 at cita-executor/src/postman.rs:461:13: 461:30
        _48 = const false;               // scope 0 at cita-executor/src/postman.rs:461:13: 461:30
        _49 = const false;               // scope 0 at cita-executor/src/postman.rs:461:13: 461:30
        _49 = const true;                // scope 0 at cita-executor/src/postman.rs:461:33: 461:53
        _2 = libproto::Miscellaneous::new() -> bb1; // scope 0 at cita-executor/src/postman.rs:461:33: 461:53
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:461:33: 461:51
                                         // + literal: Const { ty: fn() -> libproto::Miscellaneous {libproto::Miscellaneous::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &((*_1).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 1 at cita-executor/src/postman.rs:462:40: 462:64
        _5 = &((*_1).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 1 at cita-executor/src/postman.rs:462:66: 462:93
        _3 = core::libexecutor::command::chain_id(_4, _5) -> [return: bb2, unwind: bb31]; // scope 1 at cita-executor/src/postman.rs:462:22: 462:94
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:462:22: 462:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>) -> std::option::Option<ChainId> {core::libexecutor::command::chain_id}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_3);           // scope 3 at cita-executor/src/postman.rs:463:16: 463:30
        switchInt(move _6) -> [1: bb3, otherwise: bb19]; // scope 3 at cita-executor/src/postman.rs:463:16: 463:30
    }

    bb3: {
        _7 = move ((_3 as Some).0: core::contracts::solc::sys_config::ChainId); // scope 3 at cita-executor/src/postman.rs:463:21: 463:29
        _9 = discriminant(_7);           // scope 3 at cita-executor/src/postman.rs:464:19: 464:27
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at cita-executor/src/postman.rs:464:13: 464:27
    }

    bb4: {
        _12 = ((_7 as V1).0: cita_types::U256); // scope 3 at cita-executor/src/postman.rs:466:29: 466:31
        _13 = &mut _2;                   // scope 5 at cita-executor/src/postman.rs:466:36: 466:96
        _17 = <[u8; 32] as From<U256>>::from(_12) -> [return: bb7, unwind: bb31]; // scope 5 at cita-executor/src/postman.rs:466:66: 466:86
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:466:66: 466:82
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(U256) -> [u8; 32] {<[u8; 32] as From<U256>>::from}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 3 at cita-executor/src/postman.rs:464:19: 464:27
    }

    bb6: {
        _10 = ((_7 as V0).0: u32);       // scope 3 at cita-executor/src/postman.rs:465:29: 465:31
        _11 = &mut _2;                   // scope 4 at cita-executor/src/postman.rs:465:36: 465:66
        _8 = libproto::Miscellaneous::set_chain_id(move _11, _10) -> [return: bb32, unwind: bb31]; // scope 4 at cita-executor/src/postman.rs:465:36: 465:66
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:465:50: 465:62
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Miscellaneous, u32) {libproto::Miscellaneous::set_chain_id}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = &_17;                      // scope 5 at cita-executor/src/postman.rs:466:66: 466:95
        _15 = move _16 as &[u8] (Pointer(Unsize)); // scope 5 at cita-executor/src/postman.rs:466:66: 466:95
        _14 = slice::<impl [u8]>::to_vec(move _15) -> [return: bb8, unwind: bb31]; // scope 5 at cita-executor/src/postman.rs:466:66: 466:95
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:466:87: 466:93
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb8: {
        _8 = libproto::Miscellaneous::set_chain_id_v1(move _13, move _14) -> [return: bb33, unwind: bb31]; // scope 5 at cita-executor/src/postman.rs:466:36: 466:96
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:466:50: 466:65
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Miscellaneous, Vec<u8>) {libproto::Miscellaneous::set_chain_id_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = log::Level::Trace;         // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _21 = &_18;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _46 = const _;                   // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::reply_auth_miscellaneous, [], Some(promoted[2])) }
        _20 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _21, _46) -> [return: bb13, unwind: bb31]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb10: {
        _19 = const false;               // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb12;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _23 = &_18;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _25 = log::max_level() -> [return: bb14, unwind: bb31]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _19) -> [0: bb19, otherwise: bb16]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        switchInt(move _20) -> [0: bb10, otherwise: bb11]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb14: {
        _24 = &_25;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _22 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _23, move _24) -> [return: bb15, unwind: bb31]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb15: {
        _19 = move _22;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb12;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb16: {
        _45 = const _;                   // scope 6 at cita-executor/src/postman.rs:469:20: 469:61
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:469:20: 469:61
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_auth_miscellaneous, [], Some(promoted[1])) }
        _28 = _45 as &[&str] (Pointer(Unsize)); // scope 6 at cita-executor/src/postman.rs:469:20: 469:61
        _33 = &_7;                       // scope 6 at cita-executor/src/postman.rs:469:63: 469:71
        _32 = core::fmt::ArgumentV1::<'_>::new_debug::<ChainId>(_33) -> [return: bb17, unwind: bb31]; // scope 6 at cita-executor/src/postman.rs:469:63: 469:71
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:469:63: 469:71
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b ChainId) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<ChainId>}, val: Value(<ZST>) }
    }

    bb17: {
        _31 = [move _32];                // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _30 = &_31;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _29 = _30 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _27 = Arguments::<'_>::new_v1(move _28, move _29) -> [return: bb18, unwind: bb31]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb18: {
        _44 = const _;                   // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::reply_auth_miscellaneous, [], Some(promoted[0])) }
        _26 = log::__private_api_log(move _27, _18, _44) -> [return: bb34, unwind: bb31]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb19: {
        _49 = const false;               // scope 2 at cita-executor/src/postman.rs:472:28: 472:41
        _35 = move _2;                   // scope 2 at cita-executor/src/postman.rs:472:28: 472:41
        _34 = <libproto::Miscellaneous as Into<libproto::Message>>::into(move _35) -> [return: bb20, unwind: bb31]; // scope 2 at cita-executor/src/postman.rs:472:28: 472:48
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:472:42: 472:46
                                         // + literal: Const { ty: fn(libproto::Miscellaneous) -> libproto::Message {<libproto::Miscellaneous as Into<libproto::Message>>::into}, val: Value(<ZST>) }
    }

    bb20: {
        _48 = const true;                // scope 2 at cita-executor/src/postman.rs:472:47: 472:48
        _39 = const libproto::router::SubModules::Executor; // scope 7 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x05)) }
        _40 = const libproto::router::MsgType::Miscellaneous; // scope 7 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x13)) }
        _38 = RoutingKey(move _39, move _40); // scope 7 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _37 = <RoutingKey as Into<std::string::String>>::into(move _38) -> [return: bb21, unwind: bb29]; // scope 7 at cita-executor/src/postman.rs:474:13: 474:59
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:474:53: 474:57
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb21: {
        _47 = const true;                // scope 7 at cita-executor/src/postman.rs:474:58: 474:59
        _48 = const false;               // scope 7 at cita-executor/src/postman.rs:475:13: 475:16
        _43 = move _34;                  // scope 7 at cita-executor/src/postman.rs:475:13: 475:16
        _42 = <libproto::Message as libproto::TryInto<Vec<u8>>>::try_into(move _43) -> [return: bb22, unwind: bb27]; // scope 7 at cita-executor/src/postman.rs:475:13: 475:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:475:17: 475:25
                                         // + literal: Const { ty: fn(libproto::Message) -> Result<Vec<u8>, <libproto::Message as libproto::TryInto<Vec<u8>>>::Error> {<libproto::Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb22: {
        _41 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _42) -> [return: bb23, unwind: bb27]; // scope 7 at cita-executor/src/postman.rs:475:13: 475:36
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:475:28: 475:34
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb23: {
        _47 = const false;               // scope 7 at cita-executor/src/postman.rs:473:9: 476:10
        _36 = Postman::response_mq(_1, move _37, move _41) -> [return: bb24, unwind: bb27]; // scope 7 at cita-executor/src/postman.rs:473:9: 476:10
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:473:14: 473:25
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, std::string::String, Vec<u8>) {Postman::response_mq}, val: Value(<ZST>) }
    }

    bb24: {
        _47 = const false;               // scope 7 at cita-executor/src/postman.rs:476:9: 476:10
        _48 = const false;               // scope 2 at cita-executor/src/postman.rs:477:5: 477:6
        _49 = const false;               // scope 0 at cita-executor/src/postman.rs:477:5: 477:6
        return;                          // scope 0 at cita-executor/src/postman.rs:477:6: 477:6
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:460:5: 477:6
    }

    bb26 (cleanup): {
        drop(_37) -> bb29;               // scope 7 at cita-executor/src/postman.rs:476:9: 476:10
    }

    bb27 (cleanup): {
        switchInt(_47) -> [0: bb29, otherwise: bb26]; // scope 7 at cita-executor/src/postman.rs:476:9: 476:10
    }

    bb28 (cleanup): {
        drop(_34) -> bb31;               // scope 2 at cita-executor/src/postman.rs:477:5: 477:6
    }

    bb29 (cleanup): {
        switchInt(_48) -> [0: bb31, otherwise: bb28]; // scope 2 at cita-executor/src/postman.rs:477:5: 477:6
    }

    bb30 (cleanup): {
        drop(_2) -> bb25;                // scope 0 at cita-executor/src/postman.rs:477:5: 477:6
    }

    bb31 (cleanup): {
        switchInt(_49) -> [0: bb25, otherwise: bb30]; // scope 0 at cita-executor/src/postman.rs:477:5: 477:6
    }

    bb32: {
        goto -> bb9;                     // scope 4 at cita-executor/src/postman.rs:465:36: 465:66
    }

    bb33: {
        goto -> bb9;                     // scope 5 at cita-executor/src/postman.rs:466:36: 466:96
    }

    bb34: {
        goto -> bb19;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_auth_miscellaneous: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:469:13: 469:72
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:469:13: 469:72

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:469:13: 469:72
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:469:13: 469:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:469:13: 469:72
        _1 = (move _2, move _4, move _6, const 469_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_auth_miscellaneous: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:469:20: 469:61
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:469:20: 469:61

    bb0: {
        _1 = [const "reply miscellaneous msg, chain_id: "]; // scope 0 at cita-executor/src/postman.rs:469:20: 469:61
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:469:20: 469:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:469:20: 469:61
        return;                          // scope 0 at cita-executor/src/postman.rs:469:20: 469:61
    }
}

promoted[2] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_auth_miscellaneous: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_auth_miscellaneous::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-executor/src/postman.rs:466:72: 466:74

    bb0: {
        _0 = const 32_usize;             // scope 0 at cita-executor/src/postman.rs:466:72: 466:74
        return;                          // scope 0 at cita-executor/src/postman.rs:466:72: 466:74
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request(_1: &Postman, _2: libproto::Request) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:479:28: 479:33
    debug req => _2;                     // in scope 0 at cita-executor/src/postman.rs:479:35: 479:42
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:479:62: 479:62
    let mut _3: libproto::Response;      // in scope 0 at cita-executor/src/postman.rs:480:13: 480:25
    let _4: ();                          // in scope 0 at cita-executor/src/postman.rs:481:9: 481:55
    let mut _5: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:481:9: 481:55
    let mut _6: std::vec::Vec<u8>;       // in scope 0 at cita-executor/src/postman.rs:481:33: 481:54
    let mut _7: &mut libproto::Request;  // in scope 0 at cita-executor/src/postman.rs:481:33: 481:54
    let _8: ();                          // in scope 0 at cita-executor/src/postman.rs:483:9: 707:10
    let mut _9: libproto::Request_oneof_req; // in scope 0 at cita-executor/src/postman.rs:483:15: 483:31
    let mut _10: std::option::Option<libproto::Request_oneof_req>; // in scope 0 at cita-executor/src/postman.rs:483:15: 483:22
    let mut _11: isize;                  // in scope 0 at cita-executor/src/postman.rs:484:13: 484:32
    let mut _14: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _15: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _16: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _17: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _18: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _19: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _20: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _21: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _22: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _23: &[&str];                // in scope 0 at cita-executor/src/postman.rs:485:24: 485:43
    let mut _24: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _25: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _26: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _27: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:485:45: 485:49
    let _28: &libproto::Call;            // in scope 0 at cita-executor/src/postman.rs:485:45: 485:49
    let mut _29: std::result::Result<std::result::Result<(), ()>, ()>; // in scope 0 at cita-executor/src/postman.rs:486:25: 506:23
    let mut _30: std::result::Result<std::result::Result<(), ()>, serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:486:25: 502:23
    let mut _31: std::result::Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:486:25: 486:74
    let mut _32: &str;                   // in scope 0 at cita-executor/src/postman.rs:486:61: 486:73
    let _33: &str;                       // in scope 0 at cita-executor/src/postman.rs:486:61: 486:73
    let _34: &std::string::String;       // in scope 0 at cita-executor/src/postman.rs:486:61: 486:73
    let mut _35: [closure@cita-executor/src/postman.rs:487:26: 487:36]; // in scope 0 at cita-executor/src/postman.rs:487:26: 502:22
    let mut _36: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:487:26: 502:22
    let mut _37: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:487:26: 502:22
    let mut _38: [closure@cita-executor/src/postman.rs:503:30: 503:35]; // in scope 0 at cita-executor/src/postman.rs:503:30: 506:22
    let mut _39: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:503:30: 506:22
    let mut _42: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _43: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _44: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _45: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _46: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _47: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _48: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _49: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _50: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _51: &[&str];                // in scope 0 at cita-executor/src/postman.rs:510:24: 510:58
    let mut _52: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _53: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _54: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _55: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:510:60: 510:64
    let _56: &libproto::Call;            // in scope 0 at cita-executor/src/postman.rs:510:60: 510:64
    let mut _57: std::result::Result<std::result::Result<(), ()>, ()>; // in scope 0 at cita-executor/src/postman.rs:511:25: 531:23
    let mut _58: std::result::Result<std::result::Result<(), ()>, serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:511:25: 527:23
    let mut _59: std::result::Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:511:25: 511:74
    let mut _60: &str;                   // in scope 0 at cita-executor/src/postman.rs:511:61: 511:73
    let _61: &str;                       // in scope 0 at cita-executor/src/postman.rs:511:61: 511:73
    let _62: &std::string::String;       // in scope 0 at cita-executor/src/postman.rs:511:61: 511:73
    let mut _63: [closure@cita-executor/src/postman.rs:512:26: 512:36]; // in scope 0 at cita-executor/src/postman.rs:512:26: 527:22
    let mut _64: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:512:26: 527:22
    let mut _65: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:512:26: 527:22
    let mut _66: [closure@cita-executor/src/postman.rs:528:30: 528:35]; // in scope 0 at cita-executor/src/postman.rs:528:30: 531:22
    let mut _67: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:528:30: 531:22
    let mut _70: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _71: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _72: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _73: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _74: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _75: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _76: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _77: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _78: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _79: &[&str];                // in scope 0 at cita-executor/src/postman.rs:535:24: 535:69
    let mut _80: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _81: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _82: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _83: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:535:71: 535:79
    let _84: &std::string::String;       // in scope 0 at cita-executor/src/postman.rs:535:71: 535:79
    let mut _85: std::result::Result<(), ()>; // in scope 0 at cita-executor/src/postman.rs:536:25: 556:23
    let mut _86: std::result::Result<jsonrpc_types::rpc_types::CountOrCode, ()>; // in scope 0 at cita-executor/src/postman.rs:536:25: 540:23
    let mut _87: std::result::Result<jsonrpc_types::rpc_types::CountOrCode, serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:536:25: 536:71
    let mut _88: &str;                   // in scope 0 at cita-executor/src/postman.rs:536:61: 536:70
    let _89: &str;                       // in scope 0 at cita-executor/src/postman.rs:536:61: 536:70
    let _90: &std::string::String;       // in scope 0 at cita-executor/src/postman.rs:536:61: 536:70
    let mut _91: [closure@cita-executor/src/postman.rs:537:30: 537:35]; // in scope 0 at cita-executor/src/postman.rs:537:30: 540:22
    let mut _92: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:537:30: 540:22
    let mut _93: [closure@cita-executor/src/postman.rs:541:26: 541:36]; // in scope 0 at cita-executor/src/postman.rs:541:26: 556:22
    let mut _94: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:541:26: 556:22
    let mut _95: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:541:26: 556:22
    let mut _98: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _99: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _100: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _101: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _102: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _103: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _104: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _105: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _106: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _107: &[&str];               // in scope 0 at cita-executor/src/postman.rs:560:24: 560:57
    let mut _108: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _109: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _110: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _111: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:560:59: 560:71
    let _112: &std::string::String;      // in scope 0 at cita-executor/src/postman.rs:560:59: 560:71
    let mut _113: std::result::Result<(), ()>; // in scope 0 at cita-executor/src/postman.rs:561:25: 578:23
    let mut _114: std::result::Result<jsonrpc_types::rpc_types::CountOrCode, ()>; // in scope 0 at cita-executor/src/postman.rs:561:25: 565:23
    let mut _115: std::result::Result<jsonrpc_types::rpc_types::CountOrCode, serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:561:25: 561:75
    let mut _116: &str;                  // in scope 0 at cita-executor/src/postman.rs:561:61: 561:74
    let _117: &str;                      // in scope 0 at cita-executor/src/postman.rs:561:61: 561:74
    let _118: &std::string::String;      // in scope 0 at cita-executor/src/postman.rs:561:61: 561:74
    let mut _119: [closure@cita-executor/src/postman.rs:562:30: 562:35]; // in scope 0 at cita-executor/src/postman.rs:562:30: 565:22
    let mut _120: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:562:30: 565:22
    let mut _121: [closure@cita-executor/src/postman.rs:566:26: 566:40]; // in scope 0 at cita-executor/src/postman.rs:566:26: 578:22
    let mut _122: &&postman::Postman;    // in scope 0 at cita-executor/src/postman.rs:566:26: 578:22
    let mut _123: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:566:26: 578:22
    let mut _126: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _127: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _128: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _129: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _130: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _131: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _132: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _133: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _134: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _135: &[&str];               // in scope 0 at cita-executor/src/postman.rs:582:24: 582:56
    let mut _136: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _137: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _138: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _139: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:582:58: 582:69
    let _140: &std::string::String;      // in scope 0 at cita-executor/src/postman.rs:582:58: 582:69
    let mut _141: std::result::Result<(), ()>; // in scope 0 at cita-executor/src/postman.rs:583:25: 600:23
    let mut _142: std::result::Result<jsonrpc_types::rpc_types::CountOrCode, ()>; // in scope 0 at cita-executor/src/postman.rs:583:25: 587:23
    let mut _143: std::result::Result<jsonrpc_types::rpc_types::CountOrCode, serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:583:25: 583:74
    let mut _144: &str;                  // in scope 0 at cita-executor/src/postman.rs:583:61: 583:73
    let _145: &str;                      // in scope 0 at cita-executor/src/postman.rs:583:61: 583:73
    let _146: &std::string::String;      // in scope 0 at cita-executor/src/postman.rs:583:61: 583:73
    let mut _147: [closure@cita-executor/src/postman.rs:584:30: 584:35]; // in scope 0 at cita-executor/src/postman.rs:584:30: 587:22
    let mut _148: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:584:30: 587:22
    let mut _149: [closure@cita-executor/src/postman.rs:588:26: 588:39]; // in scope 0 at cita-executor/src/postman.rs:588:26: 600:22
    let mut _150: &&postman::Postman;    // in scope 0 at cita-executor/src/postman.rs:588:26: 600:22
    let mut _151: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:588:26: 600:22
    let mut _154: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _155: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _156: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _157: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _158: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _159: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _160: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _161: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _162: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _163: &[&str];               // in scope 0 at cita-executor/src/postman.rs:604:24: 604:60
    let mut _164: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _165: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _166: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _167: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:604:62: 604:77
    let _168: &std::string::String;      // in scope 0 at cita-executor/src/postman.rs:604:62: 604:77
    let mut _169: std::result::Result<(), ()>; // in scope 0 at cita-executor/src/postman.rs:605:25: 622:23
    let mut _170: std::result::Result<jsonrpc_types::rpc_types::CountOrCode, ()>; // in scope 0 at cita-executor/src/postman.rs:605:25: 609:23
    let mut _171: std::result::Result<jsonrpc_types::rpc_types::CountOrCode, serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:605:25: 605:78
    let mut _172: &str;                  // in scope 0 at cita-executor/src/postman.rs:605:61: 605:77
    let _173: &str;                      // in scope 0 at cita-executor/src/postman.rs:605:61: 605:77
    let _174: &std::string::String;      // in scope 0 at cita-executor/src/postman.rs:605:61: 605:77
    let mut _175: [closure@cita-executor/src/postman.rs:606:30: 606:35]; // in scope 0 at cita-executor/src/postman.rs:606:30: 609:22
    let mut _176: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:606:30: 609:22
    let mut _177: [closure@cita-executor/src/postman.rs:610:26: 610:43]; // in scope 0 at cita-executor/src/postman.rs:610:26: 622:22
    let mut _178: &&postman::Postman;    // in scope 0 at cita-executor/src/postman.rs:610:26: 622:22
    let mut _179: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:610:26: 622:22
    let mut _181: std::result::Result<jsonrpc_types::rpc_types::MetaData, std::string::String>; // in scope 0 at cita-executor/src/postman.rs:626:23: 626:101
    let _182: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:626:41: 626:65
    let _183: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:626:67: 626:94
    let mut _184: isize;                 // in scope 0 at cita-executor/src/postman.rs:628:21: 628:33
    let mut _186: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:629:25: 629:90
    let mut _187: std::string::String;   // in scope 0 at cita-executor/src/postman.rs:629:48: 629:89
    let mut _188: std::result::Result<std::string::String, serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:629:48: 629:80
    let _189: &jsonrpc_types::rpc_types::MetaData; // in scope 0 at cita-executor/src/postman.rs:629:70: 629:79
    let _191: ();                        // in scope 0 at cita-executor/src/postman.rs:632:25: 632:68
    let mut _192: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:632:25: 632:68
    let mut _193: i64;                   // in scope 0 at cita-executor/src/postman.rs:632:43: 632:67
    let _194: ();                        // in scope 0 at cita-executor/src/postman.rs:633:25: 633:58
    let mut _195: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:633:25: 633:58
    let mut _196: std::string::String;   // in scope 0 at cita-executor/src/postman.rs:633:48: 633:57
    let mut _199: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _200: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _201: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _202: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _203: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _204: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _205: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _206: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _207: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _208: &[&str];               // in scope 0 at cita-executor/src/postman.rs:639:24: 639:50
    let mut _209: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _210: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _211: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _212: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:639:52: 639:62
    let _213: &libproto::StateProof;     // in scope 0 at cita-executor/src/postman.rs:639:52: 639:62
    let mut _214: std::result::Result<(), ()>; // in scope 0 at cita-executor/src/postman.rs:640:25: 668:23
    let mut _215: std::result::Result<(), serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:640:25: 664:23
    let mut _216: std::result::Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:640:25: 640:80
    let mut _217: &str;                  // in scope 0 at cita-executor/src/postman.rs:640:61: 640:79
    let _218: &str;                      // in scope 0 at cita-executor/src/postman.rs:640:61: 640:79
    let _219: &std::string::String;      // in scope 0 at cita-executor/src/postman.rs:640:61: 640:79
    let mut _220: [closure@cita-executor/src/postman.rs:641:26: 641:36]; // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    let mut _221: &&postman::Postman;    // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    let mut _222: &libproto::StateProof; // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    let mut _223: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    let mut _224: [closure@cita-executor/src/postman.rs:665:30: 665:35]; // in scope 0 at cita-executor/src/postman.rs:665:30: 668:22
    let mut _225: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:665:30: 668:22
    let mut _228: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _229: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _230: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _231: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _232: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _233: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _234: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _235: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _236: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _237: &[&str];               // in scope 0 at cita-executor/src/postman.rs:672:24: 672:50
    let mut _238: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _239: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _240: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _241: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:672:52: 672:56
    let _242: &libproto::StorageKey;     // in scope 0 at cita-executor/src/postman.rs:672:52: 672:56
    let mut _243: std::result::Result<(), ()>; // in scope 0 at cita-executor/src/postman.rs:673:25: 701:23
    let mut _244: std::result::Result<(), serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:673:25: 697:23
    let mut _245: std::result::Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>; // in scope 0 at cita-executor/src/postman.rs:673:25: 673:74
    let mut _246: &str;                  // in scope 0 at cita-executor/src/postman.rs:673:61: 673:73
    let _247: &str;                      // in scope 0 at cita-executor/src/postman.rs:673:61: 673:73
    let _248: &std::string::String;      // in scope 0 at cita-executor/src/postman.rs:673:61: 673:73
    let mut _249: [closure@cita-executor/src/postman.rs:674:26: 674:36]; // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    let mut _250: &&postman::Postman;    // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    let mut _251: &libproto::StorageKey; // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    let mut _252: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    let mut _253: [closure@cita-executor/src/postman.rs:698:30: 698:35]; // in scope 0 at cita-executor/src/postman.rs:698:30: 701:22
    let mut _254: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:698:30: 701:22
    let mut _256: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _257: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _258: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _259: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _260: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _261: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _262: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _263: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _264: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _265: &[&str];               // in scope 0 at cita-executor/src/postman.rs:705:24: 705:45
    let mut _267: libproto::Response;    // in scope 0 at cita-executor/src/postman.rs:708:28: 708:36
    let _268: ();                        // in scope 0 at cita-executor/src/postman.rs:709:9: 712:10
    let mut _269: std::string::String;   // in scope 0 at cita-executor/src/postman.rs:710:13: 710:54
    let mut _270: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _271: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _272: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _273: std::vec::Vec<u8>;     // in scope 0 at cita-executor/src/postman.rs:711:13: 711:36
    let mut _274: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-executor/src/postman.rs:711:13: 711:27
    let mut _275: libproto::Message;     // in scope 0 at cita-executor/src/postman.rs:711:13: 711:16
    let mut _303: bool;                  // in scope 0 at cita-executor/src/postman.rs:707:10: 707:11
    let mut _304: bool;                  // in scope 0 at cita-executor/src/postman.rs:707:10: 707:11
    let mut _305: bool;                  // in scope 0 at cita-executor/src/postman.rs:707:10: 707:11
    let mut _306: bool;                  // in scope 0 at cita-executor/src/postman.rs:707:10: 707:11
    let mut _307: bool;                  // in scope 0 at cita-executor/src/postman.rs:707:10: 707:11
    let mut _308: bool;                  // in scope 0 at cita-executor/src/postman.rs:707:10: 707:11
    let mut _309: bool;                  // in scope 0 at cita-executor/src/postman.rs:707:10: 707:11
    let mut _310: bool;                  // in scope 0 at cita-executor/src/postman.rs:707:10: 707:11
    let mut _311: bool;                  // in scope 0 at cita-executor/src/postman.rs:707:10: 707:11
    let mut _312: bool;                  // in scope 0 at cita-executor/src/postman.rs:712:9: 712:10
    let mut _313: bool;                  // in scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    let mut _314: bool;                  // in scope 0 at cita-executor/src/postman.rs:634:21: 634:22
    let mut _315: bool;                  // in scope 0 at cita-executor/src/postman.rs:532:13: 532:14
    let mut _316: bool;                  // in scope 0 at cita-executor/src/postman.rs:507:13: 507:14
    let mut _317: bool;                  // in scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    let mut _318: bool;                  // in scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    let mut _319: isize;                 // in scope 0 at cita-executor/src/postman.rs:707:10: 707:11
    let mut _320: isize;                 // in scope 0 at cita-executor/src/postman.rs:707:10: 707:11
    scope 1 {
        debug response => _3;            // in scope 1 at cita-executor/src/postman.rs:480:13: 480:25
        let _12: libproto::Call;         // in scope 1 at cita-executor/src/postman.rs:484:27: 484:31
        let _40: libproto::Call;         // in scope 1 at cita-executor/src/postman.rs:509:37: 509:41
        let _68: std::string::String;    // in scope 1 at cita-executor/src/postman.rs:534:40: 534:48
        let _96: std::string::String;    // in scope 1 at cita-executor/src/postman.rs:559:27: 559:39
        let _124: std::string::String;   // in scope 1 at cita-executor/src/postman.rs:581:26: 581:37
        let _152: std::string::String;   // in scope 1 at cita-executor/src/postman.rs:603:30: 603:45
        let _180: std::string::String;   // in scope 1 at cita-executor/src/postman.rs:625:32: 625:36
        let _197: libproto::StateProof;  // in scope 1 at cita-executor/src/postman.rs:638:34: 638:44
        let _226: libproto::StorageKey;  // in scope 1 at cita-executor/src/postman.rs:671:34: 671:38
        let _255: log::Level;            // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let _266: libproto::Message;     // in scope 1 at cita-executor/src/postman.rs:708:13: 708:16
        scope 2 {
            debug call => _12;           // in scope 2 at cita-executor/src/postman.rs:484:27: 484:31
            let _13: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 3 {
                debug lvl => _13;        // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _276: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _277: &[&str; 1]; // in scope 3 at cita-executor/src/postman.rs:485:24: 485:43
                let mut _278: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 4 {
            }
        }
        scope 5 {
            debug call => _40;           // in scope 5 at cita-executor/src/postman.rs:509:37: 509:41
            let _41: log::Level;         // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 6 {
                debug lvl => _41;        // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _279: &(&str, &str, &str, u32); // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _280: &[&str; 1]; // in scope 6 at cita-executor/src/postman.rs:510:24: 510:58
                let mut _281: &log::LevelFilter; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 7 {
            }
        }
        scope 8 {
            debug tx_count => _68;       // in scope 8 at cita-executor/src/postman.rs:534:40: 534:48
            let _69: log::Level;         // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 9 {
                debug lvl => _69;        // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _282: &(&str, &str, &str, u32); // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _283: &[&str; 1]; // in scope 9 at cita-executor/src/postman.rs:535:24: 535:69
                let mut _284: &log::LevelFilter; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 10 {
            }
        }
        scope 11 {
            debug code_content => _96;   // in scope 11 at cita-executor/src/postman.rs:559:27: 559:39
            let _97: log::Level;         // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 12 {
                debug lvl => _97;        // in scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _285: &(&str, &str, &str, u32); // in scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _286: &[&str; 1]; // in scope 12 at cita-executor/src/postman.rs:560:24: 560:57
                let mut _287: &log::LevelFilter; // in scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 13 {
            }
        }
        scope 14 {
            debug abi_content => _124;   // in scope 14 at cita-executor/src/postman.rs:581:26: 581:37
            let _125: log::Level;        // in scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 15 {
                debug lvl => _125;       // in scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _288: &(&str, &str, &str, u32); // in scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _289: &[&str; 1]; // in scope 15 at cita-executor/src/postman.rs:582:24: 582:56
                let mut _290: &log::LevelFilter; // in scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 16 {
            }
        }
        scope 17 {
            debug balance_content => _152; // in scope 17 at cita-executor/src/postman.rs:603:30: 603:45
            let _153: log::Level;        // in scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 18 {
                debug lvl => _153;       // in scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _291: &(&str, &str, &str, u32); // in scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _292: &[&str; 1]; // in scope 18 at cita-executor/src/postman.rs:604:24: 604:60
                let mut _293: &log::LevelFilter; // in scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 19 {
            }
        }
        scope 20 {
            debug data => _180;          // in scope 20 at cita-executor/src/postman.rs:625:32: 625:36
            let _185: jsonrpc_types::rpc_types::MetaData; // in scope 20 at cita-executor/src/postman.rs:628:24: 628:32
            let _190: std::string::String; // in scope 20 at cita-executor/src/postman.rs:631:25: 631:34
            scope 21 {
                debug metadata => _185;  // in scope 21 at cita-executor/src/postman.rs:628:24: 628:32
            }
            scope 22 {
                debug error_msg => _190; // in scope 22 at cita-executor/src/postman.rs:631:25: 631:34
            }
        }
        scope 23 {
            debug state_info => _197;    // in scope 23 at cita-executor/src/postman.rs:638:34: 638:44
            let _198: log::Level;        // in scope 23 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 24 {
                debug lvl => _198;       // in scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _294: &(&str, &str, &str, u32); // in scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _295: &[&str; 1]; // in scope 24 at cita-executor/src/postman.rs:639:24: 639:50
                let mut _296: &log::LevelFilter; // in scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 25 {
            }
        }
        scope 26 {
            debug skey => _226;          // in scope 26 at cita-executor/src/postman.rs:671:34: 671:38
            let _227: log::Level;        // in scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 27 {
                debug lvl => _227;       // in scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _297: &(&str, &str, &str, u32); // in scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _298: &[&str; 1]; // in scope 27 at cita-executor/src/postman.rs:672:24: 672:50
                let mut _299: &log::LevelFilter; // in scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 28 {
            }
        }
        scope 29 {
            debug lvl => _255;           // in scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _300: &(&str, &str, &str, u32); // in scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _301: &[&str; 1];    // in scope 29 at cita-executor/src/postman.rs:705:24: 705:45
            let mut _302: &log::LevelFilter; // in scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
        scope 30 {
            debug msg => _266;           // in scope 30 at cita-executor/src/postman.rs:708:13: 708:16
        }
    }

    bb0: {
        _310 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _312 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _317 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _314 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _306 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _309 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _318 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _313 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _304 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _305 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _308 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _311 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _315 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _303 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _316 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _307 = const false;              // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _318 = const true;               // scope 0 at cita-executor/src/postman.rs:480:13: 480:25
        _3 = libproto::Response::new() -> [return: bb1, unwind: bb217]; // scope 0 at cita-executor/src/postman.rs:480:28: 480:53
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:480:28: 480:51
                                         // + literal: Const { ty: fn() -> libproto::Response {libproto::Response::new}, val: Value(<ZST>) }
    }

    bb1: {
        _317 = const true;               // scope 1 at cita-executor/src/postman.rs:481:9: 481:55
        _5 = &mut _3;                    // scope 1 at cita-executor/src/postman.rs:481:9: 481:55
        _7 = &mut _2;                    // scope 1 at cita-executor/src/postman.rs:481:33: 481:54
        _6 = libproto::Request::take_request_id(move _7) -> [return: bb2, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:481:33: 481:54
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:481:37: 481:52
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Request) -> Vec<u8> {libproto::Request::take_request_id}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = libproto::Response::set_request_id(move _5, move _6) -> [return: bb3, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:481:9: 481:55
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:481:18: 481:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_request_id}, val: Value(<ZST>) }
    }

    bb3: {
        _318 = const false;              // scope 1 at cita-executor/src/postman.rs:483:15: 483:22
        _10 = move (_2.1: std::option::Option<libproto::Request_oneof_req>); // scope 1 at cita-executor/src/postman.rs:483:15: 483:22
        _9 = std::option::Option::<Request_oneof_req>::unwrap(move _10) -> [return: bb4, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:483:15: 483:31
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:483:23: 483:29
                                         // + literal: Const { ty: fn(std::option::Option<Request_oneof_req>) -> Request_oneof_req {std::option::Option::<Request_oneof_req>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _303 = const true;               // scope 1 at cita-executor/src/postman.rs:483:30: 483:31
        _304 = const true;               // scope 1 at cita-executor/src/postman.rs:483:30: 483:31
        _305 = const true;               // scope 1 at cita-executor/src/postman.rs:483:30: 483:31
        _306 = const true;               // scope 1 at cita-executor/src/postman.rs:483:30: 483:31
        _307 = const true;               // scope 1 at cita-executor/src/postman.rs:483:30: 483:31
        _308 = const true;               // scope 1 at cita-executor/src/postman.rs:483:30: 483:31
        _309 = const true;               // scope 1 at cita-executor/src/postman.rs:483:30: 483:31
        _310 = const true;               // scope 1 at cita-executor/src/postman.rs:483:30: 483:31
        _311 = const true;               // scope 1 at cita-executor/src/postman.rs:483:30: 483:31
        _11 = discriminant(_9);          // scope 1 at cita-executor/src/postman.rs:483:15: 483:31
        switchInt(move _11) -> [6: bb6, 9: bb36, 10: bb51, 11: bb66, 20: bb96, 21: bb81, 22: bb107, 24: bb122, 27: bb21, otherwise: bb5]; // scope 1 at cita-executor/src/postman.rs:483:9: 483:31
    }

    bb5: {
        _255 = log::Level::Error;        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _258 = &_255;                    // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _302 = const _;                  // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[26])) }
        _257 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _258, _302) -> [return: bb140, unwind: bb211]; // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _311 = const false;              // scope 1 at cita-executor/src/postman.rs:484:27: 484:31
        _316 = const true;               // scope 1 at cita-executor/src/postman.rs:484:27: 484:31
        _12 = move ((_9 as call).0: libproto::Call); // scope 1 at cita-executor/src/postman.rs:484:27: 484:31
        _13 = log::Level::Trace;         // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _16 = &_13;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _278 = const _;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[2])) }
        _15 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _16, _278) -> [return: bb10, unwind: bb191]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb9;                     // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        _18 = &_13;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _20 = log::max_level() -> [return: bb11, unwind: bb191]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _14) -> [0: bb16, otherwise: bb13]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        switchInt(move _15) -> [0: bb7, otherwise: bb8]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _19 = &_20;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _17 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _18, move _19) -> [return: bb12, unwind: bb191]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb12: {
        _14 = move _17;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb9;                     // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        _277 = const _;                  // scope 3 at cita-executor/src/postman.rs:485:24: 485:43
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:485:24: 485:43
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[1])) }
        _23 = _277 as &[&str] (Pointer(Unsize)); // scope 3 at cita-executor/src/postman.rs:485:24: 485:43
        _28 = &_12;                      // scope 3 at cita-executor/src/postman.rs:485:45: 485:49
        _27 = core::fmt::ArgumentV1::<'_>::new_debug::<libproto::Call>(_28) -> [return: bb14, unwind: bb191]; // scope 3 at cita-executor/src/postman.rs:485:45: 485:49
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:485:45: 485:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b libproto::Call) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<libproto::Call>}, val: Value(<ZST>) }
    }

    bb14: {
        _26 = [move _27];                // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _25 = &_26;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _24 = _25 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _22 = Arguments::<'_>::new_v1(move _23, move _24) -> [return: bb15, unwind: bb191]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb15: {
        _276 = const _;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[0])) }
        _21 = log::__private_api_log(move _22, _13, _276) -> [return: bb218, unwind: bb191]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb16: {
        _34 = &(_12.3: std::string::String); // scope 2 at cita-executor/src/postman.rs:486:61: 486:73
        _33 = <std::string::String as Deref>::deref(_34) -> [return: bb17, unwind: bb191]; // scope 2 at cita-executor/src/postman.rs:486:61: 486:73
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:486:61: 486:73
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb17: {
        _32 = _33;                       // scope 2 at cita-executor/src/postman.rs:486:61: 486:73
        _31 = serde_json::from_str::<'_, jsonrpc_types::rpc_types::BlockNumber>(move _32) -> [return: bb18, unwind: bb191]; // scope 2 at cita-executor/src/postman.rs:486:25: 486:74
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:486:25: 486:60
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&str) -> Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error> {serde_json::from_str::<'_, jsonrpc_types::rpc_types::BlockNumber>}, val: Value(<ZST>) }
    }

    bb18: {
        _36 = &_1;                       // scope 2 at cita-executor/src/postman.rs:487:26: 502:22
        _37 = &mut _3;                   // scope 2 at cita-executor/src/postman.rs:487:26: 502:22
        _316 = const false;              // scope 2 at cita-executor/src/postman.rs:487:26: 502:22
        _35 = [closure@cita-executor/src/postman.rs:487:26: 487:36] { call: move _12, self: move _36, response: move _37 }; // scope 2 at cita-executor/src/postman.rs:487:26: 502:22
                                         // closure
                                         // + def_id: DefId(0:159 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((jsonrpc_types::rpc_types::BlockNumber,)) -> std::result::Result<(), ()>,
                                         //     (libproto::Call, &&postman::Postman, &mut libproto::Response),
                                         // ]
        _30 = Result::<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>::map::<Result<(), ()>, [closure@cita-executor/src/postman.rs:487:26: 487:36]>(move _31, move _35) -> [return: bb19, unwind: bb191]; // scope 2 at cita-executor/src/postman.rs:486:25: 502:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:487:22: 487:25
                                         // + literal: Const { ty: fn(Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>, [closure@cita-executor/src/postman.rs:487:26: 487:36]) -> Result<Result<(), ()>, serde_json::Error> {Result::<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>::map::<Result<(), ()>, [closure@cita-executor/src/postman.rs:487:26: 487:36]>}, val: Value(<ZST>) }
    }

    bb19: {
        _39 = &mut _3;                   // scope 2 at cita-executor/src/postman.rs:503:30: 506:22
        _38 = [closure@cita-executor/src/postman.rs:503:30: 503:35] { response: move _39 }; // scope 2 at cita-executor/src/postman.rs:503:30: 506:22
                                         // closure
                                         // + def_id: DefId(0:162 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((serde_json::Error,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _29 = Result::<Result<(), ()>, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:503:30: 503:35]>(move _30, move _38) -> [return: bb20, unwind: bb191]; // scope 2 at cita-executor/src/postman.rs:486:25: 506:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:503:22: 503:29
                                         // + literal: Const { ty: fn(Result<Result<(), ()>, serde_json::Error>, [closure@cita-executor/src/postman.rs:503:30: 503:35]) -> Result<Result<(), ()>, ()> {Result::<Result<(), ()>, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:503:30: 503:35]>}, val: Value(<ZST>) }
    }

    bb20: {
        _316 = const false;              // scope 1 at cita-executor/src/postman.rs:507:13: 507:14
        goto -> bb178;                   // scope 1 at cita-executor/src/postman.rs:507:13: 507:14
    }

    bb21: {
        _310 = const false;              // scope 1 at cita-executor/src/postman.rs:509:37: 509:41
        _315 = const true;               // scope 1 at cita-executor/src/postman.rs:509:37: 509:41
        _40 = move ((_9 as estimate_quota).0: libproto::Call); // scope 1 at cita-executor/src/postman.rs:509:37: 509:41
        _41 = log::Level::Trace;         // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _44 = &_41;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _281 = const _;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[5])) }
        _43 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _44, _281) -> [return: bb25, unwind: bb189]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb22: {
        _42 = const false;               // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb24;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb23: {
        _46 = &_41;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _48 = log::max_level() -> [return: bb26, unwind: bb189]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb24: {
        switchInt(move _42) -> [0: bb31, otherwise: bb28]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb25: {
        switchInt(move _43) -> [0: bb22, otherwise: bb23]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb26: {
        _47 = &_48;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _45 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _46, move _47) -> [return: bb27, unwind: bb189]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb27: {
        _42 = move _45;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb24;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb28: {
        _280 = const _;                  // scope 6 at cita-executor/src/postman.rs:510:24: 510:58
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:510:24: 510:58
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[4])) }
        _51 = _280 as &[&str] (Pointer(Unsize)); // scope 6 at cita-executor/src/postman.rs:510:24: 510:58
        _56 = &_40;                      // scope 6 at cita-executor/src/postman.rs:510:60: 510:64
        _55 = core::fmt::ArgumentV1::<'_>::new_debug::<libproto::Call>(_56) -> [return: bb29, unwind: bb189]; // scope 6 at cita-executor/src/postman.rs:510:60: 510:64
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:510:60: 510:64
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b libproto::Call) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<libproto::Call>}, val: Value(<ZST>) }
    }

    bb29: {
        _54 = [move _55];                // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _53 = &_54;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _52 = _53 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _50 = Arguments::<'_>::new_v1(move _51, move _52) -> [return: bb30, unwind: bb189]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb30: {
        _279 = const _;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[3])) }
        _49 = log::__private_api_log(move _50, _41, _279) -> [return: bb219, unwind: bb189]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb31: {
        _62 = &(_40.3: std::string::String); // scope 5 at cita-executor/src/postman.rs:511:61: 511:73
        _61 = <std::string::String as Deref>::deref(_62) -> [return: bb32, unwind: bb189]; // scope 5 at cita-executor/src/postman.rs:511:61: 511:73
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:511:61: 511:73
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb32: {
        _60 = _61;                       // scope 5 at cita-executor/src/postman.rs:511:61: 511:73
        _59 = serde_json::from_str::<'_, jsonrpc_types::rpc_types::BlockNumber>(move _60) -> [return: bb33, unwind: bb189]; // scope 5 at cita-executor/src/postman.rs:511:25: 511:74
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:511:25: 511:60
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&str) -> Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error> {serde_json::from_str::<'_, jsonrpc_types::rpc_types::BlockNumber>}, val: Value(<ZST>) }
    }

    bb33: {
        _64 = &_1;                       // scope 5 at cita-executor/src/postman.rs:512:26: 527:22
        _65 = &mut _3;                   // scope 5 at cita-executor/src/postman.rs:512:26: 527:22
        _315 = const false;              // scope 5 at cita-executor/src/postman.rs:512:26: 527:22
        _63 = [closure@cita-executor/src/postman.rs:512:26: 512:36] { call: move _40, self: move _64, response: move _65 }; // scope 5 at cita-executor/src/postman.rs:512:26: 527:22
                                         // closure
                                         // + def_id: DefId(0:163 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#2})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((jsonrpc_types::rpc_types::BlockNumber,)) -> std::result::Result<(), ()>,
                                         //     (libproto::Call, &&postman::Postman, &mut libproto::Response),
                                         // ]
        _58 = Result::<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>::map::<Result<(), ()>, [closure@cita-executor/src/postman.rs:512:26: 512:36]>(move _59, move _63) -> [return: bb34, unwind: bb189]; // scope 5 at cita-executor/src/postman.rs:511:25: 527:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:512:22: 512:25
                                         // + literal: Const { ty: fn(Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>, [closure@cita-executor/src/postman.rs:512:26: 512:36]) -> Result<Result<(), ()>, serde_json::Error> {Result::<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>::map::<Result<(), ()>, [closure@cita-executor/src/postman.rs:512:26: 512:36]>}, val: Value(<ZST>) }
    }

    bb34: {
        _67 = &mut _3;                   // scope 5 at cita-executor/src/postman.rs:528:30: 531:22
        _66 = [closure@cita-executor/src/postman.rs:528:30: 528:35] { response: move _67 }; // scope 5 at cita-executor/src/postman.rs:528:30: 531:22
                                         // closure
                                         // + def_id: DefId(0:166 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#3})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((serde_json::Error,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _57 = Result::<Result<(), ()>, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:528:30: 528:35]>(move _58, move _66) -> [return: bb35, unwind: bb189]; // scope 5 at cita-executor/src/postman.rs:511:25: 531:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:528:22: 528:29
                                         // + literal: Const { ty: fn(Result<Result<(), ()>, serde_json::Error>, [closure@cita-executor/src/postman.rs:528:30: 528:35]) -> Result<Result<(), ()>, ()> {Result::<Result<(), ()>, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:528:30: 528:35]>}, val: Value(<ZST>) }
    }

    bb35: {
        _315 = const false;              // scope 1 at cita-executor/src/postman.rs:532:13: 532:14
        goto -> bb178;                   // scope 1 at cita-executor/src/postman.rs:532:13: 532:14
    }

    bb36: {
        _309 = const false;              // scope 1 at cita-executor/src/postman.rs:534:40: 534:48
        _68 = move ((_9 as transaction_count).0: std::string::String); // scope 1 at cita-executor/src/postman.rs:534:40: 534:48
        _69 = log::Level::Trace;         // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _72 = &_69;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _284 = const _;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[8])) }
        _71 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _72, _284) -> [return: bb40, unwind: bb156]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb37: {
        _70 = const false;               // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb39;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb38: {
        _74 = &_69;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _76 = log::max_level() -> [return: bb41, unwind: bb156]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb39: {
        switchInt(move _70) -> [0: bb46, otherwise: bb43]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb40: {
        switchInt(move _71) -> [0: bb37, otherwise: bb38]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb41: {
        _75 = &_76;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _73 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _74, move _75) -> [return: bb42, unwind: bb156]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb42: {
        _70 = move _73;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb39;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb43: {
        _283 = const _;                  // scope 9 at cita-executor/src/postman.rs:535:24: 535:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:535:24: 535:69
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[7])) }
        _79 = _283 as &[&str] (Pointer(Unsize)); // scope 9 at cita-executor/src/postman.rs:535:24: 535:69
        _84 = &_68;                      // scope 9 at cita-executor/src/postman.rs:535:71: 535:79
        _83 = core::fmt::ArgumentV1::<'_>::new_debug::<std::string::String>(_84) -> [return: bb44, unwind: bb156]; // scope 9 at cita-executor/src/postman.rs:535:71: 535:79
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:535:71: 535:79
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<std::string::String>}, val: Value(<ZST>) }
    }

    bb44: {
        _82 = [move _83];                // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _81 = &_82;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _80 = _81 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _78 = Arguments::<'_>::new_v1(move _79, move _80) -> [return: bb45, unwind: bb156]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb45: {
        _282 = const _;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[6])) }
        _77 = log::__private_api_log(move _78, _69, _282) -> [return: bb220, unwind: bb156]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb46: {
        _90 = &_68;                      // scope 8 at cita-executor/src/postman.rs:536:61: 536:70
        _89 = <std::string::String as Deref>::deref(_90) -> [return: bb47, unwind: bb156]; // scope 8 at cita-executor/src/postman.rs:536:61: 536:70
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:536:61: 536:70
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb47: {
        _88 = _89;                       // scope 8 at cita-executor/src/postman.rs:536:61: 536:70
        _87 = serde_json::from_str::<'_, CountOrCode>(move _88) -> [return: bb48, unwind: bb156]; // scope 8 at cita-executor/src/postman.rs:536:25: 536:71
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:536:25: 536:60
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&str) -> Result<CountOrCode, serde_json::Error> {serde_json::from_str::<'_, CountOrCode>}, val: Value(<ZST>) }
    }

    bb48: {
        _92 = &mut _3;                   // scope 8 at cita-executor/src/postman.rs:537:30: 540:22
        _91 = [closure@cita-executor/src/postman.rs:537:30: 537:35] { response: move _92 }; // scope 8 at cita-executor/src/postman.rs:537:30: 540:22
                                         // closure
                                         // + def_id: DefId(0:167 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#4})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((serde_json::Error,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _86 = Result::<CountOrCode, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:537:30: 537:35]>(move _87, move _91) -> [return: bb49, unwind: bb156]; // scope 8 at cita-executor/src/postman.rs:536:25: 540:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:537:22: 537:29
                                         // + literal: Const { ty: fn(Result<CountOrCode, serde_json::Error>, [closure@cita-executor/src/postman.rs:537:30: 537:35]) -> Result<CountOrCode, ()> {Result::<CountOrCode, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:537:30: 537:35]>}, val: Value(<ZST>) }
    }

    bb49: {
        _94 = &_1;                       // scope 8 at cita-executor/src/postman.rs:541:26: 556:22
        _95 = &mut _3;                   // scope 8 at cita-executor/src/postman.rs:541:26: 556:22
        _93 = [closure@cita-executor/src/postman.rs:541:26: 541:36] { self: move _94, response: move _95 }; // scope 8 at cita-executor/src/postman.rs:541:26: 556:22
                                         // closure
                                         // + def_id: DefId(0:168 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#5})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((jsonrpc_types::rpc_types::CountOrCode,)),
                                         //     (&&postman::Postman, &mut libproto::Response),
                                         // ]
        _85 = Result::<CountOrCode, ()>::map::<(), [closure@cita-executor/src/postman.rs:541:26: 541:36]>(move _86, move _93) -> [return: bb50, unwind: bb156]; // scope 8 at cita-executor/src/postman.rs:536:25: 556:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:541:22: 541:25
                                         // + literal: Const { ty: fn(Result<CountOrCode, ()>, [closure@cita-executor/src/postman.rs:541:26: 541:36]) -> Result<(), ()> {Result::<CountOrCode, ()>::map::<(), [closure@cita-executor/src/postman.rs:541:26: 541:36]>}, val: Value(<ZST>) }
    }

    bb50: {
        drop(_68) -> [return: bb178, unwind: bb211]; // scope 1 at cita-executor/src/postman.rs:557:13: 557:14
    }

    bb51: {
        _308 = const false;              // scope 1 at cita-executor/src/postman.rs:559:27: 559:39
        _96 = move ((_9 as code).0: std::string::String); // scope 1 at cita-executor/src/postman.rs:559:27: 559:39
        _97 = log::Level::Trace;         // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _100 = &_97;                     // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _287 = const _;                  // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[11])) }
        _99 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _100, _287) -> [return: bb55, unwind: bb155]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb52: {
        _98 = const false;               // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb54;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb53: {
        _102 = &_97;                     // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _104 = log::max_level() -> [return: bb56, unwind: bb155]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb54: {
        switchInt(move _98) -> [0: bb61, otherwise: bb58]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb55: {
        switchInt(move _99) -> [0: bb52, otherwise: bb53]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb56: {
        _103 = &_104;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _101 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _102, move _103) -> [return: bb57, unwind: bb155]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb57: {
        _98 = move _101;                 // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb54;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb58: {
        _286 = const _;                  // scope 12 at cita-executor/src/postman.rs:560:24: 560:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:560:24: 560:57
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[10])) }
        _107 = _286 as &[&str] (Pointer(Unsize)); // scope 12 at cita-executor/src/postman.rs:560:24: 560:57
        _112 = &_96;                     // scope 12 at cita-executor/src/postman.rs:560:59: 560:71
        _111 = core::fmt::ArgumentV1::<'_>::new_debug::<std::string::String>(_112) -> [return: bb59, unwind: bb155]; // scope 12 at cita-executor/src/postman.rs:560:59: 560:71
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:560:59: 560:71
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<std::string::String>}, val: Value(<ZST>) }
    }

    bb59: {
        _110 = [move _111];              // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _109 = &_110;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _108 = _109 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _106 = Arguments::<'_>::new_v1(move _107, move _108) -> [return: bb60, unwind: bb155]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb60: {
        _285 = const _;                  // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[9])) }
        _105 = log::__private_api_log(move _106, _97, _285) -> [return: bb221, unwind: bb155]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb61: {
        _118 = &_96;                     // scope 11 at cita-executor/src/postman.rs:561:61: 561:74
        _117 = <std::string::String as Deref>::deref(_118) -> [return: bb62, unwind: bb155]; // scope 11 at cita-executor/src/postman.rs:561:61: 561:74
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:561:61: 561:74
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb62: {
        _116 = _117;                     // scope 11 at cita-executor/src/postman.rs:561:61: 561:74
        _115 = serde_json::from_str::<'_, CountOrCode>(move _116) -> [return: bb63, unwind: bb155]; // scope 11 at cita-executor/src/postman.rs:561:25: 561:75
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:561:25: 561:60
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(&str) -> Result<CountOrCode, serde_json::Error> {serde_json::from_str::<'_, CountOrCode>}, val: Value(<ZST>) }
    }

    bb63: {
        _120 = &mut _3;                  // scope 11 at cita-executor/src/postman.rs:562:30: 565:22
        _119 = [closure@cita-executor/src/postman.rs:562:30: 562:35] { response: move _120 }; // scope 11 at cita-executor/src/postman.rs:562:30: 565:22
                                         // closure
                                         // + def_id: DefId(0:169 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#6})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((serde_json::Error,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _114 = Result::<CountOrCode, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:562:30: 562:35]>(move _115, move _119) -> [return: bb64, unwind: bb155]; // scope 11 at cita-executor/src/postman.rs:561:25: 565:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:562:22: 562:29
                                         // + literal: Const { ty: fn(Result<CountOrCode, serde_json::Error>, [closure@cita-executor/src/postman.rs:562:30: 562:35]) -> Result<CountOrCode, ()> {Result::<CountOrCode, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:562:30: 562:35]>}, val: Value(<ZST>) }
    }

    bb64: {
        _122 = &_1;                      // scope 11 at cita-executor/src/postman.rs:566:26: 578:22
        _123 = &mut _3;                  // scope 11 at cita-executor/src/postman.rs:566:26: 578:22
        _121 = [closure@cita-executor/src/postman.rs:566:26: 566:40] { self: move _122, response: move _123 }; // scope 11 at cita-executor/src/postman.rs:566:26: 578:22
                                         // closure
                                         // + def_id: DefId(0:170 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#7})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((jsonrpc_types::rpc_types::CountOrCode,)),
                                         //     (&&postman::Postman, &mut libproto::Response),
                                         // ]
        _113 = Result::<CountOrCode, ()>::map::<(), [closure@cita-executor/src/postman.rs:566:26: 566:40]>(move _114, move _121) -> [return: bb65, unwind: bb155]; // scope 11 at cita-executor/src/postman.rs:561:25: 578:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:566:22: 566:25
                                         // + literal: Const { ty: fn(Result<CountOrCode, ()>, [closure@cita-executor/src/postman.rs:566:26: 566:40]) -> Result<(), ()> {Result::<CountOrCode, ()>::map::<(), [closure@cita-executor/src/postman.rs:566:26: 566:40]>}, val: Value(<ZST>) }
    }

    bb65: {
        drop(_96) -> [return: bb178, unwind: bb211]; // scope 1 at cita-executor/src/postman.rs:579:13: 579:14
    }

    bb66: {
        _307 = const false;              // scope 1 at cita-executor/src/postman.rs:581:26: 581:37
        _124 = move ((_9 as abi).0: std::string::String); // scope 1 at cita-executor/src/postman.rs:581:26: 581:37
        _125 = log::Level::Trace;        // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _128 = &_125;                    // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _290 = const _;                  // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[14])) }
        _127 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _128, _290) -> [return: bb70, unwind: bb154]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb67: {
        _126 = const false;              // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb69;                    // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb68: {
        _130 = &_125;                    // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _132 = log::max_level() -> [return: bb71, unwind: bb154]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb69: {
        switchInt(move _126) -> [0: bb76, otherwise: bb73]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb70: {
        switchInt(move _127) -> [0: bb67, otherwise: bb68]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb71: {
        _131 = &_132;                    // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _129 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _130, move _131) -> [return: bb72, unwind: bb154]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb72: {
        _126 = move _129;                // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb69;                    // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb73: {
        _289 = const _;                  // scope 15 at cita-executor/src/postman.rs:582:24: 582:56
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:582:24: 582:56
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[13])) }
        _135 = _289 as &[&str] (Pointer(Unsize)); // scope 15 at cita-executor/src/postman.rs:582:24: 582:56
        _140 = &_124;                    // scope 15 at cita-executor/src/postman.rs:582:58: 582:69
        _139 = core::fmt::ArgumentV1::<'_>::new_debug::<std::string::String>(_140) -> [return: bb74, unwind: bb154]; // scope 15 at cita-executor/src/postman.rs:582:58: 582:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:582:58: 582:69
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<std::string::String>}, val: Value(<ZST>) }
    }

    bb74: {
        _138 = [move _139];              // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _137 = &_138;                    // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _136 = _137 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _134 = Arguments::<'_>::new_v1(move _135, move _136) -> [return: bb75, unwind: bb154]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb75: {
        _288 = const _;                  // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[12])) }
        _133 = log::__private_api_log(move _134, _125, _288) -> [return: bb222, unwind: bb154]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb76: {
        _146 = &_124;                    // scope 14 at cita-executor/src/postman.rs:583:61: 583:73
        _145 = <std::string::String as Deref>::deref(_146) -> [return: bb77, unwind: bb154]; // scope 14 at cita-executor/src/postman.rs:583:61: 583:73
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:583:61: 583:73
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb77: {
        _144 = _145;                     // scope 14 at cita-executor/src/postman.rs:583:61: 583:73
        _143 = serde_json::from_str::<'_, CountOrCode>(move _144) -> [return: bb78, unwind: bb154]; // scope 14 at cita-executor/src/postman.rs:583:25: 583:74
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:583:25: 583:60
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(&str) -> Result<CountOrCode, serde_json::Error> {serde_json::from_str::<'_, CountOrCode>}, val: Value(<ZST>) }
    }

    bb78: {
        _148 = &mut _3;                  // scope 14 at cita-executor/src/postman.rs:584:30: 587:22
        _147 = [closure@cita-executor/src/postman.rs:584:30: 584:35] { response: move _148 }; // scope 14 at cita-executor/src/postman.rs:584:30: 587:22
                                         // closure
                                         // + def_id: DefId(0:171 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#8})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((serde_json::Error,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _142 = Result::<CountOrCode, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:584:30: 584:35]>(move _143, move _147) -> [return: bb79, unwind: bb154]; // scope 14 at cita-executor/src/postman.rs:583:25: 587:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:584:22: 584:29
                                         // + literal: Const { ty: fn(Result<CountOrCode, serde_json::Error>, [closure@cita-executor/src/postman.rs:584:30: 584:35]) -> Result<CountOrCode, ()> {Result::<CountOrCode, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:584:30: 584:35]>}, val: Value(<ZST>) }
    }

    bb79: {
        _150 = &_1;                      // scope 14 at cita-executor/src/postman.rs:588:26: 600:22
        _151 = &mut _3;                  // scope 14 at cita-executor/src/postman.rs:588:26: 600:22
        _149 = [closure@cita-executor/src/postman.rs:588:26: 588:39] { self: move _150, response: move _151 }; // scope 14 at cita-executor/src/postman.rs:588:26: 600:22
                                         // closure
                                         // + def_id: DefId(0:172 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#9})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((jsonrpc_types::rpc_types::CountOrCode,)),
                                         //     (&&postman::Postman, &mut libproto::Response),
                                         // ]
        _141 = Result::<CountOrCode, ()>::map::<(), [closure@cita-executor/src/postman.rs:588:26: 588:39]>(move _142, move _149) -> [return: bb80, unwind: bb154]; // scope 14 at cita-executor/src/postman.rs:583:25: 600:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:588:22: 588:25
                                         // + literal: Const { ty: fn(Result<CountOrCode, ()>, [closure@cita-executor/src/postman.rs:588:26: 588:39]) -> Result<(), ()> {Result::<CountOrCode, ()>::map::<(), [closure@cita-executor/src/postman.rs:588:26: 588:39]>}, val: Value(<ZST>) }
    }

    bb80: {
        drop(_124) -> [return: bb178, unwind: bb211]; // scope 1 at cita-executor/src/postman.rs:601:13: 601:14
    }

    bb81: {
        _306 = const false;              // scope 1 at cita-executor/src/postman.rs:603:30: 603:45
        _152 = move ((_9 as balance).0: std::string::String); // scope 1 at cita-executor/src/postman.rs:603:30: 603:45
        _153 = log::Level::Trace;        // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _156 = &_153;                    // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _293 = const _;                  // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[17])) }
        _155 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _156, _293) -> [return: bb85, unwind: bb153]; // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb82: {
        _154 = const false;              // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb84;                    // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb83: {
        _158 = &_153;                    // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _160 = log::max_level() -> [return: bb86, unwind: bb153]; // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb84: {
        switchInt(move _154) -> [0: bb91, otherwise: bb88]; // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb85: {
        switchInt(move _155) -> [0: bb82, otherwise: bb83]; // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb86: {
        _159 = &_160;                    // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _157 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _158, move _159) -> [return: bb87, unwind: bb153]; // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb87: {
        _154 = move _157;                // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb84;                    // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb88: {
        _292 = const _;                  // scope 18 at cita-executor/src/postman.rs:604:24: 604:60
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:604:24: 604:60
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[16])) }
        _163 = _292 as &[&str] (Pointer(Unsize)); // scope 18 at cita-executor/src/postman.rs:604:24: 604:60
        _168 = &_152;                    // scope 18 at cita-executor/src/postman.rs:604:62: 604:77
        _167 = core::fmt::ArgumentV1::<'_>::new_debug::<std::string::String>(_168) -> [return: bb89, unwind: bb153]; // scope 18 at cita-executor/src/postman.rs:604:62: 604:77
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:604:62: 604:77
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<std::string::String>}, val: Value(<ZST>) }
    }

    bb89: {
        _166 = [move _167];              // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _165 = &_166;                    // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _164 = _165 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _162 = Arguments::<'_>::new_v1(move _163, move _164) -> [return: bb90, unwind: bb153]; // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb90: {
        _291 = const _;                  // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[15])) }
        _161 = log::__private_api_log(move _162, _153, _291) -> [return: bb223, unwind: bb153]; // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb91: {
        _174 = &_152;                    // scope 17 at cita-executor/src/postman.rs:605:61: 605:77
        _173 = <std::string::String as Deref>::deref(_174) -> [return: bb92, unwind: bb153]; // scope 17 at cita-executor/src/postman.rs:605:61: 605:77
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:605:61: 605:77
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb92: {
        _172 = _173;                     // scope 17 at cita-executor/src/postman.rs:605:61: 605:77
        _171 = serde_json::from_str::<'_, CountOrCode>(move _172) -> [return: bb93, unwind: bb153]; // scope 17 at cita-executor/src/postman.rs:605:25: 605:78
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:605:25: 605:60
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: fn(&str) -> Result<CountOrCode, serde_json::Error> {serde_json::from_str::<'_, CountOrCode>}, val: Value(<ZST>) }
    }

    bb93: {
        _176 = &mut _3;                  // scope 17 at cita-executor/src/postman.rs:606:30: 609:22
        _175 = [closure@cita-executor/src/postman.rs:606:30: 606:35] { response: move _176 }; // scope 17 at cita-executor/src/postman.rs:606:30: 609:22
                                         // closure
                                         // + def_id: DefId(0:173 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#10})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((serde_json::Error,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _170 = Result::<CountOrCode, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:606:30: 606:35]>(move _171, move _175) -> [return: bb94, unwind: bb153]; // scope 17 at cita-executor/src/postman.rs:605:25: 609:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:606:22: 606:29
                                         // + literal: Const { ty: fn(Result<CountOrCode, serde_json::Error>, [closure@cita-executor/src/postman.rs:606:30: 606:35]) -> Result<CountOrCode, ()> {Result::<CountOrCode, serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:606:30: 606:35]>}, val: Value(<ZST>) }
    }

    bb94: {
        _178 = &_1;                      // scope 17 at cita-executor/src/postman.rs:610:26: 622:22
        _179 = &mut _3;                  // scope 17 at cita-executor/src/postman.rs:610:26: 622:22
        _177 = [closure@cita-executor/src/postman.rs:610:26: 610:43] { self: move _178, response: move _179 }; // scope 17 at cita-executor/src/postman.rs:610:26: 622:22
                                         // closure
                                         // + def_id: DefId(0:174 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#11})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((jsonrpc_types::rpc_types::CountOrCode,)),
                                         //     (&&postman::Postman, &mut libproto::Response),
                                         // ]
        _169 = Result::<CountOrCode, ()>::map::<(), [closure@cita-executor/src/postman.rs:610:26: 610:43]>(move _170, move _177) -> [return: bb95, unwind: bb153]; // scope 17 at cita-executor/src/postman.rs:605:25: 622:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:610:22: 610:25
                                         // + literal: Const { ty: fn(Result<CountOrCode, ()>, [closure@cita-executor/src/postman.rs:610:26: 610:43]) -> Result<(), ()> {Result::<CountOrCode, ()>::map::<(), [closure@cita-executor/src/postman.rs:610:26: 610:43]>}, val: Value(<ZST>) }
    }

    bb95: {
        drop(_152) -> [return: bb178, unwind: bb211]; // scope 1 at cita-executor/src/postman.rs:623:13: 623:14
    }

    bb96: {
        _305 = const false;              // scope 1 at cita-executor/src/postman.rs:625:32: 625:36
        _180 = move ((_9 as meta_data).0: std::string::String); // scope 1 at cita-executor/src/postman.rs:625:32: 625:36
        _182 = &((*_1).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 20 at cita-executor/src/postman.rs:626:41: 626:65
        _183 = &((*_1).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 20 at cita-executor/src/postman.rs:626:67: 626:94
        _181 = core::libexecutor::command::metadata(_182, _183, move _180) -> [return: bb97, unwind: bb211]; // scope 20 at cita-executor/src/postman.rs:626:23: 626:101
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:626:23: 626:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, std::string::String) -> Result<MetaData, std::string::String> {core::libexecutor::command::metadata}, val: Value(<ZST>) }
    }

    bb97: {
        _184 = discriminant(_181);       // scope 20 at cita-executor/src/postman.rs:626:23: 626:101
        switchInt(move _184) -> [0: bb100, 1: bb98, otherwise: bb99]; // scope 20 at cita-executor/src/postman.rs:626:17: 626:101
    }

    bb98: {
        _314 = const true;               // scope 20 at cita-executor/src/postman.rs:631:25: 631:34
        _190 = move ((_181 as Err).0: std::string::String); // scope 20 at cita-executor/src/postman.rs:631:25: 631:34
        _192 = &mut _3;                  // scope 22 at cita-executor/src/postman.rs:632:25: 632:68
        _193 = error::ErrorCode::query_error() -> [return: bb104, unwind: bb187]; // scope 22 at cita-executor/src/postman.rs:632:43: 632:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:632:43: 632:65
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb99: {
        unreachable;                     // scope 20 at cita-executor/src/postman.rs:626:23: 626:101
    }

    bb100: {
        _185 = move ((_181 as Ok).0: jsonrpc_types::rpc_types::MetaData); // scope 20 at cita-executor/src/postman.rs:628:24: 628:32
        _186 = &mut _3;                  // scope 21 at cita-executor/src/postman.rs:629:25: 629:90
        _189 = &_185;                    // scope 21 at cita-executor/src/postman.rs:629:70: 629:79
        _188 = serde_json::to_string::<MetaData>(_189) -> [return: bb101, unwind: bb152]; // scope 21 at cita-executor/src/postman.rs:629:48: 629:80
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:629:48: 629:69
                                         // + literal: Const { ty: for<'a> fn(&'a MetaData) -> Result<std::string::String, serde_json::Error> {serde_json::to_string::<MetaData>}, val: Value(<ZST>) }
    }

    bb101: {
        _187 = Result::<std::string::String, serde_json::Error>::unwrap(move _188) -> [return: bb102, unwind: bb152]; // scope 21 at cita-executor/src/postman.rs:629:48: 629:89
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:629:81: 629:87
                                         // + literal: Const { ty: fn(Result<std::string::String, serde_json::Error>) -> std::string::String {Result::<std::string::String, serde_json::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb102: {
        _8 = libproto::Response::set_meta_data(move _186, move _187) -> [return: bb103, unwind: bb152]; // scope 21 at cita-executor/src/postman.rs:629:25: 629:90
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:629:34: 629:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_meta_data}, val: Value(<ZST>) }
    }

    bb103: {
        drop(_185) -> [return: bb178, unwind: bb211]; // scope 20 at cita-executor/src/postman.rs:630:21: 630:22
    }

    bb104: {
        _191 = libproto::Response::set_code(move _192, move _193) -> [return: bb105, unwind: bb187]; // scope 22 at cita-executor/src/postman.rs:632:25: 632:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:632:34: 632:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb105: {
        _195 = &mut _3;                  // scope 22 at cita-executor/src/postman.rs:633:25: 633:58
        _314 = const false;              // scope 22 at cita-executor/src/postman.rs:633:48: 633:57
        _196 = move _190;                // scope 22 at cita-executor/src/postman.rs:633:48: 633:57
        _194 = libproto::Response::set_error_msg(move _195, move _196) -> [return: bb106, unwind: bb187]; // scope 22 at cita-executor/src/postman.rs:633:25: 633:58
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:633:34: 633:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb106: {
        _314 = const false;              // scope 20 at cita-executor/src/postman.rs:634:21: 634:22
        goto -> bb178;                   // scope 20 at cita-executor/src/postman.rs:636:13: 636:14
    }

    bb107: {
        _304 = const false;              // scope 1 at cita-executor/src/postman.rs:638:34: 638:44
        _197 = move ((_9 as state_proof).0: libproto::StateProof); // scope 1 at cita-executor/src/postman.rs:638:34: 638:44
        _198 = log::Level::Trace;        // scope 23 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _201 = &_198;                    // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _296 = const _;                  // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[20])) }
        _200 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _201, _296) -> [return: bb111, unwind: bb151]; // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb108: {
        _199 = const false;              // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb110;                   // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb109: {
        _203 = &_198;                    // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _205 = log::max_level() -> [return: bb112, unwind: bb151]; // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb110: {
        switchInt(move _199) -> [0: bb117, otherwise: bb114]; // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb111: {
        switchInt(move _200) -> [0: bb108, otherwise: bb109]; // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb112: {
        _204 = &_205;                    // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _202 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _203, move _204) -> [return: bb113, unwind: bb151]; // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb113: {
        _199 = move _202;                // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb110;                   // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb114: {
        _295 = const _;                  // scope 24 at cita-executor/src/postman.rs:639:24: 639:50
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:639:24: 639:50
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[19])) }
        _208 = _295 as &[&str] (Pointer(Unsize)); // scope 24 at cita-executor/src/postman.rs:639:24: 639:50
        _213 = &_197;                    // scope 24 at cita-executor/src/postman.rs:639:52: 639:62
        _212 = core::fmt::ArgumentV1::<'_>::new_debug::<libproto::StateProof>(_213) -> [return: bb115, unwind: bb151]; // scope 24 at cita-executor/src/postman.rs:639:52: 639:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:639:52: 639:62
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: for<'b> fn(&'b libproto::StateProof) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<libproto::StateProof>}, val: Value(<ZST>) }
    }

    bb115: {
        _211 = [move _212];              // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _210 = &_211;                    // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _209 = _210 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _207 = Arguments::<'_>::new_v1(move _208, move _209) -> [return: bb116, unwind: bb151]; // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb116: {
        _294 = const _;                  // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[18])) }
        _206 = log::__private_api_log(move _207, _198, _294) -> [return: bb224, unwind: bb151]; // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb117: {
        _219 = &(_197.2: std::string::String); // scope 23 at cita-executor/src/postman.rs:640:61: 640:79
        _218 = <std::string::String as Deref>::deref(_219) -> [return: bb118, unwind: bb151]; // scope 23 at cita-executor/src/postman.rs:640:61: 640:79
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:640:61: 640:79
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb118: {
        _217 = _218;                     // scope 23 at cita-executor/src/postman.rs:640:61: 640:79
        _216 = serde_json::from_str::<'_, jsonrpc_types::rpc_types::BlockNumber>(move _217) -> [return: bb119, unwind: bb151]; // scope 23 at cita-executor/src/postman.rs:640:25: 640:80
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:640:25: 640:60
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: fn(&str) -> Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error> {serde_json::from_str::<'_, jsonrpc_types::rpc_types::BlockNumber>}, val: Value(<ZST>) }
    }

    bb119: {
        _221 = &_1;                      // scope 23 at cita-executor/src/postman.rs:641:26: 664:22
        _222 = &_197;                    // scope 23 at cita-executor/src/postman.rs:641:26: 664:22
        _223 = &mut _3;                  // scope 23 at cita-executor/src/postman.rs:641:26: 664:22
        _220 = [closure@cita-executor/src/postman.rs:641:26: 641:36] { self: move _221, state_info: move _222, response: move _223 }; // scope 23 at cita-executor/src/postman.rs:641:26: 664:22
                                         // closure
                                         // + def_id: DefId(0:175 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#12})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((jsonrpc_types::rpc_types::BlockNumber,)),
                                         //     (&&postman::Postman, &libproto::StateProof, &mut libproto::Response),
                                         // ]
        _215 = Result::<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>::map::<(), [closure@cita-executor/src/postman.rs:641:26: 641:36]>(move _216, move _220) -> [return: bb120, unwind: bb151]; // scope 23 at cita-executor/src/postman.rs:640:25: 664:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:641:22: 641:25
                                         // + literal: Const { ty: fn(Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>, [closure@cita-executor/src/postman.rs:641:26: 641:36]) -> Result<(), serde_json::Error> {Result::<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>::map::<(), [closure@cita-executor/src/postman.rs:641:26: 641:36]>}, val: Value(<ZST>) }
    }

    bb120: {
        _225 = &mut _3;                  // scope 23 at cita-executor/src/postman.rs:665:30: 668:22
        _224 = [closure@cita-executor/src/postman.rs:665:30: 665:35] { response: move _225 }; // scope 23 at cita-executor/src/postman.rs:665:30: 668:22
                                         // closure
                                         // + def_id: DefId(0:177 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#13})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((serde_json::Error,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _214 = Result::<(), serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:665:30: 665:35]>(move _215, move _224) -> [return: bb121, unwind: bb151]; // scope 23 at cita-executor/src/postman.rs:640:25: 668:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:665:22: 665:29
                                         // + literal: Const { ty: fn(Result<(), serde_json::Error>, [closure@cita-executor/src/postman.rs:665:30: 665:35]) -> Result<(), ()> {Result::<(), serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:665:30: 665:35]>}, val: Value(<ZST>) }
    }

    bb121: {
        drop(_197) -> [return: bb178, unwind: bb211]; // scope 1 at cita-executor/src/postman.rs:669:13: 669:14
    }

    bb122: {
        _303 = const false;              // scope 1 at cita-executor/src/postman.rs:671:34: 671:38
        _226 = move ((_9 as storage_key).0: libproto::StorageKey); // scope 1 at cita-executor/src/postman.rs:671:34: 671:38
        _227 = log::Level::Trace;        // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _230 = &_227;                    // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _299 = const _;                  // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[23])) }
        _229 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _230, _299) -> [return: bb126, unwind: bb150]; // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb123: {
        _228 = const false;              // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb125;                   // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb124: {
        _232 = &_227;                    // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _234 = log::max_level() -> [return: bb127, unwind: bb150]; // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb125: {
        switchInt(move _228) -> [0: bb132, otherwise: bb129]; // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb126: {
        switchInt(move _229) -> [0: bb123, otherwise: bb124]; // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb127: {
        _233 = &_234;                    // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _231 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _232, move _233) -> [return: bb128, unwind: bb150]; // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb128: {
        _228 = move _231;                // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb125;                   // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb129: {
        _298 = const _;                  // scope 27 at cita-executor/src/postman.rs:672:24: 672:50
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:672:24: 672:50
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[22])) }
        _237 = _298 as &[&str] (Pointer(Unsize)); // scope 27 at cita-executor/src/postman.rs:672:24: 672:50
        _242 = &_226;                    // scope 27 at cita-executor/src/postman.rs:672:52: 672:56
        _241 = core::fmt::ArgumentV1::<'_>::new_debug::<StorageKey>(_242) -> [return: bb130, unwind: bb150]; // scope 27 at cita-executor/src/postman.rs:672:52: 672:56
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:672:52: 672:56
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: for<'b> fn(&'b StorageKey) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<StorageKey>}, val: Value(<ZST>) }
    }

    bb130: {
        _240 = [move _241];              // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _239 = &_240;                    // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _238 = _239 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _236 = Arguments::<'_>::new_v1(move _237, move _238) -> [return: bb131, unwind: bb150]; // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb131: {
        _297 = const _;                  // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[21])) }
        _235 = log::__private_api_log(move _236, _227, _297) -> [return: bb225, unwind: bb150]; // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb132: {
        _248 = &(_226.2: std::string::String); // scope 26 at cita-executor/src/postman.rs:673:61: 673:73
        _247 = <std::string::String as Deref>::deref(_248) -> [return: bb133, unwind: bb150]; // scope 26 at cita-executor/src/postman.rs:673:61: 673:73
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:673:61: 673:73
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb133: {
        _246 = _247;                     // scope 26 at cita-executor/src/postman.rs:673:61: 673:73
        _245 = serde_json::from_str::<'_, jsonrpc_types::rpc_types::BlockNumber>(move _246) -> [return: bb134, unwind: bb150]; // scope 26 at cita-executor/src/postman.rs:673:25: 673:74
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:673:25: 673:60
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: fn(&str) -> Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error> {serde_json::from_str::<'_, jsonrpc_types::rpc_types::BlockNumber>}, val: Value(<ZST>) }
    }

    bb134: {
        _250 = &_1;                      // scope 26 at cita-executor/src/postman.rs:674:26: 697:22
        _251 = &_226;                    // scope 26 at cita-executor/src/postman.rs:674:26: 697:22
        _252 = &mut _3;                  // scope 26 at cita-executor/src/postman.rs:674:26: 697:22
        _249 = [closure@cita-executor/src/postman.rs:674:26: 674:36] { self: move _250, skey: move _251, response: move _252 }; // scope 26 at cita-executor/src/postman.rs:674:26: 697:22
                                         // closure
                                         // + def_id: DefId(0:178 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#14})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((jsonrpc_types::rpc_types::BlockNumber,)),
                                         //     (&&postman::Postman, &libproto::StorageKey, &mut libproto::Response),
                                         // ]
        _244 = Result::<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>::map::<(), [closure@cita-executor/src/postman.rs:674:26: 674:36]>(move _245, move _249) -> [return: bb135, unwind: bb150]; // scope 26 at cita-executor/src/postman.rs:673:25: 697:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:674:22: 674:25
                                         // + literal: Const { ty: fn(Result<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>, [closure@cita-executor/src/postman.rs:674:26: 674:36]) -> Result<(), serde_json::Error> {Result::<jsonrpc_types::rpc_types::BlockNumber, serde_json::Error>::map::<(), [closure@cita-executor/src/postman.rs:674:26: 674:36]>}, val: Value(<ZST>) }
    }

    bb135: {
        _254 = &mut _3;                  // scope 26 at cita-executor/src/postman.rs:698:30: 701:22
        _253 = [closure@cita-executor/src/postman.rs:698:30: 698:35] { response: move _254 }; // scope 26 at cita-executor/src/postman.rs:698:30: 701:22
                                         // closure
                                         // + def_id: DefId(0:180 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#15})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((serde_json::Error,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _243 = Result::<(), serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:698:30: 698:35]>(move _244, move _253) -> [return: bb136, unwind: bb150]; // scope 26 at cita-executor/src/postman.rs:673:25: 701:23
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:698:22: 698:29
                                         // + literal: Const { ty: fn(Result<(), serde_json::Error>, [closure@cita-executor/src/postman.rs:698:30: 698:35]) -> Result<(), ()> {Result::<(), serde_json::Error>::map_err::<(), [closure@cita-executor/src/postman.rs:698:30: 698:35]>}, val: Value(<ZST>) }
    }

    bb136: {
        drop(_226) -> [return: bb178, unwind: bb211]; // scope 1 at cita-executor/src/postman.rs:702:13: 702:14
    }

    bb137: {
        _256 = const false;              // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb139;                   // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb138: {
        _260 = &_255;                    // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _262 = log::max_level() -> [return: bb141, unwind: bb211]; // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb139: {
        switchInt(move _256) -> [0: bb178, otherwise: bb143]; // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb140: {
        switchInt(move _257) -> [0: bb137, otherwise: bb138]; // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb141: {
        _261 = &_262;                    // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _259 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _260, move _261) -> [return: bb142, unwind: bb211]; // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb142: {
        _256 = move _259;                // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb139;                   // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb143: {
        _301 = const _;                  // scope 29 at cita-executor/src/postman.rs:705:24: 705:45
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:705:24: 705:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[25])) }
        _265 = _301 as &[&str] (Pointer(Unsize)); // scope 29 at cita-executor/src/postman.rs:705:24: 705:45
        _264 = Arguments::<'_>::new_const(move _265) -> [return: bb144, unwind: bb211]; // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb144: {
        _300 = const _;                  // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::reply_chain_request, [], Some(promoted[24])) }
        _263 = log::__private_api_log(move _264, _255, _300) -> [return: bb226, unwind: bb211]; // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb145: {
        _313 = const true;               // scope 1 at cita-executor/src/postman.rs:708:42: 708:43
        _271 = const libproto::router::SubModules::Executor; // scope 30 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x05)) }
        _272 = const libproto::router::MsgType::Response; // scope 30 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x02)) }
        _270 = RoutingKey(move _271, move _272); // scope 30 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _269 = <RoutingKey as Into<std::string::String>>::into(move _270) -> [return: bb146, unwind: bb185]; // scope 30 at cita-executor/src/postman.rs:710:13: 710:54
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:710:48: 710:52
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb146: {
        _312 = const true;               // scope 30 at cita-executor/src/postman.rs:710:53: 710:54
        _313 = const false;              // scope 30 at cita-executor/src/postman.rs:711:13: 711:16
        _275 = move _266;                // scope 30 at cita-executor/src/postman.rs:711:13: 711:16
        _274 = <libproto::Message as libproto::TryInto<Vec<u8>>>::try_into(move _275) -> [return: bb147, unwind: bb183]; // scope 30 at cita-executor/src/postman.rs:711:13: 711:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:711:17: 711:25
                                         // + literal: Const { ty: fn(libproto::Message) -> Result<Vec<u8>, <libproto::Message as libproto::TryInto<Vec<u8>>>::Error> {<libproto::Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb147: {
        _273 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _274) -> [return: bb148, unwind: bb183]; // scope 30 at cita-executor/src/postman.rs:711:13: 711:36
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:711:28: 711:34
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb148: {
        _312 = const false;              // scope 30 at cita-executor/src/postman.rs:709:9: 712:10
        _268 = Postman::response_mq(_1, move _269, move _273) -> [return: bb149, unwind: bb183]; // scope 30 at cita-executor/src/postman.rs:709:9: 712:10
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:709:14: 709:25
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, std::string::String, Vec<u8>) {Postman::response_mq}, val: Value(<ZST>) }
    }

    bb149: {
        _312 = const false;              // scope 30 at cita-executor/src/postman.rs:712:9: 712:10
        _313 = const false;              // scope 1 at cita-executor/src/postman.rs:713:5: 713:6
        _317 = const false;              // scope 0 at cita-executor/src/postman.rs:713:5: 713:6
        drop((_2.0: std::vec::Vec<u8>)) -> [return: bb181, unwind: bb180]; // scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    }

    bb150 (cleanup): {
        drop(_226) -> bb211;             // scope 1 at cita-executor/src/postman.rs:702:13: 702:14
    }

    bb151 (cleanup): {
        drop(_197) -> bb211;             // scope 1 at cita-executor/src/postman.rs:669:13: 669:14
    }

    bb152 (cleanup): {
        drop(_185) -> bb211;             // scope 20 at cita-executor/src/postman.rs:630:21: 630:22
    }

    bb153 (cleanup): {
        drop(_152) -> bb211;             // scope 1 at cita-executor/src/postman.rs:623:13: 623:14
    }

    bb154 (cleanup): {
        drop(_124) -> bb211;             // scope 1 at cita-executor/src/postman.rs:601:13: 601:14
    }

    bb155 (cleanup): {
        drop(_96) -> bb211;              // scope 1 at cita-executor/src/postman.rs:579:13: 579:14
    }

    bb156 (cleanup): {
        drop(_68) -> bb211;              // scope 1 at cita-executor/src/postman.rs:557:13: 557:14
    }

    bb157 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:479:5: 713:6
    }

    bb158: {
        _303 = const false;              // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
        _304 = const false;              // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
        _305 = const false;              // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
        _306 = const false;              // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
        _307 = const false;              // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
        _308 = const false;              // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
        _309 = const false;              // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
        _310 = const false;              // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
        _311 = const false;              // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
        _317 = const false;              // scope 1 at cita-executor/src/postman.rs:708:28: 708:36
        _267 = move _3;                  // scope 1 at cita-executor/src/postman.rs:708:28: 708:36
        _266 = <libproto::Response as Into<libproto::Message>>::into(move _267) -> [return: bb145, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:708:28: 708:43
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:708:37: 708:41
                                         // + literal: Const { ty: fn(libproto::Response) -> libproto::Message {<libproto::Response as Into<libproto::Message>>::into}, val: Value(<ZST>) }
    }

    bb159: {
        switchInt(_311) -> [0: bb158, otherwise: bb160]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb160: {
        drop(((_9 as call).0: libproto::Call)) -> [return: bb158, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb161: {
        switchInt(_309) -> [0: bb158, otherwise: bb162]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb162: {
        drop(((_9 as transaction_count).0: std::string::String)) -> [return: bb158, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb163: {
        switchInt(_308) -> [0: bb158, otherwise: bb164]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb164: {
        drop(((_9 as code).0: std::string::String)) -> [return: bb158, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb165: {
        switchInt(_307) -> [0: bb158, otherwise: bb166]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb166: {
        drop(((_9 as abi).0: std::string::String)) -> [return: bb158, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb167: {
        switchInt(_305) -> [0: bb158, otherwise: bb168]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb168: {
        drop(((_9 as meta_data).0: std::string::String)) -> [return: bb158, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb169: {
        switchInt(_306) -> [0: bb158, otherwise: bb170]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb170: {
        drop(((_9 as balance).0: std::string::String)) -> [return: bb158, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb171: {
        switchInt(_304) -> [0: bb158, otherwise: bb172]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb172: {
        drop(((_9 as state_proof).0: libproto::StateProof)) -> [return: bb158, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb173: {
        switchInt(_303) -> [0: bb158, otherwise: bb174]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb174: {
        drop(((_9 as storage_key).0: libproto::StorageKey)) -> [return: bb158, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb175: {
        switchInt(_310) -> [0: bb158, otherwise: bb176]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb176: {
        drop(((_9 as estimate_quota).0: libproto::Call)) -> [return: bb158, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb177: {
        drop(_9) -> [return: bb158, unwind: bb213]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb178: {
        _319 = discriminant(_9);         // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
        switchInt(move _319) -> [6: bb159, 9: bb161, 10: bb163, 11: bb165, 20: bb167, 21: bb169, 22: bb171, 24: bb173, 27: bb175, otherwise: bb177]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb179: {
        return;                          // scope 0 at cita-executor/src/postman.rs:713:6: 713:6
    }

    bb180 (cleanup): {
        drop((_2.2: protobuf::unknown::UnknownFields)) -> bb157; // scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    }

    bb181: {
        drop((_2.2: protobuf::unknown::UnknownFields)) -> bb179; // scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    }

    bb182 (cleanup): {
        drop(_269) -> bb185;             // scope 30 at cita-executor/src/postman.rs:712:9: 712:10
    }

    bb183 (cleanup): {
        switchInt(_312) -> [0: bb185, otherwise: bb182]; // scope 30 at cita-executor/src/postman.rs:712:9: 712:10
    }

    bb184 (cleanup): {
        drop(_266) -> bb213;             // scope 1 at cita-executor/src/postman.rs:713:5: 713:6
    }

    bb185 (cleanup): {
        switchInt(_313) -> [0: bb213, otherwise: bb184]; // scope 1 at cita-executor/src/postman.rs:713:5: 713:6
    }

    bb186 (cleanup): {
        drop(_190) -> bb211;             // scope 20 at cita-executor/src/postman.rs:634:21: 634:22
    }

    bb187 (cleanup): {
        switchInt(_314) -> [0: bb211, otherwise: bb186]; // scope 20 at cita-executor/src/postman.rs:634:21: 634:22
    }

    bb188 (cleanup): {
        drop(_40) -> bb211;              // scope 1 at cita-executor/src/postman.rs:532:13: 532:14
    }

    bb189 (cleanup): {
        switchInt(_315) -> [0: bb211, otherwise: bb188]; // scope 1 at cita-executor/src/postman.rs:532:13: 532:14
    }

    bb190 (cleanup): {
        drop(_12) -> bb211;              // scope 1 at cita-executor/src/postman.rs:507:13: 507:14
    }

    bb191 (cleanup): {
        switchInt(_316) -> [0: bb211, otherwise: bb190]; // scope 1 at cita-executor/src/postman.rs:507:13: 507:14
    }

    bb192 (cleanup): {
        switchInt(_311) -> [0: bb213, otherwise: bb193]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb193 (cleanup): {
        drop(((_9 as call).0: libproto::Call)) -> bb213; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb194 (cleanup): {
        switchInt(_309) -> [0: bb213, otherwise: bb195]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb195 (cleanup): {
        drop(((_9 as transaction_count).0: std::string::String)) -> bb213; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb196 (cleanup): {
        switchInt(_308) -> [0: bb213, otherwise: bb197]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb197 (cleanup): {
        drop(((_9 as code).0: std::string::String)) -> bb213; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb198 (cleanup): {
        switchInt(_307) -> [0: bb213, otherwise: bb199]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb199 (cleanup): {
        drop(((_9 as abi).0: std::string::String)) -> bb213; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb200 (cleanup): {
        switchInt(_305) -> [0: bb213, otherwise: bb201]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb201 (cleanup): {
        drop(((_9 as meta_data).0: std::string::String)) -> bb213; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb202 (cleanup): {
        switchInt(_306) -> [0: bb213, otherwise: bb203]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb203 (cleanup): {
        drop(((_9 as balance).0: std::string::String)) -> bb213; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb204 (cleanup): {
        switchInt(_304) -> [0: bb213, otherwise: bb205]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb205 (cleanup): {
        drop(((_9 as state_proof).0: libproto::StateProof)) -> bb213; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb206 (cleanup): {
        switchInt(_303) -> [0: bb213, otherwise: bb207]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb207 (cleanup): {
        drop(((_9 as storage_key).0: libproto::StorageKey)) -> bb213; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb208 (cleanup): {
        switchInt(_310) -> [0: bb213, otherwise: bb209]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb209 (cleanup): {
        drop(((_9 as estimate_quota).0: libproto::Call)) -> bb213; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb210 (cleanup): {
        drop(_9) -> bb213;               // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb211 (cleanup): {
        _320 = discriminant(_9);         // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
        switchInt(move _320) -> [6: bb192, 9: bb194, 10: bb196, 11: bb198, 20: bb200, 21: bb202, 22: bb204, 24: bb206, 27: bb208, otherwise: bb210]; // scope 1 at cita-executor/src/postman.rs:707:10: 707:11
    }

    bb212 (cleanup): {
        drop(_3) -> bb217;               // scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    }

    bb213 (cleanup): {
        switchInt(_317) -> [0: bb217, otherwise: bb212]; // scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    }

    bb214 (cleanup): {
        drop((_2.2: protobuf::unknown::UnknownFields)) -> bb157; // scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    }

    bb215 (cleanup): {
        switchInt(_318) -> [0: bb214, otherwise: bb216]; // scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    }

    bb216 (cleanup): {
        drop((_2.1: std::option::Option<libproto::Request_oneof_req>)) -> bb214; // scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    }

    bb217 (cleanup): {
        drop((_2.0: std::vec::Vec<u8>)) -> bb215; // scope 0 at cita-executor/src/postman.rs:713:5: 713:6
    }

    bb218: {
        goto -> bb16;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb219: {
        goto -> bb31;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb220: {
        goto -> bb46;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb221: {
        goto -> bb61;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb222: {
        goto -> bb76;                    // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb223: {
        goto -> bb91;                    // scope 18 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb224: {
        goto -> bb117;                   // scope 24 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb225: {
        goto -> bb132;                   // scope 27 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb226: {
        goto -> bb178;                   // scope 29 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:485:17: 485:50
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:485:17: 485:50

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:485:17: 485:50
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:485:17: 485:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:485:17: 485:50
        _1 = (move _2, move _4, move _6, const 485_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:485:24: 485:43
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:485:24: 485:43

    bb0: {
        _1 = [const "Chainvm Call "];    // scope 0 at cita-executor/src/postman.rs:485:24: 485:43
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:485:24: 485:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:485:24: 485:43
        return;                          // scope 0 at cita-executor/src/postman.rs:485:24: 485:43
    }
}

promoted[2] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:510:17: 510:65
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:510:17: 510:65

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:510:17: 510:65
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:510:17: 510:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:510:17: 510:65
        _1 = (move _2, move _4, move _6, const 510_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:510:24: 510:58
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:510:24: 510:58

    bb0: {
        _1 = [const "Estimate quota with params: "]; // scope 0 at cita-executor/src/postman.rs:510:24: 510:58
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:510:24: 510:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:510:24: 510:58
        return;                          // scope 0 at cita-executor/src/postman.rs:510:24: 510:58
    }
}

promoted[5] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[6] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:535:17: 535:80
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:535:17: 535:80

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:535:17: 535:80
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:535:17: 535:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:535:17: 535:80
        _1 = (move _2, move _4, move _6, const 535_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[7] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:535:24: 535:69
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:535:24: 535:69

    bb0: {
        _1 = [const "transaction count request from jsonrpc "]; // scope 0 at cita-executor/src/postman.rs:535:24: 535:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:535:24: 535:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:535:24: 535:69
        return;                          // scope 0 at cita-executor/src/postman.rs:535:24: 535:69
    }
}

promoted[8] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[9] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:560:17: 560:72
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:560:17: 560:72

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:560:17: 560:72
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:560:17: 560:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:560:17: 560:72
        _1 = (move _2, move _4, move _6, const 560_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[10] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:560:24: 560:57
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:560:24: 560:57

    bb0: {
        _1 = [const "code request from jsonrpc  "]; // scope 0 at cita-executor/src/postman.rs:560:24: 560:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:560:24: 560:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:560:24: 560:57
        return;                          // scope 0 at cita-executor/src/postman.rs:560:24: 560:57
    }
}

promoted[11] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[12] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:582:17: 582:70
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:582:17: 582:70

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:582:17: 582:70
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:582:17: 582:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:582:17: 582:70
        _1 = (move _2, move _4, move _6, const 582_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[13] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:582:24: 582:56
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:582:24: 582:56

    bb0: {
        _1 = [const "abi request from jsonrpc  "]; // scope 0 at cita-executor/src/postman.rs:582:24: 582:56
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:582:24: 582:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:582:24: 582:56
        return;                          // scope 0 at cita-executor/src/postman.rs:582:24: 582:56
    }
}

promoted[14] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[15] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:604:17: 604:78
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:604:17: 604:78

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:604:17: 604:78
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:604:17: 604:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:604:17: 604:78
        _1 = (move _2, move _4, move _6, const 604_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[16] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:604:24: 604:60
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:604:24: 604:60

    bb0: {
        _1 = [const "balance request from jsonrpc  "]; // scope 0 at cita-executor/src/postman.rs:604:24: 604:60
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:604:24: 604:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:604:24: 604:60
        return;                          // scope 0 at cita-executor/src/postman.rs:604:24: 604:60
    }
}

promoted[17] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[18] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:639:17: 639:63
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:639:17: 639:63

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:639:17: 639:63
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:639:17: 639:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:639:17: 639:63
        _1 = (move _2, move _4, move _6, const 639_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[19] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:639:24: 639:50
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:639:24: 639:50

    bb0: {
        _1 = [const "state_proof info is "]; // scope 0 at cita-executor/src/postman.rs:639:24: 639:50
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:639:24: 639:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:639:24: 639:50
        return;                          // scope 0 at cita-executor/src/postman.rs:639:24: 639:50
    }
}

promoted[20] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[21] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:672:17: 672:57
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:672:17: 672:57

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:672:17: 672:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:672:17: 672:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:672:17: 672:57
        _1 = (move _2, move _4, move _6, const 672_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[22] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:672:24: 672:50
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:672:24: 672:50

    bb0: {
        _1 = [const "storage key info is "]; // scope 0 at cita-executor/src/postman.rs:672:24: 672:50
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:672:24: 672:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:672:24: 672:50
        return;                          // scope 0 at cita-executor/src/postman.rs:672:24: 672:50
    }
}

promoted[23] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[24] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:705:17: 705:46
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:705:17: 705:46

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:705:17: 705:46
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:705:17: 705:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:705:17: 705:46
        _1 = (move _2, move _4, move _6, const 705_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[25] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:705:24: 705:45
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:705:24: 705:45

    bb0: {
        _1 = [const "bad request msg!!!!"]; // scope 0 at cita-executor/src/postman.rs:705:24: 705:45
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:705:24: 705:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:705:24: 705:45
        return;                          // scope 0 at cita-executor/src/postman.rs:705:24: 705:45
    }
}

promoted[26] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#0}(_1: [closure@cita-executor/src/postman.rs:487:26: 487:36], _2: jsonrpc_types::rpc_types::BlockNumber) -> Result<(), ()> {
    debug block_id => _2;                // in scope 0 at cita-executor/src/postman.rs:487:27: 487:35
    debug call => (_1.0: libproto::Call); // in scope 0 at cita-executor/src/postman.rs:484:27: 484:31
    debug self => (*(_1.1: &&postman::Postman)); // in scope 0 at cita-executor/src/postman.rs:479:29: 479:33
    debug response => (*(_1.2: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: std::result::Result<(), ()>; // return place in scope 0 at cita-executor/src/postman.rs:487:37: 487:37
    let _3: core::libexecutor::call_request::CallRequest; // in scope 0 at cita-executor/src/postman.rs:488:29: 488:41
    let mut _4: libproto::Call;          // in scope 0 at cita-executor/src/postman.rs:488:62: 488:66
    let mut _5: std::result::Result<(), std::string::String>; // in scope 0 at cita-executor/src/postman.rs:489:25: 497:27
    let mut _6: std::result::Result<std::vec::Vec<u8>, std::string::String>; // in scope 0 at cita-executor/src/postman.rs:489:25: 494:26
    let _7: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:490:29: 490:53
    let _8: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:491:29: 491:56
    let mut _9: core::libexecutor::call_request::CallRequest; // in scope 0 at cita-executor/src/postman.rs:492:29: 492:41
    let mut _10: types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:493:29: 493:44
    let mut _11: [closure@cita-executor/src/postman.rs:495:30: 495:34]; // in scope 0 at cita-executor/src/postman.rs:495:30: 497:26
    let mut _12: [closure@cita-executor/src/postman.rs:498:34: 498:39]; // in scope 0 at cita-executor/src/postman.rs:498:34: 501:26
    let mut _13: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:487:26: 502:22
    let mut _14: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:487:26: 502:22
    let mut _15: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:487:26: 502:22
    let mut _16: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:487:26: 502:22
    let mut _17: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:487:26: 502:22
    let mut _18: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:487:26: 502:22
    let mut _19: bool;                   // in scope 0 at cita-executor/src/postman.rs:494:25: 494:26
    scope 1 {
        debug call_request => _3;        // in scope 1 at cita-executor/src/postman.rs:488:29: 488:41
    }

    bb0: {
        _19 = const false;               // scope 0 at cita-executor/src/postman.rs:488:29: 488:41
        _4 = move (_1.0: libproto::Call); // scope 0 at cita-executor/src/postman.rs:488:62: 488:66
        _3 = <core::libexecutor::call_request::CallRequest as From<libproto::Call>>::from(move _4) -> bb1; // scope 0 at cita-executor/src/postman.rs:488:44: 488:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:488:44: 488:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(libproto::Call) -> core::libexecutor::call_request::CallRequest {<core::libexecutor::call_request::CallRequest as From<libproto::Call>>::from}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = deref_copy (_1.1: &&postman::Postman); // scope 1 at cita-executor/src/postman.rs:490:29: 490:53
        _14 = deref_copy (*_13);         // scope 1 at cita-executor/src/postman.rs:490:29: 490:53
        _7 = &((*_14).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 1 at cita-executor/src/postman.rs:490:29: 490:53
        _15 = deref_copy (_1.1: &&postman::Postman); // scope 1 at cita-executor/src/postman.rs:491:29: 491:56
        _16 = deref_copy (*_15);         // scope 1 at cita-executor/src/postman.rs:491:29: 491:56
        _8 = &((*_16).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 1 at cita-executor/src/postman.rs:491:29: 491:56
        _19 = const true;                // scope 1 at cita-executor/src/postman.rs:492:29: 492:41
        _9 = move _3;                    // scope 1 at cita-executor/src/postman.rs:492:29: 492:41
        _10 = <jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into(move _2) -> [return: bb2, unwind: bb8]; // scope 1 at cita-executor/src/postman.rs:493:29: 493:44
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:493:38: 493:42
                                         // + literal: Const { ty: fn(jsonrpc_types::rpc_types::BlockNumber) -> types::block_number::BlockTag {<jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        _19 = const false;               // scope 1 at cita-executor/src/postman.rs:489:25: 494:26
        _6 = core::libexecutor::command::eth_call(_7, _8, move _9, move _10) -> [return: bb3, unwind: bb8]; // scope 1 at cita-executor/src/postman.rs:489:25: 494:26
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:489:25: 489:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, core::libexecutor::call_request::CallRequest, types::block_number::BlockTag) -> Result<Vec<u8>, std::string::String> {core::libexecutor::command::eth_call}, val: Value(<ZST>) }
    }

    bb3: {
        _19 = const false;               // scope 1 at cita-executor/src/postman.rs:494:25: 494:26
        _17 = deref_copy (_1.2: &mut libproto::Response); // scope 1 at cita-executor/src/postman.rs:495:30: 497:26
        _11 = [closure@cita-executor/src/postman.rs:495:30: 495:34] { response: _17 }; // scope 1 at cita-executor/src/postman.rs:495:30: 497:26
                                         // closure
                                         // + def_id: DefId(0:160 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::vec::Vec<u8>,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _5 = Result::<Vec<u8>, std::string::String>::map::<(), [closure@cita-executor/src/postman.rs:495:30: 495:34]>(move _6, move _11) -> bb4; // scope 1 at cita-executor/src/postman.rs:489:25: 497:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:495:26: 495:29
                                         // + literal: Const { ty: fn(Result<Vec<u8>, std::string::String>, [closure@cita-executor/src/postman.rs:495:30: 495:34]) -> Result<(), std::string::String> {Result::<Vec<u8>, std::string::String>::map::<(), [closure@cita-executor/src/postman.rs:495:30: 495:34]>}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = deref_copy (_1.2: &mut libproto::Response); // scope 1 at cita-executor/src/postman.rs:498:34: 501:26
        _12 = [closure@cita-executor/src/postman.rs:498:34: 498:39] { response: _18 }; // scope 1 at cita-executor/src/postman.rs:498:34: 501:26
                                         // closure
                                         // + def_id: DefId(0:161 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#0}::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::string::String,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _0 = Result::<(), std::string::String>::map_err::<(), [closure@cita-executor/src/postman.rs:498:34: 498:39]>(move _5, move _12) -> bb5; // scope 1 at cita-executor/src/postman.rs:489:25: 501:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:498:26: 498:33
                                         // + literal: Const { ty: fn(Result<(), std::string::String>, [closure@cita-executor/src/postman.rs:498:34: 498:39]) -> Result<(), ()> {Result::<(), std::string::String>::map_err::<(), [closure@cita-executor/src/postman.rs:498:34: 498:39]>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-executor/src/postman.rs:502:22: 502:22
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:487:26: 502:22
    }

    bb7 (cleanup): {
        drop(_9) -> bb6;                 // scope 1 at cita-executor/src/postman.rs:494:25: 494:26
    }

    bb8 (cleanup): {
        switchInt(_19) -> [0: bb6, otherwise: bb7]; // scope 1 at cita-executor/src/postman.rs:494:25: 494:26
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#0}::{closure#0}(_1: [closure@cita-executor/src/postman.rs:495:30: 495:34], _2: Vec<u8>) -> () {
    debug ok => _2;                      // in scope 0 at cita-executor/src/postman.rs:495:31: 495:33
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:495:35: 495:35
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:496:29: 496:57
    let mut _4: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:495:30: 497:26

    bb0: {
        _4 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:496:29: 496:57
        _3 = libproto::Response::set_call_result(_4, move _2) -> bb1; // scope 0 at cita-executor/src/postman.rs:496:29: 496:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:496:38: 496:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_call_result}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-executor/src/postman.rs:497:26: 497:26
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#0}::{closure#1}(_1: [closure@cita-executor/src/postman.rs:498:34: 498:39], _2: std::string::String) -> () {
    debug err => _2;                     // in scope 0 at cita-executor/src/postman.rs:498:35: 498:38
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:498:40: 498:40
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:499:29: 499:72
    let mut _4: i64;                     // in scope 0 at cita-executor/src/postman.rs:499:47: 499:71
    let _5: ();                          // in scope 0 at cita-executor/src/postman.rs:500:29: 500:56
    let mut _6: std::string::String;     // in scope 0 at cita-executor/src/postman.rs:500:52: 500:55
    let mut _7: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:498:34: 501:26
    let mut _8: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:498:34: 501:26
    let mut _9: bool;                    // in scope 0 at cita-executor/src/postman.rs:501:25: 501:26

    bb0: {
        _9 = const false;                // scope 0 at cita-executor/src/postman.rs:499:29: 499:72
        _9 = const true;                 // scope 0 at cita-executor/src/postman.rs:499:29: 499:72
        _7 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:499:29: 499:72
        _4 = error::ErrorCode::query_error() -> [return: bb1, unwind: bb6]; // scope 0 at cita-executor/src/postman.rs:499:47: 499:71
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:499:47: 499:69
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = libproto::Response::set_code(_7, move _4) -> [return: bb2, unwind: bb6]; // scope 0 at cita-executor/src/postman.rs:499:29: 499:72
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:499:38: 499:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:500:29: 500:56
        _9 = const false;                // scope 0 at cita-executor/src/postman.rs:500:52: 500:55
        _6 = move _2;                    // scope 0 at cita-executor/src/postman.rs:500:52: 500:55
        _5 = libproto::Response::set_error_msg(_8, move _6) -> [return: bb3, unwind: bb6]; // scope 0 at cita-executor/src/postman.rs:500:29: 500:56
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:500:38: 500:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-executor/src/postman.rs:501:26: 501:26
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:498:34: 501:26
    }

    bb5 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-executor/src/postman.rs:501:25: 501:26
    }

    bb6 (cleanup): {
        switchInt(_9) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-executor/src/postman.rs:501:25: 501:26
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#1}(_1: [closure@cita-executor/src/postman.rs:503:30: 503:35], _2: serde_json::Error) -> () {
    debug err => _2;                     // in scope 0 at cita-executor/src/postman.rs:503:31: 503:34
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:503:36: 503:36
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:504:25: 504:68
    let mut _4: i64;                     // in scope 0 at cita-executor/src/postman.rs:504:43: 504:67
    let _5: ();                          // in scope 0 at cita-executor/src/postman.rs:505:25: 505:69
    let mut _6: std::string::String;     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let _7: std::string::String;         // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _9: &[&str];                 // in scope 0 at cita-executor/src/postman.rs:505:56: 505:62
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:505:64: 505:67
    let _14: &serde_json::Error;         // in scope 0 at cita-executor/src/postman.rs:505:64: 505:67
    let mut _15: &[&str; 1];             // in scope 0 at cita-executor/src/postman.rs:505:56: 505:62
    let mut _16: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:503:30: 506:22
    let mut _17: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:503:30: 506:22
    scope 1 {
        debug res => _7;                 // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:504:25: 504:68
        _4 = error::ErrorCode::query_error() -> [return: bb1, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:504:43: 504:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:504:43: 504:65
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = libproto::Response::set_code(_16, move _4) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:504:25: 504:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:504:34: 504:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb2: {
        _17 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:505:25: 505:69
        _15 = const _;                   // scope 0 at cita-executor/src/postman.rs:505:56: 505:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:505:56: 505:62
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _15 as &[&str] (Pointer(Unsize)); // scope 0 at cita-executor/src/postman.rs:505:56: 505:62
        _14 = &_2;                       // scope 0 at cita-executor/src/postman.rs:505:64: 505:67
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>(_14) -> [return: bb3, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:505:64: 505:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:505:64: 505:67
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _11 = &_12;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _10 = _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb4, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = std::fmt::format(move _8) -> [return: bb5, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = move _7;                    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _5 = libproto::Response::set_error_msg(_17, move _6) -> [return: bb6, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:505:25: 505:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:505:34: 505:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:506:21: 506:22
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/postman.rs:506:22: 506:22
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:506:21: 506:22
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:503:30: 506:22
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:505:56: 505:62
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:505:56: 505:62

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-executor/src/postman.rs:505:56: 505:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:505:56: 505:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:505:56: 505:62
        return;                          // scope 0 at cita-executor/src/postman.rs:505:56: 505:62
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#2}(_1: [closure@cita-executor/src/postman.rs:512:26: 512:36], _2: jsonrpc_types::rpc_types::BlockNumber) -> Result<(), ()> {
    debug block_id => _2;                // in scope 0 at cita-executor/src/postman.rs:512:27: 512:35
    debug call => (_1.0: libproto::Call); // in scope 0 at cita-executor/src/postman.rs:509:37: 509:41
    debug self => (*(_1.1: &&postman::Postman)); // in scope 0 at cita-executor/src/postman.rs:479:29: 479:33
    debug response => (*(_1.2: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: std::result::Result<(), ()>; // return place in scope 0 at cita-executor/src/postman.rs:512:37: 512:37
    let _3: core::libexecutor::call_request::CallRequest; // in scope 0 at cita-executor/src/postman.rs:513:29: 513:41
    let mut _4: libproto::Call;          // in scope 0 at cita-executor/src/postman.rs:513:62: 513:66
    let mut _5: std::result::Result<(), std::string::String>; // in scope 0 at cita-executor/src/postman.rs:514:25: 522:27
    let mut _6: std::result::Result<std::vec::Vec<u8>, std::string::String>; // in scope 0 at cita-executor/src/postman.rs:514:25: 519:26
    let _7: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:515:29: 515:53
    let _8: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:516:29: 516:56
    let mut _9: core::libexecutor::call_request::CallRequest; // in scope 0 at cita-executor/src/postman.rs:517:29: 517:41
    let mut _10: types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:518:29: 518:44
    let mut _11: [closure@cita-executor/src/postman.rs:520:30: 520:34]; // in scope 0 at cita-executor/src/postman.rs:520:30: 522:26
    let mut _12: [closure@cita-executor/src/postman.rs:523:34: 523:39]; // in scope 0 at cita-executor/src/postman.rs:523:34: 526:26
    let mut _13: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:512:26: 527:22
    let mut _14: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:512:26: 527:22
    let mut _15: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:512:26: 527:22
    let mut _16: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:512:26: 527:22
    let mut _17: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:512:26: 527:22
    let mut _18: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:512:26: 527:22
    let mut _19: bool;                   // in scope 0 at cita-executor/src/postman.rs:519:25: 519:26
    scope 1 {
        debug call_request => _3;        // in scope 1 at cita-executor/src/postman.rs:513:29: 513:41
    }

    bb0: {
        _19 = const false;               // scope 0 at cita-executor/src/postman.rs:513:29: 513:41
        _4 = move (_1.0: libproto::Call); // scope 0 at cita-executor/src/postman.rs:513:62: 513:66
        _3 = <core::libexecutor::call_request::CallRequest as From<libproto::Call>>::from(move _4) -> bb1; // scope 0 at cita-executor/src/postman.rs:513:44: 513:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:513:44: 513:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(libproto::Call) -> core::libexecutor::call_request::CallRequest {<core::libexecutor::call_request::CallRequest as From<libproto::Call>>::from}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = deref_copy (_1.1: &&postman::Postman); // scope 1 at cita-executor/src/postman.rs:515:29: 515:53
        _14 = deref_copy (*_13);         // scope 1 at cita-executor/src/postman.rs:515:29: 515:53
        _7 = &((*_14).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 1 at cita-executor/src/postman.rs:515:29: 515:53
        _15 = deref_copy (_1.1: &&postman::Postman); // scope 1 at cita-executor/src/postman.rs:516:29: 516:56
        _16 = deref_copy (*_15);         // scope 1 at cita-executor/src/postman.rs:516:29: 516:56
        _8 = &((*_16).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 1 at cita-executor/src/postman.rs:516:29: 516:56
        _19 = const true;                // scope 1 at cita-executor/src/postman.rs:517:29: 517:41
        _9 = move _3;                    // scope 1 at cita-executor/src/postman.rs:517:29: 517:41
        _10 = <jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into(move _2) -> [return: bb2, unwind: bb8]; // scope 1 at cita-executor/src/postman.rs:518:29: 518:44
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:518:38: 518:42
                                         // + literal: Const { ty: fn(jsonrpc_types::rpc_types::BlockNumber) -> types::block_number::BlockTag {<jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        _19 = const false;               // scope 1 at cita-executor/src/postman.rs:514:25: 519:26
        _6 = core::libexecutor::command::estimate_quota(_7, _8, move _9, move _10) -> [return: bb3, unwind: bb8]; // scope 1 at cita-executor/src/postman.rs:514:25: 519:26
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:514:25: 514:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, core::libexecutor::call_request::CallRequest, types::block_number::BlockTag) -> Result<Vec<u8>, std::string::String> {core::libexecutor::command::estimate_quota}, val: Value(<ZST>) }
    }

    bb3: {
        _19 = const false;               // scope 1 at cita-executor/src/postman.rs:519:25: 519:26
        _17 = deref_copy (_1.2: &mut libproto::Response); // scope 1 at cita-executor/src/postman.rs:520:30: 522:26
        _11 = [closure@cita-executor/src/postman.rs:520:30: 520:34] { response: _17 }; // scope 1 at cita-executor/src/postman.rs:520:30: 522:26
                                         // closure
                                         // + def_id: DefId(0:164 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#2}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::vec::Vec<u8>,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _5 = Result::<Vec<u8>, std::string::String>::map::<(), [closure@cita-executor/src/postman.rs:520:30: 520:34]>(move _6, move _11) -> bb4; // scope 1 at cita-executor/src/postman.rs:514:25: 522:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:520:26: 520:29
                                         // + literal: Const { ty: fn(Result<Vec<u8>, std::string::String>, [closure@cita-executor/src/postman.rs:520:30: 520:34]) -> Result<(), std::string::String> {Result::<Vec<u8>, std::string::String>::map::<(), [closure@cita-executor/src/postman.rs:520:30: 520:34]>}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = deref_copy (_1.2: &mut libproto::Response); // scope 1 at cita-executor/src/postman.rs:523:34: 526:26
        _12 = [closure@cita-executor/src/postman.rs:523:34: 523:39] { response: _18 }; // scope 1 at cita-executor/src/postman.rs:523:34: 526:26
                                         // closure
                                         // + def_id: DefId(0:165 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#2}::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::string::String,)),
                                         //     (&mut libproto::Response,),
                                         // ]
        _0 = Result::<(), std::string::String>::map_err::<(), [closure@cita-executor/src/postman.rs:523:34: 523:39]>(move _5, move _12) -> bb5; // scope 1 at cita-executor/src/postman.rs:514:25: 526:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:523:26: 523:33
                                         // + literal: Const { ty: fn(Result<(), std::string::String>, [closure@cita-executor/src/postman.rs:523:34: 523:39]) -> Result<(), ()> {Result::<(), std::string::String>::map_err::<(), [closure@cita-executor/src/postman.rs:523:34: 523:39]>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-executor/src/postman.rs:527:22: 527:22
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:512:26: 527:22
    }

    bb7 (cleanup): {
        drop(_9) -> bb6;                 // scope 1 at cita-executor/src/postman.rs:519:25: 519:26
    }

    bb8 (cleanup): {
        switchInt(_19) -> [0: bb6, otherwise: bb7]; // scope 1 at cita-executor/src/postman.rs:519:25: 519:26
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#2}::{closure#0}(_1: [closure@cita-executor/src/postman.rs:520:30: 520:34], _2: Vec<u8>) -> () {
    debug ok => _2;                      // in scope 0 at cita-executor/src/postman.rs:520:31: 520:33
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:520:35: 520:35
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:521:29: 521:57
    let mut _4: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:520:30: 522:26

    bb0: {
        _4 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:521:29: 521:57
        _3 = libproto::Response::set_call_result(_4, move _2) -> bb1; // scope 0 at cita-executor/src/postman.rs:521:29: 521:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:521:38: 521:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_call_result}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-executor/src/postman.rs:522:26: 522:26
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#2}::{closure#1}(_1: [closure@cita-executor/src/postman.rs:523:34: 523:39], _2: std::string::String) -> () {
    debug err => _2;                     // in scope 0 at cita-executor/src/postman.rs:523:35: 523:38
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:523:40: 523:40
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:524:29: 524:72
    let mut _4: i64;                     // in scope 0 at cita-executor/src/postman.rs:524:47: 524:71
    let _5: ();                          // in scope 0 at cita-executor/src/postman.rs:525:29: 525:56
    let mut _6: std::string::String;     // in scope 0 at cita-executor/src/postman.rs:525:52: 525:55
    let mut _7: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:523:34: 526:26
    let mut _8: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:523:34: 526:26
    let mut _9: bool;                    // in scope 0 at cita-executor/src/postman.rs:526:25: 526:26

    bb0: {
        _9 = const false;                // scope 0 at cita-executor/src/postman.rs:524:29: 524:72
        _9 = const true;                 // scope 0 at cita-executor/src/postman.rs:524:29: 524:72
        _7 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:524:29: 524:72
        _4 = error::ErrorCode::query_error() -> [return: bb1, unwind: bb6]; // scope 0 at cita-executor/src/postman.rs:524:47: 524:71
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:524:47: 524:69
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = libproto::Response::set_code(_7, move _4) -> [return: bb2, unwind: bb6]; // scope 0 at cita-executor/src/postman.rs:524:29: 524:72
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:524:38: 524:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:525:29: 525:56
        _9 = const false;                // scope 0 at cita-executor/src/postman.rs:525:52: 525:55
        _6 = move _2;                    // scope 0 at cita-executor/src/postman.rs:525:52: 525:55
        _5 = libproto::Response::set_error_msg(_8, move _6) -> [return: bb3, unwind: bb6]; // scope 0 at cita-executor/src/postman.rs:525:29: 525:56
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:525:38: 525:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-executor/src/postman.rs:526:26: 526:26
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:523:34: 526:26
    }

    bb5 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-executor/src/postman.rs:526:25: 526:26
    }

    bb6 (cleanup): {
        switchInt(_9) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-executor/src/postman.rs:526:25: 526:26
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#3}(_1: [closure@cita-executor/src/postman.rs:528:30: 528:35], _2: serde_json::Error) -> () {
    debug err => _2;                     // in scope 0 at cita-executor/src/postman.rs:528:31: 528:34
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:528:36: 528:36
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:529:25: 529:68
    let mut _4: i64;                     // in scope 0 at cita-executor/src/postman.rs:529:43: 529:67
    let _5: ();                          // in scope 0 at cita-executor/src/postman.rs:530:25: 530:69
    let mut _6: std::string::String;     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let _7: std::string::String;         // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _9: &[&str];                 // in scope 0 at cita-executor/src/postman.rs:530:56: 530:62
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:530:64: 530:67
    let _14: &serde_json::Error;         // in scope 0 at cita-executor/src/postman.rs:530:64: 530:67
    let mut _15: &[&str; 1];             // in scope 0 at cita-executor/src/postman.rs:530:56: 530:62
    let mut _16: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:528:30: 531:22
    let mut _17: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:528:30: 531:22
    scope 1 {
        debug res => _7;                 // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:529:25: 529:68
        _4 = error::ErrorCode::query_error() -> [return: bb1, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:529:43: 529:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:529:43: 529:65
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = libproto::Response::set_code(_16, move _4) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:529:25: 529:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:529:34: 529:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb2: {
        _17 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:530:25: 530:69
        _15 = const _;                   // scope 0 at cita-executor/src/postman.rs:530:56: 530:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:530:56: 530:62
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request::{closure#3}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _15 as &[&str] (Pointer(Unsize)); // scope 0 at cita-executor/src/postman.rs:530:56: 530:62
        _14 = &_2;                       // scope 0 at cita-executor/src/postman.rs:530:64: 530:67
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>(_14) -> [return: bb3, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:530:64: 530:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:530:64: 530:67
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _11 = &_12;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _10 = _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb4, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = std::fmt::format(move _8) -> [return: bb5, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = move _7;                    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _5 = libproto::Response::set_error_msg(_17, move _6) -> [return: bb6, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:530:25: 530:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:530:34: 530:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:531:21: 531:22
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/postman.rs:531:22: 531:22
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:531:21: 531:22
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:528:30: 531:22
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#3}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:530:56: 530:62
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:530:56: 530:62

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-executor/src/postman.rs:530:56: 530:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:530:56: 530:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:530:56: 530:62
        return;                          // scope 0 at cita-executor/src/postman.rs:530:56: 530:62
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#4}(_1: [closure@cita-executor/src/postman.rs:537:30: 537:35], _2: serde_json::Error) -> () {
    debug err => _2;                     // in scope 0 at cita-executor/src/postman.rs:537:31: 537:34
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:537:36: 537:36
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:538:25: 538:68
    let mut _4: i64;                     // in scope 0 at cita-executor/src/postman.rs:538:43: 538:67
    let _5: ();                          // in scope 0 at cita-executor/src/postman.rs:539:25: 539:69
    let mut _6: std::string::String;     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let _7: std::string::String;         // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _9: &[&str];                 // in scope 0 at cita-executor/src/postman.rs:539:56: 539:62
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:539:64: 539:67
    let _14: &serde_json::Error;         // in scope 0 at cita-executor/src/postman.rs:539:64: 539:67
    let mut _15: &[&str; 1];             // in scope 0 at cita-executor/src/postman.rs:539:56: 539:62
    let mut _16: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:537:30: 540:22
    let mut _17: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:537:30: 540:22
    scope 1 {
        debug res => _7;                 // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:538:25: 538:68
        _4 = error::ErrorCode::query_error() -> [return: bb1, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:538:43: 538:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:538:43: 538:65
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = libproto::Response::set_code(_16, move _4) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:538:25: 538:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:538:34: 538:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb2: {
        _17 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:539:25: 539:69
        _15 = const _;                   // scope 0 at cita-executor/src/postman.rs:539:56: 539:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:539:56: 539:62
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request::{closure#4}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _15 as &[&str] (Pointer(Unsize)); // scope 0 at cita-executor/src/postman.rs:539:56: 539:62
        _14 = &_2;                       // scope 0 at cita-executor/src/postman.rs:539:64: 539:67
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>(_14) -> [return: bb3, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:539:64: 539:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:539:64: 539:67
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _11 = &_12;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _10 = _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb4, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = std::fmt::format(move _8) -> [return: bb5, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = move _7;                    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _5 = libproto::Response::set_error_msg(_17, move _6) -> [return: bb6, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:539:25: 539:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:539:34: 539:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:540:21: 540:22
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/postman.rs:540:22: 540:22
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:540:21: 540:22
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:537:30: 540:22
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#4}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:539:56: 539:62
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:539:56: 539:62

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-executor/src/postman.rs:539:56: 539:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:539:56: 539:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:539:56: 539:62
        return;                          // scope 0 at cita-executor/src/postman.rs:539:56: 539:62
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#5}(_1: [closure@cita-executor/src/postman.rs:541:26: 541:36], _2: CountOrCode) -> () {
    debug tx_count => _2;                // in scope 0 at cita-executor/src/postman.rs:541:27: 541:35
    debug self => (*(_1.0: &&postman::Postman)); // in scope 0 at cita-executor/src/postman.rs:479:29: 479:33
    debug response => (*(_1.1: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:541:37: 541:37
    let _3: cita_types::H160;            // in scope 0 at cita-executor/src/postman.rs:542:29: 542:36
    let mut _4: &[u8];                   // in scope 0 at cita-executor/src/postman.rs:542:59: 542:84
    let _5: &[u8];                       // in scope 0 at cita-executor/src/postman.rs:542:59: 542:84
    let mut _6: &std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:542:59: 542:84
    let mut _7: std::option::Option<cita_types::U256>; // in scope 0 at cita-executor/src/postman.rs:543:31: 548:26
    let _8: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:544:29: 544:53
    let _9: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:545:29: 545:56
    let mut _10: cita_types::H160;       // in scope 0 at cita-executor/src/postman.rs:546:29: 546:36
    let mut _11: types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:547:29: 547:53
    let mut _12: jsonrpc_types::rpc_types::BlockNumber; // in scope 0 at cita-executor/src/postman.rs:547:29: 547:46
    let mut _13: isize;                  // in scope 0 at cita-executor/src/postman.rs:549:29: 549:40
    let _15: ();                         // in scope 0 at cita-executor/src/postman.rs:550:33: 550:81
    let mut _16: u64;                    // in scope 0 at cita-executor/src/postman.rs:550:64: 550:80
    let _17: ();                         // in scope 0 at cita-executor/src/postman.rs:553:33: 553:66
    let mut _18: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:541:26: 556:22
    let mut _19: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:541:26: 556:22
    let mut _20: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:541:26: 556:22
    let mut _21: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:541:26: 556:22
    let mut _22: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:541:26: 556:22
    let mut _23: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:541:26: 556:22
    scope 1 {
        debug address => _3;             // in scope 1 at cita-executor/src/postman.rs:542:29: 542:36
        let _14: cita_types::U256;       // in scope 1 at cita-executor/src/postman.rs:549:34: 549:39
        scope 2 {
            debug nonce => _14;          // in scope 2 at cita-executor/src/postman.rs:549:34: 549:39
        }
    }

    bb0: {
        _6 = &(_2.0: std::vec::Vec<u8>); // scope 0 at cita-executor/src/postman.rs:542:59: 542:84
        _5 = <Vec<u8> as AsRef<[u8]>>::as_ref(move _6) -> [return: bb1, unwind: bb12]; // scope 0 at cita-executor/src/postman.rs:542:59: 542:84
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:542:76: 542:82
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a [u8] {<Vec<u8> as AsRef<[u8]>>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-executor/src/postman.rs:542:59: 542:84
        _3 = H160::from_slice(move _4) -> [return: bb2, unwind: bb12]; // scope 0 at cita-executor/src/postman.rs:542:39: 542:85
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:542:39: 542:58
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H160 {H160::from_slice}, val: Value(<ZST>) }
    }

    bb2: {
        _18 = deref_copy (_1.0: &&postman::Postman); // scope 1 at cita-executor/src/postman.rs:544:29: 544:53
        _19 = deref_copy (*_18);         // scope 1 at cita-executor/src/postman.rs:544:29: 544:53
        _8 = &((*_19).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 1 at cita-executor/src/postman.rs:544:29: 544:53
        _20 = deref_copy (_1.0: &&postman::Postman); // scope 1 at cita-executor/src/postman.rs:545:29: 545:56
        _21 = deref_copy (*_20);         // scope 1 at cita-executor/src/postman.rs:545:29: 545:56
        _9 = &((*_21).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 1 at cita-executor/src/postman.rs:545:29: 545:56
        _10 = _3;                        // scope 1 at cita-executor/src/postman.rs:546:29: 546:36
        _12 = move (_2.1: jsonrpc_types::rpc_types::BlockNumber); // scope 1 at cita-executor/src/postman.rs:547:29: 547:46
        _11 = <jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into(move _12) -> [return: bb3, unwind: bb12]; // scope 1 at cita-executor/src/postman.rs:547:29: 547:53
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:547:47: 547:51
                                         // + literal: Const { ty: fn(jsonrpc_types::rpc_types::BlockNumber) -> types::block_number::BlockTag {<jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = core::libexecutor::command::nonce_at(_8, _9, move _10, move _11) -> [return: bb4, unwind: bb12]; // scope 1 at cita-executor/src/postman.rs:543:31: 548:26
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:543:31: 543:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, H160, types::block_number::BlockTag) -> std::option::Option<U256> {core::libexecutor::command::nonce_at}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = discriminant(_7);          // scope 1 at cita-executor/src/postman.rs:543:31: 548:26
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 1 at cita-executor/src/postman.rs:543:25: 548:26
    }

    bb5: {
        _22 = deref_copy (_1.1: &mut libproto::Response); // scope 1 at cita-executor/src/postman.rs:553:33: 553:66
        _17 = libproto::Response::set_transaction_count(_22, const 0_u64) -> [return: bb13, unwind: bb12]; // scope 1 at cita-executor/src/postman.rs:553:33: 553:66
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:553:42: 553:63
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, u64) {libproto::Response::set_transaction_count}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 1 at cita-executor/src/postman.rs:543:31: 548:26
    }

    bb7: {
        _14 = ((_7 as Some).0: cita_types::U256); // scope 1 at cita-executor/src/postman.rs:549:34: 549:39
        _23 = deref_copy (_1.1: &mut libproto::Response); // scope 2 at cita-executor/src/postman.rs:550:33: 550:81
        _16 = <u64 as From<U256>>::from(_14) -> [return: bb8, unwind: bb12]; // scope 2 at cita-executor/src/postman.rs:550:64: 550:80
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:550:64: 550:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(U256) -> u64 {<u64 as From<U256>>::from}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = libproto::Response::set_transaction_count(_23, move _16) -> [return: bb14, unwind: bb12]; // scope 2 at cita-executor/src/postman.rs:550:33: 550:81
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:550:42: 550:63
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, u64) {libproto::Response::set_transaction_count}, val: Value(<ZST>) }
    }

    bb9: {
        drop((_2.0: std::vec::Vec<u8>)) -> bb11; // scope 0 at cita-executor/src/postman.rs:556:21: 556:22
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:541:26: 556:22
    }

    bb11: {
        return;                          // scope 0 at cita-executor/src/postman.rs:556:22: 556:22
    }

    bb12 (cleanup): {
        drop((_2.0: std::vec::Vec<u8>)) -> bb10; // scope 0 at cita-executor/src/postman.rs:556:21: 556:22
    }

    bb13: {
        goto -> bb9;                     // scope 1 at cita-executor/src/postman.rs:553:33: 553:66
    }

    bb14: {
        goto -> bb9;                     // scope 2 at cita-executor/src/postman.rs:550:33: 550:81
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#6}(_1: [closure@cita-executor/src/postman.rs:562:30: 562:35], _2: serde_json::Error) -> () {
    debug err => _2;                     // in scope 0 at cita-executor/src/postman.rs:562:31: 562:34
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:562:36: 562:36
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:563:25: 563:68
    let mut _4: i64;                     // in scope 0 at cita-executor/src/postman.rs:563:43: 563:67
    let _5: ();                          // in scope 0 at cita-executor/src/postman.rs:564:25: 564:69
    let mut _6: std::string::String;     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let _7: std::string::String;         // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _9: &[&str];                 // in scope 0 at cita-executor/src/postman.rs:564:56: 564:62
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:564:64: 564:67
    let _14: &serde_json::Error;         // in scope 0 at cita-executor/src/postman.rs:564:64: 564:67
    let mut _15: &[&str; 1];             // in scope 0 at cita-executor/src/postman.rs:564:56: 564:62
    let mut _16: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:562:30: 565:22
    let mut _17: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:562:30: 565:22
    scope 1 {
        debug res => _7;                 // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:563:25: 563:68
        _4 = error::ErrorCode::query_error() -> [return: bb1, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:563:43: 563:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:563:43: 563:65
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = libproto::Response::set_code(_16, move _4) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:563:25: 563:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:563:34: 563:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb2: {
        _17 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:564:25: 564:69
        _15 = const _;                   // scope 0 at cita-executor/src/postman.rs:564:56: 564:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:564:56: 564:62
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request::{closure#6}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _15 as &[&str] (Pointer(Unsize)); // scope 0 at cita-executor/src/postman.rs:564:56: 564:62
        _14 = &_2;                       // scope 0 at cita-executor/src/postman.rs:564:64: 564:67
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>(_14) -> [return: bb3, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:564:64: 564:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:564:64: 564:67
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _11 = &_12;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _10 = _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb4, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = std::fmt::format(move _8) -> [return: bb5, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = move _7;                    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _5 = libproto::Response::set_error_msg(_17, move _6) -> [return: bb6, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:564:25: 564:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:564:34: 564:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:565:21: 565:22
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/postman.rs:565:22: 565:22
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:565:21: 565:22
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:562:30: 565:22
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#6}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:564:56: 564:62
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:564:56: 564:62

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-executor/src/postman.rs:564:56: 564:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:564:56: 564:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:564:56: 564:62
        return;                          // scope 0 at cita-executor/src/postman.rs:564:56: 564:62
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#7}(_1: [closure@cita-executor/src/postman.rs:566:26: 566:40], _2: CountOrCode) -> () {
    debug code_content => _2;            // in scope 0 at cita-executor/src/postman.rs:566:27: 566:39
    debug self => (*(_1.0: &&postman::Postman)); // in scope 0 at cita-executor/src/postman.rs:479:29: 479:33
    debug response => (*(_1.1: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:566:41: 566:41
    let _3: cita_types::H160;            // in scope 0 at cita-executor/src/postman.rs:567:29: 567:36
    let mut _4: &[u8];                   // in scope 0 at cita-executor/src/postman.rs:567:59: 567:88
    let _5: &[u8];                       // in scope 0 at cita-executor/src/postman.rs:567:59: 567:88
    let mut _6: &std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:567:59: 567:88
    let mut _7: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-executor/src/postman.rs:568:45: 573:26
    let _8: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:569:29: 569:53
    let _9: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:570:29: 570:56
    let mut _10: cita_types::H160;       // in scope 0 at cita-executor/src/postman.rs:571:29: 571:36
    let mut _11: types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:572:29: 572:57
    let mut _12: jsonrpc_types::rpc_types::BlockNumber; // in scope 0 at cita-executor/src/postman.rs:572:29: 572:50
    let mut _13: isize;                  // in scope 0 at cita-executor/src/postman.rs:568:32: 568:42
    let _15: ();                         // in scope 0 at cita-executor/src/postman.rs:574:29: 574:61
    let _16: ();                         // in scope 0 at cita-executor/src/postman.rs:576:29: 576:63
    let mut _17: std::vec::Vec<u8>;      // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:59
    let mut _18: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:566:26: 578:22
    let mut _19: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:566:26: 578:22
    let mut _20: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:566:26: 578:22
    let mut _21: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:566:26: 578:22
    let mut _22: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:566:26: 578:22
    let mut _23: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:566:26: 578:22
    let mut _24: bool;                   // in scope 0 at cita-executor/src/postman.rs:577:26: 577:27
    let mut _25: isize;                  // in scope 0 at cita-executor/src/postman.rs:577:26: 577:27
    let mut _26: isize;                  // in scope 0 at cita-executor/src/postman.rs:577:26: 577:27
    scope 1 {
        debug address => _3;             // in scope 1 at cita-executor/src/postman.rs:567:29: 567:36
        scope 2 {
            debug code => _14;           // in scope 2 at cita-executor/src/postman.rs:568:37: 568:41
            let _14: std::vec::Vec<u8>;  // in scope 2 at cita-executor/src/postman.rs:568:37: 568:41
        }
    }

    bb0: {
        _24 = const false;               // scope 0 at cita-executor/src/postman.rs:567:29: 567:36
        _6 = &(_2.0: std::vec::Vec<u8>); // scope 0 at cita-executor/src/postman.rs:567:59: 567:88
        _5 = <Vec<u8> as AsRef<[u8]>>::as_ref(move _6) -> [return: bb1, unwind: bb17]; // scope 0 at cita-executor/src/postman.rs:567:59: 567:88
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:567:80: 567:86
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a [u8] {<Vec<u8> as AsRef<[u8]>>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-executor/src/postman.rs:567:59: 567:88
        _3 = H160::from_slice(move _4) -> [return: bb2, unwind: bb17]; // scope 0 at cita-executor/src/postman.rs:567:39: 567:89
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:567:39: 567:58
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H160 {H160::from_slice}, val: Value(<ZST>) }
    }

    bb2: {
        _18 = deref_copy (_1.0: &&postman::Postman); // scope 2 at cita-executor/src/postman.rs:569:29: 569:53
        _19 = deref_copy (*_18);         // scope 2 at cita-executor/src/postman.rs:569:29: 569:53
        _8 = &((*_19).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 2 at cita-executor/src/postman.rs:569:29: 569:53
        _20 = deref_copy (_1.0: &&postman::Postman); // scope 2 at cita-executor/src/postman.rs:570:29: 570:56
        _21 = deref_copy (*_20);         // scope 2 at cita-executor/src/postman.rs:570:29: 570:56
        _9 = &((*_21).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 2 at cita-executor/src/postman.rs:570:29: 570:56
        _10 = _3;                        // scope 2 at cita-executor/src/postman.rs:571:29: 571:36
        _12 = move (_2.1: jsonrpc_types::rpc_types::BlockNumber); // scope 2 at cita-executor/src/postman.rs:572:29: 572:50
        _11 = <jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into(move _12) -> [return: bb3, unwind: bb17]; // scope 2 at cita-executor/src/postman.rs:572:29: 572:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:572:51: 572:55
                                         // + literal: Const { ty: fn(jsonrpc_types::rpc_types::BlockNumber) -> types::block_number::BlockTag {<jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = core::libexecutor::command::code_at(_8, _9, move _10, move _11) -> [return: bb4, unwind: bb17]; // scope 2 at cita-executor/src/postman.rs:568:45: 573:26
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:568:45: 568:61
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, H160, types::block_number::BlockTag) -> std::option::Option<Vec<u8>> {core::libexecutor::command::code_at}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = const true;                // scope 2 at cita-executor/src/postman.rs:573:25: 573:26
        _13 = discriminant(_7);          // scope 2 at cita-executor/src/postman.rs:568:32: 568:42
        switchInt(move _13) -> [1: bb5, otherwise: bb6]; // scope 2 at cita-executor/src/postman.rs:568:32: 568:42
    }

    bb5: {
        _24 = const false;               // scope 2 at cita-executor/src/postman.rs:568:37: 568:41
        _14 = move ((_7 as Some).0: std::vec::Vec<u8>); // scope 2 at cita-executor/src/postman.rs:568:37: 568:41
        _22 = deref_copy (_1.1: &mut libproto::Response); // scope 2 at cita-executor/src/postman.rs:574:29: 574:61
        _15 = libproto::Response::set_contract_code(_22, move _14) -> [return: bb18, unwind: bb16]; // scope 2 at cita-executor/src/postman.rs:574:29: 574:61
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:574:38: 574:55
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_contract_code}, val: Value(<ZST>) }
    }

    bb6: {
        _23 = deref_copy (_1.1: &mut libproto::Response); // scope 1 at cita-executor/src/postman.rs:576:29: 576:63
        _17 = Vec::<u8>::new() -> [return: bb7, unwind: bb16]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<u8> {Vec::<u8>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = libproto::Response::set_contract_code(_23, move _17) -> [return: bb19, unwind: bb16]; // scope 1 at cita-executor/src/postman.rs:576:29: 576:63
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:576:38: 576:55
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_contract_code}, val: Value(<ZST>) }
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:566:26: 578:22
    }

    bb9: {
        _24 = const false;               // scope 1 at cita-executor/src/postman.rs:577:26: 577:27
        drop((_2.0: std::vec::Vec<u8>)) -> bb13; // scope 0 at cita-executor/src/postman.rs:578:21: 578:22
    }

    bb10: {
        switchInt(_24) -> [0: bb9, otherwise: bb11]; // scope 1 at cita-executor/src/postman.rs:577:26: 577:27
    }

    bb11: {
        drop(((_7 as Some).0: std::vec::Vec<u8>)) -> [return: bb9, unwind: bb17]; // scope 1 at cita-executor/src/postman.rs:577:26: 577:27
    }

    bb12: {
        _25 = discriminant(_7);          // scope 1 at cita-executor/src/postman.rs:577:26: 577:27
        switchInt(move _25) -> [1: bb10, otherwise: bb9]; // scope 1 at cita-executor/src/postman.rs:577:26: 577:27
    }

    bb13: {
        return;                          // scope 0 at cita-executor/src/postman.rs:578:22: 578:22
    }

    bb14 (cleanup): {
        switchInt(_24) -> [0: bb17, otherwise: bb15]; // scope 1 at cita-executor/src/postman.rs:577:26: 577:27
    }

    bb15 (cleanup): {
        drop(((_7 as Some).0: std::vec::Vec<u8>)) -> bb17; // scope 1 at cita-executor/src/postman.rs:577:26: 577:27
    }

    bb16 (cleanup): {
        _26 = discriminant(_7);          // scope 1 at cita-executor/src/postman.rs:577:26: 577:27
        switchInt(move _26) -> [1: bb14, otherwise: bb17]; // scope 1 at cita-executor/src/postman.rs:577:26: 577:27
    }

    bb17 (cleanup): {
        drop((_2.0: std::vec::Vec<u8>)) -> bb8; // scope 0 at cita-executor/src/postman.rs:578:21: 578:22
    }

    bb18: {
        goto -> bb12;                    // scope 2 at cita-executor/src/postman.rs:574:29: 574:61
    }

    bb19: {
        goto -> bb12;                    // scope 1 at cita-executor/src/postman.rs:576:29: 576:63
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#8}(_1: [closure@cita-executor/src/postman.rs:584:30: 584:35], _2: serde_json::Error) -> () {
    debug err => _2;                     // in scope 0 at cita-executor/src/postman.rs:584:31: 584:34
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:584:36: 584:36
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:585:25: 585:68
    let mut _4: i64;                     // in scope 0 at cita-executor/src/postman.rs:585:43: 585:67
    let _5: ();                          // in scope 0 at cita-executor/src/postman.rs:586:25: 586:69
    let mut _6: std::string::String;     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let _7: std::string::String;         // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _9: &[&str];                 // in scope 0 at cita-executor/src/postman.rs:586:56: 586:62
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:586:64: 586:67
    let _14: &serde_json::Error;         // in scope 0 at cita-executor/src/postman.rs:586:64: 586:67
    let mut _15: &[&str; 1];             // in scope 0 at cita-executor/src/postman.rs:586:56: 586:62
    let mut _16: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:584:30: 587:22
    let mut _17: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:584:30: 587:22
    scope 1 {
        debug res => _7;                 // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:585:25: 585:68
        _4 = error::ErrorCode::query_error() -> [return: bb1, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:585:43: 585:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:585:43: 585:65
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = libproto::Response::set_code(_16, move _4) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:585:25: 585:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:585:34: 585:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb2: {
        _17 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:586:25: 586:69
        _15 = const _;                   // scope 0 at cita-executor/src/postman.rs:586:56: 586:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:586:56: 586:62
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request::{closure#8}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _15 as &[&str] (Pointer(Unsize)); // scope 0 at cita-executor/src/postman.rs:586:56: 586:62
        _14 = &_2;                       // scope 0 at cita-executor/src/postman.rs:586:64: 586:67
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>(_14) -> [return: bb3, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:586:64: 586:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:586:64: 586:67
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _11 = &_12;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _10 = _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb4, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = std::fmt::format(move _8) -> [return: bb5, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = move _7;                    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _5 = libproto::Response::set_error_msg(_17, move _6) -> [return: bb6, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:586:25: 586:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:586:34: 586:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:587:21: 587:22
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/postman.rs:587:22: 587:22
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:587:21: 587:22
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:584:30: 587:22
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#8}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:586:56: 586:62
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:586:56: 586:62

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-executor/src/postman.rs:586:56: 586:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:586:56: 586:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:586:56: 586:62
        return;                          // scope 0 at cita-executor/src/postman.rs:586:56: 586:62
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#9}(_1: [closure@cita-executor/src/postman.rs:588:26: 588:39], _2: CountOrCode) -> () {
    debug abi_content => _2;             // in scope 0 at cita-executor/src/postman.rs:588:27: 588:38
    debug self => (*(_1.0: &&postman::Postman)); // in scope 0 at cita-executor/src/postman.rs:479:29: 479:33
    debug response => (*(_1.1: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:588:40: 588:40
    let _3: cita_types::H160;            // in scope 0 at cita-executor/src/postman.rs:589:29: 589:36
    let mut _4: &[u8];                   // in scope 0 at cita-executor/src/postman.rs:589:59: 589:87
    let _5: &[u8];                       // in scope 0 at cita-executor/src/postman.rs:589:59: 589:87
    let mut _6: &std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:589:59: 589:87
    let mut _7: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-executor/src/postman.rs:590:44: 595:26
    let _8: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:591:29: 591:53
    let _9: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:592:29: 592:56
    let mut _10: cita_types::H160;       // in scope 0 at cita-executor/src/postman.rs:593:29: 593:36
    let mut _11: types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:594:29: 594:56
    let mut _12: jsonrpc_types::rpc_types::BlockNumber; // in scope 0 at cita-executor/src/postman.rs:594:29: 594:49
    let mut _13: isize;                  // in scope 0 at cita-executor/src/postman.rs:590:32: 590:41
    let _15: ();                         // in scope 0 at cita-executor/src/postman.rs:596:29: 596:59
    let _16: ();                         // in scope 0 at cita-executor/src/postman.rs:598:29: 598:62
    let mut _17: std::vec::Vec<u8>;      // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:59
    let mut _18: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:588:26: 600:22
    let mut _19: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:588:26: 600:22
    let mut _20: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:588:26: 600:22
    let mut _21: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:588:26: 600:22
    let mut _22: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:588:26: 600:22
    let mut _23: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:588:26: 600:22
    let mut _24: bool;                   // in scope 0 at cita-executor/src/postman.rs:599:26: 599:27
    let mut _25: isize;                  // in scope 0 at cita-executor/src/postman.rs:599:26: 599:27
    let mut _26: isize;                  // in scope 0 at cita-executor/src/postman.rs:599:26: 599:27
    scope 1 {
        debug address => _3;             // in scope 1 at cita-executor/src/postman.rs:589:29: 589:36
        scope 2 {
            debug abi => _14;            // in scope 2 at cita-executor/src/postman.rs:590:37: 590:40
            let _14: std::vec::Vec<u8>;  // in scope 2 at cita-executor/src/postman.rs:590:37: 590:40
        }
    }

    bb0: {
        _24 = const false;               // scope 0 at cita-executor/src/postman.rs:589:29: 589:36
        _6 = &(_2.0: std::vec::Vec<u8>); // scope 0 at cita-executor/src/postman.rs:589:59: 589:87
        _5 = <Vec<u8> as AsRef<[u8]>>::as_ref(move _6) -> [return: bb1, unwind: bb17]; // scope 0 at cita-executor/src/postman.rs:589:59: 589:87
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:589:79: 589:85
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a [u8] {<Vec<u8> as AsRef<[u8]>>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-executor/src/postman.rs:589:59: 589:87
        _3 = H160::from_slice(move _4) -> [return: bb2, unwind: bb17]; // scope 0 at cita-executor/src/postman.rs:589:39: 589:88
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:589:39: 589:58
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H160 {H160::from_slice}, val: Value(<ZST>) }
    }

    bb2: {
        _18 = deref_copy (_1.0: &&postman::Postman); // scope 2 at cita-executor/src/postman.rs:591:29: 591:53
        _19 = deref_copy (*_18);         // scope 2 at cita-executor/src/postman.rs:591:29: 591:53
        _8 = &((*_19).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 2 at cita-executor/src/postman.rs:591:29: 591:53
        _20 = deref_copy (_1.0: &&postman::Postman); // scope 2 at cita-executor/src/postman.rs:592:29: 592:56
        _21 = deref_copy (*_20);         // scope 2 at cita-executor/src/postman.rs:592:29: 592:56
        _9 = &((*_21).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 2 at cita-executor/src/postman.rs:592:29: 592:56
        _10 = _3;                        // scope 2 at cita-executor/src/postman.rs:593:29: 593:36
        _12 = move (_2.1: jsonrpc_types::rpc_types::BlockNumber); // scope 2 at cita-executor/src/postman.rs:594:29: 594:49
        _11 = <jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into(move _12) -> [return: bb3, unwind: bb17]; // scope 2 at cita-executor/src/postman.rs:594:29: 594:56
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:594:50: 594:54
                                         // + literal: Const { ty: fn(jsonrpc_types::rpc_types::BlockNumber) -> types::block_number::BlockTag {<jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = core::libexecutor::command::abi_at(_8, _9, move _10, move _11) -> [return: bb4, unwind: bb17]; // scope 2 at cita-executor/src/postman.rs:590:44: 595:26
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:590:44: 590:59
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, H160, types::block_number::BlockTag) -> std::option::Option<Vec<u8>> {core::libexecutor::command::abi_at}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = const true;                // scope 2 at cita-executor/src/postman.rs:595:25: 595:26
        _13 = discriminant(_7);          // scope 2 at cita-executor/src/postman.rs:590:32: 590:41
        switchInt(move _13) -> [1: bb5, otherwise: bb6]; // scope 2 at cita-executor/src/postman.rs:590:32: 590:41
    }

    bb5: {
        _24 = const false;               // scope 2 at cita-executor/src/postman.rs:590:37: 590:40
        _14 = move ((_7 as Some).0: std::vec::Vec<u8>); // scope 2 at cita-executor/src/postman.rs:590:37: 590:40
        _22 = deref_copy (_1.1: &mut libproto::Response); // scope 2 at cita-executor/src/postman.rs:596:29: 596:59
        _15 = libproto::Response::set_contract_abi(_22, move _14) -> [return: bb18, unwind: bb16]; // scope 2 at cita-executor/src/postman.rs:596:29: 596:59
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:596:38: 596:54
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_contract_abi}, val: Value(<ZST>) }
    }

    bb6: {
        _23 = deref_copy (_1.1: &mut libproto::Response); // scope 1 at cita-executor/src/postman.rs:598:29: 598:62
        _17 = Vec::<u8>::new() -> [return: bb7, unwind: bb16]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<u8> {Vec::<u8>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = libproto::Response::set_contract_abi(_23, move _17) -> [return: bb19, unwind: bb16]; // scope 1 at cita-executor/src/postman.rs:598:29: 598:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:598:38: 598:54
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_contract_abi}, val: Value(<ZST>) }
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:588:26: 600:22
    }

    bb9: {
        _24 = const false;               // scope 1 at cita-executor/src/postman.rs:599:26: 599:27
        drop((_2.0: std::vec::Vec<u8>)) -> bb13; // scope 0 at cita-executor/src/postman.rs:600:21: 600:22
    }

    bb10: {
        switchInt(_24) -> [0: bb9, otherwise: bb11]; // scope 1 at cita-executor/src/postman.rs:599:26: 599:27
    }

    bb11: {
        drop(((_7 as Some).0: std::vec::Vec<u8>)) -> [return: bb9, unwind: bb17]; // scope 1 at cita-executor/src/postman.rs:599:26: 599:27
    }

    bb12: {
        _25 = discriminant(_7);          // scope 1 at cita-executor/src/postman.rs:599:26: 599:27
        switchInt(move _25) -> [1: bb10, otherwise: bb9]; // scope 1 at cita-executor/src/postman.rs:599:26: 599:27
    }

    bb13: {
        return;                          // scope 0 at cita-executor/src/postman.rs:600:22: 600:22
    }

    bb14 (cleanup): {
        switchInt(_24) -> [0: bb17, otherwise: bb15]; // scope 1 at cita-executor/src/postman.rs:599:26: 599:27
    }

    bb15 (cleanup): {
        drop(((_7 as Some).0: std::vec::Vec<u8>)) -> bb17; // scope 1 at cita-executor/src/postman.rs:599:26: 599:27
    }

    bb16 (cleanup): {
        _26 = discriminant(_7);          // scope 1 at cita-executor/src/postman.rs:599:26: 599:27
        switchInt(move _26) -> [1: bb14, otherwise: bb17]; // scope 1 at cita-executor/src/postman.rs:599:26: 599:27
    }

    bb17 (cleanup): {
        drop((_2.0: std::vec::Vec<u8>)) -> bb8; // scope 0 at cita-executor/src/postman.rs:600:21: 600:22
    }

    bb18: {
        goto -> bb12;                    // scope 2 at cita-executor/src/postman.rs:596:29: 596:59
    }

    bb19: {
        goto -> bb12;                    // scope 1 at cita-executor/src/postman.rs:598:29: 598:62
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#10}(_1: [closure@cita-executor/src/postman.rs:606:30: 606:35], _2: serde_json::Error) -> () {
    debug err => _2;                     // in scope 0 at cita-executor/src/postman.rs:606:31: 606:34
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:606:36: 606:36
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:607:25: 607:68
    let mut _4: i64;                     // in scope 0 at cita-executor/src/postman.rs:607:43: 607:67
    let _5: ();                          // in scope 0 at cita-executor/src/postman.rs:608:25: 608:69
    let mut _6: std::string::String;     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let _7: std::string::String;         // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _9: &[&str];                 // in scope 0 at cita-executor/src/postman.rs:608:56: 608:62
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:608:64: 608:67
    let _14: &serde_json::Error;         // in scope 0 at cita-executor/src/postman.rs:608:64: 608:67
    let mut _15: &[&str; 1];             // in scope 0 at cita-executor/src/postman.rs:608:56: 608:62
    let mut _16: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:606:30: 609:22
    let mut _17: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:606:30: 609:22
    scope 1 {
        debug res => _7;                 // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:607:25: 607:68
        _4 = error::ErrorCode::query_error() -> [return: bb1, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:607:43: 607:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:607:43: 607:65
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = libproto::Response::set_code(_16, move _4) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:607:25: 607:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:607:34: 607:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb2: {
        _17 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:608:25: 608:69
        _15 = const _;                   // scope 0 at cita-executor/src/postman.rs:608:56: 608:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:608:56: 608:62
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request::{closure#10}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _15 as &[&str] (Pointer(Unsize)); // scope 0 at cita-executor/src/postman.rs:608:56: 608:62
        _14 = &_2;                       // scope 0 at cita-executor/src/postman.rs:608:64: 608:67
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>(_14) -> [return: bb3, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:608:64: 608:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:608:64: 608:67
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _11 = &_12;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _10 = _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb4, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = std::fmt::format(move _8) -> [return: bb5, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = move _7;                    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _5 = libproto::Response::set_error_msg(_17, move _6) -> [return: bb6, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:608:25: 608:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:608:34: 608:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:609:21: 609:22
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/postman.rs:609:22: 609:22
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:609:21: 609:22
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:606:30: 609:22
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#10}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:608:56: 608:62
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:608:56: 608:62

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-executor/src/postman.rs:608:56: 608:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:608:56: 608:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:608:56: 608:62
        return;                          // scope 0 at cita-executor/src/postman.rs:608:56: 608:62
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#11}(_1: [closure@cita-executor/src/postman.rs:610:26: 610:43], _2: CountOrCode) -> () {
    debug balance_content => _2;         // in scope 0 at cita-executor/src/postman.rs:610:27: 610:42
    debug self => (*(_1.0: &&postman::Postman)); // in scope 0 at cita-executor/src/postman.rs:479:29: 479:33
    debug response => (*(_1.1: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:610:44: 610:44
    let _3: cita_types::H160;            // in scope 0 at cita-executor/src/postman.rs:611:29: 611:36
    let mut _4: &[u8];                   // in scope 0 at cita-executor/src/postman.rs:611:59: 611:91
    let _5: &[u8];                       // in scope 0 at cita-executor/src/postman.rs:611:59: 611:91
    let mut _6: &std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:611:59: 611:91
    let mut _7: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-executor/src/postman.rs:612:48: 617:26
    let _8: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:613:29: 613:53
    let _9: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:614:29: 614:56
    let mut _10: cita_types::H160;       // in scope 0 at cita-executor/src/postman.rs:615:29: 615:36
    let mut _11: types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:616:29: 616:60
    let mut _12: jsonrpc_types::rpc_types::BlockNumber; // in scope 0 at cita-executor/src/postman.rs:616:29: 616:53
    let mut _13: isize;                  // in scope 0 at cita-executor/src/postman.rs:612:32: 612:45
    let _15: ();                         // in scope 0 at cita-executor/src/postman.rs:618:29: 618:58
    let _16: ();                         // in scope 0 at cita-executor/src/postman.rs:620:29: 620:57
    let mut _17: std::vec::Vec<u8>;      // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:59
    let mut _18: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:610:26: 622:22
    let mut _19: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:610:26: 622:22
    let mut _20: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:610:26: 622:22
    let mut _21: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:610:26: 622:22
    let mut _22: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:610:26: 622:22
    let mut _23: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:610:26: 622:22
    let mut _24: bool;                   // in scope 0 at cita-executor/src/postman.rs:621:26: 621:27
    let mut _25: isize;                  // in scope 0 at cita-executor/src/postman.rs:621:26: 621:27
    let mut _26: isize;                  // in scope 0 at cita-executor/src/postman.rs:621:26: 621:27
    scope 1 {
        debug address => _3;             // in scope 1 at cita-executor/src/postman.rs:611:29: 611:36
        scope 2 {
            debug balance => _14;        // in scope 2 at cita-executor/src/postman.rs:612:37: 612:44
            let _14: std::vec::Vec<u8>;  // in scope 2 at cita-executor/src/postman.rs:612:37: 612:44
        }
    }

    bb0: {
        _24 = const false;               // scope 0 at cita-executor/src/postman.rs:611:29: 611:36
        _6 = &(_2.0: std::vec::Vec<u8>); // scope 0 at cita-executor/src/postman.rs:611:59: 611:91
        _5 = <Vec<u8> as AsRef<[u8]>>::as_ref(move _6) -> [return: bb1, unwind: bb17]; // scope 0 at cita-executor/src/postman.rs:611:59: 611:91
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:611:83: 611:89
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a [u8] {<Vec<u8> as AsRef<[u8]>>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-executor/src/postman.rs:611:59: 611:91
        _3 = H160::from_slice(move _4) -> [return: bb2, unwind: bb17]; // scope 0 at cita-executor/src/postman.rs:611:39: 611:92
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:611:39: 611:58
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H160 {H160::from_slice}, val: Value(<ZST>) }
    }

    bb2: {
        _18 = deref_copy (_1.0: &&postman::Postman); // scope 2 at cita-executor/src/postman.rs:613:29: 613:53
        _19 = deref_copy (*_18);         // scope 2 at cita-executor/src/postman.rs:613:29: 613:53
        _8 = &((*_19).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 2 at cita-executor/src/postman.rs:613:29: 613:53
        _20 = deref_copy (_1.0: &&postman::Postman); // scope 2 at cita-executor/src/postman.rs:614:29: 614:56
        _21 = deref_copy (*_20);         // scope 2 at cita-executor/src/postman.rs:614:29: 614:56
        _9 = &((*_21).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 2 at cita-executor/src/postman.rs:614:29: 614:56
        _10 = _3;                        // scope 2 at cita-executor/src/postman.rs:615:29: 615:36
        _12 = move (_2.1: jsonrpc_types::rpc_types::BlockNumber); // scope 2 at cita-executor/src/postman.rs:616:29: 616:53
        _11 = <jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into(move _12) -> [return: bb3, unwind: bb17]; // scope 2 at cita-executor/src/postman.rs:616:29: 616:60
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:616:54: 616:58
                                         // + literal: Const { ty: fn(jsonrpc_types::rpc_types::BlockNumber) -> types::block_number::BlockTag {<jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = core::libexecutor::command::balance_at(_8, _9, move _10, move _11) -> [return: bb4, unwind: bb17]; // scope 2 at cita-executor/src/postman.rs:612:48: 617:26
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:612:48: 612:67
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, H160, types::block_number::BlockTag) -> std::option::Option<Vec<u8>> {core::libexecutor::command::balance_at}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = const true;                // scope 2 at cita-executor/src/postman.rs:617:25: 617:26
        _13 = discriminant(_7);          // scope 2 at cita-executor/src/postman.rs:612:32: 612:45
        switchInt(move _13) -> [1: bb5, otherwise: bb6]; // scope 2 at cita-executor/src/postman.rs:612:32: 612:45
    }

    bb5: {
        _24 = const false;               // scope 2 at cita-executor/src/postman.rs:612:37: 612:44
        _14 = move ((_7 as Some).0: std::vec::Vec<u8>); // scope 2 at cita-executor/src/postman.rs:612:37: 612:44
        _22 = deref_copy (_1.1: &mut libproto::Response); // scope 2 at cita-executor/src/postman.rs:618:29: 618:58
        _15 = libproto::Response::set_balance(_22, move _14) -> [return: bb18, unwind: bb16]; // scope 2 at cita-executor/src/postman.rs:618:29: 618:58
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:618:38: 618:49
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_balance}, val: Value(<ZST>) }
    }

    bb6: {
        _23 = deref_copy (_1.1: &mut libproto::Response); // scope 1 at cita-executor/src/postman.rs:620:29: 620:57
        _17 = Vec::<u8>::new() -> [return: bb7, unwind: bb16]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<u8> {Vec::<u8>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = libproto::Response::set_balance(_23, move _17) -> [return: bb19, unwind: bb16]; // scope 1 at cita-executor/src/postman.rs:620:29: 620:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:620:38: 620:49
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_balance}, val: Value(<ZST>) }
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:610:26: 622:22
    }

    bb9: {
        _24 = const false;               // scope 1 at cita-executor/src/postman.rs:621:26: 621:27
        drop((_2.0: std::vec::Vec<u8>)) -> bb13; // scope 0 at cita-executor/src/postman.rs:622:21: 622:22
    }

    bb10: {
        switchInt(_24) -> [0: bb9, otherwise: bb11]; // scope 1 at cita-executor/src/postman.rs:621:26: 621:27
    }

    bb11: {
        drop(((_7 as Some).0: std::vec::Vec<u8>)) -> [return: bb9, unwind: bb17]; // scope 1 at cita-executor/src/postman.rs:621:26: 621:27
    }

    bb12: {
        _25 = discriminant(_7);          // scope 1 at cita-executor/src/postman.rs:621:26: 621:27
        switchInt(move _25) -> [1: bb10, otherwise: bb9]; // scope 1 at cita-executor/src/postman.rs:621:26: 621:27
    }

    bb13: {
        return;                          // scope 0 at cita-executor/src/postman.rs:622:22: 622:22
    }

    bb14 (cleanup): {
        switchInt(_24) -> [0: bb17, otherwise: bb15]; // scope 1 at cita-executor/src/postman.rs:621:26: 621:27
    }

    bb15 (cleanup): {
        drop(((_7 as Some).0: std::vec::Vec<u8>)) -> bb17; // scope 1 at cita-executor/src/postman.rs:621:26: 621:27
    }

    bb16 (cleanup): {
        _26 = discriminant(_7);          // scope 1 at cita-executor/src/postman.rs:621:26: 621:27
        switchInt(move _26) -> [1: bb14, otherwise: bb17]; // scope 1 at cita-executor/src/postman.rs:621:26: 621:27
    }

    bb17 (cleanup): {
        drop((_2.0: std::vec::Vec<u8>)) -> bb8; // scope 0 at cita-executor/src/postman.rs:622:21: 622:22
    }

    bb18: {
        goto -> bb12;                    // scope 2 at cita-executor/src/postman.rs:618:29: 618:58
    }

    bb19: {
        goto -> bb12;                    // scope 1 at cita-executor/src/postman.rs:620:29: 620:57
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#12}(_1: [closure@cita-executor/src/postman.rs:641:26: 641:36], _2: jsonrpc_types::rpc_types::BlockNumber) -> () {
    debug block_id => _2;                // in scope 0 at cita-executor/src/postman.rs:641:27: 641:35
    debug self => (*(_1.0: &&postman::Postman)); // in scope 0 at cita-executor/src/postman.rs:479:29: 479:33
    debug state_info => (*(_1.1: &libproto::StateProof)); // in scope 0 at cita-executor/src/postman.rs:638:34: 638:44
    debug response => (*(_1.2: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:641:37: 641:37
    let mut _3: std::option::Option<std::vec::Vec<std::vec::Vec<u8>>>; // in scope 0 at cita-executor/src/postman.rs:642:31: 654:27
    let mut _4: std::option::Option<cita_vm::state::State<core::TrieDB<cita_db::RocksDB>>>; // in scope 0 at cita-executor/src/postman.rs:642:31: 646:26
    let _5: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:643:29: 643:53
    let _6: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:644:29: 644:56
    let mut _7: types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:645:29: 645:44
    let mut _8: [closure@cita-executor/src/postman.rs:647:35: 647:42]; // in scope 0 at cita-executor/src/postman.rs:647:35: 654:26
    let mut _9: isize;                   // in scope 0 at cita-executor/src/postman.rs:655:29: 655:49
    let _10: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-executor/src/postman.rs:655:34: 655:48
    let mut _12: std::iter::Flatten<std::vec::IntoIter<std::vec::Vec<u8>>>; // in scope 0 at cita-executor/src/postman.rs:656:52: 656:88
    let mut _13: std::vec::IntoIter<std::vec::Vec<u8>>; // in scope 0 at cita-executor/src/postman.rs:656:52: 656:78
    let _14: ();                         // in scope 0 at cita-executor/src/postman.rs:657:33: 657:62
    let mut _15: std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:657:58: 657:61
    let _16: ();                         // in scope 0 at cita-executor/src/postman.rs:660:33: 660:76
    let mut _17: i64;                    // in scope 0 at cita-executor/src/postman.rs:660:51: 660:75
    let _18: ();                         // in scope 0 at cita-executor/src/postman.rs:661:33: 661:93
    let mut _19: std::string::String;    // in scope 0 at cita-executor/src/postman.rs:661:56: 661:92
    let _20: &str;                       // in scope 0 at cita-executor/src/postman.rs:661:56: 661:80
    let mut _21: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    let mut _22: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    let mut _23: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    let mut _24: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    let mut _25: &libproto::StateProof;  // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    let mut _26: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    let mut _27: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    let mut _28: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:641:26: 664:22
    scope 1 {
        debug state_proof_bs => _10;     // in scope 1 at cita-executor/src/postman.rs:655:34: 655:48
        let _11: std::vec::Vec<u8>;      // in scope 1 at cita-executor/src/postman.rs:656:37: 656:40
        scope 2 {
            debug buf => _11;            // in scope 2 at cita-executor/src/postman.rs:656:37: 656:40
        }
    }

    bb0: {
        _21 = deref_copy (_1.0: &&postman::Postman); // scope 0 at cita-executor/src/postman.rs:643:29: 643:53
        _22 = deref_copy (*_21);         // scope 0 at cita-executor/src/postman.rs:643:29: 643:53
        _5 = &((*_22).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 0 at cita-executor/src/postman.rs:643:29: 643:53
        _23 = deref_copy (_1.0: &&postman::Postman); // scope 0 at cita-executor/src/postman.rs:644:29: 644:56
        _24 = deref_copy (*_23);         // scope 0 at cita-executor/src/postman.rs:644:29: 644:56
        _6 = &((*_24).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 0 at cita-executor/src/postman.rs:644:29: 644:56
        _7 = <jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into(move _2) -> bb1; // scope 0 at cita-executor/src/postman.rs:645:29: 645:44
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:645:38: 645:42
                                         // + literal: Const { ty: fn(jsonrpc_types::rpc_types::BlockNumber) -> types::block_number::BlockTag {<jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = core::libexecutor::command::state_at(_5, _6, move _7) -> bb2; // scope 0 at cita-executor/src/postman.rs:642:31: 646:26
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:642:31: 642:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, types::block_number::BlockTag) -> std::option::Option<cita_vm::state::State<TrieDB<RocksDB>>> {core::libexecutor::command::state_at}, val: Value(<ZST>) }
    }

    bb2: {
        _25 = deref_copy (_1.1: &libproto::StateProof); // scope 0 at cita-executor/src/postman.rs:647:35: 654:26
        _8 = [closure@cita-executor/src/postman.rs:647:35: 647:42] { state_info: _25 }; // scope 0 at cita-executor/src/postman.rs:647:35: 654:26
                                         // closure
                                         // + def_id: DefId(0:176 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#12}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((cita_vm::state::State<core::TrieDB<cita_db::RocksDB>>,)) -> std::option::Option<std::vec::Vec<std::vec::Vec<u8>>>,
                                         //     (&libproto::StateProof,),
                                         // ]
        _3 = std::option::Option::<cita_vm::state::State<TrieDB<RocksDB>>>::and_then::<Vec<Vec<u8>>, [closure@cita-executor/src/postman.rs:647:35: 647:42]>(move _4, move _8) -> bb3; // scope 0 at cita-executor/src/postman.rs:642:31: 654:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:647:26: 647:34
                                         // + literal: Const { ty: fn(std::option::Option<cita_vm::state::State<TrieDB<RocksDB>>>, [closure@cita-executor/src/postman.rs:647:35: 647:42]) -> std::option::Option<Vec<Vec<u8>>> {std::option::Option::<cita_vm::state::State<TrieDB<RocksDB>>>::and_then::<Vec<Vec<u8>>, [closure@cita-executor/src/postman.rs:647:35: 647:42]>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_3);           // scope 0 at cita-executor/src/postman.rs:642:31: 654:27
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 0 at cita-executor/src/postman.rs:642:25: 654:27
    }

    bb4: {
        _26 = deref_copy (_1.2: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:660:33: 660:76
        _17 = error::ErrorCode::query_error() -> bb10; // scope 0 at cita-executor/src/postman.rs:660:51: 660:75
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:660:51: 660:73
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 0 at cita-executor/src/postman.rs:642:31: 654:27
    }

    bb6: {
        _10 = move ((_3 as Some).0: std::vec::Vec<std::vec::Vec<u8>>); // scope 0 at cita-executor/src/postman.rs:655:34: 655:48
        _13 = <Vec<Vec<u8>> as IntoIterator>::into_iter(move _10) -> bb7; // scope 1 at cita-executor/src/postman.rs:656:52: 656:78
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:656:67: 656:76
                                         // + literal: Const { ty: fn(Vec<Vec<u8>>) -> <Vec<Vec<u8>> as IntoIterator>::IntoIter {<Vec<Vec<u8>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        _12 = <std::vec::IntoIter<Vec<u8>> as Iterator>::flatten(move _13) -> bb8; // scope 1 at cita-executor/src/postman.rs:656:52: 656:88
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:656:79: 656:86
                                         // + literal: Const { ty: fn(std::vec::IntoIter<Vec<u8>>) -> std::iter::Flatten<std::vec::IntoIter<Vec<u8>>> {<std::vec::IntoIter<Vec<u8>> as Iterator>::flatten}, val: Value(<ZST>) }
    }

    bb8: {
        _11 = <std::iter::Flatten<std::vec::IntoIter<Vec<u8>>> as Iterator>::collect::<Vec<u8>>(move _12) -> bb9; // scope 1 at cita-executor/src/postman.rs:656:52: 656:98
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:656:89: 656:96
                                         // + literal: Const { ty: fn(std::iter::Flatten<std::vec::IntoIter<Vec<u8>>>) -> Vec<u8> {<std::iter::Flatten<std::vec::IntoIter<Vec<u8>>> as Iterator>::collect::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb9: {
        _27 = deref_copy (_1.2: &mut libproto::Response); // scope 2 at cita-executor/src/postman.rs:657:33: 657:62
        _15 = move _11;                  // scope 2 at cita-executor/src/postman.rs:657:58: 657:61
        _14 = libproto::Response::set_state_proof(_27, move _15) -> bb13; // scope 2 at cita-executor/src/postman.rs:657:33: 657:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:657:42: 657:57
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_state_proof}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = libproto::Response::set_code(_26, move _17) -> bb11; // scope 0 at cita-executor/src/postman.rs:660:33: 660:76
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:660:42: 660:50
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb11: {
        _28 = deref_copy (_1.2: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:661:33: 661:93
        _20 = const "get state proof failed"; // scope 0 at cita-executor/src/postman.rs:661:56: 661:80
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:661:56: 661:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = <str as ToString>::to_string(_20) -> bb12; // scope 0 at cita-executor/src/postman.rs:661:56: 661:92
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:661:81: 661:90
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> std::string::String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb12: {
        _18 = libproto::Response::set_error_msg(_28, move _19) -> bb13; // scope 0 at cita-executor/src/postman.rs:661:33: 661:93
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:661:42: 661:55
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb13: {
        return;                          // scope 0 at cita-executor/src/postman.rs:664:22: 664:22
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#12}::{closure#0}(_1: [closure@cita-executor/src/postman.rs:647:35: 647:42], _2: cita_vm::state::State<TrieDB<RocksDB>>) -> std::option::Option<Vec<Vec<u8>>> {
    debug state => _2;                   // in scope 0 at cita-executor/src/postman.rs:647:36: 647:41
    debug state_info => (*(_1.0: &libproto::StateProof)); // in scope 0 at cita-executor/src/postman.rs:638:34: 638:44
    let mut _0: std::option::Option<std::vec::Vec<std::vec::Vec<u8>>>; // return place in scope 0 at cita-executor/src/postman.rs:647:43: 647:43
    let mut _3: std::result::Result<std::vec::Vec<std::vec::Vec<u8>>, cita_vm::state::Error>; // in scope 0 at cita-executor/src/postman.rs:648:29: 652:34
    let mut _4: &cita_vm::state::State<core::TrieDB<cita_db::RocksDB>>; // in scope 0 at cita-executor/src/postman.rs:648:29: 652:34
    let _5: &cita_types::H160;           // in scope 0 at cita-executor/src/postman.rs:650:37: 650:77
    let _6: cita_types::H160;            // in scope 0 at cita-executor/src/postman.rs:650:38: 650:77
    let mut _7: &[u8];                   // in scope 0 at cita-executor/src/postman.rs:650:52: 650:76
    let _8: &cita_types::H256;           // in scope 0 at cita-executor/src/postman.rs:651:37: 651:75
    let _9: cita_types::H256;            // in scope 0 at cita-executor/src/postman.rs:651:38: 651:75
    let mut _10: &[u8];                  // in scope 0 at cita-executor/src/postman.rs:651:49: 651:74
    let mut _11: &libproto::StateProof;  // in scope 0 at cita-executor/src/postman.rs:647:35: 654:26
    let mut _12: &libproto::StateProof;  // in scope 0 at cita-executor/src/postman.rs:647:35: 654:26

    bb0: {
        _4 = &_2;                        // scope 0 at cita-executor/src/postman.rs:648:29: 652:34
        _11 = deref_copy (_1.0: &libproto::StateProof); // scope 0 at cita-executor/src/postman.rs:650:52: 650:76
        _7 = libproto::StateProof::get_address(_11) -> [return: bb1, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:650:52: 650:76
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:650:63: 650:74
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::StateProof) -> &'a [u8] {libproto::StateProof::get_address}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = <H160 as From<&[u8]>>::from(move _7) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:650:38: 650:77
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:650:38: 650:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[u8]) -> H160 {<H160 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 0 at cita-executor/src/postman.rs:650:37: 650:77
        _12 = deref_copy (_1.0: &libproto::StateProof); // scope 0 at cita-executor/src/postman.rs:651:49: 651:74
        _10 = libproto::StateProof::get_position(_12) -> [return: bb3, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:651:49: 651:74
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:651:60: 651:72
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::StateProof) -> &'a [u8] {libproto::StateProof::get_position}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = <H256 as From<&[u8]>>::from(move _10) -> [return: bb4, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:651:38: 651:75
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:651:38: 651:48
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[u8]) -> H256 {<H256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = &_9;                        // scope 0 at cita-executor/src/postman.rs:651:37: 651:75
        _3 = cita_vm::state::State::<TrieDB<RocksDB>>::get_storage_proof(move _4, _5, _8) -> [return: bb5, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:648:29: 652:34
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:649:34: 649:51
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a cita_vm::state::State<TrieDB<RocksDB>>, &'b H160, &'c H256) -> Result<Vec<Vec<u8>>, cita_vm::state::Error> {cita_vm::state::State::<TrieDB<RocksDB>>::get_storage_proof}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = Result::<Vec<Vec<u8>>, cita_vm::state::Error>::ok(move _3) -> [return: bb6, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:648:29: 653:38
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:653:34: 653:36
                                         // + literal: Const { ty: fn(Result<Vec<Vec<u8>>, cita_vm::state::Error>) -> std::option::Option<Vec<Vec<u8>>> {Result::<Vec<Vec<u8>>, cita_vm::state::Error>::ok}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:654:25: 654:26
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/postman.rs:654:26: 654:26
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:654:25: 654:26
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:647:35: 654:26
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#13}(_1: [closure@cita-executor/src/postman.rs:665:30: 665:35], _2: serde_json::Error) -> () {
    debug err => _2;                     // in scope 0 at cita-executor/src/postman.rs:665:31: 665:34
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:665:36: 665:36
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:666:25: 666:68
    let mut _4: i64;                     // in scope 0 at cita-executor/src/postman.rs:666:43: 666:67
    let _5: ();                          // in scope 0 at cita-executor/src/postman.rs:667:25: 667:69
    let mut _6: std::string::String;     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let _7: std::string::String;         // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _9: &[&str];                 // in scope 0 at cita-executor/src/postman.rs:667:56: 667:62
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:667:64: 667:67
    let _14: &serde_json::Error;         // in scope 0 at cita-executor/src/postman.rs:667:64: 667:67
    let mut _15: &[&str; 1];             // in scope 0 at cita-executor/src/postman.rs:667:56: 667:62
    let mut _16: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:665:30: 668:22
    let mut _17: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:665:30: 668:22
    scope 1 {
        debug res => _7;                 // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:666:25: 666:68
        _4 = error::ErrorCode::query_error() -> [return: bb1, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:666:43: 666:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:666:43: 666:65
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = libproto::Response::set_code(_16, move _4) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:666:25: 666:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:666:34: 666:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb2: {
        _17 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:667:25: 667:69
        _15 = const _;                   // scope 0 at cita-executor/src/postman.rs:667:56: 667:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:667:56: 667:62
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request::{closure#13}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _15 as &[&str] (Pointer(Unsize)); // scope 0 at cita-executor/src/postman.rs:667:56: 667:62
        _14 = &_2;                       // scope 0 at cita-executor/src/postman.rs:667:64: 667:67
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>(_14) -> [return: bb3, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:667:64: 667:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:667:64: 667:67
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _11 = &_12;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _10 = _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb4, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = std::fmt::format(move _8) -> [return: bb5, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = move _7;                    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _5 = libproto::Response::set_error_msg(_17, move _6) -> [return: bb6, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:667:25: 667:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:667:34: 667:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:668:21: 668:22
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/postman.rs:668:22: 668:22
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:668:21: 668:22
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:665:30: 668:22
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#13}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:667:56: 667:62
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:667:56: 667:62

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-executor/src/postman.rs:667:56: 667:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:667:56: 667:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:667:56: 667:62
        return;                          // scope 0 at cita-executor/src/postman.rs:667:56: 667:62
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#14}(_1: [closure@cita-executor/src/postman.rs:674:26: 674:36], _2: jsonrpc_types::rpc_types::BlockNumber) -> () {
    debug block_id => _2;                // in scope 0 at cita-executor/src/postman.rs:674:27: 674:35
    debug self => (*(_1.0: &&postman::Postman)); // in scope 0 at cita-executor/src/postman.rs:479:29: 479:33
    debug skey => (*(_1.1: &libproto::StorageKey)); // in scope 0 at cita-executor/src/postman.rs:671:34: 671:38
    debug response => (*(_1.2: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:674:37: 674:37
    let mut _3: std::option::Option<cita_types::H256>; // in scope 0 at cita-executor/src/postman.rs:675:31: 687:27
    let mut _4: std::option::Option<cita_vm::state::State<core::TrieDB<cita_db::RocksDB>>>; // in scope 0 at cita-executor/src/postman.rs:675:31: 679:26
    let _5: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/postman.rs:676:29: 676:53
    let _6: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/postman.rs:677:29: 677:56
    let mut _7: types::block_number::BlockTag; // in scope 0 at cita-executor/src/postman.rs:678:29: 678:44
    let mut _8: [closure@cita-executor/src/postman.rs:680:35: 680:46]; // in scope 0 at cita-executor/src/postman.rs:680:35: 687:26
    let mut _9: isize;                   // in scope 0 at cita-executor/src/postman.rs:688:29: 688:46
    let _10: cita_types::H256;           // in scope 0 at cita-executor/src/postman.rs:688:34: 688:45
    let _11: ();                         // in scope 0 at cita-executor/src/postman.rs:689:33: 689:81
    let mut _12: std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:689:60: 689:80
    let mut _13: &[u8];                  // in scope 0 at cita-executor/src/postman.rs:689:60: 689:80
    let _14: &[u8];                      // in scope 0 at cita-executor/src/postman.rs:689:60: 689:80
    let mut _15: &cita_types::H256;      // in scope 0 at cita-executor/src/postman.rs:689:60: 689:80
    let _16: ();                         // in scope 0 at cita-executor/src/postman.rs:692:33: 692:76
    let mut _17: i64;                    // in scope 0 at cita-executor/src/postman.rs:692:51: 692:75
    let _18: ();                         // in scope 0 at cita-executor/src/postman.rs:693:33: 694:98
    let mut _19: std::string::String;    // in scope 0 at cita-executor/src/postman.rs:694:52: 694:97
    let _20: &str;                       // in scope 0 at cita-executor/src/postman.rs:694:52: 694:85
    let mut _21: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    let mut _22: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    let mut _23: &&postman::Postman;     // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    let mut _24: &postman::Postman;      // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    let mut _25: &libproto::StorageKey;  // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    let mut _26: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    let mut _27: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    let mut _28: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:674:26: 697:22
    scope 1 {
        debug storage_val => _10;        // in scope 1 at cita-executor/src/postman.rs:688:34: 688:45
    }

    bb0: {
        _21 = deref_copy (_1.0: &&postman::Postman); // scope 0 at cita-executor/src/postman.rs:676:29: 676:53
        _22 = deref_copy (*_21);         // scope 0 at cita-executor/src/postman.rs:676:29: 676:53
        _5 = &((*_22).6: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 0 at cita-executor/src/postman.rs:676:29: 676:53
        _23 = deref_copy (_1.0: &&postman::Postman); // scope 0 at cita-executor/src/postman.rs:677:29: 677:56
        _24 = deref_copy (*_23);         // scope 0 at cita-executor/src/postman.rs:677:29: 677:56
        _6 = &((*_24).7: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 0 at cita-executor/src/postman.rs:677:29: 677:56
        _7 = <jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into(move _2) -> bb1; // scope 0 at cita-executor/src/postman.rs:678:29: 678:44
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:678:38: 678:42
                                         // + literal: Const { ty: fn(jsonrpc_types::rpc_types::BlockNumber) -> types::block_number::BlockTag {<jsonrpc_types::rpc_types::BlockNumber as Into<types::block_number::BlockTag>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = core::libexecutor::command::state_at(_5, _6, move _7) -> bb2; // scope 0 at cita-executor/src/postman.rs:675:31: 679:26
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:675:31: 675:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>, &'b crossbeam_channel::Receiver<CommandResp>, types::block_number::BlockTag) -> std::option::Option<cita_vm::state::State<TrieDB<RocksDB>>> {core::libexecutor::command::state_at}, val: Value(<ZST>) }
    }

    bb2: {
        _25 = deref_copy (_1.1: &libproto::StorageKey); // scope 0 at cita-executor/src/postman.rs:680:35: 687:26
        _8 = [closure@cita-executor/src/postman.rs:680:35: 680:46] { skey: _25 }; // scope 0 at cita-executor/src/postman.rs:680:35: 687:26
                                         // closure
                                         // + def_id: DefId(0:179 ~ cita_executor[bbb2]::postman::{impl#0}::reply_chain_request::{closure#14}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((cita_vm::state::State<core::TrieDB<cita_db::RocksDB>>,)) -> std::option::Option<cita_types::H256>,
                                         //     (&libproto::StorageKey,),
                                         // ]
        _3 = std::option::Option::<cita_vm::state::State<TrieDB<RocksDB>>>::and_then::<H256, [closure@cita-executor/src/postman.rs:680:35: 680:46]>(move _4, move _8) -> bb3; // scope 0 at cita-executor/src/postman.rs:675:31: 687:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:680:26: 680:34
                                         // + literal: Const { ty: fn(std::option::Option<cita_vm::state::State<TrieDB<RocksDB>>>, [closure@cita-executor/src/postman.rs:680:35: 680:46]) -> std::option::Option<H256> {std::option::Option::<cita_vm::state::State<TrieDB<RocksDB>>>::and_then::<H256, [closure@cita-executor/src/postman.rs:680:35: 680:46]>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_3);           // scope 0 at cita-executor/src/postman.rs:675:31: 687:27
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 0 at cita-executor/src/postman.rs:675:25: 687:27
    }

    bb4: {
        _26 = deref_copy (_1.2: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:692:33: 692:76
        _17 = error::ErrorCode::query_error() -> bb9; // scope 0 at cita-executor/src/postman.rs:692:51: 692:75
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:692:51: 692:73
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 0 at cita-executor/src/postman.rs:675:31: 687:27
    }

    bb6: {
        _10 = ((_3 as Some).0: cita_types::H256); // scope 0 at cita-executor/src/postman.rs:688:34: 688:45
        _27 = deref_copy (_1.2: &mut libproto::Response); // scope 1 at cita-executor/src/postman.rs:689:33: 689:81
        _15 = &_10;                      // scope 1 at cita-executor/src/postman.rs:689:60: 689:80
        _14 = <H256 as Deref>::deref(move _15) -> bb7; // scope 1 at cita-executor/src/postman.rs:689:60: 689:80
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:689:60: 689:80
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = _14;                       // scope 1 at cita-executor/src/postman.rs:689:60: 689:80
        _12 = slice::<impl [u8]>::to_vec(move _13) -> bb8; // scope 1 at cita-executor/src/postman.rs:689:60: 689:80
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:689:72: 689:78
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb8: {
        _11 = libproto::Response::set_storage_value(_27, move _12) -> bb12; // scope 1 at cita-executor/src/postman.rs:689:33: 689:81
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:689:42: 689:59
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_storage_value}, val: Value(<ZST>) }
    }

    bb9: {
        _16 = libproto::Response::set_code(_26, move _17) -> bb10; // scope 0 at cita-executor/src/postman.rs:692:33: 692:76
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:692:42: 692:50
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb10: {
        _28 = deref_copy (_1.2: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:693:33: 694:98
        _20 = const "get storage at something failed"; // scope 0 at cita-executor/src/postman.rs:694:52: 694:85
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:694:52: 694:85
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = <str as ToString>::to_string(_20) -> bb11; // scope 0 at cita-executor/src/postman.rs:694:52: 694:97
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:694:86: 694:95
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> std::string::String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = libproto::Response::set_error_msg(_28, move _19) -> bb12; // scope 0 at cita-executor/src/postman.rs:693:33: 694:98
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:694:38: 694:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at cita-executor/src/postman.rs:697:22: 697:22
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#14}::{closure#0}(_1: [closure@cita-executor/src/postman.rs:680:35: 680:46], _2: cita_vm::state::State<TrieDB<RocksDB>>) -> std::option::Option<H256> {
    debug state => _2;                   // in scope 0 at cita-executor/src/postman.rs:680:36: 680:45
    debug skey => (*(_1.0: &libproto::StorageKey)); // in scope 0 at cita-executor/src/postman.rs:671:34: 671:38
    let mut _0: std::option::Option<cita_types::H256>; // return place in scope 0 at cita-executor/src/postman.rs:680:47: 680:47
    let mut _3: std::result::Result<cita_types::H256, cita_vm::state::Error>; // in scope 0 at cita-executor/src/postman.rs:681:29: 685:34
    let mut _4: &mut cita_vm::state::State<core::TrieDB<cita_db::RocksDB>>; // in scope 0 at cita-executor/src/postman.rs:681:29: 685:34
    let _5: &cita_types::H160;           // in scope 0 at cita-executor/src/postman.rs:683:37: 683:71
    let _6: cita_types::H160;            // in scope 0 at cita-executor/src/postman.rs:683:38: 683:71
    let mut _7: &[u8];                   // in scope 0 at cita-executor/src/postman.rs:683:52: 683:70
    let _8: &cita_types::H256;           // in scope 0 at cita-executor/src/postman.rs:684:37: 684:69
    let _9: cita_types::H256;            // in scope 0 at cita-executor/src/postman.rs:684:38: 684:69
    let mut _10: &[u8];                  // in scope 0 at cita-executor/src/postman.rs:684:49: 684:68
    let mut _11: &libproto::StorageKey;  // in scope 0 at cita-executor/src/postman.rs:680:35: 687:26
    let mut _12: &libproto::StorageKey;  // in scope 0 at cita-executor/src/postman.rs:680:35: 687:26

    bb0: {
        _4 = &mut _2;                    // scope 0 at cita-executor/src/postman.rs:681:29: 685:34
        _11 = deref_copy (_1.0: &libproto::StorageKey); // scope 0 at cita-executor/src/postman.rs:683:52: 683:70
        _7 = StorageKey::get_address(_11) -> [return: bb1, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:683:52: 683:70
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:683:57: 683:68
                                         // + literal: Const { ty: for<'a> fn(&'a StorageKey) -> &'a [u8] {StorageKey::get_address}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = <H160 as From<&[u8]>>::from(move _7) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:683:38: 683:71
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:683:38: 683:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[u8]) -> H160 {<H160 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 0 at cita-executor/src/postman.rs:683:37: 683:71
        _12 = deref_copy (_1.0: &libproto::StorageKey); // scope 0 at cita-executor/src/postman.rs:684:49: 684:68
        _10 = StorageKey::get_position(_12) -> [return: bb3, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:684:49: 684:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:684:54: 684:66
                                         // + literal: Const { ty: for<'a> fn(&'a StorageKey) -> &'a [u8] {StorageKey::get_position}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = <H256 as From<&[u8]>>::from(move _10) -> [return: bb4, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:684:38: 684:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:684:38: 684:48
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[u8]) -> H256 {<H256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = &_9;                        // scope 0 at cita-executor/src/postman.rs:684:37: 684:69
        _3 = <cita_vm::state::State<TrieDB<RocksDB>> as StateObjectInfo>::get_storage(move _4, _5, _8) -> [return: bb5, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:681:29: 685:34
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:682:34: 682:45
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut cita_vm::state::State<TrieDB<RocksDB>>, &'b H160, &'c H256) -> Result<H256, cita_vm::state::Error> {<cita_vm::state::State<TrieDB<RocksDB>> as StateObjectInfo>::get_storage}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = Result::<H256, cita_vm::state::Error>::ok(move _3) -> [return: bb6, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:681:29: 686:38
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:686:34: 686:36
                                         // + literal: Const { ty: fn(Result<H256, cita_vm::state::Error>) -> std::option::Option<H256> {Result::<H256, cita_vm::state::Error>::ok}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:687:25: 687:26
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/postman.rs:687:26: 687:26
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:687:25: 687:26
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:680:35: 687:26
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#15}(_1: [closure@cita-executor/src/postman.rs:698:30: 698:35], _2: serde_json::Error) -> () {
    debug err => _2;                     // in scope 0 at cita-executor/src/postman.rs:698:31: 698:34
    debug response => (*(_1.0: &mut libproto::Response)); // in scope 0 at cita-executor/src/postman.rs:480:17: 480:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:698:36: 698:36
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:699:25: 699:68
    let mut _4: i64;                     // in scope 0 at cita-executor/src/postman.rs:699:43: 699:67
    let _5: ();                          // in scope 0 at cita-executor/src/postman.rs:700:25: 700:69
    let mut _6: std::string::String;     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let _7: std::string::String;         // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _9: &[&str];                 // in scope 0 at cita-executor/src/postman.rs:700:56: 700:62
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:700:64: 700:67
    let _14: &serde_json::Error;         // in scope 0 at cita-executor/src/postman.rs:700:64: 700:67
    let mut _15: &[&str; 1];             // in scope 0 at cita-executor/src/postman.rs:700:56: 700:62
    let mut _16: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:698:30: 701:22
    let mut _17: &mut libproto::Response; // in scope 0 at cita-executor/src/postman.rs:698:30: 701:22
    scope 1 {
        debug res => _7;                 // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:699:25: 699:68
        _4 = error::ErrorCode::query_error() -> [return: bb1, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:699:43: 699:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:699:43: 699:65
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::query_error}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = libproto::Response::set_code(_16, move _4) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:699:25: 699:68
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:699:34: 699:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb2: {
        _17 = deref_copy (_1.0: &mut libproto::Response); // scope 0 at cita-executor/src/postman.rs:700:25: 700:69
        _15 = const _;                   // scope 0 at cita-executor/src/postman.rs:700:56: 700:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:700:56: 700:62
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Postman::reply_chain_request::{closure#15}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _15 as &[&str] (Pointer(Unsize)); // scope 0 at cita-executor/src/postman.rs:700:56: 700:62
        _14 = &_2;                       // scope 0 at cita-executor/src/postman.rs:700:64: 700:67
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>(_14) -> [return: bb3, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:700:64: 700:67
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:700:64: 700:67
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _11 = &_12;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _10 = _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb4, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = std::fmt::format(move _8) -> [return: bb5, unwind: bb8]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {std::fmt::format}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = move _7;                    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _5 = libproto::Response::set_error_msg(_17, move _6) -> [return: bb6, unwind: bb8]; // scope 0 at cita-executor/src/postman.rs:700:25: 700:69
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:700:34: 700:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at cita-executor/src/postman.rs:701:21: 701:22
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/postman.rs:701:22: 701:22
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:701:21: 701:22
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:698:30: 701:22
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::reply_chain_request::{closure#15}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/postman.rs:700:56: 700:62
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/postman.rs:700:56: 700:62

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-executor/src/postman.rs:700:56: 700:62
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:700:56: 700:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:700:56: 700:62
        return;                          // scope 0 at cita-executor/src/postman.rs:700:56: 700:62
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::signal_to_chain(_1: &Postman) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:715:24: 715:29
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:715:31: 715:31
    let mut _2: libproto::StateSignal;   // in scope 0 at cita-executor/src/postman.rs:716:13: 716:29
    let _3: ();                          // in scope 0 at cita-executor/src/postman.rs:717:9: 717:59
    let mut _4: &mut libproto::StateSignal; // in scope 0 at cita-executor/src/postman.rs:717:9: 717:59
    let mut _5: u64;                     // in scope 0 at cita-executor/src/postman.rs:717:33: 717:58
    let mut _7: libproto::StateSignal;   // in scope 0 at cita-executor/src/postman.rs:718:28: 718:40
    let _8: ();                          // in scope 0 at cita-executor/src/postman.rs:719:9: 722:10
    let mut _9: std::string::String;     // in scope 0 at cita-executor/src/postman.rs:720:13: 720:57
    let mut _10: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _11: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _12: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _13: std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:721:13: 721:36
    let mut _14: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-executor/src/postman.rs:721:13: 721:27
    let mut _15: libproto::Message;      // in scope 0 at cita-executor/src/postman.rs:721:13: 721:16
    let mut _16: bool;                   // in scope 0 at cita-executor/src/postman.rs:722:9: 722:10
    let mut _17: bool;                   // in scope 0 at cita-executor/src/postman.rs:723:5: 723:6
    let mut _18: bool;                   // in scope 0 at cita-executor/src/postman.rs:723:5: 723:6
    scope 1 {
        debug state_signal => _2;        // in scope 1 at cita-executor/src/postman.rs:716:13: 716:29
        let _6: libproto::Message;       // in scope 1 at cita-executor/src/postman.rs:718:13: 718:16
        scope 2 {
            debug msg => _6;             // in scope 2 at cita-executor/src/postman.rs:718:13: 718:16
        }
    }

    bb0: {
        _17 = const false;               // scope 0 at cita-executor/src/postman.rs:716:13: 716:29
        _18 = const false;               // scope 0 at cita-executor/src/postman.rs:716:13: 716:29
        _16 = const false;               // scope 0 at cita-executor/src/postman.rs:716:13: 716:29
        _18 = const true;                // scope 0 at cita-executor/src/postman.rs:716:32: 716:50
        _2 = libproto::StateSignal::new() -> bb1; // scope 0 at cita-executor/src/postman.rs:716:32: 716:50
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:716:32: 716:48
                                         // + literal: Const { ty: fn() -> libproto::StateSignal {libproto::StateSignal::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _2;                    // scope 1 at cita-executor/src/postman.rs:717:9: 717:59
        _5 = Postman::get_current_height(_1) -> [return: bb2, unwind: bb15]; // scope 1 at cita-executor/src/postman.rs:717:33: 717:58
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:717:38: 717:56
                                         // + literal: Const { ty: for<'a> fn(&'a Postman) -> u64 {Postman::get_current_height}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = libproto::StateSignal::set_height(move _4, move _5) -> [return: bb3, unwind: bb15]; // scope 1 at cita-executor/src/postman.rs:717:9: 717:59
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:717:22: 717:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::StateSignal, u64) {libproto::StateSignal::set_height}, val: Value(<ZST>) }
    }

    bb3: {
        _18 = const false;               // scope 1 at cita-executor/src/postman.rs:718:28: 718:40
        _7 = move _2;                    // scope 1 at cita-executor/src/postman.rs:718:28: 718:40
        _6 = <libproto::StateSignal as Into<libproto::Message>>::into(move _7) -> [return: bb4, unwind: bb15]; // scope 1 at cita-executor/src/postman.rs:718:28: 718:47
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:718:41: 718:45
                                         // + literal: Const { ty: fn(libproto::StateSignal) -> libproto::Message {<libproto::StateSignal as Into<libproto::Message>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = const true;                // scope 1 at cita-executor/src/postman.rs:718:46: 718:47
        _11 = const libproto::router::SubModules::Executor; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x05)) }
        _12 = const libproto::router::MsgType::StateSignal; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x16)) }
        _10 = RoutingKey(move _11, move _12); // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _9 = <RoutingKey as Into<std::string::String>>::into(move _10) -> [return: bb5, unwind: bb13]; // scope 2 at cita-executor/src/postman.rs:720:13: 720:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:720:51: 720:55
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = const true;                // scope 2 at cita-executor/src/postman.rs:720:56: 720:57
        _17 = const false;               // scope 2 at cita-executor/src/postman.rs:721:13: 721:16
        _15 = move _6;                   // scope 2 at cita-executor/src/postman.rs:721:13: 721:16
        _14 = <libproto::Message as libproto::TryInto<Vec<u8>>>::try_into(move _15) -> [return: bb6, unwind: bb11]; // scope 2 at cita-executor/src/postman.rs:721:13: 721:27
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:721:17: 721:25
                                         // + literal: Const { ty: fn(libproto::Message) -> Result<Vec<u8>, <libproto::Message as libproto::TryInto<Vec<u8>>>::Error> {<libproto::Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _14) -> [return: bb7, unwind: bb11]; // scope 2 at cita-executor/src/postman.rs:721:13: 721:36
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:721:28: 721:34
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = const false;               // scope 2 at cita-executor/src/postman.rs:719:9: 722:10
        _8 = Postman::response_mq(_1, move _9, move _13) -> [return: bb8, unwind: bb11]; // scope 2 at cita-executor/src/postman.rs:719:9: 722:10
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:719:14: 719:25
                                         // + literal: Const { ty: for<'a> fn(&'a Postman, std::string::String, Vec<u8>) {Postman::response_mq}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = const false;               // scope 2 at cita-executor/src/postman.rs:722:9: 722:10
        _17 = const false;               // scope 1 at cita-executor/src/postman.rs:723:5: 723:6
        _18 = const false;               // scope 0 at cita-executor/src/postman.rs:723:5: 723:6
        return;                          // scope 0 at cita-executor/src/postman.rs:723:6: 723:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:715:5: 723:6
    }

    bb10 (cleanup): {
        drop(_9) -> bb13;                // scope 2 at cita-executor/src/postman.rs:722:9: 722:10
    }

    bb11 (cleanup): {
        switchInt(_16) -> [0: bb13, otherwise: bb10]; // scope 2 at cita-executor/src/postman.rs:722:9: 722:10
    }

    bb12 (cleanup): {
        drop(_6) -> bb15;                // scope 1 at cita-executor/src/postman.rs:723:5: 723:6
    }

    bb13 (cleanup): {
        switchInt(_17) -> [0: bb15, otherwise: bb12]; // scope 1 at cita-executor/src/postman.rs:723:5: 723:6
    }

    bb14 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-executor/src/postman.rs:723:5: 723:6
    }

    bb15 (cleanup): {
        switchInt(_18) -> [0: bb9, otherwise: bb14]; // scope 0 at cita-executor/src/postman.rs:723:5: 723:6
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::get_current_height(_1: &Postman) -> u64 {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:725:27: 725:32
    let mut _0: u64;                     // return place in scope 0 at cita-executor/src/postman.rs:725:37: 725:40
    let mut _2: &backlogs::Backlogs;     // in scope 0 at cita-executor/src/postman.rs:726:9: 726:43

    bb0: {
        _2 = &((*_1).0: backlogs::Backlogs); // scope 0 at cita-executor/src/postman.rs:726:9: 726:43
        _0 = Backlogs::get_current_height(move _2) -> bb1; // scope 0 at cita-executor/src/postman.rs:726:9: 726:43
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:726:23: 726:41
                                         // + literal: Const { ty: for<'a> fn(&'a Backlogs) -> u64 {Backlogs::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-executor/src/postman.rs:727:6: 727:6
    }
}

fn postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::response_mq(_1: &Postman, _2: std::string::String, _3: Vec<u8>) -> () {
    debug self => _1;                    // in scope 0 at cita-executor/src/postman.rs:729:20: 729:25
    debug key => _2;                     // in scope 0 at cita-executor/src/postman.rs:729:27: 729:30
    debug message => _3;                 // in scope 0 at cita-executor/src/postman.rs:729:40: 729:47
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/postman.rs:729:58: 729:58
    let _4: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _7: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _8: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _9: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _10: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _12: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _14: &[&str];                // in scope 0 at cita-executor/src/postman.rs:730:16: 730:39
    let mut _15: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _17: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/postman.rs:730:41: 730:44
    let _19: &std::string::String;       // in scope 0 at cita-executor/src/postman.rs:730:41: 730:44
    let mut _20: std::result::Result<(), crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at cita-executor/src/postman.rs:731:17: 731:57
    let mut _21: &crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/postman.rs:731:17: 731:57
    let mut _22: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-executor/src/postman.rs:731:42: 731:56
    let mut _23: std::string::String;    // in scope 0 at cita-executor/src/postman.rs:731:43: 731:46
    let mut _24: std::vec::Vec<u8>;      // in scope 0 at cita-executor/src/postman.rs:731:48: 731:55
    let mut _28: bool;                   // in scope 0 at cita-executor/src/postman.rs:732:5: 732:6
    let mut _29: bool;                   // in scope 0 at cita-executor/src/postman.rs:732:5: 732:6
    scope 1 {
        debug lvl => _4;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _25: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _26: &[&str; 2];         // in scope 1 at cita-executor/src/postman.rs:730:16: 730:39
        let mut _27: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
    scope 2 {
    }

    bb0: {
        _29 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _28 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _29 = const true;                // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _28 = const true;                // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _4 = log::Level::Trace;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _7 = &_4;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _27 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Postman::response_mq, [], Some(promoted[2])) }
        _6 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _7, _27) -> [return: bb4, unwind: bb16]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _9 = &_4;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _11 = log::max_level() -> [return: bb5, unwind: bb16]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _5) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _6) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _10 = &_11;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _8 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _9, move _10) -> [return: bb6, unwind: bb16]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = move _8;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _26 = const _;                   // scope 1 at cita-executor/src/postman.rs:730:16: 730:39
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:730:16: 730:39
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Postman::response_mq, [], Some(promoted[1])) }
        _14 = _26 as &[&str] (Pointer(Unsize)); // scope 1 at cita-executor/src/postman.rs:730:16: 730:39
        _19 = &_2;                       // scope 1 at cita-executor/src/postman.rs:730:41: 730:44
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_19) -> [return: bb8, unwind: bb16]; // scope 1 at cita-executor/src/postman.rs:730:41: 730:44
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:730:41: 730:44
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = [move _18];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _16 = &_17;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = _16 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb9, unwind: bb16]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _25 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Postman::response_mq, [], Some(promoted[0])) }
        _12 = log::__private_api_log(move _13, _4, _25) -> [return: bb18, unwind: bb16]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = &((*_1).3: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 0 at cita-executor/src/postman.rs:731:17: 731:57
        _29 = const false;               // scope 0 at cita-executor/src/postman.rs:731:43: 731:46
        _23 = move _2;                   // scope 0 at cita-executor/src/postman.rs:731:43: 731:46
        _28 = const false;               // scope 0 at cita-executor/src/postman.rs:731:48: 731:55
        _24 = move _3;                   // scope 0 at cita-executor/src/postman.rs:731:48: 731:55
        _22 = (move _23, move _24);      // scope 0 at cita-executor/src/postman.rs:731:42: 731:56
        _20 = crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(move _21, move _22) -> [return: bb11, unwind: bb16]; // scope 0 at cita-executor/src/postman.rs:731:17: 731:57
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:731:37: 731:41
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_20) -> [return: bb12, unwind: bb16]; // scope 0 at cita-executor/src/postman.rs:731:57: 731:58
    }

    bb12: {
        return;                          // scope 0 at cita-executor/src/postman.rs:732:6: 732:6
    }

    bb13 (cleanup): {
        switchInt(_29) -> [0: bb14, otherwise: bb17]; // scope 0 at cita-executor/src/postman.rs:732:5: 732:6
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/postman.rs:729:5: 732:6
    }

    bb15 (cleanup): {
        drop(_3) -> bb13;                // scope 0 at cita-executor/src/postman.rs:732:5: 732:6
    }

    bb16 (cleanup): {
        switchInt(_28) -> [0: bb13, otherwise: bb15]; // scope 0 at cita-executor/src/postman.rs:732:5: 732:6
    }

    bb17 (cleanup): {
        drop(_2) -> bb14;                // scope 0 at cita-executor/src/postman.rs:732:5: 732:6
    }

    bb18: {
        goto -> bb10;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::response_mq: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/postman.rs:730:9: 730:45
    let mut _7: &str;                    // in scope 0 at cita-executor/src/postman.rs:730:9: 730:45

    bb0: {
        _3 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor::postman"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/postman.rs"; // scope 0 at cita-executor/src/postman.rs:730:9: 730:45
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:730:9: 730:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/postman.rs:730:9: 730:45
        _1 = (move _2, move _4, move _6, const 730_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::response_mq: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-executor/src/postman.rs:730:16: 730:39
    let mut _1: [&str; 2];               // in scope 0 at cita-executor/src/postman.rs:730:16: 730:39

    bb0: {
        _1 = [const "send ", const " into RabbitMQ"]; // scope 0 at cita-executor/src/postman.rs:730:16: 730:39
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:730:16: 730:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/postman.rs:730:16: 730:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/postman.rs:730:16: 730:39
        return;                          // scope 0 at cita-executor/src/postman.rs:730:16: 730:39
    }
}

promoted[2] in postman::<impl at cita-executor/src/postman.rs:56:1: 56:13>::response_mq: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn get_build_info_str(_1: bool) -> &str {
    debug short => _1;                   // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:4:35: 4:40
    let mut _0: &str;                    // return place in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:4:51: 4:63

    bb0: {
        switchInt(_1) -> [0: bb2, otherwise: bb1]; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:5:15: 5:20
    }

    bb1: {
        _0 = const "20.2.0-unknown";     // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:5:23: 5:39
                                         // mir::Constant
                                         // + span: /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:5:23: 5:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb3;                     // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:5:12: 5:2490
    }

    bb2: {
        _0 = const "20.2.0-unknown\n(rustc 1.70.0-nightly-2023-03-18)\n\n                       ..-nnmmmmnn-..\n                  .-nndNNNNNNmddddmmmho.\n                .smNNMMMNnn-         :nnmhn.\n              .dNMMMMMNs--:nosnno-.     ..dNn..   ....\n            .hNMMMMMMMNmmNNNMMMMMNmn     ..nMNNmmmmmmmmdnn.\n           .mMMMMMMMMMMMMMMMMMMMMMMN:  ..ohmNNNNNNmdhnsoonms\n          nNMMMMMMMMMMMMMMMMMMMMMMMMh.                 .-:dN:\n         :NMMMMMMMMMMMMMMMMMMMMMMMMMNdnnnhhddmmmNNNNNNNNNNNMn\n        .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMMMMMMMMMMm dMN:\n        nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN sMMMMMMMNNNNNNdNMNn\n       .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMMMNdn.--nohmNMmo.\n       nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhnn       .:smNmhn.\n       .NMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhhdddhsnn.             nmMNmn:\n       nMMMMMMMMMMMMMMMMMMMMMMMMMMMMh..              .:n:-.   oNddNNn\n       oMMMMMMMMMMMMMMMMMMMMMMMMMMMMh.             .:noshmdnndmn  -hm.\n       sMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdsn-... .:.         -onsn:    .Nn\n       hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmmdmmNn                osssNn\n      .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMs   .nnnmNNmdhnnnnssonNn\n      oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNsnsdNMMMMMMNhssnhdo.Ns\n     nmMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNnoN.\n    .nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdm\n   oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmn\n  :NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNdnNMNn\n .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNds:\" nMMNn\n nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd:.    nMMMNo.\nnNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdo:...sMMMMNo\nnNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmmNMMMMMm\n NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd\n  :mNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNms\n     mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm\n   ._____. ._____.  _. ._   ._____. ._____.   ._.   ._____. ._____.\n   | .___| |___. | | | | |  |___. | |_____|   |_|   |___. | |_____|\n   | |     ._. | | | |_| |  ._. | |   ._.   ._____. ._. | | ._____.\n   | |     | | |_| \\_____/  | | |_/   | |   | ,_, | | | |_/ |_____|\n   | |___. | | ._.   ._.    | |       | |   | | | | | |     ._____.\n   |_____| |_| |_|   |_|    |_|       |_|   |_| |_| |_|     |_____|\n"; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:5:49: 5:2488
                                         // mir::Constant
                                         // + span: /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:5:49: 5:2488
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb3;                     // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:5:12: 5:2490
    }

    bb3: {
        return;                          // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:6:10: 6:10
    }
}

fn get_build_info() -> (&str, std::option::Option<&str>, std::option::Option<&str>, std::option::Option<&str>, std::option::Option<&str>, (u64, u64, u64), std::option::Option<&str>, std::option::Option<&str>) {
    let mut _0: (&str, std::option::Option<&str>, std::option::Option<&str>, std::option::Option<&str>, std::option::Option<&str>, (u64, u64, u64), std::option::Option<&str>, std::option::Option<&str>); // return place in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:10:36: 19:10
    let mut _1: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2403: 20:2407
    let mut _2: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2409: 20:2413
    let mut _3: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2415: 20:2419
    let mut _4: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2421: 20:2425
    let mut _5: (u64, u64, u64);         // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2427: 20:2437
    let mut _6: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2439: 20:2454
    let _7: &str;                        // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2444: 20:2453
    let mut _8: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2456: 20:2474
    let _9: &str;                        // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2461: 20:2473

    bb0: {
        _1 = std::option::Option::<&str>::None; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2403: 20:2407
        _2 = std::option::Option::<&str>::None; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2409: 20:2413
        _3 = std::option::Option::<&str>::None; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2415: 20:2419
        _4 = std::option::Option::<&str>::None; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2421: 20:2425
        _5 = (const 1_u64, const 70_u64, const 0_u64); // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2427: 20:2437
        _7 = const "nightly";            // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2444: 20:2453
                                         // mir::Constant
                                         // + span: /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2444: 20:2453
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = std::option::Option::<&str>::Some(_7); // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2439: 20:2454
        _9 = const "2023-03-18";         // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2461: 20:2473
                                         // mir::Constant
                                         // + span: /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2461: 20:2473
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = std::option::Option::<&str>::Some(_9); // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:2456: 20:2474
        _0 = (const "\n                       ..-nnmmmmnn-..\n                  .-nndNNNNNNmddddmmmho.\n                .smNNMMMNnn-         :nnmhn.\n              .dNMMMMMNs--:nosnno-.     ..dNn..   ....\n            .hNMMMMMMMNmmNNNMMMMMNmn     ..nMNNmmmmmmmmdnn.\n           .mMMMMMMMMMMMMMMMMMMMMMMN:  ..ohmNNNNNNmdhnsoonms\n          nNMMMMMMMMMMMMMMMMMMMMMMMMh.                 .-:dN:\n         :NMMMMMMMMMMMMMMMMMMMMMMMMMNdnnnhhddmmmNNNNNNNNNNNMn\n        .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMMMMMMMMMMm dMN:\n        nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN sMMMMMMMNNNNNNdNMNn\n       .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMMMNdn.--nohmNMmo.\n       nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhnn       .:smNmhn.\n       .NMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhhdddhsnn.             nmMNmn:\n       nMMMMMMMMMMMMMMMMMMMMMMMMMMMMh..              .:n:-.   oNddNNn\n       oMMMMMMMMMMMMMMMMMMMMMMMMMMMMh.             .:noshmdnndmn  -hm.\n       sMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdsn-... .:.         -onsn:    .Nn\n       hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmmdmmNn                osssNn\n      .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMs   .nnnmNNmdhnnnnssonNn\n      oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNsnsdNMMMMMMNhssnhdo.Ns\n     nmMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNnoN.\n    .nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdm\n   oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmn\n  :NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNdnNMNn\n .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNds:\" nMMNn\n nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd:.    nMMMNo.\nnNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdo:...sMMMMNo\nnNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmmNMMMMMm\n NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd\n  :mNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNms\n     mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm\n   ._____. ._____.  _. ._   ._____. ._____.   ._.   ._____. ._____.\n   | .___| |___. | | | | |  |___. | |_____|   |_|   |___. | |_____|\n   | |     ._. | | | |_| |  ._. | |   ._.   ._____. ._. | | ._____.\n   | |     | | |_| \\_____/  | | |_/   | |   | ,_, | | | |_/ |_____|\n   | |___. | | ._.   ._.    | |       | |   | | | | | |     ._____.\n   |_____| |_| |_|   |_|    |_|       |_|   |_| |_| |_|     |_____|\n", move _1, move _2, move _3, move _4, move _5, move _6, move _8); // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:12: 20:2475
                                         // mir::Constant
                                         // + span: /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:20:13: 20:2401
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-executor-ab53b74c7b589361/out/build_info.rs:21:10: 21:10
    }
}

fn <impl at cita-executor/src/main.rs:116:10: 116:15>::fmt(_1: &Options, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-executor/src/main.rs:116:10: 116:15
    debug f => _2;                       // in scope 0 at cita-executor/src/main.rs:116:10: 116:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-executor/src/main.rs:116:10: 116:15
    let _3: &str;                        // in scope 0 at cita-executor/src/main.rs:116:10: 116:15
    let _4: &str;                        // in scope 0 at cita-executor/src/main.rs:118:5: 118:18
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-executor/src/main.rs:118:5: 118:18
    let _6: &u8;                         // in scope 0 at cita-executor/src/main.rs:118:5: 118:18
    let _7: &str;                        // in scope 0 at cita-executor/src/main.rs:119:5: 119:27
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-executor/src/main.rs:119:5: 119:27
    let _9: &std::string::String;        // in scope 0 at cita-executor/src/main.rs:119:5: 119:27
    let _10: &str;                       // in scope 0 at cita-executor/src/main.rs:120:5: 120:25
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at cita-executor/src/main.rs:120:5: 120:25
    let _12: &std::string::String;       // in scope 0 at cita-executor/src/main.rs:120:5: 120:25
    let _13: &str;                       // in scope 0 at cita-executor/src/main.rs:121:5: 121:30
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-executor/src/main.rs:121:5: 121:30
    let _15: &usize;                     // in scope 0 at cita-executor/src/main.rs:121:5: 121:30
    let _16: &str;                       // in scope 0 at cita-executor/src/main.rs:122:5: 122:28
    let mut _17: &dyn std::fmt::Debug;   // in scope 0 at cita-executor/src/main.rs:122:5: 122:28
    let _18: &&bool;                     // in scope 0 at cita-executor/src/main.rs:122:5: 122:28
    let _19: &bool;                      // in scope 0 at cita-executor/src/main.rs:122:5: 122:28

    bb0: {
        _3 = const "Options";            // scope 0 at cita-executor/src/main.rs:116:10: 116:15
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:10: 116:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "prooftype";          // scope 0 at cita-executor/src/main.rs:118:5: 118:18
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:118:5: 118:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: u8);             // scope 0 at cita-executor/src/main.rs:118:5: 118:18
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-executor/src/main.rs:118:5: 118:18
        _7 = const "journaldb_type";     // scope 0 at cita-executor/src/main.rs:119:5: 119:27
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:119:5: 119:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: std::string::String); // scope 0 at cita-executor/src/main.rs:119:5: 119:27
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-executor/src/main.rs:119:5: 119:27
        _10 = const "genesis_path";      // scope 0 at cita-executor/src/main.rs:120:5: 120:25
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:120:5: 120:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &((*_1).2: std::string::String); // scope 0 at cita-executor/src/main.rs:120:5: 120:25
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-executor/src/main.rs:120:5: 120:25
        _13 = const "statedb_cache_size"; // scope 0 at cita-executor/src/main.rs:121:5: 121:30
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:121:5: 121:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = &((*_1).3: usize);         // scope 0 at cita-executor/src/main.rs:121:5: 121:30
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-executor/src/main.rs:121:5: 121:30
        _16 = const "eth_compatibility"; // scope 0 at cita-executor/src/main.rs:122:5: 122:28
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:122:5: 122:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = &((*_1).4: bool);          // scope 0 at cita-executor/src/main.rs:122:5: 122:28
        _18 = &_19;                      // scope 0 at cita-executor/src/main.rs:122:5: 122:28
        _17 = _18 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-executor/src/main.rs:122:5: 122:28
        _0 = std::fmt::Formatter::<'_>::debug_struct_field5_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14, _16, move _17) -> bb1; // scope 0 at cita-executor/src/main.rs:116:10: 116:15
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:10: 116:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h), &'i str, &'j (dyn Debug + 'j), &'k str, &'l (dyn Debug + 'l)) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_struct_field5_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-executor/src/main.rs:116:15: 116:15
    }
}

fn <impl at cita-executor/src/main.rs:116:17: 116:26>::eq(_1: &Options, _2: &Options) -> bool {
    debug self => _1;                    // in scope 0 at cita-executor/src/main.rs:116:17: 116:26
    debug other => _2;                   // in scope 0 at cita-executor/src/main.rs:116:17: 116:26
    let mut _0: bool;                    // return place in scope 0 at cita-executor/src/main.rs:116:17: 116:26
    let mut _3: bool;                    // in scope 0 at cita-executor/src/main.rs:121:5: 121:30
    let mut _4: bool;                    // in scope 0 at cita-executor/src/main.rs:120:5: 120:25
    let mut _5: bool;                    // in scope 0 at cita-executor/src/main.rs:119:5: 119:27
    let mut _6: bool;                    // in scope 0 at cita-executor/src/main.rs:118:5: 118:18
    let mut _7: u8;                      // in scope 0 at cita-executor/src/main.rs:118:5: 118:18
    let mut _8: u8;                      // in scope 0 at cita-executor/src/main.rs:118:5: 118:18
    let mut _9: bool;                    // in scope 0 at cita-executor/src/main.rs:119:5: 119:27
    let mut _10: &std::string::String;   // in scope 0 at cita-executor/src/main.rs:119:5: 119:27
    let mut _11: &std::string::String;   // in scope 0 at cita-executor/src/main.rs:119:5: 119:27
    let mut _12: bool;                   // in scope 0 at cita-executor/src/main.rs:120:5: 120:25
    let mut _13: &std::string::String;   // in scope 0 at cita-executor/src/main.rs:120:5: 120:25
    let mut _14: &std::string::String;   // in scope 0 at cita-executor/src/main.rs:120:5: 120:25
    let mut _15: bool;                   // in scope 0 at cita-executor/src/main.rs:121:5: 121:30
    let mut _16: usize;                  // in scope 0 at cita-executor/src/main.rs:121:5: 121:30
    let mut _17: usize;                  // in scope 0 at cita-executor/src/main.rs:121:5: 121:30
    let mut _18: bool;                   // in scope 0 at cita-executor/src/main.rs:122:5: 122:28
    let mut _19: bool;                   // in scope 0 at cita-executor/src/main.rs:122:5: 122:28
    let mut _20: bool;                   // in scope 0 at cita-executor/src/main.rs:122:5: 122:28

    bb0: {
        _7 = ((*_1).0: u8);              // scope 0 at cita-executor/src/main.rs:118:5: 118:18
        _8 = ((*_2).0: u8);              // scope 0 at cita-executor/src/main.rs:118:5: 118:18
        _6 = Eq(move _7, move _8);       // scope 0 at cita-executor/src/main.rs:118:5: 118:18
        switchInt(move _6) -> [0: bb10, otherwise: bb11]; // scope 0 at cita-executor/src/main.rs:119:5: 119:27
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-executor/src/main.rs:122:5: 122:28
        goto -> bb3;                     // scope 0 at cita-executor/src/main.rs:122:5: 122:28
    }

    bb2: {
        _19 = ((*_1).4: bool);           // scope 0 at cita-executor/src/main.rs:122:5: 122:28
        _20 = ((*_2).4: bool);           // scope 0 at cita-executor/src/main.rs:122:5: 122:28
        _18 = Eq(move _19, move _20);    // scope 0 at cita-executor/src/main.rs:122:5: 122:28
        _0 = move _18;                   // scope 0 at cita-executor/src/main.rs:122:5: 122:28
        goto -> bb3;                     // scope 0 at cita-executor/src/main.rs:122:5: 122:28
    }

    bb3: {
        return;                          // scope 0 at cita-executor/src/main.rs:116:26: 116:26
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-executor/src/main.rs:121:5: 121:30
        goto -> bb6;                     // scope 0 at cita-executor/src/main.rs:121:5: 121:30
    }

    bb5: {
        _16 = ((*_1).3: usize);          // scope 0 at cita-executor/src/main.rs:121:5: 121:30
        _17 = ((*_2).3: usize);          // scope 0 at cita-executor/src/main.rs:121:5: 121:30
        _15 = Eq(move _16, move _17);    // scope 0 at cita-executor/src/main.rs:121:5: 121:30
        _3 = move _15;                   // scope 0 at cita-executor/src/main.rs:121:5: 121:30
        goto -> bb6;                     // scope 0 at cita-executor/src/main.rs:121:5: 121:30
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-executor/src/main.rs:122:5: 122:28
    }

    bb7: {
        _4 = const false;                // scope 0 at cita-executor/src/main.rs:120:5: 120:25
        goto -> bb9;                     // scope 0 at cita-executor/src/main.rs:120:5: 120:25
    }

    bb8: {
        _13 = &((*_1).2: std::string::String); // scope 0 at cita-executor/src/main.rs:120:5: 120:25
        _14 = &((*_2).2: std::string::String); // scope 0 at cita-executor/src/main.rs:120:5: 120:25
        _12 = <std::string::String as PartialEq>::eq(move _13, move _14) -> bb14; // scope 0 at cita-executor/src/main.rs:120:5: 120:25
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:120:5: 120:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::string::String, &'b std::string::String) -> bool {<std::string::String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-executor/src/main.rs:121:5: 121:30
    }

    bb10: {
        _5 = const false;                // scope 0 at cita-executor/src/main.rs:119:5: 119:27
        goto -> bb12;                    // scope 0 at cita-executor/src/main.rs:119:5: 119:27
    }

    bb11: {
        _10 = &((*_1).1: std::string::String); // scope 0 at cita-executor/src/main.rs:119:5: 119:27
        _11 = &((*_2).1: std::string::String); // scope 0 at cita-executor/src/main.rs:119:5: 119:27
        _9 = <std::string::String as PartialEq>::eq(move _10, move _11) -> bb13; // scope 0 at cita-executor/src/main.rs:119:5: 119:27
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:119:5: 119:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::string::String, &'b std::string::String) -> bool {<std::string::String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-executor/src/main.rs:120:5: 120:25
    }

    bb13: {
        _5 = move _9;                    // scope 0 at cita-executor/src/main.rs:119:5: 119:27
        goto -> bb12;                    // scope 0 at cita-executor/src/main.rs:119:5: 119:27
    }

    bb14: {
        _4 = move _12;                   // scope 0 at cita-executor/src/main.rs:120:5: 120:25
        goto -> bb9;                     // scope 0 at cita-executor/src/main.rs:120:5: 120:25
    }
}

const _IMPL_DESERIALIZE_FOR_Options: () = {
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _0 = const ();                   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        return;                          // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }
}

fn _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize(_1: __D) -> Result<Options, <__D as _serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _0: std::result::Result<Options, <__D as _IMPL_DESERIALIZE_FOR_Options::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _0 = <__D as _serde::Deserializer<'_>>::deserialize_struct::<__Visitor<'_>>(move _1, const "Options", const _, const __Visitor::<'_> {{ marker: PhantomData::<Options>, lifetime: PhantomData::<&()> }}) -> bb1; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], __Visitor<'_>) -> Result<<__Visitor<'_> as Visitor<'_>>::Value, <__D as _serde::Deserializer<'_>>::Error> {<__D as _serde::Deserializer<'_>>::deserialize_struct::<__Visitor<'_>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &[&str], val: Unevaluated(FIELDS, [], None) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Visitor<'_>, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-executor/src/main.rs:116:39: 116:39
    }
}

fn _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::expecting(_1: &__FieldVisitor, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    debug __formatter => _2;             // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _3: &str;                        // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _3 = const "field identifier";   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-executor/src/main.rs:116:39: 116:39
    }
}

fn _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::visit_u64(_1: __FieldVisitor, _2: u64) -> Result<__Field, __E> {
    debug self => const __FieldVisitor;  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    debug __value => _2;                 // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field, __E>; // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _3: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _4: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _5: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _6: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _7: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _8: __E;                     // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _9: _IMPL_DESERIALIZE_FOR_Options::_serde::de::Unexpected<'_>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _10: &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _11: &&str;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, otherwise: bb1]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb1: {
        _9 = Unexpected::<'_>::Unsigned(_2); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _11 = const _;                   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &&str, val: Unevaluated(<__FieldVisitor as Visitor<'de>>::visit_u64, [ReErased, __E], Some(promoted[0])) }
        _10 = _11 as &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _8 = <__E as _serde::de::Error>::invalid_value(move _9, move _10) -> bb7; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: for<'a, 'b> fn(Unexpected<'a>, &'b (dyn Expected + 'b)) -> __E {<__E as _serde::de::Error>::invalid_value}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const __Field::__field0;    // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x00)) }
        _0 = Result::<__Field, __E>::Ok(move _3); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb8;                     // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb3: {
        _4 = const __Field::__field1;    // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x01)) }
        _0 = Result::<__Field, __E>::Ok(move _4); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb8;                     // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb4: {
        _5 = const __Field::__field2;    // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x02)) }
        _0 = Result::<__Field, __E>::Ok(move _5); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb8;                     // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb5: {
        _6 = const __Field::__field3;    // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x03)) }
        _0 = Result::<__Field, __E>::Ok(move _6); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb8;                     // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb6: {
        _7 = const __Field::__field4;    // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x04)) }
        _0 = Result::<__Field, __E>::Ok(move _7); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb8;                     // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb7: {
        _0 = Result::<__Field, __E>::Err(move _8); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb8;                     // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb8: {
        return;                          // scope 0 at cita-executor/src/main.rs:116:39: 116:39
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::visit_u64: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _1: &str;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _1 = const "field index 0 <= i < 5"; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        return;                          // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }
}

fn _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::visit_str(_1: __FieldVisitor, _2: &str) -> Result<__Field, __E> {
    debug self => const __FieldVisitor;  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    debug __value => _2;                 // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field, __E>; // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _3: bool;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _4: bool;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _5: bool;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _6: bool;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _7: bool;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _8: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _9: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _10: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _11: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _12: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _13: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "prooftype") -> bb1; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb11]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "journaldb_type") -> bb3; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb12]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "genesis_path") -> bb5; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _5) -> [0: bb6, otherwise: bb13]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "statedb_cache_size") -> bb7; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _6) -> [0: bb8, otherwise: bb14]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "eth_compatibility") -> bb9; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _7) -> [0: bb10, otherwise: bb15]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb10: {
        _13 = const __Field::__ignore;   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x05)) }
        _0 = Result::<__Field, __E>::Ok(move _13); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb16;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb11: {
        _8 = const __Field::__field0;    // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x00)) }
        _0 = Result::<__Field, __E>::Ok(move _8); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb16;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb12: {
        _9 = const __Field::__field1;    // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x01)) }
        _0 = Result::<__Field, __E>::Ok(move _9); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb16;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb13: {
        _10 = const __Field::__field2;   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x02)) }
        _0 = Result::<__Field, __E>::Ok(move _10); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb16;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb14: {
        _11 = const __Field::__field3;   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x03)) }
        _0 = Result::<__Field, __E>::Ok(move _11); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb16;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb15: {
        _12 = const __Field::__field4;   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x04)) }
        _0 = Result::<__Field, __E>::Ok(move _12); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb16;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb16: {
        return;                          // scope 0 at cita-executor/src/main.rs:116:39: 116:39
    }
}

fn _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::visit_bytes(_1: __FieldVisitor, _2: &[u8]) -> Result<__Field, __E> {
    debug self => const __FieldVisitor;  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    debug __value => _2;                 // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field, __E>; // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _3: usize;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _4: usize;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _5: bool;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _6: usize;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _7: usize;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _8: bool;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _9: usize;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _10: usize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _11: bool;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _12: usize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _13: usize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _14: bool;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _15: usize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _16: usize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _17: bool;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _18: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _19: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _20: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _21: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _22: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _23: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _15 = Len((*_2));                // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _16 = const 9_usize;             // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _17 = Eq(move _15, move _16);    // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _17) -> [0: bb11, otherwise: bb1]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [112: bb2, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [111: bb4, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [111: bb5, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [102: bb6, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [116: bb7, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [121: bb8, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [112: bb9, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [101: bb76, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb10: {
        _23 = const __Field::__ignore;   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x05)) }
        _0 = Result::<__Field, __E>::Ok(move _23); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb81;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb11: {
        _12 = Len((*_2));                // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _13 = const 14_usize;            // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _14 = Eq(move _12, move _13);    // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _14) -> [0: bb26, otherwise: bb12]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb12: {
        switchInt((*_2)[0 of 14]) -> [106: bb13, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb13: {
        switchInt((*_2)[1 of 14]) -> [111: bb14, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb14: {
        switchInt((*_2)[2 of 14]) -> [117: bb15, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb15: {
        switchInt((*_2)[3 of 14]) -> [114: bb16, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb16: {
        switchInt((*_2)[4 of 14]) -> [110: bb17, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb17: {
        switchInt((*_2)[5 of 14]) -> [97: bb18, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb18: {
        switchInt((*_2)[6 of 14]) -> [108: bb19, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb19: {
        switchInt((*_2)[7 of 14]) -> [100: bb20, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb20: {
        switchInt((*_2)[8 of 14]) -> [98: bb21, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb21: {
        switchInt((*_2)[9 of 14]) -> [95: bb22, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb22: {
        switchInt((*_2)[10 of 14]) -> [116: bb23, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb23: {
        switchInt((*_2)[11 of 14]) -> [121: bb24, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb24: {
        switchInt((*_2)[12 of 14]) -> [112: bb25, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb25: {
        switchInt((*_2)[13 of 14]) -> [101: bb77, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb26: {
        _9 = Len((*_2));                 // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _10 = const 12_usize;            // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _11 = Eq(move _9, move _10);     // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _11) -> [0: bb39, otherwise: bb27]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb27: {
        switchInt((*_2)[0 of 12]) -> [103: bb28, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb28: {
        switchInt((*_2)[1 of 12]) -> [101: bb29, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb29: {
        switchInt((*_2)[2 of 12]) -> [110: bb30, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb30: {
        switchInt((*_2)[3 of 12]) -> [101: bb31, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb31: {
        switchInt((*_2)[4 of 12]) -> [115: bb32, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb32: {
        switchInt((*_2)[5 of 12]) -> [105: bb33, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb33: {
        switchInt((*_2)[6 of 12]) -> [115: bb34, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb34: {
        switchInt((*_2)[7 of 12]) -> [95: bb35, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb35: {
        switchInt((*_2)[8 of 12]) -> [112: bb36, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb36: {
        switchInt((*_2)[9 of 12]) -> [97: bb37, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb37: {
        switchInt((*_2)[10 of 12]) -> [116: bb38, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb38: {
        switchInt((*_2)[11 of 12]) -> [104: bb78, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb39: {
        _6 = Len((*_2));                 // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _7 = const 18_usize;             // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _8 = Eq(move _6, move _7);       // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _8) -> [0: bb58, otherwise: bb40]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb40: {
        switchInt((*_2)[0 of 18]) -> [115: bb41, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb41: {
        switchInt((*_2)[1 of 18]) -> [116: bb42, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb42: {
        switchInt((*_2)[2 of 18]) -> [97: bb43, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb43: {
        switchInt((*_2)[3 of 18]) -> [116: bb44, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb44: {
        switchInt((*_2)[4 of 18]) -> [101: bb45, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb45: {
        switchInt((*_2)[5 of 18]) -> [100: bb46, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb46: {
        switchInt((*_2)[6 of 18]) -> [98: bb47, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb47: {
        switchInt((*_2)[7 of 18]) -> [95: bb48, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb48: {
        switchInt((*_2)[8 of 18]) -> [99: bb49, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb49: {
        switchInt((*_2)[9 of 18]) -> [97: bb50, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb50: {
        switchInt((*_2)[10 of 18]) -> [99: bb51, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb51: {
        switchInt((*_2)[11 of 18]) -> [104: bb52, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb52: {
        switchInt((*_2)[12 of 18]) -> [101: bb53, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb53: {
        switchInt((*_2)[13 of 18]) -> [95: bb54, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb54: {
        switchInt((*_2)[14 of 18]) -> [115: bb55, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb55: {
        switchInt((*_2)[15 of 18]) -> [105: bb56, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb56: {
        switchInt((*_2)[16 of 18]) -> [122: bb57, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb57: {
        switchInt((*_2)[17 of 18]) -> [101: bb79, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb58: {
        _3 = Len((*_2));                 // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _4 = const 17_usize;             // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _5 = Eq(move _3, move _4);       // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _5) -> [0: bb10, otherwise: bb59]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb59: {
        switchInt((*_2)[0 of 17]) -> [101: bb60, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb60: {
        switchInt((*_2)[1 of 17]) -> [116: bb61, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb61: {
        switchInt((*_2)[2 of 17]) -> [104: bb62, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb62: {
        switchInt((*_2)[3 of 17]) -> [95: bb63, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb63: {
        switchInt((*_2)[4 of 17]) -> [99: bb64, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb64: {
        switchInt((*_2)[5 of 17]) -> [111: bb65, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb65: {
        switchInt((*_2)[6 of 17]) -> [109: bb66, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb66: {
        switchInt((*_2)[7 of 17]) -> [112: bb67, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb67: {
        switchInt((*_2)[8 of 17]) -> [97: bb68, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb68: {
        switchInt((*_2)[9 of 17]) -> [116: bb69, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb69: {
        switchInt((*_2)[10 of 17]) -> [105: bb70, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb70: {
        switchInt((*_2)[11 of 17]) -> [98: bb71, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb71: {
        switchInt((*_2)[12 of 17]) -> [105: bb72, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb72: {
        switchInt((*_2)[13 of 17]) -> [108: bb73, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb73: {
        switchInt((*_2)[14 of 17]) -> [105: bb74, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb74: {
        switchInt((*_2)[15 of 17]) -> [116: bb75, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb75: {
        switchInt((*_2)[16 of 17]) -> [121: bb80, otherwise: bb10]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb76: {
        _18 = const __Field::__field0;   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x00)) }
        _0 = Result::<__Field, __E>::Ok(move _18); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb81;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb77: {
        _19 = const __Field::__field1;   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x01)) }
        _0 = Result::<__Field, __E>::Ok(move _19); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb81;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb78: {
        _20 = const __Field::__field2;   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x02)) }
        _0 = Result::<__Field, __E>::Ok(move _20); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb81;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb79: {
        _21 = const __Field::__field3;   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x03)) }
        _0 = Result::<__Field, __E>::Ok(move _21); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb81;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb80: {
        _22 = const __Field::__field4;   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x04)) }
        _0 = Result::<__Field, __E>::Ok(move _22); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb81;                    // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb81: {
        return;                          // scope 0 at cita-executor/src/main.rs:116:39: 116:39
    }
}

fn _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize(_1: __D) -> Result<__Field, <__D as _serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field, <__D as _IMPL_DESERIALIZE_FOR_Options::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _0 = <__D as _serde::Deserializer<'_>>::deserialize_identifier::<__FieldVisitor>(move _1, const __FieldVisitor) -> bb1; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: fn(__D, __FieldVisitor) -> Result<<__FieldVisitor as Visitor<'_>>::Value, <__D as _serde::Deserializer<'_>>::Error> {<__D as _serde::Deserializer<'_>>::deserialize_identifier::<__FieldVisitor>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __FieldVisitor, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-executor/src/main.rs:116:39: 116:39
    }
}

fn _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::expecting(_1: &__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    debug __formatter => _2;             // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _3: &str;                        // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _3 = const "struct Options";     // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-executor/src/main.rs:116:39: 116:39
    }
}

fn _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::visit_seq(_1: __Visitor<'_>, _2: __A) -> Result<Options, <__A as SeqAccess<'_>>::Error> {
    debug self => const __Visitor::<'_> {{ marker: PhantomData::<Options>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    debug __seq => _2;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _0: std::result::Result<Options, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error>; // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _3: std::result::Result<std::option::Option<u8>, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _4: &mut __A;                // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _5: isize;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _6: std::option::Option<u8>;     // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _7: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _8: isize;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _9: u8;                          // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _10: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _11: &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _13: std::result::Result<std::option::Option<std::string::String>, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _14: &mut __A;               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _15: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _18: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _20: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _21: &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _23: std::result::Result<std::option::Option<std::string::String>, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _24: &mut __A;               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _25: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _28: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _30: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _31: &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _32: std::result::Result<std::option::Option<usize>, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _33: &mut __A;               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _34: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _37: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _39: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _40: &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _41: std::result::Result<std::option::Option<bool>, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _42: &mut __A;               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _43: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _46: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _48: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _49: &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _50: Options;                // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _51: std::string::String;    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _52: std::string::String;    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _53: &&str;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    scope 1 {
        debug __field0 => _9;            // in scope 1 at cita-executor/src/main.rs:116:28: 116:39
        let _12: std::string::String;    // in scope 1 at cita-executor/src/main.rs:116:28: 116:39
        let _16: std::option::Option<std::string::String>; // in scope 1 at cita-executor/src/main.rs:116:28: 116:39
        let _17: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error; // in scope 1 at cita-executor/src/main.rs:116:28: 116:39
        let _19: std::string::String;    // in scope 1 at cita-executor/src/main.rs:116:28: 116:39
        let mut _54: &&str;              // in scope 1 at cita-executor/src/main.rs:116:28: 116:39
        scope 5 {
            debug __field1 => _12;       // in scope 5 at cita-executor/src/main.rs:116:28: 116:39
            let _22: std::string::String; // in scope 5 at cita-executor/src/main.rs:116:28: 116:39
            let _26: std::option::Option<std::string::String>; // in scope 5 at cita-executor/src/main.rs:116:28: 116:39
            let _27: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error; // in scope 5 at cita-executor/src/main.rs:116:28: 116:39
            let _29: std::string::String; // in scope 5 at cita-executor/src/main.rs:116:28: 116:39
            let mut _55: &&str;          // in scope 5 at cita-executor/src/main.rs:116:28: 116:39
            scope 9 {
                debug __field2 => _22;   // in scope 9 at cita-executor/src/main.rs:116:28: 116:39
                let _35: std::option::Option<usize>; // in scope 9 at cita-executor/src/main.rs:116:28: 116:39
                let _36: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error; // in scope 9 at cita-executor/src/main.rs:116:28: 116:39
                let _38: usize;          // in scope 9 at cita-executor/src/main.rs:116:28: 116:39
                let mut _56: &&str;      // in scope 9 at cita-executor/src/main.rs:116:28: 116:39
                scope 13 {
                    debug __field3 => _38; // in scope 13 at cita-executor/src/main.rs:116:28: 116:39
                    let _44: std::option::Option<bool>; // in scope 13 at cita-executor/src/main.rs:116:28: 116:39
                    let _45: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error; // in scope 13 at cita-executor/src/main.rs:116:28: 116:39
                    let _47: bool;       // in scope 13 at cita-executor/src/main.rs:116:28: 116:39
                    let mut _57: &&str;  // in scope 13 at cita-executor/src/main.rs:116:28: 116:39
                    scope 17 {
                        debug __field4 => _47; // in scope 17 at cita-executor/src/main.rs:116:28: 116:39
                    }
                    scope 18 {
                        debug __val => _44; // in scope 18 at cita-executor/src/main.rs:116:28: 116:39
                    }
                    scope 19 {
                        debug __err => _45; // in scope 19 at cita-executor/src/main.rs:116:28: 116:39
                    }
                    scope 20 {
                        debug __value => _47; // in scope 20 at cita-executor/src/main.rs:116:28: 116:39
                    }
                }
                scope 14 {
                    debug __val => _35;  // in scope 14 at cita-executor/src/main.rs:116:28: 116:39
                }
                scope 15 {
                    debug __err => _36;  // in scope 15 at cita-executor/src/main.rs:116:28: 116:39
                }
                scope 16 {
                    debug __value => _38; // in scope 16 at cita-executor/src/main.rs:116:28: 116:39
                }
            }
            scope 10 {
                debug __val => _26;      // in scope 10 at cita-executor/src/main.rs:116:28: 116:39
            }
            scope 11 {
                debug __err => _27;      // in scope 11 at cita-executor/src/main.rs:116:28: 116:39
            }
            scope 12 {
                debug __value => _29;    // in scope 12 at cita-executor/src/main.rs:116:28: 116:39
            }
        }
        scope 6 {
            debug __val => _16;          // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
        }
        scope 7 {
            debug __err => _17;          // in scope 7 at cita-executor/src/main.rs:116:28: 116:39
        }
        scope 8 {
            debug __value => _19;        // in scope 8 at cita-executor/src/main.rs:116:28: 116:39
        }
    }
    scope 2 {
        debug __val => _6;               // in scope 2 at cita-executor/src/main.rs:116:28: 116:39
    }
    scope 3 {
        debug __err => _7;               // in scope 3 at cita-executor/src/main.rs:116:28: 116:39
    }
    scope 4 {
        debug __value => _9;             // in scope 4 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb0: {
        _4 = &mut _2;                    // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _3 = <__A as SeqAccess<'_>>::next_element::<u8>(_4) -> [return: bb1, unwind: bb47]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:118:5: 118:14
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<u8>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as SeqAccess<'_>>::Error>::Err(move _7); // scope 3 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb43;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<u8>); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _8 = discriminant(_6);           // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb5: {
        _53 = const _;                   // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &&str, val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[0])) }
        _11 = _53 as &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _10 = <<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb8, unwind: bb47]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb7: {
        _9 = ((_6 as Some).0: u8);       // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _14 = &mut _2;                   // scope 1 at cita-executor/src/main.rs:116:28: 116:39
        _13 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_14) -> [return: bb9, unwind: bb47]; // scope 1 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:119:5: 119:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::string::String>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<std::string::String>}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Result::<Options, <__A as SeqAccess<'_>>::Error>::Err(move _10); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb43;                    // scope 0 at no-location
    }

    bb9: {
        _15 = discriminant(_13);         // scope 1 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _15) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb10: {
        _17 = move ((_13 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error); // scope 1 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as SeqAccess<'_>>::Error>::Err(move _17); // scope 7 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb43;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb12: {
        _16 = move ((_13 as Ok).0: std::option::Option<std::string::String>); // scope 1 at cita-executor/src/main.rs:116:28: 116:39
        _18 = discriminant(_16);         // scope 1 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _18) -> [0: bb13, 1: bb15, otherwise: bb14]; // scope 1 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb13: {
        _54 = const _;                   // scope 1 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &&str, val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[1])) }
        _21 = _54 as &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected (Pointer(Unsize)); // scope 1 at cita-executor/src/main.rs:116:28: 116:39
        _20 = <<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb16, unwind: bb47]; // scope 1 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 1 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb15: {
        _19 = move ((_16 as Some).0: std::string::String); // scope 1 at cita-executor/src/main.rs:116:28: 116:39
        _12 = move _19;                  // scope 8 at cita-executor/src/main.rs:116:28: 116:39
        _24 = &mut _2;                   // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        _23 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_24) -> [return: bb17, unwind: bb46]; // scope 5 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:120:5: 120:17
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::string::String>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<std::string::String>}, val: Value(<ZST>) }
    }

    bb16: {
        _0 = Result::<Options, <__A as SeqAccess<'_>>::Error>::Err(move _20); // scope 1 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb43;                    // scope 1 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb17: {
        _25 = discriminant(_23);         // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _25) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 5 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb18: {
        _27 = move ((_23 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error); // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as SeqAccess<'_>>::Error>::Err(move _27); // scope 11 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb42;                    // scope 5 at no-location
    }

    bb19: {
        unreachable;                     // scope 5 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb20: {
        _26 = move ((_23 as Ok).0: std::option::Option<std::string::String>); // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        _28 = discriminant(_26);         // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _28) -> [0: bb21, 1: bb23, otherwise: bb22]; // scope 5 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb21: {
        _55 = const _;                   // scope 5 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &&str, val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[2])) }
        _31 = _55 as &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected (Pointer(Unsize)); // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        _30 = <<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb24, unwind: bb46]; // scope 5 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 5 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb23: {
        _29 = move ((_26 as Some).0: std::string::String); // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        _22 = move _29;                  // scope 12 at cita-executor/src/main.rs:116:28: 116:39
        _33 = &mut _2;                   // scope 9 at cita-executor/src/main.rs:116:28: 116:39
        _32 = <__A as SeqAccess<'_>>::next_element::<usize>(_33) -> [return: bb25, unwind: bb45]; // scope 9 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:121:5: 121:23
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<usize>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<usize>}, val: Value(<ZST>) }
    }

    bb24: {
        _0 = Result::<Options, <__A as SeqAccess<'_>>::Error>::Err(move _30); // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb42;                    // scope 5 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb25: {
        _34 = discriminant(_32);         // scope 9 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _34) -> [0: bb28, 1: bb26, otherwise: bb27]; // scope 9 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb26: {
        _36 = move ((_32 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error); // scope 9 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as SeqAccess<'_>>::Error>::Err(move _36); // scope 15 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb41;                    // scope 9 at no-location
    }

    bb27: {
        unreachable;                     // scope 9 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb28: {
        _35 = ((_32 as Ok).0: std::option::Option<usize>); // scope 9 at cita-executor/src/main.rs:116:28: 116:39
        _37 = discriminant(_35);         // scope 9 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _37) -> [0: bb29, 1: bb31, otherwise: bb30]; // scope 9 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb29: {
        _56 = const _;                   // scope 9 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &&str, val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[3])) }
        _40 = _56 as &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected (Pointer(Unsize)); // scope 9 at cita-executor/src/main.rs:116:28: 116:39
        _39 = <<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb32, unwind: bb45]; // scope 9 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb30: {
        unreachable;                     // scope 9 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb31: {
        _38 = ((_35 as Some).0: usize);  // scope 9 at cita-executor/src/main.rs:116:28: 116:39
        _42 = &mut _2;                   // scope 13 at cita-executor/src/main.rs:116:28: 116:39
        _41 = <__A as SeqAccess<'_>>::next_element::<bool>(_42) -> [return: bb33, unwind: bb45]; // scope 13 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:122:5: 122:22
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb32: {
        _0 = Result::<Options, <__A as SeqAccess<'_>>::Error>::Err(move _39); // scope 9 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb41;                    // scope 9 at no-location
    }

    bb33: {
        _43 = discriminant(_41);         // scope 13 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _43) -> [0: bb36, 1: bb34, otherwise: bb35]; // scope 13 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb34: {
        _45 = move ((_41 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::SeqAccess<'_>>::Error); // scope 13 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as SeqAccess<'_>>::Error>::Err(move _45); // scope 19 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb41;                    // scope 13 at no-location
    }

    bb35: {
        unreachable;                     // scope 13 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb36: {
        _44 = ((_41 as Ok).0: std::option::Option<bool>); // scope 13 at cita-executor/src/main.rs:116:28: 116:39
        _46 = discriminant(_44);         // scope 13 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _46) -> [0: bb37, 1: bb39, otherwise: bb38]; // scope 13 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb37: {
        _57 = const _;                   // scope 13 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &&str, val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[4])) }
        _49 = _57 as &dyn _IMPL_DESERIALIZE_FOR_Options::_serde::de::Expected (Pointer(Unsize)); // scope 13 at cita-executor/src/main.rs:116:28: 116:39
        _48 = <<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb40, unwind: bb45]; // scope 13 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb38: {
        unreachable;                     // scope 13 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb39: {
        _47 = ((_44 as Some).0: bool);   // scope 13 at cita-executor/src/main.rs:116:28: 116:39
        _51 = move _12;                  // scope 17 at cita-executor/src/main.rs:116:28: 116:39
        _52 = move _22;                  // scope 17 at cita-executor/src/main.rs:116:28: 116:39
        _50 = Options { prooftype: _9, journaldb_type: move _51, genesis_path: move _52, statedb_cache_size: _38, eth_compatibility: _47 }; // scope 17 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as SeqAccess<'_>>::Error>::Ok(move _50); // scope 17 at cita-executor/src/main.rs:116:28: 116:39
        drop(_2) -> bb44;                // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb40: {
        _0 = Result::<Options, <__A as SeqAccess<'_>>::Error>::Err(move _48); // scope 13 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb41;                    // scope 13 at no-location
    }

    bb41: {
        drop(_22) -> [return: bb42, unwind: bb46]; // scope 5 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb42: {
        drop(_12) -> [return: bb43, unwind: bb47]; // scope 1 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb43: {
        drop(_2) -> bb44;                // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb44: {
        return;                          // scope 0 at cita-executor/src/main.rs:116:39: 116:39
    }

    bb45 (cleanup): {
        drop(_22) -> bb46;               // scope 5 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb46 (cleanup): {
        drop(_12) -> bb47;               // scope 1 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb47 (cleanup): {
        drop(_2) -> bb48;                // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb48 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _1: &str;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _1 = const "struct Options with 5 elements"; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        return;                          // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _1: &str;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _1 = const "struct Options with 5 elements"; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        return;                          // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _1: &str;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _1 = const "struct Options with 5 elements"; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        return;                          // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }
}

promoted[3] in _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _1: &str;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _1 = const "struct Options with 5 elements"; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        return;                          // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }
}

promoted[4] in _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _1: &str;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _1 = const "struct Options with 5 elements"; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        return;                          // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }
}

fn _IMPL_DESERIALIZE_FOR_Options::<impl at cita-executor/src/main.rs:116:28: 116:39>::deserialize::<impl at cita-executor/src/main.rs:116:28: 116:39>::visit_map(_1: __Visitor<'_>, _2: __A) -> Result<Options, <__A as MapAccess<'_>>::Error> {
    debug self => const __Visitor::<'_> {{ marker: PhantomData::<Options>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    debug __map => _2;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _0: std::result::Result<Options, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _3: std::option::Option<u8>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _8: std::result::Result<std::option::Option<_IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field>, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _9: &mut __A;                // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _10: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _13: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _15: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _16: bool;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _17: &std::option::Option<u8>;   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _18: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _19: std::option::Option<u8>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _20: std::result::Result<u8, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _21: &mut __A;               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _22: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _25: bool;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _26: &std::option::Option<std::string::String>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _27: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _28: std::option::Option<std::string::String>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _29: std::result::Result<std::string::String, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _30: &mut __A;               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _31: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _34: bool;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _35: &std::option::Option<std::string::String>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _36: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _37: std::option::Option<std::string::String>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _38: std::result::Result<std::string::String, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _39: &mut __A;               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _40: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _43: bool;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _44: &std::option::Option<usize>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _45: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _46: std::option::Option<usize>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _47: std::result::Result<usize, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _48: &mut __A;               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _49: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _52: bool;                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _53: &std::option::Option<bool>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _54: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _55: std::option::Option<bool>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _56: std::result::Result<bool, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _57: &mut __A;               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _58: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _61: std::result::Result<_IMPL_DESERIALIZE_FOR_Options::_serde::de::IgnoredAny, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _62: &mut __A;               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _63: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _66: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _68: std::result::Result<u8, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _69: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _73: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _75: std::result::Result<std::string::String, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _76: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _80: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _82: std::result::Result<std::string::String, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _83: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _87: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _89: std::result::Result<usize, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _90: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _94: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _96: std::result::Result<bool, <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _97: isize;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _100: Options;               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _101: u8;                    // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _102: std::string::String;   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _103: std::string::String;   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _104: usize;                 // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _105: bool;                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _106: bool;                  // in scope 0 at cita-executor/src/main.rs:116:38: 116:39
    let mut _107: bool;                  // in scope 0 at cita-executor/src/main.rs:116:38: 116:39
    let mut _108: isize;                 // in scope 0 at cita-executor/src/main.rs:116:38: 116:39
    let mut _109: isize;                 // in scope 0 at cita-executor/src/main.rs:116:38: 116:39
    let mut _110: isize;                 // in scope 0 at cita-executor/src/main.rs:116:38: 116:39
    let mut _111: isize;                 // in scope 0 at cita-executor/src/main.rs:116:38: 116:39
    scope 1 {
        debug __field0 => _3;            // in scope 1 at cita-executor/src/main.rs:116:28: 116:39
        let mut _4: std::option::Option<std::string::String>; // in scope 1 at cita-executor/src/main.rs:116:28: 116:39
        scope 2 {
            debug __field1 => _4;        // in scope 2 at cita-executor/src/main.rs:116:28: 116:39
            let mut _5: std::option::Option<std::string::String>; // in scope 2 at cita-executor/src/main.rs:116:28: 116:39
            scope 3 {
                debug __field2 => _5;    // in scope 3 at cita-executor/src/main.rs:116:28: 116:39
                let mut _6: std::option::Option<usize>; // in scope 3 at cita-executor/src/main.rs:116:28: 116:39
                scope 4 {
                    debug __field3 => _6; // in scope 4 at cita-executor/src/main.rs:116:28: 116:39
                    let mut _7: std::option::Option<bool>; // in scope 4 at cita-executor/src/main.rs:116:28: 116:39
                    scope 5 {
                        debug __field4 => _7; // in scope 5 at cita-executor/src/main.rs:116:28: 116:39
                        let _65: u8;     // in scope 5 at cita-executor/src/main.rs:116:28: 116:39
                        let _67: u8;     // in scope 5 at cita-executor/src/main.rs:116:28: 116:39
                        let _70: u8;     // in scope 5 at cita-executor/src/main.rs:116:28: 116:39
                        let _71: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 5 at cita-executor/src/main.rs:116:28: 116:39
                        scope 6 {
                            debug __key => _14; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _11: std::option::Option<_IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field>; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _12: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _14: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _23: u8; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _24: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _32: std::string::String; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _33: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _41: std::string::String; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _42: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _50: usize; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _51: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _59: bool; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _60: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            let _64: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 6 at cita-executor/src/main.rs:116:28: 116:39
                            scope 7 {
                                debug __val => _11; // in scope 7 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 8 {
                                debug __err => _12; // in scope 8 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 9 {
                                debug __val => _23; // in scope 9 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 10 {
                                debug __err => _24; // in scope 10 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 11 {
                                debug __val => _32; // in scope 11 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 12 {
                                debug __err => _33; // in scope 12 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 13 {
                                debug __val => _41; // in scope 13 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 14 {
                                debug __err => _42; // in scope 14 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 15 {
                                debug __val => _50; // in scope 15 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 16 {
                                debug __err => _51; // in scope 16 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 17 {
                                debug __val => _59; // in scope 17 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 18 {
                                debug __err => _60; // in scope 18 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 19 {
                            }
                            scope 20 {
                                debug __val => const IgnoredAny; // in scope 20 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 21 {
                                debug __err => _64; // in scope 21 at cita-executor/src/main.rs:116:28: 116:39
                            }
                        }
                        scope 22 {
                            debug __field0 => _65; // in scope 22 at cita-executor/src/main.rs:116:28: 116:39
                            let _72: std::string::String; // in scope 22 at cita-executor/src/main.rs:116:28: 116:39
                            let _74: std::string::String; // in scope 22 at cita-executor/src/main.rs:116:28: 116:39
                            let _77: std::string::String; // in scope 22 at cita-executor/src/main.rs:116:28: 116:39
                            let _78: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 22 at cita-executor/src/main.rs:116:28: 116:39
                            scope 26 {
                                debug __field1 => _72; // in scope 26 at cita-executor/src/main.rs:116:28: 116:39
                                let _79: std::string::String; // in scope 26 at cita-executor/src/main.rs:116:28: 116:39
                                let _81: std::string::String; // in scope 26 at cita-executor/src/main.rs:116:28: 116:39
                                let _84: std::string::String; // in scope 26 at cita-executor/src/main.rs:116:28: 116:39
                                let _85: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 26 at cita-executor/src/main.rs:116:28: 116:39
                                scope 30 {
                                    debug __field2 => _79; // in scope 30 at cita-executor/src/main.rs:116:28: 116:39
                                    let _86: usize; // in scope 30 at cita-executor/src/main.rs:116:28: 116:39
                                    let _88: usize; // in scope 30 at cita-executor/src/main.rs:116:28: 116:39
                                    let _91: usize; // in scope 30 at cita-executor/src/main.rs:116:28: 116:39
                                    let _92: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 30 at cita-executor/src/main.rs:116:28: 116:39
                                    scope 34 {
                                        debug __field3 => _86; // in scope 34 at cita-executor/src/main.rs:116:28: 116:39
                                        let _93: bool; // in scope 34 at cita-executor/src/main.rs:116:28: 116:39
                                        let _95: bool; // in scope 34 at cita-executor/src/main.rs:116:28: 116:39
                                        let _98: bool; // in scope 34 at cita-executor/src/main.rs:116:28: 116:39
                                        let _99: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error; // in scope 34 at cita-executor/src/main.rs:116:28: 116:39
                                        scope 38 {
                                            debug __field4 => _93; // in scope 38 at cita-executor/src/main.rs:116:28: 116:39
                                        }
                                        scope 39 {
                                            debug __field4 => _95; // in scope 39 at cita-executor/src/main.rs:116:28: 116:39
                                        }
                                        scope 40 {
                                            debug __val => _98; // in scope 40 at cita-executor/src/main.rs:116:28: 116:39
                                        }
                                        scope 41 {
                                            debug __err => _99; // in scope 41 at cita-executor/src/main.rs:116:28: 116:39
                                        }
                                    }
                                    scope 35 {
                                        debug __field3 => _88; // in scope 35 at cita-executor/src/main.rs:116:28: 116:39
                                    }
                                    scope 36 {
                                        debug __val => _91; // in scope 36 at cita-executor/src/main.rs:116:28: 116:39
                                    }
                                    scope 37 {
                                        debug __err => _92; // in scope 37 at cita-executor/src/main.rs:116:28: 116:39
                                    }
                                }
                                scope 31 {
                                    debug __field2 => _81; // in scope 31 at cita-executor/src/main.rs:116:28: 116:39
                                }
                                scope 32 {
                                    debug __val => _84; // in scope 32 at cita-executor/src/main.rs:116:28: 116:39
                                }
                                scope 33 {
                                    debug __err => _85; // in scope 33 at cita-executor/src/main.rs:116:28: 116:39
                                }
                            }
                            scope 27 {
                                debug __field1 => _74; // in scope 27 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 28 {
                                debug __val => _77; // in scope 28 at cita-executor/src/main.rs:116:28: 116:39
                            }
                            scope 29 {
                                debug __err => _78; // in scope 29 at cita-executor/src/main.rs:116:28: 116:39
                            }
                        }
                        scope 23 {
                            debug __field0 => _67; // in scope 23 at cita-executor/src/main.rs:116:28: 116:39
                        }
                        scope 24 {
                            debug __val => _70; // in scope 24 at cita-executor/src/main.rs:116:28: 116:39
                        }
                        scope 25 {
                            debug __err => _71; // in scope 25 at cita-executor/src/main.rs:116:28: 116:39
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _106 = const false;              // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _107 = const false;              // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _3 = std::option::Option::<u8>::None; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _107 = const true;               // scope 1 at cita-executor/src/main.rs:116:28: 116:39
        _4 = std::option::Option::<std::string::String>::None; // scope 1 at cita-executor/src/main.rs:116:28: 116:39
        _106 = const true;               // scope 2 at cita-executor/src/main.rs:116:28: 116:39
        _5 = std::option::Option::<std::string::String>::None; // scope 2 at cita-executor/src/main.rs:116:28: 116:39
        _6 = std::option::Option::<usize>::None; // scope 3 at cita-executor/src/main.rs:116:28: 116:39
        _7 = std::option::Option::<bool>::None; // scope 4 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb1;                     // scope 5 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb1: {
        _9 = &mut _2;                    // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _8 = <__A as MapAccess<'_>>::next_key::<__Field>(_9) -> [return: bb2, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<__Field>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_key::<__Field>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = discriminant(_8);          // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _10) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb3: {
        _12 = move ((_8 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _12); // scope 8 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb4: {
        unreachable;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb5: {
        _11 = move ((_8 as Ok).0: std::option::Option<_IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field>); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _13 = discriminant(_11);         // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _13) -> [1: bb7, otherwise: bb6]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb6: {
        _66 = discriminant(_3);          // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _66) -> [0: bb61, 1: bb63, otherwise: bb62]; // scope 5 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb7: {
        _14 = move ((_11 as Some).0: _IMPL_DESERIALIZE_FOR_Options::<impl _IMPL_DESERIALIZE_FOR_Options::_serde::Deserialize<'de> for Options>::deserialize::__Field); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _15 = discriminant(_14);         // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _15) -> [0: bb9, 1: bb18, 2: bb29, 3: bb40, 4: bb49, otherwise: bb8]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb8: {
        _62 = &mut _2;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _61 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_62) -> [return: bb58, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(26)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<IgnoredAny, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<IgnoredAny>}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = &_3;                       // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _16 = std::option::Option::<u8>::is_some(_17) -> [return: bb10, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<u8>) -> bool {std::option::Option::<u8>::is_some}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _16) -> [0: bb13, otherwise: bb11]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb11: {
        _18 = <<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field(const "prooftype") -> [return: bb12, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _18); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb13: {
        _21 = &mut _2;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _20 = <__A as MapAccess<'_>>::next_value::<u8>(_21) -> [return: bb14, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:118:5: 118:14
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<u8, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<u8>}, val: Value(<ZST>) }
    }

    bb14: {
        _22 = discriminant(_20);         // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _22) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb15: {
        _24 = move ((_20 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _24); // scope 10 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb16: {
        unreachable;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb17: {
        _23 = ((_20 as Ok).0: u8);       // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _19 = std::option::Option::<u8>::Some(_23); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _3 = move _19;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb1;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb18: {
        _26 = &_4;                       // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _25 = std::option::Option::<std::string::String>::is_some(_26) -> [return: bb19, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(<ZST>) }
    }

    bb19: {
        switchInt(move _25) -> [0: bb22, otherwise: bb20]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb20: {
        _27 = <<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field(const "journaldb_type") -> [return: bb21, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _27); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb22: {
        _30 = &mut _2;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _29 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_30) -> [return: bb23, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:119:5: 119:19
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<std::string::String>}, val: Value(<ZST>) }
    }

    bb23: {
        _31 = discriminant(_29);         // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _31) -> [0: bb26, 1: bb24, otherwise: bb25]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb24: {
        _33 = move ((_29 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _33); // scope 12 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb25: {
        unreachable;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb26: {
        _32 = move ((_29 as Ok).0: std::string::String); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _28 = std::option::Option::<std::string::String>::Some(move _32); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        drop(_4) -> [return: bb27, unwind: bb28]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb27: {
        _107 = const true;               // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _4 = move _28;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb1;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb28 (cleanup): {
        _107 = const true;               // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _4 = move _28;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb118;                   // scope 6 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb29: {
        _35 = &_5;                       // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _34 = std::option::Option::<std::string::String>::is_some(_35) -> [return: bb30, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt(move _34) -> [0: bb33, otherwise: bb31]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb31: {
        _36 = <<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field(const "genesis_path") -> [return: bb32, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb32: {
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _36); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb33: {
        _39 = &mut _2;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _38 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_39) -> [return: bb34, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:120:5: 120:17
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<std::string::String>}, val: Value(<ZST>) }
    }

    bb34: {
        _40 = discriminant(_38);         // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _40) -> [0: bb37, 1: bb35, otherwise: bb36]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb35: {
        _42 = move ((_38 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _42); // scope 14 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb36: {
        unreachable;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb37: {
        _41 = move ((_38 as Ok).0: std::string::String); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _37 = std::option::Option::<std::string::String>::Some(move _41); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        drop(_5) -> [return: bb38, unwind: bb39]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb38: {
        _106 = const true;               // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _5 = move _37;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb1;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb39 (cleanup): {
        _106 = const true;               // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _5 = move _37;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb118;                   // scope 6 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb40: {
        _44 = &_6;                       // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _43 = std::option::Option::<usize>::is_some(_44) -> [return: bb41, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<usize>) -> bool {std::option::Option::<usize>::is_some}, val: Value(<ZST>) }
    }

    bb41: {
        switchInt(move _43) -> [0: bb44, otherwise: bb42]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb42: {
        _45 = <<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field(const "statedb_cache_size") -> [return: bb43, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb43: {
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _45); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb44: {
        _48 = &mut _2;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _47 = <__A as MapAccess<'_>>::next_value::<usize>(_48) -> [return: bb45, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:121:5: 121:23
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<usize, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<usize>}, val: Value(<ZST>) }
    }

    bb45: {
        _49 = discriminant(_47);         // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _49) -> [0: bb48, 1: bb46, otherwise: bb47]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb46: {
        _51 = move ((_47 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _51); // scope 16 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb47: {
        unreachable;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb48: {
        _50 = ((_47 as Ok).0: usize);    // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _46 = std::option::Option::<usize>::Some(_50); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _6 = move _46;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb1;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb49: {
        _53 = &_7;                       // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _52 = std::option::Option::<bool>::is_some(_53) -> [return: bb50, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb50: {
        switchInt(move _52) -> [0: bb53, otherwise: bb51]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb51: {
        _54 = <<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field(const "eth_compatibility") -> [return: bb52, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb52: {
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _54); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb53: {
        _57 = &mut _2;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _56 = <__A as MapAccess<'_>>::next_value::<bool>(_57) -> [return: bb54, unwind: bb118]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:122:5: 122:22
                                         // + user_ty: UserType(25)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb54: {
        _58 = discriminant(_56);         // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _58) -> [0: bb57, 1: bb55, otherwise: bb56]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb55: {
        _60 = move ((_56 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _60); // scope 18 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb56: {
        unreachable;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb57: {
        _59 = ((_56 as Ok).0: bool);     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _55 = std::option::Option::<bool>::Some(_59); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _7 = move _55;                   // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb1;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb58: {
        _63 = discriminant(_61);         // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _63) -> [0: bb1, 1: bb59, otherwise: bb60]; // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb59: {
        _64 = move ((_61 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 6 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _64); // scope 21 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 6 at no-location
    }

    bb60: {
        unreachable;                     // scope 6 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb61: {
        _68 = _serde::private::de::missing_field::<'_, u8, <__A as MapAccess<'_>>::Error>(const "prooftype") -> [return: bb64, unwind: bb118]; // scope 5 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:118:5: 118:14
                                         // + literal: Const { ty: fn(&'static str) -> Result<u8, <__A as MapAccess<'_>>::Error> {_serde::private::de::missing_field::<'_, u8, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb62: {
        unreachable;                     // scope 5 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb63: {
        _67 = ((_3 as Some).0: u8);      // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        _65 = _67;                       // scope 23 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb68;                    // scope 5 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb64: {
        _69 = discriminant(_68);         // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _69) -> [0: bb67, 1: bb65, otherwise: bb66]; // scope 5 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb65: {
        _71 = move ((_68 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _71); // scope 25 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 5 at no-location
    }

    bb66: {
        unreachable;                     // scope 5 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb67: {
        _70 = ((_68 as Ok).0: u8);       // scope 5 at cita-executor/src/main.rs:116:28: 116:39
        _65 = _70;                       // scope 24 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb68;                    // scope 5 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb68: {
        _73 = discriminant(_4);          // scope 22 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _73) -> [0: bb69, 1: bb71, otherwise: bb70]; // scope 22 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb69: {
        _75 = _serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "journaldb_type") -> [return: bb72, unwind: bb118]; // scope 22 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:119:5: 119:19
                                         // + literal: Const { ty: fn(&'static str) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb70: {
        unreachable;                     // scope 22 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb71: {
        _107 = const false;              // scope 22 at cita-executor/src/main.rs:116:28: 116:39
        _74 = move ((_4 as Some).0: std::string::String); // scope 22 at cita-executor/src/main.rs:116:28: 116:39
        _72 = move _74;                  // scope 27 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb76;                    // scope 22 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb72: {
        _76 = discriminant(_75);         // scope 22 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _76) -> [0: bb75, 1: bb73, otherwise: bb74]; // scope 22 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb73: {
        _78 = move ((_75 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 22 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _78); // scope 29 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb103;                   // scope 22 at no-location
    }

    bb74: {
        unreachable;                     // scope 22 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb75: {
        _77 = move ((_75 as Ok).0: std::string::String); // scope 22 at cita-executor/src/main.rs:116:28: 116:39
        _72 = move _77;                  // scope 28 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb76;                    // scope 22 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb76: {
        _80 = discriminant(_5);          // scope 26 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _80) -> [0: bb77, 1: bb79, otherwise: bb78]; // scope 26 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb77: {
        _82 = _serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "genesis_path") -> [return: bb80, unwind: bb106]; // scope 26 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:120:5: 120:17
                                         // + literal: Const { ty: fn(&'static str) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb78: {
        unreachable;                     // scope 26 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb79: {
        _106 = const false;              // scope 26 at cita-executor/src/main.rs:116:28: 116:39
        _81 = move ((_5 as Some).0: std::string::String); // scope 26 at cita-executor/src/main.rs:116:28: 116:39
        _79 = move _81;                  // scope 31 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb84;                    // scope 26 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb80: {
        _83 = discriminant(_82);         // scope 26 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _83) -> [0: bb83, 1: bb81, otherwise: bb82]; // scope 26 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb81: {
        _85 = move ((_82 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 26 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _85); // scope 33 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb102;                   // scope 26 at no-location
    }

    bb82: {
        unreachable;                     // scope 26 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb83: {
        _84 = move ((_82 as Ok).0: std::string::String); // scope 26 at cita-executor/src/main.rs:116:28: 116:39
        _79 = move _84;                  // scope 32 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb84;                    // scope 26 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb84: {
        _87 = discriminant(_6);          // scope 30 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _87) -> [0: bb85, 1: bb87, otherwise: bb86]; // scope 30 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb85: {
        _89 = _serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "statedb_cache_size") -> [return: bb88, unwind: bb105]; // scope 30 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:121:5: 121:23
                                         // + literal: Const { ty: fn(&'static str) -> Result<usize, <__A as MapAccess<'_>>::Error> {_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb86: {
        unreachable;                     // scope 30 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb87: {
        _88 = ((_6 as Some).0: usize);   // scope 30 at cita-executor/src/main.rs:116:28: 116:39
        _86 = _88;                       // scope 35 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb92;                    // scope 30 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb88: {
        _90 = discriminant(_89);         // scope 30 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _90) -> [0: bb91, 1: bb89, otherwise: bb90]; // scope 30 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb89: {
        _92 = move ((_89 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 30 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _92); // scope 37 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb101;                   // scope 30 at no-location
    }

    bb90: {
        unreachable;                     // scope 30 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb91: {
        _91 = ((_89 as Ok).0: usize);    // scope 30 at cita-executor/src/main.rs:116:28: 116:39
        _86 = _91;                       // scope 36 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb92;                    // scope 30 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb92: {
        _94 = discriminant(_7);          // scope 34 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _94) -> [0: bb93, 1: bb95, otherwise: bb94]; // scope 34 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb93: {
        _96 = _serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "eth_compatibility") -> [return: bb96, unwind: bb105]; // scope 34 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:122:5: 122:22
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb94: {
        unreachable;                     // scope 34 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb95: {
        _95 = ((_7 as Some).0: bool);    // scope 34 at cita-executor/src/main.rs:116:28: 116:39
        _93 = _95;                       // scope 39 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb100;                   // scope 34 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb96: {
        _97 = discriminant(_96);         // scope 34 at cita-executor/src/main.rs:116:28: 116:39
        switchInt(move _97) -> [0: bb99, 1: bb97, otherwise: bb98]; // scope 34 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb97: {
        _99 = move ((_96 as Err).0: <__A as _IMPL_DESERIALIZE_FOR_Options::_serde::de::MapAccess<'_>>::Error); // scope 34 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Err(move _99); // scope 41 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb101;                   // scope 34 at no-location
    }

    bb98: {
        unreachable;                     // scope 34 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb99: {
        _98 = ((_96 as Ok).0: bool);     // scope 34 at cita-executor/src/main.rs:116:28: 116:39
        _93 = _98;                       // scope 40 at cita-executor/src/main.rs:116:28: 116:39
        goto -> bb100;                   // scope 34 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb100: {
        _101 = _65;                      // scope 38 at cita-executor/src/main.rs:116:28: 116:39
        _102 = move _72;                 // scope 38 at cita-executor/src/main.rs:116:28: 116:39
        _103 = move _79;                 // scope 38 at cita-executor/src/main.rs:116:28: 116:39
        _104 = _86;                      // scope 38 at cita-executor/src/main.rs:116:28: 116:39
        _105 = _93;                      // scope 38 at cita-executor/src/main.rs:116:28: 116:39
        _100 = Options { prooftype: move _101, journaldb_type: move _102, genesis_path: move _103, statedb_cache_size: move _104, eth_compatibility: move _105 }; // scope 38 at cita-executor/src/main.rs:116:28: 116:39
        _0 = Result::<Options, <__A as MapAccess<'_>>::Error>::Ok(move _100); // scope 38 at cita-executor/src/main.rs:116:28: 116:39
        _106 = const false;              // scope 2 at cita-executor/src/main.rs:116:38: 116:39
        _107 = const false;              // scope 1 at cita-executor/src/main.rs:116:38: 116:39
        drop(_2) -> bb104;               // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb101: {
        drop(_79) -> [return: bb102, unwind: bb106]; // scope 26 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb102: {
        drop(_72) -> [return: bb103, unwind: bb118]; // scope 22 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb103: {
        _108 = discriminant(_5);         // scope 2 at cita-executor/src/main.rs:116:38: 116:39
        switchInt(move _108) -> [1: bb111, otherwise: bb110]; // scope 2 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb104: {
        return;                          // scope 0 at cita-executor/src/main.rs:116:39: 116:39
    }

    bb105 (cleanup): {
        drop(_79) -> bb106;              // scope 26 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb106 (cleanup): {
        drop(_72) -> bb118;              // scope 22 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb107 (cleanup): {
        _111 = discriminant(_4);         // scope 1 at cita-executor/src/main.rs:116:38: 116:39
        switchInt(move _111) -> [1: bb119, otherwise: bb108]; // scope 1 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb108 (cleanup): {
        drop(_2) -> bb109;               // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb109 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }

    bb110: {
        _106 = const false;              // scope 2 at cita-executor/src/main.rs:116:38: 116:39
        _109 = discriminant(_4);         // scope 1 at cita-executor/src/main.rs:116:38: 116:39
        switchInt(move _109) -> [1: bb114, otherwise: bb113]; // scope 1 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb111: {
        switchInt(_106) -> [0: bb110, otherwise: bb112]; // scope 2 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb112: {
        drop(((_5 as Some).0: std::string::String)) -> [return: bb110, unwind: bb107]; // scope 2 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb113: {
        _107 = const false;              // scope 1 at cita-executor/src/main.rs:116:38: 116:39
        drop(_2) -> bb104;               // scope 0 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb114: {
        switchInt(_107) -> [0: bb113, otherwise: bb115]; // scope 1 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb115: {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb113, unwind: bb108]; // scope 1 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb116 (cleanup): {
        switchInt(_106) -> [0: bb107, otherwise: bb117]; // scope 2 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb117 (cleanup): {
        drop(((_5 as Some).0: std::string::String)) -> bb107; // scope 2 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb118 (cleanup): {
        _110 = discriminant(_5);         // scope 2 at cita-executor/src/main.rs:116:38: 116:39
        switchInt(move _110) -> [1: bb116, otherwise: bb107]; // scope 2 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb119 (cleanup): {
        switchInt(_107) -> [0: bb108, otherwise: bb120]; // scope 1 at cita-executor/src/main.rs:116:38: 116:39
    }

    bb120 (cleanup): {
        drop(((_4 as Some).0: std::string::String)) -> bb108; // scope 1 at cita-executor/src/main.rs:116:38: 116:39
    }
}

const FIELDS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _1: &[&str; 5];              // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _2: &[&str; 5];                  // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let _3: [&str; 5];                   // in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _4: &[&str; 5];              // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        StorageLive(_1);                 // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        StorageLive(_2);                 // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _4 = const _;                    // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &[&str; 5], val: Unevaluated(FIELDS, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _1 = &(*_2);                     // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        StorageDead(_2);                 // scope 0 at cita-executor/src/main.rs:116:38: 116:39
        StorageDead(_1);                 // scope 0 at cita-executor/src/main.rs:116:38: 116:39
        return;                          // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }
}

promoted[0] in FIELDS: &[&str; 5] = {
    let mut _0: &[&str; 5];              // return place in scope 0 at cita-executor/src/main.rs:116:28: 116:39
    let mut _1: [&str; 5];               // in scope 0 at cita-executor/src/main.rs:116:28: 116:39

    bb0: {
        _1 = [const "prooftype", const "journaldb_type", const "genesis_path", const "statedb_cache_size", const "eth_compatibility"]; // scope 0 at cita-executor/src/main.rs:116:28: 116:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:116:28: 116:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/main.rs:116:28: 116:39
        return;                          // scope 0 at cita-executor/src/main.rs:116:28: 116:39
    }
}

fn <impl at cita-executor/src/main.rs:125:1: 125:13>::default() -> Options {
    let mut _0: Options;                 // return place in scope 0 at cita-executor/src/main.rs:126:25: 126:29
    let mut _1: std::string::String;     // in scope 0 at cita-executor/src/main.rs:129:29: 129:52
    let mut _2: std::string::String;     // in scope 0 at cita-executor/src/main.rs:130:27: 130:55
    let mut _3: usize;                   // in scope 0 at cita-executor/src/main.rs:131:33: 131:48

    bb0: {
        _1 = <std::string::String as From<&str>>::from(const "archive") -> bb1; // scope 0 at cita-executor/src/main.rs:129:29: 129:52
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:129:29: 129:41
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<std::string::String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:129:42: 129:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _2 = <std::string::String as From<&str>>::from(const "genesis.json") -> [return: bb2, unwind: bb3]; // scope 0 at cita-executor/src/main.rs:130:27: 130:55
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:130:27: 130:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<std::string::String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:130:40: 130:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _3 = const 5242880_usize;        // scope 0 at cita-executor/src/main.rs:131:33: 131:48
        _0 = Options { prooftype: const 2_u8, journaldb_type: move _1, genesis_path: move _2, statedb_cache_size: move _3, eth_compatibility: const false }; // scope 0 at cita-executor/src/main.rs:127:9: 133:10
        return;                          // scope 0 at cita-executor/src/main.rs:134:6: 134:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at cita-executor/src/main.rs:133:9: 133:10
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/main.rs:126:5: 134:6
    }
}

fn <impl at cita-executor/src/main.rs:125:1: 125:13>::load(_1: &str) -> Options {
    debug path => _1;                    // in scope 0 at cita-executor/src/main.rs:136:17: 136:21
    let mut _0: Options;                 // return place in scope 0 at cita-executor/src/main.rs:136:32: 136:36
    let mut _2: std::string::String;     // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:13: 52:23
    let _3: usize;                       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 55:83
    let mut _4: std::result::Result<usize, std::io::Error>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 54:61
    let mut _5: std::result::Result<std::fs::File, std::io::Error>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 53:26
    let mut _6: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
    let mut _7: &mut std::string::String; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
    let mut _8: std::result::Result<Options, toml::de::Error>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 56:51
    let mut _9: &str;                    // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
    let _10: &str;                       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
    let _11: &std::string::String;       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
    scope 1 {
        debug buffer => _2;              // in scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:13: 52:23
    }

    bb0: {
        _2 = std::string::String::new() -> bb1; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:26: 52:39
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:26: 52:37
                                         // + literal: Const { ty: fn() -> std::string::String {std::string::String::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = std::fs::File::open::<&str>(_1) -> [return: bb2, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 53:26
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 53:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Result<std::fs::File, std::io::Error> {std::fs::File::open::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut _2;                    // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
        _6 = [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30] { buffer: move _7 }; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
                                         // closure
                                         // + def_id: DefId(0:279 ~ cita_executor[bbb2]::{impl#0}::load::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::fs::File,)) -> std::result::Result<usize, std::io::Error>,
                                         //     (&mut std::string::String,),
                                         // ]
        _4 = Result::<std::fs::File, std::io::Error>::and_then::<usize, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]>(move _5, move _6) -> [return: bb3, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 54:61
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:14: 54:22
                                         // + literal: Const { ty: fn(Result<std::fs::File, std::io::Error>, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]) -> Result<usize, std::io::Error> {Result::<std::fs::File, std::io::Error>::and_then::<usize, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]>}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = Result::<usize, std::io::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]>(move _4, const ZeroSized: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]) -> [return: bb4, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 55:83
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:14: 55:28
                                         // + literal: Const { ty: fn(Result<usize, std::io::Error>, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]) -> usize {Result::<usize, std::io::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34], val: Value(<ZST>) }
    }

    bb4: {
        _11 = &_2;                       // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
        _10 = <std::string::String as Deref>::deref(_11) -> [return: bb5, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = _10;                        // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
        _8 = parse_config_from_buffer::<'_, Options>(move _9) -> [return: bb6, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 56:51
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 56:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> Result<Options, toml::de::Error> {parse_config_from_buffer::<'_, Options>}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = Result::<Options, toml::de::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]>(move _8, const ZeroSized: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]) -> [return: bb7, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 57:83
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:14: 57:28
                                         // + literal: Const { ty: fn(Result<Options, toml::de::Error>, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]) -> Options {Result::<Options, toml::de::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34], val: Value(<ZST>) }
    }

    bb7: {
        drop(_2) -> bb8;                 // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:58:5: 58:6
    }

    bb8: {
        return;                          // scope 0 at cita-executor/src/main.rs:138:6: 138:6
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:58:5: 58:6
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/main.rs:136:5: 138:6
    }
}

fn <impl at cita-executor/src/main.rs:125:1: 125:13>::load::{closure#0}(_1: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30], _2: std::fs::File) -> Result<usize, std::io::Error> {
    debug f => _2;                       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:24: 54:29
    debug buffer => (*(_1.0: &mut std::string::String)); // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:17: 52:23
    let mut _0: std::result::Result<usize, std::io::Error>; // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:31
    let mut _3: &mut std::fs::File;      // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:60
    let mut _4: &mut std::string::String; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60

    bb0: {
        _3 = &mut _2;                    // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:60
        _4 = deref_copy (_1.0: &mut std::string::String); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:48: 54:59
        _0 = <std::fs::File as std::io::Read>::read_to_string(move _3, _4) -> [return: bb1, unwind: bb3]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:60
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:33: 54:47
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fs::File, &'b mut std::string::String) -> Result<usize, std::io::Error> {<std::fs::File as std::io::Read>::read_to_string}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:59: 54:60
    }

    bb2: {
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:60: 54:60
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:59: 54:60
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
    }
}

fn <impl at cita-executor/src/main.rs:125:1: 125:13>::load::{closure#1}(_1: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34], _2: std::io::Error) -> usize {
    debug err => _2;                     // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:30: 55:33
    let mut _0: usize;                   // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:35: 55:35
    let mut _3: !;                       // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _5: &[&str];                 // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _8: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _9: core::fmt::ArgumentV1<'_>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
    let _10: &std::io::Error;            // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
    let mut _11: &[&str; 2];             // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76

    bb0: {
        _11 = const _;                   // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Options::load::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _5 = _11 as &[&str] (Pointer(Unsize)); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
        _10 = &_2;                       // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
        _9 = core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>(_10) -> [return: bb1, unwind: bb3]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b std::io::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = [move _9];                  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _7 = &_8;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _6 = _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb3]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = panic_fmt(move _4) -> bb3;  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:30:5: 30:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:82
    }
}

promoted[0] in <impl at cita-executor/src/main.rs:125:1: 125:13>::load::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
    let mut _1: [&str; 2];               // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76

    bb0: {
        _1 = [const "Error while loading config: [", const "]"]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
    }
}

fn <impl at cita-executor/src/main.rs:125:1: 125:13>::load::{closure#2}(_1: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34], _2: toml::de::Error) -> Options {
    debug err => _2;                     // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:30: 57:33
    let mut _0: Options;                 // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:35: 57:35
    let mut _3: !;                       // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _5: &[&str];                 // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _8: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _9: core::fmt::ArgumentV1<'_>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
    let _10: &toml::de::Error;           // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
    let mut _11: &[&str; 2];             // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76

    bb0: {
        _11 = const _;                   // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Options::load::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _5 = _11 as &[&str] (Pointer(Unsize)); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
        _10 = &_2;                       // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
        _9 = core::fmt::ArgumentV1::<'_>::new_display::<toml::de::Error>(_10) -> [return: bb1, unwind: bb3]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b toml::de::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<toml::de::Error>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = [move _9];                  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _7 = &_8;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _6 = _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb3]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = panic_fmt(move _4) -> bb3;  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:30:5: 30:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:82
    }
}

promoted[0] in <impl at cita-executor/src/main.rs:125:1: 125:13>::load::{closure#2}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
    let mut _1: [&str; 2];               // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76

    bb0: {
        _1 = [const "Error while parsing config: [", const "]"]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/main.rs:141:11: 141:11
    let _1: clap::ArgMatches<'_>;        // in scope 0 at cita-executor/src/main.rs:142:9: 142:16
    let mut _2: clap::App<'_, '_>;       // in scope 0 at cita-executor/src/main.rs:142:19: 150:10
    let mut _3: clap::App<'_, '_>;       // in scope 0 at cita-executor/src/main.rs:142:19: 146:56
    let mut _4: clap::App<'_, '_>;       // in scope 0 at cita-executor/src/main.rs:142:19: 145:28
    let mut _5: clap::App<'_, '_>;       // in scope 0 at cita-executor/src/main.rs:142:19: 144:49
    let mut _6: clap::App<'_, '_>;       // in scope 0 at cita-executor/src/main.rs:142:19: 143:43
    let mut _7: clap::App<'_, '_>;       // in scope 0 at cita-executor/src/main.rs:142:19: 142:39
    let mut _8: &str;                    // in scope 0 at cita-executor/src/main.rs:143:18: 143:42
    let mut _9: &str;                    // in scope 0 at cita-executor/src/main.rs:144:23: 144:48
    let _10: &str;                       // in scope 0 at cita-executor/src/main.rs:148:13: 149:57
    let mut _12: &clap::ArgMatches<'_>;  // in scope 0 at cita-executor/src/main.rs:153:18: 153:46
    let _13: std::option::Option<std::path::PathBuf>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:9: 21:30
    let mut _14: std::result::Result<std::path::PathBuf, dotenv::Error>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:9: 21:25
    let _15: ();                         // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:23:9: 23:54
    let _16: ();                         // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:26:9: 26:28
    let mut _17: bool;                   // in scope 0 at cita-executor/src/main.rs:154:59: 154:65
    let _18: ();                         // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:13: 30:64
    let _19: ();                         // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:13: 32:62
    let mut _21: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _22: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _23: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _24: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _25: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _26: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _27: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _28: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _29: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _30: &[&str];                // in scope 0 at cita-executor/src/main.rs:154:42: 154:57
    let mut _32: std::option::Option<&str>; // in scope 0 at cita-executor/src/main.rs:156:23: 156:49
    let mut _33: &clap::ArgMatches<'_>;  // in scope 0 at cita-executor/src/main.rs:156:23: 156:49
    let _34: &str;                       // in scope 0 at cita-executor/src/main.rs:156:60: 156:75
    let mut _36: &str;                   // in scope 0 at cita-executor/src/main.rs:157:33: 157:44
    let mut _38: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _39: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _40: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _41: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _42: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _43: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _44: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _45: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _46: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _47: &[&str];                // in scope 0 at cita-executor/src/main.rs:158:11: 158:24
    let mut _48: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _49: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _50: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _51: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/main.rs:158:26: 158:50
    let _52: &&str;                      // in scope 0 at cita-executor/src/main.rs:158:26: 158:50
    let _53: &str;                       // in scope 0 at cita-executor/src/main.rs:158:26: 158:50
    let mut _55: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _56: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _57: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _58: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _59: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _60: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _61: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _62: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _63: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _64: &[&str];                // in scope 0 at cita-executor/src/main.rs:159:11: 159:25
    let mut _65: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _66: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _67: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _68: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-executor/src/main.rs:159:27: 159:34
    let _69: &Options;                   // in scope 0 at cita-executor/src/main.rs:159:27: 159:34
    let mut _72: (crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>, crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-executor/src/main.rs:162:54: 162:74
    let mut _75: (crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>, crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-executor/src/main.rs:163:56: 163:76
    let mut _78: (crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>, crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-executor/src/main.rs:164:44: 164:74
    let mut _81: (crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>, crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-executor/src/main.rs:165:46: 165:76
    let mut _84: (crossbeam_channel::Sender<types::block::OpenBlock>, crossbeam_channel::Receiver<types::block::OpenBlock>); // in scope 0 at cita-executor/src/main.rs:166:46: 166:76
    let mut _87: (crossbeam_channel::Sender<core::libexecutor::block::ClosedBlock>, crossbeam_channel::Receiver<core::libexecutor::block::ClosedBlock>); // in scope 0 at cita-executor/src/main.rs:167:48: 167:78
    let mut _90: (crossbeam_channel::Sender<core::libexecutor::command::Command>, crossbeam_channel::Receiver<core::libexecutor::command::Command>); // in scope 0 at cita-executor/src/main.rs:168:54: 168:83
    let mut _93: (crossbeam_channel::Sender<core::libexecutor::command::CommandResp>, crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // in scope 0 at cita-executor/src/main.rs:169:56: 169:85
    let _94: ();                         // in scope 0 at cita-executor/src/main.rs:170:5: 185:6
    let _95: &str;                       // in scope 0 at cita-executor/src/main.rs:171:9: 171:19
    let mut _96: std::vec::Vec<libproto::router::RoutingKey>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:20:39: 22:6
    let mut _97: std::boxed::Box<[libproto::router::RoutingKey]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _98: usize;                  // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _99: usize;                  // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _100: *mut u8;               // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _101: std::boxed::Box<[libproto::router::RoutingKey; 9]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _102: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _103: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _104: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _105: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _106: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _107: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _108: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _109: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _110: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _111: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _112: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _113: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _114: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _115: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _116: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _117: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _118: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _119: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _120: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _121: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _122: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _123: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _124: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _125: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _126: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _127: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _128: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _129: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/main.rs:183:9: 183:27
    let mut _130: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/main.rs:184:9: 184:30
    let _131: std::thread::JoinHandle<()>; // in scope 0 at cita-executor/src/main.rs:188:5: 195:7
    let mut _132: [closure@cita-executor/src/main.rs:188:19: 188:26]; // in scope 0 at cita-executor/src/main.rs:188:19: 195:6
    let _133: std::thread::JoinHandle<()>; // in scope 0 at cita-executor/src/main.rs:196:5: 203:7
    let mut _134: [closure@cita-executor/src/main.rs:196:19: 196:26]; // in scope 0 at cita-executor/src/main.rs:196:19: 203:6
    let mut _137: &str;                  // in scope 0 at cita-executor/src/main.rs:210:13: 210:34
    let _138: &str;                      // in scope 0 at cita-executor/src/main.rs:210:13: 210:34
    let _139: &std::string::String;      // in scope 0 at cita-executor/src/main.rs:210:13: 210:34
    let mut _140: std::string::String;   // in scope 0 at cita-executor/src/main.rs:211:13: 211:22
    let mut _141: crossbeam_channel::Receiver<types::block::OpenBlock>; // in scope 0 at cita-executor/src/main.rs:212:13: 212:37
    let mut _142: &crossbeam_channel::Receiver<types::block::OpenBlock>; // in scope 0 at cita-executor/src/main.rs:212:13: 212:37
    let mut _143: crossbeam_channel::Sender<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/main.rs:213:13: 213:36
    let mut _144: &crossbeam_channel::Sender<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/main.rs:213:13: 213:36
    let mut _145: crossbeam_channel::Receiver<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/main.rs:214:13: 214:41
    let mut _146: &crossbeam_channel::Receiver<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/main.rs:214:13: 214:41
    let mut _147: crossbeam_channel::Sender<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/main.rs:215:13: 215:40
    let mut _148: &crossbeam_channel::Sender<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/main.rs:215:13: 215:40
    let mut _149: bool;                  // in scope 0 at cita-executor/src/main.rs:216:13: 216:38
    let mut _151: &core::libexecutor::executor::Executor; // in scope 0 at cita-executor/src/main.rs:218:30: 218:59
    let mut _153: &core::libexecutor::executor::Executor; // in scope 0 at cita-executor/src/main.rs:219:28: 219:55
    let mut _155: [closure@cita-executor/src/main.rs:220:36: 220:43]; // in scope 0 at cita-executor/src/main.rs:220:36: 222:10
    let mut _157: u64;                   // in scope 0 at cita-executor/src/main.rs:226:13: 226:27
    let mut _158: cita_types::H256;      // in scope 0 at cita-executor/src/main.rs:227:13: 227:25
    let mut _159: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/main.rs:228:13: 228:36
    let mut _160: &crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/main.rs:228:13: 228:36
    let mut _161: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/main.rs:229:13: 229:35
    let mut _162: &crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/main.rs:229:13: 229:35
    let mut _163: crossbeam_channel::Sender<types::block::OpenBlock>; // in scope 0 at cita-executor/src/main.rs:230:13: 230:35
    let mut _164: &crossbeam_channel::Sender<types::block::OpenBlock>; // in scope 0 at cita-executor/src/main.rs:230:13: 230:35
    let mut _165: crossbeam_channel::Receiver<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/main.rs:231:13: 231:38
    let mut _166: &crossbeam_channel::Receiver<core::libexecutor::block::ClosedBlock>; // in scope 0 at cita-executor/src/main.rs:231:13: 231:38
    let mut _167: crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/main.rs:232:13: 232:39
    let mut _168: &crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 0 at cita-executor/src/main.rs:232:13: 232:39
    let mut _169: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/main.rs:233:13: 233:42
    let mut _170: &crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 0 at cita-executor/src/main.rs:233:13: 233:42
    let _171: ();                        // in scope 0 at cita-executor/src/main.rs:235:9: 235:26
    let mut _172: &mut postman::Postman; // in scope 0 at cita-executor/src/main.rs:235:9: 235:26
    let _173: ();                        // in scope 0 at cita-executor/src/main.rs:237:9: 246:10
    let mut _174: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at cita-executor/src/main.rs:237:9: 237:22
    let mut _175: std::thread::JoinHandle<()>; // in scope 0 at cita-executor/src/main.rs:237:9: 237:15
    let _176: &str;                      // in scope 0 at cita-executor/src/main.rs:238:13: 245:10
    let mut _188: bool;                  // in scope 0 at cita-executor/src/main.rs:234:9: 234:10
    let mut _189: bool;                  // in scope 0 at cita-executor/src/main.rs:234:9: 234:10
    let mut _190: bool;                  // in scope 0 at cita-executor/src/main.rs:234:9: 234:10
    let mut _191: bool;                  // in scope 0 at cita-executor/src/main.rs:234:9: 234:10
    let mut _192: bool;                  // in scope 0 at cita-executor/src/main.rs:234:9: 234:10
    let mut _193: bool;                  // in scope 0 at cita-executor/src/main.rs:247:5: 247:6
    let mut _194: bool;                  // in scope 0 at cita-executor/src/main.rs:247:5: 247:6
    let mut _195: bool;                  // in scope 0 at cita-executor/src/main.rs:217:9: 217:10
    let mut _196: bool;                  // in scope 0 at cita-executor/src/main.rs:217:9: 217:10
    let mut _197: bool;                  // in scope 0 at cita-executor/src/main.rs:217:9: 217:10
    let mut _198: bool;                  // in scope 0 at cita-executor/src/main.rs:217:9: 217:10
    let mut _199: bool;                  // in scope 0 at cita-executor/src/main.rs:247:5: 247:6
    let mut _200: bool;                  // in scope 0 at cita-executor/src/main.rs:248:1: 248:2
    let mut _201: bool;                  // in scope 0 at cita-executor/src/main.rs:248:1: 248:2
    let mut _202: bool;                  // in scope 0 at cita-executor/src/main.rs:248:1: 248:2
    let mut _203: bool;                  // in scope 0 at cita-executor/src/main.rs:248:1: 248:2
    let mut _204: bool;                  // in scope 0 at cita-executor/src/main.rs:248:1: 248:2
    let mut _205: bool;                  // in scope 0 at cita-executor/src/main.rs:248:1: 248:2
    let mut _206: bool;                  // in scope 0 at cita-executor/src/main.rs:144:48: 144:49
    let mut _207: bool;                  // in scope 0 at cita-executor/src/main.rs:143:42: 143:43
    let mut _208: *const [libproto::router::RoutingKey; 9]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    scope 1 {
        debug matches => _1;             // in scope 1 at cita-executor/src/main.rs:142:9: 142:16
        let _11: bool;                   // in scope 1 at cita-executor/src/main.rs:153:9: 153:15
        scope 2 {
            debug stdout => _11;         // in scope 2 at cita-executor/src/main.rs:153:9: 153:15
            let _20: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let _31: &str;               // in scope 2 at cita-executor/src/main.rs:156:9: 156:20
            let mut _186: &logger::LogFavour<'_>; // in scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
            let mut _187: &logger::LogFavour<'_>; // in scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
            scope 3 {
                debug lvl => _20;        // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _183: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _184: &[&str; 1]; // in scope 3 at cita-executor/src/main.rs:154:42: 154:57
                let mut _185: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 4 {
                debug config_path => _31; // in scope 4 at cita-executor/src/main.rs:156:9: 156:20
                let _35: Options;        // in scope 4 at cita-executor/src/main.rs:157:9: 157:16
                scope 5 {
                    debug options => _35; // in scope 5 at cita-executor/src/main.rs:157:9: 157:16
                    let _37: log::Level; // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let _54: log::Level; // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let _70: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 5 at cita-executor/src/main.rs:162:10: 162:28
                    let _71: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 5 at cita-executor/src/main.rs:162:30: 162:50
                    scope 6 {
                        debug lvl => _37; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        let mut _180: &(&str, &str, &str, u32); // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                        let mut _181: &[&str; 1]; // in scope 6 at cita-executor/src/main.rs:158:11: 158:24
                        let mut _182: &log::LevelFilter; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                    }
                    scope 7 {
                        debug lvl => _54; // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        let mut _177: &(&str, &str, &str, u32); // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                        let mut _178: &[&str; 1]; // in scope 7 at cita-executor/src/main.rs:159:11: 159:25
                        let mut _179: &log::LevelFilter; // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                    }
                    scope 8 {
                        debug forward_req_sender => _70; // in scope 8 at cita-executor/src/main.rs:162:10: 162:28
                        debug forward_req_receiver => _71; // in scope 8 at cita-executor/src/main.rs:162:30: 162:50
                        let _73: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 8 at cita-executor/src/main.rs:163:10: 163:29
                        let _74: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 8 at cita-executor/src/main.rs:163:31: 163:52
                        scope 9 {
                            debug forward_resp_sender => _73; // in scope 9 at cita-executor/src/main.rs:163:10: 163:29
                            debug forward_resp_receiver => _74; // in scope 9 at cita-executor/src/main.rs:163:31: 163:52
                            let _76: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 9 at cita-executor/src/main.rs:164:10: 164:23
                            let _77: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 9 at cita-executor/src/main.rs:164:25: 164:40
                            scope 10 {
                                debug mq_req_sender => _76; // in scope 10 at cita-executor/src/main.rs:164:10: 164:23
                                debug mq_req_receiver => _77; // in scope 10 at cita-executor/src/main.rs:164:25: 164:40
                                let _79: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 10 at cita-executor/src/main.rs:165:10: 165:24
                                let _80: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 10 at cita-executor/src/main.rs:165:26: 165:42
                                scope 11 {
                                    debug mq_resp_sender => _79; // in scope 11 at cita-executor/src/main.rs:165:10: 165:24
                                    debug mq_resp_receiver => _80; // in scope 11 at cita-executor/src/main.rs:165:26: 165:42
                                    let _82: crossbeam_channel::Sender<types::block::OpenBlock>; // in scope 11 at cita-executor/src/main.rs:166:10: 166:24
                                    let _83: crossbeam_channel::Receiver<types::block::OpenBlock>; // in scope 11 at cita-executor/src/main.rs:166:26: 166:42
                                    scope 12 {
                                        debug fsm_req_sender => _82; // in scope 12 at cita-executor/src/main.rs:166:10: 166:24
                                        debug fsm_req_receiver => _83; // in scope 12 at cita-executor/src/main.rs:166:26: 166:42
                                        let _85: crossbeam_channel::Sender<core::libexecutor::block::ClosedBlock>; // in scope 12 at cita-executor/src/main.rs:167:10: 167:25
                                        let _86: crossbeam_channel::Receiver<core::libexecutor::block::ClosedBlock>; // in scope 12 at cita-executor/src/main.rs:167:27: 167:44
                                        scope 13 {
                                            debug fsm_resp_sender => _85; // in scope 13 at cita-executor/src/main.rs:167:10: 167:25
                                            debug fsm_resp_receiver => _86; // in scope 13 at cita-executor/src/main.rs:167:27: 167:44
                                            let _88: crossbeam_channel::Sender<core::libexecutor::command::Command>; // in scope 13 at cita-executor/src/main.rs:168:10: 168:28
                                            let _89: crossbeam_channel::Receiver<core::libexecutor::command::Command>; // in scope 13 at cita-executor/src/main.rs:168:30: 168:50
                                            scope 14 {
                                                debug command_req_sender => _88; // in scope 14 at cita-executor/src/main.rs:168:10: 168:28
                                                debug command_req_receiver => _89; // in scope 14 at cita-executor/src/main.rs:168:30: 168:50
                                                let _91: crossbeam_channel::Sender<core::libexecutor::command::CommandResp>; // in scope 14 at cita-executor/src/main.rs:169:10: 169:29
                                                let _92: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>; // in scope 14 at cita-executor/src/main.rs:169:31: 169:52
                                                scope 15 {
                                                    debug command_resp_sender => _91; // in scope 15 at cita-executor/src/main.rs:169:10: 169:29
                                                    debug command_resp_receiver => _92; // in scope 15 at cita-executor/src/main.rs:169:31: 169:52
                                                    let _135: std::string::String; // in scope 15 at cita-executor/src/main.rs:208:13: 208:22
                                                    scope 16 {
                                                    }
                                                    scope 17 {
                                                        debug data_path => _135; // in scope 17 at cita-executor/src/main.rs:208:13: 208:22
                                                        let mut _136: core::libexecutor::executor::Executor; // in scope 17 at cita-executor/src/main.rs:209:13: 209:25
                                                        scope 18 {
                                                            debug executor => _136; // in scope 18 at cita-executor/src/main.rs:209:13: 209:25
                                                            let _150: u64; // in scope 18 at cita-executor/src/main.rs:218:13: 218:27
                                                            scope 19 {
                                                                debug current_height => _150; // in scope 19 at cita-executor/src/main.rs:218:13: 218:27
                                                                let _152: cita_types::H256; // in scope 19 at cita-executor/src/main.rs:219:13: 219:25
                                                                scope 20 {
                                                                    debug current_hash => _152; // in scope 20 at cita-executor/src/main.rs:219:13: 219:25
                                                                    let _154: std::thread::JoinHandle<()>; // in scope 20 at cita-executor/src/main.rs:220:13: 220:19
                                                                    scope 21 {
                                                                        debug handle => _154; // in scope 21 at cita-executor/src/main.rs:220:13: 220:19
                                                                        let mut _156: postman::Postman; // in scope 21 at cita-executor/src/main.rs:225:13: 225:24
                                                                        scope 22 {
                                                                            debug postman => _156; // in scope 22 at cita-executor/src/main.rs:225:13: 225:24
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _193 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _195 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _200 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _189 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _202 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _192 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _204 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _197 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _188 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _194 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _191 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _201 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _203 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _205 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _207 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _196 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _198 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _199 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _190 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _206 = const false;              // scope 0 at cita-executor/src/main.rs:142:9: 142:16
        _207 = const true;               // scope 0 at cita-executor/src/main.rs:142:19: 142:39
        _7 = App::<'_, '_>::new::<&str>(const "executor") -> bb1; // scope 0 at cita-executor/src/main.rs:142:19: 142:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:142:19: 142:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> App<'_, '_> {App::<'_, '_>::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:142:28: 142:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _8 = get_build_info_str(const true) -> [return: bb2, unwind: bb141]; // scope 0 at cita-executor/src/main.rs:143:18: 143:42
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:143:18: 143:36
                                         // + literal: Const { ty: fn(bool) -> &'static str {get_build_info_str}, val: Value(<ZST>) }
    }

    bb2: {
        _207 = const false;              // scope 0 at cita-executor/src/main.rs:142:19: 143:43
        _6 = App::<'_, '_>::version::<&str>(move _7, move _8) -> [return: bb3, unwind: bb141]; // scope 0 at cita-executor/src/main.rs:142:19: 143:43
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:143:10: 143:17
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::version::<&str>}, val: Value(<ZST>) }
    }

    bb3: {
        _206 = const true;               // scope 0 at cita-executor/src/main.rs:143:42: 143:43
        _207 = const false;              // scope 0 at cita-executor/src/main.rs:143:42: 143:43
        _9 = get_build_info_str(const false) -> [return: bb4, unwind: bb139]; // scope 0 at cita-executor/src/main.rs:144:23: 144:48
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:144:23: 144:41
                                         // + literal: Const { ty: fn(bool) -> &'static str {get_build_info_str}, val: Value(<ZST>) }
    }

    bb4: {
        _206 = const false;              // scope 0 at cita-executor/src/main.rs:142:19: 144:49
        _5 = App::<'_, '_>::long_version::<&str>(move _6, move _9) -> [return: bb5, unwind: bb139]; // scope 0 at cita-executor/src/main.rs:142:19: 144:49
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:144:10: 144:22
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::long_version::<&str>}, val: Value(<ZST>) }
    }

    bb5: {
        _206 = const false;              // scope 0 at cita-executor/src/main.rs:144:48: 144:49
        _4 = App::<'_, '_>::author::<&str>(move _5, const "Rivtower") -> bb6; // scope 0 at cita-executor/src/main.rs:142:19: 145:28
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:145:10: 145:16
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::author::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:145:17: 145:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _3 = App::<'_, '_>::about::<&str>(move _4, const "CITA Block Chain Node powered by Rust") -> bb7; // scope 0 at cita-executor/src/main.rs:142:19: 146:56
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:146:10: 146:15
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::about::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:146:16: 146:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _10 = const "-c, --config=[FILE] 'Sets a switch config file'\n                          -s, --stdout 'Log to console'"; // scope 0 at cita-executor/src/main.rs:148:13: 149:57
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:148:13: 149:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = App::<'_, '_>::args_from_usage(move _3, _10) -> bb8; // scope 0 at cita-executor/src/main.rs:142:19: 150:10
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:147:10: 147:25
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::args_from_usage}, val: Value(<ZST>) }
    }

    bb8: {
        _1 = App::<'_, '_>::get_matches(move _2) -> bb9; // scope 0 at cita-executor/src/main.rs:142:19: 151:23
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:151:10: 151:21
                                         // + literal: Const { ty: fn(App<'_, '_>) -> ArgMatches<'_> {App::<'_, '_>::get_matches}, val: Value(<ZST>) }
    }

    bb9: {
        _12 = &_1;                       // scope 1 at cita-executor/src/main.rs:153:18: 153:46
        _11 = ArgMatches::<'_>::is_present::<&str>(move _12, const "stdout") -> [return: bb10, unwind: bb104]; // scope 1 at cita-executor/src/main.rs:153:18: 153:46
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:153:26: 153:36
                                         // + literal: Const { ty: for<'a> fn(&'a ArgMatches<'_>, &str) -> bool {ArgMatches::<'_>::is_present::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:153:37: 153:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _14 = dotenv() -> [return: bb11, unwind: bb104]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:9: 21:25
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:9: 21:23
                                         // + literal: Const { ty: fn() -> Result<PathBuf, dotenv::Error> {dotenv}, val: Value(<ZST>) }
    }

    bb11: {
        _13 = Result::<PathBuf, dotenv::Error>::ok(move _14) -> [return: bb12, unwind: bb104]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:9: 21:30
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:26: 21:28
                                         // + literal: Const { ty: fn(Result<PathBuf, dotenv::Error>) -> std::option::Option<PathBuf> {Result::<PathBuf, dotenv::Error>::ok}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_13) -> [return: bb13, unwind: bb104]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:30: 21:31
    }

    bb13: {
        _15 = set_var::<&str, &str>(const "RUST_BACKTRACE", const "full") -> [return: bb14, unwind: bb104]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:23:9: 23:54
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:23:9: 23:28
                                         // + literal: Const { ty: fn(&str, &str) {set_var::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:23:29: 23:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:23:47: 23:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        _16 = set_panic_handler() -> [return: bb15, unwind: bb104]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:26:9: 26:28
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:26:9: 26:26
                                         // + literal: Const { ty: fn() {set_panic_handler}, val: Value(<ZST>) }
    }

    bb15: {
        _17 = _11;                       // scope 2 at cita-executor/src/main.rs:154:59: 154:65
        switchInt(move _17) -> [0: bb17, otherwise: bb16]; // scope 2 at cita-executor/src/main.rs:154:59: 154:65
    }

    bb16: {
        _187 = const _;                  // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
                                         // + literal: Const { ty: &LogFavour<'_>, val: Unevaluated(main, [], Some(promoted[10])) }
        _18 = init_config(_187) -> [return: bb142, unwind: bb104]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:13: 30:64
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:13: 30:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a LogFavour<'b>) {init_config}, val: Value(<ZST>) }
    }

    bb17: {
        _186 = const _;                  // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
                                         // + literal: Const { ty: &LogFavour<'_>, val: Unevaluated(main, [], Some(promoted[9])) }
        _19 = init_config(_186) -> [return: bb143, unwind: bb104]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:13: 32:62
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:13: 32:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a LogFavour<'b>) {init_config}, val: Value(<ZST>) }
    }

    bb18: {
        _20 = log::Level::Info;          // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _23 = &_20;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _185 = const _;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[8])) }
        _22 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _23, _185) -> [return: bb22, unwind: bb104]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb19: {
        _21 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb21;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb20: {
        _25 = &_20;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _27 = log::max_level() -> [return: bb23, unwind: bb104]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb21: {
        switchInt(move _21) -> [0: bb27, otherwise: bb25]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb22: {
        switchInt(move _22) -> [0: bb19, otherwise: bb20]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb23: {
        _26 = &_27;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _24 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _25, move _26) -> [return: bb24, unwind: bb104]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb24: {
        _21 = move _24;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb21;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb25: {
        _184 = const _;                  // scope 3 at cita-executor/src/main.rs:154:42: 154:57
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:154:42: 154:57
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[7])) }
        _30 = _184 as &[&str] (Pointer(Unsize)); // scope 3 at cita-executor/src/main.rs:154:42: 154:57
        _29 = Arguments::<'_>::new_const(move _30) -> [return: bb26, unwind: bb104]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb26: {
        _183 = const _;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[6])) }
        _28 = log::__private_api_log(move _29, _20, _183) -> [return: bb144, unwind: bb104]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb27: {
        _33 = &_1;                       // scope 2 at cita-executor/src/main.rs:156:23: 156:49
        _32 = ArgMatches::<'_>::value_of::<&str>(move _33, const "config") -> [return: bb28, unwind: bb104]; // scope 2 at cita-executor/src/main.rs:156:23: 156:49
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:156:31: 156:39
                                         // + literal: Const { ty: for<'a> fn(&'a ArgMatches<'_>, &str) -> std::option::Option<&'a str> {ArgMatches::<'_>::value_of::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:156:40: 156:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb28: {
        _34 = const "executor.toml";     // scope 2 at cita-executor/src/main.rs:156:60: 156:75
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:156:60: 156:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _31 = std::option::Option::<&str>::unwrap_or(move _32, _34) -> [return: bb29, unwind: bb104]; // scope 2 at cita-executor/src/main.rs:156:23: 156:76
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:156:50: 156:59
                                         // + literal: Const { ty: fn(std::option::Option<&str>, &str) -> &str {std::option::Option::<&str>::unwrap_or}, val: Value(<ZST>) }
    }

    bb29: {
        _36 = _31;                       // scope 4 at cita-executor/src/main.rs:157:33: 157:44
        _35 = Options::load(move _36) -> [return: bb30, unwind: bb104]; // scope 4 at cita-executor/src/main.rs:157:19: 157:45
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:157:19: 157:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Options {Options::load}, val: Value(<ZST>) }
    }

    bb30: {
        _37 = log::Level::Info;          // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _40 = &_37;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _182 = const _;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[5])) }
        _39 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _40, _182) -> [return: bb34, unwind: bb103]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb31: {
        _38 = const false;               // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb33;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb32: {
        _42 = &_37;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _44 = log::max_level() -> [return: bb35, unwind: bb103]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb33: {
        switchInt(move _38) -> [0: bb41, otherwise: bb37]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb34: {
        switchInt(move _39) -> [0: bb31, otherwise: bb32]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb35: {
        _43 = &_44;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _41 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _42, move _43) -> [return: bb36, unwind: bb103]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb36: {
        _38 = move _41;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb33;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb37: {
        _181 = const _;                  // scope 6 at cita-executor/src/main.rs:158:11: 158:24
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:158:11: 158:24
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[4])) }
        _47 = _181 as &[&str] (Pointer(Unsize)); // scope 6 at cita-executor/src/main.rs:158:11: 158:24
        _53 = get_build_info_str(const true) -> [return: bb38, unwind: bb103]; // scope 6 at cita-executor/src/main.rs:158:26: 158:50
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:158:26: 158:44
                                         // + literal: Const { ty: fn(bool) -> &'static str {get_build_info_str}, val: Value(<ZST>) }
    }

    bb38: {
        _52 = &_53;                      // scope 6 at cita-executor/src/main.rs:158:26: 158:50
        _51 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_52) -> [return: bb39, unwind: bb103]; // scope 6 at cita-executor/src/main.rs:158:26: 158:50
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:158:26: 158:50
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb39: {
        _50 = [move _51];                // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _49 = &_50;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _48 = _49 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _46 = Arguments::<'_>::new_v1(move _47, move _48) -> [return: bb40, unwind: bb103]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb40: {
        _180 = const _;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[3])) }
        _45 = log::__private_api_log(move _46, _37, _180) -> [return: bb145, unwind: bb103]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb41: {
        _54 = log::Level::Info;          // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _57 = &_54;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _179 = const _;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[2])) }
        _56 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _57, _179) -> [return: bb45, unwind: bb103]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb42: {
        _55 = const false;               // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb44;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb43: {
        _59 = &_54;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _61 = log::max_level() -> [return: bb46, unwind: bb103]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb44: {
        switchInt(move _55) -> [0: bb51, otherwise: bb48]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb45: {
        switchInt(move _56) -> [0: bb42, otherwise: bb43]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb46: {
        _60 = &_61;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _58 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _59, move _60) -> [return: bb47, unwind: bb103]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb47: {
        _55 = move _58;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb44;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb48: {
        _178 = const _;                  // scope 7 at cita-executor/src/main.rs:159:11: 159:25
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:159:11: 159:25
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _64 = _178 as &[&str] (Pointer(Unsize)); // scope 7 at cita-executor/src/main.rs:159:11: 159:25
        _69 = &_35;                      // scope 7 at cita-executor/src/main.rs:159:27: 159:34
        _68 = core::fmt::ArgumentV1::<'_>::new_debug::<Options>(_69) -> [return: bb49, unwind: bb103]; // scope 7 at cita-executor/src/main.rs:159:27: 159:34
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:159:27: 159:34
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b Options) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Options>}, val: Value(<ZST>) }
    }

    bb49: {
        _67 = [move _68];                // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _66 = &_67;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _65 = _66 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _63 = Arguments::<'_>::new_v1(move _64, move _65) -> [return: bb50, unwind: bb103]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb50: {
        _177 = const _;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[0])) }
        _62 = log::__private_api_log(move _63, _54, _177) -> [return: bb146, unwind: bb103]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb51: {
        _72 = unbounded::<(std::string::String, Vec<u8>)>() -> [return: bb52, unwind: bb103]; // scope 5 at cita-executor/src/main.rs:162:54: 162:74
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:162:54: 162:72
                                         // + literal: Const { ty: fn() -> (crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {unbounded::<(std::string::String, Vec<u8>)>}, val: Value(<ZST>) }
    }

    bb52: {
        _205 = const true;               // scope 5 at cita-executor/src/main.rs:162:10: 162:28
        _70 = move (_72.0: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 5 at cita-executor/src/main.rs:162:10: 162:28
        _204 = const true;               // scope 5 at cita-executor/src/main.rs:162:30: 162:50
        _71 = move (_72.1: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 5 at cita-executor/src/main.rs:162:30: 162:50
        _75 = unbounded::<(std::string::String, Vec<u8>)>() -> [return: bb53, unwind: bb101]; // scope 8 at cita-executor/src/main.rs:163:56: 163:76
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:163:56: 163:74
                                         // + literal: Const { ty: fn() -> (crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {unbounded::<(std::string::String, Vec<u8>)>}, val: Value(<ZST>) }
    }

    bb53: {
        _203 = const true;               // scope 8 at cita-executor/src/main.rs:163:10: 163:29
        _73 = move (_75.0: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 8 at cita-executor/src/main.rs:163:10: 163:29
        _202 = const true;               // scope 8 at cita-executor/src/main.rs:163:31: 163:52
        _74 = move (_75.1: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 8 at cita-executor/src/main.rs:163:31: 163:52
        _78 = unbounded::<(std::string::String, Vec<u8>)>() -> [return: bb54, unwind: bb99]; // scope 9 at cita-executor/src/main.rs:164:44: 164:74
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:164:44: 164:72
                                         // + literal: Const { ty: fn() -> (crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {unbounded::<(std::string::String, Vec<u8>)>}, val: Value(<ZST>) }
    }

    bb54: {
        _201 = const true;               // scope 9 at cita-executor/src/main.rs:164:10: 164:23
        _76 = move (_78.0: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 9 at cita-executor/src/main.rs:164:10: 164:23
        _77 = move (_78.1: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 9 at cita-executor/src/main.rs:164:25: 164:40
        _81 = unbounded::<(std::string::String, Vec<u8>)>() -> [return: bb55, unwind: bb98]; // scope 10 at cita-executor/src/main.rs:165:46: 165:76
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:165:46: 165:74
                                         // + literal: Const { ty: fn() -> (crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {unbounded::<(std::string::String, Vec<u8>)>}, val: Value(<ZST>) }
    }

    bb55: {
        _79 = move (_81.0: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 10 at cita-executor/src/main.rs:165:10: 165:24
        _200 = const true;               // scope 10 at cita-executor/src/main.rs:165:26: 165:42
        _80 = move (_81.1: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 10 at cita-executor/src/main.rs:165:26: 165:42
        _84 = unbounded::<OpenBlock>() -> [return: bb56, unwind: bb131]; // scope 11 at cita-executor/src/main.rs:166:46: 166:76
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:166:46: 166:74
                                         // + literal: Const { ty: fn() -> (crossbeam_channel::Sender<OpenBlock>, crossbeam_channel::Receiver<OpenBlock>) {unbounded::<OpenBlock>}, val: Value(<ZST>) }
    }

    bb56: {
        _82 = move (_84.0: crossbeam_channel::Sender<types::block::OpenBlock>); // scope 11 at cita-executor/src/main.rs:166:10: 166:24
        _83 = move (_84.1: crossbeam_channel::Receiver<types::block::OpenBlock>); // scope 11 at cita-executor/src/main.rs:166:26: 166:42
        _87 = unbounded::<ClosedBlock>() -> [return: bb57, unwind: bb95]; // scope 12 at cita-executor/src/main.rs:167:48: 167:78
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:167:48: 167:76
                                         // + literal: Const { ty: fn() -> (crossbeam_channel::Sender<ClosedBlock>, crossbeam_channel::Receiver<ClosedBlock>) {unbounded::<ClosedBlock>}, val: Value(<ZST>) }
    }

    bb57: {
        _85 = move (_87.0: crossbeam_channel::Sender<core::libexecutor::block::ClosedBlock>); // scope 12 at cita-executor/src/main.rs:167:10: 167:25
        _86 = move (_87.1: crossbeam_channel::Receiver<core::libexecutor::block::ClosedBlock>); // scope 12 at cita-executor/src/main.rs:167:27: 167:44
        _90 = bounded::<core::libexecutor::command::Command>(const 0_usize) -> [return: bb58, unwind: bb93]; // scope 13 at cita-executor/src/main.rs:168:54: 168:83
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:168:54: 168:80
                                         // + literal: Const { ty: fn(usize) -> (crossbeam_channel::Sender<core::libexecutor::command::Command>, crossbeam_channel::Receiver<core::libexecutor::command::Command>) {bounded::<core::libexecutor::command::Command>}, val: Value(<ZST>) }
    }

    bb58: {
        _88 = move (_90.0: crossbeam_channel::Sender<core::libexecutor::command::Command>); // scope 13 at cita-executor/src/main.rs:168:10: 168:28
        _89 = move (_90.1: crossbeam_channel::Receiver<core::libexecutor::command::Command>); // scope 13 at cita-executor/src/main.rs:168:30: 168:50
        _93 = bounded::<CommandResp>(const 0_usize) -> [return: bb59, unwind: bb91]; // scope 14 at cita-executor/src/main.rs:169:56: 169:85
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:169:56: 169:82
                                         // + literal: Const { ty: fn(usize) -> (crossbeam_channel::Sender<CommandResp>, crossbeam_channel::Receiver<CommandResp>) {bounded::<CommandResp>}, val: Value(<ZST>) }
    }

    bb59: {
        _91 = move (_93.0: crossbeam_channel::Sender<core::libexecutor::command::CommandResp>); // scope 14 at cita-executor/src/main.rs:169:10: 169:29
        _92 = move (_93.1: crossbeam_channel::Receiver<core::libexecutor::command::CommandResp>); // scope 14 at cita-executor/src/main.rs:169:31: 169:52
        _95 = const "executor";          // scope 15 at cita-executor/src/main.rs:171:9: 171:19
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:171:9: 171:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _98 = const 18_usize;            // scope 16 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _99 = const 1_usize;             // scope 16 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _100 = alloc::alloc::exchange_malloc(move _98, move _99) -> [return: bb60, unwind: bb89]; // scope 16 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb60: {
        _101 = ShallowInitBox(move _100, [libproto::router::RoutingKey; 9]); // scope 15 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _103 = const libproto::router::SubModules::Chain; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x02)) }
        _104 = const libproto::router::MsgType::Request; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x01)) }
        _102 = RoutingKey(move _103, move _104); // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _106 = const libproto::router::SubModules::Chain; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x02)) }
        _107 = const libproto::router::MsgType::RichStatus; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x06)) }
        _105 = RoutingKey(move _106, move _107); // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _109 = const libproto::router::SubModules::Chain; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x02)) }
        _110 = const libproto::router::MsgType::StateSignal; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x16)) }
        _108 = RoutingKey(move _109, move _110); // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _112 = const libproto::router::SubModules::Chain; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x02)) }
        _113 = const LocalSync;          // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x1f)) }
        _111 = RoutingKey(move _112, move _113); // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _115 = const Consensus;          // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x03)) }
        _116 = const libproto::router::MsgType::BlockWithProof; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x09)) }
        _114 = RoutingKey(move _115, move _116); // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _118 = const Consensus;          // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x03)) }
        _119 = const libproto::router::MsgType::SignedProposal; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x07)) }
        _117 = RoutingKey(move _118, move _119); // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _121 = const Net;                // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x01)) }
        _122 = const libproto::router::MsgType::SyncResponse; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x04)) }
        _120 = RoutingKey(move _121, move _122); // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _124 = const libproto::router::SubModules::Snapshot; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x07)) }
        _125 = const libproto::router::MsgType::SnapshotReq; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x11)) }
        _123 = RoutingKey(move _124, move _125); // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _127 = const Auth;               // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x04)) }
        _128 = const libproto::router::MsgType::MiscellaneousReq; // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x14)) }
        _126 = RoutingKey(move _127, move _128); // scope 15 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _208 = (((_101.0: std::ptr::Unique<[libproto::router::RoutingKey; 9]>).0: std::ptr::NonNull<[libproto::router::RoutingKey; 9]>).0: *const [libproto::router::RoutingKey; 9]); // scope 15 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        (*_208) = [move _102, move _105, move _108, move _111, move _114, move _117, move _120, move _123, move _126]; // scope 15 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        _97 = move _101 as std::boxed::Box<[libproto::router::RoutingKey]> (Pointer(Unsize)); // scope 15 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _96 = slice::<impl [RoutingKey]>::into_vec::<std::alloc::Global>(move _97) -> [return: bb61, unwind: bb89]; // scope 15 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(Box<[RoutingKey]>) -> Vec<RoutingKey> {slice::<impl [RoutingKey]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb61: {
        _205 = const false;              // scope 15 at cita-executor/src/main.rs:183:9: 183:27
        _129 = move _70;                 // scope 15 at cita-executor/src/main.rs:183:9: 183:27
        _202 = const false;              // scope 15 at cita-executor/src/main.rs:184:9: 184:30
        _130 = move _74;                 // scope 15 at cita-executor/src/main.rs:184:9: 184:30
        _94 = start_pubsub::<RoutingKey>(_95, move _96, move _129, move _130) -> [return: bb62, unwind: bb89]; // scope 15 at cita-executor/src/main.rs:170:5: 185:6
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:170:5: 170:17
                                         // + literal: Const { ty: for<'a> fn(&'a str, Vec<RoutingKey>, crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {start_pubsub::<RoutingKey>}, val: Value(<ZST>) }
    }

    bb62: {
        _204 = const false;              // scope 15 at cita-executor/src/main.rs:188:19: 195:6
        _201 = const false;              // scope 15 at cita-executor/src/main.rs:188:19: 195:6
        _132 = [closure@cita-executor/src/main.rs:188:19: 188:26] { forward_req_receiver: move _71, mq_req_sender: move _76 }; // scope 15 at cita-executor/src/main.rs:188:19: 195:6
                                         // closure
                                         // + def_id: DefId(0:188 ~ cita_executor[bbb2]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>, crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>),
                                         // ]
        _131 = spawn::<[closure@cita-executor/src/main.rs:188:19: 188:26], ()>(move _132) -> [return: bb63, unwind: bb89]; // scope 15 at cita-executor/src/main.rs:188:5: 195:7
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:188:5: 188:18
                                         // + literal: Const { ty: fn([closure@cita-executor/src/main.rs:188:19: 188:26]) -> JoinHandle<()> {spawn::<[closure@cita-executor/src/main.rs:188:19: 188:26], ()>}, val: Value(<ZST>) }
    }

    bb63: {
        drop(_131) -> [return: bb64, unwind: bb89]; // scope 15 at cita-executor/src/main.rs:195:7: 195:8
    }

    bb64: {
        _200 = const false;              // scope 15 at cita-executor/src/main.rs:196:19: 203:6
        _203 = const false;              // scope 15 at cita-executor/src/main.rs:196:19: 203:6
        _134 = [closure@cita-executor/src/main.rs:196:19: 196:26] { mq_resp_receiver: move _80, forward_resp_sender: move _73 }; // scope 15 at cita-executor/src/main.rs:196:19: 203:6
                                         // closure
                                         // + def_id: DefId(0:189 ~ cita_executor[bbb2]::main::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>, crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>),
                                         // ]
        _133 = spawn::<[closure@cita-executor/src/main.rs:196:19: 196:26], ()>(move _134) -> [return: bb65, unwind: bb89]; // scope 15 at cita-executor/src/main.rs:196:5: 203:7
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:196:5: 196:18
                                         // + literal: Const { ty: fn([closure@cita-executor/src/main.rs:196:19: 196:26]) -> JoinHandle<()> {spawn::<[closure@cita-executor/src/main.rs:196:19: 196:26], ()>}, val: Value(<ZST>) }
    }

    bb65: {
        drop(_133) -> [return: bb66, unwind: bb89]; // scope 15 at cita-executor/src/main.rs:203:7: 203:8
    }

    bb66: {
        _135 = DataPath::root_node_path() -> [return: bb67, unwind: bb89]; // scope 15 at cita-executor/src/main.rs:208:25: 208:51
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:208:25: 208:49
                                         // + literal: Const { ty: fn() -> std::string::String {DataPath::root_node_path}, val: Value(<ZST>) }
    }

    bb67: {
        _199 = const true;               // scope 17 at cita-executor/src/main.rs:209:13: 209:25
        _139 = &(_35.2: std::string::String); // scope 17 at cita-executor/src/main.rs:210:13: 210:34
        _138 = <std::string::String as Deref>::deref(_139) -> [return: bb68, unwind: bb129]; // scope 17 at cita-executor/src/main.rs:210:13: 210:34
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:210:13: 210:34
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb68: {
        _137 = _138;                     // scope 17 at cita-executor/src/main.rs:210:13: 210:34
        _199 = const false;              // scope 17 at cita-executor/src/main.rs:211:13: 211:22
        _198 = const true;               // scope 17 at cita-executor/src/main.rs:211:13: 211:22
        _140 = move _135;                // scope 17 at cita-executor/src/main.rs:211:13: 211:22
        _142 = &_83;                     // scope 17 at cita-executor/src/main.rs:212:13: 212:37
        _141 = <crossbeam_channel::Receiver<OpenBlock> as Clone>::clone(move _142) -> [return: bb69, unwind: bb127]; // scope 17 at cita-executor/src/main.rs:212:13: 212:37
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:212:30: 212:35
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Receiver<OpenBlock>) -> crossbeam_channel::Receiver<OpenBlock> {<crossbeam_channel::Receiver<OpenBlock> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb69: {
        _197 = const true;               // scope 17 at cita-executor/src/main.rs:212:36: 212:37
        _144 = &_85;                     // scope 17 at cita-executor/src/main.rs:213:13: 213:36
        _143 = <crossbeam_channel::Sender<ClosedBlock> as Clone>::clone(move _144) -> [return: bb70, unwind: bb125]; // scope 17 at cita-executor/src/main.rs:213:13: 213:36
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:213:29: 213:34
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Sender<ClosedBlock>) -> crossbeam_channel::Sender<ClosedBlock> {<crossbeam_channel::Sender<ClosedBlock> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb70: {
        _196 = const true;               // scope 17 at cita-executor/src/main.rs:213:35: 213:36
        _146 = &_89;                     // scope 17 at cita-executor/src/main.rs:214:13: 214:41
        _145 = <crossbeam_channel::Receiver<core::libexecutor::command::Command> as Clone>::clone(move _146) -> [return: bb71, unwind: bb123]; // scope 17 at cita-executor/src/main.rs:214:13: 214:41
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:214:34: 214:39
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Receiver<core::libexecutor::command::Command>) -> crossbeam_channel::Receiver<core::libexecutor::command::Command> {<crossbeam_channel::Receiver<core::libexecutor::command::Command> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb71: {
        _195 = const true;               // scope 17 at cita-executor/src/main.rs:214:40: 214:41
        _148 = &_91;                     // scope 17 at cita-executor/src/main.rs:215:13: 215:40
        _147 = <crossbeam_channel::Sender<CommandResp> as Clone>::clone(move _148) -> [return: bb72, unwind: bb121]; // scope 17 at cita-executor/src/main.rs:215:13: 215:40
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:215:33: 215:38
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Sender<CommandResp>) -> crossbeam_channel::Sender<CommandResp> {<crossbeam_channel::Sender<CommandResp> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb72: {
        _149 = (_35.4: bool);            // scope 17 at cita-executor/src/main.rs:216:13: 216:38
        _198 = const false;              // scope 17 at cita-executor/src/main.rs:209:28: 217:10
        _197 = const false;              // scope 17 at cita-executor/src/main.rs:209:28: 217:10
        _196 = const false;              // scope 17 at cita-executor/src/main.rs:209:28: 217:10
        _195 = const false;              // scope 17 at cita-executor/src/main.rs:209:28: 217:10
        _136 = core::libexecutor::executor::Executor::init(move _137, move _140, move _141, move _143, move _145, move _147, move _149) -> [return: bb73, unwind: bb121]; // scope 17 at cita-executor/src/main.rs:209:28: 217:10
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:209:28: 209:42
                                         // + literal: Const { ty: for<'a> fn(&'a str, std::string::String, crossbeam_channel::Receiver<OpenBlock>, crossbeam_channel::Sender<ClosedBlock>, crossbeam_channel::Receiver<core::libexecutor::command::Command>, crossbeam_channel::Sender<CommandResp>, bool) -> core::libexecutor::executor::Executor {core::libexecutor::executor::Executor::init}, val: Value(<ZST>) }
    }

    bb73: {
        _194 = const true;               // scope 17 at cita-executor/src/main.rs:217:9: 217:10
        _195 = const false;              // scope 17 at cita-executor/src/main.rs:217:9: 217:10
        _196 = const false;              // scope 17 at cita-executor/src/main.rs:217:9: 217:10
        _197 = const false;              // scope 17 at cita-executor/src/main.rs:217:9: 217:10
        _198 = const false;              // scope 17 at cita-executor/src/main.rs:217:9: 217:10
        _151 = &_136;                    // scope 18 at cita-executor/src/main.rs:218:30: 218:59
        _150 = core::libexecutor::executor::Executor::get_current_height(move _151) -> [return: bb74, unwind: bb119]; // scope 18 at cita-executor/src/main.rs:218:30: 218:59
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:218:39: 218:57
                                         // + literal: Const { ty: for<'a> fn(&'a core::libexecutor::executor::Executor) -> u64 {core::libexecutor::executor::Executor::get_current_height}, val: Value(<ZST>) }
    }

    bb74: {
        _153 = &_136;                    // scope 19 at cita-executor/src/main.rs:219:28: 219:55
        _152 = core::libexecutor::executor::Executor::get_current_hash(move _153) -> [return: bb75, unwind: bb119]; // scope 19 at cita-executor/src/main.rs:219:28: 219:55
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:219:37: 219:53
                                         // + literal: Const { ty: for<'a> fn(&'a core::libexecutor::executor::Executor) -> H256 {core::libexecutor::executor::Executor::get_current_hash}, val: Value(<ZST>) }
    }

    bb75: {
        _194 = const false;              // scope 20 at cita-executor/src/main.rs:220:36: 222:10
        _155 = [closure@cita-executor/src/main.rs:220:36: 220:43] { executor: move _136 }; // scope 20 at cita-executor/src/main.rs:220:36: 222:10
                                         // closure
                                         // + def_id: DefId(0:190 ~ cita_executor[bbb2]::main::{closure#2})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (core::libexecutor::executor::Executor,),
                                         // ]
        _154 = spawn::<[closure@cita-executor/src/main.rs:220:36: 220:43], ()>(move _155) -> [return: bb76, unwind: bb119]; // scope 20 at cita-executor/src/main.rs:220:22: 222:11
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:220:22: 220:35
                                         // + literal: Const { ty: fn([closure@cita-executor/src/main.rs:220:36: 220:43]) -> JoinHandle<()> {spawn::<[closure@cita-executor/src/main.rs:220:36: 220:43], ()>}, val: Value(<ZST>) }
    }

    bb76: {
        _193 = const true;               // scope 20 at cita-executor/src/main.rs:222:10: 222:11
        _157 = _150;                     // scope 21 at cita-executor/src/main.rs:226:13: 226:27
        _158 = _152;                     // scope 21 at cita-executor/src/main.rs:227:13: 227:25
        _160 = &_77;                     // scope 21 at cita-executor/src/main.rs:228:13: 228:36
        _159 = <crossbeam_channel::Receiver<(std::string::String, Vec<u8>)> as Clone>::clone(move _160) -> [return: bb77, unwind: bb117]; // scope 21 at cita-executor/src/main.rs:228:13: 228:36
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:228:29: 228:34
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) -> crossbeam_channel::Receiver<(std::string::String, Vec<u8>)> {<crossbeam_channel::Receiver<(std::string::String, Vec<u8>)> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb77: {
        _192 = const true;               // scope 21 at cita-executor/src/main.rs:228:35: 228:36
        _162 = &_79;                     // scope 21 at cita-executor/src/main.rs:229:13: 229:35
        _161 = <crossbeam_channel::Sender<(std::string::String, Vec<u8>)> as Clone>::clone(move _162) -> [return: bb78, unwind: bb115]; // scope 21 at cita-executor/src/main.rs:229:13: 229:35
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:229:28: 229:33
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) -> crossbeam_channel::Sender<(std::string::String, Vec<u8>)> {<crossbeam_channel::Sender<(std::string::String, Vec<u8>)> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb78: {
        _191 = const true;               // scope 21 at cita-executor/src/main.rs:229:34: 229:35
        _164 = &_82;                     // scope 21 at cita-executor/src/main.rs:230:13: 230:35
        _163 = <crossbeam_channel::Sender<OpenBlock> as Clone>::clone(move _164) -> [return: bb79, unwind: bb113]; // scope 21 at cita-executor/src/main.rs:230:13: 230:35
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:230:28: 230:33
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Sender<OpenBlock>) -> crossbeam_channel::Sender<OpenBlock> {<crossbeam_channel::Sender<OpenBlock> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb79: {
        _190 = const true;               // scope 21 at cita-executor/src/main.rs:230:34: 230:35
        _166 = &_86;                     // scope 21 at cita-executor/src/main.rs:231:13: 231:38
        _165 = <crossbeam_channel::Receiver<ClosedBlock> as Clone>::clone(move _166) -> [return: bb80, unwind: bb111]; // scope 21 at cita-executor/src/main.rs:231:13: 231:38
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:231:31: 231:36
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Receiver<ClosedBlock>) -> crossbeam_channel::Receiver<ClosedBlock> {<crossbeam_channel::Receiver<ClosedBlock> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb80: {
        _189 = const true;               // scope 21 at cita-executor/src/main.rs:231:37: 231:38
        _168 = &_88;                     // scope 21 at cita-executor/src/main.rs:232:13: 232:39
        _167 = <crossbeam_channel::Sender<core::libexecutor::command::Command> as Clone>::clone(move _168) -> [return: bb81, unwind: bb109]; // scope 21 at cita-executor/src/main.rs:232:13: 232:39
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:232:32: 232:37
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Sender<core::libexecutor::command::Command>) -> crossbeam_channel::Sender<core::libexecutor::command::Command> {<crossbeam_channel::Sender<core::libexecutor::command::Command> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb81: {
        _188 = const true;               // scope 21 at cita-executor/src/main.rs:232:38: 232:39
        _170 = &_92;                     // scope 21 at cita-executor/src/main.rs:233:13: 233:42
        _169 = <crossbeam_channel::Receiver<CommandResp> as Clone>::clone(move _170) -> [return: bb82, unwind: bb107]; // scope 21 at cita-executor/src/main.rs:233:13: 233:42
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:233:35: 233:40
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Receiver<CommandResp>) -> crossbeam_channel::Receiver<CommandResp> {<crossbeam_channel::Receiver<CommandResp> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb82: {
        _192 = const false;              // scope 21 at cita-executor/src/main.rs:225:27: 234:10
        _191 = const false;              // scope 21 at cita-executor/src/main.rs:225:27: 234:10
        _190 = const false;              // scope 21 at cita-executor/src/main.rs:225:27: 234:10
        _189 = const false;              // scope 21 at cita-executor/src/main.rs:225:27: 234:10
        _188 = const false;              // scope 21 at cita-executor/src/main.rs:225:27: 234:10
        _156 = Postman::new(move _157, move _158, move _159, move _161, move _163, move _165, move _167, move _169) -> [return: bb83, unwind: bb107]; // scope 21 at cita-executor/src/main.rs:225:27: 234:10
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:225:27: 225:39
                                         // + literal: Const { ty: fn(u64, H256, crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>, crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, crossbeam_channel::Sender<OpenBlock>, crossbeam_channel::Receiver<ClosedBlock>, crossbeam_channel::Sender<core::libexecutor::command::Command>, crossbeam_channel::Receiver<CommandResp>) -> Postman {Postman::new}, val: Value(<ZST>) }
    }

    bb83: {
        _188 = const false;              // scope 21 at cita-executor/src/main.rs:234:9: 234:10
        _189 = const false;              // scope 21 at cita-executor/src/main.rs:234:9: 234:10
        _190 = const false;              // scope 21 at cita-executor/src/main.rs:234:9: 234:10
        _191 = const false;              // scope 21 at cita-executor/src/main.rs:234:9: 234:10
        _192 = const false;              // scope 21 at cita-executor/src/main.rs:234:9: 234:10
        _172 = &mut _156;                // scope 22 at cita-executor/src/main.rs:235:9: 235:26
        _171 = Postman::do_loop(move _172) -> [return: bb84, unwind: bb88]; // scope 22 at cita-executor/src/main.rs:235:9: 235:26
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:235:17: 235:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Postman) {Postman::do_loop}, val: Value(<ZST>) }
    }

    bb84: {
        _193 = const false;              // scope 22 at cita-executor/src/main.rs:237:9: 237:15
        _175 = move _154;                // scope 22 at cita-executor/src/main.rs:237:9: 237:15
        _174 = JoinHandle::<()>::join(move _175) -> [return: bb85, unwind: bb88]; // scope 22 at cita-executor/src/main.rs:237:9: 237:22
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:237:16: 237:20
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb85: {
        _176 = const "\n            Executor exit cause Command::Exit was sent by postman inside.\n\n            When postman roll back the whole cita-chain to an old height,\n            it would tell executor thread to reset the `CURRNENT_HASH` to the\n            target height, and then exit, both with postman. Main thread would\n            re-run postman and executor inside this loop statement.\n        "; // scope 22 at cita-executor/src/main.rs:238:13: 245:10
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:238:13: 245:10
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _173 = Result::<(), Box<dyn Any + Send>>::expect(move _174, _176) -> [return: bb86, unwind: bb88]; // scope 22 at cita-executor/src/main.rs:237:9: 246:10
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:237:23: 237:29
                                         // + literal: Const { ty: for<'a> fn(Result<(), Box<dyn Any + Send>>, &'a str) {Result::<(), Box<dyn Any + Send>>::expect}, val: Value(<ZST>) }
    }

    bb86: {
        drop(_156) -> [return: bb87, unwind: bb117]; // scope 21 at cita-executor/src/main.rs:247:5: 247:6
    }

    bb87: {
        _193 = const false;              // scope 20 at cita-executor/src/main.rs:247:5: 247:6
        _194 = const false;              // scope 17 at cita-executor/src/main.rs:247:5: 247:6
        _199 = const false;              // scope 15 at cita-executor/src/main.rs:247:5: 247:6
        goto -> bb66;                    // scope 15 at cita-executor/src/main.rs:205:5: 247:6
    }

    bb88 (cleanup): {
        drop(_156) -> bb117;             // scope 21 at cita-executor/src/main.rs:247:5: 247:6
    }

    bb89 (cleanup): {
        drop(_92) -> bb90;               // scope 14 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb90 (cleanup): {
        drop(_91) -> bb91;               // scope 14 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb91 (cleanup): {
        drop(_89) -> bb92;               // scope 13 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb92 (cleanup): {
        drop(_88) -> bb93;               // scope 13 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb93 (cleanup): {
        drop(_86) -> bb94;               // scope 12 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb94 (cleanup): {
        drop(_85) -> bb95;               // scope 12 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb95 (cleanup): {
        drop(_83) -> bb96;               // scope 11 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb96 (cleanup): {
        drop(_82) -> bb131;              // scope 11 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb97 (cleanup): {
        drop(_79) -> bb98;               // scope 10 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb98 (cleanup): {
        drop(_77) -> bb133;              // scope 9 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb99 (cleanup): {
        switchInt(_202) -> [0: bb100, otherwise: bb134]; // scope 8 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb100 (cleanup): {
        switchInt(_203) -> [0: bb101, otherwise: bb135]; // scope 8 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb101 (cleanup): {
        switchInt(_204) -> [0: bb102, otherwise: bb136]; // scope 5 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb102 (cleanup): {
        switchInt(_205) -> [0: bb103, otherwise: bb137]; // scope 5 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb103 (cleanup): {
        drop(_35) -> bb104;              // scope 4 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb104 (cleanup): {
        drop(_1) -> bb105;               // scope 0 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb105 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/main.rs:141:1: 248:2
    }

    bb106 (cleanup): {
        drop(_167) -> bb109;             // scope 21 at cita-executor/src/main.rs:234:9: 234:10
    }

    bb107 (cleanup): {
        switchInt(_188) -> [0: bb109, otherwise: bb106]; // scope 21 at cita-executor/src/main.rs:234:9: 234:10
    }

    bb108 (cleanup): {
        drop(_165) -> bb111;             // scope 21 at cita-executor/src/main.rs:234:9: 234:10
    }

    bb109 (cleanup): {
        switchInt(_189) -> [0: bb111, otherwise: bb108]; // scope 21 at cita-executor/src/main.rs:234:9: 234:10
    }

    bb110 (cleanup): {
        drop(_163) -> bb113;             // scope 21 at cita-executor/src/main.rs:234:9: 234:10
    }

    bb111 (cleanup): {
        switchInt(_190) -> [0: bb113, otherwise: bb110]; // scope 21 at cita-executor/src/main.rs:234:9: 234:10
    }

    bb112 (cleanup): {
        drop(_161) -> bb115;             // scope 21 at cita-executor/src/main.rs:234:9: 234:10
    }

    bb113 (cleanup): {
        switchInt(_191) -> [0: bb115, otherwise: bb112]; // scope 21 at cita-executor/src/main.rs:234:9: 234:10
    }

    bb114 (cleanup): {
        drop(_159) -> bb117;             // scope 21 at cita-executor/src/main.rs:234:9: 234:10
    }

    bb115 (cleanup): {
        switchInt(_192) -> [0: bb117, otherwise: bb114]; // scope 21 at cita-executor/src/main.rs:234:9: 234:10
    }

    bb116 (cleanup): {
        drop(_154) -> bb119;             // scope 20 at cita-executor/src/main.rs:247:5: 247:6
    }

    bb117 (cleanup): {
        switchInt(_193) -> [0: bb119, otherwise: bb116]; // scope 20 at cita-executor/src/main.rs:247:5: 247:6
    }

    bb118 (cleanup): {
        drop(_136) -> bb129;             // scope 17 at cita-executor/src/main.rs:247:5: 247:6
    }

    bb119 (cleanup): {
        switchInt(_194) -> [0: bb129, otherwise: bb118]; // scope 17 at cita-executor/src/main.rs:247:5: 247:6
    }

    bb120 (cleanup): {
        drop(_145) -> bb123;             // scope 17 at cita-executor/src/main.rs:217:9: 217:10
    }

    bb121 (cleanup): {
        switchInt(_195) -> [0: bb123, otherwise: bb120]; // scope 17 at cita-executor/src/main.rs:217:9: 217:10
    }

    bb122 (cleanup): {
        drop(_143) -> bb125;             // scope 17 at cita-executor/src/main.rs:217:9: 217:10
    }

    bb123 (cleanup): {
        switchInt(_196) -> [0: bb125, otherwise: bb122]; // scope 17 at cita-executor/src/main.rs:217:9: 217:10
    }

    bb124 (cleanup): {
        drop(_141) -> bb127;             // scope 17 at cita-executor/src/main.rs:217:9: 217:10
    }

    bb125 (cleanup): {
        switchInt(_197) -> [0: bb127, otherwise: bb124]; // scope 17 at cita-executor/src/main.rs:217:9: 217:10
    }

    bb126 (cleanup): {
        drop(_140) -> bb129;             // scope 17 at cita-executor/src/main.rs:217:9: 217:10
    }

    bb127 (cleanup): {
        switchInt(_198) -> [0: bb129, otherwise: bb126]; // scope 17 at cita-executor/src/main.rs:217:9: 217:10
    }

    bb128 (cleanup): {
        drop(_135) -> bb89;              // scope 15 at cita-executor/src/main.rs:247:5: 247:6
    }

    bb129 (cleanup): {
        switchInt(_199) -> [0: bb89, otherwise: bb128]; // scope 15 at cita-executor/src/main.rs:247:5: 247:6
    }

    bb130 (cleanup): {
        drop(_80) -> bb97;               // scope 10 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb131 (cleanup): {
        switchInt(_200) -> [0: bb97, otherwise: bb130]; // scope 10 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb132 (cleanup): {
        drop(_76) -> bb99;               // scope 9 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb133 (cleanup): {
        switchInt(_201) -> [0: bb99, otherwise: bb132]; // scope 9 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb134 (cleanup): {
        drop(_74) -> bb100;              // scope 8 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb135 (cleanup): {
        drop(_73) -> bb101;              // scope 8 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb136 (cleanup): {
        drop(_71) -> bb102;              // scope 5 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb137 (cleanup): {
        drop(_70) -> bb103;              // scope 5 at cita-executor/src/main.rs:248:1: 248:2
    }

    bb138 (cleanup): {
        drop(_6) -> bb105;               // scope 0 at cita-executor/src/main.rs:144:48: 144:49
    }

    bb139 (cleanup): {
        switchInt(_206) -> [0: bb105, otherwise: bb138]; // scope 0 at cita-executor/src/main.rs:144:48: 144:49
    }

    bb140 (cleanup): {
        drop(_7) -> bb105;               // scope 0 at cita-executor/src/main.rs:143:42: 143:43
    }

    bb141 (cleanup): {
        switchInt(_207) -> [0: bb105, otherwise: bb140]; // scope 0 at cita-executor/src/main.rs:143:42: 143:43
    }

    bb142: {
        goto -> bb18;                    // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:13: 30:64
    }

    bb143: {
        goto -> bb18;                    // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:13: 32:62
    }

    bb144: {
        goto -> bb27;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb145: {
        goto -> bb41;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb146: {
        goto -> bb51;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/main.rs:159:5: 159:35
    let mut _7: &str;                    // in scope 0 at cita-executor/src/main.rs:159:5: 159:35

    bb0: {
        _3 = const "cita_executor";      // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor";      // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/main.rs"; // scope 0 at cita-executor/src/main.rs:159:5: 159:35
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:159:5: 159:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/main.rs:159:5: 159:35
        _1 = (move _2, move _4, move _6, const 159_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/main.rs:159:11: 159:25
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/main.rs:159:11: 159:25

    bb0: {
        _1 = [const "Config: "];         // scope 0 at cita-executor/src/main.rs:159:11: 159:25
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:159:11: 159:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/main.rs:159:11: 159:25
        return;                          // scope 0 at cita-executor/src/main.rs:159:11: 159:25
    }
}

promoted[2] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/main.rs:158:5: 158:51
    let mut _7: &str;                    // in scope 0 at cita-executor/src/main.rs:158:5: 158:51

    bb0: {
        _3 = const "cita_executor";      // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor";      // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/main.rs"; // scope 0 at cita-executor/src/main.rs:158:5: 158:51
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:158:5: 158:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/main.rs:158:5: 158:51
        _1 = (move _2, move _4, move _6, const 158_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/main.rs:158:11: 158:24
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/main.rs:158:11: 158:24

    bb0: {
        _1 = [const "Version: "];        // scope 0 at cita-executor/src/main.rs:158:11: 158:24
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:158:11: 158:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/main.rs:158:11: 158:24
        return;                          // scope 0 at cita-executor/src/main.rs:158:11: 158:24
    }
}

promoted[5] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[6] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-executor/src/main.rs:154:5: 154:66
    let mut _7: &str;                    // in scope 0 at cita-executor/src/main.rs:154:5: 154:66

    bb0: {
        _3 = const "cita_executor";      // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_executor";      // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-executor/src/main.rs"; // scope 0 at cita-executor/src/main.rs:154:5: 154:66
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:154:5: 154:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-executor/src/main.rs:154:5: 154:66
        _1 = (move _2, move _4, move _6, const 154_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-executor/src/main.rs:154:42: 154:57
    let mut _1: [&str; 1];               // in scope 0 at cita-executor/src/main.rs:154:42: 154:57

    bb0: {
        _1 = [const "CITA:executor"];    // scope 0 at cita-executor/src/main.rs:154:42: 154:57
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:154:42: 154:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-executor/src/main.rs:154:42: 154:57
        return;                          // scope 0 at cita-executor/src/main.rs:154:42: 154:57
    }
}

promoted[8] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[9] in main: &LogFavour<'_> = {
    let mut _0: &logger::LogFavour<'_>;  // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
    let mut _1: logger::LogFavour<'_>;   // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:34: 32:61
    let mut _2: &str;                    // in scope 0 at cita-executor/src/main.rs:154:25: 154:40
    let mut _3: &str;                    // in scope 0 at cita-executor/src/main.rs:154:25: 154:40

    bb0: {
        _3 = const "cita-executor";      // scope 0 at cita-executor/src/main.rs:154:25: 154:40
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:154:25: 154:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-executor/src/main.rs:154:25: 154:40
        _1 = LogFavour::<'_>::File(move _2); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:34: 32:61
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
    }
}

promoted[10] in main: &LogFavour<'_> = {
    let mut _0: &logger::LogFavour<'_>;  // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
    let mut _1: logger::LogFavour<'_>;   // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:34: 30:63
    let mut _2: &str;                    // in scope 0 at cita-executor/src/main.rs:154:25: 154:40
    let mut _3: &str;                    // in scope 0 at cita-executor/src/main.rs:154:25: 154:40

    bb0: {
        _3 = const "cita-executor";      // scope 0 at cita-executor/src/main.rs:154:25: 154:40
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:154:25: 154:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-executor/src/main.rs:154:25: 154:40
        _1 = LogFavour::<'_>::Stdout(move _2); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:34: 30:63
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
    }
}

fn main::{closure#0}(_1: [closure@cita-executor/src/main.rs:188:19: 188:26]) -> () {
    debug forward_req_receiver => (_1.0: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-executor/src/main.rs:162:30: 162:50
    debug mq_req_sender => (_1.1: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-executor/src/main.rs:164:10: 164:23
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/main.rs:188:27: 188:27
    let mut _2: std::result::Result<(std::string::String, std::vec::Vec<u8>), crossbeam_channel::RecvError>; // in scope 0 at cita-executor/src/main.rs:189:15: 189:42
    let mut _3: &crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/main.rs:189:15: 189:42
    let mut _4: isize;                   // in scope 0 at cita-executor/src/main.rs:190:13: 190:24
    let _5: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-executor/src/main.rs:190:16: 190:23
    let mut _6: std::result::Result<(), crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at cita-executor/src/main.rs:191:25: 191:52
    let mut _7: &crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/main.rs:191:25: 191:52
    scope 1 {
        debug message => _5;             // in scope 1 at cita-executor/src/main.rs:190:16: 190:23
        scope 2 {
        }
    }

    bb0: {
        goto -> bb1;                     // scope 0 at cita-executor/src/main.rs:188:27: 195:6
    }

    bb1: {
        _3 = &(_1.0: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 0 at cita-executor/src/main.rs:189:15: 189:42
        _2 = crossbeam_channel::Receiver::<(std::string::String, Vec<u8>)>::recv(move _3) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/main.rs:189:15: 189:42
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:189:36: 189:40
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) -> Result<(std::string::String, Vec<u8>), crossbeam_channel::RecvError> {crossbeam_channel::Receiver::<(std::string::String, Vec<u8>)>::recv}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at cita-executor/src/main.rs:189:15: 189:42
        switchInt(move _4) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 0 at cita-executor/src/main.rs:189:9: 189:42
    }

    bb3: {
        drop(_1) -> bb7;                 // scope 0 at cita-executor/src/main.rs:195:5: 195:6
    }

    bb4: {
        unreachable;                     // scope 0 at cita-executor/src/main.rs:189:15: 189:42
    }

    bb5: {
        _5 = move ((_2 as Ok).0: (std::string::String, std::vec::Vec<u8>)); // scope 0 at cita-executor/src/main.rs:190:16: 190:23
        _7 = &(_1.1: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 1 at cita-executor/src/main.rs:191:25: 191:52
        _6 = crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(move _7, move _5) -> [return: bb6, unwind: bb8]; // scope 1 at cita-executor/src/main.rs:191:25: 191:52
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:191:39: 191:43
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_6) -> [return: bb1, unwind: bb8]; // scope 1 at cita-executor/src/main.rs:191:52: 191:53
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/main.rs:195:6: 195:6
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at cita-executor/src/main.rs:195:5: 195:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/main.rs:188:19: 195:6
    }
}

fn main::{closure#1}(_1: [closure@cita-executor/src/main.rs:196:19: 196:26]) -> () {
    debug mq_resp_receiver => (_1.0: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-executor/src/main.rs:165:26: 165:42
    debug forward_resp_sender => (_1.1: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-executor/src/main.rs:163:10: 163:29
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/main.rs:196:27: 196:27
    let mut _2: std::result::Result<(std::string::String, std::vec::Vec<u8>), crossbeam_channel::RecvError>; // in scope 0 at cita-executor/src/main.rs:197:15: 197:38
    let mut _3: &crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/main.rs:197:15: 197:38
    let mut _4: isize;                   // in scope 0 at cita-executor/src/main.rs:198:13: 198:24
    let _5: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-executor/src/main.rs:198:16: 198:23
    let _6: ();                          // in scope 0 at cita-executor/src/main.rs:199:17: 199:59
    let mut _7: std::result::Result<(), crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at cita-executor/src/main.rs:199:17: 199:50
    let mut _8: &crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-executor/src/main.rs:199:17: 199:50
    scope 1 {
        debug message => _5;             // in scope 1 at cita-executor/src/main.rs:198:16: 198:23
    }

    bb0: {
        goto -> bb1;                     // scope 0 at cita-executor/src/main.rs:196:27: 203:6
    }

    bb1: {
        _3 = &(_1.0: crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 0 at cita-executor/src/main.rs:197:15: 197:38
        _2 = crossbeam_channel::Receiver::<(std::string::String, Vec<u8>)>::recv(move _3) -> [return: bb2, unwind: bb8]; // scope 0 at cita-executor/src/main.rs:197:15: 197:38
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:197:32: 197:36
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) -> Result<(std::string::String, Vec<u8>), crossbeam_channel::RecvError> {crossbeam_channel::Receiver::<(std::string::String, Vec<u8>)>::recv}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at cita-executor/src/main.rs:197:15: 197:38
        switchInt(move _4) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 0 at cita-executor/src/main.rs:197:9: 197:38
    }

    bb3: {
        drop(_1) -> bb7;                 // scope 0 at cita-executor/src/main.rs:203:5: 203:6
    }

    bb4: {
        unreachable;                     // scope 0 at cita-executor/src/main.rs:197:15: 197:38
    }

    bb5: {
        _5 = move ((_2 as Ok).0: (std::string::String, std::vec::Vec<u8>)); // scope 0 at cita-executor/src/main.rs:198:16: 198:23
        _8 = &(_1.1: crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 1 at cita-executor/src/main.rs:199:17: 199:50
        _7 = crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(move _8, move _5) -> [return: bb6, unwind: bb8]; // scope 1 at cita-executor/src/main.rs:199:17: 199:50
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:199:37: 199:41
                                         // + literal: Const { ty: for<'a> fn(&'a crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb6: {
        _6 = Result::<(), crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap(move _7) -> [return: bb10, unwind: bb8]; // scope 1 at cita-executor/src/main.rs:199:17: 199:59
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:199:51: 199:57
                                         // + literal: Const { ty: fn(Result<(), crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>) {Result::<(), crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-executor/src/main.rs:203:6: 203:6
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at cita-executor/src/main.rs:203:5: 203:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/main.rs:196:19: 203:6
    }

    bb10: {
        goto -> bb1;                     // scope 1 at cita-executor/src/main.rs:199:17: 199:59
    }
}

fn main::{closure#2}(_1: [closure@cita-executor/src/main.rs:220:36: 220:43]) -> () {
    debug executor => (_1.0: core::libexecutor::executor::Executor); // in scope 0 at cita-executor/src/main.rs:209:17: 209:25
    let mut _0: ();                      // return place in scope 0 at cita-executor/src/main.rs:220:44: 220:44
    let _2: ();                          // in scope 0 at cita-executor/src/main.rs:221:13: 221:31
    let mut _3: &mut core::libexecutor::executor::Executor; // in scope 0 at cita-executor/src/main.rs:221:13: 221:31

    bb0: {
        _3 = &mut (_1.0: core::libexecutor::executor::Executor); // scope 0 at cita-executor/src/main.rs:221:13: 221:31
        _2 = core::libexecutor::executor::Executor::do_loop(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at cita-executor/src/main.rs:221:13: 221:31
                                         // mir::Constant
                                         // + span: cita-executor/src/main.rs:221:22: 221:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut core::libexecutor::executor::Executor) {core::libexecutor::executor::Executor::do_loop}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at cita-executor/src/main.rs:222:9: 222:10
    }

    bb2: {
        return;                          // scope 0 at cita-executor/src/main.rs:222:10: 222:10
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at cita-executor/src/main.rs:222:9: 222:10
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-executor/src/main.rs:220:36: 222:10
    }
}
