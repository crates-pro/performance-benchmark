// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn build() -> App<'_, '_> {
    let mut _0: clap::App<'_, '_>;
    let mut _1: clap::App<'_, '_>;
    let mut _2: clap::App<'_, '_>;
    let mut _3: clap::App<'_, '_>;
    let mut _4: clap::App<'_, '_>;
    let mut _5: clap::App<'_, '_>;
    let mut _6: clap::App<'_, '_>;
    let mut _7: clap::App<'_, '_>;
    let mut _8: clap::App<'_, '_>;
    let mut _9: clap::App<'_, '_>;
    let mut _10: clap::App<'_, '_>;
    let mut _11: clap::App<'_, '_>;
    let mut _12: clap::App<'_, '_>;
    let mut _13: clap::App<'_, '_>;
    let mut _14: clap::App<'_, '_>;
    let mut _15: clap::App<'_, '_>;
    let mut _16: clap::App<'_, '_>;
    let mut _17: clap::App<'_, '_>;
    let mut _18: clap::App<'_, '_>;
    let mut _19: clap::App<'_, '_>;
    let mut _20: clap::App<'_, '_>;
    let mut _21: clap::App<'_, '_>;
    let mut _22: clap::App<'_, '_>;
    let mut _23: clap::App<'_, '_>;
    let mut _24: clap::App<'_, '_>;
    let mut _25: clap::App<'_, '_>;
    let mut _26: clap::App<'_, '_>;
    let mut _27: clap::App<'_, '_>;
    let mut _28: clap::App<'_, '_>;
    let mut _29: clap::App<'_, '_>;
    let mut _30: clap::App<'_, '_>;
    let mut _31: clap::App<'_, '_>;
    let mut _32: clap::App<'_, '_>;
    let mut _33: clap::App<'_, '_>;
    let mut _34: clap::Arg<'_, '_>;
    let mut _35: clap::Arg<'_, '_>;
    let mut _36: clap::Arg<'_, '_>;
    let _37: &str;
    let _38: &str;
    let mut _39: clap::Arg<'_, '_>;
    let mut _40: clap::Arg<'_, '_>;
    let mut _41: clap::Arg<'_, '_>;
    let mut _42: clap::Arg<'_, '_>;
    let mut _43: clap::Arg<'_, '_>;
    let mut _44: clap::Arg<'_, '_>;
    let _45: &str;
    let _46: &str;
    let _47: &str;
    let _48: &str;
    let mut _49: clap::Arg<'_, '_>;
    let mut _50: clap::Arg<'_, '_>;
    let mut _51: clap::Arg<'_, '_>;
    let mut _52: clap::Arg<'_, '_>;
    let mut _53: clap::Arg<'_, '_>;
    let mut _54: clap::Arg<'_, '_>;
    let _55: &str;
    let _56: &str;
    let _57: &str;
    let _58: &str;
    let mut _59: clap::Arg<'_, '_>;
    let mut _60: clap::Arg<'_, '_>;
    let mut _61: clap::Arg<'_, '_>;
    let mut _62: clap::Arg<'_, '_>;
    let mut _63: clap::Arg<'_, '_>;
    let mut _64: clap::Arg<'_, '_>;
    let mut _65: clap::Arg<'_, '_>;
    let mut _66: clap::Arg<'_, '_>;
    let mut _67: clap::Arg<'_, '_>;
    let _68: &str;
    let _69: &str;
    let _70: &str;
    let _71: &str;
    let _72: &str;
    let _73: &str;
    let _74: &str;
    let mut _75: clap::Arg<'_, '_>;
    let mut _76: clap::Arg<'_, '_>;
    let mut _77: clap::Arg<'_, '_>;
    let mut _78: clap::Arg<'_, '_>;
    let mut _79: clap::Arg<'_, '_>;
    let mut _80: clap::Arg<'_, '_>;
    let mut _81: clap::Arg<'_, '_>;
    let mut _82: clap::Arg<'_, '_>;
    let mut _83: clap::Arg<'_, '_>;
    let _84: &str;
    let _85: &str;
    let _86: &str;
    let _87: &str;
    let _88: &str;
    let _89: &str;
    let _90: &str;
    let mut _91: clap::Arg<'_, '_>;
    let mut _92: clap::Arg<'_, '_>;
    let mut _93: clap::Arg<'_, '_>;
    let mut _94: clap::Arg<'_, '_>;
    let mut _95: clap::Arg<'_, '_>;
    let mut _96: clap::Arg<'_, '_>;
    let mut _97: clap::Arg<'_, '_>;
    let mut _98: clap::Arg<'_, '_>;
    let _99: &str;
    let _100: &str;
    let _101: &str;
    let _102: &str;
    let _103: &str;
    let _104: &str;
    let mut _105: clap::Arg<'_, '_>;
    let mut _106: clap::Arg<'_, '_>;
    let mut _107: clap::Arg<'_, '_>;
    let mut _108: clap::Arg<'_, '_>;
    let mut _109: clap::Arg<'_, '_>;
    let _110: &str;
    let _111: &str;
    let _112: &str;
    let mut _113: clap::Arg<'_, '_>;
    let mut _114: clap::Arg<'_, '_>;
    let mut _115: clap::Arg<'_, '_>;
    let mut _116: clap::Arg<'_, '_>;
    let mut _117: clap::Arg<'_, '_>;
    let _118: &str;
    let _119: &str;
    let _120: &str;
    let mut _121: clap::Arg<'_, '_>;
    let mut _122: clap::Arg<'_, '_>;
    let mut _123: clap::Arg<'_, '_>;
    let _124: &str;
    let _125: &str;
    let _126: &str;
    let mut _127: clap::Arg<'_, '_>;
    let mut _128: clap::Arg<'_, '_>;
    let mut _129: clap::Arg<'_, '_>;
    let mut _130: clap::Arg<'_, '_>;
    let mut _131: clap::Arg<'_, '_>;
    let _132: &str;
    let _133: &str;
    let _134: &str;
    let mut _135: clap::Arg<'_, '_>;
    let mut _136: clap::Arg<'_, '_>;
    let mut _137: clap::Arg<'_, '_>;
    let mut _138: clap::Arg<'_, '_>;
    let mut _139: clap::Arg<'_, '_>;
    let mut _140: clap::Arg<'_, '_>;
    let _141: &str;
    let _142: &str;
    let _143: &str;
    let _144: &str;
    let mut _145: clap::Arg<'_, '_>;
    let mut _146: clap::Arg<'_, '_>;
    let mut _147: clap::Arg<'_, '_>;
    let mut _148: clap::Arg<'_, '_>;
    let _149: &str;
    let _150: &str;
    let _151: &str;
    let mut _152: clap::Arg<'_, '_>;
    let mut _153: clap::Arg<'_, '_>;
    let mut _154: clap::Arg<'_, '_>;
    let mut _155: clap::Arg<'_, '_>;
    let mut _156: clap::Arg<'_, '_>;
    let _157: &str;
    let _158: &str;
    let _159: &str;
    let _160: &str;
    let mut _161: clap::Arg<'_, '_>;
    let mut _162: clap::Arg<'_, '_>;
    let mut _163: clap::Arg<'_, '_>;
    let mut _164: clap::Arg<'_, '_>;
    let mut _165: clap::Arg<'_, '_>;
    let mut _166: clap::Arg<'_, '_>;
    let _167: &str;
    let _168: &str;
    let _169: &str;
    let _170: &str;
    let mut _171: clap::Arg<'_, '_>;
    let mut _172: clap::Arg<'_, '_>;
    let mut _173: clap::Arg<'_, '_>;
    let mut _174: clap::Arg<'_, '_>;
    let mut _175: clap::Arg<'_, '_>;
    let mut _176: clap::Arg<'_, '_>;
    let mut _177: clap::Arg<'_, '_>;
    let mut _178: clap::Arg<'_, '_>;
    let _179: &str;
    let _180: &str;
    let _181: &str;
    let _182: &str;
    let _183: &str;
    let _184: &str;
    let _185: &str;
    let mut _186: clap::Arg<'_, '_>;
    let mut _187: clap::Arg<'_, '_>;
    let mut _188: clap::Arg<'_, '_>;
    let mut _189: clap::Arg<'_, '_>;
    let mut _190: clap::Arg<'_, '_>;
    let mut _191: clap::Arg<'_, '_>;
    let mut _192: clap::Arg<'_, '_>;
    let mut _193: clap::Arg<'_, '_>;
    let mut _194: clap::Arg<'_, '_>;
    let _195: &str;
    let _196: &str;
    let _197: &str;
    let _198: &str;
    let _199: &str;
    let _200: &str;
    let _201: &str;
    let mut _202: clap::Arg<'_, '_>;
    let mut _203: clap::Arg<'_, '_>;
    let mut _204: clap::Arg<'_, '_>;
    let mut _205: clap::Arg<'_, '_>;
    let _206: &str;
    let _207: &str;
    let _208: &str;
    let mut _209: clap::Arg<'_, '_>;
    let mut _210: clap::Arg<'_, '_>;
    let mut _211: clap::Arg<'_, '_>;
    let mut _212: clap::Arg<'_, '_>;
    let mut _213: clap::Arg<'_, '_>;
    let mut _214: clap::Arg<'_, '_>;
    let mut _215: clap::Arg<'_, '_>;
    let _216: &str;
    let _217: &str;
    let _218: &str;
    let _219: &str;
    let mut _220: clap::Arg<'_, '_>;
    let mut _221: clap::Arg<'_, '_>;
    let mut _222: clap::Arg<'_, '_>;
    let mut _223: clap::Arg<'_, '_>;
    let mut _224: clap::Arg<'_, '_>;
    let mut _225: clap::Arg<'_, '_>;
    let mut _226: clap::Arg<'_, '_>;
    let mut _227: clap::Arg<'_, '_>;
    let mut _228: clap::Arg<'_, '_>;
    let _229: &str;
    let _230: &str;
    let _231: &str;
    let _232: &str;
    let _233: &str;
    let _234: &str;
    let _235: &str;
    let mut _236: clap::Arg<'_, '_>;
    let mut _237: clap::Arg<'_, '_>;
    let mut _238: clap::Arg<'_, '_>;
    let mut _239: clap::Arg<'_, '_>;
    let mut _240: clap::Arg<'_, '_>;
    let mut _241: clap::Arg<'_, '_>;
    let mut _242: clap::Arg<'_, '_>;
    let mut _243: clap::Arg<'_, '_>;
    let mut _244: clap::Arg<'_, '_>;
    let _245: &str;
    let _246: &str;
    let _247: &str;
    let _248: &str;
    let _249: &str;
    let _250: &str;
    let _251: &str;
    let mut _252: clap::Arg<'_, '_>;
    let mut _253: clap::Arg<'_, '_>;
    let mut _254: clap::Arg<'_, '_>;
    let mut _255: clap::Arg<'_, '_>;
    let mut _256: clap::Arg<'_, '_>;
    let mut _257: clap::Arg<'_, '_>;
    let mut _258: clap::Arg<'_, '_>;
    let mut _259: clap::Arg<'_, '_>;
    let mut _260: clap::Arg<'_, '_>;
    let _261: &str;
    let _262: &str;
    let _263: &str;
    let _264: &str;
    let _265: &str;
    let _266: &str;
    let _267: &str;
    let mut _268: clap::Arg<'_, '_>;
    let mut _269: clap::Arg<'_, '_>;
    let mut _270: clap::Arg<'_, '_>;
    let mut _271: clap::Arg<'_, '_>;
    let mut _272: clap::Arg<'_, '_>;
    let mut _273: clap::Arg<'_, '_>;
    let mut _274: clap::Arg<'_, '_>;
    let mut _275: clap::Arg<'_, '_>;
    let mut _276: clap::Arg<'_, '_>;
    let _277: &str;
    let _278: &str;
    let _279: &str;
    let _280: &str;
    let _281: &str;
    let _282: &str;
    let _283: &str;
    let mut _284: clap::Arg<'_, '_>;
    let mut _285: clap::Arg<'_, '_>;
    let mut _286: clap::Arg<'_, '_>;
    let mut _287: clap::Arg<'_, '_>;
    let mut _288: clap::Arg<'_, '_>;
    let mut _289: clap::Arg<'_, '_>;
    let mut _290: clap::Arg<'_, '_>;
    let mut _291: clap::Arg<'_, '_>;
    let mut _292: clap::Arg<'_, '_>;
    let mut _293: clap::Arg<'_, '_>;
    let mut _294: clap::Arg<'_, '_>;
    let _295: &str;
    let _296: &str;
    let mut _297: &[&str];
    let _298: &str;
    let _299: &str;
    let _300: &str;
    let _301: &str;
    let _302: &str;
    let _303: &str;
    let mut _304: clap::Arg<'_, '_>;
    let mut _305: clap::Arg<'_, '_>;
    let mut _306: clap::Arg<'_, '_>;
    let mut _307: clap::Arg<'_, '_>;
    let mut _308: clap::Arg<'_, '_>;
    let _309: &str;
    let _310: &str;
    let _311: &str;
    let mut _312: clap::Arg<'_, '_>;
    let mut _313: clap::Arg<'_, '_>;
    let mut _314: clap::Arg<'_, '_>;
    let mut _315: clap::Arg<'_, '_>;
    let mut _316: clap::Arg<'_, '_>;
    let mut _317: clap::Arg<'_, '_>;
    let mut _318: clap::Arg<'_, '_>;
    let mut _319: clap::Arg<'_, '_>;
    let mut _320: clap::Arg<'_, '_>;
    let _321: &str;
    let _322: &str;
    let _323: &str;
    let _324: &str;
    let _325: &str;
    let _326: &str;
    let _327: &str;
    let mut _328: clap::Arg<'_, '_>;
    let mut _329: clap::Arg<'_, '_>;
    let mut _330: clap::Arg<'_, '_>;
    let mut _331: clap::Arg<'_, '_>;
    let mut _332: clap::Arg<'_, '_>;
    let mut _333: clap::Arg<'_, '_>;
    let mut _334: clap::Arg<'_, '_>;
    let _335: &str;
    let _336: &str;
    let mut _337: &[&str];
    let _338: &str;
    let mut _339: clap::Arg<'_, '_>;
    let mut _340: clap::Arg<'_, '_>;
    let mut _341: clap::Arg<'_, '_>;
    let _342: &str;
    let _343: &str;
    let _344: &str;
    let mut _345: clap::Arg<'_, '_>;
    let mut _346: clap::Arg<'_, '_>;
    let mut _347: clap::Arg<'_, '_>;
    let mut _348: clap::Arg<'_, '_>;
    let _349: &str;
    let _350: &str;
    let _351: &str;
    let mut _352: clap::Arg<'_, '_>;
    let mut _353: clap::Arg<'_, '_>;
    let mut _354: clap::Arg<'_, '_>;
    let mut _355: clap::Arg<'_, '_>;
    let mut _356: clap::Arg<'_, '_>;
    let mut _357: clap::Arg<'_, '_>;
    let mut _358: clap::Arg<'_, '_>;
    let mut _359: clap::Arg<'_, '_>;
    let _360: &str;
    let _361: &str;
    let _362: &str;
    let _363: &str;
    let _364: &str;
    let mut _365: clap::Arg<'_, '_>;
    let mut _366: clap::Arg<'_, '_>;
    let mut _367: clap::Arg<'_, '_>;
    let mut _368: clap::Arg<'_, '_>;
    let mut _369: clap::Arg<'_, '_>;
    let _370: &str;
    let _371: &str;
    let _372: &str;
    let mut _373: clap::Arg<'_, '_>;
    let mut _374: clap::Arg<'_, '_>;
    let mut _375: clap::Arg<'_, '_>;
    let mut _376: clap::Arg<'_, '_>;
    let mut _377: clap::Arg<'_, '_>;
    let _378: &str;
    let _379: &str;
    let _380: &str;
    let mut _381: &[&str; 8];
    let mut _382: &[&str; 4];
    let mut _383: bool;
    let mut _384: bool;
    let mut _385: bool;
    let mut _386: bool;
    let mut _387: bool;
    let mut _388: bool;
    let mut _389: bool;
    let mut _390: bool;
    let mut _391: bool;
    let mut _392: bool;
    let mut _393: bool;
    let mut _394: bool;
    let mut _395: bool;
    let mut _396: bool;
    let mut _397: bool;
    let mut _398: bool;
    let mut _399: bool;
    let mut _400: bool;
    let mut _401: bool;
    let mut _402: bool;
    let mut _403: bool;
    let mut _404: bool;
    let mut _405: bool;
    let mut _406: bool;
    let mut _407: bool;
    let mut _408: bool;
    let mut _409: bool;
    let mut _410: bool;
    let mut _411: bool;
    let mut _412: bool;
    let mut _413: bool;

    bb0: {
        _383 = const false;
        _384 = const false;
        _385 = const false;
        _386 = const false;
        _387 = const false;
        _388 = const false;
        _389 = const false;
        _390 = const false;
        _391 = const false;
        _392 = const false;
        _393 = const false;
        _394 = const false;
        _395 = const false;
        _396 = const false;
        _397 = const false;
        _398 = const false;
        _399 = const false;
        _400 = const false;
        _401 = const false;
        _402 = const false;
        _403 = const false;
        _404 = const false;
        _405 = const false;
        _406 = const false;
        _407 = const false;
        _408 = const false;
        _409 = const false;
        _410 = const false;
        _411 = const false;
        _412 = const false;
        _413 = const false;
        _33 = App::<'_, '_>::new::<&str>(const "lsd") -> [return: bb1, unwind continue];
    }

    bb1: {
        _32 = App::<'_, '_>::version::<&str>(move _33, const "0.20.1") -> [return: bb2, unwind continue];
    }

    bb2: {
        _31 = App::<'_, '_>::about::<&str>(move _32, const "An ls command with a lot of pretty colors and some other stuff.") -> [return: bb3, unwind continue];
    }

    bb3: {
        _413 = const true;
        _37 = const "FILE";
        _36 = Arg::<'_, '_>::with_name(_37) -> [return: bb4, unwind: bb298];
    }

    bb4: {
        _35 = Arg::<'_, '_>::multiple(move _36, const true) -> [return: bb5, unwind: bb298];
    }

    bb5: {
        _38 = const ".";
        _34 = Arg::<'_, '_>::default_value(move _35, _38) -> [return: bb6, unwind: bb298];
    }

    bb6: {
        _413 = const false;
        _30 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _31, move _34) -> [return: bb7, unwind: bb298];
    }

    bb7: {
        _412 = const true;
        _413 = const false;
        _45 = const "all";
        _44 = Arg::<'_, '_>::with_name(_45) -> [return: bb8, unwind: bb296];
    }

    bb8: {
        _43 = Arg::<'_, '_>::short::<&str>(move _44, const "a") -> [return: bb9, unwind: bb296];
    }

    bb9: {
        _46 = const "almost-all";
        _42 = Arg::<'_, '_>::overrides_with(move _43, _46) -> [return: bb10, unwind: bb296];
    }

    bb10: {
        _47 = const "all";
        _41 = Arg::<'_, '_>::long(move _42, _47) -> [return: bb11, unwind: bb296];
    }

    bb11: {
        _40 = Arg::<'_, '_>::multiple(move _41, const true) -> [return: bb12, unwind: bb296];
    }

    bb12: {
        _48 = const "Do not ignore entries starting with .";
        _39 = Arg::<'_, '_>::help(move _40, _48) -> [return: bb13, unwind: bb296];
    }

    bb13: {
        _412 = const false;
        _29 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _30, move _39) -> [return: bb14, unwind: bb296];
    }

    bb14: {
        _411 = const true;
        _412 = const false;
        _55 = const "almost-all";
        _54 = Arg::<'_, '_>::with_name(_55) -> [return: bb15, unwind: bb294];
    }

    bb15: {
        _53 = Arg::<'_, '_>::short::<&str>(move _54, const "A") -> [return: bb16, unwind: bb294];
    }

    bb16: {
        _56 = const "all";
        _52 = Arg::<'_, '_>::overrides_with(move _53, _56) -> [return: bb17, unwind: bb294];
    }

    bb17: {
        _57 = const "almost-all";
        _51 = Arg::<'_, '_>::long(move _52, _57) -> [return: bb18, unwind: bb294];
    }

    bb18: {
        _50 = Arg::<'_, '_>::multiple(move _51, const true) -> [return: bb19, unwind: bb294];
    }

    bb19: {
        _58 = const "Do not list implied . and ..";
        _49 = Arg::<'_, '_>::help(move _50, _58) -> [return: bb20, unwind: bb294];
    }

    bb20: {
        _411 = const false;
        _28 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _29, move _49) -> [return: bb21, unwind: bb294];
    }

    bb21: {
        _410 = const true;
        _411 = const false;
        _68 = const "color";
        _67 = Arg::<'_, '_>::with_name(_68) -> [return: bb22, unwind: bb292];
    }

    bb22: {
        _69 = const "color";
        _66 = Arg::<'_, '_>::long(move _67, _69) -> [return: bb23, unwind: bb292];
    }

    bb23: {
        _70 = const "always";
        _65 = Arg::<'_, '_>::possible_value(move _66, _70) -> [return: bb24, unwind: bb292];
    }

    bb24: {
        _71 = const "auto";
        _64 = Arg::<'_, '_>::possible_value(move _65, _71) -> [return: bb25, unwind: bb292];
    }

    bb25: {
        _72 = const "never";
        _63 = Arg::<'_, '_>::possible_value(move _64, _72) -> [return: bb26, unwind: bb292];
    }

    bb26: {
        _73 = const "auto";
        _62 = Arg::<'_, '_>::default_value(move _63, _73) -> [return: bb27, unwind: bb292];
    }

    bb27: {
        _61 = Arg::<'_, '_>::multiple(move _62, const true) -> [return: bb28, unwind: bb292];
    }

    bb28: {
        _60 = Arg::<'_, '_>::number_of_values(move _61, const 1_u64) -> [return: bb29, unwind: bb292];
    }

    bb29: {
        _74 = const "When to use terminal colours";
        _59 = Arg::<'_, '_>::help(move _60, _74) -> [return: bb30, unwind: bb292];
    }

    bb30: {
        _410 = const false;
        _27 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _28, move _59) -> [return: bb31, unwind: bb292];
    }

    bb31: {
        _409 = const true;
        _410 = const false;
        _84 = const "icon";
        _83 = Arg::<'_, '_>::with_name(_84) -> [return: bb32, unwind: bb290];
    }

    bb32: {
        _85 = const "icon";
        _82 = Arg::<'_, '_>::long(move _83, _85) -> [return: bb33, unwind: bb290];
    }

    bb33: {
        _86 = const "always";
        _81 = Arg::<'_, '_>::possible_value(move _82, _86) -> [return: bb34, unwind: bb290];
    }

    bb34: {
        _87 = const "auto";
        _80 = Arg::<'_, '_>::possible_value(move _81, _87) -> [return: bb35, unwind: bb290];
    }

    bb35: {
        _88 = const "never";
        _79 = Arg::<'_, '_>::possible_value(move _80, _88) -> [return: bb36, unwind: bb290];
    }

    bb36: {
        _89 = const "auto";
        _78 = Arg::<'_, '_>::default_value(move _79, _89) -> [return: bb37, unwind: bb290];
    }

    bb37: {
        _77 = Arg::<'_, '_>::multiple(move _78, const true) -> [return: bb38, unwind: bb290];
    }

    bb38: {
        _76 = Arg::<'_, '_>::number_of_values(move _77, const 1_u64) -> [return: bb39, unwind: bb290];
    }

    bb39: {
        _90 = const "When to print the icons";
        _75 = Arg::<'_, '_>::help(move _76, _90) -> [return: bb40, unwind: bb290];
    }

    bb40: {
        _409 = const false;
        _26 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _27, move _75) -> [return: bb41, unwind: bb290];
    }

    bb41: {
        _408 = const true;
        _409 = const false;
        _99 = const "icon-theme";
        _98 = Arg::<'_, '_>::with_name(_99) -> [return: bb42, unwind: bb288];
    }

    bb42: {
        _100 = const "icon-theme";
        _97 = Arg::<'_, '_>::long(move _98, _100) -> [return: bb43, unwind: bb288];
    }

    bb43: {
        _101 = const "fancy";
        _96 = Arg::<'_, '_>::possible_value(move _97, _101) -> [return: bb44, unwind: bb288];
    }

    bb44: {
        _102 = const "unicode";
        _95 = Arg::<'_, '_>::possible_value(move _96, _102) -> [return: bb45, unwind: bb288];
    }

    bb45: {
        _103 = const "fancy";
        _94 = Arg::<'_, '_>::default_value(move _95, _103) -> [return: bb46, unwind: bb288];
    }

    bb46: {
        _93 = Arg::<'_, '_>::multiple(move _94, const true) -> [return: bb47, unwind: bb288];
    }

    bb47: {
        _92 = Arg::<'_, '_>::number_of_values(move _93, const 1_u64) -> [return: bb48, unwind: bb288];
    }

    bb48: {
        _104 = const "Whether to use fancy or unicode icons";
        _91 = Arg::<'_, '_>::help(move _92, _104) -> [return: bb49, unwind: bb288];
    }

    bb49: {
        _408 = const false;
        _25 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _26, move _91) -> [return: bb50, unwind: bb288];
    }

    bb50: {
        _407 = const true;
        _408 = const false;
        _110 = const "indicators";
        _109 = Arg::<'_, '_>::with_name(_110) -> [return: bb51, unwind: bb286];
    }

    bb51: {
        _108 = Arg::<'_, '_>::short::<&str>(move _109, const "F") -> [return: bb52, unwind: bb286];
    }

    bb52: {
        _111 = const "classify";
        _107 = Arg::<'_, '_>::long(move _108, _111) -> [return: bb53, unwind: bb286];
    }

    bb53: {
        _106 = Arg::<'_, '_>::multiple(move _107, const true) -> [return: bb54, unwind: bb286];
    }

    bb54: {
        _112 = const "Append indicator (one of */=>@|) at the end of the file names";
        _105 = Arg::<'_, '_>::help(move _106, _112) -> [return: bb55, unwind: bb286];
    }

    bb55: {
        _407 = const false;
        _24 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _25, move _105) -> [return: bb56, unwind: bb286];
    }

    bb56: {
        _406 = const true;
        _407 = const false;
        _118 = const "long";
        _117 = Arg::<'_, '_>::with_name(_118) -> [return: bb57, unwind: bb284];
    }

    bb57: {
        _116 = Arg::<'_, '_>::short::<&str>(move _117, const "l") -> [return: bb58, unwind: bb284];
    }

    bb58: {
        _119 = const "long";
        _115 = Arg::<'_, '_>::long(move _116, _119) -> [return: bb59, unwind: bb284];
    }

    bb59: {
        _114 = Arg::<'_, '_>::multiple(move _115, const true) -> [return: bb60, unwind: bb284];
    }

    bb60: {
        _120 = const "Display extended file metadata as a table";
        _113 = Arg::<'_, '_>::help(move _114, _120) -> [return: bb61, unwind: bb284];
    }

    bb61: {
        _406 = const false;
        _23 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _24, move _113) -> [return: bb62, unwind: bb284];
    }

    bb62: {
        _405 = const true;
        _406 = const false;
        _124 = const "ignore-config";
        _123 = Arg::<'_, '_>::with_name(_124) -> [return: bb63, unwind: bb282];
    }

    bb63: {
        _125 = const "ignore-config";
        _122 = Arg::<'_, '_>::long(move _123, _125) -> [return: bb64, unwind: bb282];
    }

    bb64: {
        _126 = const "Ignore the configuration file";
        _121 = Arg::<'_, '_>::help(move _122, _126) -> [return: bb65, unwind: bb282];
    }

    bb65: {
        _405 = const false;
        _22 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _23, move _121) -> [return: bb66, unwind: bb282];
    }

    bb66: {
        _404 = const true;
        _405 = const false;
        _132 = const "oneline";
        _131 = Arg::<'_, '_>::with_name(_132) -> [return: bb67, unwind: bb280];
    }

    bb67: {
        _130 = Arg::<'_, '_>::short::<&str>(move _131, const "1") -> [return: bb68, unwind: bb280];
    }

    bb68: {
        _133 = const "oneline";
        _129 = Arg::<'_, '_>::long(move _130, _133) -> [return: bb69, unwind: bb280];
    }

    bb69: {
        _128 = Arg::<'_, '_>::multiple(move _129, const true) -> [return: bb70, unwind: bb280];
    }

    bb70: {
        _134 = const "Display one entry per line";
        _127 = Arg::<'_, '_>::help(move _128, _134) -> [return: bb71, unwind: bb280];
    }

    bb71: {
        _404 = const false;
        _21 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _22, move _127) -> [return: bb72, unwind: bb280];
    }

    bb72: {
        _403 = const true;
        _404 = const false;
        _141 = const "recursive";
        _140 = Arg::<'_, '_>::with_name(_141) -> [return: bb73, unwind: bb278];
    }

    bb73: {
        _139 = Arg::<'_, '_>::short::<&str>(move _140, const "R") -> [return: bb74, unwind: bb278];
    }

    bb74: {
        _142 = const "recursive";
        _138 = Arg::<'_, '_>::long(move _139, _142) -> [return: bb75, unwind: bb278];
    }

    bb75: {
        _137 = Arg::<'_, '_>::multiple(move _138, const true) -> [return: bb76, unwind: bb278];
    }

    bb76: {
        _143 = const "tree";
        _136 = Arg::<'_, '_>::conflicts_with(move _137, _143) -> [return: bb77, unwind: bb278];
    }

    bb77: {
        _144 = const "Recurse into directories";
        _135 = Arg::<'_, '_>::help(move _136, _144) -> [return: bb78, unwind: bb278];
    }

    bb78: {
        _403 = const false;
        _20 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _21, move _135) -> [return: bb79, unwind: bb278];
    }

    bb79: {
        _402 = const true;
        _403 = const false;
        _149 = const "human_readable";
        _148 = Arg::<'_, '_>::with_name(_149) -> [return: bb80, unwind: bb276];
    }

    bb80: {
        _147 = Arg::<'_, '_>::short::<&str>(move _148, const "h") -> [return: bb81, unwind: bb276];
    }

    bb81: {
        _150 = const "human-readable";
        _146 = Arg::<'_, '_>::long(move _147, _150) -> [return: bb82, unwind: bb276];
    }

    bb82: {
        _151 = const "For ls compatibility purposes ONLY, currently set by default";
        _145 = Arg::<'_, '_>::help(move _146, _151) -> [return: bb83, unwind: bb276];
    }

    bb83: {
        _402 = const false;
        _19 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _20, move _145) -> [return: bb84, unwind: bb276];
    }

    bb84: {
        _401 = const true;
        _402 = const false;
        _157 = const "tree";
        _156 = Arg::<'_, '_>::with_name(_157) -> [return: bb85, unwind: bb274];
    }

    bb85: {
        _158 = const "tree";
        _155 = Arg::<'_, '_>::long(move _156, _158) -> [return: bb86, unwind: bb274];
    }

    bb86: {
        _154 = Arg::<'_, '_>::multiple(move _155, const true) -> [return: bb87, unwind: bb274];
    }

    bb87: {
        _159 = const "recursive";
        _153 = Arg::<'_, '_>::conflicts_with(move _154, _159) -> [return: bb88, unwind: bb274];
    }

    bb88: {
        _160 = const "Recurse into directories and present the result as a tree";
        _152 = Arg::<'_, '_>::help(move _153, _160) -> [return: bb89, unwind: bb274];
    }

    bb89: {
        _401 = const false;
        _18 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _19, move _152) -> [return: bb90, unwind: bb274];
    }

    bb90: {
        _400 = const true;
        _401 = const false;
        _167 = const "depth";
        _166 = Arg::<'_, '_>::with_name(_167) -> [return: bb91, unwind: bb272];
    }

    bb91: {
        _168 = const "depth";
        _165 = Arg::<'_, '_>::long(move _166, _168) -> [return: bb92, unwind: bb272];
    }

    bb92: {
        _164 = Arg::<'_, '_>::multiple(move _165, const true) -> [return: bb93, unwind: bb272];
    }

    bb93: {
        _163 = Arg::<'_, '_>::takes_value(move _164, const true) -> [return: bb94, unwind: bb272];
    }

    bb94: {
        _169 = const "num";
        _162 = Arg::<'_, '_>::value_name(move _163, _169) -> [return: bb95, unwind: bb272];
    }

    bb95: {
        _170 = const "Stop recursing into directories after reaching specified depth";
        _161 = Arg::<'_, '_>::help(move _162, _170) -> [return: bb96, unwind: bb272];
    }

    bb96: {
        _400 = const false;
        _17 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _18, move _161) -> [return: bb97, unwind: bb272];
    }

    bb97: {
        _399 = const true;
        _400 = const false;
        _179 = const "directory-only";
        _178 = Arg::<'_, '_>::with_name(_179) -> [return: bb98, unwind: bb270];
    }

    bb98: {
        _177 = Arg::<'_, '_>::short::<&str>(move _178, const "d") -> [return: bb99, unwind: bb270];
    }

    bb99: {
        _180 = const "directory-only";
        _176 = Arg::<'_, '_>::long(move _177, _180) -> [return: bb100, unwind: bb270];
    }

    bb100: {
        _181 = const "all";
        _175 = Arg::<'_, '_>::conflicts_with(move _176, _181) -> [return: bb101, unwind: bb270];
    }

    bb101: {
        _182 = const "almost-all";
        _174 = Arg::<'_, '_>::conflicts_with(move _175, _182) -> [return: bb102, unwind: bb270];
    }

    bb102: {
        _183 = const "depth";
        _173 = Arg::<'_, '_>::conflicts_with(move _174, _183) -> [return: bb103, unwind: bb270];
    }

    bb103: {
        _184 = const "recursive";
        _172 = Arg::<'_, '_>::conflicts_with(move _173, _184) -> [return: bb104, unwind: bb270];
    }

    bb104: {
        _185 = const "Display directories themselves, and not their contents (recursively when used with --tree)";
        _171 = Arg::<'_, '_>::help(move _172, _185) -> [return: bb105, unwind: bb270];
    }

    bb105: {
        _399 = const false;
        _16 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _17, move _171) -> [return: bb106, unwind: bb270];
    }

    bb106: {
        _398 = const true;
        _399 = const false;
        _195 = const "size";
        _194 = Arg::<'_, '_>::with_name(_195) -> [return: bb107, unwind: bb268];
    }

    bb107: {
        _196 = const "size";
        _193 = Arg::<'_, '_>::long(move _194, _196) -> [return: bb108, unwind: bb268];
    }

    bb108: {
        _197 = const "default";
        _192 = Arg::<'_, '_>::possible_value(move _193, _197) -> [return: bb109, unwind: bb268];
    }

    bb109: {
        _198 = const "short";
        _191 = Arg::<'_, '_>::possible_value(move _192, _198) -> [return: bb110, unwind: bb268];
    }

    bb110: {
        _199 = const "bytes";
        _190 = Arg::<'_, '_>::possible_value(move _191, _199) -> [return: bb111, unwind: bb268];
    }

    bb111: {
        _200 = const "default";
        _189 = Arg::<'_, '_>::default_value(move _190, _200) -> [return: bb112, unwind: bb268];
    }

    bb112: {
        _188 = Arg::<'_, '_>::multiple(move _189, const true) -> [return: bb113, unwind: bb268];
    }

    bb113: {
        _187 = Arg::<'_, '_>::number_of_values(move _188, const 1_u64) -> [return: bb114, unwind: bb268];
    }

    bb114: {
        _201 = const "How to display size";
        _186 = Arg::<'_, '_>::help(move _187, _201) -> [return: bb115, unwind: bb268];
    }

    bb115: {
        _398 = const false;
        _15 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _16, move _186) -> [return: bb116, unwind: bb268];
    }

    bb116: {
        _397 = const true;
        _398 = const false;
        _206 = const "total-size";
        _205 = Arg::<'_, '_>::with_name(_206) -> [return: bb117, unwind: bb266];
    }

    bb117: {
        _207 = const "total-size";
        _204 = Arg::<'_, '_>::long(move _205, _207) -> [return: bb118, unwind: bb266];
    }

    bb118: {
        _203 = Arg::<'_, '_>::multiple(move _204, const true) -> [return: bb119, unwind: bb266];
    }

    bb119: {
        _208 = const "Display the total size of directories";
        _202 = Arg::<'_, '_>::help(move _203, _208) -> [return: bb120, unwind: bb266];
    }

    bb120: {
        _397 = const false;
        _14 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _15, move _202) -> [return: bb121, unwind: bb266];
    }

    bb121: {
        _396 = const true;
        _397 = const false;
        _216 = const "date";
        _215 = Arg::<'_, '_>::with_name(_216) -> [return: bb122, unwind: bb264];
    }

    bb122: {
        _217 = const "date";
        _214 = Arg::<'_, '_>::long(move _215, _217) -> [return: bb123, unwind: bb264];
    }

    bb123: {
        _213 = Arg::<'_, '_>::validator::<fn(std::string::String) -> Result<(), std::string::String> {validate_date_argument}>(move _214, validate_date_argument) -> [return: bb124, unwind: bb264];
    }

    bb124: {
        _218 = const "date";
        _212 = Arg::<'_, '_>::default_value(move _213, _218) -> [return: bb125, unwind: bb264];
    }

    bb125: {
        _211 = Arg::<'_, '_>::multiple(move _212, const true) -> [return: bb126, unwind: bb264];
    }

    bb126: {
        _210 = Arg::<'_, '_>::number_of_values(move _211, const 1_u64) -> [return: bb127, unwind: bb264];
    }

    bb127: {
        _219 = const "How to display date [possible values: date, relative, +date-time-format]";
        _209 = Arg::<'_, '_>::help(move _210, _219) -> [return: bb128, unwind: bb264];
    }

    bb128: {
        _396 = const false;
        _13 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _14, move _209) -> [return: bb129, unwind: bb264];
    }

    bb129: {
        _395 = const true;
        _396 = const false;
        _229 = const "timesort";
        _228 = Arg::<'_, '_>::with_name(_229) -> [return: bb130, unwind: bb262];
    }

    bb130: {
        _227 = Arg::<'_, '_>::short::<&str>(move _228, const "t") -> [return: bb131, unwind: bb262];
    }

    bb131: {
        _230 = const "timesort";
        _226 = Arg::<'_, '_>::long(move _227, _230) -> [return: bb132, unwind: bb262];
    }

    bb132: {
        _231 = const "sizesort";
        _225 = Arg::<'_, '_>::overrides_with(move _226, _231) -> [return: bb133, unwind: bb262];
    }

    bb133: {
        _232 = const "extensionsort";
        _224 = Arg::<'_, '_>::overrides_with(move _225, _232) -> [return: bb134, unwind: bb262];
    }

    bb134: {
        _233 = const "versionsort";
        _223 = Arg::<'_, '_>::overrides_with(move _224, _233) -> [return: bb135, unwind: bb262];
    }

    bb135: {
        _234 = const "sort";
        _222 = Arg::<'_, '_>::overrides_with(move _223, _234) -> [return: bb136, unwind: bb262];
    }

    bb136: {
        _221 = Arg::<'_, '_>::multiple(move _222, const true) -> [return: bb137, unwind: bb262];
    }

    bb137: {
        _235 = const "Sort by time modified";
        _220 = Arg::<'_, '_>::help(move _221, _235) -> [return: bb138, unwind: bb262];
    }

    bb138: {
        _395 = const false;
        _12 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _13, move _220) -> [return: bb139, unwind: bb262];
    }

    bb139: {
        _394 = const true;
        _395 = const false;
        _245 = const "sizesort";
        _244 = Arg::<'_, '_>::with_name(_245) -> [return: bb140, unwind: bb260];
    }

    bb140: {
        _243 = Arg::<'_, '_>::short::<&str>(move _244, const "S") -> [return: bb141, unwind: bb260];
    }

    bb141: {
        _246 = const "sizesort";
        _242 = Arg::<'_, '_>::long(move _243, _246) -> [return: bb142, unwind: bb260];
    }

    bb142: {
        _247 = const "timesort";
        _241 = Arg::<'_, '_>::overrides_with(move _242, _247) -> [return: bb143, unwind: bb260];
    }

    bb143: {
        _248 = const "extensionsort";
        _240 = Arg::<'_, '_>::overrides_with(move _241, _248) -> [return: bb144, unwind: bb260];
    }

    bb144: {
        _249 = const "versionsort";
        _239 = Arg::<'_, '_>::overrides_with(move _240, _249) -> [return: bb145, unwind: bb260];
    }

    bb145: {
        _250 = const "sort";
        _238 = Arg::<'_, '_>::overrides_with(move _239, _250) -> [return: bb146, unwind: bb260];
    }

    bb146: {
        _237 = Arg::<'_, '_>::multiple(move _238, const true) -> [return: bb147, unwind: bb260];
    }

    bb147: {
        _251 = const "Sort by size";
        _236 = Arg::<'_, '_>::help(move _237, _251) -> [return: bb148, unwind: bb260];
    }

    bb148: {
        _394 = const false;
        _11 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _12, move _236) -> [return: bb149, unwind: bb260];
    }

    bb149: {
        _393 = const true;
        _394 = const false;
        _261 = const "extensionsort";
        _260 = Arg::<'_, '_>::with_name(_261) -> [return: bb150, unwind: bb258];
    }

    bb150: {
        _259 = Arg::<'_, '_>::short::<&str>(move _260, const "X") -> [return: bb151, unwind: bb258];
    }

    bb151: {
        _262 = const "extensionsort";
        _258 = Arg::<'_, '_>::long(move _259, _262) -> [return: bb152, unwind: bb258];
    }

    bb152: {
        _263 = const "sizesort";
        _257 = Arg::<'_, '_>::overrides_with(move _258, _263) -> [return: bb153, unwind: bb258];
    }

    bb153: {
        _264 = const "timesort";
        _256 = Arg::<'_, '_>::overrides_with(move _257, _264) -> [return: bb154, unwind: bb258];
    }

    bb154: {
        _265 = const "versionsort";
        _255 = Arg::<'_, '_>::overrides_with(move _256, _265) -> [return: bb155, unwind: bb258];
    }

    bb155: {
        _266 = const "sort";
        _254 = Arg::<'_, '_>::overrides_with(move _255, _266) -> [return: bb156, unwind: bb258];
    }

    bb156: {
        _253 = Arg::<'_, '_>::multiple(move _254, const true) -> [return: bb157, unwind: bb258];
    }

    bb157: {
        _267 = const "Sort by file extension";
        _252 = Arg::<'_, '_>::help(move _253, _267) -> [return: bb158, unwind: bb258];
    }

    bb158: {
        _393 = const false;
        _10 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _11, move _252) -> [return: bb159, unwind: bb258];
    }

    bb159: {
        _392 = const true;
        _393 = const false;
        _277 = const "versionsort";
        _276 = Arg::<'_, '_>::with_name(_277) -> [return: bb160, unwind: bb256];
    }

    bb160: {
        _275 = Arg::<'_, '_>::short::<&str>(move _276, const "v") -> [return: bb161, unwind: bb256];
    }

    bb161: {
        _278 = const "versionsort";
        _274 = Arg::<'_, '_>::long(move _275, _278) -> [return: bb162, unwind: bb256];
    }

    bb162: {
        _273 = Arg::<'_, '_>::multiple(move _274, const true) -> [return: bb163, unwind: bb256];
    }

    bb163: {
        _279 = const "timesort";
        _272 = Arg::<'_, '_>::overrides_with(move _273, _279) -> [return: bb164, unwind: bb256];
    }

    bb164: {
        _280 = const "sizesort";
        _271 = Arg::<'_, '_>::overrides_with(move _272, _280) -> [return: bb165, unwind: bb256];
    }

    bb165: {
        _281 = const "extensionsort";
        _270 = Arg::<'_, '_>::overrides_with(move _271, _281) -> [return: bb166, unwind: bb256];
    }

    bb166: {
        _282 = const "sort";
        _269 = Arg::<'_, '_>::overrides_with(move _270, _282) -> [return: bb167, unwind: bb256];
    }

    bb167: {
        _283 = const "Natural sort of (version) numbers within text";
        _268 = Arg::<'_, '_>::help(move _269, _283) -> [return: bb168, unwind: bb256];
    }

    bb168: {
        _392 = const false;
        _9 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _10, move _268) -> [return: bb169, unwind: bb256];
    }

    bb169: {
        _391 = const true;
        _392 = const false;
        _295 = const "sort";
        _294 = Arg::<'_, '_>::with_name(_295) -> [return: bb170, unwind: bb254];
    }

    bb170: {
        _296 = const "sort";
        _293 = Arg::<'_, '_>::long(move _294, _296) -> [return: bb171, unwind: bb254];
    }

    bb171: {
        _292 = Arg::<'_, '_>::multiple(move _293, const true) -> [return: bb172, unwind: bb254];
    }

    bb172: {
        _382 = const _;
        _297 = _382 as &[&str] (PointerCoercion(Unsize));
        _291 = Arg::<'_, '_>::possible_values(move _292, move _297) -> [return: bb173, unwind: bb254];
    }

    bb173: {
        _290 = Arg::<'_, '_>::takes_value(move _291, const true) -> [return: bb174, unwind: bb254];
    }

    bb174: {
        _298 = const "WORD";
        _289 = Arg::<'_, '_>::value_name(move _290, _298) -> [return: bb175, unwind: bb254];
    }

    bb175: {
        _299 = const "timesort";
        _288 = Arg::<'_, '_>::overrides_with(move _289, _299) -> [return: bb176, unwind: bb254];
    }

    bb176: {
        _300 = const "sizesort";
        _287 = Arg::<'_, '_>::overrides_with(move _288, _300) -> [return: bb177, unwind: bb254];
    }

    bb177: {
        _301 = const "extensionsort";
        _286 = Arg::<'_, '_>::overrides_with(move _287, _301) -> [return: bb178, unwind: bb254];
    }

    bb178: {
        _302 = const "versionsort";
        _285 = Arg::<'_, '_>::overrides_with(move _286, _302) -> [return: bb179, unwind: bb254];
    }

    bb179: {
        _303 = const "sort by WORD instead of name";
        _284 = Arg::<'_, '_>::help(move _285, _303) -> [return: bb180, unwind: bb254];
    }

    bb180: {
        _391 = const false;
        _8 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _9, move _284) -> [return: bb181, unwind: bb254];
    }

    bb181: {
        _390 = const true;
        _391 = const false;
        _309 = const "reverse";
        _308 = Arg::<'_, '_>::with_name(_309) -> [return: bb182, unwind: bb252];
    }

    bb182: {
        _307 = Arg::<'_, '_>::short::<&str>(move _308, const "r") -> [return: bb183, unwind: bb252];
    }

    bb183: {
        _310 = const "reverse";
        _306 = Arg::<'_, '_>::long(move _307, _310) -> [return: bb184, unwind: bb252];
    }

    bb184: {
        _305 = Arg::<'_, '_>::multiple(move _306, const true) -> [return: bb185, unwind: bb252];
    }

    bb185: {
        _311 = const "Reverse the order of the sort";
        _304 = Arg::<'_, '_>::help(move _305, _311) -> [return: bb186, unwind: bb252];
    }

    bb186: {
        _390 = const false;
        _7 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _8, move _304) -> [return: bb187, unwind: bb252];
    }

    bb187: {
        _389 = const true;
        _390 = const false;
        _321 = const "group-dirs";
        _320 = Arg::<'_, '_>::with_name(_321) -> [return: bb188, unwind: bb250];
    }

    bb188: {
        _322 = const "group-dirs";
        _319 = Arg::<'_, '_>::long(move _320, _322) -> [return: bb189, unwind: bb250];
    }

    bb189: {
        _323 = const "none";
        _318 = Arg::<'_, '_>::possible_value(move _319, _323) -> [return: bb190, unwind: bb250];
    }

    bb190: {
        _324 = const "first";
        _317 = Arg::<'_, '_>::possible_value(move _318, _324) -> [return: bb191, unwind: bb250];
    }

    bb191: {
        _325 = const "last";
        _316 = Arg::<'_, '_>::possible_value(move _317, _325) -> [return: bb192, unwind: bb250];
    }

    bb192: {
        _326 = const "none";
        _315 = Arg::<'_, '_>::default_value(move _316, _326) -> [return: bb193, unwind: bb250];
    }

    bb193: {
        _314 = Arg::<'_, '_>::multiple(move _315, const true) -> [return: bb194, unwind: bb250];
    }

    bb194: {
        _313 = Arg::<'_, '_>::number_of_values(move _314, const 1_u64) -> [return: bb195, unwind: bb250];
    }

    bb195: {
        _327 = const "Sort the directories then the files";
        _312 = Arg::<'_, '_>::help(move _313, _327) -> [return: bb196, unwind: bb250];
    }

    bb196: {
        _389 = const false;
        _6 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _7, move _312) -> [return: bb197, unwind: bb250];
    }

    bb197: {
        _388 = const true;
        _389 = const false;
        _335 = const "blocks";
        _334 = Arg::<'_, '_>::with_name(_335) -> [return: bb198, unwind: bb248];
    }

    bb198: {
        _336 = const "blocks";
        _333 = Arg::<'_, '_>::long(move _334, _336) -> [return: bb199, unwind: bb248];
    }

    bb199: {
        _332 = Arg::<'_, '_>::multiple(move _333, const true) -> [return: bb200, unwind: bb248];
    }

    bb200: {
        _331 = Arg::<'_, '_>::number_of_values(move _332, const 1_u64) -> [return: bb201, unwind: bb248];
    }

    bb201: {
        _330 = Arg::<'_, '_>::require_delimiter(move _331, const true) -> [return: bb202, unwind: bb248];
    }

    bb202: {
        _381 = const _;
        _337 = _381 as &[&str] (PointerCoercion(Unsize));
        _329 = Arg::<'_, '_>::possible_values(move _330, move _337) -> [return: bb203, unwind: bb248];
    }

    bb203: {
        _338 = const "Specify the blocks that will be displayed and in what order";
        _328 = Arg::<'_, '_>::help(move _329, _338) -> [return: bb204, unwind: bb248];
    }

    bb204: {
        _388 = const false;
        _5 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _6, move _328) -> [return: bb205, unwind: bb248];
    }

    bb205: {
        _387 = const true;
        _388 = const false;
        _342 = const "classic";
        _341 = Arg::<'_, '_>::with_name(_342) -> [return: bb206, unwind: bb246];
    }

    bb206: {
        _343 = const "classic";
        _340 = Arg::<'_, '_>::long(move _341, _343) -> [return: bb207, unwind: bb246];
    }

    bb207: {
        _344 = const "Enable classic mode (no colors or icons)";
        _339 = Arg::<'_, '_>::help(move _340, _344) -> [return: bb208, unwind: bb246];
    }

    bb208: {
        _387 = const false;
        _4 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _5, move _339) -> [return: bb209, unwind: bb246];
    }

    bb209: {
        _386 = const true;
        _387 = const false;
        _349 = const "no-symlink";
        _348 = Arg::<'_, '_>::with_name(_349) -> [return: bb210, unwind: bb244];
    }

    bb210: {
        _350 = const "no-symlink";
        _347 = Arg::<'_, '_>::long(move _348, _350) -> [return: bb211, unwind: bb244];
    }

    bb211: {
        _346 = Arg::<'_, '_>::multiple(move _347, const true) -> [return: bb212, unwind: bb244];
    }

    bb212: {
        _351 = const "Do not display symlink target";
        _345 = Arg::<'_, '_>::help(move _346, _351) -> [return: bb213, unwind: bb244];
    }

    bb213: {
        _386 = const false;
        _3 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _4, move _345) -> [return: bb214, unwind: bb244];
    }

    bb214: {
        _385 = const true;
        _386 = const false;
        _360 = const "ignore-glob";
        _359 = Arg::<'_, '_>::with_name(_360) -> [return: bb215, unwind: bb242];
    }

    bb215: {
        _358 = Arg::<'_, '_>::short::<&str>(move _359, const "I") -> [return: bb216, unwind: bb242];
    }

    bb216: {
        _361 = const "ignore-glob";
        _357 = Arg::<'_, '_>::long(move _358, _361) -> [return: bb217, unwind: bb242];
    }

    bb217: {
        _356 = Arg::<'_, '_>::multiple(move _357, const true) -> [return: bb218, unwind: bb242];
    }

    bb218: {
        _355 = Arg::<'_, '_>::number_of_values(move _356, const 1_u64) -> [return: bb219, unwind: bb242];
    }

    bb219: {
        _362 = const "pattern";
        _354 = Arg::<'_, '_>::value_name(move _355, _362) -> [return: bb220, unwind: bb242];
    }

    bb220: {
        _363 = const "";
        _353 = Arg::<'_, '_>::default_value(move _354, _363) -> [return: bb221, unwind: bb242];
    }

    bb221: {
        _364 = const "Do not display files/directories with names matching the glob pattern(s). More than one can be specified by repeating the argument";
        _352 = Arg::<'_, '_>::help(move _353, _364) -> [return: bb222, unwind: bb242];
    }

    bb222: {
        _385 = const false;
        _2 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _3, move _352) -> [return: bb223, unwind: bb242];
    }

    bb223: {
        _384 = const true;
        _385 = const false;
        _370 = const "inode";
        _369 = Arg::<'_, '_>::with_name(_370) -> [return: bb224, unwind: bb240];
    }

    bb224: {
        _368 = Arg::<'_, '_>::short::<&str>(move _369, const "i") -> [return: bb225, unwind: bb240];
    }

    bb225: {
        _371 = const "inode";
        _367 = Arg::<'_, '_>::long(move _368, _371) -> [return: bb226, unwind: bb240];
    }

    bb226: {
        _366 = Arg::<'_, '_>::multiple(move _367, const true) -> [return: bb227, unwind: bb240];
    }

    bb227: {
        _372 = const "Display the index number of each file";
        _365 = Arg::<'_, '_>::help(move _366, _372) -> [return: bb228, unwind: bb240];
    }

    bb228: {
        _384 = const false;
        _1 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _2, move _365) -> [return: bb229, unwind: bb240];
    }

    bb229: {
        _383 = const true;
        _384 = const false;
        _378 = const "dereference";
        _377 = Arg::<'_, '_>::with_name(_378) -> [return: bb230, unwind: bb238];
    }

    bb230: {
        _376 = Arg::<'_, '_>::short::<&str>(move _377, const "L") -> [return: bb231, unwind: bb238];
    }

    bb231: {
        _379 = const "dereference";
        _375 = Arg::<'_, '_>::long(move _376, _379) -> [return: bb232, unwind: bb238];
    }

    bb232: {
        _374 = Arg::<'_, '_>::multiple(move _375, const true) -> [return: bb233, unwind: bb238];
    }

    bb233: {
        _380 = const "When showing file information for a symbolic link, show information for the file the link references rather than for the link itself";
        _373 = Arg::<'_, '_>::help(move _374, _380) -> [return: bb234, unwind: bb238];
    }

    bb234: {
        _383 = const false;
        _0 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _1, move _373) -> [return: bb235, unwind: bb238];
    }

    bb235: {
        _383 = const false;
        return;
    }

    bb236 (cleanup): {
        resume;
    }

    bb237 (cleanup): {
        drop(_1) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        switchInt(_383) -> [0: bb236, otherwise: bb237];
    }

    bb239 (cleanup): {
        drop(_2) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb240 (cleanup): {
        switchInt(_384) -> [0: bb236, otherwise: bb239];
    }

    bb241 (cleanup): {
        drop(_3) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb242 (cleanup): {
        switchInt(_385) -> [0: bb236, otherwise: bb241];
    }

    bb243 (cleanup): {
        drop(_4) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb244 (cleanup): {
        switchInt(_386) -> [0: bb236, otherwise: bb243];
    }

    bb245 (cleanup): {
        drop(_5) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb246 (cleanup): {
        switchInt(_387) -> [0: bb236, otherwise: bb245];
    }

    bb247 (cleanup): {
        drop(_6) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb248 (cleanup): {
        switchInt(_388) -> [0: bb236, otherwise: bb247];
    }

    bb249 (cleanup): {
        drop(_7) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb250 (cleanup): {
        switchInt(_389) -> [0: bb236, otherwise: bb249];
    }

    bb251 (cleanup): {
        drop(_8) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb252 (cleanup): {
        switchInt(_390) -> [0: bb236, otherwise: bb251];
    }

    bb253 (cleanup): {
        drop(_9) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb254 (cleanup): {
        switchInt(_391) -> [0: bb236, otherwise: bb253];
    }

    bb255 (cleanup): {
        drop(_10) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb256 (cleanup): {
        switchInt(_392) -> [0: bb236, otherwise: bb255];
    }

    bb257 (cleanup): {
        drop(_11) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb258 (cleanup): {
        switchInt(_393) -> [0: bb236, otherwise: bb257];
    }

    bb259 (cleanup): {
        drop(_12) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb260 (cleanup): {
        switchInt(_394) -> [0: bb236, otherwise: bb259];
    }

    bb261 (cleanup): {
        drop(_13) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb262 (cleanup): {
        switchInt(_395) -> [0: bb236, otherwise: bb261];
    }

    bb263 (cleanup): {
        drop(_14) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb264 (cleanup): {
        switchInt(_396) -> [0: bb236, otherwise: bb263];
    }

    bb265 (cleanup): {
        drop(_15) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb266 (cleanup): {
        switchInt(_397) -> [0: bb236, otherwise: bb265];
    }

    bb267 (cleanup): {
        drop(_16) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb268 (cleanup): {
        switchInt(_398) -> [0: bb236, otherwise: bb267];
    }

    bb269 (cleanup): {
        drop(_17) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb270 (cleanup): {
        switchInt(_399) -> [0: bb236, otherwise: bb269];
    }

    bb271 (cleanup): {
        drop(_18) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        switchInt(_400) -> [0: bb236, otherwise: bb271];
    }

    bb273 (cleanup): {
        drop(_19) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        switchInt(_401) -> [0: bb236, otherwise: bb273];
    }

    bb275 (cleanup): {
        drop(_20) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb276 (cleanup): {
        switchInt(_402) -> [0: bb236, otherwise: bb275];
    }

    bb277 (cleanup): {
        drop(_21) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        switchInt(_403) -> [0: bb236, otherwise: bb277];
    }

    bb279 (cleanup): {
        drop(_22) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb280 (cleanup): {
        switchInt(_404) -> [0: bb236, otherwise: bb279];
    }

    bb281 (cleanup): {
        drop(_23) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb282 (cleanup): {
        switchInt(_405) -> [0: bb236, otherwise: bb281];
    }

    bb283 (cleanup): {
        drop(_24) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb284 (cleanup): {
        switchInt(_406) -> [0: bb236, otherwise: bb283];
    }

    bb285 (cleanup): {
        drop(_25) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb286 (cleanup): {
        switchInt(_407) -> [0: bb236, otherwise: bb285];
    }

    bb287 (cleanup): {
        drop(_26) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb288 (cleanup): {
        switchInt(_408) -> [0: bb236, otherwise: bb287];
    }

    bb289 (cleanup): {
        drop(_27) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb290 (cleanup): {
        switchInt(_409) -> [0: bb236, otherwise: bb289];
    }

    bb291 (cleanup): {
        drop(_28) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb292 (cleanup): {
        switchInt(_410) -> [0: bb236, otherwise: bb291];
    }

    bb293 (cleanup): {
        drop(_29) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb294 (cleanup): {
        switchInt(_411) -> [0: bb236, otherwise: bb293];
    }

    bb295 (cleanup): {
        drop(_30) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb296 (cleanup): {
        switchInt(_412) -> [0: bb236, otherwise: bb295];
    }

    bb297 (cleanup): {
        drop(_31) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb298 (cleanup): {
        switchInt(_413) -> [0: bb236, otherwise: bb297];
    }
}

promoted[0] in build: &[&str; 8] = {
    let mut _0: &[&str; 8];
    let mut _1: [&str; 8];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;

    bb0: {
        _3 = const "permission";
        _2 = &(*_3);
        _5 = const "user";
        _4 = &(*_5);
        _7 = const "group";
        _6 = &(*_7);
        _9 = const "size";
        _8 = &(*_9);
        _11 = const "date";
        _10 = &(*_11);
        _13 = const "name";
        _12 = &(*_13);
        _15 = const "inode";
        _14 = &(*_15);
        _17 = const "links";
        _16 = &(*_17);
        _1 = [move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16];
        _0 = &_1;
        return;
    }
}

promoted[1] in build: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;

    bb0: {
        _3 = const "size";
        _2 = &(*_3);
        _5 = const "time";
        _4 = &(*_5);
        _7 = const "version";
        _6 = &(*_7);
        _9 = const "extension";
        _8 = &(*_9);
        _1 = [move _2, move _4, move _6, move _8];
        _0 = &_1;
        return;
    }
}

fn validate_date_argument(_1: std::string::String) -> Result<(), std::string::String> {
    debug arg => _1;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _2: bool;
    let _3: &str;
    let mut _4: &std::string::String;
    let _5: &str;
    let _6: &std::string::String;
    let mut _7: bool;
    let mut _8: &&std::string::String;
    let _9: &std::string::String;
    let mut _10: bool;
    let mut _11: &&std::string::String;
    let _12: &std::string::String;
    let mut _13: std::string::String;
    let _14: &str;
    let mut _15: &&str;
    let mut _16: &&str;

    bb0: {
        _4 = &_1;
        _3 = <std::string::String as Deref>::deref(move _4) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _2 = core::str::<impl str>::starts_with::<'_, char>(_3, const '+') -> [return: bb2, unwind: bb14];
    }

    bb2: {
        switchInt(move _2) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _6 = &_1;
        _5 = <std::string::String as Deref>::deref(_6) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _0 = validate_time_format(_5) -> [return: bb16, unwind: bb14];
    }

    bb5: {
        _9 = &_1;
        _8 = &_9;
        _16 = const _;
        _7 = <&std::string::String as PartialEq<&str>>::eq(move _8, _16) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        switchInt(move _7) -> [0: bb7, otherwise: bb9];
    }

    bb7: {
        _12 = &_1;
        _11 = &_12;
        _15 = const _;
        _10 = <&std::string::String as PartialEq<&str>>::eq(move _11, _15) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        switchInt(move _10) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _0 = Result::<(), std::string::String>::Ok(const ());
        goto -> bb12;
    }

    bb10: {
        _14 = const "possible values: date, relative, +date-time-format";
        _13 = <str as ToOwned>::to_owned(_14) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _0 = Result::<(), std::string::String>::Err(move _13);
        goto -> bb12;
    }

    bb12: {
        drop(_1) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        goto -> bb12;
    }
}

promoted[0] in validate_date_argument: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "relative";
        _0 = &_1;
        return;
    }
}

promoted[1] in validate_date_argument: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "date";
        _0 = &_1;
        return;
    }
}

fn validate_time_format(_1: &str) -> Result<(), std::string::String> {
    debug formatter => _1;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _2: std::str::Chars<'_>;
    let mut _3: std::option::Option<char>;
    let mut _4: &mut std::str::Chars<'_>;
    let mut _5: isize;
    let mut _6: std::option::Option<char>;
    let mut _7: &mut std::str::Chars<'_>;
    let mut _8: isize;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &char;
    let mut _18: std::string::String;
    let _19: &str;
    scope 1 {
        debug chars => _2;
        let _9: char;
        scope 2 {
            debug c => _9;
            let _10: std::string::String;
            let mut _20: &[&str; 1];
            scope 3 {
                debug res => _10;
            }
        }
    }

    bb0: {
        _2 = core::str::<impl str>::chars(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _2;
        _3 = <Chars<'_> as Iterator>::next(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb14, 1: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt(((_3 as Some).0: char)) -> [37: bb4, otherwise: bb1];
    }

    bb4: {
        _7 = &mut _2;
        _6 = <Chars<'_> as Iterator>::next(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb6, 1: bb7, otherwise: bb8];
    }

    bb6: {
        _19 = const "missing format specifier";
        _18 = <str as ToOwned>::to_owned(_19) -> [return: bb13, unwind continue];
    }

    bb7: {
        switchInt(((_6 as Some).0: char)) -> [65: bb1, 97: bb1, 66: bb1, 98: bb1, 67: bb1, 99: bb1, 68: bb1, 100: bb1, 101: bb1, 70: bb1, 102: bb1, 71: bb1, 103: bb1, 72: bb1, 104: bb1, 73: bb1, 106: bb1, 107: bb1, 108: bb1, 77: bb1, 109: bb1, 110: bb1, 80: bb1, 112: bb1, 82: bb1, 114: bb1, 83: bb1, 115: bb1, 84: bb1, 116: bb1, 85: bb1, 117: bb1, 86: bb1, 118: bb1, 87: bb1, 119: bb1, 88: bb1, 120: bb1, 89: bb1, 121: bb1, 90: bb1, 122: bb1, 43: bb1, 37: bb1, otherwise: bb9];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _9 = ((_6 as Some).0: char);
        _20 = const _;
        _12 = _20 as &[&str] (PointerCoercion(Unsize));
        _17 = &_9;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<char>(_17) -> [return: bb10, unwind continue];
    }

    bb10: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _10 = std::fmt::format(move _11) -> [return: bb12, unwind continue];
    }

    bb12: {
        _0 = Result::<(), std::string::String>::Err(move _10);
        goto -> bb15;
    }

    bb13: {
        _0 = Result::<(), std::string::String>::Err(move _18);
        goto -> bb15;
    }

    bb14: {
        _0 = Result::<(), std::string::String>::Ok(const ());
        goto -> bb15;
    }

    bb15: {
        return;
    }
}

promoted[0] in validate_time_format: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "invalid format specifier: %"];
        _0 = &_1;
        return;
    }
}

fn color::<impl at src/color.rs:7:10: 7:14>::hash(_1: &Elem, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: isize;
    let _4: ();
    let _5: &isize;
    let mut _6: isize;
    let _9: ();
    scope 1 {
        debug __self_tag => _3;
        let _7: &bool;
        let _8: &bool;
        let _10: &bool;
        let _11: &bool;
        let _12: &bool;
        scope 2 {
            debug __self_0 => _7;
            debug __self_1 => _8;
        }
        scope 3 {
            debug __self_0 => _10;
        }
        scope 4 {
            debug __self_0 => _11;
        }
        scope 5 {
            debug __self_0 => _12;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _5 = &_3;
        _4 = <isize as std::hash::Hash>::hash::<__H>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = discriminant((*_1));
        switchInt(move _6) -> [0: bb2, 3: bb4, 23: bb5, 24: bb6, otherwise: bb7];
    }

    bb2: {
        _7 = &(((*_1) as File).0: bool);
        _8 = &(((*_1) as File).1: bool);
        _9 = <bool as std::hash::Hash>::hash::<__H>(_7, _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = <bool as std::hash::Hash>::hash::<__H>(_8, _2) -> [return: bb7, unwind continue];
    }

    bb4: {
        _10 = &(((*_1) as Dir).0: bool);
        _0 = <bool as std::hash::Hash>::hash::<__H>(_10, _2) -> [return: bb7, unwind continue];
    }

    bb5: {
        _11 = &(((*_1) as INode).0: bool);
        _0 = <bool as std::hash::Hash>::hash::<__H>(_11, _2) -> [return: bb7, unwind continue];
    }

    bb6: {
        _12 = &(((*_1) as Links).0: bool);
        _0 = <bool as std::hash::Hash>::hash::<__H>(_12, _2) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn color::<impl at src/color.rs:7:16: 7:21>::fmt(_1: &Elem, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &bool;
    let _5: &bool;
    let _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&bool;
    let _12: &str;
    let _13: &str;
    let _14: &bool;
    let _15: &str;
    let _16: &str;
    let mut _17: &dyn std::fmt::Debug;
    let _18: &&bool;
    let _19: &str;
    let _20: &str;
    let _21: &str;
    let _22: &str;
    let _23: &str;
    let _24: &str;
    let _25: &str;
    let _26: &str;
    let _27: &str;
    let _28: &str;
    let _29: &str;
    let _30: &str;
    let _31: &str;
    let _32: &str;
    let _33: &str;
    let _34: &str;
    let _35: &str;
    let _36: &str;
    let _37: &str;
    let _38: &bool;
    let _39: &str;
    let _40: &str;
    let mut _41: &dyn std::fmt::Debug;
    let _42: &&bool;
    let _43: &bool;
    let _44: &str;
    let _45: &str;
    let mut _46: &dyn std::fmt::Debug;
    let _47: &&bool;
    scope 1 {
        debug __self_0 => _4;
        debug __self_1 => _5;
    }
    scope 2 {
        debug __self_0 => _14;
    }
    scope 3 {
        debug __self_0 => _38;
    }
    scope 4 {
        debug __self_0 => _43;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb18, 16: bb19, 17: bb20, 18: bb21, 19: bb22, 20: bb23, 21: bb24, 22: bb25, 23: bb26, 24: bb1, otherwise: bb2];
    }

    bb1: {
        _43 = &(((*_1) as Links).0: bool);
        _44 = const "Links";
        _45 = const "valid";
        _47 = &_43;
        _46 = _47 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _44, _45, move _46) -> [return: bb27, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as File).0: bool);
        _5 = &(((*_1) as File).1: bool);
        _6 = const "File";
        _7 = const "exec";
        _8 = _4 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = const "uid";
        _11 = &_5;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _6, _7, move _8, _9, move _10) -> [return: bb27, unwind continue];
    }

    bb4: {
        _12 = const "SymLink";
        _0 = Formatter::<'_>::write_str(_2, _12) -> [return: bb27, unwind continue];
    }

    bb5: {
        _13 = const "BrokenSymLink";
        _0 = Formatter::<'_>::write_str(_2, _13) -> [return: bb27, unwind continue];
    }

    bb6: {
        _14 = &(((*_1) as Dir).0: bool);
        _15 = const "Dir";
        _16 = const "uid";
        _18 = &_14;
        _17 = _18 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _15, _16, move _17) -> [return: bb27, unwind continue];
    }

    bb7: {
        _19 = const "Pipe";
        _0 = Formatter::<'_>::write_str(_2, _19) -> [return: bb27, unwind continue];
    }

    bb8: {
        _20 = const "BlockDevice";
        _0 = Formatter::<'_>::write_str(_2, _20) -> [return: bb27, unwind continue];
    }

    bb9: {
        _21 = const "CharDevice";
        _0 = Formatter::<'_>::write_str(_2, _21) -> [return: bb27, unwind continue];
    }

    bb10: {
        _22 = const "Socket";
        _0 = Formatter::<'_>::write_str(_2, _22) -> [return: bb27, unwind continue];
    }

    bb11: {
        _23 = const "Special";
        _0 = Formatter::<'_>::write_str(_2, _23) -> [return: bb27, unwind continue];
    }

    bb12: {
        _24 = const "Read";
        _0 = Formatter::<'_>::write_str(_2, _24) -> [return: bb27, unwind continue];
    }

    bb13: {
        _25 = const "Write";
        _0 = Formatter::<'_>::write_str(_2, _25) -> [return: bb27, unwind continue];
    }

    bb14: {
        _26 = const "Exec";
        _0 = Formatter::<'_>::write_str(_2, _26) -> [return: bb27, unwind continue];
    }

    bb15: {
        _27 = const "ExecSticky";
        _0 = Formatter::<'_>::write_str(_2, _27) -> [return: bb27, unwind continue];
    }

    bb16: {
        _28 = const "NoAccess";
        _0 = Formatter::<'_>::write_str(_2, _28) -> [return: bb27, unwind continue];
    }

    bb17: {
        _29 = const "DayOld";
        _0 = Formatter::<'_>::write_str(_2, _29) -> [return: bb27, unwind continue];
    }

    bb18: {
        _30 = const "HourOld";
        _0 = Formatter::<'_>::write_str(_2, _30) -> [return: bb27, unwind continue];
    }

    bb19: {
        _31 = const "Older";
        _0 = Formatter::<'_>::write_str(_2, _31) -> [return: bb27, unwind continue];
    }

    bb20: {
        _32 = const "User";
        _0 = Formatter::<'_>::write_str(_2, _32) -> [return: bb27, unwind continue];
    }

    bb21: {
        _33 = const "Group";
        _0 = Formatter::<'_>::write_str(_2, _33) -> [return: bb27, unwind continue];
    }

    bb22: {
        _34 = const "NonFile";
        _0 = Formatter::<'_>::write_str(_2, _34) -> [return: bb27, unwind continue];
    }

    bb23: {
        _35 = const "FileLarge";
        _0 = Formatter::<'_>::write_str(_2, _35) -> [return: bb27, unwind continue];
    }

    bb24: {
        _36 = const "FileMedium";
        _0 = Formatter::<'_>::write_str(_2, _36) -> [return: bb27, unwind continue];
    }

    bb25: {
        _37 = const "FileSmall";
        _0 = Formatter::<'_>::write_str(_2, _37) -> [return: bb27, unwind continue];
    }

    bb26: {
        _38 = &(((*_1) as INode).0: bool);
        _39 = const "INode";
        _40 = const "valid";
        _42 = &_38;
        _41 = _42 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _39, _40, move _41) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }
}

fn color::<impl at src/color.rs:7:23: 7:25>::assert_receiver_is_total_eq(_1: &Elem) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn color::<impl at src/color.rs:7:27: 7:36>::eq(_1: &Elem, _2: &Elem) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&color::Elem, &color::Elem);
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _11: isize;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: &color::Elem;
    let mut _34: &color::Elem;
    let mut _35: &color::Elem;
    let mut _36: &color::Elem;
    let mut _37: &color::Elem;
    let mut _38: &color::Elem;
    let mut _39: &color::Elem;
    let mut _40: &color::Elem;
    let mut _41: &color::Elem;
    let mut _42: &color::Elem;
    let mut _43: &color::Elem;
    let mut _44: &color::Elem;
    let mut _45: &color::Elem;
    let mut _46: &color::Elem;
    let mut _47: &color::Elem;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _12: &bool;
            let _13: &bool;
            let _14: &bool;
            let _15: &bool;
            let _21: &bool;
            let _22: &bool;
            let _25: &bool;
            let _26: &bool;
            let _29: &bool;
            let _30: &bool;
            scope 3 {
                debug __self_0 => _12;
                debug __self_1 => _13;
                debug __arg1_0 => _14;
                debug __arg1_1 => _15;
            }
            scope 4 {
                debug __self_0 => _21;
                debug __arg1_0 => _22;
            }
            scope 5 {
                debug __self_0 => _25;
                debug __arg1_0 => _26;
            }
            scope 6 {
                debug __self_0 => _29;
                debug __arg1_0 => _30;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _33 = deref_copy (_6.0: &color::Elem);
        _11 = discriminant((*_33));
        switchInt(move _11) -> [0: bb3, 3: bb5, 23: bb6, 24: bb7, otherwise: bb4];
    }

    bb2: {
        _0 = const false;
        goto -> bb14;
    }

    bb3: {
        _34 = deref_copy (_6.1: &color::Elem);
        _7 = discriminant((*_34));
        switchInt(move _7) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        _0 = const true;
        goto -> bb14;
    }

    bb5: {
        _35 = deref_copy (_6.1: &color::Elem);
        _8 = discriminant((*_35));
        switchInt(move _8) -> [3: bb11, otherwise: bb4];
    }

    bb6: {
        _36 = deref_copy (_6.1: &color::Elem);
        _9 = discriminant((*_36));
        switchInt(move _9) -> [23: bb12, otherwise: bb4];
    }

    bb7: {
        _37 = deref_copy (_6.1: &color::Elem);
        _10 = discriminant((*_37));
        switchInt(move _10) -> [24: bb13, otherwise: bb4];
    }

    bb8: {
        _38 = deref_copy (_6.0: &color::Elem);
        _12 = &(((*_38) as File).0: bool);
        _39 = deref_copy (_6.0: &color::Elem);
        _13 = &(((*_39) as File).1: bool);
        _40 = deref_copy (_6.1: &color::Elem);
        _14 = &(((*_40) as File).0: bool);
        _41 = deref_copy (_6.1: &color::Elem);
        _15 = &(((*_41) as File).1: bool);
        _17 = (*_12);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        switchInt(move _16) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _19 = (*_13);
        _20 = (*_15);
        _0 = Eq(move _19, move _20);
        goto -> bb14;
    }

    bb10: {
        _0 = const false;
        goto -> bb14;
    }

    bb11: {
        _42 = deref_copy (_6.0: &color::Elem);
        _21 = &(((*_42) as Dir).0: bool);
        _43 = deref_copy (_6.1: &color::Elem);
        _22 = &(((*_43) as Dir).0: bool);
        _23 = (*_21);
        _24 = (*_22);
        _0 = Eq(move _23, move _24);
        goto -> bb14;
    }

    bb12: {
        _44 = deref_copy (_6.0: &color::Elem);
        _25 = &(((*_44) as INode).0: bool);
        _45 = deref_copy (_6.1: &color::Elem);
        _26 = &(((*_45) as INode).0: bool);
        _27 = (*_25);
        _28 = (*_26);
        _0 = Eq(move _27, move _28);
        goto -> bb14;
    }

    bb13: {
        _46 = deref_copy (_6.0: &color::Elem);
        _29 = &(((*_46) as Links).0: bool);
        _47 = deref_copy (_6.1: &color::Elem);
        _30 = &(((*_47) as Links).0: bool);
        _31 = (*_29);
        _32 = (*_30);
        _0 = Eq(move _31, move _32);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

fn color::<impl at src/color.rs:7:38: 7:43>::clone(_1: &Elem) -> Elem {
    debug self => _1;
    let mut _0: color::Elem;
    let mut _2: isize;
    let _3: &bool;
    let _4: &bool;
    let mut _5: bool;
    let mut _6: bool;
    let _7: &bool;
    let mut _8: bool;
    let _9: &bool;
    let mut _10: bool;
    let _11: &bool;
    let mut _12: bool;
    scope 1 {
        debug __self_0 => _3;
        debug __self_1 => _4;
    }
    scope 2 {
        debug __self_0 => _7;
    }
    scope 3 {
        debug __self_0 => _9;
    }
    scope 4 {
        debug __self_0 => _11;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb18, 16: bb19, 17: bb20, 18: bb21, 19: bb22, 20: bb23, 21: bb24, 22: bb25, 23: bb26, 24: bb1, otherwise: bb2];
    }

    bb1: {
        _11 = &(((*_1) as Links).0: bool);
        _12 = (*_11);
        _0 = Elem::Links { valid: move _12 };
        goto -> bb27;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as File).0: bool);
        _4 = &(((*_1) as File).1: bool);
        _5 = (*_3);
        _6 = (*_4);
        _0 = Elem::File { exec: move _5, uid: move _6 };
        goto -> bb27;
    }

    bb4: {
        _0 = Elem::SymLink;
        goto -> bb27;
    }

    bb5: {
        _0 = Elem::BrokenSymLink;
        goto -> bb27;
    }

    bb6: {
        _7 = &(((*_1) as Dir).0: bool);
        _8 = (*_7);
        _0 = Elem::Dir { uid: move _8 };
        goto -> bb27;
    }

    bb7: {
        _0 = Elem::Pipe;
        goto -> bb27;
    }

    bb8: {
        _0 = Elem::BlockDevice;
        goto -> bb27;
    }

    bb9: {
        _0 = Elem::CharDevice;
        goto -> bb27;
    }

    bb10: {
        _0 = Elem::Socket;
        goto -> bb27;
    }

    bb11: {
        _0 = Elem::Special;
        goto -> bb27;
    }

    bb12: {
        _0 = Elem::Read;
        goto -> bb27;
    }

    bb13: {
        _0 = Elem::Write;
        goto -> bb27;
    }

    bb14: {
        _0 = Elem::Exec;
        goto -> bb27;
    }

    bb15: {
        _0 = Elem::ExecSticky;
        goto -> bb27;
    }

    bb16: {
        _0 = Elem::NoAccess;
        goto -> bb27;
    }

    bb17: {
        _0 = Elem::DayOld;
        goto -> bb27;
    }

    bb18: {
        _0 = Elem::HourOld;
        goto -> bb27;
    }

    bb19: {
        _0 = Elem::Older;
        goto -> bb27;
    }

    bb20: {
        _0 = Elem::User;
        goto -> bb27;
    }

    bb21: {
        _0 = Elem::Group;
        goto -> bb27;
    }

    bb22: {
        _0 = Elem::NonFile;
        goto -> bb27;
    }

    bb23: {
        _0 = Elem::FileLarge;
        goto -> bb27;
    }

    bb24: {
        _0 = Elem::FileMedium;
        goto -> bb27;
    }

    bb25: {
        _0 = Elem::FileSmall;
        goto -> bb27;
    }

    bb26: {
        _9 = &(((*_1) as INode).0: bool);
        _10 = (*_9);
        _0 = Elem::INode { valid: move _10 };
        goto -> bb27;
    }

    bb27: {
        return;
    }
}

fn color::<impl at src/color.rs:57:1: 57:10>::has_suid(_1: &Elem) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: isize;
    let mut _3: bool;
    let mut _4: bool;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb1, 3: bb3, otherwise: bb2];
    }

    bb1: {
        StorageLive(_3);
        _3 = (((*_1) as File).1: bool);
        _0 = _3;
        StorageDead(_3);
        goto -> bb4;
    }

    bb2: {
        _0 = const false;
        goto -> bb4;
    }

    bb3: {
        StorageLive(_4);
        _4 = (((*_1) as Dir).0: bool);
        _0 = _4;
        StorageDead(_4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn color::<impl at src/color.rs:66:10: 66:15>::fmt(_1: &color::Theme, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "NoLscolors";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "NoColor";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "Default";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn color::<impl at src/color.rs:66:23: 66:28>::clone(_1: &color::Theme) -> color::Theme {
    debug self => _1;
    let mut _0: color::Theme;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn color::<impl at src/color.rs:78:1: 78:12>::new(_1: color::Theme) -> Colors {
    debug theme => _1;
    let mut _0: color::Colors;
    let _2: std::option::Option<std::collections::HashMap<color::Elem, ansi_term::Colour>>;
    let mut _3: isize;
    let mut _4: std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _5: std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _7: isize;
    let mut _8: lscolors::LsColors;
    let mut _9: std::option::Option<lscolors::LsColors>;
    let mut _10: std::option::Option<std::collections::HashMap<color::Elem, ansi_term::Colour>>;
    let mut _11: std::option::Option<lscolors::LsColors>;
    scope 1 {
        debug colors => _2;
        let _6: std::option::Option<lscolors::LsColors>;
        scope 2 {
            debug lscolors => _6;
        }
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = Colors::get_light_theme_colour_map() -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _2 = std::option::Option::<HashMap<Elem, Colour>>::None;
        goto -> bb7;
    }

    bb4: {
        _4 = Colors::get_light_theme_colour_map() -> [return: bb5, unwind continue];
    }

    bb5: {
        _2 = std::option::Option::<HashMap<Elem, Colour>>::Some(move _4);
        goto -> bb7;
    }

    bb6: {
        _2 = std::option::Option::<HashMap<Elem, Colour>>::Some(move _5);
        goto -> bb7;
    }

    bb7: {
        _7 = discriminant(_1);
        switchInt(move _7) -> [0: bb9, 1: bb10, 2: bb8, otherwise: bb2];
    }

    bb8: {
        _6 = std::option::Option::<LsColors>::None;
        goto -> bb13;
    }

    bb9: {
        _6 = std::option::Option::<LsColors>::None;
        goto -> bb13;
    }

    bb10: {
        _9 = LsColors::from_env() -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _8 = std::option::Option::<LsColors>::unwrap_or_default(move _9) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        _6 = std::option::Option::<LsColors>::Some(move _8);
        goto -> bb13;
    }

    bb13: {
        _10 = move _2;
        _11 = move _6;
        _0 = Colors { colors: move _10, lscolors: move _11 };
        return;
    }

    bb14 (cleanup): {
        drop(_2) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn color::<impl at src/color.rs:78:1: 78:12>::colorize(_1: &Colors, _2: std::string::String, _3: &Elem) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug input => _2;
    debug elem => _3;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let mut _4: ansi_term::Style;
    let mut _5: std::string::String;
    let mut _6: bool;

    bb0: {
        _6 = const false;
        _6 = const true;
        _4 = Colors::style(_1, _3) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _5 = move _2;
        _0 = ansi_term::display::<impl ansi_term::Style>::paint::<'_, std::string::String, str>(move _4, move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn color::<impl at src/color.rs:78:1: 78:12>::colorize_using_path(_1: &Colors, _2: std::string::String, _3: &Path, _4: &Elem) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug input => _2;
    debug path => _3;
    debug elem => _4;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let _5: std::option::Option<ansi_term::Style>;
    let mut _6: isize;
    let mut _8: std::string::String;
    let mut _9: std::string::String;
    let mut _10: bool;
    scope 1 {
        debug style_from_path => _5;
        let _7: ansi_term::Style;
        scope 2 {
            debug style_from_path => _7;
        }
    }

    bb0: {
        _10 = const false;
        _10 = const true;
        _5 = Colors::style_from_path(_1, _3) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _6 = discriminant(_5);
        switchInt(move _6) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _10 = const false;
        _9 = move _2;
        _0 = Colors::colorize::<'_>(_1, move _9, _4) -> [return: bb9, unwind: bb8];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = ((_5 as Some).0: ansi_term::Style);
        _10 = const false;
        _8 = move _2;
        _0 = ansi_term::display::<impl ansi_term::Style>::paint::<'_, std::string::String, str>(_7, move _8) -> [return: bb10, unwind: bb8];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_10) -> [0: bb6, otherwise: bb7];
    }

    bb9: {
        goto -> bb5;
    }

    bb10: {
        goto -> bb5;
    }
}

fn color::<impl at src/color.rs:78:1: 78:12>::style_from_path(_1: &Colors, _2: &Path) -> std::option::Option<ansi_term::Style> {
    debug self => _1;
    debug path => _2;
    let mut _0: std::option::Option<ansi_term::Style>;
    let mut _3: &std::option::Option<lscolors::LsColors>;
    let mut _4: isize;
    let _5: &lscolors::LsColors;
    let mut _6: std::option::Option<&lscolors::Style>;
    scope 1 {
        debug lscolors => _5;
    }

    bb0: {
        _3 = &((*_1).1: std::option::Option<lscolors::LsColors>);
        _4 = discriminant((*_3));
        switchInt(move _4) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _0 = std::option::Option::<ansi_term::Style>::None;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = &(((*_3) as Some).0: lscolors::LsColors);
        _6 = LsColors::style_for_path::<&Path>(_5, _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = std::option::Option::<&lscolors::Style>::map::<ansi_term::Style, for<'a> fn(&'a lscolors::Style) -> ansi_term::Style {lscolors::Style::to_ansi_term_style}>(move _6, lscolors::Style::to_ansi_term_style) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn color::<impl at src/color.rs:78:1: 78:12>::style(_1: &Colors, _2: &Elem) -> ansi_term::Style {
    debug self => _1;
    debug elem => _2;
    let mut _0: ansi_term::Style;
    let mut _3: &std::option::Option<lscolors::LsColors>;
    let mut _4: isize;
    let _5: &lscolors::LsColors;
    let mut _6: std::option::Option<lscolors::Indicator>;
    let mut _7: isize;
    let mut _10: std::option::Option<ansi_term::Style>;
    scope 1 {
        debug lscolors => _5;
        let _8: lscolors::Indicator;
        scope 2 {
            debug style => _8;
            let _9: std::option::Option<&lscolors::Style>;
            scope 3 {
                debug style => _9;
            }
        }
    }

    bb0: {
        _3 = &((*_1).1: std::option::Option<lscolors::LsColors>);
        _4 = discriminant((*_3));
        switchInt(move _4) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _0 = Colors::style_default(_1, _2) -> [return: bb9, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = &(((*_3) as Some).0: lscolors::LsColors);
        _6 = Colors::get_indicator_from_elem(_1, _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = discriminant(_6);
        switchInt(move _7) -> [0: bb5, 1: bb6, otherwise: bb2];
    }

    bb5: {
        _0 = Colors::style_default(_1, _2) -> [return: bb9, unwind continue];
    }

    bb6: {
        _8 = ((_6 as Some).0: lscolors::Indicator);
        _9 = LsColors::style_for_indicator(_5, _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = std::option::Option::<&lscolors::Style>::map::<ansi_term::Style, for<'a> fn(&'a lscolors::Style) -> ansi_term::Style {lscolors::Style::to_ansi_term_style}>(_9, lscolors::Style::to_ansi_term_style) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = std::option::Option::<ansi_term::Style>::unwrap_or_default(move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

fn color::<impl at src/color.rs:78:1: 78:12>::style_default(_1: &Colors, _2: &Elem) -> ansi_term::Style {
    debug self => _1;
    debug elem => _2;
    let mut _0: ansi_term::Style;
    let mut _3: isize;
    let mut _6: &ansi_term::Style;
    let _7: ansi_term::Style;
    let mut _8: ansi_term::Colour;
    let mut _9: &ansi_term::Colour;
    let mut _10: bool;
    let mut _11: &ansi_term::Style;
    let mut _12: ansi_term::Colour;
    scope 1 {
        debug colors => _4;
        let _4: &std::collections::HashMap<color::Elem, ansi_term::Colour>;
        let _5: ansi_term::Style;
        scope 2 {
            debug style_fg => _5;
        }
    }

    bb0: {
        _3 = discriminant(((*_1).0: std::option::Option<std::collections::HashMap<color::Elem, ansi_term::Colour>>));
        switchInt(move _3) -> [1: bb1, otherwise: bb8];
    }

    bb1: {
        _4 = &((((*_1).0: std::option::Option<std::collections::HashMap<color::Elem, ansi_term::Colour>>) as Some).0: std::collections::HashMap<color::Elem, ansi_term::Colour>);
        _7 = <ansi_term::Style as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _9 = <HashMap<Elem, Colour> as std::ops::Index<&Elem>>::index(_4, _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = (*_9);
        _5 = ansi_term::Style::fg(move _6, move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = Elem::has_suid(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _10) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _11 = &_5;
        _12 = ansi_term::Colour::Fixed(const 124_u8);
        _0 = ansi_term::Style::on(move _11, move _12) -> [return: bb9, unwind continue];
    }

    bb7: {
        _0 = _5;
        goto -> bb9;
    }

    bb8: {
        _0 = <ansi_term::Style as Default>::default() -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

fn color::<impl at src/color.rs:78:1: 78:12>::get_indicator_from_elem(_1: &Colors, _2: &Elem) -> std::option::Option<lscolors::Indicator> {
    debug self => _1;
    debug elem => _2;
    let mut _0: std::option::Option<lscolors::Indicator>;
    let _3: std::option::Option<&str>;
    let mut _4: isize;
    let _5: &bool;
    let _6: &bool;
    let mut _7: (&bool, &bool);
    let _8: &bool;
    let mut _9: bool;
    let _10: &bool;
    let _11: &bool;
    let mut _12: isize;
    let mut _14: &bool;
    let mut _15: &bool;
    scope 1 {
        debug indicator_string => _3;
        let _13: &str;
        scope 6 {
            debug ids => _13;
        }
    }
    scope 2 {
        debug exec => _5;
        debug uid => _6;
    }
    scope 3 {
        debug uid => _8;
    }
    scope 4 {
        debug valid => _10;
    }
    scope 5 {
        debug valid => _11;
    }

    bb0: {
        _4 = discriminant((*_2));
        switchInt(move _4) -> [0: bb2, 1: bb10, 2: bb15, 3: bb7, 4: bb11, 5: bb13, 6: bb14, 7: bb12, 23: bb16, 24: bb19, otherwise: bb1];
    }

    bb1: {
        _3 = std::option::Option::<&str>::None;
        goto -> bb22;
    }

    bb2: {
        _5 = &(((*_2) as File).0: bool);
        _6 = &(((*_2) as File).1: bool);
        _7 = (_5, _6);
        _14 = deref_copy (_7.1: &bool);
        switchInt((*_14)) -> [0: bb3, otherwise: bb5];
    }

    bb3: {
        _15 = deref_copy (_7.0: &bool);
        switchInt((*_15)) -> [0: bb4, otherwise: bb6];
    }

    bb4: {
        _3 = std::option::Option::<&str>::Some(const "fi");
        goto -> bb22;
    }

    bb5: {
        _3 = std::option::Option::<&str>::None;
        goto -> bb22;
    }

    bb6: {
        _3 = std::option::Option::<&str>::Some(const "ex");
        goto -> bb22;
    }

    bb7: {
        _8 = &(((*_2) as Dir).0: bool);
        _9 = (*_8);
        switchInt(move _9) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _3 = std::option::Option::<&str>::None;
        goto -> bb22;
    }

    bb9: {
        _3 = std::option::Option::<&str>::Some(const "di");
        goto -> bb22;
    }

    bb10: {
        _3 = std::option::Option::<&str>::Some(const "ln");
        goto -> bb22;
    }

    bb11: {
        _3 = std::option::Option::<&str>::Some(const "pi");
        goto -> bb22;
    }

    bb12: {
        _3 = std::option::Option::<&str>::Some(const "so");
        goto -> bb22;
    }

    bb13: {
        _3 = std::option::Option::<&str>::Some(const "bd");
        goto -> bb22;
    }

    bb14: {
        _3 = std::option::Option::<&str>::Some(const "cd");
        goto -> bb22;
    }

    bb15: {
        _3 = std::option::Option::<&str>::Some(const "or");
        goto -> bb22;
    }

    bb16: {
        _10 = &(((*_2) as INode).0: bool);
        switchInt((*_10)) -> [0: bb17, otherwise: bb18];
    }

    bb17: {
        _3 = std::option::Option::<&str>::Some(const "no");
        goto -> bb22;
    }

    bb18: {
        _3 = std::option::Option::<&str>::Some(const "so");
        goto -> bb22;
    }

    bb19: {
        _11 = &(((*_2) as Links).0: bool);
        switchInt((*_11)) -> [0: bb20, otherwise: bb21];
    }

    bb20: {
        _3 = std::option::Option::<&str>::Some(const "no");
        goto -> bb22;
    }

    bb21: {
        _3 = std::option::Option::<&str>::Some(const "so");
        goto -> bb22;
    }

    bb22: {
        _12 = discriminant(_3);
        switchInt(move _12) -> [0: bb23, 1: bb25, otherwise: bb24];
    }

    bb23: {
        _0 = std::option::Option::<lscolors::Indicator>::None;
        goto -> bb26;
    }

    bb24: {
        unreachable;
    }

    bb25: {
        _13 = ((_3 as Some).0: &str);
        _0 = lscolors::Indicator::from(_13) -> [return: bb26, unwind continue];
    }

    bb26: {
        return;
    }
}

fn color::<impl at src/color.rs:78:1: 78:12>::get_light_theme_colour_map() -> HashMap<Elem, Colour> {
    let mut _0: std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _1: std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let _2: std::option::Option<ansi_term::Colour>;
    let mut _3: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _4: color::Elem;
    let mut _5: ansi_term::Colour;
    let _6: std::option::Option<ansi_term::Colour>;
    let mut _7: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _8: color::Elem;
    let mut _9: ansi_term::Colour;
    let _10: std::option::Option<ansi_term::Colour>;
    let mut _11: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _12: color::Elem;
    let mut _13: ansi_term::Colour;
    let _14: std::option::Option<ansi_term::Colour>;
    let mut _15: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _16: color::Elem;
    let mut _17: ansi_term::Colour;
    let _18: std::option::Option<ansi_term::Colour>;
    let mut _19: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _20: color::Elem;
    let mut _21: ansi_term::Colour;
    let _22: std::option::Option<ansi_term::Colour>;
    let mut _23: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _24: color::Elem;
    let mut _25: ansi_term::Colour;
    let _26: std::option::Option<ansi_term::Colour>;
    let mut _27: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _28: color::Elem;
    let mut _29: ansi_term::Colour;
    let _30: std::option::Option<ansi_term::Colour>;
    let mut _31: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _32: color::Elem;
    let mut _33: ansi_term::Colour;
    let _34: std::option::Option<ansi_term::Colour>;
    let mut _35: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _36: color::Elem;
    let mut _37: ansi_term::Colour;
    let _38: std::option::Option<ansi_term::Colour>;
    let mut _39: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _40: color::Elem;
    let mut _41: ansi_term::Colour;
    let _42: std::option::Option<ansi_term::Colour>;
    let mut _43: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _44: color::Elem;
    let mut _45: ansi_term::Colour;
    let _46: std::option::Option<ansi_term::Colour>;
    let mut _47: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _48: color::Elem;
    let mut _49: ansi_term::Colour;
    let _50: std::option::Option<ansi_term::Colour>;
    let mut _51: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _52: color::Elem;
    let mut _53: ansi_term::Colour;
    let _54: std::option::Option<ansi_term::Colour>;
    let mut _55: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _56: color::Elem;
    let mut _57: ansi_term::Colour;
    let _58: std::option::Option<ansi_term::Colour>;
    let mut _59: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _60: color::Elem;
    let mut _61: ansi_term::Colour;
    let _62: std::option::Option<ansi_term::Colour>;
    let mut _63: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _64: color::Elem;
    let mut _65: ansi_term::Colour;
    let _66: std::option::Option<ansi_term::Colour>;
    let mut _67: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _68: color::Elem;
    let mut _69: ansi_term::Colour;
    let _70: std::option::Option<ansi_term::Colour>;
    let mut _71: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _72: color::Elem;
    let mut _73: ansi_term::Colour;
    let _74: std::option::Option<ansi_term::Colour>;
    let mut _75: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _76: color::Elem;
    let mut _77: ansi_term::Colour;
    let _78: std::option::Option<ansi_term::Colour>;
    let mut _79: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _80: color::Elem;
    let mut _81: ansi_term::Colour;
    let _82: std::option::Option<ansi_term::Colour>;
    let mut _83: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _84: color::Elem;
    let mut _85: ansi_term::Colour;
    let _86: std::option::Option<ansi_term::Colour>;
    let mut _87: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _88: color::Elem;
    let mut _89: ansi_term::Colour;
    let _90: std::option::Option<ansi_term::Colour>;
    let mut _91: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _92: color::Elem;
    let mut _93: ansi_term::Colour;
    let _94: std::option::Option<ansi_term::Colour>;
    let mut _95: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _96: color::Elem;
    let mut _97: ansi_term::Colour;
    let _98: std::option::Option<ansi_term::Colour>;
    let mut _99: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _100: color::Elem;
    let mut _101: ansi_term::Colour;
    let _102: std::option::Option<ansi_term::Colour>;
    let mut _103: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _104: color::Elem;
    let mut _105: ansi_term::Colour;
    let _106: std::option::Option<ansi_term::Colour>;
    let mut _107: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _108: color::Elem;
    let mut _109: ansi_term::Colour;
    let _110: std::option::Option<ansi_term::Colour>;
    let mut _111: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _112: color::Elem;
    let mut _113: ansi_term::Colour;
    let _114: std::option::Option<ansi_term::Colour>;
    let mut _115: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _116: color::Elem;
    let mut _117: ansi_term::Colour;
    let _118: std::option::Option<ansi_term::Colour>;
    let mut _119: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _120: color::Elem;
    let mut _121: ansi_term::Colour;
    let _122: std::option::Option<ansi_term::Colour>;
    let mut _123: &mut std::collections::HashMap<color::Elem, ansi_term::Colour>;
    let mut _124: color::Elem;
    let mut _125: ansi_term::Colour;
    scope 1 {
        debug m => _1;
    }

    bb0: {
        _1 = HashMap::<Elem, Colour>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _1;
        _4 = Elem::User;
        _5 = ansi_term::Colour::Fixed(const 230_u8);
        _2 = HashMap::<Elem, Colour>::insert(move _3, move _4, move _5) -> [return: bb2, unwind: bb33];
    }

    bb2: {
        _7 = &mut _1;
        _8 = Elem::Group;
        _9 = ansi_term::Colour::Fixed(const 187_u8);
        _6 = HashMap::<Elem, Colour>::insert(move _7, move _8, move _9) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _11 = &mut _1;
        _12 = Elem::Read;
        _13 = ansi_term::Colour::Green;
        _10 = HashMap::<Elem, Colour>::insert(move _11, move _12, move _13) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _15 = &mut _1;
        _16 = Elem::Write;
        _17 = ansi_term::Colour::Yellow;
        _14 = HashMap::<Elem, Colour>::insert(move _15, move _16, move _17) -> [return: bb5, unwind: bb33];
    }

    bb5: {
        _19 = &mut _1;
        _20 = Elem::Exec;
        _21 = ansi_term::Colour::Red;
        _18 = HashMap::<Elem, Colour>::insert(move _19, move _20, move _21) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _23 = &mut _1;
        _24 = Elem::ExecSticky;
        _25 = Purple;
        _22 = HashMap::<Elem, Colour>::insert(move _23, move _24, move _25) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _27 = &mut _1;
        _28 = Elem::NoAccess;
        _29 = ansi_term::Colour::Fixed(const 245_u8);
        _26 = HashMap::<Elem, Colour>::insert(move _27, move _28, move _29) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        _31 = &mut _1;
        _32 = Elem::File { exec: const false, uid: const false };
        _33 = ansi_term::Colour::Fixed(const 184_u8);
        _30 = HashMap::<Elem, Colour>::insert(move _31, move _32, move _33) -> [return: bb9, unwind: bb33];
    }

    bb9: {
        _35 = &mut _1;
        _36 = Elem::File { exec: const false, uid: const true };
        _37 = ansi_term::Colour::Fixed(const 184_u8);
        _34 = HashMap::<Elem, Colour>::insert(move _35, move _36, move _37) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _39 = &mut _1;
        _40 = Elem::File { exec: const true, uid: const false };
        _41 = ansi_term::Colour::Fixed(const 40_u8);
        _38 = HashMap::<Elem, Colour>::insert(move _39, move _40, move _41) -> [return: bb11, unwind: bb33];
    }

    bb11: {
        _43 = &mut _1;
        _44 = Elem::File { exec: const true, uid: const true };
        _45 = ansi_term::Colour::Fixed(const 40_u8);
        _42 = HashMap::<Elem, Colour>::insert(move _43, move _44, move _45) -> [return: bb12, unwind: bb33];
    }

    bb12: {
        _47 = &mut _1;
        _48 = Elem::Dir { uid: const true };
        _49 = ansi_term::Colour::Fixed(const 33_u8);
        _46 = HashMap::<Elem, Colour>::insert(move _47, move _48, move _49) -> [return: bb13, unwind: bb33];
    }

    bb13: {
        _51 = &mut _1;
        _52 = Elem::Dir { uid: const false };
        _53 = ansi_term::Colour::Fixed(const 33_u8);
        _50 = HashMap::<Elem, Colour>::insert(move _51, move _52, move _53) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _55 = &mut _1;
        _56 = Elem::Pipe;
        _57 = ansi_term::Colour::Fixed(const 44_u8);
        _54 = HashMap::<Elem, Colour>::insert(move _55, move _56, move _57) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        _59 = &mut _1;
        _60 = Elem::SymLink;
        _61 = ansi_term::Colour::Fixed(const 44_u8);
        _58 = HashMap::<Elem, Colour>::insert(move _59, move _60, move _61) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        _63 = &mut _1;
        _64 = Elem::BrokenSymLink;
        _65 = ansi_term::Colour::Fixed(const 124_u8);
        _62 = HashMap::<Elem, Colour>::insert(move _63, move _64, move _65) -> [return: bb17, unwind: bb33];
    }

    bb17: {
        _67 = &mut _1;
        _68 = Elem::BlockDevice;
        _69 = ansi_term::Colour::Fixed(const 44_u8);
        _66 = HashMap::<Elem, Colour>::insert(move _67, move _68, move _69) -> [return: bb18, unwind: bb33];
    }

    bb18: {
        _71 = &mut _1;
        _72 = Elem::CharDevice;
        _73 = ansi_term::Colour::Fixed(const 172_u8);
        _70 = HashMap::<Elem, Colour>::insert(move _71, move _72, move _73) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        _75 = &mut _1;
        _76 = Elem::Socket;
        _77 = ansi_term::Colour::Fixed(const 44_u8);
        _74 = HashMap::<Elem, Colour>::insert(move _75, move _76, move _77) -> [return: bb20, unwind: bb33];
    }

    bb20: {
        _79 = &mut _1;
        _80 = Elem::Special;
        _81 = ansi_term::Colour::Fixed(const 44_u8);
        _78 = HashMap::<Elem, Colour>::insert(move _79, move _80, move _81) -> [return: bb21, unwind: bb33];
    }

    bb21: {
        _83 = &mut _1;
        _84 = Elem::HourOld;
        _85 = ansi_term::Colour::Fixed(const 40_u8);
        _82 = HashMap::<Elem, Colour>::insert(move _83, move _84, move _85) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        _87 = &mut _1;
        _88 = Elem::DayOld;
        _89 = ansi_term::Colour::Fixed(const 42_u8);
        _86 = HashMap::<Elem, Colour>::insert(move _87, move _88, move _89) -> [return: bb23, unwind: bb33];
    }

    bb23: {
        _91 = &mut _1;
        _92 = Elem::Older;
        _93 = ansi_term::Colour::Fixed(const 36_u8);
        _90 = HashMap::<Elem, Colour>::insert(move _91, move _92, move _93) -> [return: bb24, unwind: bb33];
    }

    bb24: {
        _95 = &mut _1;
        _96 = Elem::NonFile;
        _97 = ansi_term::Colour::Fixed(const 245_u8);
        _94 = HashMap::<Elem, Colour>::insert(move _95, move _96, move _97) -> [return: bb25, unwind: bb33];
    }

    bb25: {
        _99 = &mut _1;
        _100 = Elem::FileSmall;
        _101 = ansi_term::Colour::Fixed(const 229_u8);
        _98 = HashMap::<Elem, Colour>::insert(move _99, move _100, move _101) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        _103 = &mut _1;
        _104 = Elem::FileMedium;
        _105 = ansi_term::Colour::Fixed(const 216_u8);
        _102 = HashMap::<Elem, Colour>::insert(move _103, move _104, move _105) -> [return: bb27, unwind: bb33];
    }

    bb27: {
        _107 = &mut _1;
        _108 = Elem::FileLarge;
        _109 = ansi_term::Colour::Fixed(const 172_u8);
        _106 = HashMap::<Elem, Colour>::insert(move _107, move _108, move _109) -> [return: bb28, unwind: bb33];
    }

    bb28: {
        _111 = &mut _1;
        _112 = Elem::INode { valid: const true };
        _113 = ansi_term::Colour::Fixed(const 13_u8);
        _110 = HashMap::<Elem, Colour>::insert(move _111, move _112, move _113) -> [return: bb29, unwind: bb33];
    }

    bb29: {
        _115 = &mut _1;
        _116 = Elem::INode { valid: const false };
        _117 = ansi_term::Colour::Fixed(const 245_u8);
        _114 = HashMap::<Elem, Colour>::insert(move _115, move _116, move _117) -> [return: bb30, unwind: bb33];
    }

    bb30: {
        _119 = &mut _1;
        _120 = Elem::Links { valid: const true };
        _121 = ansi_term::Colour::Fixed(const 13_u8);
        _118 = HashMap::<Elem, Colour>::insert(move _119, move _120, move _121) -> [return: bb31, unwind: bb33];
    }

    bb31: {
        _123 = &mut _1;
        _124 = Elem::Links { valid: const false };
        _125 = ansi_term::Colour::Fixed(const 245_u8);
        _122 = HashMap::<Elem, Colour>::insert(move _123, move _124, move _125) -> [return: bb32, unwind: bb33];
    }

    bb32: {
        _0 = move _1;
        return;
    }

    bb33 (cleanup): {
        drop(_1) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }
}

const CONF_DIR: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "lsd";
        return;
    }
}

const CONF_FILE_NAME: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "config";
        return;
    }
}

const YAML_LONG_EXT: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "yaml";
        return;
    }
}

fn config_file::<impl at src/config_file.rs:23:10: 23:12>::assert_receiver_is_total_eq(_1: &Config) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                    scope 9 {
                                        scope 10 {
                                            scope 11 {
                                                scope 12 {
                                                    scope 13 {
                                                        scope 14 {
                                                            scope 15 {
                                                                scope 16 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;
    }
}

fn config_file::<impl at src/config_file.rs:23:14: 23:23>::eq(_1: &Config, _2: &Config) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &std::option::Option<bool>;
    let mut _5: &std::option::Option<bool>;
    let mut _6: bool;
    let mut _7: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _8: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _9: bool;
    let mut _10: &std::option::Option<config_file::Color>;
    let mut _11: &std::option::Option<config_file::Color>;
    let mut _12: bool;
    let mut _13: &std::option::Option<std::string::String>;
    let mut _14: &std::option::Option<std::string::String>;
    let mut _15: bool;
    let mut _16: &std::option::Option<bool>;
    let mut _17: &std::option::Option<bool>;
    let mut _18: bool;
    let mut _19: &std::option::Option<flags::display::Display>;
    let mut _20: &std::option::Option<flags::display::Display>;
    let mut _21: bool;
    let mut _22: &std::option::Option<config_file::Icons>;
    let mut _23: &std::option::Option<config_file::Icons>;
    let mut _24: bool;
    let mut _25: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _26: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _27: bool;
    let mut _28: &std::option::Option<bool>;
    let mut _29: &std::option::Option<bool>;
    let mut _30: bool;
    let mut _31: &std::option::Option<flags::layout::Layout>;
    let mut _32: &std::option::Option<flags::layout::Layout>;
    let mut _33: bool;
    let mut _34: &std::option::Option<config_file::Recursion>;
    let mut _35: &std::option::Option<config_file::Recursion>;
    let mut _36: bool;
    let mut _37: &std::option::Option<flags::size::SizeFlag>;
    let mut _38: &std::option::Option<flags::size::SizeFlag>;
    let mut _39: bool;
    let mut _40: &std::option::Option<config_file::Sorting>;
    let mut _41: &std::option::Option<config_file::Sorting>;
    let mut _42: bool;
    let mut _43: &std::option::Option<bool>;
    let mut _44: &std::option::Option<bool>;
    let mut _45: bool;
    let mut _46: &std::option::Option<bool>;
    let mut _47: &std::option::Option<bool>;
    let mut _48: &std::option::Option<std::string::String>;
    let mut _49: &std::option::Option<std::string::String>;

    bb0: {
        _4 = &((*_1).0: std::option::Option<bool>);
        _5 = &((*_2).0: std::option::Option<bool>);
        _3 = <std::option::Option<bool> as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb31, otherwise: bb2];
    }

    bb2: {
        _7 = &((*_1).1: std::option::Option<std::vec::Vec<std::string::String>>);
        _8 = &((*_2).1: std::option::Option<std::vec::Vec<std::string::String>>);
        _6 = <std::option::Option<Vec<std::string::String>> as PartialEq>::eq(move _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb31, otherwise: bb4];
    }

    bb4: {
        _10 = &((*_1).2: std::option::Option<config_file::Color>);
        _11 = &((*_2).2: std::option::Option<config_file::Color>);
        _9 = <std::option::Option<config_file::Color> as PartialEq>::eq(move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _9) -> [0: bb31, otherwise: bb6];
    }

    bb6: {
        _13 = &((*_1).3: std::option::Option<std::string::String>);
        _14 = &((*_2).3: std::option::Option<std::string::String>);
        _12 = <std::option::Option<std::string::String> as PartialEq>::eq(move _13, move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _12) -> [0: bb31, otherwise: bb8];
    }

    bb8: {
        _16 = &((*_1).4: std::option::Option<bool>);
        _17 = &((*_2).4: std::option::Option<bool>);
        _15 = <std::option::Option<bool> as PartialEq>::eq(move _16, move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _15) -> [0: bb31, otherwise: bb10];
    }

    bb10: {
        _19 = &((*_1).5: std::option::Option<flags::display::Display>);
        _20 = &((*_2).5: std::option::Option<flags::display::Display>);
        _18 = <std::option::Option<flags::display::Display> as PartialEq>::eq(move _19, move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _18) -> [0: bb31, otherwise: bb12];
    }

    bb12: {
        _22 = &((*_1).6: std::option::Option<config_file::Icons>);
        _23 = &((*_2).6: std::option::Option<config_file::Icons>);
        _21 = <std::option::Option<config_file::Icons> as PartialEq>::eq(move _22, move _23) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _21) -> [0: bb31, otherwise: bb14];
    }

    bb14: {
        _25 = &((*_1).7: std::option::Option<std::vec::Vec<std::string::String>>);
        _26 = &((*_2).7: std::option::Option<std::vec::Vec<std::string::String>>);
        _24 = <std::option::Option<Vec<std::string::String>> as PartialEq>::eq(move _25, move _26) -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _24) -> [0: bb31, otherwise: bb16];
    }

    bb16: {
        _28 = &((*_1).8: std::option::Option<bool>);
        _29 = &((*_2).8: std::option::Option<bool>);
        _27 = <std::option::Option<bool> as PartialEq>::eq(move _28, move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _27) -> [0: bb31, otherwise: bb18];
    }

    bb18: {
        _31 = &((*_1).9: std::option::Option<flags::layout::Layout>);
        _32 = &((*_2).9: std::option::Option<flags::layout::Layout>);
        _30 = <std::option::Option<layout::Layout> as PartialEq>::eq(move _31, move _32) -> [return: bb19, unwind continue];
    }

    bb19: {
        switchInt(move _30) -> [0: bb31, otherwise: bb20];
    }

    bb20: {
        _34 = &((*_1).10: std::option::Option<config_file::Recursion>);
        _35 = &((*_2).10: std::option::Option<config_file::Recursion>);
        _33 = <std::option::Option<config_file::Recursion> as PartialEq>::eq(move _34, move _35) -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _33) -> [0: bb31, otherwise: bb22];
    }

    bb22: {
        _37 = &((*_1).11: std::option::Option<flags::size::SizeFlag>);
        _38 = &((*_2).11: std::option::Option<flags::size::SizeFlag>);
        _36 = <std::option::Option<SizeFlag> as PartialEq>::eq(move _37, move _38) -> [return: bb23, unwind continue];
    }

    bb23: {
        switchInt(move _36) -> [0: bb31, otherwise: bb24];
    }

    bb24: {
        _40 = &((*_1).12: std::option::Option<config_file::Sorting>);
        _41 = &((*_2).12: std::option::Option<config_file::Sorting>);
        _39 = <std::option::Option<config_file::Sorting> as PartialEq>::eq(move _40, move _41) -> [return: bb25, unwind continue];
    }

    bb25: {
        switchInt(move _39) -> [0: bb31, otherwise: bb26];
    }

    bb26: {
        _43 = &((*_1).13: std::option::Option<bool>);
        _44 = &((*_2).13: std::option::Option<bool>);
        _42 = <std::option::Option<bool> as PartialEq>::eq(move _43, move _44) -> [return: bb27, unwind continue];
    }

    bb27: {
        switchInt(move _42) -> [0: bb31, otherwise: bb28];
    }

    bb28: {
        _46 = &((*_1).14: std::option::Option<bool>);
        _47 = &((*_2).14: std::option::Option<bool>);
        _45 = <std::option::Option<bool> as PartialEq>::eq(move _46, move _47) -> [return: bb29, unwind continue];
    }

    bb29: {
        switchInt(move _45) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _48 = &((*_1).15: std::option::Option<std::string::String>);
        _49 = &((*_2).15: std::option::Option<std::string::String>);
        _0 = <std::option::Option<std::string::String> as PartialEq>::eq(move _48, move _49) -> [return: bb32, unwind continue];
    }

    bb31: {
        _0 = const false;
        goto -> bb32;
    }

    bb32: {
        return;
    }
}

fn config_file::<impl at src/config_file.rs:23:25: 23:30>::fmt(_1: &Config, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 16];
    let _5: [&dyn std::fmt::Debug; 16];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &std::option::Option<bool>;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &std::option::Option<config_file::Color>;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &std::option::Option<std::string::String>;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &std::option::Option<bool>;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &std::option::Option<flags::display::Display>;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &std::option::Option<config_file::Icons>;
    let mut _20: &dyn std::fmt::Debug;
    let _21: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _22: &dyn std::fmt::Debug;
    let _23: &std::option::Option<bool>;
    let mut _24: &dyn std::fmt::Debug;
    let _25: &std::option::Option<flags::layout::Layout>;
    let mut _26: &dyn std::fmt::Debug;
    let _27: &std::option::Option<config_file::Recursion>;
    let mut _28: &dyn std::fmt::Debug;
    let _29: &std::option::Option<flags::size::SizeFlag>;
    let mut _30: &dyn std::fmt::Debug;
    let _31: &std::option::Option<config_file::Sorting>;
    let mut _32: &dyn std::fmt::Debug;
    let _33: &std::option::Option<bool>;
    let mut _34: &dyn std::fmt::Debug;
    let _35: &std::option::Option<bool>;
    let mut _36: &dyn std::fmt::Debug;
    let _37: &&std::option::Option<std::string::String>;
    let _38: &std::option::Option<std::string::String>;
    let _39: &str;
    let mut _40: &[&str];
    let mut _41: &[&str; 16];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _41 = const _;
        _7 = &((*_1).0: std::option::Option<bool>);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: std::option::Option<std::vec::Vec<std::string::String>>);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: std::option::Option<config_file::Color>);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: std::option::Option<std::string::String>);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: std::option::Option<bool>);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: std::option::Option<flags::display::Display>);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _19 = &((*_1).6: std::option::Option<config_file::Icons>);
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _21 = &((*_1).7: std::option::Option<std::vec::Vec<std::string::String>>);
        _20 = _21 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _23 = &((*_1).8: std::option::Option<bool>);
        _22 = _23 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _25 = &((*_1).9: std::option::Option<flags::layout::Layout>);
        _24 = _25 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _27 = &((*_1).10: std::option::Option<config_file::Recursion>);
        _26 = _27 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _29 = &((*_1).11: std::option::Option<flags::size::SizeFlag>);
        _28 = _29 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _31 = &((*_1).12: std::option::Option<config_file::Sorting>);
        _30 = _31 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _33 = &((*_1).13: std::option::Option<bool>);
        _32 = _33 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _35 = &((*_1).14: std::option::Option<bool>);
        _34 = _35 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _38 = &((*_1).15: std::option::Option<std::string::String>);
        _37 = &_38;
        _36 = _37 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _39 = const "Config";
        _40 = _41 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _39, move _40, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in config_file::<impl at src/config_file.rs:23:25: 23:30>::fmt: &[&str; 16] = {
    let mut _0: &[&str; 16];
    let mut _1: [&str; 16];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: &str;
    let mut _19: &str;
    let mut _20: &str;
    let mut _21: &str;
    let mut _22: &str;
    let mut _23: &str;
    let mut _24: &str;
    let mut _25: &str;
    let mut _26: &str;
    let mut _27: &str;
    let mut _28: &str;
    let mut _29: &str;
    let mut _30: &str;
    let mut _31: &str;

    bb0: {
        _3 = const "blocks";
        _2 = &(*_3);
        _5 = const "color";
        _4 = &(*_5);
        _7 = const "date";
        _6 = &(*_7);
        _9 = const "dereference";
        _8 = &(*_9);
        _11 = const "display";
        _10 = &(*_11);
        _13 = const "icons";
        _12 = &(*_13);
        _15 = const "ignore_globs";
        _14 = &(*_15);
        _17 = const "indicators";
        _16 = &(*_17);
        _19 = const "layout";
        _18 = &(*_19);
        _21 = const "recursion";
        _20 = &(*_21);
        _23 = const "size";
        _22 = &(*_23);
        _25 = const "sorting";
        _24 = &(*_25);
        _27 = const "no_symlink";
        _26 = &(*_27);
        _29 = const "total_size";
        _28 = &(*_29);
        _31 = const "symlink_arrow";
        _30 = &(*_31);
        _1 = [const "classic", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30];
        _0 = &_1;
        return;
    }
}

const config_file::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize(_1: __D) -> Result<Config, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<config_file::Config, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_>>(move _1, const "Config", const _, const config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Config>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::expecting(_1: &config_file::_::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_u64(_1: config_file::_::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor, _2: u64) -> Result<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field, __E>;
    let mut _3: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _4: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _5: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _6: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _7: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _8: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _9: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _10: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _11: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _12: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _13: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _14: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _15: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _16: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _17: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _18: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _19: __E;
    let mut _20: config_file::_::_serde::de::Unexpected<'_>;
    let mut _21: &dyn config_file::_::_serde::de::Expected;
    let mut _22: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, 9: bb11, 10: bb12, 11: bb13, 12: bb14, 13: bb15, 14: bb16, 15: bb17, otherwise: bb1];
    }

    bb1: {
        _20 = Unexpected::<'_>::Unsigned(_2);
        _22 = const _;
        _21 = _22 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _20, move _21) -> [return: bb18, unwind continue];
    }

    bb2: {
        _3 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb19;
    }

    bb3: {
        _4 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb19;
    }

    bb4: {
        _5 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field2;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb19;
    }

    bb5: {
        _6 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field3;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb19;
    }

    bb6: {
        _7 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field4;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb19;
    }

    bb7: {
        _8 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field5;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb19;
    }

    bb8: {
        _9 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field6;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb19;
    }

    bb9: {
        _10 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field7;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb19;
    }

    bb10: {
        _11 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field8;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb19;
    }

    bb11: {
        _12 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field9;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb19;
    }

    bb12: {
        _13 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field10;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb19;
    }

    bb13: {
        _14 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field11;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb19;
    }

    bb14: {
        _15 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field12;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb19;
    }

    bb15: {
        _16 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field13;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb19;
    }

    bb16: {
        _17 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field14;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb19;
    }

    bb17: {
        _18 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field15;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb19;
    }

    bb18: {
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Err(move _19);
        goto -> bb19;
    }

    bb19: {
        return;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 16";
        _0 = &_1;
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_str(_1: config_file::_::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor, _2: &str) -> Result<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _20: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _21: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _22: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _23: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _24: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _25: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _26: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _27: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _28: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _29: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _30: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _31: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _32: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _33: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _34: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _35: __E;

    bb0: {
        _18 = <str as PartialEq>::eq(_2, const "classic") -> [return: bb48, unwind continue];
    }

    bb1: {
        _19 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb50;
    }

    bb2: {
        _17 = <str as PartialEq>::eq(_2, const "blocks") -> [return: bb47, unwind continue];
    }

    bb3: {
        _20 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb50;
    }

    bb4: {
        _16 = <str as PartialEq>::eq(_2, const "color") -> [return: bb46, unwind continue];
    }

    bb5: {
        _21 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field2;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb50;
    }

    bb6: {
        _15 = <str as PartialEq>::eq(_2, const "date") -> [return: bb45, unwind continue];
    }

    bb7: {
        _22 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field3;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb50;
    }

    bb8: {
        _14 = <str as PartialEq>::eq(_2, const "dereference") -> [return: bb44, unwind continue];
    }

    bb9: {
        _23 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field4;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb50;
    }

    bb10: {
        _13 = <str as PartialEq>::eq(_2, const "display") -> [return: bb43, unwind continue];
    }

    bb11: {
        _24 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field5;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb50;
    }

    bb12: {
        _12 = <str as PartialEq>::eq(_2, const "icons") -> [return: bb42, unwind continue];
    }

    bb13: {
        _25 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field6;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb50;
    }

    bb14: {
        _11 = <str as PartialEq>::eq(_2, const "ignore-globs") -> [return: bb41, unwind continue];
    }

    bb15: {
        _26 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field7;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb50;
    }

    bb16: {
        _10 = <str as PartialEq>::eq(_2, const "indicators") -> [return: bb40, unwind continue];
    }

    bb17: {
        _27 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field8;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb50;
    }

    bb18: {
        _9 = <str as PartialEq>::eq(_2, const "layout") -> [return: bb39, unwind continue];
    }

    bb19: {
        _28 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field9;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb50;
    }

    bb20: {
        _8 = <str as PartialEq>::eq(_2, const "recursion") -> [return: bb38, unwind continue];
    }

    bb21: {
        _29 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field10;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb50;
    }

    bb22: {
        _7 = <str as PartialEq>::eq(_2, const "size") -> [return: bb37, unwind continue];
    }

    bb23: {
        _30 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field11;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb50;
    }

    bb24: {
        _6 = <str as PartialEq>::eq(_2, const "sorting") -> [return: bb36, unwind continue];
    }

    bb25: {
        _31 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field12;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb50;
    }

    bb26: {
        _5 = <str as PartialEq>::eq(_2, const "no-symlink") -> [return: bb35, unwind continue];
    }

    bb27: {
        _32 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field13;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _32);
        goto -> bb50;
    }

    bb28: {
        _4 = <str as PartialEq>::eq(_2, const "total-size") -> [return: bb34, unwind continue];
    }

    bb29: {
        _33 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field14;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _33);
        goto -> bb50;
    }

    bb30: {
        _3 = <str as PartialEq>::eq(_2, const "symlink-arrow") -> [return: bb33, unwind continue];
    }

    bb31: {
        _34 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field15;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _34);
        goto -> bb50;
    }

    bb32: {
        _35 = <__E as config_file::_::_serde::de::Error>::unknown_field(_2, const _) -> [return: bb49, unwind continue];
    }

    bb33: {
        switchInt(move _3) -> [0: bb32, otherwise: bb31];
    }

    bb34: {
        switchInt(move _4) -> [0: bb30, otherwise: bb29];
    }

    bb35: {
        switchInt(move _5) -> [0: bb28, otherwise: bb27];
    }

    bb36: {
        switchInt(move _6) -> [0: bb26, otherwise: bb25];
    }

    bb37: {
        switchInt(move _7) -> [0: bb24, otherwise: bb23];
    }

    bb38: {
        switchInt(move _8) -> [0: bb22, otherwise: bb21];
    }

    bb39: {
        switchInt(move _9) -> [0: bb20, otherwise: bb19];
    }

    bb40: {
        switchInt(move _10) -> [0: bb18, otherwise: bb17];
    }

    bb41: {
        switchInt(move _11) -> [0: bb16, otherwise: bb15];
    }

    bb42: {
        switchInt(move _12) -> [0: bb14, otherwise: bb13];
    }

    bb43: {
        switchInt(move _13) -> [0: bb12, otherwise: bb11];
    }

    bb44: {
        switchInt(move _14) -> [0: bb10, otherwise: bb9];
    }

    bb45: {
        switchInt(move _15) -> [0: bb8, otherwise: bb7];
    }

    bb46: {
        switchInt(move _16) -> [0: bb6, otherwise: bb5];
    }

    bb47: {
        switchInt(move _17) -> [0: bb4, otherwise: bb3];
    }

    bb48: {
        switchInt(move _18) -> [0: bb2, otherwise: bb1];
    }

    bb49: {
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Err(move _35);
        goto -> bb50;
    }

    bb50: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_bytes(_1: config_file::_::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _31: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _32: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _33: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _34: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _35: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _36: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _37: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _38: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _39: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _40: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _41: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _42: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _43: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _44: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let mut _45: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
    let _46: &std::borrow::Cow<'_, str>;
    let _47: std::borrow::Cow<'_, str>;
    let mut _48: __E;
    let _49: &str;
    scope 1 {
        debug __value => _46;
    }

    bb0: {
        _27 = Len((*_2));
        _28 = const 7_usize;
        _29 = Eq(move _27, move _28);
        switchInt(move _29) -> [0: bb21, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [99: bb2, 100: bb9, 115: bb15, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [108: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [97: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [115: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [115: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [105: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [99: bb129, otherwise: bb8];
    }

    bb8: {
        _47 = from_utf8_lossy(_2) -> [return: bb145, unwind continue];
    }

    bb9: {
        switchInt((*_2)[1 of 7]) -> [105: bb10, otherwise: bb8];
    }

    bb10: {
        switchInt((*_2)[2 of 7]) -> [115: bb11, otherwise: bb8];
    }

    bb11: {
        switchInt((*_2)[3 of 7]) -> [112: bb12, otherwise: bb8];
    }

    bb12: {
        switchInt((*_2)[4 of 7]) -> [108: bb13, otherwise: bb8];
    }

    bb13: {
        switchInt((*_2)[5 of 7]) -> [97: bb14, otherwise: bb8];
    }

    bb14: {
        switchInt((*_2)[6 of 7]) -> [121: bb134, otherwise: bb8];
    }

    bb15: {
        switchInt((*_2)[1 of 7]) -> [111: bb16, otherwise: bb8];
    }

    bb16: {
        switchInt((*_2)[2 of 7]) -> [114: bb17, otherwise: bb8];
    }

    bb17: {
        switchInt((*_2)[3 of 7]) -> [116: bb18, otherwise: bb8];
    }

    bb18: {
        switchInt((*_2)[4 of 7]) -> [105: bb19, otherwise: bb8];
    }

    bb19: {
        switchInt((*_2)[5 of 7]) -> [110: bb20, otherwise: bb8];
    }

    bb20: {
        switchInt((*_2)[6 of 7]) -> [103: bb141, otherwise: bb8];
    }

    bb21: {
        _24 = Len((*_2));
        _25 = const 6_usize;
        _26 = Eq(move _24, move _25);
        switchInt(move _26) -> [0: bb33, otherwise: bb22];
    }

    bb22: {
        switchInt((*_2)[0 of 6]) -> [98: bb23, 108: bb28, otherwise: bb8];
    }

    bb23: {
        switchInt((*_2)[1 of 6]) -> [108: bb24, otherwise: bb8];
    }

    bb24: {
        switchInt((*_2)[2 of 6]) -> [111: bb25, otherwise: bb8];
    }

    bb25: {
        switchInt((*_2)[3 of 6]) -> [99: bb26, otherwise: bb8];
    }

    bb26: {
        switchInt((*_2)[4 of 6]) -> [107: bb27, otherwise: bb8];
    }

    bb27: {
        switchInt((*_2)[5 of 6]) -> [115: bb130, otherwise: bb8];
    }

    bb28: {
        switchInt((*_2)[1 of 6]) -> [97: bb29, otherwise: bb8];
    }

    bb29: {
        switchInt((*_2)[2 of 6]) -> [121: bb30, otherwise: bb8];
    }

    bb30: {
        switchInt((*_2)[3 of 6]) -> [111: bb31, otherwise: bb8];
    }

    bb31: {
        switchInt((*_2)[4 of 6]) -> [117: bb32, otherwise: bb8];
    }

    bb32: {
        switchInt((*_2)[5 of 6]) -> [116: bb138, otherwise: bb8];
    }

    bb33: {
        _21 = Len((*_2));
        _22 = const 5_usize;
        _23 = Eq(move _21, move _22);
        switchInt(move _23) -> [0: bb43, otherwise: bb34];
    }

    bb34: {
        switchInt((*_2)[0 of 5]) -> [99: bb35, 105: bb39, otherwise: bb8];
    }

    bb35: {
        switchInt((*_2)[1 of 5]) -> [111: bb36, otherwise: bb8];
    }

    bb36: {
        switchInt((*_2)[2 of 5]) -> [108: bb37, otherwise: bb8];
    }

    bb37: {
        switchInt((*_2)[3 of 5]) -> [111: bb38, otherwise: bb8];
    }

    bb38: {
        switchInt((*_2)[4 of 5]) -> [114: bb131, otherwise: bb8];
    }

    bb39: {
        switchInt((*_2)[1 of 5]) -> [99: bb40, otherwise: bb8];
    }

    bb40: {
        switchInt((*_2)[2 of 5]) -> [111: bb41, otherwise: bb8];
    }

    bb41: {
        switchInt((*_2)[3 of 5]) -> [110: bb42, otherwise: bb8];
    }

    bb42: {
        switchInt((*_2)[4 of 5]) -> [115: bb135, otherwise: bb8];
    }

    bb43: {
        _18 = Len((*_2));
        _19 = const 4_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb51, otherwise: bb44];
    }

    bb44: {
        switchInt((*_2)[0 of 4]) -> [100: bb45, 115: bb48, otherwise: bb8];
    }

    bb45: {
        switchInt((*_2)[1 of 4]) -> [97: bb46, otherwise: bb8];
    }

    bb46: {
        switchInt((*_2)[2 of 4]) -> [116: bb47, otherwise: bb8];
    }

    bb47: {
        switchInt((*_2)[3 of 4]) -> [101: bb132, otherwise: bb8];
    }

    bb48: {
        switchInt((*_2)[1 of 4]) -> [105: bb49, otherwise: bb8];
    }

    bb49: {
        switchInt((*_2)[2 of 4]) -> [122: bb50, otherwise: bb8];
    }

    bb50: {
        switchInt((*_2)[3 of 4]) -> [101: bb140, otherwise: bb8];
    }

    bb51: {
        _15 = Len((*_2));
        _16 = const 11_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb63, otherwise: bb52];
    }

    bb52: {
        switchInt((*_2)[0 of 11]) -> [100: bb53, otherwise: bb8];
    }

    bb53: {
        switchInt((*_2)[1 of 11]) -> [101: bb54, otherwise: bb8];
    }

    bb54: {
        switchInt((*_2)[2 of 11]) -> [114: bb55, otherwise: bb8];
    }

    bb55: {
        switchInt((*_2)[3 of 11]) -> [101: bb56, otherwise: bb8];
    }

    bb56: {
        switchInt((*_2)[4 of 11]) -> [102: bb57, otherwise: bb8];
    }

    bb57: {
        switchInt((*_2)[5 of 11]) -> [101: bb58, otherwise: bb8];
    }

    bb58: {
        switchInt((*_2)[6 of 11]) -> [114: bb59, otherwise: bb8];
    }

    bb59: {
        switchInt((*_2)[7 of 11]) -> [101: bb60, otherwise: bb8];
    }

    bb60: {
        switchInt((*_2)[8 of 11]) -> [110: bb61, otherwise: bb8];
    }

    bb61: {
        switchInt((*_2)[9 of 11]) -> [99: bb62, otherwise: bb8];
    }

    bb62: {
        switchInt((*_2)[10 of 11]) -> [101: bb133, otherwise: bb8];
    }

    bb63: {
        _12 = Len((*_2));
        _13 = const 12_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb76, otherwise: bb64];
    }

    bb64: {
        switchInt((*_2)[0 of 12]) -> [105: bb65, otherwise: bb8];
    }

    bb65: {
        switchInt((*_2)[1 of 12]) -> [103: bb66, otherwise: bb8];
    }

    bb66: {
        switchInt((*_2)[2 of 12]) -> [110: bb67, otherwise: bb8];
    }

    bb67: {
        switchInt((*_2)[3 of 12]) -> [111: bb68, otherwise: bb8];
    }

    bb68: {
        switchInt((*_2)[4 of 12]) -> [114: bb69, otherwise: bb8];
    }

    bb69: {
        switchInt((*_2)[5 of 12]) -> [101: bb70, otherwise: bb8];
    }

    bb70: {
        switchInt((*_2)[6 of 12]) -> [45: bb71, otherwise: bb8];
    }

    bb71: {
        switchInt((*_2)[7 of 12]) -> [103: bb72, otherwise: bb8];
    }

    bb72: {
        switchInt((*_2)[8 of 12]) -> [108: bb73, otherwise: bb8];
    }

    bb73: {
        switchInt((*_2)[9 of 12]) -> [111: bb74, otherwise: bb8];
    }

    bb74: {
        switchInt((*_2)[10 of 12]) -> [98: bb75, otherwise: bb8];
    }

    bb75: {
        switchInt((*_2)[11 of 12]) -> [115: bb136, otherwise: bb8];
    }

    bb76: {
        _9 = Len((*_2));
        _10 = const 10_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb105, otherwise: bb77];
    }

    bb77: {
        switchInt((*_2)[0 of 10]) -> [105: bb78, 110: bb87, 116: bb96, otherwise: bb8];
    }

    bb78: {
        switchInt((*_2)[1 of 10]) -> [110: bb79, otherwise: bb8];
    }

    bb79: {
        switchInt((*_2)[2 of 10]) -> [100: bb80, otherwise: bb8];
    }

    bb80: {
        switchInt((*_2)[3 of 10]) -> [105: bb81, otherwise: bb8];
    }

    bb81: {
        switchInt((*_2)[4 of 10]) -> [99: bb82, otherwise: bb8];
    }

    bb82: {
        switchInt((*_2)[5 of 10]) -> [97: bb83, otherwise: bb8];
    }

    bb83: {
        switchInt((*_2)[6 of 10]) -> [116: bb84, otherwise: bb8];
    }

    bb84: {
        switchInt((*_2)[7 of 10]) -> [111: bb85, otherwise: bb8];
    }

    bb85: {
        switchInt((*_2)[8 of 10]) -> [114: bb86, otherwise: bb8];
    }

    bb86: {
        switchInt((*_2)[9 of 10]) -> [115: bb137, otherwise: bb8];
    }

    bb87: {
        switchInt((*_2)[1 of 10]) -> [111: bb88, otherwise: bb8];
    }

    bb88: {
        switchInt((*_2)[2 of 10]) -> [45: bb89, otherwise: bb8];
    }

    bb89: {
        switchInt((*_2)[3 of 10]) -> [115: bb90, otherwise: bb8];
    }

    bb90: {
        switchInt((*_2)[4 of 10]) -> [121: bb91, otherwise: bb8];
    }

    bb91: {
        switchInt((*_2)[5 of 10]) -> [109: bb92, otherwise: bb8];
    }

    bb92: {
        switchInt((*_2)[6 of 10]) -> [108: bb93, otherwise: bb8];
    }

    bb93: {
        switchInt((*_2)[7 of 10]) -> [105: bb94, otherwise: bb8];
    }

    bb94: {
        switchInt((*_2)[8 of 10]) -> [110: bb95, otherwise: bb8];
    }

    bb95: {
        switchInt((*_2)[9 of 10]) -> [107: bb142, otherwise: bb8];
    }

    bb96: {
        switchInt((*_2)[1 of 10]) -> [111: bb97, otherwise: bb8];
    }

    bb97: {
        switchInt((*_2)[2 of 10]) -> [116: bb98, otherwise: bb8];
    }

    bb98: {
        switchInt((*_2)[3 of 10]) -> [97: bb99, otherwise: bb8];
    }

    bb99: {
        switchInt((*_2)[4 of 10]) -> [108: bb100, otherwise: bb8];
    }

    bb100: {
        switchInt((*_2)[5 of 10]) -> [45: bb101, otherwise: bb8];
    }

    bb101: {
        switchInt((*_2)[6 of 10]) -> [115: bb102, otherwise: bb8];
    }

    bb102: {
        switchInt((*_2)[7 of 10]) -> [105: bb103, otherwise: bb8];
    }

    bb103: {
        switchInt((*_2)[8 of 10]) -> [122: bb104, otherwise: bb8];
    }

    bb104: {
        switchInt((*_2)[9 of 10]) -> [101: bb143, otherwise: bb8];
    }

    bb105: {
        _6 = Len((*_2));
        _7 = const 9_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb115, otherwise: bb106];
    }

    bb106: {
        switchInt((*_2)[0 of 9]) -> [114: bb107, otherwise: bb8];
    }

    bb107: {
        switchInt((*_2)[1 of 9]) -> [101: bb108, otherwise: bb8];
    }

    bb108: {
        switchInt((*_2)[2 of 9]) -> [99: bb109, otherwise: bb8];
    }

    bb109: {
        switchInt((*_2)[3 of 9]) -> [117: bb110, otherwise: bb8];
    }

    bb110: {
        switchInt((*_2)[4 of 9]) -> [114: bb111, otherwise: bb8];
    }

    bb111: {
        switchInt((*_2)[5 of 9]) -> [115: bb112, otherwise: bb8];
    }

    bb112: {
        switchInt((*_2)[6 of 9]) -> [105: bb113, otherwise: bb8];
    }

    bb113: {
        switchInt((*_2)[7 of 9]) -> [111: bb114, otherwise: bb8];
    }

    bb114: {
        switchInt((*_2)[8 of 9]) -> [110: bb139, otherwise: bb8];
    }

    bb115: {
        _3 = Len((*_2));
        _4 = const 13_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb116];
    }

    bb116: {
        switchInt((*_2)[0 of 13]) -> [115: bb117, otherwise: bb8];
    }

    bb117: {
        switchInt((*_2)[1 of 13]) -> [121: bb118, otherwise: bb8];
    }

    bb118: {
        switchInt((*_2)[2 of 13]) -> [109: bb119, otherwise: bb8];
    }

    bb119: {
        switchInt((*_2)[3 of 13]) -> [108: bb120, otherwise: bb8];
    }

    bb120: {
        switchInt((*_2)[4 of 13]) -> [105: bb121, otherwise: bb8];
    }

    bb121: {
        switchInt((*_2)[5 of 13]) -> [110: bb122, otherwise: bb8];
    }

    bb122: {
        switchInt((*_2)[6 of 13]) -> [107: bb123, otherwise: bb8];
    }

    bb123: {
        switchInt((*_2)[7 of 13]) -> [45: bb124, otherwise: bb8];
    }

    bb124: {
        switchInt((*_2)[8 of 13]) -> [97: bb125, otherwise: bb8];
    }

    bb125: {
        switchInt((*_2)[9 of 13]) -> [114: bb126, otherwise: bb8];
    }

    bb126: {
        switchInt((*_2)[10 of 13]) -> [114: bb127, otherwise: bb8];
    }

    bb127: {
        switchInt((*_2)[11 of 13]) -> [111: bb128, otherwise: bb8];
    }

    bb128: {
        switchInt((*_2)[12 of 13]) -> [119: bb144, otherwise: bb8];
    }

    bb129: {
        _30 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb148;
    }

    bb130: {
        _31 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb148;
    }

    bb131: {
        _32 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field2;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _32);
        goto -> bb148;
    }

    bb132: {
        _33 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field3;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _33);
        goto -> bb148;
    }

    bb133: {
        _34 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field4;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _34);
        goto -> bb148;
    }

    bb134: {
        _35 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field5;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _35);
        goto -> bb148;
    }

    bb135: {
        _36 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field6;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _36);
        goto -> bb148;
    }

    bb136: {
        _37 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field7;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _37);
        goto -> bb148;
    }

    bb137: {
        _38 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field8;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _38);
        goto -> bb148;
    }

    bb138: {
        _39 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field9;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _39);
        goto -> bb148;
    }

    bb139: {
        _40 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field10;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _40);
        goto -> bb148;
    }

    bb140: {
        _41 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field11;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _41);
        goto -> bb148;
    }

    bb141: {
        _42 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field12;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _42);
        goto -> bb148;
    }

    bb142: {
        _43 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field13;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _43);
        goto -> bb148;
    }

    bb143: {
        _44 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field14;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _44);
        goto -> bb148;
    }

    bb144: {
        _45 = config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field::__field15;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _45);
        goto -> bb148;
    }

    bb145: {
        _46 = &_47;
        _49 = <Cow<'_, str> as Deref>::deref(_46) -> [return: bb146, unwind: bb149];
    }

    bb146: {
        _48 = <__E as config_file::_::_serde::de::Error>::unknown_field(_49, const _) -> [return: bb147, unwind: bb149];
    }

    bb147: {
        _0 = Result::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Err(move _48);
        drop(_47) -> [return: bb148, unwind continue];
    }

    bb148: {
        return;
    }

    bb149 (cleanup): {
        drop(_47) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        resume;
    }
}

fn config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::deserialize(_1: __D) -> Result<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor>(move _1, const config_file::_::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::expecting(_1: &config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Config";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq(_1: config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_>, _2: __A) -> Result<Config, <__A as SeqAccess<'_>>::Error> {
    debug self => const config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Config>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<config_file::Config, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<std::option::Option<bool>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<std::option::Option<bool>>;
    let _7: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: std::option::Option<bool>;
    let mut _10: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn config_file::_::_serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn config_file::_::_serde::de::Expected;
    let mut _22: std::result::Result<std::option::Option<std::option::Option<config_file::Color>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: isize;
    let mut _29: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _30: &dyn config_file::_::_serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn config_file::_::_serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<std::option::Option<bool>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn config_file::_::_serde::de::Expected;
    let mut _50: std::result::Result<std::option::Option<std::option::Option<flags::display::Display>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: isize;
    let mut _57: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _58: &dyn config_file::_::_serde::de::Expected;
    let mut _60: std::result::Result<std::option::Option<std::option::Option<config_file::Icons>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: isize;
    let mut _65: isize;
    let mut _67: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _68: &dyn config_file::_::_serde::de::Expected;
    let mut _70: std::result::Result<std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _71: &mut __A;
    let mut _72: isize;
    let mut _75: isize;
    let mut _77: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _78: &dyn config_file::_::_serde::de::Expected;
    let mut _79: std::result::Result<std::option::Option<std::option::Option<bool>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _80: &mut __A;
    let mut _81: isize;
    let mut _84: isize;
    let mut _86: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _87: &dyn config_file::_::_serde::de::Expected;
    let mut _88: std::result::Result<std::option::Option<std::option::Option<flags::layout::Layout>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _89: &mut __A;
    let mut _90: isize;
    let mut _93: isize;
    let mut _95: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _96: &dyn config_file::_::_serde::de::Expected;
    let mut _97: std::result::Result<std::option::Option<std::option::Option<config_file::Recursion>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _98: &mut __A;
    let mut _99: isize;
    let mut _102: isize;
    let mut _104: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _105: &dyn config_file::_::_serde::de::Expected;
    let mut _106: std::result::Result<std::option::Option<std::option::Option<flags::size::SizeFlag>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _107: &mut __A;
    let mut _108: isize;
    let mut _111: isize;
    let mut _113: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _114: &dyn config_file::_::_serde::de::Expected;
    let mut _115: std::result::Result<std::option::Option<std::option::Option<config_file::Sorting>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _116: &mut __A;
    let mut _117: isize;
    let mut _120: isize;
    let mut _122: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _123: &dyn config_file::_::_serde::de::Expected;
    let mut _124: std::result::Result<std::option::Option<std::option::Option<bool>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _125: &mut __A;
    let mut _126: isize;
    let mut _129: isize;
    let mut _131: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _132: &dyn config_file::_::_serde::de::Expected;
    let mut _133: std::result::Result<std::option::Option<std::option::Option<bool>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _134: &mut __A;
    let mut _135: isize;
    let mut _138: isize;
    let mut _140: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _141: &dyn config_file::_::_serde::de::Expected;
    let mut _142: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _143: &mut __A;
    let mut _144: isize;
    let mut _147: isize;
    let mut _149: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _150: &dyn config_file::_::_serde::de::Expected;
    let mut _151: config_file::Config;
    let mut _152: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _153: std::option::Option<std::string::String>;
    let mut _154: std::option::Option<config_file::Icons>;
    let mut _155: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _156: &&str;
    scope 1 {
        debug __field0 => _9;
        let _12: std::option::Option<std::vec::Vec<std::string::String>>;
        let _16: std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>;
        let _17: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
        let _19: std::option::Option<std::vec::Vec<std::string::String>>;
        let mut _157: &&str;
        scope 5 {
            debug __field1 => _12;
            let _25: std::option::Option<std::option::Option<config_file::Color>>;
            let _26: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
            let _28: std::option::Option<config_file::Color>;
            let mut _158: &&str;
            scope 9 {
                debug __field2 => _28;
                let _31: std::option::Option<std::string::String>;
                let _35: std::option::Option<std::option::Option<std::string::String>>;
                let _36: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                let _38: std::option::Option<std::string::String>;
                let mut _159: &&str;
                scope 13 {
                    debug __field3 => _31;
                    let _44: std::option::Option<std::option::Option<bool>>;
                    let _45: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                    let _47: std::option::Option<bool>;
                    let mut _160: &&str;
                    scope 17 {
                        debug __field4 => _47;
                        let _53: std::option::Option<std::option::Option<flags::display::Display>>;
                        let _54: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                        let _56: std::option::Option<flags::display::Display>;
                        let mut _161: &&str;
                        scope 21 {
                            debug __field5 => _56;
                            let _59: std::option::Option<config_file::Icons>;
                            let _63: std::option::Option<std::option::Option<config_file::Icons>>;
                            let _64: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                            let _66: std::option::Option<config_file::Icons>;
                            let mut _162: &&str;
                            scope 25 {
                                debug __field6 => _59;
                                let _69: std::option::Option<std::vec::Vec<std::string::String>>;
                                let _73: std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>;
                                let _74: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                                let _76: std::option::Option<std::vec::Vec<std::string::String>>;
                                let mut _163: &&str;
                                scope 29 {
                                    debug __field7 => _69;
                                    let _82: std::option::Option<std::option::Option<bool>>;
                                    let _83: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                                    let _85: std::option::Option<bool>;
                                    let mut _164: &&str;
                                    scope 33 {
                                        debug __field8 => _85;
                                        let _91: std::option::Option<std::option::Option<flags::layout::Layout>>;
                                        let _92: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                                        let _94: std::option::Option<flags::layout::Layout>;
                                        let mut _165: &&str;
                                        scope 37 {
                                            debug __field9 => _94;
                                            let _100: std::option::Option<std::option::Option<config_file::Recursion>>;
                                            let _101: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                                            let _103: std::option::Option<config_file::Recursion>;
                                            let mut _166: &&str;
                                            scope 41 {
                                                debug __field10 => _103;
                                                let _109: std::option::Option<std::option::Option<flags::size::SizeFlag>>;
                                                let _110: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                                                let _112: std::option::Option<flags::size::SizeFlag>;
                                                let mut _167: &&str;
                                                scope 45 {
                                                    debug __field11 => _112;
                                                    let _118: std::option::Option<std::option::Option<config_file::Sorting>>;
                                                    let _119: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                                                    let _121: std::option::Option<config_file::Sorting>;
                                                    let mut _168: &&str;
                                                    scope 49 {
                                                        debug __field12 => _121;
                                                        let _127: std::option::Option<std::option::Option<bool>>;
                                                        let _128: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                                                        let _130: std::option::Option<bool>;
                                                        let mut _169: &&str;
                                                        scope 53 {
                                                            debug __field13 => _130;
                                                            let _136: std::option::Option<std::option::Option<bool>>;
                                                            let _137: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                                                            let _139: std::option::Option<bool>;
                                                            let mut _170: &&str;
                                                            scope 57 {
                                                                debug __field14 => _139;
                                                                let _145: std::option::Option<std::option::Option<std::string::String>>;
                                                                let _146: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
                                                                let _148: std::option::Option<std::string::String>;
                                                                let mut _171: &&str;
                                                                scope 61 {
                                                                    debug __field15 => _148;
                                                                }
                                                                scope 62 {
                                                                    debug __val => _145;
                                                                }
                                                                scope 63 {
                                                                    debug __err => _146;
                                                                }
                                                                scope 64 {
                                                                    debug __value => _148;
                                                                }
                                                            }
                                                            scope 58 {
                                                                debug __val => _136;
                                                            }
                                                            scope 59 {
                                                                debug __err => _137;
                                                            }
                                                            scope 60 {
                                                                debug __value => _139;
                                                            }
                                                        }
                                                        scope 54 {
                                                            debug __val => _127;
                                                        }
                                                        scope 55 {
                                                            debug __err => _128;
                                                        }
                                                        scope 56 {
                                                            debug __value => _130;
                                                        }
                                                    }
                                                    scope 50 {
                                                        debug __val => _118;
                                                    }
                                                    scope 51 {
                                                        debug __err => _119;
                                                    }
                                                    scope 52 {
                                                        debug __value => _121;
                                                    }
                                                }
                                                scope 46 {
                                                    debug __val => _109;
                                                }
                                                scope 47 {
                                                    debug __err => _110;
                                                }
                                                scope 48 {
                                                    debug __value => _112;
                                                }
                                            }
                                            scope 42 {
                                                debug __val => _100;
                                            }
                                            scope 43 {
                                                debug __err => _101;
                                            }
                                            scope 44 {
                                                debug __value => _103;
                                            }
                                        }
                                        scope 38 {
                                            debug __val => _91;
                                        }
                                        scope 39 {
                                            debug __err => _92;
                                        }
                                        scope 40 {
                                            debug __value => _94;
                                        }
                                    }
                                    scope 34 {
                                        debug __val => _82;
                                    }
                                    scope 35 {
                                        debug __err => _83;
                                    }
                                    scope 36 {
                                        debug __value => _85;
                                    }
                                }
                                scope 30 {
                                    debug __val => _73;
                                }
                                scope 31 {
                                    debug __err => _74;
                                }
                                scope 32 {
                                    debug __value => _76;
                                }
                            }
                            scope 26 {
                                debug __val => _63;
                            }
                            scope 27 {
                                debug __err => _64;
                            }
                            scope 28 {
                                debug __value => _66;
                            }
                        }
                        scope 22 {
                            debug __val => _53;
                        }
                        scope 23 {
                            debug __err => _54;
                        }
                        scope 24 {
                            debug __value => _56;
                        }
                    }
                    scope 18 {
                        debug __val => _44;
                    }
                    scope 19 {
                        debug __err => _45;
                    }
                    scope 20 {
                        debug __value => _47;
                    }
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _25;
            }
            scope 11 {
                debug __err => _26;
            }
            scope 12 {
                debug __value => _28;
            }
        }
        scope 6 {
            debug __val => _16;
        }
        scope 7 {
            debug __err => _17;
        }
        scope 8 {
            debug __value => _19;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<bool>>(_4) -> [return: bb1, unwind: bb108];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb102;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<std::option::Option<bool>>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _156 = const _;
        _11 = _156 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb108];
    }

    bb6: {
        _9 = ((_6 as Some).0: std::option::Option<bool>);
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Vec<std::string::String>>>(_14) -> [return: bb8, unwind: bb108];
    }

    bb7: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb102;
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _17 = move ((_13 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb102;
    }

    bb10: {
        _16 = move ((_13 as Ok).0: std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _157 = const _;
        _21 = _157 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb13, unwind: bb108];
    }

    bb12: {
        _19 = move ((_16 as Some).0: std::option::Option<std::vec::Vec<std::string::String>>);
        _12 = move _19;
        _23 = &mut _2;
        _22 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<config_file::Color>>(_23) -> [return: bb14, unwind: bb107];
    }

    bb13: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb102;
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _26);
        goto -> bb101;
    }

    bb16: {
        _25 = move ((_22 as Ok).0: std::option::Option<std::option::Option<config_file::Color>>);
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _158 = const _;
        _30 = _158 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _29 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb19, unwind: bb107];
    }

    bb18: {
        _28 = move ((_25 as Some).0: std::option::Option<config_file::Color>);
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_33) -> [return: bb20, unwind: bb107];
    }

    bb19: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _29);
        goto -> bb101;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb101;
    }

    bb22: {
        _35 = move ((_32 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _159 = const _;
        _40 = _159 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb107];
    }

    bb24: {
        _38 = move ((_35 as Some).0: std::option::Option<std::string::String>);
        _31 = move _38;
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<bool>>(_42) -> [return: bb26, unwind: bb106];
    }

    bb25: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb101;
    }

    bb26: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _45 = move ((_41 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb100;
    }

    bb28: {
        _44 = ((_41 as Ok).0: std::option::Option<std::option::Option<bool>>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _160 = const _;
        _49 = _160 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb31, unwind: bb106];
    }

    bb30: {
        _47 = ((_44 as Some).0: std::option::Option<bool>);
        _51 = &mut _2;
        _50 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<flags::display::Display>>(_51) -> [return: bb32, unwind: bb106];
    }

    bb31: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb100;
    }

    bb32: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _54 = move ((_50 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _54);
        goto -> bb100;
    }

    bb34: {
        _53 = ((_50 as Ok).0: std::option::Option<std::option::Option<flags::display::Display>>);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _161 = const _;
        _58 = _161 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _57 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb37, unwind: bb106];
    }

    bb36: {
        _56 = ((_53 as Some).0: std::option::Option<flags::display::Display>);
        _61 = &mut _2;
        _60 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<config_file::Icons>>(_61) -> [return: bb38, unwind: bb106];
    }

    bb37: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _57);
        goto -> bb100;
    }

    bb38: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _64 = move ((_60 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _64);
        goto -> bb100;
    }

    bb40: {
        _63 = move ((_60 as Ok).0: std::option::Option<std::option::Option<config_file::Icons>>);
        _65 = discriminant(_63);
        switchInt(move _65) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _162 = const _;
        _68 = _162 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _67 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 6_usize, move _68) -> [return: bb43, unwind: bb106];
    }

    bb42: {
        _66 = move ((_63 as Some).0: std::option::Option<config_file::Icons>);
        _59 = move _66;
        _71 = &mut _2;
        _70 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Vec<std::string::String>>>(_71) -> [return: bb44, unwind: bb105];
    }

    bb43: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _67);
        goto -> bb100;
    }

    bb44: {
        _72 = discriminant(_70);
        switchInt(move _72) -> [0: bb46, 1: bb45, otherwise: bb3];
    }

    bb45: {
        _74 = move ((_70 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _74);
        goto -> bb99;
    }

    bb46: {
        _73 = move ((_70 as Ok).0: std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>);
        _75 = discriminant(_73);
        switchInt(move _75) -> [0: bb47, 1: bb48, otherwise: bb3];
    }

    bb47: {
        _163 = const _;
        _78 = _163 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _77 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 7_usize, move _78) -> [return: bb49, unwind: bb105];
    }

    bb48: {
        _76 = move ((_73 as Some).0: std::option::Option<std::vec::Vec<std::string::String>>);
        _69 = move _76;
        _80 = &mut _2;
        _79 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<bool>>(_80) -> [return: bb50, unwind: bb104];
    }

    bb49: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _77);
        goto -> bb99;
    }

    bb50: {
        _81 = discriminant(_79);
        switchInt(move _81) -> [0: bb52, 1: bb51, otherwise: bb3];
    }

    bb51: {
        _83 = move ((_79 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _83);
        goto -> bb98;
    }

    bb52: {
        _82 = ((_79 as Ok).0: std::option::Option<std::option::Option<bool>>);
        _84 = discriminant(_82);
        switchInt(move _84) -> [0: bb53, 1: bb54, otherwise: bb3];
    }

    bb53: {
        _164 = const _;
        _87 = _164 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _86 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 8_usize, move _87) -> [return: bb55, unwind: bb104];
    }

    bb54: {
        _85 = ((_82 as Some).0: std::option::Option<bool>);
        _89 = &mut _2;
        _88 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<layout::Layout>>(_89) -> [return: bb56, unwind: bb104];
    }

    bb55: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _86);
        goto -> bb98;
    }

    bb56: {
        _90 = discriminant(_88);
        switchInt(move _90) -> [0: bb58, 1: bb57, otherwise: bb3];
    }

    bb57: {
        _92 = move ((_88 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _92);
        goto -> bb98;
    }

    bb58: {
        _91 = ((_88 as Ok).0: std::option::Option<std::option::Option<flags::layout::Layout>>);
        _93 = discriminant(_91);
        switchInt(move _93) -> [0: bb59, 1: bb60, otherwise: bb3];
    }

    bb59: {
        _165 = const _;
        _96 = _165 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _95 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 9_usize, move _96) -> [return: bb61, unwind: bb104];
    }

    bb60: {
        _94 = ((_91 as Some).0: std::option::Option<flags::layout::Layout>);
        _98 = &mut _2;
        _97 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<config_file::Recursion>>(_98) -> [return: bb62, unwind: bb104];
    }

    bb61: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _95);
        goto -> bb98;
    }

    bb62: {
        _99 = discriminant(_97);
        switchInt(move _99) -> [0: bb64, 1: bb63, otherwise: bb3];
    }

    bb63: {
        _101 = move ((_97 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _101);
        goto -> bb98;
    }

    bb64: {
        _100 = move ((_97 as Ok).0: std::option::Option<std::option::Option<config_file::Recursion>>);
        _102 = discriminant(_100);
        switchInt(move _102) -> [0: bb65, 1: bb66, otherwise: bb3];
    }

    bb65: {
        _166 = const _;
        _105 = _166 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _104 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 10_usize, move _105) -> [return: bb67, unwind: bb104];
    }

    bb66: {
        _103 = move ((_100 as Some).0: std::option::Option<config_file::Recursion>);
        _107 = &mut _2;
        _106 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<SizeFlag>>(_107) -> [return: bb68, unwind: bb104];
    }

    bb67: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _104);
        goto -> bb98;
    }

    bb68: {
        _108 = discriminant(_106);
        switchInt(move _108) -> [0: bb70, 1: bb69, otherwise: bb3];
    }

    bb69: {
        _110 = move ((_106 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _110);
        goto -> bb98;
    }

    bb70: {
        _109 = ((_106 as Ok).0: std::option::Option<std::option::Option<flags::size::SizeFlag>>);
        _111 = discriminant(_109);
        switchInt(move _111) -> [0: bb71, 1: bb72, otherwise: bb3];
    }

    bb71: {
        _167 = const _;
        _114 = _167 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _113 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 11_usize, move _114) -> [return: bb73, unwind: bb104];
    }

    bb72: {
        _112 = ((_109 as Some).0: std::option::Option<flags::size::SizeFlag>);
        _116 = &mut _2;
        _115 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<config_file::Sorting>>(_116) -> [return: bb74, unwind: bb104];
    }

    bb73: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _113);
        goto -> bb98;
    }

    bb74: {
        _117 = discriminant(_115);
        switchInt(move _117) -> [0: bb76, 1: bb75, otherwise: bb3];
    }

    bb75: {
        _119 = move ((_115 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _119);
        goto -> bb98;
    }

    bb76: {
        _118 = move ((_115 as Ok).0: std::option::Option<std::option::Option<config_file::Sorting>>);
        _120 = discriminant(_118);
        switchInt(move _120) -> [0: bb77, 1: bb78, otherwise: bb3];
    }

    bb77: {
        _168 = const _;
        _123 = _168 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _122 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 12_usize, move _123) -> [return: bb79, unwind: bb104];
    }

    bb78: {
        _121 = move ((_118 as Some).0: std::option::Option<config_file::Sorting>);
        _125 = &mut _2;
        _124 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<bool>>(_125) -> [return: bb80, unwind: bb104];
    }

    bb79: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _122);
        goto -> bb98;
    }

    bb80: {
        _126 = discriminant(_124);
        switchInt(move _126) -> [0: bb82, 1: bb81, otherwise: bb3];
    }

    bb81: {
        _128 = move ((_124 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _128);
        goto -> bb98;
    }

    bb82: {
        _127 = ((_124 as Ok).0: std::option::Option<std::option::Option<bool>>);
        _129 = discriminant(_127);
        switchInt(move _129) -> [0: bb83, 1: bb84, otherwise: bb3];
    }

    bb83: {
        _169 = const _;
        _132 = _169 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _131 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 13_usize, move _132) -> [return: bb85, unwind: bb104];
    }

    bb84: {
        _130 = ((_127 as Some).0: std::option::Option<bool>);
        _134 = &mut _2;
        _133 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<bool>>(_134) -> [return: bb86, unwind: bb104];
    }

    bb85: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _131);
        goto -> bb98;
    }

    bb86: {
        _135 = discriminant(_133);
        switchInt(move _135) -> [0: bb88, 1: bb87, otherwise: bb3];
    }

    bb87: {
        _137 = move ((_133 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _137);
        goto -> bb98;
    }

    bb88: {
        _136 = ((_133 as Ok).0: std::option::Option<std::option::Option<bool>>);
        _138 = discriminant(_136);
        switchInt(move _138) -> [0: bb89, 1: bb90, otherwise: bb3];
    }

    bb89: {
        _170 = const _;
        _141 = _170 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _140 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 14_usize, move _141) -> [return: bb91, unwind: bb104];
    }

    bb90: {
        _139 = ((_136 as Some).0: std::option::Option<bool>);
        _143 = &mut _2;
        _142 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_143) -> [return: bb92, unwind: bb104];
    }

    bb91: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _140);
        goto -> bb98;
    }

    bb92: {
        _144 = discriminant(_142);
        switchInt(move _144) -> [0: bb94, 1: bb93, otherwise: bb3];
    }

    bb93: {
        _146 = move ((_142 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _146);
        goto -> bb98;
    }

    bb94: {
        _145 = move ((_142 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _147 = discriminant(_145);
        switchInt(move _147) -> [0: bb95, 1: bb96, otherwise: bb3];
    }

    bb95: {
        _171 = const _;
        _150 = _171 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _149 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 15_usize, move _150) -> [return: bb97, unwind: bb104];
    }

    bb96: {
        _148 = move ((_145 as Some).0: std::option::Option<std::string::String>);
        _152 = move _12;
        _153 = move _31;
        _154 = move _59;
        _155 = move _69;
        _151 = Config { classic: _9, blocks: move _152, color: move _28, date: move _153, dereference: _47, display: _56, icons: move _154, ignore_globs: move _155, indicators: _85, layout: _94, recursion: move _103, size: _112, sorting: move _121, no_symlink: _130, total_size: _139, symlink_arrow: move _148 };
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Ok(move _151);
        drop(_2) -> [return: bb103, unwind continue];
    }

    bb97: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _149);
        goto -> bb98;
    }

    bb98: {
        drop(_69) -> [return: bb99, unwind: bb105];
    }

    bb99: {
        drop(_59) -> [return: bb100, unwind: bb106];
    }

    bb100: {
        drop(_31) -> [return: bb101, unwind: bb107];
    }

    bb101: {
        drop(_12) -> [return: bb102, unwind: bb108];
    }

    bb102: {
        drop(_2) -> [return: bb103, unwind continue];
    }

    bb103: {
        return;
    }

    bb104 (cleanup): {
        drop(_69) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_59) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_31) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_12) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_2) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        resume;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[7] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[8] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[9] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[10] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[11] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[12] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[13] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[14] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

promoted[15] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Config with 16 elements";
        _0 = &_1;
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::<impl at src/config_file.rs:23:32: 23:43>::visit_map(_1: config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_>, _2: __A) -> Result<Config, <__A as MapAccess<'_>>::Error> {
    debug self => const config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Config>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<config_file::Config, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<bool>>;
    let mut _19: std::result::Result<std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _20: &mut __A;
    let mut _21: isize;
    let mut _24: isize;
    let mut _26: isize;
    let mut _27: bool;
    let _28: &std::option::Option<std::option::Option<bool>>;
    let mut _29: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _30: std::option::Option<std::option::Option<bool>>;
    let mut _31: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: bool;
    let _37: &std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>;
    let mut _38: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _39: std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>;
    let mut _40: std::result::Result<std::option::Option<std::vec::Vec<std::string::String>>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _41: &mut __A;
    let mut _42: isize;
    let mut _45: bool;
    let _46: &std::option::Option<std::option::Option<config_file::Color>>;
    let mut _47: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _48: std::option::Option<std::option::Option<config_file::Color>>;
    let mut _49: std::result::Result<std::option::Option<config_file::Color>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _50: &mut __A;
    let mut _51: isize;
    let mut _54: bool;
    let _55: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _56: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _57: std::option::Option<std::option::Option<std::string::String>>;
    let mut _58: std::result::Result<std::option::Option<std::string::String>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _59: &mut __A;
    let mut _60: isize;
    let mut _63: bool;
    let _64: &std::option::Option<std::option::Option<bool>>;
    let mut _65: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _66: std::option::Option<std::option::Option<bool>>;
    let mut _67: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _68: &mut __A;
    let mut _69: isize;
    let mut _72: bool;
    let _73: &std::option::Option<std::option::Option<flags::display::Display>>;
    let mut _74: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _75: std::option::Option<std::option::Option<flags::display::Display>>;
    let mut _76: std::result::Result<std::option::Option<flags::display::Display>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _77: &mut __A;
    let mut _78: isize;
    let mut _81: bool;
    let _82: &std::option::Option<std::option::Option<config_file::Icons>>;
    let mut _83: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _84: std::option::Option<std::option::Option<config_file::Icons>>;
    let mut _85: std::result::Result<std::option::Option<config_file::Icons>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _86: &mut __A;
    let mut _87: isize;
    let mut _90: bool;
    let _91: &std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>;
    let mut _92: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _93: std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>;
    let mut _94: std::result::Result<std::option::Option<std::vec::Vec<std::string::String>>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _95: &mut __A;
    let mut _96: isize;
    let mut _99: bool;
    let _100: &std::option::Option<std::option::Option<bool>>;
    let mut _101: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _102: std::option::Option<std::option::Option<bool>>;
    let mut _103: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _104: &mut __A;
    let mut _105: isize;
    let mut _108: bool;
    let _109: &std::option::Option<std::option::Option<flags::layout::Layout>>;
    let mut _110: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _111: std::option::Option<std::option::Option<flags::layout::Layout>>;
    let mut _112: std::result::Result<std::option::Option<flags::layout::Layout>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _113: &mut __A;
    let mut _114: isize;
    let mut _117: bool;
    let _118: &std::option::Option<std::option::Option<config_file::Recursion>>;
    let mut _119: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _120: std::option::Option<std::option::Option<config_file::Recursion>>;
    let mut _121: std::result::Result<std::option::Option<config_file::Recursion>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _122: &mut __A;
    let mut _123: isize;
    let mut _126: bool;
    let _127: &std::option::Option<std::option::Option<flags::size::SizeFlag>>;
    let mut _128: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _129: std::option::Option<std::option::Option<flags::size::SizeFlag>>;
    let mut _130: std::result::Result<std::option::Option<flags::size::SizeFlag>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _131: &mut __A;
    let mut _132: isize;
    let mut _135: bool;
    let _136: &std::option::Option<std::option::Option<config_file::Sorting>>;
    let mut _137: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _138: std::option::Option<std::option::Option<config_file::Sorting>>;
    let mut _139: std::result::Result<std::option::Option<config_file::Sorting>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _140: &mut __A;
    let mut _141: isize;
    let mut _144: bool;
    let _145: &std::option::Option<std::option::Option<bool>>;
    let mut _146: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _147: std::option::Option<std::option::Option<bool>>;
    let mut _148: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _149: &mut __A;
    let mut _150: isize;
    let mut _153: bool;
    let _154: &std::option::Option<std::option::Option<bool>>;
    let mut _155: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _156: std::option::Option<std::option::Option<bool>>;
    let mut _157: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _158: &mut __A;
    let mut _159: isize;
    let mut _162: bool;
    let _163: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _164: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _165: std::option::Option<std::option::Option<std::string::String>>;
    let mut _166: std::result::Result<std::option::Option<std::string::String>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _167: &mut __A;
    let mut _168: isize;
    let mut _172: isize;
    let mut _174: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _175: isize;
    let mut _179: isize;
    let mut _181: std::result::Result<std::option::Option<std::vec::Vec<std::string::String>>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _182: isize;
    let mut _186: isize;
    let mut _188: std::result::Result<std::option::Option<config_file::Color>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _189: isize;
    let mut _193: isize;
    let mut _195: std::result::Result<std::option::Option<std::string::String>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _196: isize;
    let mut _200: isize;
    let mut _202: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _203: isize;
    let mut _207: isize;
    let mut _209: std::result::Result<std::option::Option<flags::display::Display>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _210: isize;
    let mut _214: isize;
    let mut _216: std::result::Result<std::option::Option<config_file::Icons>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _217: isize;
    let mut _221: isize;
    let mut _223: std::result::Result<std::option::Option<std::vec::Vec<std::string::String>>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _224: isize;
    let mut _228: isize;
    let mut _230: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _231: isize;
    let mut _235: isize;
    let mut _237: std::result::Result<std::option::Option<flags::layout::Layout>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _238: isize;
    let mut _242: isize;
    let mut _244: std::result::Result<std::option::Option<config_file::Recursion>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _245: isize;
    let mut _249: isize;
    let mut _251: std::result::Result<std::option::Option<flags::size::SizeFlag>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _252: isize;
    let mut _256: isize;
    let mut _258: std::result::Result<std::option::Option<config_file::Sorting>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _259: isize;
    let mut _263: isize;
    let mut _265: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _266: isize;
    let mut _270: isize;
    let mut _272: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _273: isize;
    let mut _277: isize;
    let mut _279: std::result::Result<std::option::Option<std::string::String>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _280: isize;
    let mut _283: config_file::Config;
    let mut _284: std::option::Option<bool>;
    let mut _285: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _286: std::option::Option<config_file::Color>;
    let mut _287: std::option::Option<std::string::String>;
    let mut _288: std::option::Option<bool>;
    let mut _289: std::option::Option<flags::display::Display>;
    let mut _290: std::option::Option<config_file::Icons>;
    let mut _291: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _292: std::option::Option<bool>;
    let mut _293: std::option::Option<flags::layout::Layout>;
    let mut _294: std::option::Option<config_file::Recursion>;
    let mut _295: std::option::Option<flags::size::SizeFlag>;
    let mut _296: std::option::Option<config_file::Sorting>;
    let mut _297: std::option::Option<bool>;
    let mut _298: std::option::Option<bool>;
    let mut _299: std::option::Option<std::string::String>;
    let mut _300: bool;
    let mut _301: bool;
    let mut _302: bool;
    let mut _303: bool;
    let mut _304: bool;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::option::Option<config_file::Color>>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<std::option::Option<std::string::String>>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<bool>>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<std::option::Option<flags::display::Display>>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<std::option::Option<config_file::Icons>>;
                            scope 7 {
                                debug __field6 => _9;
                                let mut _10: std::option::Option<std::option::Option<std::vec::Vec<std::string::String>>>;
                                scope 8 {
                                    debug __field7 => _10;
                                    let mut _11: std::option::Option<std::option::Option<bool>>;
                                    scope 9 {
                                        debug __field8 => _11;
                                        let mut _12: std::option::Option<std::option::Option<flags::layout::Layout>>;
                                        scope 10 {
                                            debug __field9 => _12;
                                            let mut _13: std::option::Option<std::option::Option<config_file::Recursion>>;
                                            scope 11 {
                                                debug __field10 => _13;
                                                let mut _14: std::option::Option<std::option::Option<flags::size::SizeFlag>>;
                                                scope 12 {
                                                    debug __field11 => _14;
                                                    let mut _15: std::option::Option<std::option::Option<config_file::Sorting>>;
                                                    scope 13 {
                                                        debug __field12 => _15;
                                                        let mut _16: std::option::Option<std::option::Option<bool>>;
                                                        scope 14 {
                                                            debug __field13 => _16;
                                                            let mut _17: std::option::Option<std::option::Option<bool>>;
                                                            scope 15 {
                                                                debug __field14 => _17;
                                                                let mut _18: std::option::Option<std::option::Option<std::string::String>>;
                                                                scope 16 {
                                                                    debug __field15 => _18;
                                                                    let _171: std::option::Option<bool>;
                                                                    let _173: std::option::Option<bool>;
                                                                    let _176: std::option::Option<bool>;
                                                                    let _177: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                    scope 17 {
                                                                        debug __key => _25;
                                                                        let _22: std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field>;
                                                                        let _23: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _25: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field;
                                                                        let _34: std::option::Option<bool>;
                                                                        let _35: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _43: std::option::Option<std::vec::Vec<std::string::String>>;
                                                                        let _44: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _52: std::option::Option<config_file::Color>;
                                                                        let _53: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _61: std::option::Option<std::string::String>;
                                                                        let _62: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _70: std::option::Option<bool>;
                                                                        let _71: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _79: std::option::Option<flags::display::Display>;
                                                                        let _80: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _88: std::option::Option<config_file::Icons>;
                                                                        let _89: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _97: std::option::Option<std::vec::Vec<std::string::String>>;
                                                                        let _98: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _106: std::option::Option<bool>;
                                                                        let _107: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _115: std::option::Option<flags::layout::Layout>;
                                                                        let _116: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _124: std::option::Option<config_file::Recursion>;
                                                                        let _125: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _133: std::option::Option<flags::size::SizeFlag>;
                                                                        let _134: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _142: std::option::Option<config_file::Sorting>;
                                                                        let _143: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _151: std::option::Option<bool>;
                                                                        let _152: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _160: std::option::Option<bool>;
                                                                        let _161: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        let _169: std::option::Option<std::string::String>;
                                                                        let _170: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        scope 18 {
                                                                            debug __val => _22;
                                                                        }
                                                                        scope 19 {
                                                                            debug __err => _23;
                                                                        }
                                                                        scope 20 {
                                                                            debug __val => _34;
                                                                        }
                                                                        scope 21 {
                                                                            debug __err => _35;
                                                                        }
                                                                        scope 22 {
                                                                            debug __val => _43;
                                                                        }
                                                                        scope 23 {
                                                                            debug __err => _44;
                                                                        }
                                                                        scope 24 {
                                                                            debug __val => _52;
                                                                        }
                                                                        scope 25 {
                                                                            debug __err => _53;
                                                                        }
                                                                        scope 26 {
                                                                            debug __val => _61;
                                                                        }
                                                                        scope 27 {
                                                                            debug __err => _62;
                                                                        }
                                                                        scope 28 {
                                                                            debug __val => _70;
                                                                        }
                                                                        scope 29 {
                                                                            debug __err => _71;
                                                                        }
                                                                        scope 30 {
                                                                            debug __val => _79;
                                                                        }
                                                                        scope 31 {
                                                                            debug __err => _80;
                                                                        }
                                                                        scope 32 {
                                                                            debug __val => _88;
                                                                        }
                                                                        scope 33 {
                                                                            debug __err => _89;
                                                                        }
                                                                        scope 34 {
                                                                            debug __val => _97;
                                                                        }
                                                                        scope 35 {
                                                                            debug __err => _98;
                                                                        }
                                                                        scope 36 {
                                                                            debug __val => _106;
                                                                        }
                                                                        scope 37 {
                                                                            debug __err => _107;
                                                                        }
                                                                        scope 38 {
                                                                            debug __val => _115;
                                                                        }
                                                                        scope 39 {
                                                                            debug __err => _116;
                                                                        }
                                                                        scope 40 {
                                                                            debug __val => _124;
                                                                        }
                                                                        scope 41 {
                                                                            debug __err => _125;
                                                                        }
                                                                        scope 42 {
                                                                            debug __val => _133;
                                                                        }
                                                                        scope 43 {
                                                                            debug __err => _134;
                                                                        }
                                                                        scope 44 {
                                                                            debug __val => _142;
                                                                        }
                                                                        scope 45 {
                                                                            debug __err => _143;
                                                                        }
                                                                        scope 46 {
                                                                            debug __val => _151;
                                                                        }
                                                                        scope 47 {
                                                                            debug __err => _152;
                                                                        }
                                                                        scope 48 {
                                                                            debug __val => _160;
                                                                        }
                                                                        scope 49 {
                                                                            debug __err => _161;
                                                                        }
                                                                        scope 50 {
                                                                            debug __val => _169;
                                                                        }
                                                                        scope 51 {
                                                                            debug __err => _170;
                                                                        }
                                                                    }
                                                                    scope 52 {
                                                                        debug __field0 => _171;
                                                                        let _178: std::option::Option<std::vec::Vec<std::string::String>>;
                                                                        let _180: std::option::Option<std::vec::Vec<std::string::String>>;
                                                                        let _183: std::option::Option<std::vec::Vec<std::string::String>>;
                                                                        let _184: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                        scope 56 {
                                                                            debug __field1 => _178;
                                                                            let _185: std::option::Option<config_file::Color>;
                                                                            let _187: std::option::Option<config_file::Color>;
                                                                            let _190: std::option::Option<config_file::Color>;
                                                                            let _191: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                            scope 60 {
                                                                                debug __field2 => _185;
                                                                                let _192: std::option::Option<std::string::String>;
                                                                                let _194: std::option::Option<std::string::String>;
                                                                                let _197: std::option::Option<std::string::String>;
                                                                                let _198: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                scope 64 {
                                                                                    debug __field3 => _192;
                                                                                    let _199: std::option::Option<bool>;
                                                                                    let _201: std::option::Option<bool>;
                                                                                    let _204: std::option::Option<bool>;
                                                                                    let _205: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                    scope 68 {
                                                                                        debug __field4 => _199;
                                                                                        let _206: std::option::Option<flags::display::Display>;
                                                                                        let _208: std::option::Option<flags::display::Display>;
                                                                                        let _211: std::option::Option<flags::display::Display>;
                                                                                        let _212: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                        scope 72 {
                                                                                            debug __field5 => _206;
                                                                                            let _213: std::option::Option<config_file::Icons>;
                                                                                            let _215: std::option::Option<config_file::Icons>;
                                                                                            let _218: std::option::Option<config_file::Icons>;
                                                                                            let _219: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                            scope 76 {
                                                                                                debug __field6 => _213;
                                                                                                let _220: std::option::Option<std::vec::Vec<std::string::String>>;
                                                                                                let _222: std::option::Option<std::vec::Vec<std::string::String>>;
                                                                                                let _225: std::option::Option<std::vec::Vec<std::string::String>>;
                                                                                                let _226: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                                scope 80 {
                                                                                                    debug __field7 => _220;
                                                                                                    let _227: std::option::Option<bool>;
                                                                                                    let _229: std::option::Option<bool>;
                                                                                                    let _232: std::option::Option<bool>;
                                                                                                    let _233: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                                    scope 84 {
                                                                                                        debug __field8 => _227;
                                                                                                        let _234: std::option::Option<flags::layout::Layout>;
                                                                                                        let _236: std::option::Option<flags::layout::Layout>;
                                                                                                        let _239: std::option::Option<flags::layout::Layout>;
                                                                                                        let _240: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                                        scope 88 {
                                                                                                            debug __field9 => _234;
                                                                                                            let _241: std::option::Option<config_file::Recursion>;
                                                                                                            let _243: std::option::Option<config_file::Recursion>;
                                                                                                            let _246: std::option::Option<config_file::Recursion>;
                                                                                                            let _247: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                                            scope 92 {
                                                                                                                debug __field10 => _241;
                                                                                                                let _248: std::option::Option<flags::size::SizeFlag>;
                                                                                                                let _250: std::option::Option<flags::size::SizeFlag>;
                                                                                                                let _253: std::option::Option<flags::size::SizeFlag>;
                                                                                                                let _254: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                                                scope 96 {
                                                                                                                    debug __field11 => _248;
                                                                                                                    let _255: std::option::Option<config_file::Sorting>;
                                                                                                                    let _257: std::option::Option<config_file::Sorting>;
                                                                                                                    let _260: std::option::Option<config_file::Sorting>;
                                                                                                                    let _261: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                                                    scope 100 {
                                                                                                                        debug __field12 => _255;
                                                                                                                        let _262: std::option::Option<bool>;
                                                                                                                        let _264: std::option::Option<bool>;
                                                                                                                        let _267: std::option::Option<bool>;
                                                                                                                        let _268: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                                                        scope 104 {
                                                                                                                            debug __field13 => _262;
                                                                                                                            let _269: std::option::Option<bool>;
                                                                                                                            let _271: std::option::Option<bool>;
                                                                                                                            let _274: std::option::Option<bool>;
                                                                                                                            let _275: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                                                            scope 108 {
                                                                                                                                debug __field14 => _269;
                                                                                                                                let _276: std::option::Option<std::string::String>;
                                                                                                                                let _278: std::option::Option<std::string::String>;
                                                                                                                                let _281: std::option::Option<std::string::String>;
                                                                                                                                let _282: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                                                                                                                                scope 112 {
                                                                                                                                    debug __field15 => _276;
                                                                                                                                }
                                                                                                                                scope 113 {
                                                                                                                                    debug __field15 => _278;
                                                                                                                                }
                                                                                                                                scope 114 {
                                                                                                                                    debug __val => _281;
                                                                                                                                }
                                                                                                                                scope 115 {
                                                                                                                                    debug __err => _282;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 109 {
                                                                                                                                debug __field14 => _271;
                                                                                                                            }
                                                                                                                            scope 110 {
                                                                                                                                debug __val => _274;
                                                                                                                            }
                                                                                                                            scope 111 {
                                                                                                                                debug __err => _275;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 105 {
                                                                                                                            debug __field13 => _264;
                                                                                                                        }
                                                                                                                        scope 106 {
                                                                                                                            debug __val => _267;
                                                                                                                        }
                                                                                                                        scope 107 {
                                                                                                                            debug __err => _268;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 101 {
                                                                                                                        debug __field12 => _257;
                                                                                                                    }
                                                                                                                    scope 102 {
                                                                                                                        debug __val => _260;
                                                                                                                    }
                                                                                                                    scope 103 {
                                                                                                                        debug __err => _261;
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 97 {
                                                                                                                    debug __field11 => _250;
                                                                                                                }
                                                                                                                scope 98 {
                                                                                                                    debug __val => _253;
                                                                                                                }
                                                                                                                scope 99 {
                                                                                                                    debug __err => _254;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 93 {
                                                                                                                debug __field10 => _243;
                                                                                                            }
                                                                                                            scope 94 {
                                                                                                                debug __val => _246;
                                                                                                            }
                                                                                                            scope 95 {
                                                                                                                debug __err => _247;
                                                                                                            }
                                                                                                        }
                                                                                                        scope 89 {
                                                                                                            debug __field9 => _236;
                                                                                                        }
                                                                                                        scope 90 {
                                                                                                            debug __val => _239;
                                                                                                        }
                                                                                                        scope 91 {
                                                                                                            debug __err => _240;
                                                                                                        }
                                                                                                    }
                                                                                                    scope 85 {
                                                                                                        debug __field8 => _229;
                                                                                                    }
                                                                                                    scope 86 {
                                                                                                        debug __val => _232;
                                                                                                    }
                                                                                                    scope 87 {
                                                                                                        debug __err => _233;
                                                                                                    }
                                                                                                }
                                                                                                scope 81 {
                                                                                                    debug __field7 => _222;
                                                                                                }
                                                                                                scope 82 {
                                                                                                    debug __val => _225;
                                                                                                }
                                                                                                scope 83 {
                                                                                                    debug __err => _226;
                                                                                                }
                                                                                            }
                                                                                            scope 77 {
                                                                                                debug __field6 => _215;
                                                                                            }
                                                                                            scope 78 {
                                                                                                debug __val => _218;
                                                                                            }
                                                                                            scope 79 {
                                                                                                debug __err => _219;
                                                                                            }
                                                                                        }
                                                                                        scope 73 {
                                                                                            debug __field5 => _208;
                                                                                        }
                                                                                        scope 74 {
                                                                                            debug __val => _211;
                                                                                        }
                                                                                        scope 75 {
                                                                                            debug __err => _212;
                                                                                        }
                                                                                    }
                                                                                    scope 69 {
                                                                                        debug __field4 => _201;
                                                                                    }
                                                                                    scope 70 {
                                                                                        debug __val => _204;
                                                                                    }
                                                                                    scope 71 {
                                                                                        debug __err => _205;
                                                                                    }
                                                                                }
                                                                                scope 65 {
                                                                                    debug __field3 => _194;
                                                                                }
                                                                                scope 66 {
                                                                                    debug __val => _197;
                                                                                }
                                                                                scope 67 {
                                                                                    debug __err => _198;
                                                                                }
                                                                            }
                                                                            scope 61 {
                                                                                debug __field2 => _187;
                                                                            }
                                                                            scope 62 {
                                                                                debug __val => _190;
                                                                            }
                                                                            scope 63 {
                                                                                debug __err => _191;
                                                                            }
                                                                        }
                                                                        scope 57 {
                                                                            debug __field1 => _180;
                                                                        }
                                                                        scope 58 {
                                                                            debug __val => _183;
                                                                        }
                                                                        scope 59 {
                                                                            debug __err => _184;
                                                                        }
                                                                    }
                                                                    scope 53 {
                                                                        debug __field0 => _173;
                                                                    }
                                                                    scope 54 {
                                                                        debug __val => _176;
                                                                    }
                                                                    scope 55 {
                                                                        debug __err => _177;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _304 = const false;
        _303 = const false;
        _302 = const false;
        _301 = const false;
        _300 = const false;
        _3 = std::option::Option::<std::option::Option<bool>>::None;
        _304 = const true;
        _4 = std::option::Option::<std::option::Option<Vec<std::string::String>>>::None;
        _5 = std::option::Option::<std::option::Option<config_file::Color>>::None;
        _303 = const true;
        _6 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _7 = std::option::Option::<std::option::Option<bool>>::None;
        _8 = std::option::Option::<std::option::Option<flags::display::Display>>::None;
        _302 = const true;
        _9 = std::option::Option::<std::option::Option<config_file::Icons>>::None;
        _301 = const true;
        _10 = std::option::Option::<std::option::Option<Vec<std::string::String>>>::None;
        _11 = std::option::Option::<std::option::Option<bool>>::None;
        _12 = std::option::Option::<std::option::Option<layout::Layout>>::None;
        _13 = std::option::Option::<std::option::Option<config_file::Recursion>>::None;
        _14 = std::option::Option::<std::option::Option<SizeFlag>>::None;
        _15 = std::option::Option::<std::option::Option<config_file::Sorting>>::None;
        _16 = std::option::Option::<std::option::Option<bool>>::None;
        _17 = std::option::Option::<std::option::Option<bool>>::None;
        _300 = const true;
        _18 = std::option::Option::<std::option::Option<std::string::String>>::None;
        goto -> bb1;
    }

    bb1: {
        _20 = &mut _2;
        _19 = <__A as MapAccess<'_>>::next_key::<config_file::_::<impl Deserialize<'de> for Config>::deserialize::__Field>(_20) -> [return: bb2, unwind: bb275];
    }

    bb2: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _23 = move ((_19 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _23);
        goto -> bb260;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _22 = move ((_19 as Ok).0: std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field>);
        _24 = discriminant(_22);
        switchInt(move _24) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _172 = discriminant(_3);
        switchInt(move _172) -> [0: bb146, 1: bb147, otherwise: bb4];
    }

    bb7: {
        _25 = move ((_22 as Some).0: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Config>::deserialize::__Field);
        _26 = discriminant(_25);
        switchInt(move _26) -> [0: bb9, 1: bb17, 2: bb27, 3: bb35, 4: bb45, 5: bb53, 6: bb61, 7: bb71, 8: bb81, 9: bb89, 10: bb97, 11: bb105, 12: bb113, 13: bb121, 14: bb129, 15: bb8, otherwise: bb4];
    }

    bb8: {
        _163 = &_18;
        _162 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_163) -> [return: bb137, unwind: bb275];
    }

    bb9: {
        _28 = &_3;
        _27 = std::option::Option::<std::option::Option<bool>>::is_some(_28) -> [return: bb10, unwind: bb275];
    }

    bb10: {
        switchInt(move _27) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _29 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "classic") -> [return: bb12, unwind: bb275];
    }

    bb12: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _29);
        goto -> bb260;
    }

    bb13: {
        _32 = &mut _2;
        _31 = <__A as MapAccess<'_>>::next_value::<std::option::Option<bool>>(_32) -> [return: bb14, unwind: bb275];
    }

    bb14: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _35 = move ((_31 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _35);
        goto -> bb260;
    }

    bb16: {
        _34 = ((_31 as Ok).0: std::option::Option<bool>);
        _30 = std::option::Option::<std::option::Option<bool>>::Some(_34);
        _3 = move _30;
        goto -> bb1;
    }

    bb17: {
        _37 = &_4;
        _36 = std::option::Option::<std::option::Option<Vec<std::string::String>>>::is_some(_37) -> [return: bb18, unwind: bb275];
    }

    bb18: {
        switchInt(move _36) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _38 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "blocks") -> [return: bb20, unwind: bb275];
    }

    bb20: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _38);
        goto -> bb260;
    }

    bb21: {
        _41 = &mut _2;
        _40 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Vec<std::string::String>>>(_41) -> [return: bb22, unwind: bb275];
    }

    bb22: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _44 = move ((_40 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb260;
    }

    bb24: {
        _43 = move ((_40 as Ok).0: std::option::Option<std::vec::Vec<std::string::String>>);
        _39 = std::option::Option::<std::option::Option<Vec<std::string::String>>>::Some(move _43);
        drop(_4) -> [return: bb25, unwind: bb26];
    }

    bb25: {
        _304 = const true;
        _4 = move _39;
        goto -> bb1;
    }

    bb26 (cleanup): {
        _304 = const true;
        _4 = move _39;
        goto -> bb275;
    }

    bb27: {
        _46 = &_5;
        _45 = std::option::Option::<std::option::Option<config_file::Color>>::is_some(_46) -> [return: bb28, unwind: bb275];
    }

    bb28: {
        switchInt(move _45) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _47 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "color") -> [return: bb30, unwind: bb275];
    }

    bb30: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _47);
        goto -> bb260;
    }

    bb31: {
        _50 = &mut _2;
        _49 = <__A as MapAccess<'_>>::next_value::<std::option::Option<config_file::Color>>(_50) -> [return: bb32, unwind: bb275];
    }

    bb32: {
        _51 = discriminant(_49);
        switchInt(move _51) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _53 = move ((_49 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _53);
        goto -> bb260;
    }

    bb34: {
        _52 = move ((_49 as Ok).0: std::option::Option<config_file::Color>);
        _48 = std::option::Option::<std::option::Option<config_file::Color>>::Some(move _52);
        _5 = move _48;
        goto -> bb1;
    }

    bb35: {
        _55 = &_6;
        _54 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_55) -> [return: bb36, unwind: bb275];
    }

    bb36: {
        switchInt(move _54) -> [0: bb39, otherwise: bb37];
    }

    bb37: {
        _56 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "date") -> [return: bb38, unwind: bb275];
    }

    bb38: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _56);
        goto -> bb260;
    }

    bb39: {
        _59 = &mut _2;
        _58 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_59) -> [return: bb40, unwind: bb275];
    }

    bb40: {
        _60 = discriminant(_58);
        switchInt(move _60) -> [0: bb42, 1: bb41, otherwise: bb4];
    }

    bb41: {
        _62 = move ((_58 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _62);
        goto -> bb260;
    }

    bb42: {
        _61 = move ((_58 as Ok).0: std::option::Option<std::string::String>);
        _57 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _61);
        drop(_6) -> [return: bb43, unwind: bb44];
    }

    bb43: {
        _303 = const true;
        _6 = move _57;
        goto -> bb1;
    }

    bb44 (cleanup): {
        _303 = const true;
        _6 = move _57;
        goto -> bb275;
    }

    bb45: {
        _64 = &_7;
        _63 = std::option::Option::<std::option::Option<bool>>::is_some(_64) -> [return: bb46, unwind: bb275];
    }

    bb46: {
        switchInt(move _63) -> [0: bb49, otherwise: bb47];
    }

    bb47: {
        _65 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "dereference") -> [return: bb48, unwind: bb275];
    }

    bb48: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _65);
        goto -> bb260;
    }

    bb49: {
        _68 = &mut _2;
        _67 = <__A as MapAccess<'_>>::next_value::<std::option::Option<bool>>(_68) -> [return: bb50, unwind: bb275];
    }

    bb50: {
        _69 = discriminant(_67);
        switchInt(move _69) -> [0: bb52, 1: bb51, otherwise: bb4];
    }

    bb51: {
        _71 = move ((_67 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _71);
        goto -> bb260;
    }

    bb52: {
        _70 = ((_67 as Ok).0: std::option::Option<bool>);
        _66 = std::option::Option::<std::option::Option<bool>>::Some(_70);
        _7 = move _66;
        goto -> bb1;
    }

    bb53: {
        _73 = &_8;
        _72 = std::option::Option::<std::option::Option<flags::display::Display>>::is_some(_73) -> [return: bb54, unwind: bb275];
    }

    bb54: {
        switchInt(move _72) -> [0: bb57, otherwise: bb55];
    }

    bb55: {
        _74 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "display") -> [return: bb56, unwind: bb275];
    }

    bb56: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _74);
        goto -> bb260;
    }

    bb57: {
        _77 = &mut _2;
        _76 = <__A as MapAccess<'_>>::next_value::<std::option::Option<flags::display::Display>>(_77) -> [return: bb58, unwind: bb275];
    }

    bb58: {
        _78 = discriminant(_76);
        switchInt(move _78) -> [0: bb60, 1: bb59, otherwise: bb4];
    }

    bb59: {
        _80 = move ((_76 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _80);
        goto -> bb260;
    }

    bb60: {
        _79 = ((_76 as Ok).0: std::option::Option<flags::display::Display>);
        _75 = std::option::Option::<std::option::Option<flags::display::Display>>::Some(_79);
        _8 = move _75;
        goto -> bb1;
    }

    bb61: {
        _82 = &_9;
        _81 = std::option::Option::<std::option::Option<config_file::Icons>>::is_some(_82) -> [return: bb62, unwind: bb275];
    }

    bb62: {
        switchInt(move _81) -> [0: bb65, otherwise: bb63];
    }

    bb63: {
        _83 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "icons") -> [return: bb64, unwind: bb275];
    }

    bb64: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _83);
        goto -> bb260;
    }

    bb65: {
        _86 = &mut _2;
        _85 = <__A as MapAccess<'_>>::next_value::<std::option::Option<config_file::Icons>>(_86) -> [return: bb66, unwind: bb275];
    }

    bb66: {
        _87 = discriminant(_85);
        switchInt(move _87) -> [0: bb68, 1: bb67, otherwise: bb4];
    }

    bb67: {
        _89 = move ((_85 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _89);
        goto -> bb260;
    }

    bb68: {
        _88 = move ((_85 as Ok).0: std::option::Option<config_file::Icons>);
        _84 = std::option::Option::<std::option::Option<config_file::Icons>>::Some(move _88);
        drop(_9) -> [return: bb69, unwind: bb70];
    }

    bb69: {
        _302 = const true;
        _9 = move _84;
        goto -> bb1;
    }

    bb70 (cleanup): {
        _302 = const true;
        _9 = move _84;
        goto -> bb275;
    }

    bb71: {
        _91 = &_10;
        _90 = std::option::Option::<std::option::Option<Vec<std::string::String>>>::is_some(_91) -> [return: bb72, unwind: bb275];
    }

    bb72: {
        switchInt(move _90) -> [0: bb75, otherwise: bb73];
    }

    bb73: {
        _92 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "ignore-globs") -> [return: bb74, unwind: bb275];
    }

    bb74: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _92);
        goto -> bb260;
    }

    bb75: {
        _95 = &mut _2;
        _94 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Vec<std::string::String>>>(_95) -> [return: bb76, unwind: bb275];
    }

    bb76: {
        _96 = discriminant(_94);
        switchInt(move _96) -> [0: bb78, 1: bb77, otherwise: bb4];
    }

    bb77: {
        _98 = move ((_94 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _98);
        goto -> bb260;
    }

    bb78: {
        _97 = move ((_94 as Ok).0: std::option::Option<std::vec::Vec<std::string::String>>);
        _93 = std::option::Option::<std::option::Option<Vec<std::string::String>>>::Some(move _97);
        drop(_10) -> [return: bb79, unwind: bb80];
    }

    bb79: {
        _301 = const true;
        _10 = move _93;
        goto -> bb1;
    }

    bb80 (cleanup): {
        _301 = const true;
        _10 = move _93;
        goto -> bb275;
    }

    bb81: {
        _100 = &_11;
        _99 = std::option::Option::<std::option::Option<bool>>::is_some(_100) -> [return: bb82, unwind: bb275];
    }

    bb82: {
        switchInt(move _99) -> [0: bb85, otherwise: bb83];
    }

    bb83: {
        _101 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "indicators") -> [return: bb84, unwind: bb275];
    }

    bb84: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _101);
        goto -> bb260;
    }

    bb85: {
        _104 = &mut _2;
        _103 = <__A as MapAccess<'_>>::next_value::<std::option::Option<bool>>(_104) -> [return: bb86, unwind: bb275];
    }

    bb86: {
        _105 = discriminant(_103);
        switchInt(move _105) -> [0: bb88, 1: bb87, otherwise: bb4];
    }

    bb87: {
        _107 = move ((_103 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _107);
        goto -> bb260;
    }

    bb88: {
        _106 = ((_103 as Ok).0: std::option::Option<bool>);
        _102 = std::option::Option::<std::option::Option<bool>>::Some(_106);
        _11 = move _102;
        goto -> bb1;
    }

    bb89: {
        _109 = &_12;
        _108 = std::option::Option::<std::option::Option<layout::Layout>>::is_some(_109) -> [return: bb90, unwind: bb275];
    }

    bb90: {
        switchInt(move _108) -> [0: bb93, otherwise: bb91];
    }

    bb91: {
        _110 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "layout") -> [return: bb92, unwind: bb275];
    }

    bb92: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _110);
        goto -> bb260;
    }

    bb93: {
        _113 = &mut _2;
        _112 = <__A as MapAccess<'_>>::next_value::<std::option::Option<layout::Layout>>(_113) -> [return: bb94, unwind: bb275];
    }

    bb94: {
        _114 = discriminant(_112);
        switchInt(move _114) -> [0: bb96, 1: bb95, otherwise: bb4];
    }

    bb95: {
        _116 = move ((_112 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _116);
        goto -> bb260;
    }

    bb96: {
        _115 = ((_112 as Ok).0: std::option::Option<flags::layout::Layout>);
        _111 = std::option::Option::<std::option::Option<layout::Layout>>::Some(_115);
        _12 = move _111;
        goto -> bb1;
    }

    bb97: {
        _118 = &_13;
        _117 = std::option::Option::<std::option::Option<config_file::Recursion>>::is_some(_118) -> [return: bb98, unwind: bb275];
    }

    bb98: {
        switchInt(move _117) -> [0: bb101, otherwise: bb99];
    }

    bb99: {
        _119 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "recursion") -> [return: bb100, unwind: bb275];
    }

    bb100: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _119);
        goto -> bb260;
    }

    bb101: {
        _122 = &mut _2;
        _121 = <__A as MapAccess<'_>>::next_value::<std::option::Option<config_file::Recursion>>(_122) -> [return: bb102, unwind: bb275];
    }

    bb102: {
        _123 = discriminant(_121);
        switchInt(move _123) -> [0: bb104, 1: bb103, otherwise: bb4];
    }

    bb103: {
        _125 = move ((_121 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _125);
        goto -> bb260;
    }

    bb104: {
        _124 = move ((_121 as Ok).0: std::option::Option<config_file::Recursion>);
        _120 = std::option::Option::<std::option::Option<config_file::Recursion>>::Some(move _124);
        _13 = move _120;
        goto -> bb1;
    }

    bb105: {
        _127 = &_14;
        _126 = std::option::Option::<std::option::Option<SizeFlag>>::is_some(_127) -> [return: bb106, unwind: bb275];
    }

    bb106: {
        switchInt(move _126) -> [0: bb109, otherwise: bb107];
    }

    bb107: {
        _128 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "size") -> [return: bb108, unwind: bb275];
    }

    bb108: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _128);
        goto -> bb260;
    }

    bb109: {
        _131 = &mut _2;
        _130 = <__A as MapAccess<'_>>::next_value::<std::option::Option<SizeFlag>>(_131) -> [return: bb110, unwind: bb275];
    }

    bb110: {
        _132 = discriminant(_130);
        switchInt(move _132) -> [0: bb112, 1: bb111, otherwise: bb4];
    }

    bb111: {
        _134 = move ((_130 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _134);
        goto -> bb260;
    }

    bb112: {
        _133 = ((_130 as Ok).0: std::option::Option<flags::size::SizeFlag>);
        _129 = std::option::Option::<std::option::Option<SizeFlag>>::Some(_133);
        _14 = move _129;
        goto -> bb1;
    }

    bb113: {
        _136 = &_15;
        _135 = std::option::Option::<std::option::Option<config_file::Sorting>>::is_some(_136) -> [return: bb114, unwind: bb275];
    }

    bb114: {
        switchInt(move _135) -> [0: bb117, otherwise: bb115];
    }

    bb115: {
        _137 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "sorting") -> [return: bb116, unwind: bb275];
    }

    bb116: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _137);
        goto -> bb260;
    }

    bb117: {
        _140 = &mut _2;
        _139 = <__A as MapAccess<'_>>::next_value::<std::option::Option<config_file::Sorting>>(_140) -> [return: bb118, unwind: bb275];
    }

    bb118: {
        _141 = discriminant(_139);
        switchInt(move _141) -> [0: bb120, 1: bb119, otherwise: bb4];
    }

    bb119: {
        _143 = move ((_139 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _143);
        goto -> bb260;
    }

    bb120: {
        _142 = move ((_139 as Ok).0: std::option::Option<config_file::Sorting>);
        _138 = std::option::Option::<std::option::Option<config_file::Sorting>>::Some(move _142);
        _15 = move _138;
        goto -> bb1;
    }

    bb121: {
        _145 = &_16;
        _144 = std::option::Option::<std::option::Option<bool>>::is_some(_145) -> [return: bb122, unwind: bb275];
    }

    bb122: {
        switchInt(move _144) -> [0: bb125, otherwise: bb123];
    }

    bb123: {
        _146 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "no-symlink") -> [return: bb124, unwind: bb275];
    }

    bb124: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _146);
        goto -> bb260;
    }

    bb125: {
        _149 = &mut _2;
        _148 = <__A as MapAccess<'_>>::next_value::<std::option::Option<bool>>(_149) -> [return: bb126, unwind: bb275];
    }

    bb126: {
        _150 = discriminant(_148);
        switchInt(move _150) -> [0: bb128, 1: bb127, otherwise: bb4];
    }

    bb127: {
        _152 = move ((_148 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _152);
        goto -> bb260;
    }

    bb128: {
        _151 = ((_148 as Ok).0: std::option::Option<bool>);
        _147 = std::option::Option::<std::option::Option<bool>>::Some(_151);
        _16 = move _147;
        goto -> bb1;
    }

    bb129: {
        _154 = &_17;
        _153 = std::option::Option::<std::option::Option<bool>>::is_some(_154) -> [return: bb130, unwind: bb275];
    }

    bb130: {
        switchInt(move _153) -> [0: bb133, otherwise: bb131];
    }

    bb131: {
        _155 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "total-size") -> [return: bb132, unwind: bb275];
    }

    bb132: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _155);
        goto -> bb260;
    }

    bb133: {
        _158 = &mut _2;
        _157 = <__A as MapAccess<'_>>::next_value::<std::option::Option<bool>>(_158) -> [return: bb134, unwind: bb275];
    }

    bb134: {
        _159 = discriminant(_157);
        switchInt(move _159) -> [0: bb136, 1: bb135, otherwise: bb4];
    }

    bb135: {
        _161 = move ((_157 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _161);
        goto -> bb260;
    }

    bb136: {
        _160 = ((_157 as Ok).0: std::option::Option<bool>);
        _156 = std::option::Option::<std::option::Option<bool>>::Some(_160);
        _17 = move _156;
        goto -> bb1;
    }

    bb137: {
        switchInt(move _162) -> [0: bb140, otherwise: bb138];
    }

    bb138: {
        _164 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "symlink-arrow") -> [return: bb139, unwind: bb275];
    }

    bb139: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _164);
        goto -> bb260;
    }

    bb140: {
        _167 = &mut _2;
        _166 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_167) -> [return: bb141, unwind: bb275];
    }

    bb141: {
        _168 = discriminant(_166);
        switchInt(move _168) -> [0: bb143, 1: bb142, otherwise: bb4];
    }

    bb142: {
        _170 = move ((_166 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _170);
        goto -> bb260;
    }

    bb143: {
        _169 = move ((_166 as Ok).0: std::option::Option<std::string::String>);
        _165 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _169);
        drop(_18) -> [return: bb144, unwind: bb145];
    }

    bb144: {
        _300 = const true;
        _18 = move _165;
        goto -> bb1;
    }

    bb145 (cleanup): {
        _300 = const true;
        _18 = move _165;
        goto -> bb275;
    }

    bb146: {
        _174 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<bool>, <__A as MapAccess<'_>>::Error>(const "classic") -> [return: bb148, unwind: bb275];
    }

    bb147: {
        _173 = ((_3 as Some).0: std::option::Option<bool>);
        _171 = _173;
        goto -> bb151;
    }

    bb148: {
        _175 = discriminant(_174);
        switchInt(move _175) -> [0: bb150, 1: bb149, otherwise: bb4];
    }

    bb149: {
        _177 = move ((_174 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _177);
        goto -> bb260;
    }

    bb150: {
        _176 = ((_174 as Ok).0: std::option::Option<bool>);
        _171 = _176;
        goto -> bb151;
    }

    bb151: {
        _179 = discriminant(_4);
        switchInt(move _179) -> [0: bb152, 1: bb153, otherwise: bb4];
    }

    bb152: {
        _181 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<Vec<std::string::String>>, <__A as MapAccess<'_>>::Error>(const "blocks") -> [return: bb154, unwind: bb275];
    }

    bb153: {
        _304 = const false;
        _180 = move ((_4 as Some).0: std::option::Option<std::vec::Vec<std::string::String>>);
        _178 = move _180;
        goto -> bb157;
    }

    bb154: {
        _182 = discriminant(_181);
        switchInt(move _182) -> [0: bb156, 1: bb155, otherwise: bb4];
    }

    bb155: {
        _184 = move ((_181 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _184);
        goto -> bb260;
    }

    bb156: {
        _183 = move ((_181 as Ok).0: std::option::Option<std::vec::Vec<std::string::String>>);
        _178 = move _183;
        goto -> bb157;
    }

    bb157: {
        _186 = discriminant(_5);
        switchInt(move _186) -> [0: bb158, 1: bb159, otherwise: bb4];
    }

    bb158: {
        _188 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<config_file::Color>, <__A as MapAccess<'_>>::Error>(const "color") -> [return: bb160, unwind: bb250];
    }

    bb159: {
        _187 = move ((_5 as Some).0: std::option::Option<config_file::Color>);
        _185 = move _187;
        goto -> bb163;
    }

    bb160: {
        _189 = discriminant(_188);
        switchInt(move _189) -> [0: bb162, 1: bb161, otherwise: bb4];
    }

    bb161: {
        _191 = move ((_188 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _191);
        goto -> bb245;
    }

    bb162: {
        _190 = move ((_188 as Ok).0: std::option::Option<config_file::Color>);
        _185 = move _190;
        goto -> bb163;
    }

    bb163: {
        _193 = discriminant(_6);
        switchInt(move _193) -> [0: bb164, 1: bb165, otherwise: bb4];
    }

    bb164: {
        _195 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "date") -> [return: bb166, unwind: bb250];
    }

    bb165: {
        _303 = const false;
        _194 = move ((_6 as Some).0: std::option::Option<std::string::String>);
        _192 = move _194;
        goto -> bb169;
    }

    bb166: {
        _196 = discriminant(_195);
        switchInt(move _196) -> [0: bb168, 1: bb167, otherwise: bb4];
    }

    bb167: {
        _198 = move ((_195 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _198);
        goto -> bb245;
    }

    bb168: {
        _197 = move ((_195 as Ok).0: std::option::Option<std::string::String>);
        _192 = move _197;
        goto -> bb169;
    }

    bb169: {
        _200 = discriminant(_7);
        switchInt(move _200) -> [0: bb170, 1: bb171, otherwise: bb4];
    }

    bb170: {
        _202 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<bool>, <__A as MapAccess<'_>>::Error>(const "dereference") -> [return: bb172, unwind: bb249];
    }

    bb171: {
        _201 = ((_7 as Some).0: std::option::Option<bool>);
        _199 = _201;
        goto -> bb175;
    }

    bb172: {
        _203 = discriminant(_202);
        switchInt(move _203) -> [0: bb174, 1: bb173, otherwise: bb4];
    }

    bb173: {
        _205 = move ((_202 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _205);
        goto -> bb244;
    }

    bb174: {
        _204 = ((_202 as Ok).0: std::option::Option<bool>);
        _199 = _204;
        goto -> bb175;
    }

    bb175: {
        _207 = discriminant(_8);
        switchInt(move _207) -> [0: bb176, 1: bb177, otherwise: bb4];
    }

    bb176: {
        _209 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<flags::display::Display>, <__A as MapAccess<'_>>::Error>(const "display") -> [return: bb178, unwind: bb249];
    }

    bb177: {
        _208 = ((_8 as Some).0: std::option::Option<flags::display::Display>);
        _206 = _208;
        goto -> bb181;
    }

    bb178: {
        _210 = discriminant(_209);
        switchInt(move _210) -> [0: bb180, 1: bb179, otherwise: bb4];
    }

    bb179: {
        _212 = move ((_209 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _212);
        goto -> bb244;
    }

    bb180: {
        _211 = ((_209 as Ok).0: std::option::Option<flags::display::Display>);
        _206 = _211;
        goto -> bb181;
    }

    bb181: {
        _214 = discriminant(_9);
        switchInt(move _214) -> [0: bb182, 1: bb183, otherwise: bb4];
    }

    bb182: {
        _216 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<config_file::Icons>, <__A as MapAccess<'_>>::Error>(const "icons") -> [return: bb184, unwind: bb249];
    }

    bb183: {
        _302 = const false;
        _215 = move ((_9 as Some).0: std::option::Option<config_file::Icons>);
        _213 = move _215;
        goto -> bb187;
    }

    bb184: {
        _217 = discriminant(_216);
        switchInt(move _217) -> [0: bb186, 1: bb185, otherwise: bb4];
    }

    bb185: {
        _219 = move ((_216 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _219);
        goto -> bb244;
    }

    bb186: {
        _218 = move ((_216 as Ok).0: std::option::Option<config_file::Icons>);
        _213 = move _218;
        goto -> bb187;
    }

    bb187: {
        _221 = discriminant(_10);
        switchInt(move _221) -> [0: bb188, 1: bb189, otherwise: bb4];
    }

    bb188: {
        _223 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<Vec<std::string::String>>, <__A as MapAccess<'_>>::Error>(const "ignore-globs") -> [return: bb190, unwind: bb248];
    }

    bb189: {
        _301 = const false;
        _222 = move ((_10 as Some).0: std::option::Option<std::vec::Vec<std::string::String>>);
        _220 = move _222;
        goto -> bb193;
    }

    bb190: {
        _224 = discriminant(_223);
        switchInt(move _224) -> [0: bb192, 1: bb191, otherwise: bb4];
    }

    bb191: {
        _226 = move ((_223 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _226);
        goto -> bb243;
    }

    bb192: {
        _225 = move ((_223 as Ok).0: std::option::Option<std::vec::Vec<std::string::String>>);
        _220 = move _225;
        goto -> bb193;
    }

    bb193: {
        _228 = discriminant(_11);
        switchInt(move _228) -> [0: bb194, 1: bb195, otherwise: bb4];
    }

    bb194: {
        _230 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<bool>, <__A as MapAccess<'_>>::Error>(const "indicators") -> [return: bb196, unwind: bb247];
    }

    bb195: {
        _229 = ((_11 as Some).0: std::option::Option<bool>);
        _227 = _229;
        goto -> bb199;
    }

    bb196: {
        _231 = discriminant(_230);
        switchInt(move _231) -> [0: bb198, 1: bb197, otherwise: bb4];
    }

    bb197: {
        _233 = move ((_230 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _233);
        goto -> bb242;
    }

    bb198: {
        _232 = ((_230 as Ok).0: std::option::Option<bool>);
        _227 = _232;
        goto -> bb199;
    }

    bb199: {
        _235 = discriminant(_12);
        switchInt(move _235) -> [0: bb200, 1: bb201, otherwise: bb4];
    }

    bb200: {
        _237 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<layout::Layout>, <__A as MapAccess<'_>>::Error>(const "layout") -> [return: bb202, unwind: bb247];
    }

    bb201: {
        _236 = ((_12 as Some).0: std::option::Option<flags::layout::Layout>);
        _234 = _236;
        goto -> bb205;
    }

    bb202: {
        _238 = discriminant(_237);
        switchInt(move _238) -> [0: bb204, 1: bb203, otherwise: bb4];
    }

    bb203: {
        _240 = move ((_237 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _240);
        goto -> bb242;
    }

    bb204: {
        _239 = ((_237 as Ok).0: std::option::Option<flags::layout::Layout>);
        _234 = _239;
        goto -> bb205;
    }

    bb205: {
        _242 = discriminant(_13);
        switchInt(move _242) -> [0: bb206, 1: bb207, otherwise: bb4];
    }

    bb206: {
        _244 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<config_file::Recursion>, <__A as MapAccess<'_>>::Error>(const "recursion") -> [return: bb208, unwind: bb247];
    }

    bb207: {
        _243 = move ((_13 as Some).0: std::option::Option<config_file::Recursion>);
        _241 = move _243;
        goto -> bb211;
    }

    bb208: {
        _245 = discriminant(_244);
        switchInt(move _245) -> [0: bb210, 1: bb209, otherwise: bb4];
    }

    bb209: {
        _247 = move ((_244 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _247);
        goto -> bb242;
    }

    bb210: {
        _246 = move ((_244 as Ok).0: std::option::Option<config_file::Recursion>);
        _241 = move _246;
        goto -> bb211;
    }

    bb211: {
        _249 = discriminant(_14);
        switchInt(move _249) -> [0: bb212, 1: bb213, otherwise: bb4];
    }

    bb212: {
        _251 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<SizeFlag>, <__A as MapAccess<'_>>::Error>(const "size") -> [return: bb214, unwind: bb247];
    }

    bb213: {
        _250 = ((_14 as Some).0: std::option::Option<flags::size::SizeFlag>);
        _248 = _250;
        goto -> bb217;
    }

    bb214: {
        _252 = discriminant(_251);
        switchInt(move _252) -> [0: bb216, 1: bb215, otherwise: bb4];
    }

    bb215: {
        _254 = move ((_251 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _254);
        goto -> bb242;
    }

    bb216: {
        _253 = ((_251 as Ok).0: std::option::Option<flags::size::SizeFlag>);
        _248 = _253;
        goto -> bb217;
    }

    bb217: {
        _256 = discriminant(_15);
        switchInt(move _256) -> [0: bb218, 1: bb219, otherwise: bb4];
    }

    bb218: {
        _258 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<config_file::Sorting>, <__A as MapAccess<'_>>::Error>(const "sorting") -> [return: bb220, unwind: bb247];
    }

    bb219: {
        _257 = move ((_15 as Some).0: std::option::Option<config_file::Sorting>);
        _255 = move _257;
        goto -> bb223;
    }

    bb220: {
        _259 = discriminant(_258);
        switchInt(move _259) -> [0: bb222, 1: bb221, otherwise: bb4];
    }

    bb221: {
        _261 = move ((_258 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _261);
        goto -> bb242;
    }

    bb222: {
        _260 = move ((_258 as Ok).0: std::option::Option<config_file::Sorting>);
        _255 = move _260;
        goto -> bb223;
    }

    bb223: {
        _263 = discriminant(_16);
        switchInt(move _263) -> [0: bb224, 1: bb225, otherwise: bb4];
    }

    bb224: {
        _265 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<bool>, <__A as MapAccess<'_>>::Error>(const "no-symlink") -> [return: bb226, unwind: bb247];
    }

    bb225: {
        _264 = ((_16 as Some).0: std::option::Option<bool>);
        _262 = _264;
        goto -> bb229;
    }

    bb226: {
        _266 = discriminant(_265);
        switchInt(move _266) -> [0: bb228, 1: bb227, otherwise: bb4];
    }

    bb227: {
        _268 = move ((_265 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _268);
        goto -> bb242;
    }

    bb228: {
        _267 = ((_265 as Ok).0: std::option::Option<bool>);
        _262 = _267;
        goto -> bb229;
    }

    bb229: {
        _270 = discriminant(_17);
        switchInt(move _270) -> [0: bb230, 1: bb231, otherwise: bb4];
    }

    bb230: {
        _272 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<bool>, <__A as MapAccess<'_>>::Error>(const "total-size") -> [return: bb232, unwind: bb247];
    }

    bb231: {
        _271 = ((_17 as Some).0: std::option::Option<bool>);
        _269 = _271;
        goto -> bb235;
    }

    bb232: {
        _273 = discriminant(_272);
        switchInt(move _273) -> [0: bb234, 1: bb233, otherwise: bb4];
    }

    bb233: {
        _275 = move ((_272 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _275);
        goto -> bb242;
    }

    bb234: {
        _274 = ((_272 as Ok).0: std::option::Option<bool>);
        _269 = _274;
        goto -> bb235;
    }

    bb235: {
        _277 = discriminant(_18);
        switchInt(move _277) -> [0: bb236, 1: bb237, otherwise: bb4];
    }

    bb236: {
        _279 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "symlink-arrow") -> [return: bb238, unwind: bb247];
    }

    bb237: {
        _300 = const false;
        _278 = move ((_18 as Some).0: std::option::Option<std::string::String>);
        _276 = move _278;
        goto -> bb241;
    }

    bb238: {
        _280 = discriminant(_279);
        switchInt(move _280) -> [0: bb240, 1: bb239, otherwise: bb4];
    }

    bb239: {
        _282 = move ((_279 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _282);
        goto -> bb242;
    }

    bb240: {
        _281 = move ((_279 as Ok).0: std::option::Option<std::string::String>);
        _276 = move _281;
        goto -> bb241;
    }

    bb241: {
        _284 = _171;
        _285 = move _178;
        _286 = move _185;
        _287 = move _192;
        _288 = _199;
        _289 = _206;
        _290 = move _213;
        _291 = move _220;
        _292 = _227;
        _293 = _234;
        _294 = move _241;
        _295 = _248;
        _296 = move _255;
        _297 = _262;
        _298 = _269;
        _299 = move _276;
        _283 = Config { classic: move _284, blocks: move _285, color: move _286, date: move _287, dereference: move _288, display: move _289, icons: move _290, ignore_globs: move _291, indicators: move _292, layout: move _293, recursion: move _294, size: move _295, sorting: move _296, no_symlink: move _297, total_size: move _298, symlink_arrow: move _299 };
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Ok(move _283);
        _300 = const false;
        _301 = const false;
        _302 = const false;
        _303 = const false;
        _304 = const false;
        drop(_2) -> [return: bb246, unwind continue];
    }

    bb242: {
        drop(_220) -> [return: bb243, unwind: bb248];
    }

    bb243: {
        drop(_213) -> [return: bb244, unwind: bb249];
    }

    bb244: {
        drop(_192) -> [return: bb245, unwind: bb250];
    }

    bb245: {
        drop(_178) -> [return: bb260, unwind: bb275];
    }

    bb246: {
        return;
    }

    bb247 (cleanup): {
        drop(_220) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb248 (cleanup): {
        drop(_213) -> [return: bb249, unwind terminate(cleanup)];
    }

    bb249 (cleanup): {
        drop(_192) -> [return: bb250, unwind terminate(cleanup)];
    }

    bb250 (cleanup): {
        drop(_178) -> [return: bb275, unwind terminate(cleanup)];
    }

    bb251 (cleanup): {
        _311 = discriminant(_10);
        switchInt(move _311) -> [1: bb276, otherwise: bb252];
    }

    bb252 (cleanup): {
        _312 = discriminant(_9);
        switchInt(move _312) -> [1: bb278, otherwise: bb253];
    }

    bb253 (cleanup): {
        _313 = discriminant(_6);
        switchInt(move _313) -> [1: bb280, otherwise: bb254];
    }

    bb254 (cleanup): {
        _314 = discriminant(_4);
        switchInt(move _314) -> [1: bb282, otherwise: bb255];
    }

    bb255 (cleanup): {
        drop(_2) -> [return: bb256, unwind terminate(cleanup)];
    }

    bb256 (cleanup): {
        resume;
    }

    bb257: {
        _300 = const false;
        _306 = discriminant(_10);
        switchInt(move _306) -> [1: bb262, otherwise: bb261];
    }

    bb258: {
        switchInt(_300) -> [0: bb257, otherwise: bb259];
    }

    bb259: {
        drop(((_18 as Some).0: std::option::Option<std::string::String>)) -> [return: bb257, unwind: bb251];
    }

    bb260: {
        _305 = discriminant(_18);
        switchInt(move _305) -> [1: bb258, otherwise: bb257];
    }

    bb261: {
        _301 = const false;
        _307 = discriminant(_9);
        switchInt(move _307) -> [1: bb265, otherwise: bb264];
    }

    bb262: {
        switchInt(_301) -> [0: bb261, otherwise: bb263];
    }

    bb263: {
        drop(((_10 as Some).0: std::option::Option<std::vec::Vec<std::string::String>>)) -> [return: bb261, unwind: bb252];
    }

    bb264: {
        _302 = const false;
        _308 = discriminant(_6);
        switchInt(move _308) -> [1: bb268, otherwise: bb267];
    }

    bb265: {
        switchInt(_302) -> [0: bb264, otherwise: bb266];
    }

    bb266: {
        drop(((_9 as Some).0: std::option::Option<config_file::Icons>)) -> [return: bb264, unwind: bb253];
    }

    bb267: {
        _303 = const false;
        _309 = discriminant(_4);
        switchInt(move _309) -> [1: bb271, otherwise: bb270];
    }

    bb268: {
        switchInt(_303) -> [0: bb267, otherwise: bb269];
    }

    bb269: {
        drop(((_6 as Some).0: std::option::Option<std::string::String>)) -> [return: bb267, unwind: bb254];
    }

    bb270: {
        _304 = const false;
        drop(_2) -> [return: bb246, unwind continue];
    }

    bb271: {
        switchInt(_304) -> [0: bb270, otherwise: bb272];
    }

    bb272: {
        drop(((_4 as Some).0: std::option::Option<std::vec::Vec<std::string::String>>)) -> [return: bb270, unwind: bb255];
    }

    bb273 (cleanup): {
        switchInt(_300) -> [0: bb251, otherwise: bb274];
    }

    bb274 (cleanup): {
        drop(((_18 as Some).0: std::option::Option<std::string::String>)) -> [return: bb251, unwind terminate(cleanup)];
    }

    bb275 (cleanup): {
        _310 = discriminant(_18);
        switchInt(move _310) -> [1: bb273, otherwise: bb251];
    }

    bb276 (cleanup): {
        switchInt(_301) -> [0: bb252, otherwise: bb277];
    }

    bb277 (cleanup): {
        drop(((_10 as Some).0: std::option::Option<std::vec::Vec<std::string::String>>)) -> [return: bb252, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        switchInt(_302) -> [0: bb253, otherwise: bb279];
    }

    bb279 (cleanup): {
        drop(((_9 as Some).0: std::option::Option<config_file::Icons>)) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb280 (cleanup): {
        switchInt(_303) -> [0: bb254, otherwise: bb281];
    }

    bb281 (cleanup): {
        drop(((_6 as Some).0: std::option::Option<std::string::String>)) -> [return: bb254, unwind terminate(cleanup)];
    }

    bb282 (cleanup): {
        switchInt(_304) -> [0: bb255, otherwise: bb283];
    }

    bb283 (cleanup): {
        drop(((_4 as Some).0: std::option::Option<std::vec::Vec<std::string::String>>)) -> [return: bb255, unwind terminate(cleanup)];
    }
}

const config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 16];
    let _2: &[&str; 16];
    let _3: [&str; 16];
    let mut _4: &[&str; 16];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:23:32: 23:43>::deserialize::FIELDS: &[&str; 16] = {
    let mut _0: &[&str; 16];
    let mut _1: [&str; 16];

    bb0: {
        _1 = [const "classic", const "blocks", const "color", const "date", const "dereference", const "display", const "icons", const "ignore-globs", const "indicators", const "layout", const "recursion", const "size", const "sorting", const "no-symlink", const "total-size", const "symlink-arrow"];
        _0 = &_1;
        return;
    }
}

fn config_file::<impl at src/config_file.rs:45:10: 45:12>::assert_receiver_is_total_eq(_1: &config_file::Color) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn config_file::<impl at src/config_file.rs:45:14: 45:23>::eq(_1: &config_file::Color, _2: &config_file::Color) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &flags::color::ColorOption;
    let mut _4: &flags::color::ColorOption;

    bb0: {
        _3 = &((*_1).0: flags::color::ColorOption);
        _4 = &((*_2).0: flags::color::ColorOption);
        _0 = <ColorOption as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::<impl at src/config_file.rs:45:25: 45:30>::fmt(_1: &config_file::Color, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&flags::color::ColorOption;
    let _7: &flags::color::ColorOption;

    bb0: {
        _3 = const "Color";
        _4 = const "when";
        _7 = &((*_1).0: flags::color::ColorOption);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const config_file::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize(_1: __D) -> Result<config_file::Color, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<config_file::Color, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'_>>(move _1, const "Color", const _, const config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Color>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::<impl at src/config_file.rs:45:32: 45:43>::expecting(_1: &config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::<impl at src/config_file.rs:45:32: 45:43>::visit_u64(_1: config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor, _2: u64) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field, __E>;
    let mut _3: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field;
    let mut _4: __E;
    let mut _5: config_file::_::_serde::de::Unexpected<'_>;
    let mut _6: &dyn config_file::_::_serde::de::Expected;
    let mut _7: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Unexpected::<'_>::Unsigned(_2);
        _7 = const _;
        _6 = _7 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _4 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb2: {
        _3 = config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field, __E>::Err(move _4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::<impl at src/config_file.rs:45:32: 45:43>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 1";
        _0 = &_1;
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::<impl at src/config_file.rs:45:32: 45:43>::visit_str(_1: config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor, _2: &str) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field;
    let mut _5: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "when") -> [return: bb3, unwind continue];
    }

    bb1: {
        _4 = config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb4;
    }

    bb2: {
        _5 = config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field::__ignore;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb4;
    }

    bb3: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::<impl at src/config_file.rs:45:32: 45:43>::visit_bytes(_1: config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field;
    let mut _7: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 4_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 4]) -> [119: bb2, otherwise: bb5];
    }

    bb2: {
        switchInt((*_2)[1 of 4]) -> [104: bb3, otherwise: bb5];
    }

    bb3: {
        switchInt((*_2)[2 of 4]) -> [101: bb4, otherwise: bb5];
    }

    bb4: {
        switchInt((*_2)[3 of 4]) -> [110: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field::__ignore;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb7;
    }

    bb6: {
        _6 = config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::<impl at src/config_file.rs:45:32: 45:43>::deserialize(_1: __D) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor>(move _1, const config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::<impl at src/config_file.rs:45:32: 45:43>::expecting(_1: &config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Color";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::<impl at src/config_file.rs:45:32: 45:43>::visit_seq(_1: config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'_>, _2: __A) -> Result<config_file::Color, <__A as SeqAccess<'_>>::Error> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Color>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<config_file::Color, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<flags::color::ColorOption>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<flags::color::ColorOption>;
    let _7: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: flags::color::ColorOption;
    let mut _10: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn config_file::_::_serde::de::Expected;
    let mut _12: config_file::Color;
    let mut _13: &&str;
    scope 1 {
        debug __field0 => _9;
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<ColorOption>(_4) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<config_file::Color, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb8;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<flags::color::ColorOption>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _13 = const _;
        _11 = _13 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb10];
    }

    bb6: {
        _9 = ((_6 as Some).0: flags::color::ColorOption);
        _12 = config_file::Color { when: _9 };
        _0 = Result::<config_file::Color, <__A as SeqAccess<'_>>::Error>::Ok(move _12);
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb7: {
        _0 = Result::<config_file::Color, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb8;
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::<impl at src/config_file.rs:45:32: 45:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Color with 1 element";
        _0 = &_1;
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::<impl at src/config_file.rs:45:32: 45:43>::visit_map(_1: config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Visitor<'_>, _2: __A) -> Result<config_file::Color, <__A as MapAccess<'_>>::Error> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Color>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<config_file::Color, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<flags::color::ColorOption>;
    let mut _4: std::result::Result<std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: isize;
    let mut _12: bool;
    let _13: &std::option::Option<flags::color::ColorOption>;
    let mut _14: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _15: std::option::Option<flags::color::ColorOption>;
    let mut _16: std::result::Result<flags::color::ColorOption, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _17: &mut __A;
    let mut _18: isize;
    let mut _21: std::result::Result<config_file::_::_serde::de::IgnoredAny, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: std::result::Result<flags::color::ColorOption, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _29: isize;
    let mut _32: config_file::Color;
    let mut _33: flags::color::ColorOption;
    scope 1 {
        debug __field0 => _3;
        let _25: flags::color::ColorOption;
        let _27: flags::color::ColorOption;
        let _30: flags::color::ColorOption;
        let _31: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
        scope 2 {
            debug __key => _10;
            let _7: std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field>;
            let _8: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
            let _10: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field;
            let _19: flags::color::ColorOption;
            let _20: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
            let _24: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __val => _7;
            }
            scope 4 {
                debug __err => _8;
            }
            scope 5 {
                debug __val => _19;
            }
            scope 6 {
                debug __err => _20;
            }
            scope 7 {
            }
            scope 8 {
                debug __val => const IgnoredAny;
            }
            scope 9 {
                debug __err => _24;
            }
        }
        scope 10 {
            debug __field0 => _25;
        }
        scope 11 {
            debug __field0 => _27;
        }
        scope 12 {
            debug __val => _30;
        }
        scope 13 {
            debug __err => _31;
        }
    }

    bb0: {
        _3 = std::option::Option::<ColorOption>::None;
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as MapAccess<'_>>::next_key::<config_file::_::<impl Deserialize<'de> for config_file::Color>::deserialize::__Field>(_5) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Color, <__A as MapAccess<'_>>::Error>::Err(move _8);
        goto -> bb25;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Ok).0: std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = discriminant(_3);
        switchInt(move _26) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb7: {
        _10 = move ((_7 as Some).0: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Color>::deserialize::__Field);
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_22) -> [return: bb17, unwind: bb27];
    }

    bb9: {
        _13 = &_3;
        _12 = std::option::Option::<ColorOption>::is_some(_13) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _14 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "when") -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _0 = Result::<config_file::Color, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb25;
    }

    bb13: {
        _17 = &mut _2;
        _16 = <__A as MapAccess<'_>>::next_value::<ColorOption>(_17) -> [return: bb14, unwind: bb27];
    }

    bb14: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _20 = move ((_16 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Color, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb25;
    }

    bb16: {
        _19 = ((_16 as Ok).0: flags::color::ColorOption);
        _15 = std::option::Option::<ColorOption>::Some(_19);
        _3 = move _15;
        goto -> bb1;
    }

    bb17: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb1, 1: bb18, otherwise: bb4];
    }

    bb18: {
        _24 = move ((_21 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Color, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb25;
    }

    bb19: {
        _28 = config_file::_::_serde::private::de::missing_field::<'_, ColorOption, <__A as MapAccess<'_>>::Error>(const "when") -> [return: bb21, unwind: bb27];
    }

    bb20: {
        _27 = ((_3 as Some).0: flags::color::ColorOption);
        _25 = _27;
        goto -> bb24;
    }

    bb21: {
        _29 = discriminant(_28);
        switchInt(move _29) -> [0: bb23, 1: bb22, otherwise: bb4];
    }

    bb22: {
        _31 = move ((_28 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Color, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb25;
    }

    bb23: {
        _30 = ((_28 as Ok).0: flags::color::ColorOption);
        _25 = _30;
        goto -> bb24;
    }

    bb24: {
        _33 = _25;
        _32 = config_file::Color { when: move _33 };
        _0 = Result::<config_file::Color, <__A as MapAccess<'_>>::Error>::Ok(move _32);
        drop(_2) -> [return: bb26, unwind continue];
    }

    bb25: {
        drop(_2) -> [return: bb26, unwind continue];
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_2) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        resume;
    }
}

const config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 1];
    let _2: &[&str; 1];
    let _3: [&str; 1];
    let mut _4: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:45:32: 45:43>::deserialize::FIELDS: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "when"];
        _0 = &_1;
        return;
    }
}

fn config_file::<impl at src/config_file.rs:50:10: 50:12>::assert_receiver_is_total_eq(_1: &config_file::Icons) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;
    }
}

fn config_file::<impl at src/config_file.rs:50:14: 50:23>::eq(_1: &config_file::Icons, _2: &config_file::Icons) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &std::option::Option<flags::icons::IconOption>;
    let mut _5: &std::option::Option<flags::icons::IconOption>;
    let mut _6: bool;
    let mut _7: &std::option::Option<flags::icons::IconTheme>;
    let mut _8: &std::option::Option<flags::icons::IconTheme>;
    let mut _9: &std::option::Option<std::string::String>;
    let mut _10: &std::option::Option<std::string::String>;

    bb0: {
        _4 = &((*_1).0: std::option::Option<flags::icons::IconOption>);
        _5 = &((*_2).0: std::option::Option<flags::icons::IconOption>);
        _3 = <std::option::Option<IconOption> as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        _7 = &((*_1).1: std::option::Option<flags::icons::IconTheme>);
        _8 = &((*_2).1: std::option::Option<flags::icons::IconTheme>);
        _6 = <std::option::Option<IconTheme> as PartialEq>::eq(move _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _9 = &((*_1).2: std::option::Option<std::string::String>);
        _10 = &((*_2).2: std::option::Option<std::string::String>);
        _0 = <std::option::Option<std::string::String> as PartialEq>::eq(move _9, move _10) -> [return: bb6, unwind continue];
    }

    bb5: {
        _0 = const false;
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn config_file::<impl at src/config_file.rs:50:25: 50:30>::fmt(_1: &config_file::Icons, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::option::Option<flags::icons::IconOption>;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::option::Option<flags::icons::IconTheme>;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&std::option::Option<std::string::String>;
    let _13: &std::option::Option<std::string::String>;

    bb0: {
        _3 = const "Icons";
        _4 = const "when";
        _6 = &((*_1).0: std::option::Option<flags::icons::IconOption>);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "theme";
        _9 = &((*_1).1: std::option::Option<flags::icons::IconTheme>);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "separator";
        _13 = &((*_1).2: std::option::Option<std::string::String>);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const config_file::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize(_1: __D) -> Result<config_file::Icons, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<config_file::Icons, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'_>>(move _1, const "Icons", const _, const config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Icons>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::expecting(_1: &config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::visit_u64(_1: config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor, _2: u64) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>;
    let mut _3: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;
    let mut _4: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;
    let mut _5: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: config_file::_::_serde::de::Unexpected<'_>;
    let mut _8: &dyn config_file::_::_serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field::__field2;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::visit_str(_1: config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor, _2: &str) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;
    let mut _7: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;
    let mut _8: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;
    let mut _9: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "when") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "theme") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "separator") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field::__field2;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb10;
    }

    bb6: {
        _9 = config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field::__ignore;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb10;
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::visit_bytes(_1: config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;
    let mut _13: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;
    let mut _14: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;
    let mut _15: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;

    bb0: {
        _9 = Len((*_2));
        _10 = const 4_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb6, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 4]) -> [119: bb2, otherwise: bb5];
    }

    bb2: {
        switchInt((*_2)[1 of 4]) -> [104: bb3, otherwise: bb5];
    }

    bb3: {
        switchInt((*_2)[2 of 4]) -> [101: bb4, otherwise: bb5];
    }

    bb4: {
        switchInt((*_2)[3 of 4]) -> [110: bb22, otherwise: bb5];
    }

    bb5: {
        _15 = config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field::__ignore;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb25;
    }

    bb6: {
        _6 = Len((*_2));
        _7 = const 5_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb12, otherwise: bb7];
    }

    bb7: {
        switchInt((*_2)[0 of 5]) -> [116: bb8, otherwise: bb5];
    }

    bb8: {
        switchInt((*_2)[1 of 5]) -> [104: bb9, otherwise: bb5];
    }

    bb9: {
        switchInt((*_2)[2 of 5]) -> [101: bb10, otherwise: bb5];
    }

    bb10: {
        switchInt((*_2)[3 of 5]) -> [109: bb11, otherwise: bb5];
    }

    bb11: {
        switchInt((*_2)[4 of 5]) -> [101: bb23, otherwise: bb5];
    }

    bb12: {
        _3 = Len((*_2));
        _4 = const 9_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb5, otherwise: bb13];
    }

    bb13: {
        switchInt((*_2)[0 of 9]) -> [115: bb14, otherwise: bb5];
    }

    bb14: {
        switchInt((*_2)[1 of 9]) -> [101: bb15, otherwise: bb5];
    }

    bb15: {
        switchInt((*_2)[2 of 9]) -> [112: bb16, otherwise: bb5];
    }

    bb16: {
        switchInt((*_2)[3 of 9]) -> [97: bb17, otherwise: bb5];
    }

    bb17: {
        switchInt((*_2)[4 of 9]) -> [114: bb18, otherwise: bb5];
    }

    bb18: {
        switchInt((*_2)[5 of 9]) -> [97: bb19, otherwise: bb5];
    }

    bb19: {
        switchInt((*_2)[6 of 9]) -> [116: bb20, otherwise: bb5];
    }

    bb20: {
        switchInt((*_2)[7 of 9]) -> [111: bb21, otherwise: bb5];
    }

    bb21: {
        switchInt((*_2)[8 of 9]) -> [114: bb24, otherwise: bb5];
    }

    bb22: {
        _12 = config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb25;
    }

    bb23: {
        _13 = config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb25;
    }

    bb24: {
        _14 = config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field::__field2;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb25;
    }

    bb25: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::deserialize(_1: __D) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor>(move _1, const config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::expecting(_1: &config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Icons";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::visit_seq(_1: config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'_>, _2: __A) -> Result<config_file::Icons, <__A as SeqAccess<'_>>::Error> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Icons>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<config_file::Icons, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<std::option::Option<flags::icons::IconOption>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<std::option::Option<flags::icons::IconOption>>;
    let _7: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: std::option::Option<flags::icons::IconOption>;
    let mut _10: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn config_file::_::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<std::option::Option<flags::icons::IconTheme>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn config_file::_::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn config_file::_::_serde::de::Expected;
    let mut _30: config_file::Icons;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<std::option::Option<flags::icons::IconTheme>>;
        let _16: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
        let _18: std::option::Option<flags::icons::IconTheme>;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<std::option::Option<std::string::String>>;
            let _25: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
            let _27: std::option::Option<std::string::String>;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<IconOption>>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<config_file::Icons, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<std::option::Option<flags::icons::IconOption>>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: std::option::Option<flags::icons::IconOption>);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<IconTheme>>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = Result::<config_file::Icons, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<config_file::Icons, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<flags::icons::IconTheme>>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: std::option::Option<flags::icons::IconTheme>);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = Result::<config_file::Icons, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<config_file::Icons, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = move ((_21 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = move ((_24 as Some).0: std::option::Option<std::string::String>);
        _30 = config_file::Icons { when: _9, theme: _18, separator: move _27 };
        _0 = Result::<config_file::Icons, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = Result::<config_file::Icons, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Icons with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Icons with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Icons with 3 elements";
        _0 = &_1;
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::<impl at src/config_file.rs:50:32: 50:43>::visit_map(_1: config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Visitor<'_>, _2: __A) -> Result<config_file::Icons, <__A as MapAccess<'_>>::Error> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Icons>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<config_file::Icons, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<flags::icons::IconOption>>;
    let mut _6: std::result::Result<std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _7: &mut __A;
    let mut _8: isize;
    let mut _11: isize;
    let mut _13: isize;
    let mut _14: bool;
    let _15: &std::option::Option<std::option::Option<flags::icons::IconOption>>;
    let mut _16: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _17: std::option::Option<std::option::Option<flags::icons::IconOption>>;
    let mut _18: std::result::Result<std::option::Option<flags::icons::IconOption>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _19: &mut __A;
    let mut _20: isize;
    let mut _23: bool;
    let _24: &std::option::Option<std::option::Option<flags::icons::IconTheme>>;
    let mut _25: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _26: std::option::Option<std::option::Option<flags::icons::IconTheme>>;
    let mut _27: std::result::Result<std::option::Option<flags::icons::IconTheme>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _28: &mut __A;
    let mut _29: isize;
    let mut _32: bool;
    let _33: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _34: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _35: std::option::Option<std::option::Option<std::string::String>>;
    let mut _36: std::result::Result<std::option::Option<std::string::String>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _37: &mut __A;
    let mut _38: isize;
    let mut _41: std::result::Result<config_file::_::_serde::de::IgnoredAny, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: std::result::Result<std::option::Option<flags::icons::IconOption>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _49: isize;
    let mut _53: isize;
    let mut _55: std::result::Result<std::option::Option<flags::icons::IconTheme>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _56: isize;
    let mut _60: isize;
    let mut _62: std::result::Result<std::option::Option<std::string::String>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _63: isize;
    let mut _66: config_file::Icons;
    let mut _67: std::option::Option<flags::icons::IconOption>;
    let mut _68: std::option::Option<flags::icons::IconTheme>;
    let mut _69: std::option::Option<std::string::String>;
    let mut _70: bool;
    let mut _71: isize;
    let mut _72: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<flags::icons::IconTheme>>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::option::Option<std::string::String>>;
            scope 3 {
                debug __field2 => _5;
                let _45: std::option::Option<flags::icons::IconOption>;
                let _47: std::option::Option<flags::icons::IconOption>;
                let _50: std::option::Option<flags::icons::IconOption>;
                let _51: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                scope 4 {
                    debug __key => _12;
                    let _9: std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field>;
                    let _10: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    let _12: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field;
                    let _21: std::option::Option<flags::icons::IconOption>;
                    let _22: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    let _30: std::option::Option<flags::icons::IconTheme>;
                    let _31: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    let _39: std::option::Option<std::string::String>;
                    let _40: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    let _44: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    scope 5 {
                        debug __val => _9;
                    }
                    scope 6 {
                        debug __err => _10;
                    }
                    scope 7 {
                        debug __val => _21;
                    }
                    scope 8 {
                        debug __err => _22;
                    }
                    scope 9 {
                        debug __val => _30;
                    }
                    scope 10 {
                        debug __err => _31;
                    }
                    scope 11 {
                        debug __val => _39;
                    }
                    scope 12 {
                        debug __err => _40;
                    }
                    scope 13 {
                    }
                    scope 14 {
                        debug __val => const IgnoredAny;
                    }
                    scope 15 {
                        debug __err => _44;
                    }
                }
                scope 16 {
                    debug __field0 => _45;
                    let _52: std::option::Option<flags::icons::IconTheme>;
                    let _54: std::option::Option<flags::icons::IconTheme>;
                    let _57: std::option::Option<flags::icons::IconTheme>;
                    let _58: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    scope 20 {
                        debug __field1 => _52;
                        let _59: std::option::Option<std::string::String>;
                        let _61: std::option::Option<std::string::String>;
                        let _64: std::option::Option<std::string::String>;
                        let _65: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                        scope 24 {
                            debug __field2 => _59;
                        }
                        scope 25 {
                            debug __field2 => _61;
                        }
                        scope 26 {
                            debug __val => _64;
                        }
                        scope 27 {
                            debug __err => _65;
                        }
                    }
                    scope 21 {
                        debug __field1 => _54;
                    }
                    scope 22 {
                        debug __val => _57;
                    }
                    scope 23 {
                        debug __err => _58;
                    }
                }
                scope 17 {
                    debug __field0 => _47;
                }
                scope 18 {
                    debug __val => _50;
                }
                scope 19 {
                    debug __err => _51;
                }
            }
        }
    }

    bb0: {
        _70 = const false;
        _3 = std::option::Option::<std::option::Option<IconOption>>::None;
        _4 = std::option::Option::<std::option::Option<IconTheme>>::None;
        _70 = const true;
        _5 = std::option::Option::<std::option::Option<std::string::String>>::None;
        goto -> bb1;
    }

    bb1: {
        _7 = &mut _2;
        _6 = <__A as MapAccess<'_>>::next_key::<config_file::_::<impl Deserialize<'de> for config_file::Icons>::deserialize::__Field>(_7) -> [return: bb2, unwind: bb64];
    }

    bb2: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _10 = move ((_6 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Err(move _10);
        goto -> bb61;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = move ((_6 as Ok).0: std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field>);
        _11 = discriminant(_9);
        switchInt(move _11) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _46 = discriminant(_3);
        switchInt(move _46) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb7: {
        _12 = move ((_9 as Some).0: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Icons>::deserialize::__Field);
        _13 = discriminant(_12);
        switchInt(move _13) -> [0: bb9, 1: bb17, 2: bb25, otherwise: bb8];
    }

    bb8: {
        _42 = &mut _2;
        _41 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_42) -> [return: bb35, unwind: bb64];
    }

    bb9: {
        _15 = &_3;
        _14 = std::option::Option::<std::option::Option<IconOption>>::is_some(_15) -> [return: bb10, unwind: bb64];
    }

    bb10: {
        switchInt(move _14) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _16 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "when") -> [return: bb12, unwind: bb64];
    }

    bb12: {
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Err(move _16);
        goto -> bb61;
    }

    bb13: {
        _19 = &mut _2;
        _18 = <__A as MapAccess<'_>>::next_value::<std::option::Option<IconOption>>(_19) -> [return: bb14, unwind: bb64];
    }

    bb14: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _22 = move ((_18 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb61;
    }

    bb16: {
        _21 = ((_18 as Ok).0: std::option::Option<flags::icons::IconOption>);
        _17 = std::option::Option::<std::option::Option<IconOption>>::Some(_21);
        _3 = move _17;
        goto -> bb1;
    }

    bb17: {
        _24 = &_4;
        _23 = std::option::Option::<std::option::Option<IconTheme>>::is_some(_24) -> [return: bb18, unwind: bb64];
    }

    bb18: {
        switchInt(move _23) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _25 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "theme") -> [return: bb20, unwind: bb64];
    }

    bb20: {
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Err(move _25);
        goto -> bb61;
    }

    bb21: {
        _28 = &mut _2;
        _27 = <__A as MapAccess<'_>>::next_value::<std::option::Option<IconTheme>>(_28) -> [return: bb22, unwind: bb64];
    }

    bb22: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _31 = move ((_27 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb61;
    }

    bb24: {
        _30 = ((_27 as Ok).0: std::option::Option<flags::icons::IconTheme>);
        _26 = std::option::Option::<std::option::Option<IconTheme>>::Some(_30);
        _4 = move _26;
        goto -> bb1;
    }

    bb25: {
        _33 = &_5;
        _32 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_33) -> [return: bb26, unwind: bb64];
    }

    bb26: {
        switchInt(move _32) -> [0: bb29, otherwise: bb27];
    }

    bb27: {
        _34 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "separator") -> [return: bb28, unwind: bb64];
    }

    bb28: {
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb61;
    }

    bb29: {
        _37 = &mut _2;
        _36 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_37) -> [return: bb30, unwind: bb64];
    }

    bb30: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb32, 1: bb31, otherwise: bb4];
    }

    bb31: {
        _40 = move ((_36 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Err(move _40);
        goto -> bb61;
    }

    bb32: {
        _39 = move ((_36 as Ok).0: std::option::Option<std::string::String>);
        _35 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _39);
        drop(_5) -> [return: bb33, unwind: bb34];
    }

    bb33: {
        _70 = const true;
        _5 = move _35;
        goto -> bb1;
    }

    bb34 (cleanup): {
        _70 = const true;
        _5 = move _35;
        goto -> bb64;
    }

    bb35: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb1, 1: bb36, otherwise: bb4];
    }

    bb36: {
        _44 = move ((_41 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb61;
    }

    bb37: {
        _48 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<IconOption>, <__A as MapAccess<'_>>::Error>(const "when") -> [return: bb39, unwind: bb64];
    }

    bb38: {
        _47 = ((_3 as Some).0: std::option::Option<flags::icons::IconOption>);
        _45 = _47;
        goto -> bb42;
    }

    bb39: {
        _49 = discriminant(_48);
        switchInt(move _49) -> [0: bb41, 1: bb40, otherwise: bb4];
    }

    bb40: {
        _51 = move ((_48 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Err(move _51);
        goto -> bb61;
    }

    bb41: {
        _50 = ((_48 as Ok).0: std::option::Option<flags::icons::IconOption>);
        _45 = _50;
        goto -> bb42;
    }

    bb42: {
        _53 = discriminant(_4);
        switchInt(move _53) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        _55 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<IconTheme>, <__A as MapAccess<'_>>::Error>(const "theme") -> [return: bb45, unwind: bb64];
    }

    bb44: {
        _54 = ((_4 as Some).0: std::option::Option<flags::icons::IconTheme>);
        _52 = _54;
        goto -> bb48;
    }

    bb45: {
        _56 = discriminant(_55);
        switchInt(move _56) -> [0: bb47, 1: bb46, otherwise: bb4];
    }

    bb46: {
        _58 = move ((_55 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Err(move _58);
        goto -> bb61;
    }

    bb47: {
        _57 = ((_55 as Ok).0: std::option::Option<flags::icons::IconTheme>);
        _52 = _57;
        goto -> bb48;
    }

    bb48: {
        _60 = discriminant(_5);
        switchInt(move _60) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        _62 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "separator") -> [return: bb51, unwind: bb64];
    }

    bb50: {
        _70 = const false;
        _61 = move ((_5 as Some).0: std::option::Option<std::string::String>);
        _59 = move _61;
        goto -> bb54;
    }

    bb51: {
        _63 = discriminant(_62);
        switchInt(move _63) -> [0: bb53, 1: bb52, otherwise: bb4];
    }

    bb52: {
        _65 = move ((_62 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Err(move _65);
        goto -> bb61;
    }

    bb53: {
        _64 = move ((_62 as Ok).0: std::option::Option<std::string::String>);
        _59 = move _64;
        goto -> bb54;
    }

    bb54: {
        _67 = _45;
        _68 = _52;
        _69 = move _59;
        _66 = config_file::Icons { when: move _67, theme: move _68, separator: move _69 };
        _0 = Result::<config_file::Icons, <__A as MapAccess<'_>>::Error>::Ok(move _66);
        _70 = const false;
        drop(_2) -> [return: bb55, unwind continue];
    }

    bb55: {
        return;
    }

    bb56 (cleanup): {
        drop(_2) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }

    bb58: {
        _70 = const false;
        drop(_2) -> [return: bb55, unwind continue];
    }

    bb59: {
        switchInt(_70) -> [0: bb58, otherwise: bb60];
    }

    bb60: {
        drop(((_5 as Some).0: std::option::Option<std::string::String>)) -> [return: bb58, unwind: bb56];
    }

    bb61: {
        _71 = discriminant(_5);
        switchInt(move _71) -> [1: bb59, otherwise: bb58];
    }

    bb62 (cleanup): {
        switchInt(_70) -> [0: bb56, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop(((_5 as Some).0: std::option::Option<std::string::String>)) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        _72 = discriminant(_5);
        switchInt(move _72) -> [1: bb62, otherwise: bb56];
    }
}

const config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:50:32: 50:43>::deserialize::FIELDS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "when", const "theme", const "separator"];
        _0 = &_1;
        return;
    }
}

fn config_file::<impl at src/config_file.rs:57:10: 57:12>::assert_receiver_is_total_eq(_1: &config_file::Recursion) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn config_file::<impl at src/config_file.rs:57:14: 57:23>::eq(_1: &config_file::Recursion, _2: &config_file::Recursion) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &std::option::Option<bool>;
    let mut _5: &std::option::Option<bool>;
    let mut _6: &std::option::Option<usize>;
    let mut _7: &std::option::Option<usize>;

    bb0: {
        _4 = &((*_1).0: std::option::Option<bool>);
        _5 = &((*_2).0: std::option::Option<bool>);
        _3 = <std::option::Option<bool> as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = &((*_1).1: std::option::Option<usize>);
        _7 = &((*_2).1: std::option::Option<usize>);
        _0 = <std::option::Option<usize> as PartialEq>::eq(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn config_file::<impl at src/config_file.rs:57:25: 57:30>::fmt(_1: &config_file::Recursion, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::option::Option<bool>;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::option::Option<usize>;
    let _10: &std::option::Option<usize>;

    bb0: {
        _3 = const "Recursion";
        _4 = const "enabled";
        _6 = &((*_1).0: std::option::Option<bool>);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "depth";
        _10 = &((*_1).1: std::option::Option<usize>);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const config_file::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize(_1: __D) -> Result<config_file::Recursion, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<config_file::Recursion, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'_>>(move _1, const "Recursion", const _, const config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Recursion>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::<impl at src/config_file.rs:57:32: 57:43>::expecting(_1: &config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::<impl at src/config_file.rs:57:32: 57:43>::visit_u64(_1: config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor, _2: u64) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>;
    let mut _3: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field;
    let mut _4: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field;
    let mut _5: __E;
    let mut _6: config_file::_::_serde::de::Unexpected<'_>;
    let mut _7: &dyn config_file::_::_serde::de::Expected;
    let mut _8: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        _6 = Unexpected::<'_>::Unsigned(_2);
        _8 = const _;
        _7 = _8 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _5 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb2: {
        _3 = config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb5;
    }

    bb3: {
        _4 = config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb5;
    }

    bb4: {
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>::Err(move _5);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::<impl at src/config_file.rs:57:32: 57:43>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 2";
        _0 = &_1;
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::<impl at src/config_file.rs:57:32: 57:43>::visit_str(_1: config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor, _2: &str) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field;
    let mut _6: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field;
    let mut _7: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field;

    bb0: {
        _4 = <str as PartialEq>::eq(_2, const "enabled") -> [return: bb6, unwind continue];
    }

    bb1: {
        _5 = config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb7;
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_2, const "depth") -> [return: bb5, unwind continue];
    }

    bb3: {
        _6 = config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb4: {
        _7 = config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field::__ignore;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb7;
    }

    bb5: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb7: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::<impl at src/config_file.rs:57:32: 57:43>::visit_bytes(_1: config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field;
    let mut _10: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field;
    let mut _11: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field;

    bb0: {
        _6 = Len((*_2));
        _7 = const 7_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [101: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [110: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [97: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [98: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [108: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [101: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [100: bb15, otherwise: bb8];
    }

    bb8: {
        _11 = config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field::__ignore;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb17;
    }

    bb9: {
        _3 = Len((*_2));
        _4 = const 5_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb10];
    }

    bb10: {
        switchInt((*_2)[0 of 5]) -> [100: bb11, otherwise: bb8];
    }

    bb11: {
        switchInt((*_2)[1 of 5]) -> [101: bb12, otherwise: bb8];
    }

    bb12: {
        switchInt((*_2)[2 of 5]) -> [112: bb13, otherwise: bb8];
    }

    bb13: {
        switchInt((*_2)[3 of 5]) -> [116: bb14, otherwise: bb8];
    }

    bb14: {
        switchInt((*_2)[4 of 5]) -> [104: bb16, otherwise: bb8];
    }

    bb15: {
        _9 = config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb17;
    }

    bb16: {
        _10 = config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::<impl at src/config_file.rs:57:32: 57:43>::deserialize(_1: __D) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor>(move _1, const config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::<impl at src/config_file.rs:57:32: 57:43>::expecting(_1: &config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Recursion";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::<impl at src/config_file.rs:57:32: 57:43>::visit_seq(_1: config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'_>, _2: __A) -> Result<config_file::Recursion, <__A as SeqAccess<'_>>::Error> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Recursion>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<config_file::Recursion, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<std::option::Option<bool>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<std::option::Option<bool>>;
    let _7: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: std::option::Option<bool>;
    let mut _10: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn config_file::_::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<std::option::Option<usize>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn config_file::_::_serde::de::Expected;
    let mut _21: config_file::Recursion;
    let mut _22: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<std::option::Option<usize>>;
        let _16: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
        let _18: std::option::Option<usize>;
        let mut _23: &&str;
        scope 5 {
            debug __field1 => _18;
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<bool>>(_4) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<config_file::Recursion, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb14;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<std::option::Option<bool>>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _22 = const _;
        _11 = _22 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb16];
    }

    bb6: {
        _9 = ((_6 as Some).0: std::option::Option<bool>);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<usize>>(_13) -> [return: bb8, unwind: bb16];
    }

    bb7: {
        _0 = Result::<config_file::Recursion, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb14;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<config_file::Recursion, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb14;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<usize>>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _23 = const _;
        _20 = _23 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb16];
    }

    bb12: {
        _18 = ((_15 as Some).0: std::option::Option<usize>);
        _21 = config_file::Recursion { enabled: _9, depth: _18 };
        _0 = Result::<config_file::Recursion, <__A as SeqAccess<'_>>::Error>::Ok(move _21);
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb13: {
        _0 = Result::<config_file::Recursion, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb14;
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::<impl at src/config_file.rs:57:32: 57:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Recursion with 2 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::<impl at src/config_file.rs:57:32: 57:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Recursion with 2 elements";
        _0 = &_1;
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::<impl at src/config_file.rs:57:32: 57:43>::visit_map(_1: config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor<'_>, _2: __A) -> Result<config_file::Recursion, <__A as MapAccess<'_>>::Error> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Recursion>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<config_file::Recursion, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<bool>>;
    let mut _5: std::result::Result<std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _6: &mut __A;
    let mut _7: isize;
    let mut _10: isize;
    let mut _12: isize;
    let mut _13: bool;
    let _14: &std::option::Option<std::option::Option<bool>>;
    let mut _15: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _16: std::option::Option<std::option::Option<bool>>;
    let mut _17: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _18: &mut __A;
    let mut _19: isize;
    let mut _22: bool;
    let _23: &std::option::Option<std::option::Option<usize>>;
    let mut _24: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _25: std::option::Option<std::option::Option<usize>>;
    let mut _26: std::result::Result<std::option::Option<usize>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _27: &mut __A;
    let mut _28: isize;
    let mut _31: std::result::Result<config_file::_::_serde::de::IgnoredAny, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: isize;
    let mut _38: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _39: isize;
    let mut _43: isize;
    let mut _45: std::result::Result<std::option::Option<usize>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _46: isize;
    let mut _49: config_file::Recursion;
    let mut _50: std::option::Option<bool>;
    let mut _51: std::option::Option<usize>;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<usize>>;
        scope 2 {
            debug __field1 => _4;
            let _35: std::option::Option<bool>;
            let _37: std::option::Option<bool>;
            let _40: std::option::Option<bool>;
            let _41: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __key => _11;
                let _8: std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field>;
                let _9: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                let _11: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field;
                let _20: std::option::Option<bool>;
                let _21: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                let _29: std::option::Option<usize>;
                let _30: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                let _34: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                scope 4 {
                    debug __val => _8;
                }
                scope 5 {
                    debug __err => _9;
                }
                scope 6 {
                    debug __val => _20;
                }
                scope 7 {
                    debug __err => _21;
                }
                scope 8 {
                    debug __val => _29;
                }
                scope 9 {
                    debug __err => _30;
                }
                scope 10 {
                }
                scope 11 {
                    debug __val => const IgnoredAny;
                }
                scope 12 {
                    debug __err => _34;
                }
            }
            scope 13 {
                debug __field0 => _35;
                let _42: std::option::Option<usize>;
                let _44: std::option::Option<usize>;
                let _47: std::option::Option<usize>;
                let _48: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                scope 17 {
                    debug __field1 => _42;
                }
                scope 18 {
                    debug __field1 => _44;
                }
                scope 19 {
                    debug __val => _47;
                }
                scope 20 {
                    debug __err => _48;
                }
            }
            scope 14 {
                debug __field0 => _37;
            }
            scope 15 {
                debug __val => _40;
            }
            scope 16 {
                debug __err => _41;
            }
        }
    }

    bb0: {
        _3 = std::option::Option::<std::option::Option<bool>>::None;
        _4 = std::option::Option::<std::option::Option<usize>>::None;
        goto -> bb1;
    }

    bb1: {
        _6 = &mut _2;
        _5 = <__A as MapAccess<'_>>::next_key::<config_file::_::<impl Deserialize<'de> for config_file::Recursion>::deserialize::__Field>(_6) -> [return: bb2, unwind: bb41];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_5 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Recursion, <__A as MapAccess<'_>>::Error>::Err(move _9);
        goto -> bb39;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Ok).0: std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field>);
        _10 = discriminant(_8);
        switchInt(move _10) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _36 = discriminant(_3);
        switchInt(move _36) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb7: {
        _11 = move ((_8 as Some).0: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Recursion>::deserialize::__Field);
        _12 = discriminant(_11);
        switchInt(move _12) -> [0: bb9, 1: bb17, otherwise: bb8];
    }

    bb8: {
        _32 = &mut _2;
        _31 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_32) -> [return: bb25, unwind: bb41];
    }

    bb9: {
        _14 = &_3;
        _13 = std::option::Option::<std::option::Option<bool>>::is_some(_14) -> [return: bb10, unwind: bb41];
    }

    bb10: {
        switchInt(move _13) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _15 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "enabled") -> [return: bb12, unwind: bb41];
    }

    bb12: {
        _0 = Result::<config_file::Recursion, <__A as MapAccess<'_>>::Error>::Err(move _15);
        goto -> bb39;
    }

    bb13: {
        _18 = &mut _2;
        _17 = <__A as MapAccess<'_>>::next_value::<std::option::Option<bool>>(_18) -> [return: bb14, unwind: bb41];
    }

    bb14: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _21 = move ((_17 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Recursion, <__A as MapAccess<'_>>::Error>::Err(move _21);
        goto -> bb39;
    }

    bb16: {
        _20 = ((_17 as Ok).0: std::option::Option<bool>);
        _16 = std::option::Option::<std::option::Option<bool>>::Some(_20);
        _3 = move _16;
        goto -> bb1;
    }

    bb17: {
        _23 = &_4;
        _22 = std::option::Option::<std::option::Option<usize>>::is_some(_23) -> [return: bb18, unwind: bb41];
    }

    bb18: {
        switchInt(move _22) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _24 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "depth") -> [return: bb20, unwind: bb41];
    }

    bb20: {
        _0 = Result::<config_file::Recursion, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb39;
    }

    bb21: {
        _27 = &mut _2;
        _26 = <__A as MapAccess<'_>>::next_value::<std::option::Option<usize>>(_27) -> [return: bb22, unwind: bb41];
    }

    bb22: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _30 = move ((_26 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Recursion, <__A as MapAccess<'_>>::Error>::Err(move _30);
        goto -> bb39;
    }

    bb24: {
        _29 = ((_26 as Ok).0: std::option::Option<usize>);
        _25 = std::option::Option::<std::option::Option<usize>>::Some(_29);
        _4 = move _25;
        goto -> bb1;
    }

    bb25: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb1, 1: bb26, otherwise: bb4];
    }

    bb26: {
        _34 = move ((_31 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Recursion, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb39;
    }

    bb27: {
        _38 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<bool>, <__A as MapAccess<'_>>::Error>(const "enabled") -> [return: bb29, unwind: bb41];
    }

    bb28: {
        _37 = ((_3 as Some).0: std::option::Option<bool>);
        _35 = _37;
        goto -> bb32;
    }

    bb29: {
        _39 = discriminant(_38);
        switchInt(move _39) -> [0: bb31, 1: bb30, otherwise: bb4];
    }

    bb30: {
        _41 = move ((_38 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Recursion, <__A as MapAccess<'_>>::Error>::Err(move _41);
        goto -> bb39;
    }

    bb31: {
        _40 = ((_38 as Ok).0: std::option::Option<bool>);
        _35 = _40;
        goto -> bb32;
    }

    bb32: {
        _43 = discriminant(_4);
        switchInt(move _43) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        _45 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<usize>, <__A as MapAccess<'_>>::Error>(const "depth") -> [return: bb35, unwind: bb41];
    }

    bb34: {
        _44 = ((_4 as Some).0: std::option::Option<usize>);
        _42 = _44;
        goto -> bb38;
    }

    bb35: {
        _46 = discriminant(_45);
        switchInt(move _46) -> [0: bb37, 1: bb36, otherwise: bb4];
    }

    bb36: {
        _48 = move ((_45 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Recursion, <__A as MapAccess<'_>>::Error>::Err(move _48);
        goto -> bb39;
    }

    bb37: {
        _47 = ((_45 as Ok).0: std::option::Option<usize>);
        _42 = _47;
        goto -> bb38;
    }

    bb38: {
        _50 = _35;
        _51 = _42;
        _49 = config_file::Recursion { enabled: move _50, depth: move _51 };
        _0 = Result::<config_file::Recursion, <__A as MapAccess<'_>>::Error>::Ok(move _49);
        drop(_2) -> [return: bb40, unwind continue];
    }

    bb39: {
        drop(_2) -> [return: bb40, unwind continue];
    }

    bb40: {
        return;
    }

    bb41 (cleanup): {
        drop(_2) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        resume;
    }
}

const config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 2];
    let _2: &[&str; 2];
    let _3: [&str; 2];
    let mut _4: &[&str; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:57:32: 57:43>::deserialize::FIELDS: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "enabled", const "depth"];
        _0 = &_1;
        return;
    }
}

fn config_file::<impl at src/config_file.rs:63:10: 63:12>::assert_receiver_is_total_eq(_1: &config_file::Sorting) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;
    }
}

fn config_file::<impl at src/config_file.rs:63:14: 63:23>::eq(_1: &config_file::Sorting, _2: &config_file::Sorting) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &std::option::Option<flags::sorting::SortColumn>;
    let mut _5: &std::option::Option<flags::sorting::SortColumn>;
    let mut _6: bool;
    let mut _7: &std::option::Option<bool>;
    let mut _8: &std::option::Option<bool>;
    let mut _9: &std::option::Option<flags::sorting::DirGrouping>;
    let mut _10: &std::option::Option<flags::sorting::DirGrouping>;

    bb0: {
        _4 = &((*_1).0: std::option::Option<flags::sorting::SortColumn>);
        _5 = &((*_2).0: std::option::Option<flags::sorting::SortColumn>);
        _3 = <std::option::Option<SortColumn> as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        _7 = &((*_1).1: std::option::Option<bool>);
        _8 = &((*_2).1: std::option::Option<bool>);
        _6 = <std::option::Option<bool> as PartialEq>::eq(move _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _9 = &((*_1).2: std::option::Option<flags::sorting::DirGrouping>);
        _10 = &((*_2).2: std::option::Option<flags::sorting::DirGrouping>);
        _0 = <std::option::Option<DirGrouping> as PartialEq>::eq(move _9, move _10) -> [return: bb6, unwind continue];
    }

    bb5: {
        _0 = const false;
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn config_file::<impl at src/config_file.rs:63:25: 63:30>::fmt(_1: &config_file::Sorting, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::option::Option<flags::sorting::SortColumn>;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::option::Option<bool>;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&std::option::Option<flags::sorting::DirGrouping>;
    let _13: &std::option::Option<flags::sorting::DirGrouping>;

    bb0: {
        _3 = const "Sorting";
        _4 = const "column";
        _6 = &((*_1).0: std::option::Option<flags::sorting::SortColumn>);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "reverse";
        _9 = &((*_1).1: std::option::Option<bool>);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "dir_grouping";
        _13 = &((*_1).2: std::option::Option<flags::sorting::DirGrouping>);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const config_file::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize(_1: __D) -> Result<config_file::Sorting, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<config_file::Sorting, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'_>>(move _1, const "Sorting", const _, const config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Sorting>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::expecting(_1: &config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::visit_u64(_1: config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor, _2: u64) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>;
    let mut _3: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;
    let mut _4: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;
    let mut _5: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: config_file::_::_serde::de::Unexpected<'_>;
    let mut _8: &dyn config_file::_::_serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field::__field2;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::visit_str(_1: config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor, _2: &str) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;
    let mut _7: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;
    let mut _8: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;
    let mut _9: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "column") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "reverse") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "dir-grouping") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field::__field2;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb10;
    }

    bb6: {
        _9 = config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field::__ignore;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb10;
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::visit_bytes(_1: config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;
    let mut _13: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;
    let mut _14: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;
    let mut _15: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;

    bb0: {
        _9 = Len((*_2));
        _10 = const 6_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 6]) -> [99: bb2, otherwise: bb7];
    }

    bb2: {
        switchInt((*_2)[1 of 6]) -> [111: bb3, otherwise: bb7];
    }

    bb3: {
        switchInt((*_2)[2 of 6]) -> [108: bb4, otherwise: bb7];
    }

    bb4: {
        switchInt((*_2)[3 of 6]) -> [117: bb5, otherwise: bb7];
    }

    bb5: {
        switchInt((*_2)[4 of 6]) -> [109: bb6, otherwise: bb7];
    }

    bb6: {
        switchInt((*_2)[5 of 6]) -> [110: bb29, otherwise: bb7];
    }

    bb7: {
        _15 = config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field::__ignore;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb32;
    }

    bb8: {
        _6 = Len((*_2));
        _7 = const 7_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb16, otherwise: bb9];
    }

    bb9: {
        switchInt((*_2)[0 of 7]) -> [114: bb10, otherwise: bb7];
    }

    bb10: {
        switchInt((*_2)[1 of 7]) -> [101: bb11, otherwise: bb7];
    }

    bb11: {
        switchInt((*_2)[2 of 7]) -> [118: bb12, otherwise: bb7];
    }

    bb12: {
        switchInt((*_2)[3 of 7]) -> [101: bb13, otherwise: bb7];
    }

    bb13: {
        switchInt((*_2)[4 of 7]) -> [114: bb14, otherwise: bb7];
    }

    bb14: {
        switchInt((*_2)[5 of 7]) -> [115: bb15, otherwise: bb7];
    }

    bb15: {
        switchInt((*_2)[6 of 7]) -> [101: bb30, otherwise: bb7];
    }

    bb16: {
        _3 = Len((*_2));
        _4 = const 12_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb7, otherwise: bb17];
    }

    bb17: {
        switchInt((*_2)[0 of 12]) -> [100: bb18, otherwise: bb7];
    }

    bb18: {
        switchInt((*_2)[1 of 12]) -> [105: bb19, otherwise: bb7];
    }

    bb19: {
        switchInt((*_2)[2 of 12]) -> [114: bb20, otherwise: bb7];
    }

    bb20: {
        switchInt((*_2)[3 of 12]) -> [45: bb21, otherwise: bb7];
    }

    bb21: {
        switchInt((*_2)[4 of 12]) -> [103: bb22, otherwise: bb7];
    }

    bb22: {
        switchInt((*_2)[5 of 12]) -> [114: bb23, otherwise: bb7];
    }

    bb23: {
        switchInt((*_2)[6 of 12]) -> [111: bb24, otherwise: bb7];
    }

    bb24: {
        switchInt((*_2)[7 of 12]) -> [117: bb25, otherwise: bb7];
    }

    bb25: {
        switchInt((*_2)[8 of 12]) -> [112: bb26, otherwise: bb7];
    }

    bb26: {
        switchInt((*_2)[9 of 12]) -> [105: bb27, otherwise: bb7];
    }

    bb27: {
        switchInt((*_2)[10 of 12]) -> [110: bb28, otherwise: bb7];
    }

    bb28: {
        switchInt((*_2)[11 of 12]) -> [103: bb31, otherwise: bb7];
    }

    bb29: {
        _12 = config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field::__field0;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb32;
    }

    bb30: {
        _13 = config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field::__field1;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb32;
    }

    bb31: {
        _14 = config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field::__field2;
        _0 = Result::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb32;
    }

    bb32: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::deserialize(_1: __D) -> Result<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor>(move _1, const config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::expecting(_1: &config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Sorting";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::visit_seq(_1: config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'_>, _2: __A) -> Result<config_file::Sorting, <__A as SeqAccess<'_>>::Error> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Sorting>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<config_file::Sorting, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<std::option::Option<flags::sorting::SortColumn>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<std::option::Option<flags::sorting::SortColumn>>;
    let _7: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: std::option::Option<flags::sorting::SortColumn>;
    let mut _10: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn config_file::_::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<std::option::Option<bool>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn config_file::_::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<std::option::Option<flags::sorting::DirGrouping>>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn config_file::_::_serde::de::Expected;
    let mut _30: config_file::Sorting;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<std::option::Option<bool>>;
        let _16: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
        let _18: std::option::Option<bool>;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<std::option::Option<flags::sorting::DirGrouping>>;
            let _25: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
            let _27: std::option::Option<flags::sorting::DirGrouping>;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<SortColumn>>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<config_file::Sorting, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<std::option::Option<flags::sorting::SortColumn>>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: std::option::Option<flags::sorting::SortColumn>);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<bool>>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = Result::<config_file::Sorting, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<config_file::Sorting, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<bool>>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: std::option::Option<bool>);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<DirGrouping>>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = Result::<config_file::Sorting, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<config_file::Sorting, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<std::option::Option<flags::sorting::DirGrouping>>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: std::option::Option<flags::sorting::DirGrouping>);
        _30 = config_file::Sorting { column: _9, reverse: _18, dir_grouping: _27 };
        _0 = Result::<config_file::Sorting, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = Result::<config_file::Sorting, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Sorting with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Sorting with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Sorting with 3 elements";
        _0 = &_1;
        return;
    }
}

fn config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::<impl at src/config_file.rs:63:32: 63:43>::visit_map(_1: config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor<'_>, _2: __A) -> Result<config_file::Sorting, <__A as MapAccess<'_>>::Error> {
    debug self => const config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<config_file::Sorting>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<config_file::Sorting, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<flags::sorting::SortColumn>>;
    let mut _6: std::result::Result<std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _7: &mut __A;
    let mut _8: isize;
    let mut _11: isize;
    let mut _13: isize;
    let mut _14: bool;
    let _15: &std::option::Option<std::option::Option<flags::sorting::SortColumn>>;
    let mut _16: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _17: std::option::Option<std::option::Option<flags::sorting::SortColumn>>;
    let mut _18: std::result::Result<std::option::Option<flags::sorting::SortColumn>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _19: &mut __A;
    let mut _20: isize;
    let mut _23: bool;
    let _24: &std::option::Option<std::option::Option<bool>>;
    let mut _25: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _26: std::option::Option<std::option::Option<bool>>;
    let mut _27: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _28: &mut __A;
    let mut _29: isize;
    let mut _32: bool;
    let _33: &std::option::Option<std::option::Option<flags::sorting::DirGrouping>>;
    let mut _34: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
    let mut _35: std::option::Option<std::option::Option<flags::sorting::DirGrouping>>;
    let mut _36: std::result::Result<std::option::Option<flags::sorting::DirGrouping>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _37: &mut __A;
    let mut _38: isize;
    let mut _41: std::result::Result<config_file::_::_serde::de::IgnoredAny, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: std::result::Result<std::option::Option<flags::sorting::SortColumn>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _49: isize;
    let mut _53: isize;
    let mut _55: std::result::Result<std::option::Option<bool>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _56: isize;
    let mut _60: isize;
    let mut _62: std::result::Result<std::option::Option<flags::sorting::DirGrouping>, <__A as config_file::_::_serde::de::MapAccess<'_>>::Error>;
    let mut _63: isize;
    let mut _66: config_file::Sorting;
    let mut _67: std::option::Option<flags::sorting::SortColumn>;
    let mut _68: std::option::Option<bool>;
    let mut _69: std::option::Option<flags::sorting::DirGrouping>;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<bool>>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::option::Option<flags::sorting::DirGrouping>>;
            scope 3 {
                debug __field2 => _5;
                let _45: std::option::Option<flags::sorting::SortColumn>;
                let _47: std::option::Option<flags::sorting::SortColumn>;
                let _50: std::option::Option<flags::sorting::SortColumn>;
                let _51: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                scope 4 {
                    debug __key => _12;
                    let _9: std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field>;
                    let _10: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    let _12: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field;
                    let _21: std::option::Option<flags::sorting::SortColumn>;
                    let _22: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    let _30: std::option::Option<bool>;
                    let _31: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    let _39: std::option::Option<flags::sorting::DirGrouping>;
                    let _40: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    let _44: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    scope 5 {
                        debug __val => _9;
                    }
                    scope 6 {
                        debug __err => _10;
                    }
                    scope 7 {
                        debug __val => _21;
                    }
                    scope 8 {
                        debug __err => _22;
                    }
                    scope 9 {
                        debug __val => _30;
                    }
                    scope 10 {
                        debug __err => _31;
                    }
                    scope 11 {
                        debug __val => _39;
                    }
                    scope 12 {
                        debug __err => _40;
                    }
                    scope 13 {
                    }
                    scope 14 {
                        debug __val => const IgnoredAny;
                    }
                    scope 15 {
                        debug __err => _44;
                    }
                }
                scope 16 {
                    debug __field0 => _45;
                    let _52: std::option::Option<bool>;
                    let _54: std::option::Option<bool>;
                    let _57: std::option::Option<bool>;
                    let _58: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                    scope 20 {
                        debug __field1 => _52;
                        let _59: std::option::Option<flags::sorting::DirGrouping>;
                        let _61: std::option::Option<flags::sorting::DirGrouping>;
                        let _64: std::option::Option<flags::sorting::DirGrouping>;
                        let _65: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error;
                        scope 24 {
                            debug __field2 => _59;
                        }
                        scope 25 {
                            debug __field2 => _61;
                        }
                        scope 26 {
                            debug __val => _64;
                        }
                        scope 27 {
                            debug __err => _65;
                        }
                    }
                    scope 21 {
                        debug __field1 => _54;
                    }
                    scope 22 {
                        debug __val => _57;
                    }
                    scope 23 {
                        debug __err => _58;
                    }
                }
                scope 17 {
                    debug __field0 => _47;
                }
                scope 18 {
                    debug __val => _50;
                }
                scope 19 {
                    debug __err => _51;
                }
            }
        }
    }

    bb0: {
        _3 = std::option::Option::<std::option::Option<SortColumn>>::None;
        _4 = std::option::Option::<std::option::Option<bool>>::None;
        _5 = std::option::Option::<std::option::Option<DirGrouping>>::None;
        goto -> bb1;
    }

    bb1: {
        _7 = &mut _2;
        _6 = <__A as MapAccess<'_>>::next_key::<config_file::_::<impl Deserialize<'de> for config_file::Sorting>::deserialize::__Field>(_7) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _10 = move ((_6 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Err(move _10);
        goto -> bb53;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = move ((_6 as Ok).0: std::option::Option<config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field>);
        _11 = discriminant(_9);
        switchInt(move _11) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _46 = discriminant(_3);
        switchInt(move _46) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb7: {
        _12 = move ((_9 as Some).0: config_file::_::<impl config_file::_::_serde::Deserialize<'de> for config_file::Sorting>::deserialize::__Field);
        _13 = discriminant(_12);
        switchInt(move _13) -> [0: bb9, 1: bb17, 2: bb25, otherwise: bb8];
    }

    bb8: {
        _42 = &mut _2;
        _41 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_42) -> [return: bb33, unwind: bb55];
    }

    bb9: {
        _15 = &_3;
        _14 = std::option::Option::<std::option::Option<SortColumn>>::is_some(_15) -> [return: bb10, unwind: bb55];
    }

    bb10: {
        switchInt(move _14) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _16 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "column") -> [return: bb12, unwind: bb55];
    }

    bb12: {
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Err(move _16);
        goto -> bb53;
    }

    bb13: {
        _19 = &mut _2;
        _18 = <__A as MapAccess<'_>>::next_value::<std::option::Option<SortColumn>>(_19) -> [return: bb14, unwind: bb55];
    }

    bb14: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _22 = move ((_18 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb53;
    }

    bb16: {
        _21 = ((_18 as Ok).0: std::option::Option<flags::sorting::SortColumn>);
        _17 = std::option::Option::<std::option::Option<SortColumn>>::Some(_21);
        _3 = move _17;
        goto -> bb1;
    }

    bb17: {
        _24 = &_4;
        _23 = std::option::Option::<std::option::Option<bool>>::is_some(_24) -> [return: bb18, unwind: bb55];
    }

    bb18: {
        switchInt(move _23) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _25 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "reverse") -> [return: bb20, unwind: bb55];
    }

    bb20: {
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Err(move _25);
        goto -> bb53;
    }

    bb21: {
        _28 = &mut _2;
        _27 = <__A as MapAccess<'_>>::next_value::<std::option::Option<bool>>(_28) -> [return: bb22, unwind: bb55];
    }

    bb22: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _31 = move ((_27 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb53;
    }

    bb24: {
        _30 = ((_27 as Ok).0: std::option::Option<bool>);
        _26 = std::option::Option::<std::option::Option<bool>>::Some(_30);
        _4 = move _26;
        goto -> bb1;
    }

    bb25: {
        _33 = &_5;
        _32 = std::option::Option::<std::option::Option<DirGrouping>>::is_some(_33) -> [return: bb26, unwind: bb55];
    }

    bb26: {
        switchInt(move _32) -> [0: bb29, otherwise: bb27];
    }

    bb27: {
        _34 = <<__A as MapAccess<'_>>::Error as config_file::_::_serde::de::Error>::duplicate_field(const "dir-grouping") -> [return: bb28, unwind: bb55];
    }

    bb28: {
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb53;
    }

    bb29: {
        _37 = &mut _2;
        _36 = <__A as MapAccess<'_>>::next_value::<std::option::Option<DirGrouping>>(_37) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb32, 1: bb31, otherwise: bb4];
    }

    bb31: {
        _40 = move ((_36 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Err(move _40);
        goto -> bb53;
    }

    bb32: {
        _39 = ((_36 as Ok).0: std::option::Option<flags::sorting::DirGrouping>);
        _35 = std::option::Option::<std::option::Option<DirGrouping>>::Some(_39);
        _5 = move _35;
        goto -> bb1;
    }

    bb33: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb1, 1: bb34, otherwise: bb4];
    }

    bb34: {
        _44 = move ((_41 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb53;
    }

    bb35: {
        _48 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<SortColumn>, <__A as MapAccess<'_>>::Error>(const "column") -> [return: bb37, unwind: bb55];
    }

    bb36: {
        _47 = ((_3 as Some).0: std::option::Option<flags::sorting::SortColumn>);
        _45 = _47;
        goto -> bb40;
    }

    bb37: {
        _49 = discriminant(_48);
        switchInt(move _49) -> [0: bb39, 1: bb38, otherwise: bb4];
    }

    bb38: {
        _51 = move ((_48 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Err(move _51);
        goto -> bb53;
    }

    bb39: {
        _50 = ((_48 as Ok).0: std::option::Option<flags::sorting::SortColumn>);
        _45 = _50;
        goto -> bb40;
    }

    bb40: {
        _53 = discriminant(_4);
        switchInt(move _53) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        _55 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<bool>, <__A as MapAccess<'_>>::Error>(const "reverse") -> [return: bb43, unwind: bb55];
    }

    bb42: {
        _54 = ((_4 as Some).0: std::option::Option<bool>);
        _52 = _54;
        goto -> bb46;
    }

    bb43: {
        _56 = discriminant(_55);
        switchInt(move _56) -> [0: bb45, 1: bb44, otherwise: bb4];
    }

    bb44: {
        _58 = move ((_55 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Err(move _58);
        goto -> bb53;
    }

    bb45: {
        _57 = ((_55 as Ok).0: std::option::Option<bool>);
        _52 = _57;
        goto -> bb46;
    }

    bb46: {
        _60 = discriminant(_5);
        switchInt(move _60) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        _62 = config_file::_::_serde::private::de::missing_field::<'_, std::option::Option<DirGrouping>, <__A as MapAccess<'_>>::Error>(const "dir-grouping") -> [return: bb49, unwind: bb55];
    }

    bb48: {
        _61 = ((_5 as Some).0: std::option::Option<flags::sorting::DirGrouping>);
        _59 = _61;
        goto -> bb52;
    }

    bb49: {
        _63 = discriminant(_62);
        switchInt(move _63) -> [0: bb51, 1: bb50, otherwise: bb4];
    }

    bb50: {
        _65 = move ((_62 as Err).0: <__A as config_file::_::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Err(move _65);
        goto -> bb53;
    }

    bb51: {
        _64 = ((_62 as Ok).0: std::option::Option<flags::sorting::DirGrouping>);
        _59 = _64;
        goto -> bb52;
    }

    bb52: {
        _67 = _45;
        _68 = _52;
        _69 = _59;
        _66 = config_file::Sorting { column: move _67, reverse: move _68, dir_grouping: move _69 };
        _0 = Result::<config_file::Sorting, <__A as MapAccess<'_>>::Error>::Ok(move _66);
        drop(_2) -> [return: bb54, unwind continue];
    }

    bb53: {
        drop(_2) -> [return: bb54, unwind continue];
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_2) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }
}

const config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in config_file::_::<impl at src/config_file.rs:63:32: 63:43>::deserialize::FIELDS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "column", const "reverse", const "dir-grouping"];
        _0 = &_1;
        return;
    }
}

fn config_file::<impl at src/config_file.rs:71:1: 71:12>::with_none() -> Config {
    let mut _0: config_file::Config;
    let mut _1: std::option::Option<bool>;
    let mut _2: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _3: std::option::Option<config_file::Color>;
    let mut _4: std::option::Option<std::string::String>;
    let mut _5: std::option::Option<bool>;
    let mut _6: std::option::Option<flags::display::Display>;
    let mut _7: std::option::Option<config_file::Icons>;
    let mut _8: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _9: std::option::Option<bool>;
    let mut _10: std::option::Option<flags::layout::Layout>;
    let mut _11: std::option::Option<config_file::Recursion>;
    let mut _12: std::option::Option<flags::size::SizeFlag>;
    let mut _13: std::option::Option<config_file::Sorting>;
    let mut _14: std::option::Option<bool>;
    let mut _15: std::option::Option<bool>;
    let mut _16: std::option::Option<std::string::String>;

    bb0: {
        _1 = std::option::Option::<bool>::None;
        _2 = std::option::Option::<Vec<std::string::String>>::None;
        _3 = std::option::Option::<config_file::Color>::None;
        _4 = std::option::Option::<std::string::String>::None;
        _5 = std::option::Option::<bool>::None;
        _6 = std::option::Option::<flags::display::Display>::None;
        _7 = std::option::Option::<config_file::Icons>::None;
        _8 = std::option::Option::<Vec<std::string::String>>::None;
        _9 = std::option::Option::<bool>::None;
        _10 = std::option::Option::<layout::Layout>::None;
        _11 = std::option::Option::<config_file::Recursion>::None;
        _12 = std::option::Option::<SizeFlag>::None;
        _13 = std::option::Option::<config_file::Sorting>::None;
        _14 = std::option::Option::<bool>::None;
        _15 = std::option::Option::<bool>::None;
        _16 = std::option::Option::<std::string::String>::None;
        _0 = Config { classic: move _1, blocks: move _2, color: move _3, date: move _4, dereference: move _5, display: move _6, icons: move _7, ignore_globs: move _8, indicators: move _9, layout: move _10, recursion: move _11, size: move _12, sorting: move _13, no_symlink: move _14, total_size: move _15, symlink_arrow: move _16 };
        return;
    }
}

fn config_file::<impl at src/config_file.rs:71:1: 71:12>::from_file(_1: std::string::String) -> std::option::Option<Config> {
    debug file => _1;
    let mut _0: std::option::Option<config_file::Config>;
    let mut _2: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _3: &std::string::String;
    let mut _4: isize;
    let _5: std::vec::Vec<u8>;
    let mut _6: std::result::Result<config_file::Config, serde_yaml::Error>;
    let _7: &str;
    let _8: &std::borrow::Cow<'_, str>;
    let _9: std::borrow::Cow<'_, str>;
    let _10: &[u8];
    let _11: &std::vec::Vec<u8>;
    let mut _12: isize;
    let mut _17: &std::io::Stderr;
    let mut _19: &mut std::io::StderrLock<'_>;
    let _20: &[u8];
    let mut _21: &std::string::String;
    let _22: std::string::String;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let _30: &std::string::String;
    let _31: std::string::String;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let _36: &[core::fmt::rt::Argument<'_>; 2];
    let _37: [core::fmt::rt::Argument<'_>; 2];
    let mut _38: core::fmt::rt::Argument<'_>;
    let _39: &&std::string::String;
    let _40: &std::string::String;
    let mut _41: core::fmt::rt::Argument<'_>;
    let _42: &serde_yaml::Error;
    let mut _43: bool;
    let mut _44: &std::result::Result<(), std::io::Error>;
    let _45: !;
    let _46: std::io::Error;
    let mut _47: std::io::ErrorKind;
    let mut _48: &std::io::Error;
    let mut _49: isize;
    let mut _52: &std::io::Stderr;
    let mut _54: &mut std::io::StderrLock<'_>;
    let _55: &[u8];
    let mut _56: &std::string::String;
    let _57: std::string::String;
    let mut _59: std::fmt::Arguments<'_>;
    let mut _60: &[&str];
    let mut _61: &[core::fmt::rt::Argument<'_>];
    let _62: &[core::fmt::rt::Argument<'_>; 1];
    let _63: [core::fmt::rt::Argument<'_>; 1];
    let mut _64: core::fmt::rt::Argument<'_>;
    let _65: &std::string::String;
    let _66: std::string::String;
    let mut _68: std::fmt::Arguments<'_>;
    let mut _69: &[&str];
    let mut _70: &[core::fmt::rt::Argument<'_>];
    let _71: &[core::fmt::rt::Argument<'_>; 2];
    let _72: [core::fmt::rt::Argument<'_>; 2];
    let mut _73: core::fmt::rt::Argument<'_>;
    let _74: &&std::string::String;
    let _75: &std::string::String;
    let mut _76: core::fmt::rt::Argument<'_>;
    let _77: &std::io::Error;
    let mut _78: bool;
    let mut _79: &std::result::Result<(), std::io::Error>;
    let _80: !;
    scope 1 {
        debug f => _5;
        let _13: config_file::Config;
        let _14: serde_yaml::Error;
        scope 2 {
            debug c => _13;
        }
        scope 3 {
            debug e => _14;
            let _15: std::io::Stderr;
            scope 4 {
                debug stderr => _15;
                let mut _16: std::io::StderrLock<'_>;
                scope 5 {
                    debug handle => _16;
                    let _18: std::result::Result<(), std::io::Error>;
                    let _23: std::string::String;
                    let _32: std::string::String;
                    let mut _83: &[&str; 3];
                    let mut _84: &[&str; 2];
                    scope 6 {
                        debug res => _18;
                    }
                    scope 7 {
                        debug res => _23;
                    }
                    scope 8 {
                        debug res => _32;
                    }
                }
            }
        }
    }
    scope 9 {
        debug e => _46;
        let _50: std::io::Stderr;
        scope 10 {
            debug stderr => _50;
            let mut _51: std::io::StderrLock<'_>;
            scope 11 {
                debug handle => _51;
                let _53: std::result::Result<(), std::io::Error>;
                let _58: std::string::String;
                let _67: std::string::String;
                let mut _81: &[&str; 3];
                let mut _82: &[&str; 2];
                scope 12 {
                    debug res => _53;
                }
                scope 13 {
                    debug res => _58;
                }
                scope 14 {
                    debug res => _67;
                }
            }
        }
    }

    bb0: {
        _3 = &_1;
        _2 = std::fs::read::<&std::string::String>(move _3) -> [return: bb1, unwind: bb65];
    }

    bb1: {
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _46 = move ((_2 as Err).0: std::io::Error);
        _48 = &_46;
        _47 = std::io::Error::kind(move _48) -> [return: bb30, unwind: bb56];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_2 as Ok).0: std::vec::Vec<u8>);
        _11 = &_5;
        _10 = <Vec<u8> as Deref>::deref(_11) -> [return: bb5, unwind: bb64];
    }

    bb5: {
        _9 = std::string::String::from_utf8_lossy(_10) -> [return: bb6, unwind: bb64];
    }

    bb6: {
        _8 = &_9;
        _7 = <Cow<'_, str> as Deref>::deref(_8) -> [return: bb7, unwind: bb63];
    }

    bb7: {
        _6 = Config::from_yaml(_7) -> [return: bb8, unwind: bb63];
    }

    bb8: {
        _12 = discriminant(_6);
        switchInt(move _12) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _14 = move ((_6 as Err).0: serde_yaml::Error);
        _15 = stderr() -> [return: bb11, unwind: bb62];
    }

    bb10: {
        _13 = move ((_6 as Ok).0: config_file::Config);
        _0 = std::option::Option::<Config>::Some(move _13);
        goto -> bb67;
    }

    bb11: {
        _17 = &_15;
        _16 = Stderr::lock(move _17) -> [return: bb12, unwind: bb62];
    }

    bb12: {
        _19 = &mut _16;
        _84 = const _;
        _25 = _84 as &[&str] (PointerCoercion(Unsize));
        _83 = const _;
        _34 = _83 as &[&str] (PointerCoercion(Unsize));
        _40 = &_1;
        _39 = &_40;
        _38 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_39) -> [return: bb13, unwind: bb61];
    }

    bb13: {
        _42 = &_14;
        _41 = core::fmt::rt::Argument::<'_>::new_display::<serde_yaml::Error>(_42) -> [return: bb14, unwind: bb61];
    }

    bb14: {
        _37 = [move _38, move _41];
        _36 = &_37;
        _35 = _36 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _33 = Arguments::<'_>::new_v1(move _34, move _35) -> [return: bb15, unwind: bb61];
    }

    bb15: {
        _32 = std::fmt::format(move _33) -> [return: bb16, unwind: bb61];
    }

    bb16: {
        _31 = move _32;
        _30 = &_31;
        _29 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_30) -> [return: bb17, unwind: bb60];
    }

    bb17: {
        _28 = [move _29];
        _27 = &_28;
        _26 = _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _26) -> [return: bb18, unwind: bb60];
    }

    bb18: {
        _23 = std::fmt::format(move _24) -> [return: bb19, unwind: bb60];
    }

    bb19: {
        drop(_31) -> [return: bb20, unwind: bb59];
    }

    bb20: {
        _22 = move _23;
        _21 = &_22;
        _20 = std::string::String::as_bytes(move _21) -> [return: bb21, unwind: bb58];
    }

    bb21: {
        _18 = <StderrLock<'_> as std::io::Write>::write_all(move _19, _20) -> [return: bb22, unwind: bb58];
    }

    bb22: {
        drop(_22) -> [return: bb23, unwind: bb57];
    }

    bb23: {
        _44 = &_18;
        _43 = Result::<(), std::io::Error>::is_err(move _44) -> [return: bb24, unwind: bb57];
    }

    bb24: {
        switchInt(move _43) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _45 = std::process::exit(const 0_i32) -> bb57;
    }

    bb26: {
        drop(_18) -> [return: bb27, unwind: bb61];
    }

    bb27: {
        drop(_16) -> [return: bb28, unwind: bb62];
    }

    bb28: {
        _0 = std::option::Option::<Config>::None;
        drop(_14) -> [return: bb67, unwind: bb63];
    }

    bb29: {
        drop(_5) -> [return: bb68, unwind: bb65];
    }

    bb30: {
        _49 = discriminant(_47);
        switchInt(move _49) -> [0: bb49, otherwise: bb31];
    }

    bb31: {
        _50 = stderr() -> [return: bb32, unwind: bb56];
    }

    bb32: {
        _52 = &_50;
        _51 = Stderr::lock(move _52) -> [return: bb33, unwind: bb56];
    }

    bb33: {
        _54 = &mut _51;
        _82 = const _;
        _60 = _82 as &[&str] (PointerCoercion(Unsize));
        _81 = const _;
        _69 = _81 as &[&str] (PointerCoercion(Unsize));
        _75 = &_1;
        _74 = &_75;
        _73 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_74) -> [return: bb34, unwind: bb55];
    }

    bb34: {
        _77 = &_46;
        _76 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_77) -> [return: bb35, unwind: bb55];
    }

    bb35: {
        _72 = [move _73, move _76];
        _71 = &_72;
        _70 = _71 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _68 = Arguments::<'_>::new_v1(move _69, move _70) -> [return: bb36, unwind: bb55];
    }

    bb36: {
        _67 = std::fmt::format(move _68) -> [return: bb37, unwind: bb55];
    }

    bb37: {
        _66 = move _67;
        _65 = &_66;
        _64 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_65) -> [return: bb38, unwind: bb54];
    }

    bb38: {
        _63 = [move _64];
        _62 = &_63;
        _61 = _62 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _59 = Arguments::<'_>::new_v1(move _60, move _61) -> [return: bb39, unwind: bb54];
    }

    bb39: {
        _58 = std::fmt::format(move _59) -> [return: bb40, unwind: bb54];
    }

    bb40: {
        drop(_66) -> [return: bb41, unwind: bb53];
    }

    bb41: {
        _57 = move _58;
        _56 = &_57;
        _55 = std::string::String::as_bytes(move _56) -> [return: bb42, unwind: bb52];
    }

    bb42: {
        _53 = <StderrLock<'_> as std::io::Write>::write_all(move _54, _55) -> [return: bb43, unwind: bb52];
    }

    bb43: {
        drop(_57) -> [return: bb44, unwind: bb51];
    }

    bb44: {
        _79 = &_53;
        _78 = Result::<(), std::io::Error>::is_err(move _79) -> [return: bb45, unwind: bb51];
    }

    bb45: {
        switchInt(move _78) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _80 = std::process::exit(const 0_i32) -> bb51;
    }

    bb47: {
        drop(_53) -> [return: bb48, unwind: bb55];
    }

    bb48: {
        drop(_51) -> [return: bb49, unwind: bb56];
    }

    bb49: {
        _0 = std::option::Option::<Config>::None;
        drop(_46) -> [return: bb68, unwind: bb65];
    }

    bb50: {
        return;
    }

    bb51 (cleanup): {
        drop(_53) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_57) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_58) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_66) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_51) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_46) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_18) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_22) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_23) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_31) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_16) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_14) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_9) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_5) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_1) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }

    bb67: {
        drop(_9) -> [return: bb29, unwind: bb64];
    }

    bb68: {
        drop(_1) -> [return: bb50, unwind continue];
    }
}

promoted[0] in config_file::<impl at src/config_file.rs:71:1: 71:12>::from_file: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Can not open config file ", const ": ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[1] in config_file::<impl at src/config_file.rs:71:1: 71:12>::from_file: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in config_file::<impl at src/config_file.rs:71:1: 71:12>::from_file: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Configuration file ", const " format error, ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[3] in config_file::<impl at src/config_file.rs:71:1: 71:12>::from_file: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

fn config_file::<impl at src/config_file.rs:71:1: 71:12>::from_yaml(_1: &str) -> Result<Config, serde_yaml::Error> {
    debug yaml => _1;
    let mut _0: std::result::Result<config_file::Config, serde_yaml::Error>;

    bb0: {
        _0 = serde_yaml::from_str::<Config>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config_file::<impl at src/config_file.rs:71:1: 71:12>::config_file_path() -> std::option::Option<PathBuf> {
    let mut _0: std::option::Option<std::path::PathBuf>;
    let mut _1: std::result::Result<xdg::BaseDirectories, xdg::BaseDirectoriesError>;
    let mut _2: isize;
    let _3: xdg::BaseDirectories;
    let mut _4: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _5: &xdg::BaseDirectories;
    let mut _6: std::string::String;
    let mut _7: &[&str];
    let _8: &str;
    let mut _9: isize;
    let _11: xdg::BaseDirectoriesError;
    let mut _14: &std::io::Stderr;
    let mut _16: &mut std::io::StderrLock<'_>;
    let _17: &[u8];
    let mut _18: &std::string::String;
    let _19: std::string::String;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &std::string::String;
    let _28: std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &xdg::BaseDirectoriesError;
    let mut _37: bool;
    let mut _38: &std::result::Result<(), std::io::Error>;
    let _39: !;
    let mut _43: isize;
    scope 1 {
        debug p => _3;
        scope 2 {
            debug p => _10;
            let _10: std::path::PathBuf;
            let mut _42: &[&str; 2];
        }
    }
    scope 3 {
        debug e => _11;
        let _12: std::io::Stderr;
        scope 4 {
            debug stderr => _12;
            let mut _13: std::io::StderrLock<'_>;
            scope 5 {
                debug handle => _13;
                let _15: std::result::Result<(), std::io::Error>;
                let _20: std::string::String;
                let _29: std::string::String;
                let mut _40: &[&str; 2];
                let mut _41: &[&str; 2];
                scope 6 {
                    debug res => _15;
                }
                scope 7 {
                    debug res => _20;
                }
                scope 8 {
                    debug res => _29;
                }
            }
        }
    }

    bb0: {
        _1 = BaseDirectories::with_prefix::<&str>(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _11 = move ((_1 as Err).0: xdg::BaseDirectoriesError);
        _12 = stderr() -> [return: bb10, unwind: bb33];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _3 = move ((_1 as Ok).0: xdg::BaseDirectories);
        _5 = &_3;
        _42 = const _;
        _7 = _42 as &[&str] (PointerCoercion(Unsize));
        _8 = const ".";
        _6 = slice::<impl [&str]>::join::<&str>(move _7, _8) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        _4 = BaseDirectories::place_config_file::<std::string::String>(move _5, move _6) -> [return: bb6, unwind: bb34];
    }

    bb6: {
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb7, otherwise: bb8];
    }

    bb7: {
        _10 = move ((_4 as Ok).0: std::path::PathBuf);
        _0 = std::option::Option::<PathBuf>::Some(move _10);
        _43 = discriminant(_4);
        switchInt(move _43) -> [0: bb36, otherwise: bb37];
    }

    bb8: {
        drop(_4) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        drop(_3) -> [return: bb35, unwind continue];
    }

    bb10: {
        _14 = &_12;
        _13 = Stderr::lock(move _14) -> [return: bb11, unwind: bb33];
    }

    bb11: {
        _16 = &mut _13;
        _41 = const _;
        _22 = _41 as &[&str] (PointerCoercion(Unsize));
        _40 = const _;
        _31 = _40 as &[&str] (PointerCoercion(Unsize));
        _36 = &_11;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<BaseDirectoriesError>(_36) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _29 = std::fmt::format(move _30) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _28 = move _29;
        _27 = &_28;
        _26 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_27) -> [return: bb15, unwind: bb31];
    }

    bb15: {
        _25 = [move _26];
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _23) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _20 = std::fmt::format(move _21) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        drop(_28) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        _19 = move _20;
        _18 = &_19;
        _17 = std::string::String::as_bytes(move _18) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        _15 = <StderrLock<'_> as std::io::Write>::write_all(move _16, _17) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        drop(_19) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _38 = &_15;
        _37 = Result::<(), std::io::Error>::is_err(move _38) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        switchInt(move _37) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _39 = std::process::exit(const 0_i32) -> bb28;
    }

    bb24: {
        drop(_15) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        drop(_13) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        drop(_11) -> [return: bb35, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_15) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_19) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_20) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_28) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_13) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_11) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_3) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb35: {
        _0 = std::option::Option::<PathBuf>::None;
        goto -> bb27;
    }

    bb36: {
        drop(_3) -> [return: bb27, unwind continue];
    }

    bb37: {
        drop(_4) -> [return: bb36, unwind: bb34];
    }

    bb38 (cleanup): {
        resume;
    }
}

promoted[0] in config_file::<impl at src/config_file.rs:71:1: 71:12>::config_file_path: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Can not open config file: ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[1] in config_file::<impl at src/config_file.rs:71:1: 71:12>::config_file_path: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in config_file::<impl at src/config_file.rs:71:1: 71:12>::config_file_path: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const _;
        _2 = &(*_3);
        _1 = [const _, move _2];
        _0 = &_1;
        return;
    }
}

fn config_file::<impl at src/config_file.rs:151:1: 151:24>::default() -> Config {
    let mut _0: config_file::Config;
    let mut _1: std::option::Option<std::path::PathBuf>;
    let mut _2: isize;
    let mut _4: std::option::Option<config_file::Config>;
    let mut _5: std::string::String;
    let mut _6: &std::borrow::Cow<'_, str>;
    let _7: std::borrow::Cow<'_, str>;
    let _8: &std::path::Path;
    let mut _9: &std::path::PathBuf;
    let mut _10: isize;
    let mut _12: std::result::Result<config_file::Config, serde_yaml::Error>;
    let _13: &str;
    let mut _14: bool;
    let mut _15: isize;
    scope 1 {
        debug p => _3;
        let _3: std::path::PathBuf;
        scope 2 {
            debug c => _11;
            let _11: config_file::Config;
        }
    }

    bb0: {
        _14 = const false;
        _14 = const true;
        _1 = Config::config_file_path() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb2, otherwise: bb21];
    }

    bb2: {
        _14 = const false;
        _3 = move ((_1 as Some).0: std::path::PathBuf);
        _9 = &_3;
        _8 = <PathBuf as Deref>::deref(move _9) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _7 = Path::to_string_lossy(_8) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _6 = &_7;
        _5 = <Cow<'_, str> as ToString>::to_string(move _6) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        _4 = Config::from_file(move _5) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        _10 = discriminant(_4);
        switchInt(move _10) -> [1: bb7, otherwise: bb8];
    }

    bb7: {
        _11 = move ((_4 as Some).0: config_file::Config);
        _0 = move _11;
        drop(_7) -> [return: bb12, unwind: bb16];
    }

    bb8: {
        drop(_4) -> [return: bb9, unwind: bb15];
    }

    bb9: {
        drop(_7) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        drop(_3) -> [return: bb21, unwind continue];
    }

    bb11: {
        _0 = Result::<Config, serde_yaml::Error>::unwrap(move _12) -> [return: bb14, unwind continue];
    }

    bb12: {
        drop(_3) -> [return: bb13, unwind continue];
    }

    bb13: {
        _14 = const false;
        goto -> bb14;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_7) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18: {
        _14 = const false;
        _13 = const _;
        _12 = Config::from_yaml(_13) -> [return: bb11, unwind continue];
    }

    bb19: {
        switchInt(_14) -> [0: bb18, otherwise: bb20];
    }

    bb20: {
        drop(((_1 as Some).0: std::path::PathBuf)) -> [return: bb18, unwind continue];
    }

    bb21: {
        _15 = discriminant(_1);
        switchInt(move _15) -> [1: bb19, otherwise: bb18];
    }
}

const DEFAULT_CONFIG: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "---\n# == Classic ==\n# This is a shorthand to override some of the options to be backwards compatible\n# with `ls`. It affects the \"color\"->\"when\", \"sorting\"->\"dir-grouping\", \"date\"\n# and \"icons\"->\"when\" options.\n# Possible values: false, true\nclassic: false\n\n# == Blocks ==\n# This specifies the columns and their order when using the long and the tree\n# layout.\n# Possible values: permission, user, group, size, size_value, date, name, inode\nblocks:\n  - permission\n  - user\n  - group\n  - size\n  - date\n  - name\n\n# == Color ==\n# This has various color options. (Will be expanded in the future.)\ncolor:\n  # When to colorize the output.\n  # When \"classic\" is set, this is set to \"never\".\n  # Possible values: never, auto, always\n  when: auto\n\n# == Date ==\n# This specifies the date format for the date column. The freeform format\n# accepts an strftime like string.\n# When \"classic\" is set, this is set to \"date\".\n# Possible values: date, relative, +<date_format>\n# date: date\n\n# == Dereference ==\n# Whether to dereference symbolic links.\n# Possible values: false, true\ndereference: false\n\n# == Display ==\n# What items to display. Do not specify this for the default behavior.\n# Possible values: all, almost-all, directory-only\n# display: all\n\n# == Icons ==\nicons:\n  # When to use icons.\n  # When \"classic\" is set, this is set to \"never\".\n  # Possible values: always, auto, never\n  when: auto\n  # Which icon theme to use.\n  # Possible values: fancy, unicode\n  theme: fancy\n  # The string between the icons and the name.\n  # Possible values: any string (eg: \" |\")\n  separator: \" \"\n\n# == Ignore Globs ==\n# A list of globs to ignore when listing.\n# ignore-globs:\n#   - .git\n\n# == Indicators ==\n# Whether to add indicator characters to certain listed files.\n# Possible values: false, true\nindicators: false\n\n# == Layout ==\n# Which layout to use. \"oneline\" might be a bit confusing here and should be\n# called \"one-per-line\". It might be changed in the future.\n# Possible values: grid, tree, oneline\nlayout: grid\n\n# == Recursion ==\nrecursion:\n  # Whether to enable recursion.\n  # Possible values: false, true\n  enabled: false\n  # How deep the recursion should go. This has to be a positive integer. Leave\n  # it unspecified for (virtually) infinite.\n  # depth: 3\n\n# == Size ==\n# Specifies the format of the size column.\n# Possible values: default, short, bytes\nsize: default\n\n# == Sorting ==\nsorting:\n  # Specify what to sort by.\n  # Possible values: extension, name, time, size, version\n  column: name\n  # Whether to reverse the sorting.\n  # Possible values: false, true\n  reverse: false\n  # Whether to group directories together and where.\n  # When \"classic\" is set, this is set to \"none\".\n  # Possible values: first, last, none\n  dir-grouping: none\n\n# == No Symlink ==\n# Whether to omit showing symlink targets\n# Possible values: false, true\nno-symlink: false\n\n# == Total size ==\n# Whether to display the total size of directories.\n# Possible values: false, true\ntotal-size: false\n\n# == Symlink arrow ==\n# Specifies how the symlink arrow display, chars in both ascii and utf8\nsymlink-arrow: ⇒\n";
        return;
    }
}

fn core::<impl at src/core.rs:25:1: 25:10>::new(_1: Flags) -> Core {
    debug flags => _1;
    let mut _0: core::Core;
    let _2: bool;
    let mut _3: i32;
    let mut _4: i32;
    let mut _5: &std::io::Stdout;
    let _6: std::io::Stdout;
    let mut _9: &flags::Flags;
    let mut _11: (bool, flags::color::ColorOption);
    let mut _12: bool;
    let mut _13: flags::color::ColorOption;
    let mut _14: isize;
    let mut _16: (bool, flags::icons::IconOption, flags::icons::IconTheme);
    let mut _17: flags::icons::IconOption;
    let mut _18: flags::icons::IconTheme;
    let mut _19: isize;
    let mut _20: isize;
    let mut _22: &std::string::String;
    let mut _23: flags::layout::Layout;
    let _25: &flags::Flags;
    let mut _26: flags::Flags;
    let mut _27: color::Colors;
    let mut _28: color::Theme;
    let mut _29: icon::Icons;
    let mut _30: icon::Theme;
    let mut _31: std::string::String;
    let mut _32: std::vec::Vec<(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _33: bool;
    let mut _34: bool;
    scope 1 {
        debug tty_available => _2;
        let _7: bool;
        scope 3 {
            debug console_color_ok => const true;
            let mut _8: flags::Flags;
            scope 4 {
                debug inner_flags => _8;
                let _10: color::Theme;
                scope 5 {
                    debug color_theme => _10;
                    let _15: icon::Theme;
                    scope 6 {
                        debug icon_theme => _15;
                        let _21: std::string::String;
                        scope 7 {
                            debug icon_separator => _21;
                            let _24: std::vec::Vec<(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
                            scope 8 {
                                debug sorters => _24;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _34 = const false;
        _33 = const false;
        _34 = const true;
        _6 = stdout() -> [return: bb1, unwind: bb34];
    }

    bb1: {
        _5 = &_6;
        _4 = <Stdout as AsRawFd>::as_raw_fd(move _5) -> [return: bb2, unwind: bb34];
    }

    bb2: {
        _3 = isatty(move _4) -> [return: bb3, unwind: bb34];
    }

    bb3: {
        _2 = Eq(move _3, const 1_i32);
        _7 = const true;
        _9 = &_1;
        _8 = <Flags as Clone>::clone(move _9) -> [return: bb4, unwind: bb34];
    }

    bb4: {
        switchInt(_2) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = _7;
        goto -> bb7;
    }

    bb6: {
        _12 = const false;
        goto -> bb7;
    }

    bb7: {
        _13 = ((_1.1: flags::color::Color).0: flags::color::ColorOption);
        _11 = (move _12, move _13);
        _14 = discriminant((_11.1: flags::color::ColorOption));
        switchInt(move _14) -> [1: bb9, 2: bb10, otherwise: bb8];
    }

    bb8: {
        _10 = color::Theme::Default;
        goto -> bb11;
    }

    bb9: {
        switchInt((_11.0: bool)) -> [0: bb10, otherwise: bb8];
    }

    bb10: {
        _10 = color::Theme::NoColor;
        goto -> bb11;
    }

    bb11: {
        _17 = ((_1.6: flags::icons::Icons).0: flags::icons::IconOption);
        _18 = ((_1.6: flags::icons::Icons).1: flags::icons::IconTheme);
        _16 = (_2, move _17, move _18);
        _20 = discriminant((_16.1: flags::icons::IconOption));
        switchInt(move _20) -> [1: bb13, 2: bb16, otherwise: bb12];
    }

    bb12: {
        _19 = discriminant((_16.2: flags::icons::IconTheme));
        switchInt(move _19) -> [0: bb14, 1: bb17, otherwise: bb15];
    }

    bb13: {
        switchInt((_16.0: bool)) -> [0: bb16, otherwise: bb12];
    }

    bb14: {
        _15 = icon::Theme::Unicode;
        goto -> bb18;
    }

    bb15: {
        unreachable;
    }

    bb16: {
        _15 = icon::Theme::NoIcon;
        goto -> bb18;
    }

    bb17: {
        _15 = icon::Theme::Fancy;
        goto -> bb18;
    }

    bb18: {
        _22 = &(((_1.6: flags::icons::Icons).2: flags::icons::IconSeparator).0: std::string::String);
        _21 = <std::string::String as Clone>::clone(move _22) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        _33 = const true;
        switchInt(_2) -> [0: bb20, otherwise: bb21];
    }

    bb20: {
        _23 = layout::Layout::OneLine;
        (_8.8: flags::layout::Layout) = move _23;
        goto -> bb21;
    }

    bb21: {
        _25 = &_1;
        _24 = assemble_sorters(_25) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _34 = const false;
        _26 = move _1;
        _28 = _10;
        _27 = Colors::new(move _28) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        _30 = _15;
        _33 = const false;
        _31 = move _21;
        _29 = icon::Icons::new(move _30, move _31) -> [return: bb24, unwind: bb26];
    }

    bb24: {
        _32 = move _24;
        _0 = Core { flags: move _26, icons: move _29, colors: move _27, sorters: move _32 };
        _33 = const false;
        drop(_8) -> [return: bb25, unwind: bb34];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_27) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_26) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_24) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_8) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }

    bb31 (cleanup): {
        drop(_21) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_33) -> [0: bb29, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_1) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_34) -> [0: bb30, otherwise: bb33];
    }
}

fn core::<impl at src/core.rs:25:1: 25:10>::run(_1: Core, _2: Vec<PathBuf>) -> () {
    debug self => _1;
    debug paths => _2;
    let mut _0: ();
    let mut _3: std::vec::Vec<meta::Meta>;
    let mut _4: &core::Core;
    let _5: ();
    let mut _6: &core::Core;
    let mut _7: &mut std::vec::Vec<meta::Meta>;
    let mut _8: &core::Core;
    let _9: &[meta::Meta];
    let _10: &std::vec::Vec<meta::Meta>;
    scope 1 {
        debug meta_list => _3;
    }

    bb0: {
        _4 = &_1;
        _3 = Core::fetch(move _4, move _2) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _6 = &_1;
        _7 = &mut _3;
        _5 = Core::sort(move _6, _7) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _8 = &_1;
        _10 = &_3;
        _9 = <Vec<Meta> as Deref>::deref(_10) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _0 = Core::display(move _8, _9) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_3) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_1) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_3) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn core::<impl at src/core.rs:25:1: 25:10>::fetch(_1: &Core, _2: Vec<PathBuf>) -> Vec<Meta> {
    debug self => _1;
    debug paths => _2;
    let mut _0: std::vec::Vec<meta::Meta>;
    let mut _3: std::vec::Vec<meta::Meta>;
    let mut _4: usize;
    let mut _5: &std::vec::Vec<std::path::PathBuf>;
    let mut _7: isize;
    let mut _8: bool;
    let mut _9: std::vec::IntoIter<std::path::PathBuf>;
    let mut _10: std::vec::Vec<std::path::PathBuf>;
    let mut _12: std::option::Option<std::path::PathBuf>;
    let mut _13: &mut std::vec::IntoIter<std::path::PathBuf>;
    let mut _14: isize;
    let mut _17: std::result::Result<meta::Meta, std::io::Error>;
    let _18: &std::path::Path;
    let _19: &std::path::PathBuf;
    let mut _20: bool;
    let mut _21: isize;
    let mut _26: &std::io::Stderr;
    let mut _28: &mut std::io::StderrLock<'_>;
    let _29: &[u8];
    let mut _30: &std::string::String;
    let _31: std::string::String;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: [core::fmt::rt::Argument<'_>; 1];
    let mut _38: core::fmt::rt::Argument<'_>;
    let _39: &std::string::String;
    let _40: std::string::String;
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let _45: &[core::fmt::rt::Argument<'_>; 2];
    let _46: [core::fmt::rt::Argument<'_>; 2];
    let mut _47: core::fmt::rt::Argument<'_>;
    let _48: &std::path::Display<'_>;
    let _49: std::path::Display<'_>;
    let _50: &std::path::Path;
    let mut _51: &std::path::PathBuf;
    let mut _52: core::fmt::rt::Argument<'_>;
    let _53: &std::io::Error;
    let mut _54: bool;
    let mut _55: &std::result::Result<(), std::io::Error>;
    let _56: !;
    let mut _58: bool;
    let mut _59: &flags::layout::Layout;
    let mut _60: &flags::display::Display;
    let mut _61: bool;
    let mut _62: std::result::Result<std::option::Option<std::vec::Vec<meta::Meta>>, std::io::Error>;
    let mut _63: &meta::Meta;
    let mut _64: usize;
    let _65: &flags::Flags;
    let mut _66: isize;
    let _68: ();
    let mut _69: &mut std::vec::Vec<meta::Meta>;
    let mut _70: meta::Meta;
    let mut _74: &std::io::Stderr;
    let mut _76: &mut std::io::StderrLock<'_>;
    let _77: &[u8];
    let mut _78: &std::string::String;
    let _79: std::string::String;
    let mut _81: std::fmt::Arguments<'_>;
    let mut _82: &[&str];
    let mut _83: &[core::fmt::rt::Argument<'_>];
    let _84: &[core::fmt::rt::Argument<'_>; 1];
    let _85: [core::fmt::rt::Argument<'_>; 1];
    let mut _86: core::fmt::rt::Argument<'_>;
    let _87: &std::string::String;
    let _88: std::string::String;
    let mut _90: std::fmt::Arguments<'_>;
    let mut _91: &[&str];
    let mut _92: &[core::fmt::rt::Argument<'_>];
    let _93: &[core::fmt::rt::Argument<'_>; 2];
    let _94: [core::fmt::rt::Argument<'_>; 2];
    let mut _95: core::fmt::rt::Argument<'_>;
    let _96: &std::path::Display<'_>;
    let _97: std::path::Display<'_>;
    let _98: &std::path::Path;
    let mut _99: &std::path::PathBuf;
    let mut _100: core::fmt::rt::Argument<'_>;
    let _101: &std::io::Error;
    let mut _102: bool;
    let mut _103: &std::result::Result<(), std::io::Error>;
    let _104: !;
    let _105: ();
    let mut _106: &mut std::vec::Vec<meta::Meta>;
    let mut _107: meta::Meta;
    let mut _108: bool;
    let mut _109: &mut std::slice::IterMut<'_, meta::Meta>;
    let mut _110: &mut std::slice::IterMut<'_, meta::Meta>;
    let mut _111: std::slice::IterMut<'_, meta::Meta>;
    let mut _112: &mut [meta::Meta];
    let mut _113: &mut std::vec::Vec<meta::Meta>;
    let mut _115: std::option::Option<&mut meta::Meta>;
    let mut _116: &mut &mut std::slice::IterMut<'_, meta::Meta>;
    let mut _117: isize;
    let _119: ();
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: bool;
    scope 1 {
        debug meta_list => _3;
        let _6: usize;
        scope 2 {
            debug depth => _6;
            let mut _11: std::vec::IntoIter<std::path::PathBuf>;
            let mut _114: &mut std::slice::IterMut<'_, meta::Meta>;
            scope 3 {
                debug iter => _11;
                let _15: std::path::PathBuf;
                scope 4 {
                    debug path => _15;
                    let mut _16: meta::Meta;
                    let _22: meta::Meta;
                    let _23: std::io::Error;
                    scope 5 {
                        debug meta => _16;
                        let _57: bool;
                        let mut _124: &flags::display::Display;
                        let mut _125: &flags::layout::Layout;
                        scope 13 {
                            debug recurse => _57;
                            let _67: std::option::Option<std::vec::Vec<meta::Meta>>;
                            let _71: std::io::Error;
                            scope 14 {
                                debug content => _67;
                            }
                            scope 15 {
                                debug err => _71;
                                let _72: std::io::Stderr;
                                scope 16 {
                                    debug stderr => _72;
                                    let mut _73: std::io::StderrLock<'_>;
                                    scope 17 {
                                        debug handle => _73;
                                        let _75: std::result::Result<(), std::io::Error>;
                                        let _80: std::string::String;
                                        let _89: std::string::String;
                                        let mut _122: &[&str; 3];
                                        let mut _123: &[&str; 2];
                                        scope 18 {
                                            debug res => _75;
                                        }
                                        scope 19 {
                                            debug res => _80;
                                        }
                                        scope 20 {
                                            debug res => _89;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 6 {
                        debug meta => _22;
                    }
                    scope 7 {
                        debug err => _23;
                        let _24: std::io::Stderr;
                        scope 8 {
                            debug stderr => _24;
                            let mut _25: std::io::StderrLock<'_>;
                            scope 9 {
                                debug handle => _25;
                                let _27: std::result::Result<(), std::io::Error>;
                                let _32: std::string::String;
                                let _41: std::string::String;
                                let mut _120: &[&str; 3];
                                let mut _121: &[&str; 2];
                                scope 10 {
                                    debug res => _27;
                                }
                                scope 11 {
                                    debug res => _32;
                                }
                                scope 12 {
                                    debug res => _41;
                                }
                            }
                        }
                    }
                }
            }
            scope 21 {
                debug iter => _114;
                let _118: &mut meta::Meta;
                scope 22 {
                    debug meta => _118;
                }
            }
        }
    }

    bb0: {
        _128 = const false;
        _126 = const false;
        _127 = const false;
        _128 = const true;
        _5 = &_2;
        _4 = Vec::<PathBuf>::len(move _5) -> [return: bb1, unwind: bb108];
    }

    bb1: {
        _3 = Vec::<Meta>::with_capacity(move _4) -> [return: bb2, unwind: bb108];
    }

    bb2: {
        _7 = discriminant((((*_1).0: flags::Flags).8: flags::layout::Layout));
        switchInt(move _7) -> [1: bb3, otherwise: bb4];
    }

    bb3: {
        _6 = ((((*_1).0: flags::Flags).10: flags::recursion::Recursion).1: usize);
        goto -> bb7;
    }

    bb4: {
        _8 = ((((*_1).0: flags::Flags).10: flags::recursion::Recursion).0: bool);
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = ((((*_1).0: flags::Flags).10: flags::recursion::Recursion).1: usize);
        goto -> bb7;
    }

    bb6: {
        _6 = const 1_usize;
        goto -> bb7;
    }

    bb7: {
        _128 = const false;
        _10 = move _2;
        _9 = <Vec<PathBuf> as IntoIterator>::into_iter(move _10) -> [return: bb8, unwind: bb95];
    }

    bb8: {
        _11 = move _9;
        goto -> bb9;
    }

    bb9: {
        _13 = &mut _11;
        _12 = <std::vec::IntoIter<PathBuf> as Iterator>::next(_13) -> [return: bb10, unwind: bb94];
    }

    bb10: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb13, 1: bb11, otherwise: bb12];
    }

    bb11: {
        _15 = move ((_12 as Some).0: std::path::PathBuf);
        _19 = &_15;
        _18 = <PathBuf as Deref>::deref(_19) -> [return: bb14, unwind: bb93];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        drop(_11) -> [return: bb72, unwind: bb95];
    }

    bb14: {
        _20 = ((((*_1).0: flags::Flags).3: flags::dereference::Dereference).0: bool);
        _17 = Meta::from_path(_18, move _20) -> [return: bb15, unwind: bb93];
    }

    bb15: {
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb17, 1: bb16, otherwise: bb12];
    }

    bb16: {
        _23 = move ((_17 as Err).0: std::io::Error);
        _24 = stderr() -> [return: bb18, unwind: bb92];
    }

    bb17: {
        _22 = move ((_17 as Ok).0: meta::Meta);
        _126 = const true;
        _127 = const true;
        _16 = move _22;
        _59 = &(((*_1).0: flags::Flags).8: flags::layout::Layout);
        _125 = const _;
        _58 = <layout::Layout as PartialEq>::eq(move _59, _125) -> [return: bb38, unwind: bb106];
    }

    bb18: {
        _26 = &_24;
        _25 = Stderr::lock(move _26) -> [return: bb19, unwind: bb92];
    }

    bb19: {
        _28 = &mut _25;
        _121 = const _;
        _34 = _121 as &[&str] (PointerCoercion(Unsize));
        _120 = const _;
        _43 = _120 as &[&str] (PointerCoercion(Unsize));
        _51 = &_15;
        _50 = <PathBuf as Deref>::deref(move _51) -> [return: bb20, unwind: bb91];
    }

    bb20: {
        _49 = Path::display(_50) -> [return: bb21, unwind: bb91];
    }

    bb21: {
        _48 = &_49;
        _47 = core::fmt::rt::Argument::<'_>::new_display::<std::path::Display<'_>>(_48) -> [return: bb22, unwind: bb91];
    }

    bb22: {
        _53 = &_23;
        _52 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_53) -> [return: bb23, unwind: bb91];
    }

    bb23: {
        _46 = [move _47, move _52];
        _45 = &_46;
        _44 = _45 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _42 = Arguments::<'_>::new_v1(move _43, move _44) -> [return: bb24, unwind: bb91];
    }

    bb24: {
        _41 = std::fmt::format(move _42) -> [return: bb25, unwind: bb91];
    }

    bb25: {
        _40 = move _41;
        _39 = &_40;
        _38 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_39) -> [return: bb26, unwind: bb90];
    }

    bb26: {
        _37 = [move _38];
        _36 = &_37;
        _35 = _36 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _33 = Arguments::<'_>::new_v1(move _34, move _35) -> [return: bb27, unwind: bb90];
    }

    bb27: {
        _32 = std::fmt::format(move _33) -> [return: bb28, unwind: bb90];
    }

    bb28: {
        drop(_40) -> [return: bb29, unwind: bb89];
    }

    bb29: {
        _31 = move _32;
        _30 = &_31;
        _29 = std::string::String::as_bytes(move _30) -> [return: bb30, unwind: bb88];
    }

    bb30: {
        _27 = <StderrLock<'_> as std::io::Write>::write_all(move _28, _29) -> [return: bb31, unwind: bb88];
    }

    bb31: {
        drop(_31) -> [return: bb32, unwind: bb87];
    }

    bb32: {
        _55 = &_27;
        _54 = Result::<(), std::io::Error>::is_err(move _55) -> [return: bb33, unwind: bb87];
    }

    bb33: {
        switchInt(move _54) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _56 = std::process::exit(const 0_i32) -> bb87;
    }

    bb35: {
        drop(_27) -> [return: bb36, unwind: bb91];
    }

    bb36: {
        drop(_25) -> [return: bb37, unwind: bb92];
    }

    bb37: {
        drop(_23) -> [return: bb71, unwind: bb93];
    }

    bb38: {
        switchInt(move _58) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _57 = const true;
        goto -> bb41;
    }

    bb40: {
        _60 = &(((*_1).0: flags::Flags).4: flags::display::Display);
        _124 = const _;
        _57 = <flags::display::Display as PartialEq>::ne(move _60, _124) -> [return: bb109, unwind: bb106];
    }

    bb41: {
        _61 = _57;
        switchInt(move _61) -> [0: bb68, otherwise: bb42];
    }

    bb42: {
        _63 = &_16;
        _64 = _6;
        _65 = &((*_1).0: flags::Flags);
        _62 = Meta::recurse_into(move _63, move _64, _65) -> [return: bb43, unwind: bb106];
    }

    bb43: {
        _66 = discriminant(_62);
        switchInt(move _66) -> [0: bb45, 1: bb44, otherwise: bb12];
    }

    bb44: {
        _71 = move ((_62 as Err).0: std::io::Error);
        _72 = stderr() -> [return: bb48, unwind: bb86];
    }

    bb45: {
        _67 = move ((_62 as Ok).0: std::option::Option<std::vec::Vec<meta::Meta>>);
        drop((_16.11: std::option::Option<std::vec::Vec<meta::Meta>>)) -> [return: bb46, unwind: bb47];
    }

    bb46: {
        _127 = const true;
        (_16.11: std::option::Option<std::vec::Vec<meta::Meta>>) = move _67;
        _69 = &mut _3;
        _126 = const false;
        _127 = const false;
        _70 = move _16;
        _68 = Vec::<Meta>::push(move _69, move _70) -> [return: bb110, unwind: bb106];
    }

    bb47 (cleanup): {
        _127 = const true;
        (_16.11: std::option::Option<std::vec::Vec<meta::Meta>>) = move _67;
        goto -> bb106;
    }

    bb48: {
        _74 = &_72;
        _73 = Stderr::lock(move _74) -> [return: bb49, unwind: bb86];
    }

    bb49: {
        _76 = &mut _73;
        _123 = const _;
        _82 = _123 as &[&str] (PointerCoercion(Unsize));
        _122 = const _;
        _91 = _122 as &[&str] (PointerCoercion(Unsize));
        _99 = &_15;
        _98 = <PathBuf as Deref>::deref(move _99) -> [return: bb50, unwind: bb85];
    }

    bb50: {
        _97 = Path::display(_98) -> [return: bb51, unwind: bb85];
    }

    bb51: {
        _96 = &_97;
        _95 = core::fmt::rt::Argument::<'_>::new_display::<std::path::Display<'_>>(_96) -> [return: bb52, unwind: bb85];
    }

    bb52: {
        _101 = &_71;
        _100 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_101) -> [return: bb53, unwind: bb85];
    }

    bb53: {
        _94 = [move _95, move _100];
        _93 = &_94;
        _92 = _93 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _90 = Arguments::<'_>::new_v1(move _91, move _92) -> [return: bb54, unwind: bb85];
    }

    bb54: {
        _89 = std::fmt::format(move _90) -> [return: bb55, unwind: bb85];
    }

    bb55: {
        _88 = move _89;
        _87 = &_88;
        _86 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_87) -> [return: bb56, unwind: bb84];
    }

    bb56: {
        _85 = [move _86];
        _84 = &_85;
        _83 = _84 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _81 = Arguments::<'_>::new_v1(move _82, move _83) -> [return: bb57, unwind: bb84];
    }

    bb57: {
        _80 = std::fmt::format(move _81) -> [return: bb58, unwind: bb84];
    }

    bb58: {
        drop(_88) -> [return: bb59, unwind: bb83];
    }

    bb59: {
        _79 = move _80;
        _78 = &_79;
        _77 = std::string::String::as_bytes(move _78) -> [return: bb60, unwind: bb82];
    }

    bb60: {
        _75 = <StderrLock<'_> as std::io::Write>::write_all(move _76, _77) -> [return: bb61, unwind: bb82];
    }

    bb61: {
        drop(_79) -> [return: bb62, unwind: bb81];
    }

    bb62: {
        _103 = &_75;
        _102 = Result::<(), std::io::Error>::is_err(move _103) -> [return: bb63, unwind: bb81];
    }

    bb63: {
        switchInt(move _102) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _104 = std::process::exit(const 0_i32) -> bb81;
    }

    bb65: {
        drop(_75) -> [return: bb66, unwind: bb85];
    }

    bb66: {
        drop(_73) -> [return: bb67, unwind: bb86];
    }

    bb67: {
        drop(_71) -> [return: bb70, unwind: bb106];
    }

    bb68: {
        _106 = &mut _3;
        _126 = const false;
        _127 = const false;
        _107 = move _16;
        _105 = Vec::<Meta>::push(move _106, move _107) -> [return: bb111, unwind: bb106];
    }

    bb69: {
        _126 = const false;
        _127 = const false;
        drop(_15) -> [return: bb9, unwind: bb94];
    }

    bb70: {
        drop(_16) -> [return: bb71, unwind: bb93];
    }

    bb71: {
        _126 = const false;
        _127 = const false;
        drop(_15) -> [return: bb9, unwind: bb94];
    }

    bb72: {
        _108 = ((((*_1).0: flags::Flags).13: flags::total_size::TotalSize).0: bool);
        switchInt(move _108) -> [0: bb80, otherwise: bb73];
    }

    bb73: {
        _113 = &mut _3;
        _112 = <Vec<Meta> as DerefMut>::deref_mut(move _113) -> [return: bb74, unwind: bb95];
    }

    bb74: {
        _111 = core::slice::<impl [Meta]>::iter_mut(_112) -> [return: bb75, unwind: bb95];
    }

    bb75: {
        _110 = &mut _111;
        _109 = <&mut std::slice::IterMut<'_, Meta> as IntoIterator>::into_iter(move _110) -> [return: bb76, unwind: bb95];
    }

    bb76: {
        _114 = move _109;
        goto -> bb77;
    }

    bb77: {
        _116 = &mut _114;
        _115 = <&mut std::slice::IterMut<'_, Meta> as Iterator>::next(_116) -> [return: bb78, unwind: bb95];
    }

    bb78: {
        _117 = discriminant(_115);
        switchInt(move _117) -> [0: bb80, 1: bb79, otherwise: bb12];
    }

    bb79: {
        _118 = move ((_115 as Some).0: &mut meta::Meta);
        _119 = Meta::calculate_total_size(_118) -> [return: bb112, unwind: bb95];
    }

    bb80: {
        _0 = move _3;
        return;
    }

    bb81 (cleanup): {
        drop(_75) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_79) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_80) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_88) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_73) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_71) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_27) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_31) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_32) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_40) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_25) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_23) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_15) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_11) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_3) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        resume;
    }

    bb97 (cleanup): {
        switchInt(_127) -> [0: bb93, otherwise: bb98];
    }

    bb98 (cleanup): {
        drop((_16.11: std::option::Option<std::vec::Vec<meta::Meta>>)) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop((_16.7: meta::symlink::SymLink)) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        switchInt(_126) -> [0: bb97, otherwise: bb99];
    }

    bb101 (cleanup): {
        drop((_16.4: meta::owner::Owner)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_126) -> [0: bb100, otherwise: bb101];
    }

    bb103 (cleanup): {
        drop((_16.1: std::path::PathBuf)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        switchInt(_126) -> [0: bb102, otherwise: bb103];
    }

    bb105 (cleanup): {
        drop((_16.0: meta::name::Name)) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        switchInt(_126) -> [0: bb104, otherwise: bb105];
    }

    bb107 (cleanup): {
        drop(_2) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_128) -> [0: bb96, otherwise: bb107];
    }

    bb109: {
        goto -> bb41;
    }

    bb110: {
        goto -> bb69;
    }

    bb111: {
        goto -> bb69;
    }

    bb112: {
        goto -> bb77;
    }
}

promoted[0] in core::<impl at src/core.rs:25:1: 25:10>::fetch: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ": ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[1] in core::<impl at src/core.rs:25:1: 25:10>::fetch: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in core::<impl at src/core.rs:25:1: 25:10>::fetch: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "lsd: ", const ": ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in core::<impl at src/core.rs:25:1: 25:10>::fetch: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in core::<impl at src/core.rs:25:1: 25:10>::fetch: &flags::display::Display = {
    let mut _0: &flags::display::Display;
    let mut _1: flags::display::Display;

    bb0: {
        _1 = flags::display::Display::DirectoryOnly;
        _0 = &_1;
        return;
    }
}

promoted[5] in core::<impl at src/core.rs:25:1: 25:10>::fetch: &layout::Layout = {
    let mut _0: &flags::layout::Layout;
    let mut _1: flags::layout::Layout;

    bb0: {
        _1 = layout::Layout::Tree;
        _0 = &_1;
        return;
    }
}

fn core::<impl at src/core.rs:25:1: 25:10>::sort(_1: &Core, _2: &mut Vec<Meta>) -> () {
    debug self => _1;
    debug metas => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: &mut [meta::Meta];
    let mut _5: {closure@src/core.rs:126:32: 126:38};
    let mut _6: &&core::Core;
    let mut _7: std::slice::IterMut<'_, meta::Meta>;
    let mut _8: std::slice::IterMut<'_, meta::Meta>;
    let mut _9: std::option::Option<&mut meta::Meta>;
    let mut _10: &mut std::slice::IterMut<'_, meta::Meta>;
    let mut _11: isize;
    let mut _13: isize;
    let _15: ();
    let mut _16: &core::Core;
    scope 1 {
        debug iter => _8;
        let _12: &mut meta::Meta;
        scope 2 {
            debug meta => _12;
            scope 3 {
                debug content => _14;
                let _14: &mut std::vec::Vec<meta::Meta>;
            }
        }
    }

    bb0: {
        _4 = <Vec<Meta> as DerefMut>::deref_mut(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_1;
        _5 = {closure@src/core.rs:126:32: 126:38} { self: move _6 };
        _3 = core::slice::<impl [Meta]>::sort_unstable_by::<{closure@src/core.rs:126:32: 126:38}>(_4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = <&mut Vec<Meta> as IntoIterator>::into_iter(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = move _7;
        goto -> bb4;
    }

    bb4: {
        _10 = &mut _8;
        _9 = <std::slice::IterMut<'_, Meta> as Iterator>::next(_10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _12 = move ((_9 as Some).0: &mut meta::Meta);
        _13 = discriminant(((*_12).11: std::option::Option<std::vec::Vec<meta::Meta>>));
        switchInt(move _13) -> [1: bb9, otherwise: bb4];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        return;
    }

    bb9: {
        _14 = &mut ((((*_12).11: std::option::Option<std::vec::Vec<meta::Meta>>) as Some).0: std::vec::Vec<meta::Meta>);
        _16 = _1;
        _15 = Core::sort(move _16, _14) -> [return: bb4, unwind continue];
    }
}

fn core::<impl at src/core.rs:25:1: 25:10>::sort::{closure#0}(_1: &mut {closure@src/core.rs:126:32: 126:38}, _2: &Meta, _3: &Meta) -> std::cmp::Ordering {
    debug a => _2;
    debug b => _3;
    debug self => (*((*_1).0: &&core::Core));
    let mut _0: std::cmp::Ordering;
    let _4: &[(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)];
    let _5: &std::vec::Vec<(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _6: &&core::Core;
    let mut _7: &core::Core;

    bb0: {
        _6 = deref_copy ((*_1).0: &&core::Core);
        _7 = deref_copy (*_6);
        _5 = &((*_7).3: std::vec::Vec<(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>);
        _4 = <Vec<(SortOrder, for<'a, 'b> fn(&'a Meta, &'b Meta) -> std::cmp::Ordering)> as Deref>::deref(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = by_meta(_4, _2, _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn core::<impl at src/core.rs:25:1: 25:10>::display(_1: &Core, _2: &[Meta]) -> () {
    debug self => _1;
    debug metas => _2;
    let mut _0: ();
    let _3: std::string::String;
    let mut _4: bool;
    let mut _5: &flags::layout::Layout;
    let _6: &&[meta::Meta];
    let _7: &flags::Flags;
    let _8: &color::Colors;
    let _9: &icon::Icons;
    let _10: &&[meta::Meta];
    let _11: &flags::Flags;
    let _12: &color::Colors;
    let _13: &icon::Icons;
    let mut _16: &std::io::Stdout;
    let mut _18: &mut std::io::StdoutLock<'_>;
    let _19: &[u8];
    let mut _20: &std::string::String;
    let _21: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &std::string::String;
    let mut _30: bool;
    let mut _31: &std::result::Result<(), std::io::Error>;
    let _32: !;
    let mut _34: &flags::layout::Layout;
    let mut _35: &[meta::Meta];
    let mut _36: &[meta::Meta];
    scope 1 {
        debug output => _3;
        let _14: std::io::Stdout;
        scope 2 {
            debug stderr => _14;
            let mut _15: std::io::StdoutLock<'_>;
            scope 3 {
                debug handle => _15;
                let _17: std::result::Result<(), std::io::Error>;
                let _22: std::string::String;
                let mut _33: &[&str; 1];
                scope 4 {
                    debug res => _17;
                }
                scope 5 {
                    debug res => _22;
                }
            }
        }
    }

    bb0: {
        _5 = &(((*_1).0: flags::Flags).8: flags::layout::Layout);
        _34 = const _;
        _4 = <layout::Layout as PartialEq>::eq(move _5, _34) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = &_2;
        _35 = deref_copy (*_6);
        _7 = &((*_1).0: flags::Flags);
        _8 = &((*_1).2: color::Colors);
        _9 = &((*_1).1: icon::Icons);
        _3 = tree(_35, _7, _8, _9) -> [return: bb4, unwind continue];
    }

    bb3: {
        _10 = &_2;
        _36 = deref_copy (*_10);
        _11 = &((*_1).0: flags::Flags);
        _12 = &((*_1).2: color::Colors);
        _13 = &((*_1).1: icon::Icons);
        _3 = grid(_36, _11, _12, _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = stdout() -> [return: bb5, unwind: bb22];
    }

    bb5: {
        _16 = &_14;
        _15 = Stdout::lock(move _16) -> [return: bb6, unwind: bb22];
    }

    bb6: {
        _18 = &mut _15;
        _33 = const _;
        _24 = _33 as &[&str] (PointerCoercion(Unsize));
        _29 = &_3;
        _28 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_29) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        _27 = [move _28];
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _23 = Arguments::<'_>::new_v1(move _24, move _25) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _22 = std::fmt::format(move _23) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        _21 = move _22;
        _20 = &_21;
        _19 = std::string::String::as_bytes(move _20) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        _17 = <StdoutLock<'_> as std::io::Write>::write_all(move _18, _19) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        drop(_21) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        _31 = &_17;
        _30 = Result::<(), std::io::Error>::is_err(move _31) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        switchInt(move _30) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _32 = std::process::exit(const 0_i32) -> bb19;
    }

    bb15: {
        drop(_17) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        drop(_15) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        drop(_3) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_17) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_21) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_15) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_3) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in core::<impl at src/core.rs:25:1: 25:10>::display: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[1] in core::<impl at src/core.rs:25:1: 25:10>::display: &layout::Layout = {
    let mut _0: &flags::layout::Layout;
    let mut _1: flags::layout::Layout;

    bb0: {
        _1 = layout::Layout::Tree;
        _0 = &_1;
        return;
    }
}

const EDGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "├──";
        return;
    }
}

const LINE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "│  ";
        return;
    }
}

const CORNER: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "└──";
        return;
    }
}

const BLANK: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "   ";
        return;
    }
}

fn grid(_1: &[Meta], _2: &Flags, _3: &Colors, _4: &icon::Icons) -> std::string::String {
    debug metas => _1;
    debug flags => _2;
    debug colors => _3;
    debug icons => _4;
    let mut _0: std::string::String;
    let _5: std::option::Option<usize>;
    let mut _6: std::option::Option<(terminal_size::Width, terminal_size::Height)>;
    let mut _7: isize;
    let _8: terminal_size::Width;
    let mut _9: usize;
    let mut _10: u16;
    let _11: &&flags::Flags;
    let mut _12: std::option::Option<usize>;
    let mut _14: &flags::Flags;
    scope 1 {
        debug term_width => _5;
        let mut _13: &meta::name::DisplayOption<'_>;
    }
    scope 2 {
        debug w => _8;
    }

    bb0: {
        _6 = terminal_size() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = discriminant(_6);
        switchInt(move _7) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _5 = std::option::Option::<usize>::None;
        goto -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _8 = move (((_6 as Some).0: (terminal_size::Width, terminal_size::Height)).0: terminal_size::Width);
        _10 = (_8.0: u16);
        _9 = move _10 as usize (IntToInt);
        _5 = std::option::Option::<usize>::Some(move _9);
        goto -> bb5;
    }

    bb5: {
        _13 = const _;
        _11 = &_2;
        _14 = deref_copy (*_11);
        _12 = _5;
        _0 = inner_display_grid(_13, _1, _14, _3, _4, const 0_usize, move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

promoted[0] in grid: &DisplayOption<'_> = {
    let mut _0: &meta::name::DisplayOption<'_>;
    let mut _1: meta::name::DisplayOption<'_>;

    bb0: {
        _1 = DisplayOption::<'_>::None;
        _0 = &_1;
        return;
    }
}

fn tree(_1: &[Meta], _2: &Flags, _3: &Colors, _4: &icon::Icons) -> std::string::String {
    debug metas => _1;
    debug flags => _2;
    debug colors => _3;
    debug icons => _4;
    let mut _0: std::string::String;
    let _5: &&flags::Flags;
    let _6: &str;
    let mut _7: &flags::Flags;

    bb0: {
        _5 = &_2;
        _7 = deref_copy (*_5);
        _6 = const "";
        _0 = inner_display_tree(_1, _7, _3, _4, const 0_usize, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner_display_grid(_1: &DisplayOption<'_>, _2: &[Meta], _3: &Flags, _4: &Colors, _5: &icon::Icons, _6: usize, _7: std::option::Option<usize>) -> std::string::String {
    debug display_option => _1;
    debug metas => _2;
    debug flags => _3;
    debug colors => _4;
    debug icons => _5;
    debug depth => _6;
    debug term_width => _7;
    let mut _0: std::string::String;
    let mut _8: std::string::String;
    let _10: &&[meta::Meta];
    let mut _11: &flags::Flags;
    let mut _13: isize;
    let mut _14: term_grid::GridOptions;
    let mut _15: term_grid::Filling;
    let mut _16: term_grid::Direction;
    let mut _17: term_grid::GridOptions;
    let mut _18: term_grid::Filling;
    let mut _19: term_grid::Direction;
    let mut _21: &flags::display::Display;
    let mut _22: std::slice::Iter<'_, meta::Meta>;
    let mut _23: &[meta::Meta];
    let mut _25: std::option::Option<&meta::Meta>;
    let mut _26: &mut std::slice::Iter<'_, meta::Meta>;
    let mut _27: isize;
    let mut _29: bool;
    let mut _30: isize;
    let mut _31: bool;
    let mut _32: isize;
    let mut _33: bool;
    let mut _34: &flags::layout::Layout;
    let _36: &&meta::Meta;
    let _37: &&color::Colors;
    let _38: &&icon::Icons;
    let _39: &&flags::Flags;
    let _40: &&meta::name::DisplayOption<'_>;
    let _41: &std::collections::HashMap<flags::blocks::Block, usize>;
    let mut _42: std::vec::IntoIter<ansi_term::ANSIGenericString<'_, str>>;
    let mut _44: std::option::Option<ansi_term::ANSIGenericString<'_, str>>;
    let mut _45: &mut std::vec::IntoIter<ansi_term::ANSIGenericString<'_, str>>;
    let mut _46: isize;
    let mut _49: &ansi_term::ANSIGenericString<'_, str>;
    let _50: ();
    let mut _51: &mut term_grid::Grid;
    let mut _52: term_grid::Cell;
    let mut _53: usize;
    let _54: &str;
    let _55: &std::string::String;
    let mut _56: std::string::String;
    let mut _57: bool;
    let mut _58: &flags::layout::Layout;
    let mut _59: isize;
    let mut _61: std::option::Option<term_grid::Display<'_>>;
    let mut _62: &term_grid::Grid;
    let mut _63: isize;
    let _65: ();
    let mut _66: &mut std::string::String;
    let _67: &str;
    let _68: &std::string::String;
    let _69: std::string::String;
    let mut _70: &term_grid::Display<'_>;
    let _71: ();
    let mut _72: &mut std::string::String;
    let _73: &str;
    let _74: &std::string::String;
    let _75: std::string::String;
    let mut _76: &term_grid::Display<'_>;
    let _77: term_grid::Display<'_>;
    let mut _78: &term_grid::Grid;
    let _79: ();
    let mut _80: &mut std::string::String;
    let _81: &str;
    let _82: &std::string::String;
    let _83: std::string::String;
    let mut _84: &term_grid::Display<'_>;
    let _85: term_grid::Display<'_>;
    let mut _86: &term_grid::Grid;
    let _87: ();
    let mut _88: &mut std::string::String;
    let _89: &str;
    let _90: &std::string::String;
    let _91: std::string::String;
    let mut _92: &term_grid::Display<'_>;
    let _93: term_grid::Display<'_>;
    let mut _94: &term_grid::Grid;
    let mut _95: usize;
    let mut _96: &std::vec::Vec<flags::blocks::Block>;
    let _98: &&[meta::Meta];
    let _99: &&flags::Flags;
    let mut _100: std::slice::Iter<'_, meta::Meta>;
    let mut _101: &[meta::Meta];
    let mut _103: std::option::Option<&meta::Meta>;
    let mut _104: &mut std::slice::Iter<'_, meta::Meta>;
    let mut _105: isize;
    let mut _107: bool;
    let mut _108: &std::option::Option<std::vec::Vec<meta::Meta>>;
    let _109: ();
    let mut _110: &mut std::string::String;
    let _111: &str;
    let _112: &std::string::String;
    let _113: std::string::String;
    let _114: &&meta::Meta;
    let _116: &std::path::Path;
    let _117: &std::path::PathBuf;
    let _118: ();
    let mut _119: &mut std::string::String;
    let _120: &str;
    let _121: &std::string::String;
    let _122: std::string::String;
    let _123: &meta::name::DisplayOption<'_>;
    let _124: &[meta::Meta];
    let _125: &std::vec::Vec<meta::Meta>;
    let mut _126: std::option::Option<&std::vec::Vec<meta::Meta>>;
    let mut _127: &std::option::Option<std::vec::Vec<meta::Meta>>;
    let _128: &&flags::Flags;
    let mut _129: &color::Colors;
    let mut _130: &icon::Icons;
    let mut _131: usize;
    let mut _132: (usize, bool);
    let mut _136: &[meta::Meta];
    let mut _137: &meta::Meta;
    let mut _138: &color::Colors;
    let mut _139: &icon::Icons;
    let mut _140: &flags::Flags;
    let mut _141: &meta::name::DisplayOption<'_>;
    let mut _142: &[meta::Meta];
    let mut _143: &flags::Flags;
    let mut _144: &meta::Meta;
    let mut _145: &flags::Flags;
    let mut _146: bool;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: bool;
    scope 1 {
        debug output => _8;
        let _9: std::collections::HashMap<flags::blocks::Block, usize>;
        scope 2 {
            debug padding_rules => _9;
            let mut _12: term_grid::Grid;
            scope 3 {
                debug grid => _12;
                let _20: bool;
                let mut _135: &flags::display::Display;
                scope 4 {
                    debug skip_dirs => _20;
                    let mut _24: std::slice::Iter<'_, meta::Meta>;
                    let _97: bool;
                    let mut _134: &flags::layout::Layout;
                    scope 5 {
                        debug iter => _24;
                        let _28: &meta::Meta;
                        scope 6 {
                            debug meta => _28;
                            let _35: std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
                            let mut _133: &flags::layout::Layout;
                            scope 7 {
                                debug blocks => _35;
                                let mut _43: std::vec::IntoIter<ansi_term::ANSIGenericString<'_, str>>;
                                scope 8 {
                                    debug iter => _43;
                                    let _47: ansi_term::ANSIGenericString<'_, str>;
                                    scope 9 {
                                        debug block => _47;
                                        let _48: std::string::String;
                                        scope 10 {
                                            debug block_str => _48;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 11 {
                        debug tw => _60;
                        let _60: usize;
                        scope 12 {
                            debug gridded_output => _64;
                            let _64: term_grid::Display<'_>;
                        }
                    }
                    scope 13 {
                        debug should_display_folder_path => _97;
                        let mut _102: std::slice::Iter<'_, meta::Meta>;
                        scope 14 {
                            debug iter => _102;
                            let _106: &meta::Meta;
                            scope 15 {
                                debug meta => _106;
                                let _115: meta::name::DisplayOption<'_>;
                                scope 16 {
                                    debug display_option => _115;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _148 = const false;
        _147 = const false;
        _146 = const false;
        _148 = const true;
        _8 = std::string::String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_2;
        _136 = deref_copy (*_10);
        _11 = _3;
        _9 = get_padding_rules(_136, move _11) -> [return: bb2, unwind: bb110];
    }

    bb2: {
        _13 = discriminant(((*_3).8: flags::layout::Layout));
        switchInt(move _13) -> [2: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = Spaces(const 2_usize);
        _19 = TopToBottom;
        _17 = GridOptions { direction: move _19, filling: move _18 };
        _12 = Grid::new(move _17) -> [return: bb111, unwind: bb98];
    }

    bb4: {
        _15 = Spaces(const 1_usize);
        _16 = LeftToRight;
        _14 = GridOptions { direction: move _16, filling: move _15 };
        _12 = Grid::new(move _14) -> [return: bb112, unwind: bb98];
    }

    bb5: {
        switchInt(move _6) -> [0: bb6, otherwise: bb7];
    }

    bb6: {
        _21 = &((*_3).4: flags::display::Display);
        _135 = const _;
        _20 = <flags::display::Display as PartialEq>::ne(move _21, _135) -> [return: bb113, unwind: bb97];
    }

    bb7: {
        _20 = const false;
        goto -> bb8;
    }

    bb8: {
        _23 = _2;
        _22 = <&[Meta] as IntoIterator>::into_iter(move _23) -> [return: bb9, unwind: bb97];
    }

    bb9: {
        _24 = move _22;
        goto -> bb10;
    }

    bb10: {
        _26 = &mut _24;
        _25 = <std::slice::Iter<'_, Meta> as Iterator>::next(_26) -> [return: bb11, unwind: bb97];
    }

    bb11: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb14, 1: bb12, otherwise: bb13];
    }

    bb12: {
        _28 = ((_25 as Some).0: &meta::Meta);
        _29 = _20;
        switchInt(move _29) -> [0: bb22, otherwise: bb15];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _58 = &((*_3).8: flags::layout::Layout);
        _134 = const _;
        _57 = <layout::Layout as PartialEq>::eq(move _58, _134) -> [return: bb33, unwind: bb97];
    }

    bb15: {
        _30 = discriminant(((*_28).5: meta::filetype::FileType));
        switchInt(move _30) -> [2: bb10, otherwise: bb16];
    }

    bb16: {
        _32 = discriminant(((*_28).5: meta::filetype::FileType));
        switchInt(move _32) -> [4: bb18, otherwise: bb17];
    }

    bb17: {
        _31 = const false;
        goto -> bb19;
    }

    bb18: {
        StorageLive(_151);
        _151 = ((((*_28).5: meta::filetype::FileType) as SymLink).0: bool);
        _31 = _151;
        StorageDead(_151);
        goto -> bb19;
    }

    bb19: {
        switchInt(move _31) -> [0: bb22, otherwise: bb20];
    }

    bb20: {
        _34 = &((*_3).8: flags::layout::Layout);
        _133 = const _;
        _33 = <layout::Layout as PartialEq>::ne(move _34, _133) -> [return: bb21, unwind: bb97];
    }

    bb21: {
        switchInt(move _33) -> [0: bb22, otherwise: bb10];
    }

    bb22: {
        _36 = &_28;
        _137 = deref_copy (*_36);
        _37 = &_4;
        _138 = deref_copy (*_37);
        _38 = &_5;
        _139 = deref_copy (*_38);
        _39 = &_3;
        _140 = deref_copy (*_39);
        _40 = &_1;
        _141 = deref_copy (*_40);
        _41 = &_9;
        _35 = get_output(_137, _138, _139, _140, _141, _41) -> [return: bb23, unwind: bb97];
    }

    bb23: {
        _42 = <Vec<ANSIGenericString<'_, str>> as IntoIterator>::into_iter(move _35) -> [return: bb24, unwind: bb97];
    }

    bb24: {
        _43 = move _42;
        goto -> bb25;
    }

    bb25: {
        _45 = &mut _43;
        _44 = <std::vec::IntoIter<ANSIGenericString<'_, str>> as Iterator>::next(_45) -> [return: bb26, unwind: bb96];
    }

    bb26: {
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb28, 1: bb27, otherwise: bb13];
    }

    bb27: {
        _47 = move ((_44 as Some).0: ansi_term::ANSIGenericString<'_, str>);
        _49 = &_47;
        _48 = <ANSIGenericString<'_, str> as ToString>::to_string(move _49) -> [return: bb29, unwind: bb95];
    }

    bb28: {
        drop(_43) -> [return: bb10, unwind: bb97];
    }

    bb29: {
        _147 = const true;
        _51 = &mut _12;
        _55 = &_48;
        _54 = <std::string::String as Deref>::deref(_55) -> [return: bb30, unwind: bb108];
    }

    bb30: {
        _53 = get_visible_width(_54) -> [return: bb31, unwind: bb108];
    }

    bb31: {
        _147 = const false;
        _56 = move _48;
        _52 = term_grid::Cell { contents: move _56, width: move _53 };
        _50 = Grid::add(move _51, move _52) -> [return: bb32, unwind: bb108];
    }

    bb32: {
        _147 = const false;
        drop(_47) -> [return: bb25, unwind: bb96];
    }

    bb33: {
        switchInt(move _57) -> [0: bb54, otherwise: bb34];
    }

    bb34: {
        _59 = discriminant(_7);
        switchInt(move _59) -> [1: bb35, otherwise: bb48];
    }

    bb35: {
        _60 = ((_7 as Some).0: usize);
        _62 = &_12;
        _61 = Grid::fit_into_width(move _62, _60) -> [return: bb36, unwind: bb97];
    }

    bb36: {
        _146 = const true;
        _63 = discriminant(_61);
        switchInt(move _63) -> [1: bb37, otherwise: bb42];
    }

    bb37: {
        _146 = const false;
        _64 = move ((_61 as Some).0: term_grid::Display<'_>);
        _66 = &mut _8;
        _70 = &_64;
        _69 = <term_grid::Display<'_> as ToString>::to_string(move _70) -> [return: bb38, unwind: bb94];
    }

    bb38: {
        _68 = &_69;
        _67 = <std::string::String as Deref>::deref(_68) -> [return: bb39, unwind: bb93];
    }

    bb39: {
        _65 = <std::string::String as AddAssign<&str>>::add_assign(move _66, _67) -> [return: bb40, unwind: bb93];
    }

    bb40: {
        drop(_69) -> [return: bb41, unwind: bb94];
    }

    bb41: {
        drop(_64) -> [return: bb103, unwind: bb106];
    }

    bb42: {
        _72 = &mut _8;
        _78 = &_12;
        _77 = Grid::fit_into_columns(move _78, const 1_usize) -> [return: bb43, unwind: bb106];
    }

    bb43: {
        _76 = &_77;
        _75 = <term_grid::Display<'_> as ToString>::to_string(move _76) -> [return: bb44, unwind: bb92];
    }

    bb44: {
        _74 = &_75;
        _73 = <std::string::String as Deref>::deref(_74) -> [return: bb45, unwind: bb91];
    }

    bb45: {
        _71 = <std::string::String as AddAssign<&str>>::add_assign(move _72, _73) -> [return: bb46, unwind: bb91];
    }

    bb46: {
        drop(_75) -> [return: bb47, unwind: bb92];
    }

    bb47: {
        drop(_77) -> [return: bb103, unwind: bb106];
    }

    bb48: {
        _80 = &mut _8;
        _86 = &_12;
        _85 = Grid::fit_into_columns(move _86, const 1_usize) -> [return: bb49, unwind: bb97];
    }

    bb49: {
        _84 = &_85;
        _83 = <term_grid::Display<'_> as ToString>::to_string(move _84) -> [return: bb50, unwind: bb90];
    }

    bb50: {
        _82 = &_83;
        _81 = <std::string::String as Deref>::deref(_82) -> [return: bb51, unwind: bb89];
    }

    bb51: {
        _79 = <std::string::String as AddAssign<&str>>::add_assign(move _80, _81) -> [return: bb52, unwind: bb89];
    }

    bb52: {
        drop(_83) -> [return: bb53, unwind: bb90];
    }

    bb53: {
        drop(_85) -> [return: bb61, unwind: bb97];
    }

    bb54: {
        _88 = &mut _8;
        _94 = &_12;
        _96 = &(((*_3).0: flags::blocks::Blocks).0: std::vec::Vec<flags::blocks::Block>);
        _95 = Vec::<Block>::len(move _96) -> [return: bb55, unwind: bb97];
    }

    bb55: {
        _93 = Grid::fit_into_columns(move _94, move _95) -> [return: bb56, unwind: bb97];
    }

    bb56: {
        _92 = &_93;
        _91 = <term_grid::Display<'_> as ToString>::to_string(move _92) -> [return: bb57, unwind: bb88];
    }

    bb57: {
        _90 = &_91;
        _89 = <std::string::String as Deref>::deref(_90) -> [return: bb58, unwind: bb87];
    }

    bb58: {
        _87 = <std::string::String as AddAssign<&str>>::add_assign(move _88, _89) -> [return: bb59, unwind: bb87];
    }

    bb59: {
        drop(_91) -> [return: bb60, unwind: bb88];
    }

    bb60: {
        drop(_93) -> [return: bb61, unwind: bb97];
    }

    bb61: {
        _98 = &_2;
        _142 = deref_copy (*_98);
        _99 = &_3;
        _143 = deref_copy (*_99);
        _97 = should_display_folder_path(_6, _142, _143) -> [return: bb62, unwind: bb97];
    }

    bb62: {
        _101 = _2;
        _100 = <&[Meta] as IntoIterator>::into_iter(move _101) -> [return: bb63, unwind: bb97];
    }

    bb63: {
        _102 = move _100;
        goto -> bb64;
    }

    bb64: {
        _104 = &mut _102;
        _103 = <std::slice::Iter<'_, Meta> as Iterator>::next(_104) -> [return: bb65, unwind: bb97];
    }

    bb65: {
        _105 = discriminant(_103);
        switchInt(move _105) -> [0: bb67, 1: bb66, otherwise: bb13];
    }

    bb66: {
        _106 = ((_103 as Some).0: &meta::Meta);
        _108 = &((*_106).11: std::option::Option<std::vec::Vec<meta::Meta>>);
        _107 = std::option::Option::<Vec<Meta>>::is_some(move _108) -> [return: bb68, unwind: bb97];
    }

    bb67: {
        _148 = const false;
        _0 = move _8;
        drop(_12) -> [return: bb83, unwind: bb98];
    }

    bb68: {
        switchInt(move _107) -> [0: bb64, otherwise: bb69];
    }

    bb69: {
        switchInt(_97) -> [0: bb74, otherwise: bb70];
    }

    bb70: {
        _110 = &mut _8;
        _114 = &_106;
        _144 = deref_copy (*_114);
        _113 = display_folder_path(_144) -> [return: bb71, unwind: bb97];
    }

    bb71: {
        _112 = &_113;
        _111 = <std::string::String as Deref>::deref(_112) -> [return: bb72, unwind: bb86];
    }

    bb72: {
        _109 = <std::string::String as AddAssign<&str>>::add_assign(move _110, _111) -> [return: bb73, unwind: bb86];
    }

    bb73: {
        drop(_113) -> [return: bb74, unwind: bb97];
    }

    bb74: {
        _117 = &((*_106).1: std::path::PathBuf);
        _116 = <PathBuf as Deref>::deref(_117) -> [return: bb75, unwind: bb97];
    }

    bb75: {
        _115 = DisplayOption::<'_>::Relative { base_path: _116 };
        _119 = &mut _8;
        _123 = &_115;
        _127 = &((*_106).11: std::option::Option<std::vec::Vec<meta::Meta>>);
        _126 = std::option::Option::<Vec<Meta>>::as_ref(move _127) -> [return: bb76, unwind: bb97];
    }

    bb76: {
        _125 = std::option::Option::<&Vec<Meta>>::unwrap(move _126) -> [return: bb77, unwind: bb97];
    }

    bb77: {
        _124 = <Vec<Meta> as Deref>::deref(_125) -> [return: bb78, unwind: bb97];
    }

    bb78: {
        _128 = &_3;
        _145 = deref_copy (*_128);
        _129 = _4;
        _130 = _5;
        _132 = CheckedAdd(_6, const 1_usize);
        assert(!move (_132.1: bool), "attempt to compute `{} + {}`, which would overflow", _6, const 1_usize) -> [success: bb79, unwind: bb97];
    }

    bb79: {
        _131 = move (_132.0: usize);
        _122 = inner_display_grid(_123, _124, _145, move _129, move _130, move _131, _7) -> [return: bb80, unwind: bb97];
    }

    bb80: {
        _121 = &_122;
        _120 = <std::string::String as Deref>::deref(_121) -> [return: bb81, unwind: bb85];
    }

    bb81: {
        _118 = <std::string::String as AddAssign<&str>>::add_assign(move _119, _120) -> [return: bb82, unwind: bb85];
    }

    bb82: {
        drop(_122) -> [return: bb64, unwind: bb97];
    }

    bb83: {
        drop(_9) -> [return: bb84, unwind: bb110];
    }

    bb84: {
        _148 = const false;
        return;
    }

    bb85 (cleanup): {
        drop(_122) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_113) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_91) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_93) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_83) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_85) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_75) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_77) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_69) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_64) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_47) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_43) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_12) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_9) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        resume;
    }

    bb100: {
        _146 = const false;
        goto -> bb61;
    }

    bb101: {
        switchInt(_146) -> [0: bb100, otherwise: bb102];
    }

    bb102: {
        drop(((_61 as Some).0: term_grid::Display<'_>)) -> [return: bb100, unwind: bb97];
    }

    bb103: {
        _149 = discriminant(_61);
        switchInt(move _149) -> [1: bb101, otherwise: bb100];
    }

    bb104 (cleanup): {
        switchInt(_146) -> [0: bb97, otherwise: bb105];
    }

    bb105 (cleanup): {
        drop(((_61 as Some).0: term_grid::Display<'_>)) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        _150 = discriminant(_61);
        switchInt(move _150) -> [1: bb104, otherwise: bb97];
    }

    bb107 (cleanup): {
        drop(_48) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_147) -> [0: bb95, otherwise: bb107];
    }

    bb109 (cleanup): {
        drop(_8) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        switchInt(_148) -> [0: bb99, otherwise: bb109];
    }

    bb111: {
        goto -> bb5;
    }

    bb112: {
        goto -> bb5;
    }

    bb113: {
        goto -> bb8;
    }
}

promoted[0] in inner_display_grid: &layout::Layout = {
    let mut _0: &flags::layout::Layout;
    let mut _1: flags::layout::Layout;

    bb0: {
        _1 = layout::Layout::OneLine;
        _0 = &_1;
        return;
    }
}

promoted[1] in inner_display_grid: &layout::Layout = {
    let mut _0: &flags::layout::Layout;
    let mut _1: flags::layout::Layout;

    bb0: {
        _1 = layout::Layout::Grid;
        _0 = &_1;
        return;
    }
}

promoted[2] in inner_display_grid: &flags::display::Display = {
    let mut _0: &flags::display::Display;
    let mut _1: flags::display::Display;

    bb0: {
        _1 = flags::display::Display::DirectoryOnly;
        _0 = &_1;
        return;
    }
}

fn inner_display_tree(_1: &[Meta], _2: &Flags, _3: &Colors, _4: &icon::Icons, _5: usize, _6: &str) -> std::string::String {
    debug metas => _1;
    debug flags => _2;
    debug colors => _3;
    debug icons => _4;
    debug depth => _5;
    debug prefix => _6;
    let mut _0: std::string::String;
    let mut _7: std::string::String;
    let mut _9: &[meta::Meta];
    let _11: &&[meta::Meta];
    let mut _12: &flags::Flags;
    let mut _14: term_grid::GridOptions;
    let mut _15: term_grid::Filling;
    let mut _16: term_grid::Direction;
    let mut _17: std::slice::Iter<'_, meta::Meta>;
    let mut _18: std::slice::Iter<'_, meta::Meta>;
    let mut _19: &[meta::Meta];
    let mut _21: std::option::Option<&meta::Meta>;
    let mut _22: &mut std::slice::Iter<'_, meta::Meta>;
    let mut _23: isize;
    let mut _25: std::vec::IntoIter<ansi_term::ANSIGenericString<'_, str>>;
    let mut _26: std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let _27: &&meta::Meta;
    let _28: &&color::Colors;
    let _29: &&icon::Icons;
    let _30: &&flags::Flags;
    let _31: &std::collections::HashMap<flags::blocks::Block, usize>;
    let mut _33: std::option::Option<ansi_term::ANSIGenericString<'_, str>>;
    let mut _34: &mut std::vec::IntoIter<ansi_term::ANSIGenericString<'_, str>>;
    let mut _35: isize;
    let mut _38: &ansi_term::ANSIGenericString<'_, str>;
    let _39: ();
    let mut _40: &mut term_grid::Grid;
    let mut _41: term_grid::Cell;
    let mut _42: usize;
    let _43: &str;
    let _44: &std::string::String;
    let mut _45: std::string::String;
    let mut _47: &term_grid::Display<'_>;
    let _48: term_grid::Display<'_>;
    let mut _49: &term_grid::Grid;
    let mut _50: usize;
    let mut _51: &std::vec::Vec<flags::blocks::Block>;
    let _53: &str;
    let mut _54: &std::string::String;
    let mut _55: std::iter::Enumerate<std::slice::Iter<'_, meta::Meta>>;
    let mut _56: std::iter::Enumerate<std::slice::Iter<'_, meta::Meta>>;
    let mut _57: std::slice::Iter<'_, meta::Meta>;
    let mut _58: &[meta::Meta];
    let mut _60: std::option::Option<(usize, &meta::Meta)>;
    let mut _61: &mut std::iter::Enumerate<std::slice::Iter<'_, meta::Meta>>;
    let mut _62: isize;
    let mut _66: usize;
    let mut _67: (usize, bool);
    let mut _68: bool;
    let _69: ();
    let mut _70: &mut std::string::String;
    let _71: ();
    let mut _72: &mut std::string::String;
    let _73: &str;
    let _74: ();
    let mut _75: &mut std::string::String;
    let _76: &str;
    let _77: ();
    let mut _78: &mut std::string::String;
    let _79: &str;
    let _80: ();
    let mut _81: &mut std::string::String;
    let _82: &str;
    let _83: &std::string::String;
    let _84: std::string::String;
    let mut _85: &str;
    let mut _86: std::option::Option<&str>;
    let mut _87: &mut std::str::Lines<'_>;
    let _88: ();
    let mut _89: &mut std::string::String;
    let _90: &str;
    let mut _91: bool;
    let mut _92: &std::option::Option<std::vec::Vec<meta::Meta>>;
    let mut _94: bool;
    let _95: ();
    let mut _96: &mut std::string::String;
    let _97: &str;
    let _98: ();
    let mut _99: &mut std::string::String;
    let _100: &str;
    let _101: ();
    let mut _102: &mut std::string::String;
    let _103: &str;
    let _104: &std::string::String;
    let _105: std::string::String;
    let _106: &[meta::Meta];
    let _107: &&std::vec::Vec<meta::Meta>;
    let _108: &std::vec::Vec<meta::Meta>;
    let mut _109: std::option::Option<&std::vec::Vec<meta::Meta>>;
    let mut _110: &std::option::Option<std::vec::Vec<meta::Meta>>;
    let _111: &&flags::Flags;
    let mut _112: &color::Colors;
    let mut _113: &icon::Icons;
    let mut _114: usize;
    let mut _115: (usize, bool);
    let _116: &str;
    let _117: &std::string::String;
    let mut _119: &[meta::Meta];
    let mut _120: &meta::Meta;
    let mut _121: &color::Colors;
    let mut _122: &icon::Icons;
    let mut _123: &flags::Flags;
    let mut _124: &std::vec::Vec<meta::Meta>;
    let mut _125: &flags::Flags;
    let mut _126: bool;
    let mut _127: bool;
    scope 1 {
        debug output => _7;
        let _8: usize;
        scope 2 {
            debug last_idx => _8;
            let _10: std::collections::HashMap<flags::blocks::Block, usize>;
            scope 3 {
                debug padding_rules => _10;
                let mut _13: term_grid::Grid;
                scope 4 {
                    debug grid => _13;
                    let mut _20: std::slice::Iter<'_, meta::Meta>;
                    let _46: std::string::String;
                    scope 5 {
                        debug iter => _20;
                        let _24: &meta::Meta;
                        scope 6 {
                            debug meta => _24;
                            let mut _32: std::vec::IntoIter<ansi_term::ANSIGenericString<'_, str>>;
                            let mut _118: &meta::name::DisplayOption<'_>;
                            scope 7 {
                                debug iter => _32;
                                let _36: ansi_term::ANSIGenericString<'_, str>;
                                scope 8 {
                                    debug block => _36;
                                    let _37: std::string::String;
                                    scope 9 {
                                        debug block_str => _37;
                                    }
                                }
                            }
                        }
                    }
                    scope 10 {
                        debug content => _46;
                        let mut _52: std::str::Lines<'_>;
                        scope 11 {
                            debug lines => _52;
                            let mut _59: std::iter::Enumerate<std::slice::Iter<'_, meta::Meta>>;
                            scope 12 {
                                debug iter => _59;
                                let _63: usize;
                                let _64: &meta::Meta;
                                scope 13 {
                                    debug idx => _63;
                                    debug meta => _64;
                                    let _65: bool;
                                    scope 14 {
                                        debug is_last_folder_elem => _65;
                                        let mut _93: std::string::String;
                                        scope 15 {
                                            debug new_prefix => _93;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _127 = const false;
        _126 = const false;
        _127 = const true;
        _7 = std::string::String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = _1;
        _8 = Len((*_9));
        _11 = &_1;
        _119 = deref_copy (*_11);
        _12 = _2;
        _10 = get_padding_rules(_119, move _12) -> [return: bb2, unwind: bb80];
    }

    bb2: {
        _15 = Spaces(const 1_usize);
        _16 = LeftToRight;
        _14 = GridOptions { direction: move _16, filling: move _15 };
        _13 = Grid::new(move _14) -> [return: bb3, unwind: bb75];
    }

    bb3: {
        _19 = _1;
        _18 = core::slice::<impl [Meta]>::iter(move _19) -> [return: bb4, unwind: bb74];
    }

    bb4: {
        _17 = <std::slice::Iter<'_, Meta> as IntoIterator>::into_iter(move _18) -> [return: bb5, unwind: bb74];
    }

    bb5: {
        _20 = move _17;
        goto -> bb6;
    }

    bb6: {
        _22 = &mut _20;
        _21 = <std::slice::Iter<'_, Meta> as Iterator>::next(_22) -> [return: bb7, unwind: bb74];
    }

    bb7: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _24 = ((_21 as Some).0: &meta::Meta);
        _27 = &_24;
        _120 = deref_copy (*_27);
        _28 = &_3;
        _121 = deref_copy (*_28);
        _29 = &_4;
        _122 = deref_copy (*_29);
        _30 = &_2;
        _123 = deref_copy (*_30);
        _118 = const _;
        _31 = &_10;
        _26 = get_output(_120, _121, _122, _123, _118, _31) -> [return: bb11, unwind: bb74];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _49 = &_13;
        _51 = &(((*_2).0: flags::blocks::Blocks).0: std::vec::Vec<flags::blocks::Block>);
        _50 = Vec::<Block>::len(move _51) -> [return: bb21, unwind: bb74];
    }

    bb11: {
        _25 = <Vec<ANSIGenericString<'_, str>> as IntoIterator>::into_iter(move _26) -> [return: bb12, unwind: bb74];
    }

    bb12: {
        _32 = move _25;
        goto -> bb13;
    }

    bb13: {
        _34 = &mut _32;
        _33 = <std::vec::IntoIter<ANSIGenericString<'_, str>> as Iterator>::next(_34) -> [return: bb14, unwind: bb73];
    }

    bb14: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb16, 1: bb15, otherwise: bb9];
    }

    bb15: {
        _36 = move ((_33 as Some).0: ansi_term::ANSIGenericString<'_, str>);
        _38 = &_36;
        _37 = <ANSIGenericString<'_, str> as ToString>::to_string(move _38) -> [return: bb17, unwind: bb72];
    }

    bb16: {
        drop(_32) -> [return: bb6, unwind: bb74];
    }

    bb17: {
        _126 = const true;
        _40 = &mut _13;
        _44 = &_37;
        _43 = <std::string::String as Deref>::deref(_44) -> [return: bb18, unwind: bb78];
    }

    bb18: {
        _42 = get_visible_width(_43) -> [return: bb19, unwind: bb78];
    }

    bb19: {
        _126 = const false;
        _45 = move _37;
        _41 = term_grid::Cell { contents: move _45, width: move _42 };
        _39 = Grid::add(move _40, move _41) -> [return: bb20, unwind: bb78];
    }

    bb20: {
        _126 = const false;
        drop(_36) -> [return: bb13, unwind: bb73];
    }

    bb21: {
        _48 = Grid::fit_into_columns(move _49, move _50) -> [return: bb22, unwind: bb74];
    }

    bb22: {
        _47 = &_48;
        _46 = <term_grid::Display<'_> as ToString>::to_string(move _47) -> [return: bb23, unwind: bb71];
    }

    bb23: {
        drop(_48) -> [return: bb24, unwind: bb70];
    }

    bb24: {
        _54 = &_46;
        _53 = <std::string::String as Deref>::deref(move _54) -> [return: bb25, unwind: bb70];
    }

    bb25: {
        _52 = core::str::<impl str>::lines(_53) -> [return: bb26, unwind: bb70];
    }

    bb26: {
        _58 = _1;
        _57 = core::slice::<impl [Meta]>::iter(move _58) -> [return: bb27, unwind: bb70];
    }

    bb27: {
        _56 = <std::slice::Iter<'_, Meta> as Iterator>::enumerate(move _57) -> [return: bb28, unwind: bb70];
    }

    bb28: {
        _55 = <Enumerate<std::slice::Iter<'_, Meta>> as IntoIterator>::into_iter(move _56) -> [return: bb29, unwind: bb70];
    }

    bb29: {
        _59 = move _55;
        goto -> bb30;
    }

    bb30: {
        _61 = &mut _59;
        _60 = <Enumerate<std::slice::Iter<'_, Meta>> as Iterator>::next(_61) -> [return: bb31, unwind: bb70];
    }

    bb31: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb33, 1: bb32, otherwise: bb9];
    }

    bb32: {
        _63 = (((_60 as Some).0: (usize, &meta::Meta)).0: usize);
        _64 = (((_60 as Some).0: (usize, &meta::Meta)).1: &meta::Meta);
        _67 = CheckedAdd(_63, const 1_usize);
        assert(!move (_67.1: bool), "attempt to compute `{} + {}`, which would overflow", _63, const 1_usize) -> [success: bb34, unwind: bb70];
    }

    bb33: {
        _127 = const false;
        _0 = move _7;
        drop(_46) -> [return: bb64, unwind: bb74];
    }

    bb34: {
        _66 = move (_67.0: usize);
        _65 = Ne(move _66, _8);
        _68 = Gt(_5, const 0_usize);
        switchInt(move _68) -> [0: bb40, otherwise: bb35];
    }

    bb35: {
        _70 = &mut _7;
        _69 = <std::string::String as AddAssign<&str>>::add_assign(move _70, _6) -> [return: bb36, unwind: bb70];
    }

    bb36: {
        switchInt(_65) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _72 = &mut _7;
        _73 = const _;
        _71 = <std::string::String as AddAssign<&str>>::add_assign(move _72, _73) -> [return: bb81, unwind: bb70];
    }

    bb38: {
        _75 = &mut _7;
        _76 = const _;
        _74 = <std::string::String as AddAssign<&str>>::add_assign(move _75, _76) -> [return: bb82, unwind: bb70];
    }

    bb39: {
        _78 = &mut _7;
        _79 = const " ";
        _77 = <std::string::String as AddAssign<&str>>::add_assign(move _78, _79) -> [return: bb83, unwind: bb70];
    }

    bb40: {
        _81 = &mut _7;
        _87 = &mut _52;
        _86 = <std::str::Lines<'_> as Iterator>::next(move _87) -> [return: bb41, unwind: bb70];
    }

    bb41: {
        _85 = std::option::Option::<&str>::unwrap(move _86) -> [return: bb42, unwind: bb70];
    }

    bb42: {
        _84 = <std::string::String as From<&str>>::from(move _85) -> [return: bb43, unwind: bb70];
    }

    bb43: {
        _83 = &_84;
        _82 = <std::string::String as Deref>::deref(_83) -> [return: bb44, unwind: bb69];
    }

    bb44: {
        _80 = <std::string::String as AddAssign<&str>>::add_assign(move _81, _82) -> [return: bb45, unwind: bb69];
    }

    bb45: {
        drop(_84) -> [return: bb46, unwind: bb70];
    }

    bb46: {
        _89 = &mut _7;
        _90 = const "\n";
        _88 = <std::string::String as AddAssign<&str>>::add_assign(move _89, _90) -> [return: bb47, unwind: bb70];
    }

    bb47: {
        _92 = &((*_64).11: std::option::Option<std::vec::Vec<meta::Meta>>);
        _91 = std::option::Option::<Vec<Meta>>::is_some(move _92) -> [return: bb48, unwind: bb70];
    }

    bb48: {
        switchInt(move _91) -> [0: bb30, otherwise: bb49];
    }

    bb49: {
        _93 = <std::string::String as From<&str>>::from(_6) -> [return: bb50, unwind: bb70];
    }

    bb50: {
        _94 = Gt(_5, const 0_usize);
        switchInt(move _94) -> [0: bb54, otherwise: bb51];
    }

    bb51: {
        switchInt(_65) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _96 = &mut _93;
        _97 = const _;
        _95 = <std::string::String as AddAssign<&str>>::add_assign(move _96, _97) -> [return: bb84, unwind: bb68];
    }

    bb53: {
        _99 = &mut _93;
        _100 = const _;
        _98 = <std::string::String as AddAssign<&str>>::add_assign(move _99, _100) -> [return: bb85, unwind: bb68];
    }

    bb54: {
        _102 = &mut _7;
        _110 = &((*_64).11: std::option::Option<std::vec::Vec<meta::Meta>>);
        _109 = std::option::Option::<Vec<Meta>>::as_ref(move _110) -> [return: bb55, unwind: bb68];
    }

    bb55: {
        _108 = std::option::Option::<&Vec<Meta>>::unwrap(move _109) -> [return: bb56, unwind: bb68];
    }

    bb56: {
        _107 = &_108;
        _124 = deref_copy (*_107);
        _106 = <Vec<Meta> as Deref>::deref(_124) -> [return: bb57, unwind: bb68];
    }

    bb57: {
        _111 = &_2;
        _125 = deref_copy (*_111);
        _112 = _3;
        _113 = _4;
        _115 = CheckedAdd(_5, const 1_usize);
        assert(!move (_115.1: bool), "attempt to compute `{} + {}`, which would overflow", _5, const 1_usize) -> [success: bb58, unwind: bb68];
    }

    bb58: {
        _114 = move (_115.0: usize);
        _117 = &_93;
        _116 = <std::string::String as Deref>::deref(_117) -> [return: bb59, unwind: bb68];
    }

    bb59: {
        _105 = inner_display_tree(_106, _125, move _112, move _113, move _114, _116) -> [return: bb60, unwind: bb68];
    }

    bb60: {
        _104 = &_105;
        _103 = <std::string::String as Deref>::deref(_104) -> [return: bb61, unwind: bb67];
    }

    bb61: {
        _101 = <std::string::String as AddAssign<&str>>::add_assign(move _102, _103) -> [return: bb62, unwind: bb67];
    }

    bb62: {
        drop(_105) -> [return: bb63, unwind: bb68];
    }

    bb63: {
        drop(_93) -> [return: bb30, unwind: bb70];
    }

    bb64: {
        drop(_13) -> [return: bb65, unwind: bb75];
    }

    bb65: {
        drop(_10) -> [return: bb66, unwind: bb80];
    }

    bb66: {
        _127 = const false;
        return;
    }

    bb67 (cleanup): {
        drop(_105) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_93) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_84) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_46) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_48) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_36) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_32) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_13) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_10) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        resume;
    }

    bb77 (cleanup): {
        drop(_37) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_126) -> [0: bb72, otherwise: bb77];
    }

    bb79 (cleanup): {
        drop(_7) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_127) -> [0: bb76, otherwise: bb79];
    }

    bb81: {
        goto -> bb39;
    }

    bb82: {
        goto -> bb39;
    }

    bb83: {
        goto -> bb40;
    }

    bb84: {
        goto -> bb54;
    }

    bb85: {
        goto -> bb54;
    }
}

promoted[0] in inner_display_tree: &DisplayOption<'_> = {
    let mut _0: &meta::name::DisplayOption<'_>;
    let mut _1: meta::name::DisplayOption<'_>;

    bb0: {
        _1 = DisplayOption::<'_>::FileName;
        _0 = &_1;
        return;
    }
}

fn should_display_folder_path(_1: usize, _2: &[Meta], _3: &Flags) -> bool {
    debug depth => _1;
    debug metas => _2;
    debug flags => _3;
    let mut _0: bool;
    let mut _4: bool;
    let _5: usize;
    let mut _6: std::iter::Filter<std::slice::Iter<'_, meta::Meta>, {closure@src/display.rs:228:21: 228:24}>;
    let mut _7: std::slice::Iter<'_, meta::Meta>;
    let mut _8: {closure@src/display.rs:228:21: 228:24};
    let mut _9: &&flags::Flags;
    let mut _10: bool;
    let mut _11: usize;
    scope 1 {
        debug folder_number => _5;
    }

    bb0: {
        _4 = Gt(_1, const 0_usize);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const true;
        goto -> bb8;
    }

    bb2: {
        _7 = core::slice::<impl [Meta]>::iter(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = &_3;
        _8 = {closure@src/display.rs:228:21: 228:24} { flags: move _9 };
        _6 = <std::slice::Iter<'_, Meta> as Iterator>::filter::<{closure@src/display.rs:228:21: 228:24}>(move _7, move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = <Filter<std::slice::Iter<'_, Meta>, {closure@src/display.rs:228:21: 228:24}> as Iterator>::count(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = Gt(_5, const 1_usize);
        switchInt(move _10) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = const true;
        goto -> bb8;
    }

    bb7: {
        _11 = Len((*_2));
        _0 = Lt(_5, move _11);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn should_display_folder_path::{closure#0}(_1: &mut {closure@src/display.rs:228:21: 228:24}, _2: &&Meta) -> bool {
    debug x => _2;
    debug flags => (*((*_1).0: &&flags::Flags));
    let mut _0: bool;
    let mut _3: isize;
    let mut _4: bool;
    let mut _5: isize;
    let mut _6: &flags::layout::Layout;
    let mut _7: &flags::layout::Layout;
    let mut _8: &meta::Meta;
    let mut _9: &meta::Meta;
    let mut _10: &meta::Meta;
    let mut _11: &&flags::Flags;
    let mut _12: &flags::Flags;
    let mut _13: bool;

    bb0: {
        _8 = deref_copy (*_2);
        _3 = discriminant(((*_8).5: meta::filetype::FileType));
        switchInt(move _3) -> [2: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const true;
        goto -> bb8;
    }

    bb2: {
        _9 = deref_copy (*_2);
        _5 = discriminant(((*_9).5: meta::filetype::FileType));
        switchInt(move _5) -> [4: bb4, otherwise: bb3];
    }

    bb3: {
        _4 = const false;
        goto -> bb5;
    }

    bb4: {
        _10 = deref_copy (*_2);
        StorageLive(_13);
        _13 = ((((*_10).5: meta::filetype::FileType) as SymLink).0: bool);
        _4 = _13;
        StorageDead(_13);
        goto -> bb5;
    }

    bb5: {
        switchInt(move _4) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _11 = deref_copy ((*_1).0: &&flags::Flags);
        _12 = deref_copy (*_11);
        _6 = &((*_12).8: flags::layout::Layout);
        _7 = const _;
        _0 = <layout::Layout as PartialEq>::ne(move _6, _7) -> [return: bb8, unwind continue];
    }

    bb7: {
        _0 = const false;
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

promoted[0] in should_display_folder_path::{closure#0}: &layout::Layout = {
    let mut _0: &flags::layout::Layout;
    let mut _1: flags::layout::Layout;

    bb0: {
        _1 = layout::Layout::OneLine;
        _0 = &_1;
        return;
    }
}

fn display_folder_path(_1: &Meta) -> std::string::String {
    debug meta => _1;
    let mut _0: std::string::String;
    let mut _2: std::string::String;
    let _3: ();
    let mut _4: &mut std::string::String;
    let _5: ();
    let mut _6: &mut std::string::String;
    let _7: &str;
    let _8: &std::borrow::Cow<'_, str>;
    let _9: std::borrow::Cow<'_, str>;
    let _10: &std::path::Path;
    let mut _11: &std::path::PathBuf;
    let _12: ();
    let mut _13: &mut std::string::String;
    let _14: &str;
    scope 1 {
        debug output => _2;
    }

    bb0: {
        _2 = std::string::String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _2;
        _3 = std::string::String::push(move _4, const '\n') -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _6 = &mut _2;
        _11 = &((*_1).1: std::path::PathBuf);
        _10 = <PathBuf as Deref>::deref(move _11) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _9 = Path::to_string_lossy(_10) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _8 = &_9;
        _7 = <Cow<'_, str> as Deref>::deref(_8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = <std::string::String as AddAssign<&str>>::add_assign(move _6, _7) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_9) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _13 = &mut _2;
        _14 = const ":\n";
        _12 = <std::string::String as AddAssign<&str>>::add_assign(move _13, _14) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _0 = move _2;
        return;
    }

    bb9 (cleanup): {
        drop(_9) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn get_output(_1: &Meta, _2: &Colors, _3: &icon::Icons, _4: &Flags, _5: &DisplayOption<'_>, _6: &HashMap<Block, usize>) -> Vec<ANSIGenericString<'_, str>> {
    debug meta => _1;
    debug colors => _2;
    debug icons => _3;
    debug flags => _4;
    debug display_option => _5;
    debug padding_rules => _6;
    let mut _0: std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _7: std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _8: std::slice::Iter<'_, flags::blocks::Block>;
    let mut _9: std::slice::Iter<'_, flags::blocks::Block>;
    let _10: &[flags::blocks::Block];
    let mut _11: &std::vec::Vec<flags::blocks::Block>;
    let mut _13: std::option::Option<&flags::blocks::Block>;
    let mut _14: &mut std::slice::Iter<'_, flags::blocks::Block>;
    let mut _15: isize;
    let _17: ();
    let mut _18: isize;
    let mut _19: &mut std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _20: ansi_term::ANSIGenericString<'_, str>;
    let mut _21: &meta::inode::INode;
    let mut _22: &mut std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _23: ansi_term::ANSIGenericString<'_, str>;
    let mut _24: &meta::links::Links;
    let _26: &[ansi_term::ANSIGenericString<'_, str>; 2];
    let _27: [ansi_term::ANSIGenericString<'_, str>; 2];
    let mut _28: ansi_term::ANSIGenericString<'_, str>;
    let mut _29: meta::filetype::FileType;
    let mut _30: ansi_term::ANSIGenericString<'_, str>;
    let mut _31: &meta::permissions::Permissions;
    let mut _33: &ansi_term::ANSIGenericStrings<'_, str>;
    let _34: ansi_term::ANSIGenericStrings<'_, str>;
    let _35: ();
    let mut _36: &mut std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _37: ansi_term::ANSIGenericString<'_, str>;
    let mut _38: &mut std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _39: ansi_term::ANSIGenericString<'_, str>;
    let mut _40: &meta::owner::Owner;
    let mut _41: &mut std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _42: ansi_term::ANSIGenericString<'_, str>;
    let mut _43: &meta::owner::Owner;
    let mut _44: &mut std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _45: ansi_term::ANSIGenericString<'_, str>;
    let mut _46: &meta::size::Size;
    let _47: &&flags::Flags;
    let mut _48: usize;
    let mut _49: &usize;
    let mut _50: &mut std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _51: ansi_term::ANSIGenericString<'_, str>;
    let mut _52: &meta::size::Size;
    let mut _53: &flags::Flags;
    let mut _54: &mut std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _55: ansi_term::ANSIGenericString<'_, str>;
    let mut _56: &meta::date::Date;
    let _57: &&flags::Flags;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: &flags::layout::Layout;
    let mut _63: &ansi_term::ANSIGenericStrings<'_, str>;
    let _64: ansi_term::ANSIGenericStrings<'_, str>;
    let mut _65: &[ansi_term::ANSIGenericString<'_, str>];
    let _66: &[ansi_term::ANSIGenericString<'_, str>; 2];
    let _67: [ansi_term::ANSIGenericString<'_, str>; 2];
    let mut _68: ansi_term::ANSIGenericString<'_, str>;
    let mut _69: &meta::name::Name;
    let _70: &&meta::name::DisplayOption<'_>;
    let mut _71: ansi_term::ANSIGenericString<'_, str>;
    let mut _72: &meta::indicator::Indicator;
    let _73: &&flags::Flags;
    let mut _74: &ansi_term::ANSIGenericStrings<'_, str>;
    let _75: ansi_term::ANSIGenericStrings<'_, str>;
    let mut _76: &[ansi_term::ANSIGenericString<'_, str>];
    let _77: &[ansi_term::ANSIGenericString<'_, str>; 3];
    let _78: [ansi_term::ANSIGenericString<'_, str>; 3];
    let mut _79: ansi_term::ANSIGenericString<'_, str>;
    let mut _80: &meta::name::Name;
    let _81: &&meta::name::DisplayOption<'_>;
    let mut _82: ansi_term::ANSIGenericString<'_, str>;
    let mut _83: &meta::indicator::Indicator;
    let _84: &&flags::Flags;
    let mut _85: ansi_term::ANSIGenericString<'_, str>;
    let mut _86: &meta::symlink::SymLink;
    let _87: &&flags::Flags;
    let _88: ();
    let mut _89: &mut std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _90: ansi_term::ANSIGenericString<'_, str>;
    let mut _91: std::string::String;
    let mut _94: &flags::Flags;
    let mut _95: &flags::Flags;
    let mut _96: &meta::name::DisplayOption<'_>;
    let mut _97: &flags::Flags;
    let mut _98: &meta::name::DisplayOption<'_>;
    let mut _99: &flags::Flags;
    let mut _100: &flags::Flags;
    scope 1 {
        debug strings => _7;
        let mut _12: std::slice::Iter<'_, flags::blocks::Block>;
        scope 2 {
            debug iter => _12;
            let _16: &flags::blocks::Block;
            scope 3 {
                debug block => _16;
                let _25: &[ansi_term::ANSIGenericString<'_, str>];
                let _58: std::string::String;
                let mut _92: &flags::layout::Layout;
                let mut _93: &flags::blocks::Block;
                scope 4 {
                    debug s => _25;
                    let _32: std::string::String;
                    scope 5 {
                        debug res => _32;
                    }
                }
                scope 6 {
                    debug s => _58;
                }
            }
        }
    }

    bb0: {
        _7 = Vec::<ANSIGenericString<'_, str>>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = &(((*_4).0: flags::blocks::Blocks).0: std::vec::Vec<flags::blocks::Block>);
        _10 = <Vec<Block> as Deref>::deref(move _11) -> [return: bb2, unwind: bb56];
    }

    bb2: {
        _9 = core::slice::<impl [Block]>::iter(_10) -> [return: bb3, unwind: bb56];
    }

    bb3: {
        _8 = <std::slice::Iter<'_, Block> as IntoIterator>::into_iter(move _9) -> [return: bb4, unwind: bb56];
    }

    bb4: {
        _12 = move _8;
        goto -> bb5;
    }

    bb5: {
        _14 = &mut _12;
        _13 = <std::slice::Iter<'_, Block> as Iterator>::next(_14) -> [return: bb6, unwind: bb56];
    }

    bb6: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _16 = ((_13 as Some).0: &flags::blocks::Block);
        _18 = discriminant((*_16));
        switchInt(move _18) -> [0: bb15, 1: bb22, 2: bb24, 3: bb26, 4: bb29, 5: bb31, 6: bb10, 7: bb11, 8: bb13, otherwise: bb8];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _0 = move _7;
        return;
    }

    bb10: {
        _59 = (((*_4).9: flags::symlinks::NoSymlink).0: bool);
        switchInt(move _59) -> [0: bb33, otherwise: bb36];
    }

    bb11: {
        _19 = &mut _7;
        _21 = &((*_1).9: meta::inode::INode);
        _20 = INode::render(move _21, _2) -> [return: bb12, unwind: bb56];
    }

    bb12: {
        _17 = Vec::<ANSIGenericString<'_, str>>::push(move _19, move _20) -> [return: bb58, unwind: bb56];
    }

    bb13: {
        _22 = &mut _7;
        _24 = &((*_1).10: meta::links::Links);
        _23 = Links::render(move _24, _2) -> [return: bb14, unwind: bb56];
    }

    bb14: {
        _17 = Vec::<ANSIGenericString<'_, str>>::push(move _22, move _23) -> [return: bb59, unwind: bb56];
    }

    bb15: {
        _29 = ((*_1).5: meta::filetype::FileType);
        _28 = filetype::FileType::render(move _29, _2) -> [return: bb16, unwind: bb56];
    }

    bb16: {
        _31 = &((*_1).2: meta::permissions::Permissions);
        _30 = permissions::Permissions::render(move _31, _2) -> [return: bb17, unwind: bb55];
    }

    bb17: {
        _27 = [move _28, move _30];
        _26 = &_27;
        _25 = _26 as &[ansi_term::ANSIGenericString<'_, str>] (PointerCoercion(Unsize));
        _34 = ANSIStrings(_25) -> [return: bb18, unwind: bb54];
    }

    bb18: {
        _33 = &_34;
        _32 = <ANSIGenericStrings<'_, str> as ToString>::to_string(move _33) -> [return: bb19, unwind: bb54];
    }

    bb19: {
        _36 = &mut _7;
        _37 = <ANSIGenericString<'_, str> as From<std::string::String>>::from(move _32) -> [return: bb20, unwind: bb54];
    }

    bb20: {
        _35 = Vec::<ANSIGenericString<'_, str>>::push(move _36, move _37) -> [return: bb21, unwind: bb54];
    }

    bb21: {
        drop(_27) -> [return: bb5, unwind: bb56];
    }

    bb22: {
        _38 = &mut _7;
        _40 = &((*_1).4: meta::owner::Owner);
        _39 = Owner::render_user(move _40, _2) -> [return: bb23, unwind: bb56];
    }

    bb23: {
        _17 = Vec::<ANSIGenericString<'_, str>>::push(move _38, move _39) -> [return: bb60, unwind: bb56];
    }

    bb24: {
        _41 = &mut _7;
        _43 = &((*_1).4: meta::owner::Owner);
        _42 = Owner::render_group(move _43, _2) -> [return: bb25, unwind: bb56];
    }

    bb25: {
        _17 = Vec::<ANSIGenericString<'_, str>>::push(move _41, move _42) -> [return: bb61, unwind: bb56];
    }

    bb26: {
        _44 = &mut _7;
        _46 = &((*_1).6: meta::size::Size);
        _47 = &_4;
        _94 = deref_copy (*_47);
        _93 = const _;
        _49 = <HashMap<Block, usize> as std::ops::Index<&Block>>::index(_6, _93) -> [return: bb27, unwind: bb56];
    }

    bb27: {
        _48 = (*_49);
        _45 = Size::render(move _46, _2, _94, move _48) -> [return: bb28, unwind: bb56];
    }

    bb28: {
        _17 = Vec::<ANSIGenericString<'_, str>>::push(move _44, move _45) -> [return: bb62, unwind: bb56];
    }

    bb29: {
        _50 = &mut _7;
        _52 = &((*_1).6: meta::size::Size);
        _53 = _4;
        _51 = Size::render_value(move _52, _2, move _53) -> [return: bb30, unwind: bb56];
    }

    bb30: {
        _17 = Vec::<ANSIGenericString<'_, str>>::push(move _50, move _51) -> [return: bb63, unwind: bb56];
    }

    bb31: {
        _54 = &mut _7;
        _56 = &((*_1).3: meta::date::Date);
        _57 = &_4;
        _95 = deref_copy (*_57);
        _55 = meta::date::Date::render(move _56, _2, _95) -> [return: bb32, unwind: bb56];
    }

    bb32: {
        _17 = Vec::<ANSIGenericString<'_, str>>::push(move _54, move _55) -> [return: bb64, unwind: bb56];
    }

    bb33: {
        _60 = (((*_4).3: flags::dereference::Dereference).0: bool);
        switchInt(move _60) -> [0: bb34, otherwise: bb36];
    }

    bb34: {
        _62 = &((*_4).8: flags::layout::Layout);
        _92 = const _;
        _61 = <layout::Layout as PartialEq>::eq(move _62, _92) -> [return: bb35, unwind: bb56];
    }

    bb35: {
        switchInt(move _61) -> [0: bb41, otherwise: bb36];
    }

    bb36: {
        _69 = &((*_1).0: meta::name::Name);
        _70 = &_5;
        _96 = deref_copy (*_70);
        _68 = Name::render(move _69, _2, _3, _96) -> [return: bb37, unwind: bb56];
    }

    bb37: {
        _72 = &((*_1).8: meta::indicator::Indicator);
        _73 = &_4;
        _97 = deref_copy (*_73);
        _71 = indicator::Indicator::render(move _72, _97) -> [return: bb38, unwind: bb53];
    }

    bb38: {
        _67 = [move _68, move _71];
        _66 = &_67;
        _65 = _66 as &[ansi_term::ANSIGenericString<'_, str>] (PointerCoercion(Unsize));
        _64 = ANSIStrings(move _65) -> [return: bb39, unwind: bb52];
    }

    bb39: {
        _63 = &_64;
        _58 = <ANSIGenericStrings<'_, str> as ToString>::to_string(move _63) -> [return: bb40, unwind: bb52];
    }

    bb40: {
        drop(_67) -> [return: bb47, unwind: bb56];
    }

    bb41: {
        _80 = &((*_1).0: meta::name::Name);
        _81 = &_5;
        _98 = deref_copy (*_81);
        _79 = Name::render(move _80, _2, _3, _98) -> [return: bb42, unwind: bb56];
    }

    bb42: {
        _83 = &((*_1).8: meta::indicator::Indicator);
        _84 = &_4;
        _99 = deref_copy (*_84);
        _82 = indicator::Indicator::render(move _83, _99) -> [return: bb43, unwind: bb51];
    }

    bb43: {
        _86 = &((*_1).7: meta::symlink::SymLink);
        _87 = &_4;
        _100 = deref_copy (*_87);
        _85 = SymLink::render(move _86, _2, _100) -> [return: bb44, unwind: bb50];
    }

    bb44: {
        _78 = [move _79, move _82, move _85];
        _77 = &_78;
        _76 = _77 as &[ansi_term::ANSIGenericString<'_, str>] (PointerCoercion(Unsize));
        _75 = ANSIStrings(move _76) -> [return: bb45, unwind: bb49];
    }

    bb45: {
        _74 = &_75;
        _58 = <ANSIGenericStrings<'_, str> as ToString>::to_string(move _74) -> [return: bb46, unwind: bb49];
    }

    bb46: {
        drop(_78) -> [return: bb47, unwind: bb56];
    }

    bb47: {
        _89 = &mut _7;
        _91 = move _58;
        _90 = <ANSIGenericString<'_, str> as From<std::string::String>>::from(move _91) -> [return: bb48, unwind: bb56];
    }

    bb48: {
        _88 = Vec::<ANSIGenericString<'_, str>>::push(move _89, move _90) -> [return: bb65, unwind: bb56];
    }

    bb49 (cleanup): {
        drop(_78) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_82) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_79) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_67) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_68) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_27) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_28) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_7) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }

    bb58: {
        goto -> bb5;
    }

    bb59: {
        goto -> bb5;
    }

    bb60: {
        goto -> bb5;
    }

    bb61: {
        goto -> bb5;
    }

    bb62: {
        goto -> bb5;
    }

    bb63: {
        goto -> bb5;
    }

    bb64: {
        goto -> bb5;
    }

    bb65: {
        goto -> bb5;
    }
}

promoted[0] in get_output: &layout::Layout = {
    let mut _0: &flags::layout::Layout;
    let mut _1: flags::layout::Layout;

    bb0: {
        _1 = layout::Layout::Grid;
        _0 = &_1;
        return;
    }
}

promoted[1] in get_output: &Block = {
    let mut _0: &flags::blocks::Block;
    let mut _1: flags::blocks::Block;

    bb0: {
        _1 = Block::SizeValue;
        _0 = &_1;
        return;
    }
}

fn get_visible_width(_1: &str) -> usize {
    debug input => _1;
    let mut _0: usize;
    let mut _2: usize;
    let mut _3: std::str::MatchIndices<'_, &str>;
    let mut _4: std::str::MatchIndices<'_, &str>;
    let mut _6: std::option::Option<(usize, &str)>;
    let mut _7: &mut std::str::MatchIndices<'_, &str>;
    let mut _8: isize;
    let mut _11: (&str, &str);
    let mut _13: isize;
    let mut _15: (usize, bool);
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: (usize, bool);
    scope 1 {
        debug nb_invisible_char => _2;
        let mut _5: std::str::MatchIndices<'_, &str>;
        scope 2 {
            debug iter => _5;
            let _9: usize;
            scope 3 {
                debug idx => _9;
                let _10: &str;
                scope 4 {
                    debug s => _10;
                    let _12: std::option::Option<usize>;
                    scope 5 {
                        debug m_pos => _12;
                        scope 6 {
                            debug len => _14;
                            let _14: usize;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const 0_usize;
        _4 = core::str::<impl str>::match_indices::<'_, &str>(_1, const "\u{1b}[") -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <MatchIndices<'_, &str> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = move _3;
        goto -> bb3;
    }

    bb3: {
        _7 = &mut _5;
        _6 = <MatchIndices<'_, &str> as Iterator>::next(_7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _9 = (((_6 as Some).0: (usize, &str)).0: usize);
        _11 = core::str::<impl str>::split_at(_1, _9) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _16 = <str as UnicodeWidthStr>::width(_1) -> [return: bb12, unwind continue];
    }

    bb8: {
        _10 = (_11.1: &str);
        _12 = core::str::<impl str>::find::<'_, char>(_10, const 'm') -> [return: bb9, unwind continue];
    }

    bb9: {
        _13 = discriminant(_12);
        switchInt(move _13) -> [1: bb10, otherwise: bb3];
    }

    bb10: {
        _14 = ((_12 as Some).0: usize);
        _15 = CheckedAdd(_2, _14);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, _14) -> [success: bb11, unwind continue];
    }

    bb11: {
        _2 = move (_15.0: usize);
        goto -> bb3;
    }

    bb12: {
        _17 = _2;
        _18 = CheckedSub(_16, _17);
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _16, move _17) -> [success: bb13, unwind continue];
    }

    bb13: {
        _0 = move (_18.0: usize);
        return;
    }
}

fn detect_size_lengths(_1: &[Meta], _2: &Flags) -> usize {
    debug metas => _1;
    debug flags => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: std::slice::Iter<'_, meta::Meta>;
    let mut _6: std::option::Option<&meta::Meta>;
    let mut _7: &mut std::slice::Iter<'_, meta::Meta>;
    let mut _8: isize;
    let mut _11: &std::string::String;
    let _12: std::string::String;
    let mut _13: &meta::size::Size;
    let mut _14: bool;
    let mut _15: usize;
    scope 1 {
        debug max_value_length => _3;
        let mut _5: std::slice::Iter<'_, meta::Meta>;
        scope 2 {
            debug iter => _5;
            let _9: &meta::Meta;
            scope 3 {
                debug meta => _9;
                let _10: usize;
                scope 4 {
                    debug value_len => _10;
                }
            }
        }
    }

    bb0: {
        _3 = const 0_usize;
        _4 = <&[Meta] as IntoIterator>::into_iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = move _4;
        goto -> bb2;
    }

    bb2: {
        _7 = &mut _5;
        _6 = <std::slice::Iter<'_, Meta> as Iterator>::next(_7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _9 = ((_6 as Some).0: &meta::Meta);
        _13 = &((*_9).6: meta::size::Size);
        _12 = Size::value_string(move _13, _2) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _0 = _3;
        return;
    }

    bb7: {
        _11 = &_12;
        _10 = std::string::String::len(move _11) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_12) -> [return: bb9, unwind continue];
    }

    bb9: {
        _15 = _3;
        _14 = Gt(_10, move _15);
        switchInt(move _14) -> [0: bb2, otherwise: bb10];
    }

    bb10: {
        _3 = _10;
        goto -> bb2;
    }

    bb11 (cleanup): {
        drop(_12) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn get_padding_rules(_1: &[Meta], _2: &Flags) -> HashMap<Block, usize> {
    debug metas => _1;
    debug flags => _2;
    let mut _0: std::collections::HashMap<flags::blocks::Block, usize>;
    let mut _3: std::collections::HashMap<flags::blocks::Block, usize>;
    let mut _4: bool;
    let _5: &[flags::blocks::Block];
    let mut _6: &std::vec::Vec<flags::blocks::Block>;
    let _8: &&[meta::Meta];
    let _9: &&flags::Flags;
    let _10: std::option::Option<usize>;
    let mut _11: &mut std::collections::HashMap<flags::blocks::Block, usize>;
    let mut _12: flags::blocks::Block;
    let mut _14: &[meta::Meta];
    let mut _15: &flags::Flags;
    scope 1 {
        debug padding_rules => _3;
        let _7: usize;
        let mut _13: &flags::blocks::Block;
        scope 2 {
            debug size_val => _7;
        }
    }

    bb0: {
        _3 = HashMap::<Block, usize>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &(((*_2).0: flags::blocks::Blocks).0: std::vec::Vec<flags::blocks::Block>);
        _5 = <Vec<Block> as Deref>::deref(move _6) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _13 = const _;
        _4 = core::slice::<impl [Block]>::contains(_5, _13) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        switchInt(move _4) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        _8 = &_1;
        _14 = deref_copy (*_8);
        _9 = &_2;
        _15 = deref_copy (*_9);
        _7 = detect_size_lengths(_14, _15) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        _11 = &mut _3;
        _12 = Block::SizeValue;
        _10 = HashMap::<Block, usize>::insert(move _11, move _12, _7) -> [return: bb9, unwind: bb7];
    }

    bb6: {
        _0 = move _3;
        return;
    }

    bb7 (cleanup): {
        drop(_3) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9: {
        goto -> bb6;
    }
}

promoted[0] in get_padding_rules: &Block = {
    let mut _0: &flags::blocks::Block;
    let mut _1: flags::blocks::Block;

    bb0: {
        _1 = Block::Size;
        _0 = &_1;
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:12:10: 12:15>::clone(_1: &Blocks) -> Blocks {
    debug self => _1;
    let mut _0: flags::blocks::Blocks;
    let mut _2: std::vec::Vec<flags::blocks::Block>;
    let _3: &std::vec::Vec<flags::blocks::Block>;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<flags::blocks::Block>);
        _2 = <Vec<Block> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Blocks(move _2);
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:12:17: 12:22>::fmt(_1: &Blocks, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::vec::Vec<flags::blocks::Block>;
    let _6: &std::vec::Vec<flags::blocks::Block>;

    bb0: {
        _3 = const "Blocks";
        _6 = &((*_1).0: std::vec::Vec<flags::blocks::Block>);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:12:24: 12:33>::eq(_1: &Blocks, _2: &Blocks) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::vec::Vec<flags::blocks::Block>;
    let mut _4: &std::vec::Vec<flags::blocks::Block>;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<flags::blocks::Block>);
        _4 = &((*_2).0: std::vec::Vec<flags::blocks::Block>);
        _0 = <Vec<Block> as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:12:35: 12:37>::assert_receiver_is_total_eq(_1: &Blocks) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:15:1: 15:12>::configure_from(_1: &ArgMatches<'_>, _2: &Config) -> Result<Blocks, clap::Error> {
    debug matches => _1;
    debug config => _2;
    let mut _0: std::result::Result<flags::blocks::Blocks, clap::Error>;
    let mut _3: std::result::Result<flags::blocks::Blocks, clap::Error>;
    let mut _4: bool;
    let mut _5: flags::blocks::Blocks;
    let mut _6: flags::blocks::Blocks;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: std::option::Option<flags::blocks::Blocks>;
    let mut _10: isize;
    let mut _12: std::result::Result<flags::blocks::Blocks, clap::Error>;
    let mut _13: std::option::Option<std::result::Result<flags::blocks::Blocks, clap::Error>>;
    let mut _14: isize;
    let mut _16: bool;
    let mut _17: std::result::Result<&mut flags::blocks::Blocks, &mut clap::Error>;
    let mut _18: &mut std::result::Result<flags::blocks::Blocks, clap::Error>;
    let mut _19: isize;
    let _21: ();
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: isize;
    let mut _25: isize;
    scope 1 {
        debug result => _3;
        scope 2 {
            debug value => _11;
            let _11: flags::blocks::Blocks;
        }
        scope 3 {
            debug value => _15;
            let _15: std::result::Result<flags::blocks::Blocks, clap::Error>;
        }
        scope 4 {
            debug blocks => _20;
            let _20: &mut flags::blocks::Blocks;
        }
    }

    bb0: {
        _22 = const false;
        _23 = const false;
        _4 = ArgMatches::<'_>::is_present::<&str>(_1, const "long") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _5 = Blocks::long() -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = Result::<Blocks, clap::Error>::Ok(move _5);
        goto -> bb6;
    }

    bb4: {
        _6 = <Blocks as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        _3 = Result::<Blocks, clap::Error>::Ok(move _6);
        goto -> bb6;
    }

    bb6: {
        _7 = ArgMatches::<'_>::is_present::<&str>(_1, const "long") -> [return: bb7, unwind: bb25];
    }

    bb7: {
        switchInt(move _7) -> [0: bb15, otherwise: bb8];
    }

    bb8: {
        _8 = ArgMatches::<'_>::is_present::<&str>(_1, const "ignore-config") -> [return: bb9, unwind: bb25];
    }

    bb9: {
        switchInt(move _8) -> [0: bb10, otherwise: bb15];
    }

    bb10: {
        _9 = Blocks::from_config(_2) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _22 = const true;
        _10 = discriminant(_9);
        switchInt(move _10) -> [1: bb12, otherwise: bb30];
    }

    bb12: {
        _22 = const false;
        _11 = move ((_9 as Some).0: flags::blocks::Blocks);
        _12 = Result::<Blocks, clap::Error>::Ok(move _11);
        drop(_3) -> [return: bb13, unwind: bb14];
    }

    bb13: {
        _3 = move _12;
        goto -> bb30;
    }

    bb14 (cleanup): {
        _3 = move _12;
        goto -> bb25;
    }

    bb15: {
        _13 = Blocks::from_arg_matches(_1) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        _23 = const true;
        _14 = discriminant(_13);
        switchInt(move _14) -> [1: bb17, otherwise: bb34];
    }

    bb17: {
        _23 = const false;
        _15 = move ((_13 as Some).0: std::result::Result<flags::blocks::Blocks, clap::Error>);
        drop(_3) -> [return: bb18, unwind: bb19];
    }

    bb18: {
        _3 = move _15;
        goto -> bb34;
    }

    bb19 (cleanup): {
        _3 = move _15;
        goto -> bb25;
    }

    bb20: {
        switchInt(move _16) -> [0: bb24, otherwise: bb21];
    }

    bb21: {
        _18 = &mut _3;
        _17 = Result::<Blocks, clap::Error>::as_mut(move _18) -> [return: bb22, unwind: bb25];
    }

    bb22: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb23, otherwise: bb24];
    }

    bb23: {
        _20 = move ((_17 as Ok).0: &mut flags::blocks::Blocks);
        _21 = Blocks::optional_prepend_inode(_20) -> [return: bb35, unwind: bb25];
    }

    bb24: {
        _0 = move _3;
        return;
    }

    bb25 (cleanup): {
        drop(_3) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27: {
        _22 = const false;
        goto -> bb15;
    }

    bb28: {
        switchInt(_22) -> [0: bb27, otherwise: bb29];
    }

    bb29: {
        drop(((_9 as Some).0: flags::blocks::Blocks)) -> [return: bb27, unwind: bb25];
    }

    bb30: {
        _24 = discriminant(_9);
        switchInt(move _24) -> [1: bb28, otherwise: bb27];
    }

    bb31: {
        _23 = const false;
        _16 = ArgMatches::<'_>::is_present::<&str>(_1, const "inode") -> [return: bb20, unwind: bb25];
    }

    bb32: {
        switchInt(_23) -> [0: bb31, otherwise: bb33];
    }

    bb33: {
        drop(((_13 as Some).0: std::result::Result<flags::blocks::Blocks, clap::Error>)) -> [return: bb31, unwind: bb25];
    }

    bb34: {
        _25 = discriminant(_13);
        switchInt(move _25) -> [1: bb32, otherwise: bb31];
    }

    bb35: {
        goto -> bb24;
    }
}

fn blocks::<impl at src/flags/blocks.rs:15:1: 15:12>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<Result<Blocks, clap::Error>> {
    debug matches => _1;
    let mut _0: std::option::Option<std::result::Result<flags::blocks::Blocks, clap::Error>>;
    let mut _2: bool;
    let mut _3: u64;
    let mut _4: std::option::Option<clap::Values<'_>>;
    let mut _5: isize;
    let mut _8: clap::Values<'_>;
    let _10: ();
    let mut _11: std::option::Option<&str>;
    let mut _12: &mut clap::Values<'_>;
    let mut _13: isize;
    let mut _15: std::result::Result<flags::blocks::Block, std::string::String>;
    let mut _16: isize;
    let mut _18: &mut std::vec::Vec<flags::blocks::Block>;
    let mut _20: std::result::Result<flags::blocks::Blocks, clap::Error>;
    let mut _21: clap::Error;
    let _22: &str;
    let _23: &std::string::String;
    let mut _24: clap::ErrorKind;
    let mut _25: std::result::Result<flags::blocks::Blocks, clap::Error>;
    let mut _26: flags::blocks::Blocks;
    let mut _27: std::vec::Vec<flags::blocks::Block>;
    scope 1 {
        debug values => _6;
        let _6: clap::Values<'_>;
        let mut _7: std::vec::Vec<flags::blocks::Block>;
        scope 2 {
            debug blocks => _7;
            let mut _9: clap::Values<'_>;
            scope 3 {
                debug iter => _9;
                let _14: &str;
                scope 4 {
                    debug value => _14;
                    let _17: flags::blocks::Block;
                    let _19: std::string::String;
                    scope 5 {
                        debug block => _17;
                    }
                    scope 6 {
                        debug message => _19;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = ArgMatches::<'_>::occurrences_of::<&str>(_1, const "blocks") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Gt(move _3, const 0_u64);
        switchInt(move _2) -> [0: bb18, otherwise: bb2];
    }

    bb2: {
        _4 = ArgMatches::<'_>::values_of::<&str>(_1, const "blocks") -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = discriminant(_4);
        switchInt(move _5) -> [1: bb4, otherwise: bb17];
    }

    bb4: {
        _6 = move ((_4 as Some).0: clap::Values<'_>);
        _7 = Vec::<Block>::new() -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = <clap::Values<'_> as IntoIterator>::into_iter(move _6) -> [return: bb6, unwind: bb22];
    }

    bb6: {
        _9 = move _8;
        goto -> bb7;
    }

    bb7: {
        _12 = &mut _9;
        _11 = <clap::Values<'_> as Iterator>::next(_12) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        _14 = ((_11 as Some).0: &str);
        _15 = <Block as TryFrom<&str>>::try_from(_14) -> [return: bb12, unwind: bb22];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _27 = move _7;
        _26 = Blocks(move _27);
        _25 = Result::<Blocks, clap::Error>::Ok(move _26);
        _0 = std::option::Option::<Result<Blocks, clap::Error>>::Some(move _25);
        goto -> bb20;
    }

    bb12: {
        _16 = discriminant(_15);
        switchInt(move _16) -> [0: bb14, 1: bb13, otherwise: bb10];
    }

    bb13: {
        _19 = move ((_15 as Err).0: std::string::String);
        _23 = &_19;
        _22 = <std::string::String as Deref>::deref(_23) -> [return: bb15, unwind: bb21];
    }

    bb14: {
        _17 = ((_15 as Ok).0: flags::blocks::Block);
        _18 = &mut _7;
        _10 = Vec::<Block>::push(move _18, _17) -> [return: bb24, unwind: bb22];
    }

    bb15: {
        _24 = ValueValidation;
        _21 = clap::Error::with_description(_22, move _24) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _20 = Result::<Blocks, clap::Error>::Err(move _21);
        _0 = std::option::Option::<Result<Blocks, clap::Error>>::Some(move _20);
        drop(_19) -> [return: bb19, unwind: bb22];
    }

    bb17: {
        _0 = std::option::Option::<Result<Blocks, clap::Error>>::None;
        goto -> bb20;
    }

    bb18: {
        _0 = std::option::Option::<Result<Blocks, clap::Error>>::None;
        goto -> bb20;
    }

    bb19: {
        drop(_7) -> [return: bb20, unwind continue];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_19) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_7) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24: {
        goto -> bb7;
    }
}

fn blocks::<impl at src/flags/blocks.rs:15:1: 15:12>::from_config(_1: &Config) -> std::option::Option<Blocks> {
    debug config => _1;
    let mut _0: std::option::Option<flags::blocks::Blocks>;
    let mut _2: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _3: isize;
    let mut _6: std::slice::Iter<'_, std::string::String>;
    let mut _7: std::slice::Iter<'_, std::string::String>;
    let _8: &[std::string::String];
    let _10: ();
    let mut _11: std::option::Option<&std::string::String>;
    let mut _12: &mut std::slice::Iter<'_, std::string::String>;
    let mut _13: isize;
    let mut _15: std::result::Result<flags::blocks::Block, std::string::String>;
    let mut _16: &str;
    let mut _17: isize;
    let mut _19: &mut std::vec::Vec<flags::blocks::Block>;
    let mut _23: &std::io::Stderr;
    let mut _25: &mut std::io::StderrLock<'_>;
    let _26: &[u8];
    let mut _27: &std::string::String;
    let _28: std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: &std::string::String;
    let mut _46: bool;
    let mut _47: &std::result::Result<(), std::io::Error>;
    let _48: !;
    let mut _49: bool;
    let mut _50: &std::vec::Vec<flags::blocks::Block>;
    let mut _51: flags::blocks::Blocks;
    let mut _52: std::vec::Vec<flags::blocks::Block>;
    let mut _55: bool;
    scope 1 {
        debug c => _4;
        let _4: &std::vec::Vec<std::string::String>;
        let mut _5: std::vec::Vec<flags::blocks::Block>;
        scope 2 {
            debug blocks => _5;
            let mut _9: std::slice::Iter<'_, std::string::String>;
            scope 3 {
                debug iter => _9;
                let _14: &std::string::String;
                scope 4 {
                    debug b => _14;
                    let _18: flags::blocks::Block;
                    let _20: std::string::String;
                    scope 5 {
                        debug block => _18;
                    }
                    scope 6 {
                        debug err => _20;
                        let _21: std::io::Stderr;
                        scope 7 {
                            debug stderr => _21;
                            let mut _22: std::io::StderrLock<'_>;
                            scope 8 {
                                debug handle => _22;
                                let _24: std::result::Result<(), std::io::Error>;
                                let _29: std::string::String;
                                let _38: std::string::String;
                                let mut _53: &[&str; 2];
                                let mut _54: &[&str; 2];
                                scope 9 {
                                    debug res => _24;
                                }
                                scope 10 {
                                    debug res => _29;
                                }
                                scope 11 {
                                    debug res => _38;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _55 = const false;
        _2 = &((*_1).1: std::option::Option<std::vec::Vec<std::string::String>>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb37];
    }

    bb1: {
        _4 = &(((*_2) as Some).0: std::vec::Vec<std::string::String>);
        _55 = const true;
        _5 = Vec::<Block>::new() -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = <Vec<std::string::String> as Deref>::deref(_4) -> [return: bb3, unwind: bb45];
    }

    bb3: {
        _7 = core::slice::<impl [std::string::String]>::iter(_8) -> [return: bb4, unwind: bb45];
    }

    bb4: {
        _6 = <std::slice::Iter<'_, std::string::String> as IntoIterator>::into_iter(move _7) -> [return: bb5, unwind: bb45];
    }

    bb5: {
        _9 = move _6;
        goto -> bb6;
    }

    bb6: {
        _12 = &mut _9;
        _11 = <std::slice::Iter<'_, std::string::String> as Iterator>::next(_12) -> [return: bb7, unwind: bb45];
    }

    bb7: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _14 = ((_11 as Some).0: &std::string::String);
        _16 = std::string::String::as_str(_14) -> [return: bb11, unwind: bb45];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _50 = &_5;
        _49 = Vec::<Block>::is_empty(move _50) -> [return: bb32, unwind: bb45];
    }

    bb11: {
        _15 = <Block as TryFrom<&str>>::try_from(move _16) -> [return: bb12, unwind: bb45];
    }

    bb12: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb14, 1: bb13, otherwise: bb9];
    }

    bb13: {
        _20 = move ((_15 as Err).0: std::string::String);
        _21 = stderr() -> [return: bb15, unwind: bb44];
    }

    bb14: {
        _18 = ((_15 as Ok).0: flags::blocks::Block);
        _19 = &mut _5;
        _10 = Vec::<Block>::push(move _19, _18) -> [return: bb48, unwind: bb45];
    }

    bb15: {
        _23 = &_21;
        _22 = Stderr::lock(move _23) -> [return: bb16, unwind: bb44];
    }

    bb16: {
        _25 = &mut _22;
        _54 = const _;
        _31 = _54 as &[&str] (PointerCoercion(Unsize));
        _53 = const _;
        _40 = _53 as &[&str] (PointerCoercion(Unsize));
        _45 = &_20;
        _44 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_45) -> [return: bb17, unwind: bb43];
    }

    bb17: {
        _43 = [move _44];
        _42 = &_43;
        _41 = _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _39 = Arguments::<'_>::new_v1(move _40, move _41) -> [return: bb18, unwind: bb43];
    }

    bb18: {
        _38 = std::fmt::format(move _39) -> [return: bb19, unwind: bb43];
    }

    bb19: {
        _37 = move _38;
        _36 = &_37;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_36) -> [return: bb20, unwind: bb42];
    }

    bb20: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb21, unwind: bb42];
    }

    bb21: {
        _29 = std::fmt::format(move _30) -> [return: bb22, unwind: bb42];
    }

    bb22: {
        drop(_37) -> [return: bb23, unwind: bb41];
    }

    bb23: {
        _28 = move _29;
        _27 = &_28;
        _26 = std::string::String::as_bytes(move _27) -> [return: bb24, unwind: bb40];
    }

    bb24: {
        _24 = <StderrLock<'_> as std::io::Write>::write_all(move _25, _26) -> [return: bb25, unwind: bb40];
    }

    bb25: {
        drop(_28) -> [return: bb26, unwind: bb39];
    }

    bb26: {
        _47 = &_24;
        _46 = Result::<(), std::io::Error>::is_err(move _47) -> [return: bb27, unwind: bb39];
    }

    bb27: {
        switchInt(move _46) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _48 = std::process::exit(const 0_i32) -> bb39;
    }

    bb29: {
        drop(_24) -> [return: bb30, unwind: bb43];
    }

    bb30: {
        drop(_22) -> [return: bb31, unwind: bb44];
    }

    bb31: {
        drop(_20) -> [return: bb6, unwind: bb45];
    }

    bb32: {
        switchInt(move _49) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _0 = std::option::Option::<Blocks>::None;
        goto -> bb35;
    }

    bb34: {
        _55 = const false;
        _52 = move _5;
        _51 = Blocks(move _52);
        _0 = std::option::Option::<Blocks>::Some(move _51);
        goto -> bb35;
    }

    bb35: {
        switchInt(_55) -> [0: bb36, otherwise: bb47];
    }

    bb36: {
        _55 = const false;
        goto -> bb38;
    }

    bb37: {
        _0 = std::option::Option::<Blocks>::None;
        goto -> bb38;
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        drop(_24) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_28) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_29) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_37) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_22) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_20) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_5) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        resume;
    }

    bb47: {
        drop(_5) -> [return: bb36, unwind continue];
    }

    bb48: {
        goto -> bb6;
    }
}

promoted[0] in blocks::<impl at src/flags/blocks.rs:15:1: 15:12>::from_config: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "."];
        _0 = &_1;
        return;
    }
}

promoted[1] in blocks::<impl at src/flags/blocks.rs:15:1: 15:12>::from_config: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:15:1: 15:12>::long() -> Blocks {
    let mut _0: flags::blocks::Blocks;
    let mut _1: std::vec::Vec<flags::blocks::Block>;
    let mut _2: std::boxed::Box<[flags::blocks::Block]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[flags::blocks::Block; 6]>;
    let mut _7: flags::blocks::Block;
    let mut _8: flags::blocks::Block;
    let mut _9: flags::blocks::Block;
    let mut _10: flags::blocks::Block;
    let mut _11: flags::blocks::Block;
    let mut _12: flags::blocks::Block;
    let mut _13: *const [flags::blocks::Block; 6];
    let mut _14: *const ();
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    scope 1 {
    }

    bb0: {
        _3 = SizeOf([flags::blocks::Block; 6]);
        _4 = AlignOf([flags::blocks::Block; 6]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [flags::blocks::Block; 6]);
        _7 = Block::Permission;
        _8 = Block::User;
        _9 = Block::Group;
        _10 = Block::Size;
        _11 = Block::Date;
        _12 = Block::Name;
        _13 = (((_6.0: std::ptr::Unique<[flags::blocks::Block; 6]>).0: std::ptr::NonNull<[flags::blocks::Block; 6]>).0: *const [flags::blocks::Block; 6]);
        _14 = _13 as *const () (PtrToPtr);
        _15 = _14 as usize (Transmute);
        _16 = AlignOf([flags::blocks::Block; 6]);
        _17 = Sub(_16, const 1_usize);
        _18 = BitAnd(_15, _17);
        _19 = Eq(_18, const 0_usize);
        assert(_19, "misaligned pointer dereference: address must be a multiple of {} but is {}", _16, _15) -> [success: bb3, unwind unreachable];
    }

    bb2: {
        _0 = Blocks(move _1);
        return;
    }

    bb3: {
        (*_13) = [move _7, move _8, move _9, move _10, move _11, move _12];
        _2 = move _6 as std::boxed::Box<[flags::blocks::Block]> (PointerCoercion(Unsize));
        _1 = slice::<impl [Block]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

fn blocks::<impl at src/flags/blocks.rs:15:1: 15:12>::contains_inode(_1: &Blocks) -> bool {
    debug self => _1;
    let mut _0: bool;
    let _2: &[flags::blocks::Block];
    let mut _3: &std::vec::Vec<flags::blocks::Block>;
    let mut _4: &flags::blocks::Block;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<flags::blocks::Block>);
        _2 = <Vec<Block> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = const _;
        _0 = core::slice::<impl [Block]>::contains(_2, _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in blocks::<impl at src/flags/blocks.rs:15:1: 15:12>::contains_inode: &Block = {
    let mut _0: &flags::blocks::Block;
    let mut _1: flags::blocks::Block;

    bb0: {
        _1 = Block::INode;
        _0 = &_1;
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:15:1: 15:12>::prepend_inode(_1: &mut Blocks) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &mut std::vec::Vec<flags::blocks::Block>;
    let mut _4: flags::blocks::Block;

    bb0: {
        _3 = &mut ((*_1).0: std::vec::Vec<flags::blocks::Block>);
        _4 = Block::INode;
        _2 = Vec::<Block>::insert(move _3, const 0_usize, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:15:1: 15:12>::optional_prepend_inode(_1: &mut Blocks) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _3: &flags::blocks::Blocks;

    bb0: {
        _3 = &(*_1);
        _2 = Blocks::contains_inode(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _0 = Blocks::prepend_inode(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:150:1: 150:24>::default() -> Blocks {
    let mut _0: flags::blocks::Blocks;
    let mut _1: std::vec::Vec<flags::blocks::Block>;
    let mut _2: std::boxed::Box<[flags::blocks::Block]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[flags::blocks::Block; 1]>;
    let mut _7: flags::blocks::Block;
    let mut _8: *const [flags::blocks::Block; 1];
    let mut _9: *const ();
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    scope 1 {
    }

    bb0: {
        _3 = SizeOf([flags::blocks::Block; 1]);
        _4 = AlignOf([flags::blocks::Block; 1]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [flags::blocks::Block; 1]);
        _7 = Block::Name;
        _8 = (((_6.0: std::ptr::Unique<[flags::blocks::Block; 1]>).0: std::ptr::NonNull<[flags::blocks::Block; 1]>).0: *const [flags::blocks::Block; 1]);
        _9 = _8 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf([flags::blocks::Block; 1]);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb3, unwind unreachable];
    }

    bb2: {
        _0 = Blocks(move _1);
        return;
    }

    bb3: {
        (*_8) = [move _7];
        _2 = move _6 as std::boxed::Box<[flags::blocks::Block]> (PointerCoercion(Unsize));
        _1 = slice::<impl [Block]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

fn blocks::<impl at src/flags/blocks.rs:157:10: 157:15>::clone(_1: &Block) -> Block {
    debug self => _1;
    let mut _0: flags::blocks::Block;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:157:17: 157:22>::fmt(_1: &Block, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;
    let _10: &str;
    let _11: &str;
    let _12: &str;
    let _13: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb1, otherwise: bb2];
    }

    bb1: {
        _13 = const "Links";
        _3 = _13;
        goto -> bb11;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Permission";
        _3 = _5;
        goto -> bb11;
    }

    bb4: {
        _6 = const "User";
        _3 = _6;
        goto -> bb11;
    }

    bb5: {
        _7 = const "Group";
        _3 = _7;
        goto -> bb11;
    }

    bb6: {
        _8 = const "Size";
        _3 = _8;
        goto -> bb11;
    }

    bb7: {
        _9 = const "SizeValue";
        _3 = _9;
        goto -> bb11;
    }

    bb8: {
        _10 = const "Date";
        _3 = _10;
        goto -> bb11;
    }

    bb9: {
        _11 = const "Name";
        _3 = _11;
        goto -> bb11;
    }

    bb10: {
        _12 = const "INode";
        _3 = _12;
        goto -> bb11;
    }

    bb11: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:157:30: 157:39>::eq(_1: &Block, _2: &Block) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:157:41: 157:43>::assert_receiver_is_total_eq(_1: &Block) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:157:45: 157:49>::hash(_1: &Block, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: isize;
    let _4: &isize;
    scope 1 {
        debug __self_tag => _3;
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = &_3;
        _0 = <isize as std::hash::Hash>::hash::<__H>(_4, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:157:51: 157:61>::partial_cmp(_1: &Block, _2: &Block) -> std::option::Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let _3: isize;
    let _5: &isize;
    let _6: &isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = &_3;
        _6 = &_4;
        _0 = <isize as PartialOrd>::partial_cmp(_5, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:157:63: 157:66>::cmp(_1: &Block, _2: &Block) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let _3: isize;
    let _5: &isize;
    let _6: &isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = &_3;
        _6 = &_4;
        _0 = <isize as Ord>::cmp(_5, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn blocks::<impl at src/flags/blocks.rs:170:1: 170:29>::try_from(_1: &str) -> Result<Block, std::string::String> {
    debug string => _1;
    let mut _0: std::result::Result<flags::blocks::Block, std::string::String>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: flags::blocks::Block;
    let mut _12: flags::blocks::Block;
    let mut _13: flags::blocks::Block;
    let mut _14: flags::blocks::Block;
    let mut _15: flags::blocks::Block;
    let mut _16: flags::blocks::Block;
    let mut _17: flags::blocks::Block;
    let mut _18: flags::blocks::Block;
    let mut _19: flags::blocks::Block;
    let _20: std::string::String;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &&&str;
    let _28: &&str;
    let mut _29: &[&str; 1];
    scope 1 {
        debug res => _20;
    }

    bb0: {
        _10 = <str as PartialEq>::eq(_1, const "permission") -> [return: bb27, unwind continue];
    }

    bb1: {
        _11 = Block::Permission;
        _0 = Result::<Block, std::string::String>::Ok(move _11);
        goto -> bb31;
    }

    bb2: {
        _9 = <str as PartialEq>::eq(_1, const "user") -> [return: bb26, unwind continue];
    }

    bb3: {
        _12 = Block::User;
        _0 = Result::<Block, std::string::String>::Ok(move _12);
        goto -> bb31;
    }

    bb4: {
        _8 = <str as PartialEq>::eq(_1, const "group") -> [return: bb25, unwind continue];
    }

    bb5: {
        _13 = Block::Group;
        _0 = Result::<Block, std::string::String>::Ok(move _13);
        goto -> bb31;
    }

    bb6: {
        _7 = <str as PartialEq>::eq(_1, const "size") -> [return: bb24, unwind continue];
    }

    bb7: {
        _14 = Block::Size;
        _0 = Result::<Block, std::string::String>::Ok(move _14);
        goto -> bb31;
    }

    bb8: {
        _6 = <str as PartialEq>::eq(_1, const "size_value") -> [return: bb23, unwind continue];
    }

    bb9: {
        _15 = Block::SizeValue;
        _0 = Result::<Block, std::string::String>::Ok(move _15);
        goto -> bb31;
    }

    bb10: {
        _5 = <str as PartialEq>::eq(_1, const "date") -> [return: bb22, unwind continue];
    }

    bb11: {
        _16 = Block::Date;
        _0 = Result::<Block, std::string::String>::Ok(move _16);
        goto -> bb31;
    }

    bb12: {
        _4 = <str as PartialEq>::eq(_1, const "name") -> [return: bb21, unwind continue];
    }

    bb13: {
        _17 = Block::Name;
        _0 = Result::<Block, std::string::String>::Ok(move _17);
        goto -> bb31;
    }

    bb14: {
        _3 = <str as PartialEq>::eq(_1, const "inode") -> [return: bb20, unwind continue];
    }

    bb15: {
        _18 = Block::INode;
        _0 = Result::<Block, std::string::String>::Ok(move _18);
        goto -> bb31;
    }

    bb16: {
        _2 = <str as PartialEq>::eq(_1, const "links") -> [return: bb19, unwind continue];
    }

    bb17: {
        _19 = Block::Links;
        _0 = Result::<Block, std::string::String>::Ok(move _19);
        goto -> bb31;
    }

    bb18: {
        _29 = const _;
        _22 = _29 as &[&str] (PointerCoercion(Unsize));
        _28 = &_1;
        _27 = &_28;
        _26 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(_27) -> [return: bb28, unwind continue];
    }

    bb19: {
        switchInt(move _2) -> [0: bb18, otherwise: bb17];
    }

    bb20: {
        switchInt(move _3) -> [0: bb16, otherwise: bb15];
    }

    bb21: {
        switchInt(move _4) -> [0: bb14, otherwise: bb13];
    }

    bb22: {
        switchInt(move _5) -> [0: bb12, otherwise: bb11];
    }

    bb23: {
        switchInt(move _6) -> [0: bb10, otherwise: bb9];
    }

    bb24: {
        switchInt(move _7) -> [0: bb8, otherwise: bb7];
    }

    bb25: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb26: {
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb27: {
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb28: {
        _25 = [move _26];
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _23) -> [return: bb29, unwind continue];
    }

    bb29: {
        _20 = std::fmt::format(move _21) -> [return: bb30, unwind continue];
    }

    bb30: {
        _0 = Result::<Block, std::string::String>::Err(move _20);
        goto -> bb31;
    }

    bb31: {
        return;
    }
}

promoted[0] in blocks::<impl at src/flags/blocks.rs:170:1: 170:29>::try_from: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Not a valid block name: "];
        _0 = &_1;
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:13:10: 13:15>::clone(_1: &flags::color::Color) -> flags::color::Color {
    debug self => _1;
    let mut _0: flags::color::Color;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:13:17: 13:22>::fmt(_1: &flags::color::Color, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&flags::color::ColorOption;
    let _7: &flags::color::ColorOption;

    bb0: {
        _3 = const "Color";
        _4 = const "when";
        _7 = &((*_1).0: flags::color::ColorOption);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:13:30: 13:39>::eq(_1: &flags::color::Color, _2: &flags::color::Color) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &flags::color::ColorOption;
    let mut _4: &flags::color::ColorOption;

    bb0: {
        _3 = &((*_1).0: flags::color::ColorOption);
        _4 = &((*_2).0: flags::color::ColorOption);
        _0 = <ColorOption as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:13:41: 13:43>::assert_receiver_is_total_eq(_1: &flags::color::Color) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:13:45: 13:52>::default() -> flags::color::Color {
    let mut _0: flags::color::Color;
    let mut _1: flags::color::ColorOption;

    bb0: {
        _1 = <ColorOption as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = flags::color::Color { when: move _1 };
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:19:1: 19:11>::configure_from(_1: &ArgMatches<'_>, _2: &Config) -> flags::color::Color {
    debug matches => _1;
    debug config => _2;
    let mut _0: flags::color::Color;
    let _3: flags::color::ColorOption;
    scope 1 {
        debug when => _3;
    }

    bb0: {
        _3 = <ColorOption as Configurable<ColorOption>>::configure_from(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = flags::color::Color { when: _3 };
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:30:10: 30:15>::clone(_1: &ColorOption) -> ColorOption {
    debug self => _1;
    let mut _0: flags::color::ColorOption;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:30:17: 30:22>::fmt(_1: &ColorOption, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "Never";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Always";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "Auto";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:30:30: 30:39>::eq(_1: &ColorOption, _2: &ColorOption) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:30:41: 30:43>::assert_receiver_is_total_eq(_1: &ColorOption) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

const flags::color::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn flags::color::_::<impl at src/flags/color.rs:30:45: 30:56>::deserialize(_1: __D) -> Result<ColorOption, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::color::ColorOption, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_enum::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Visitor<'_>>(move _1, const "ColorOption", const _, const flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<ColorOption>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::color::_::<impl at src/flags/color.rs:30:45: 30:56>::deserialize::<impl at src/flags/color.rs:30:45: 30:56>::expecting(_1: &flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::color::_::<impl at src/flags/color.rs:30:45: 30:56>::deserialize::<impl at src/flags/color.rs:30:45: 30:56>::visit_u64(_1: flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__FieldVisitor, _2: u64) -> Result<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E> {
    debug self => const flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field, __E>;
    let mut _3: flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field;
    let mut _4: flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field;
    let mut _5: flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: config_file::_::_serde::de::Unexpected<'_>;
    let mut _8: &dyn config_file::_::_serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field::__field0;
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field::__field1;
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field::__field2;
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in flags::color::_::<impl at src/flags/color.rs:30:45: 30:56>::deserialize::<impl at src/flags/color.rs:30:45: 30:56>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn flags::color::_::<impl at src/flags/color.rs:30:45: 30:56>::deserialize::<impl at src/flags/color.rs:30:45: 30:56>::visit_str(_1: flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__FieldVisitor, _2: &str) -> Result<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E> {
    debug self => const flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field;
    let mut _7: flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field;
    let mut _8: flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field;
    let mut _9: __E;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "always") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field::__field0;
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb11;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "auto") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field::__field1;
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb11;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "never") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field::__field2;
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb11;
    }

    bb6: {
        _9 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb10, unwind continue];
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Err(move _9);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn flags::color::_::<impl at src/flags/color.rs:30:45: 30:56>::deserialize::<impl at src/flags/color.rs:30:45: 30:56>::visit_bytes(_1: flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E> {
    debug self => const flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field;
    let mut _13: flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field;
    let mut _14: flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field;
    let _15: &std::borrow::Cow<'_, str>;
    let _16: std::borrow::Cow<'_, str>;
    let mut _17: __E;
    let _18: &str;
    scope 1 {
        debug __value => _15;
    }

    bb0: {
        _9 = Len((*_2));
        _10 = const 6_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 6]) -> [97: bb2, otherwise: bb7];
    }

    bb2: {
        switchInt((*_2)[1 of 6]) -> [108: bb3, otherwise: bb7];
    }

    bb3: {
        switchInt((*_2)[2 of 6]) -> [119: bb4, otherwise: bb7];
    }

    bb4: {
        switchInt((*_2)[3 of 6]) -> [97: bb5, otherwise: bb7];
    }

    bb5: {
        switchInt((*_2)[4 of 6]) -> [121: bb6, otherwise: bb7];
    }

    bb6: {
        switchInt((*_2)[5 of 6]) -> [115: bb19, otherwise: bb7];
    }

    bb7: {
        _16 = from_utf8_lossy(_2) -> [return: bb22, unwind continue];
    }

    bb8: {
        _6 = Len((*_2));
        _7 = const 4_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb13, otherwise: bb9];
    }

    bb9: {
        switchInt((*_2)[0 of 4]) -> [97: bb10, otherwise: bb7];
    }

    bb10: {
        switchInt((*_2)[1 of 4]) -> [117: bb11, otherwise: bb7];
    }

    bb11: {
        switchInt((*_2)[2 of 4]) -> [116: bb12, otherwise: bb7];
    }

    bb12: {
        switchInt((*_2)[3 of 4]) -> [111: bb20, otherwise: bb7];
    }

    bb13: {
        _3 = Len((*_2));
        _4 = const 5_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb7, otherwise: bb14];
    }

    bb14: {
        switchInt((*_2)[0 of 5]) -> [110: bb15, otherwise: bb7];
    }

    bb15: {
        switchInt((*_2)[1 of 5]) -> [101: bb16, otherwise: bb7];
    }

    bb16: {
        switchInt((*_2)[2 of 5]) -> [118: bb17, otherwise: bb7];
    }

    bb17: {
        switchInt((*_2)[3 of 5]) -> [101: bb18, otherwise: bb7];
    }

    bb18: {
        switchInt((*_2)[4 of 5]) -> [114: bb21, otherwise: bb7];
    }

    bb19: {
        _12 = flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field::__field0;
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb25;
    }

    bb20: {
        _13 = flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field::__field1;
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb25;
    }

    bb21: {
        _14 = flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field::__field2;
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb25;
    }

    bb22: {
        _15 = &_16;
        _18 = <Cow<'_, str> as Deref>::deref(_15) -> [return: bb23, unwind: bb26];
    }

    bb23: {
        _17 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_18, const _) -> [return: bb24, unwind: bb26];
    }

    bb24: {
        _0 = Result::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, __E>::Err(move _17);
        drop(_16) -> [return: bb25, unwind continue];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_16) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }
}

fn flags::color::_::<impl at src/flags/color.rs:30:45: 30:56>::deserialize::<impl at src/flags/color.rs:30:45: 30:56>::deserialize(_1: __D) -> Result<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__FieldVisitor>(move _1, const flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::color::_::<impl at src/flags/color.rs:30:45: 30:56>::deserialize::<impl at src/flags/color.rs:30:45: 30:56>::expecting(_1: &flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum ColorOption";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::color::_::<impl at src/flags/color.rs:30:45: 30:56>::deserialize::<impl at src/flags/color.rs:30:45: 30:56>::visit_enum(_1: flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Visitor<'_>, _2: __A) -> Result<ColorOption, <__A as EnumAccess<'_>>::Error> {
    debug self => const flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<ColorOption>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<flags::color::ColorOption, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
    let mut _7: isize;
    let _8: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _9: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _10: isize;
    let mut _12: flags::color::ColorOption;
    let _13: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _14: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _15: isize;
    let mut _17: flags::color::ColorOption;
    let _18: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _19: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _20: isize;
    let mut _22: flags::color::ColorOption;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _8;
        let _11: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _11;
        }
    }
    scope 6 {
        debug __variant => _13;
        let _16: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 7 {
            debug __val => const ();
        }
        scope 8 {
            debug __err => _16;
        }
    }
    scope 9 {
        debug __variant => _18;
        let _21: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _21;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<flags::color::_::<impl Deserialize<'de> for ColorOption>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<ColorOption, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb17;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant));
        _7 = discriminant((_5.0: flags::color::_::<impl config_file::_::_serde::Deserialize<'de> for flags::color::ColorOption>::deserialize::__Field));
        switchInt(move _7) -> [0: bb6, 1: bb10, 2: bb5, otherwise: bb3];
    }

    bb5: {
        _18 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> [return: bb14, unwind continue];
    }

    bb6: {
        _8 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _11 = move ((_9 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<ColorOption, <__A as EnumAccess<'_>>::Error>::Err(move _11);
        goto -> bb17;
    }

    bb9: {
        _12 = ColorOption::Always;
        _0 = Result::<ColorOption, <__A as EnumAccess<'_>>::Error>::Ok(move _12);
        goto -> bb17;
    }

    bb10: {
        _13 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _16 = move ((_14 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<ColorOption, <__A as EnumAccess<'_>>::Error>::Err(move _16);
        goto -> bb17;
    }

    bb13: {
        _17 = ColorOption::Auto;
        _0 = Result::<ColorOption, <__A as EnumAccess<'_>>::Error>::Ok(move _17);
        goto -> bb17;
    }

    bb14: {
        _20 = discriminant(_19);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _21 = move ((_19 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<ColorOption, <__A as EnumAccess<'_>>::Error>::Err(move _21);
        goto -> bb17;
    }

    bb16: {
        _22 = ColorOption::Never;
        _0 = Result::<ColorOption, <__A as EnumAccess<'_>>::Error>::Ok(move _22);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

const flags::color::_::<impl at src/flags/color.rs:30:45: 30:56>::deserialize::VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in flags::color::_::<impl at src/flags/color.rs:30:45: 30:56>::deserialize::VARIANTS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "always", const "auto", const "never"];
        _0 = &_1;
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:38:1: 38:17>::from_str(_1: &str) -> std::option::Option<ColorOption> {
    debug value => _1;
    let mut _0: std::option::Option<flags::color::ColorOption>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: flags::color::ColorOption;
    let mut _6: flags::color::ColorOption;
    let mut _7: flags::color::ColorOption;
    let _8: std::io::Stderr;
    let mut _10: &std::io::Stderr;
    let mut _12: &mut std::io::StderrLock<'_>;
    let _13: &[u8];
    let mut _14: &std::string::String;
    let _15: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &std::string::String;
    let _24: std::string::String;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: [core::fmt::rt::Argument<'_>; 1];
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &&&str;
    let _33: &&str;
    let mut _34: bool;
    let mut _35: &std::result::Result<(), std::io::Error>;
    let _36: !;
    scope 1 {
        debug stderr => _8;
        let mut _9: std::io::StderrLock<'_>;
        scope 2 {
            debug handle => _9;
            let _11: std::result::Result<(), std::io::Error>;
            let _16: std::string::String;
            let _25: std::string::String;
            let mut _37: &[&str; 2];
            let mut _38: &[&str; 2];
            scope 3 {
                debug res => _11;
            }
            scope 4 {
                debug res => _16;
            }
            scope 5 {
                debug res => _25;
            }
        }
    }

    bb0: {
        _4 = <str as PartialEq>::eq(_1, const "always") -> [return: bb9, unwind continue];
    }

    bb1: {
        _5 = ColorOption::Always;
        _0 = std::option::Option::<ColorOption>::Some(move _5);
        goto -> bb27;
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "auto") -> [return: bb8, unwind continue];
    }

    bb3: {
        _6 = ColorOption::Auto;
        _0 = std::option::Option::<ColorOption>::Some(move _6);
        goto -> bb27;
    }

    bb4: {
        _2 = <str as PartialEq>::eq(_1, const "never") -> [return: bb7, unwind continue];
    }

    bb5: {
        _7 = ColorOption::Never;
        _0 = std::option::Option::<ColorOption>::Some(move _7);
        goto -> bb27;
    }

    bb6: {
        _8 = stderr() -> [return: bb10, unwind continue];
    }

    bb7: {
        switchInt(move _2) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        _10 = &_8;
        _9 = Stderr::lock(move _10) -> [return: bb11, unwind continue];
    }

    bb11: {
        _12 = &mut _9;
        _38 = const _;
        _18 = _38 as &[&str] (PointerCoercion(Unsize));
        _37 = const _;
        _27 = _37 as &[&str] (PointerCoercion(Unsize));
        _33 = &_1;
        _32 = &_33;
        _31 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(_32) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _30 = [move _31];
        _29 = &_30;
        _28 = _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _26 = Arguments::<'_>::new_v1(move _27, move _28) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _25 = std::fmt::format(move _26) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _24 = move _25;
        _23 = &_24;
        _22 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_23) -> [return: bb15, unwind: bb31];
    }

    bb15: {
        _21 = [move _22];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _16 = std::fmt::format(move _17) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        drop(_24) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        _15 = move _16;
        _14 = &_15;
        _13 = std::string::String::as_bytes(move _14) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        _11 = <StderrLock<'_> as std::io::Write>::write_all(move _12, _13) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        drop(_15) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _35 = &_11;
        _34 = Result::<(), std::io::Error>::is_err(move _35) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        switchInt(move _34) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _36 = std::process::exit(const 0_i32) -> bb28;
    }

    bb24: {
        drop(_11) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        drop(_9) -> [return: bb26, unwind continue];
    }

    bb26: {
        _0 = std::option::Option::<ColorOption>::None;
        goto -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_11) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_15) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_16) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_24) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_9) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }
}

promoted[0] in flags::color::<impl at src/flags/color.rs:38:1: 38:17>::from_str: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Config color.when could only be one of auto, always and never, got ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[1] in flags::color::<impl at src/flags/color.rs:38:1: 38:17>::from_str: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:56:1: 56:40>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<ColorOption> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::color::ColorOption>;
    let mut _2: bool;
    let mut _3: flags::color::ColorOption;
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: std::option::Option<&str>;
    let mut _7: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, clap::Values<'_>>;
    let mut _8: std::option::Option<clap::Values<'_>>;
    let mut _9: isize;
    let mut _11: isize;
    let _13: &&str;
    let _14: !;
    let mut _15: &str;
    scope 1 {
        debug color => _12;
        let _10: clap::Values<'_>;
        let _12: &str;
        scope 2 {
            debug residual => const std::option::Option::<Infallible>::None;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _10;
            scope 5 {
            }
        }
    }

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "classic") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = ColorOption::Never;
        _0 = std::option::Option::<ColorOption>::Some(move _3);
        goto -> bb15;
    }

    bb3: {
        _5 = ArgMatches::<'_>::occurrences_of::<&str>(_1, const "color") -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = Gt(move _5, const 0_u64);
        switchInt(move _4) -> [0: bb14, otherwise: bb5];
    }

    bb5: {
        _8 = ArgMatches::<'_>::values_of::<&str>(_1, const "color") -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = <std::option::Option<clap::Values<'_>> as Try>::branch(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _10 = move ((_7 as Continue).0: clap::Values<'_>);
        _6 = <clap::Values<'_> as Iterator>::last(move _10) -> [return: bb11, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _0 = <std::option::Option<ColorOption> as FromResidual<std::option::Option<Infallible>>>::from_residual(const std::option::Option::<Infallible>::None) -> [return: bb15, unwind continue];
    }

    bb11: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [1: bb12, otherwise: bb13];
    }

    bb12: {
        _12 = ((_6 as Some).0: &str);
        _13 = &_12;
        _15 = deref_copy (*_13);
        _0 = ColorOption::from_str(_15) -> [return: bb15, unwind continue];
    }

    bb13: {
        _14 = begin_panic::<&str>(const "Bad color args. This should not be reachable!") -> unwind continue;
    }

    bb14: {
        _0 = std::option::Option::<ColorOption>::None;
        goto -> bb15;
    }

    bb15: {
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:56:1: 56:40>::from_config(_1: &Config) -> std::option::Option<ColorOption> {
    debug config => _1;
    let mut _0: std::option::Option<flags::color::ColorOption>;
    let mut _2: isize;
    let mut _3: flags::color::ColorOption;
    let mut _4: &std::option::Option<config_file::Color>;
    let mut _5: isize;
    let mut _7: flags::color::ColorOption;
    scope 1 {
    }
    scope 2 {
        debug color => _6;
        let _6: &config_file::Color;
    }

    bb0: {
        _2 = discriminant(((*_1).0: std::option::Option<bool>));
        switchInt(move _2) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt(((((*_1).0: std::option::Option<bool>) as Some).0: bool)) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = ColorOption::Never;
        _0 = std::option::Option::<ColorOption>::Some(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = &((*_1).2: std::option::Option<config_file::Color>);
        _5 = discriminant((*_4));
        switchInt(move _5) -> [1: bb5, otherwise: bb4];
    }

    bb4: {
        _0 = std::option::Option::<ColorOption>::None;
        goto -> bb6;
    }

    bb5: {
        _6 = &(((*_4) as Some).0: config_file::Color);
        _7 = ((*_6).0: flags::color::ColorOption);
        _0 = std::option::Option::<ColorOption>::Some(move _7);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn flags::color::<impl at src/flags/color.rs:95:1: 95:29>::default() -> ColorOption {
    let mut _0: flags::color::ColorOption;

    bb0: {
        _0 = ColorOption::Auto;
        return;
    }
}

fn flags::date::<impl at src/flags/date.rs:13:10: 13:15>::clone(_1: &DateFlag) -> DateFlag {
    debug self => _1;
    let mut _0: flags::date::DateFlag;
    let mut _2: isize;
    let _3: &std::string::String;
    let mut _4: std::string::String;
    scope 1 {
        debug __self_0 => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = &(((*_1) as Formatted).0: std::string::String);
        _4 = <std::string::String as Clone>::clone(_3) -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = DateFlag::Date;
        goto -> bb7;
    }

    bb4: {
        _0 = DateFlag::Relative;
        goto -> bb7;
    }

    bb5: {
        _0 = DateFlag::ISO;
        goto -> bb7;
    }

    bb6: {
        _0 = DateFlag::Formatted(move _4);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn flags::date::<impl at src/flags/date.rs:13:17: 13:22>::fmt(_1: &DateFlag, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &str;
    let _6: &str;
    let _7: &std::string::String;
    let _8: &str;
    let mut _9: &dyn std::fmt::Debug;
    let _10: &&std::string::String;
    scope 1 {
        debug __self_0 => _7;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = &(((*_1) as Formatted).0: std::string::String);
        _8 = const "Formatted";
        _10 = &_7;
        _9 = _10 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _8, move _9) -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = const "Date";
        _0 = Formatter::<'_>::write_str(_2, _4) -> [return: bb6, unwind continue];
    }

    bb4: {
        _5 = const "Relative";
        _0 = Formatter::<'_>::write_str(_2, _5) -> [return: bb6, unwind continue];
    }

    bb5: {
        _6 = const "ISO";
        _0 = Formatter::<'_>::write_str(_2, _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn flags::date::<impl at src/flags/date.rs:13:24: 13:33>::eq(_1: &DateFlag, _2: &DateFlag) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&flags::date::DateFlag, &flags::date::DateFlag);
    let mut _7: isize;
    let mut _8: isize;
    let mut _11: &flags::date::DateFlag;
    let mut _12: &flags::date::DateFlag;
    let mut _13: &flags::date::DateFlag;
    let mut _14: &flags::date::DateFlag;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _9: &std::string::String;
            let _10: &std::string::String;
            scope 3 {
                debug __self_0 => _9;
                debug __arg1_0 => _10;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _11 = deref_copy (_6.0: &flags::date::DateFlag);
        _8 = discriminant((*_11));
        switchInt(move _8) -> [3: bb4, otherwise: bb3];
    }

    bb2: {
        _0 = const false;
        goto -> bb6;
    }

    bb3: {
        _0 = const true;
        goto -> bb6;
    }

    bb4: {
        _12 = deref_copy (_6.1: &flags::date::DateFlag);
        _7 = discriminant((*_12));
        switchInt(move _7) -> [3: bb5, otherwise: bb3];
    }

    bb5: {
        _13 = deref_copy (_6.0: &flags::date::DateFlag);
        _9 = &(((*_13) as Formatted).0: std::string::String);
        _14 = deref_copy (_6.1: &flags::date::DateFlag);
        _10 = &(((*_14) as Formatted).0: std::string::String);
        _0 = <std::string::String as PartialEq>::eq(_9, _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn flags::date::<impl at src/flags/date.rs:13:35: 13:37>::assert_receiver_is_total_eq(_1: &DateFlag) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn flags::date::<impl at src/flags/date.rs:21:1: 21:14>::from_format_string(_1: &str) -> std::option::Option<DateFlag> {
    debug value => _1;
    let mut _0: std::option::Option<flags::date::DateFlag>;
    let mut _2: std::result::Result<(), std::string::String>;
    let _3: &&str;
    let mut _4: isize;
    let mut _5: flags::date::DateFlag;
    let mut _6: std::string::String;
    let _7: &str;
    let mut _8: &str;
    let mut _9: std::ops::RangeFrom<usize>;
    let _10: std::io::Stderr;
    let mut _12: &std::io::Stderr;
    let mut _14: &mut std::io::StderrLock<'_>;
    let _15: &[u8];
    let mut _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: [core::fmt::rt::Argument<'_>; 1];
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &std::string::String;
    let _26: std::string::String;
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let mut _30: &[core::fmt::rt::Argument<'_>];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let _34: &&str;
    let mut _35: bool;
    let mut _36: &std::result::Result<(), std::io::Error>;
    let _37: !;
    let mut _40: &str;
    scope 1 {
        debug stderr => _10;
        let mut _11: std::io::StderrLock<'_>;
        scope 2 {
            debug handle => _11;
            let _13: std::result::Result<(), std::io::Error>;
            let _18: std::string::String;
            let _27: std::string::String;
            let mut _38: &[&str; 2];
            let mut _39: &[&str; 2];
            scope 3 {
                debug res => _13;
            }
            scope 4 {
                debug res => _18;
            }
            scope 5 {
                debug res => _27;
            }
        }
    }

    bb0: {
        _3 = &_1;
        _40 = deref_copy (*_3);
        _2 = validate_time_format(_40) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = stderr() -> [return: bb6, unwind: bb30];
    }

    bb3: {
        _8 = _1;
        _9 = RangeFrom::<usize> { start: const 1_usize };
        _7 = <str as std::ops::Index<RangeFrom<usize>>>::index(move _8, move _9) -> [return: bb4, unwind: bb30];
    }

    bb4: {
        _6 = <str as ToString>::to_string(_7) -> [return: bb5, unwind: bb30];
    }

    bb5: {
        _5 = DateFlag::Formatted(move _6);
        _0 = std::option::Option::<DateFlag>::Some(move _5);
        goto -> bb23;
    }

    bb6: {
        _12 = &_10;
        _11 = Stderr::lock(move _12) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        _14 = &mut _11;
        _39 = const _;
        _20 = _39 as &[&str] (PointerCoercion(Unsize));
        _38 = const _;
        _29 = _38 as &[&str] (PointerCoercion(Unsize));
        _34 = &_1;
        _33 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_34) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        _32 = [move _33];
        _31 = &_32;
        _30 = _31 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _28 = Arguments::<'_>::new_v1(move _29, move _30) -> [return: bb9, unwind: bb29];
    }

    bb9: {
        _27 = std::fmt::format(move _28) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        _26 = move _27;
        _25 = &_26;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_25) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _23 = [move _24];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _19 = Arguments::<'_>::new_v1(move _20, move _21) -> [return: bb12, unwind: bb28];
    }

    bb12: {
        _18 = std::fmt::format(move _19) -> [return: bb13, unwind: bb28];
    }

    bb13: {
        drop(_26) -> [return: bb14, unwind: bb27];
    }

    bb14: {
        _17 = move _18;
        _16 = &_17;
        _15 = std::string::String::as_bytes(move _16) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        _13 = <StderrLock<'_> as std::io::Write>::write_all(move _14, _15) -> [return: bb16, unwind: bb26];
    }

    bb16: {
        drop(_17) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        _36 = &_13;
        _35 = Result::<(), std::io::Error>::is_err(move _36) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        switchInt(move _35) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _37 = std::process::exit(const 0_i32) -> bb25;
    }

    bb20: {
        drop(_13) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        drop(_11) -> [return: bb22, unwind: bb30];
    }

    bb22: {
        _0 = std::option::Option::<DateFlag>::None;
        goto -> bb23;
    }

    bb23: {
        drop(_2) -> [return: bb24, unwind continue];
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_13) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_17) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_18) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_26) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_11) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }
}

promoted[0] in flags::date::<impl at src/flags/date.rs:21:1: 21:14>::from_format_string: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Not a valid date format: ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[1] in flags::date::<impl at src/flags/date.rs:21:1: 21:14>::from_format_string: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

fn flags::date::<impl at src/flags/date.rs:21:1: 21:14>::from_str(_1: &str) -> std::option::Option<DateFlag> {
    debug value => _1;
    let mut _0: std::option::Option<flags::date::DateFlag>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: flags::date::DateFlag;
    let mut _5: flags::date::DateFlag;
    let mut _6: bool;
    let mut _7: &str;
    let _8: &&str;
    let _9: std::io::Stderr;
    let mut _11: &std::io::Stderr;
    let mut _13: &mut std::io::StderrLock<'_>;
    let _14: &[u8];
    let mut _15: &std::string::String;
    let _16: std::string::String;
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &std::string::String;
    let _25: std::string::String;
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let _33: &&str;
    let mut _34: bool;
    let mut _35: &std::result::Result<(), std::io::Error>;
    let _36: !;
    let mut _39: &str;
    scope 1 {
        debug stderr => _9;
        let mut _10: std::io::StderrLock<'_>;
        scope 2 {
            debug handle => _10;
            let _12: std::result::Result<(), std::io::Error>;
            let _17: std::string::String;
            let _26: std::string::String;
            let mut _37: &[&str; 2];
            let mut _38: &[&str; 2];
            scope 3 {
                debug res => _12;
            }
            scope 4 {
                debug res => _17;
            }
            scope 5 {
                debug res => _26;
            }
        }
    }

    bb0: {
        _3 = <str as PartialEq>::eq(_1, const "date") -> [return: bb6, unwind continue];
    }

    bb1: {
        _4 = DateFlag::Date;
        _0 = std::option::Option::<DateFlag>::Some(move _4);
        goto -> bb27;
    }

    bb2: {
        _2 = <str as PartialEq>::eq(_1, const "relative") -> [return: bb5, unwind continue];
    }

    bb3: {
        _5 = DateFlag::Relative;
        _0 = std::option::Option::<DateFlag>::Some(move _5);
        goto -> bb27;
    }

    bb4: {
        _7 = _1;
        _6 = core::str::<impl str>::starts_with::<'_, char>(move _7, const '+') -> [return: bb7, unwind continue];
    }

    bb5: {
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb7: {
        switchInt(move _6) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _8 = &_1;
        _39 = deref_copy (*_8);
        _0 = DateFlag::from_format_string(_39) -> [return: bb27, unwind continue];
    }

    bb9: {
        _9 = stderr() -> [return: bb10, unwind continue];
    }

    bb10: {
        _11 = &_9;
        _10 = Stderr::lock(move _11) -> [return: bb11, unwind continue];
    }

    bb11: {
        _13 = &mut _10;
        _38 = const _;
        _19 = _38 as &[&str] (PointerCoercion(Unsize));
        _37 = const _;
        _28 = _37 as &[&str] (PointerCoercion(Unsize));
        _33 = &_1;
        _32 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_33) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _31 = [move _32];
        _30 = &_31;
        _29 = _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _27 = Arguments::<'_>::new_v1(move _28, move _29) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _26 = std::fmt::format(move _27) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _25 = move _26;
        _24 = &_25;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_24) -> [return: bb15, unwind: bb31];
    }

    bb15: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _18 = Arguments::<'_>::new_v1(move _19, move _20) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _17 = std::fmt::format(move _18) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        drop(_25) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        _16 = move _17;
        _15 = &_16;
        _14 = std::string::String::as_bytes(move _15) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        _12 = <StderrLock<'_> as std::io::Write>::write_all(move _13, _14) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        drop(_16) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _35 = &_12;
        _34 = Result::<(), std::io::Error>::is_err(move _35) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        switchInt(move _34) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _36 = std::process::exit(const 0_i32) -> bb28;
    }

    bb24: {
        drop(_12) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        drop(_10) -> [return: bb26, unwind continue];
    }

    bb26: {
        _0 = std::option::Option::<DateFlag>::None;
        goto -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_12) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_16) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_17) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_25) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_10) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }
}

promoted[0] in flags::date::<impl at src/flags/date.rs:21:1: 21:14>::from_str: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Not a valid date value: ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[1] in flags::date::<impl at src/flags/date.rs:21:1: 21:14>::from_str: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

fn flags::date::<impl at src/flags/date.rs:47:1: 47:37>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<DateFlag> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::date::DateFlag>;
    let mut _2: bool;
    let mut _3: flags::date::DateFlag;
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: std::option::Option<&str>;
    let mut _7: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, clap::Values<'_>>;
    let mut _8: std::option::Option<clap::Values<'_>>;
    let mut _9: isize;
    let _10: clap::Values<'_>;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: flags::date::DateFlag;
    let mut _15: flags::date::DateFlag;
    let _16: &str;
    let _17: &&str;
    let mut _18: bool;
    let mut _19: flags::date::DateFlag;
    let mut _20: std::string::String;
    let _21: &str;
    let mut _22: std::ops::RangeFrom<usize>;
    let _23: !;
    let mut _24: &str;
    scope 1 {
        debug residual => const std::option::Option::<Infallible>::None;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _10;
        scope 4 {
        }
    }
    scope 5 {
        debug format => _16;
        debug format => _17;
    }

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "classic") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = DateFlag::Date;
        _0 = std::option::Option::<DateFlag>::Some(move _3);
        goto -> bb25;
    }

    bb3: {
        _5 = ArgMatches::<'_>::occurrences_of::<&str>(_1, const "date") -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = Gt(move _5, const 0_u64);
        switchInt(move _4) -> [0: bb24, otherwise: bb5];
    }

    bb5: {
        _8 = ArgMatches::<'_>::values_of::<&str>(_1, const "date") -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = <std::option::Option<clap::Values<'_>> as Try>::branch(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _10 = move ((_7 as Continue).0: clap::Values<'_>);
        _6 = <clap::Values<'_> as Iterator>::last(move _10) -> [return: bb11, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _0 = <std::option::Option<DateFlag> as FromResidual<std::option::Option<Infallible>>>::from_residual(const std::option::Option::<Infallible>::None) -> [return: bb25, unwind continue];
    }

    bb11: {
        _13 = discriminant(_6);
        switchInt(move _13) -> [1: bb13, otherwise: bb12];
    }

    bb12: {
        _23 = begin_panic::<&str>(const "This should not be reachable!") -> unwind continue;
    }

    bb13: {
        _12 = <str as PartialEq>::eq(((_6 as Some).0: &str), const "date") -> [return: bb19, unwind continue];
    }

    bb14: {
        _14 = DateFlag::Date;
        _0 = std::option::Option::<DateFlag>::Some(move _14);
        goto -> bb25;
    }

    bb15: {
        _11 = <str as PartialEq>::eq(((_6 as Some).0: &str), const "relative") -> [return: bb18, unwind continue];
    }

    bb16: {
        _15 = DateFlag::Relative;
        _0 = std::option::Option::<DateFlag>::Some(move _15);
        goto -> bb25;
    }

    bb17: {
        _17 = &((_6 as Some).0: &str);
        _24 = deref_copy (*_17);
        _18 = core::str::<impl str>::starts_with::<'_, char>(_24, const '+') -> [return: bb20, unwind continue];
    }

    bb18: {
        switchInt(move _11) -> [0: bb17, otherwise: bb16];
    }

    bb19: {
        switchInt(move _12) -> [0: bb15, otherwise: bb14];
    }

    bb20: {
        switchInt(move _18) -> [0: bb12, otherwise: bb21];
    }

    bb21: {
        _16 = ((_6 as Some).0: &str);
        _22 = RangeFrom::<usize> { start: const 1_usize };
        _21 = <str as std::ops::Index<RangeFrom<usize>>>::index(_16, move _22) -> [return: bb22, unwind continue];
    }

    bb22: {
        _20 = <str as ToOwned>::to_owned(_21) -> [return: bb23, unwind continue];
    }

    bb23: {
        _19 = DateFlag::Formatted(move _20);
        _0 = std::option::Option::<DateFlag>::Some(move _19);
        goto -> bb25;
    }

    bb24: {
        _0 = std::option::Option::<DateFlag>::None;
        goto -> bb25;
    }

    bb25: {
        return;
    }
}

fn flags::date::<impl at src/flags/date.rs:47:1: 47:37>::from_config(_1: &Config) -> std::option::Option<DateFlag> {
    debug config => _1;
    let mut _0: std::option::Option<flags::date::DateFlag>;
    let mut _2: &std::option::Option<bool>;
    let mut _3: isize;
    let mut _4: flags::date::DateFlag;
    let mut _5: &std::option::Option<std::string::String>;
    let mut _6: isize;
    let _8: &str;
    let _9: &&std::string::String;
    let mut _10: &std::string::String;
    scope 1 {
    }
    scope 2 {
        debug date => _7;
        let _7: &std::string::String;
    }

    bb0: {
        _2 = &((*_1).0: std::option::Option<bool>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt((((*_2) as Some).0: bool)) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = DateFlag::Date;
        _0 = std::option::Option::<DateFlag>::Some(move _4);
        goto -> bb7;
    }

    bb3: {
        _5 = &((*_1).3: std::option::Option<std::string::String>);
        _6 = discriminant((*_5));
        switchInt(move _6) -> [1: bb5, otherwise: bb4];
    }

    bb4: {
        _0 = std::option::Option::<DateFlag>::None;
        goto -> bb7;
    }

    bb5: {
        _7 = &(((*_5) as Some).0: std::string::String);
        _9 = &_7;
        _10 = deref_copy (*_9);
        _8 = <std::string::String as Deref>::deref(_10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = DateFlag::from_str(_8) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn flags::date::<impl at src/flags/date.rs:47:1: 47:37>::from_environment() -> std::option::Option<DateFlag> {
    let mut _0: std::option::Option<flags::date::DateFlag>;
    let mut _1: std::result::Result<std::string::String, std::env::VarError>;
    let mut _2: isize;
    let mut _4: &str;
    let mut _5: &std::string::String;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: flags::date::DateFlag;
    let mut _10: std::string::String;
    let _11: &str;
    let mut _12: flags::date::DateFlag;
    let mut _13: std::string::String;
    let _14: &str;
    let mut _15: flags::date::DateFlag;
    let mut _16: bool;
    let _17: &str;
    let mut _18: &std::string::String;
    let _19: &str;
    let _20: &std::string::String;
    let mut _23: &std::io::Stderr;
    let mut _25: &mut std::io::StderrLock<'_>;
    let _26: &[u8];
    let mut _27: &std::string::String;
    let _28: std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: &std::string::String;
    let mut _46: bool;
    let mut _47: &std::result::Result<(), std::io::Error>;
    let _48: !;
    let mut _51: bool;
    let mut _52: isize;
    let mut _53: isize;
    scope 1 {
        debug value => _3;
        let _3: std::string::String;
        let _21: std::io::Stderr;
        scope 2 {
            debug stderr => _21;
            let mut _22: std::io::StderrLock<'_>;
            scope 3 {
                debug handle => _22;
                let _24: std::result::Result<(), std::io::Error>;
                let _29: std::string::String;
                let _38: std::string::String;
                let mut _49: &[&str; 2];
                let mut _50: &[&str; 2];
                scope 4 {
                    debug res => _24;
                }
                scope 5 {
                    debug res => _29;
                }
                scope 6 {
                    debug res => _38;
                }
            }
        }
    }

    bb0: {
        _51 = const false;
        _51 = const true;
        _1 = var::<&str>(const "TIME_STYLE") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb2, otherwise: bb38];
    }

    bb2: {
        _51 = const false;
        _3 = move ((_1 as Ok).0: std::string::String);
        _5 = &_3;
        _4 = std::string::String::as_str(move _5) -> [return: bb3, unwind: bb44];
    }

    bb3: {
        _8 = <str as PartialEq>::eq(_4, const "full-iso") -> [return: bb12, unwind: bb44];
    }

    bb4: {
        _11 = const "%F %T.%f %z";
        _10 = <&str as Into<std::string::String>>::into(_11) -> [return: bb13, unwind: bb44];
    }

    bb5: {
        _7 = <str as PartialEq>::eq(_4, const "long-iso") -> [return: bb11, unwind: bb44];
    }

    bb6: {
        _14 = const "%F %R";
        _13 = <&str as Into<std::string::String>>::into(_14) -> [return: bb14, unwind: bb44];
    }

    bb7: {
        _6 = <str as PartialEq>::eq(_4, const "iso") -> [return: bb10, unwind: bb44];
    }

    bb8: {
        _15 = DateFlag::ISO;
        _0 = std::option::Option::<DateFlag>::Some(move _15);
        goto -> bb37;
    }

    bb9: {
        _18 = &_3;
        _17 = <std::string::String as Deref>::deref(move _18) -> [return: bb15, unwind: bb44];
    }

    bb10: {
        switchInt(move _6) -> [0: bb9, otherwise: bb8];
    }

    bb11: {
        switchInt(move _7) -> [0: bb7, otherwise: bb6];
    }

    bb12: {
        switchInt(move _8) -> [0: bb5, otherwise: bb4];
    }

    bb13: {
        _9 = DateFlag::Formatted(move _10);
        _0 = std::option::Option::<DateFlag>::Some(move _9);
        goto -> bb37;
    }

    bb14: {
        _12 = DateFlag::Formatted(move _13);
        _0 = std::option::Option::<DateFlag>::Some(move _12);
        goto -> bb37;
    }

    bb15: {
        _16 = core::str::<impl str>::starts_with::<'_, char>(_17, const '+') -> [return: bb16, unwind: bb44];
    }

    bb16: {
        switchInt(move _16) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _20 = &_3;
        _19 = <std::string::String as Deref>::deref(_20) -> [return: bb19, unwind: bb44];
    }

    bb18: {
        _21 = stderr() -> [return: bb20, unwind: bb44];
    }

    bb19: {
        _0 = DateFlag::from_format_string(_19) -> [return: bb53, unwind: bb44];
    }

    bb20: {
        _23 = &_21;
        _22 = Stderr::lock(move _23) -> [return: bb21, unwind: bb44];
    }

    bb21: {
        _25 = &mut _22;
        _50 = const _;
        _31 = _50 as &[&str] (PointerCoercion(Unsize));
        _49 = const _;
        _40 = _49 as &[&str] (PointerCoercion(Unsize));
        _45 = &_3;
        _44 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_45) -> [return: bb22, unwind: bb43];
    }

    bb22: {
        _43 = [move _44];
        _42 = &_43;
        _41 = _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _39 = Arguments::<'_>::new_v1(move _40, move _41) -> [return: bb23, unwind: bb43];
    }

    bb23: {
        _38 = std::fmt::format(move _39) -> [return: bb24, unwind: bb43];
    }

    bb24: {
        _37 = move _38;
        _36 = &_37;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_36) -> [return: bb25, unwind: bb42];
    }

    bb25: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb26, unwind: bb42];
    }

    bb26: {
        _29 = std::fmt::format(move _30) -> [return: bb27, unwind: bb42];
    }

    bb27: {
        drop(_37) -> [return: bb28, unwind: bb41];
    }

    bb28: {
        _28 = move _29;
        _27 = &_28;
        _26 = std::string::String::as_bytes(move _27) -> [return: bb29, unwind: bb40];
    }

    bb29: {
        _24 = <StderrLock<'_> as std::io::Write>::write_all(move _25, _26) -> [return: bb30, unwind: bb40];
    }

    bb30: {
        drop(_28) -> [return: bb31, unwind: bb39];
    }

    bb31: {
        _47 = &_24;
        _46 = Result::<(), std::io::Error>::is_err(move _47) -> [return: bb32, unwind: bb39];
    }

    bb32: {
        switchInt(move _46) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _48 = std::process::exit(const 0_i32) -> bb39;
    }

    bb34: {
        drop(_24) -> [return: bb35, unwind: bb43];
    }

    bb35: {
        drop(_22) -> [return: bb36, unwind: bb44];
    }

    bb36: {
        _0 = std::option::Option::<DateFlag>::None;
        goto -> bb37;
    }

    bb37: {
        drop(_3) -> [return: bb50, unwind: bb52];
    }

    bb38: {
        _0 = std::option::Option::<DateFlag>::None;
        goto -> bb50;
    }

    bb39 (cleanup): {
        drop(_24) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_28) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_29) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_37) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_22) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_3) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        resume;
    }

    bb46: {
        _51 = const false;
        return;
    }

    bb47: {
        switchInt(_51) -> [0: bb46, otherwise: bb48];
    }

    bb48: {
        drop(((_1 as Ok).0: std::string::String)) -> [return: bb46, unwind continue];
    }

    bb49: {
        drop(_1) -> [return: bb46, unwind continue];
    }

    bb50: {
        _52 = discriminant(_1);
        switchInt(move _52) -> [0: bb47, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_1) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        _53 = discriminant(_1);
        switchInt(move _53) -> [0: bb45, otherwise: bb51];
    }

    bb53: {
        goto -> bb37;
    }
}

promoted[0] in flags::date::<impl at src/flags/date.rs:47:1: 47:37>::from_environment: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Not a valid date value: ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[1] in flags::date::<impl at src/flags/date.rs:47:1: 47:37>::from_environment: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

fn flags::date::<impl at src/flags/date.rs:108:1: 108:26>::default() -> DateFlag {
    let mut _0: flags::date::DateFlag;

    bb0: {
        _0 = DateFlag::Date;
        return;
    }
}

fn dereference::<impl at src/flags/dereference.rs:11:10: 11:15>::clone(_1: &Dereference) -> Dereference {
    debug self => _1;
    let mut _0: flags::dereference::Dereference;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn dereference::<impl at src/flags/dereference.rs:11:17: 11:22>::fmt(_1: &Dereference, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&bool;
    let _6: &bool;

    bb0: {
        _3 = const "Dereference";
        _6 = &((*_1).0: bool);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn dereference::<impl at src/flags/dereference.rs:11:30: 11:39>::eq(_1: &Dereference, _2: &Dereference) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;

    bb0: {
        _3 = ((*_1).0: bool);
        _4 = ((*_2).0: bool);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn dereference::<impl at src/flags/dereference.rs:11:41: 11:43>::assert_receiver_is_total_eq(_1: &Dereference) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn dereference::<impl at src/flags/dereference.rs:11:45: 11:52>::default() -> Dereference {
    let mut _0: flags::dereference::Dereference;
    let mut _1: bool;

    bb0: {
        _1 = <bool as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Dereference(move _1);
        return;
    }
}

fn dereference::<impl at src/flags/dereference.rs:14:1: 14:40>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<Dereference> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::dereference::Dereference>;
    let mut _2: bool;
    let mut _3: flags::dereference::Dereference;

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "dereference") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = Dereference(const true);
        _0 = std::option::Option::<Dereference>::Some(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = std::option::Option::<Dereference>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn dereference::<impl at src/flags/dereference.rs:14:1: 14:40>::from_config(_1: &Config) -> std::option::Option<Dereference> {
    debug config => _1;
    let mut _0: std::option::Option<flags::dereference::Dereference>;
    let mut _2: &std::option::Option<bool>;
    let mut _3: isize;
    let mut _5: flags::dereference::Dereference;
    let mut _6: bool;
    scope 1 {
        debug deref => _4;
        let _4: &bool;
    }

    bb0: {
        _2 = &((*_1).4: std::option::Option<bool>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = &(((*_2) as Some).0: bool);
        _6 = (*_4);
        _5 = Dereference(move _6);
        _0 = std::option::Option::<Dereference>::Some(move _5);
        goto -> bb3;
    }

    bb2: {
        _0 = std::option::Option::<Dereference>::None;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn flags::display::<impl at src/flags/display.rs:12:10: 12:15>::clone(_1: &flags::display::Display) -> flags::display::Display {
    debug self => _1;
    let mut _0: flags::display::Display;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn flags::display::<impl at src/flags/display.rs:12:17: 12:22>::fmt(_1: &flags::display::Display, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "VisibleOnly";
        _3 = _8;
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "All";
        _3 = _5;
        goto -> bb6;
    }

    bb4: {
        _6 = const "AlmostAll";
        _3 = _6;
        goto -> bb6;
    }

    bb5: {
        _7 = const "DirectoryOnly";
        _3 = _7;
        goto -> bb6;
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn flags::display::<impl at src/flags/display.rs:12:30: 12:39>::eq(_1: &flags::display::Display, _2: &flags::display::Display) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn flags::display::<impl at src/flags/display.rs:12:41: 12:43>::assert_receiver_is_total_eq(_1: &flags::display::Display) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

const flags::display::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn flags::display::_::<impl at src/flags/display.rs:12:45: 12:56>::deserialize(_1: __D) -> Result<flags::display::Display, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::display::Display, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_enum::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'_>>(move _1, const "Display", const _, const flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<flags::display::Display>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::display::_::<impl at src/flags/display.rs:12:45: 12:56>::deserialize::<impl at src/flags/display.rs:12:45: 12:56>::expecting(_1: &flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::display::_::<impl at src/flags/display.rs:12:45: 12:56>::deserialize::<impl at src/flags/display.rs:12:45: 12:56>::visit_u64(_1: flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor, _2: u64) -> Result<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E> {
    debug self => const flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>;
    let mut _3: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let mut _4: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let mut _5: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let mut _6: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let mut _7: __E;
    let mut _8: config_file::_::_serde::de::Unexpected<'_>;
    let mut _9: &dyn config_file::_::_serde::de::Expected;
    let mut _10: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1];
    }

    bb1: {
        _8 = Unexpected::<'_>::Unsigned(_2);
        _10 = const _;
        _9 = _10 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _7 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _8, move _9) -> [return: bb6, unwind continue];
    }

    bb2: {
        _3 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field0;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb7;
    }

    bb3: {
        _4 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field1;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb7;
    }

    bb4: {
        _5 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field2;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb7;
    }

    bb5: {
        _6 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field3;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb6: {
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Err(move _7);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

promoted[0] in flags::display::_::<impl at src/flags/display.rs:12:45: 12:56>::deserialize::<impl at src/flags/display.rs:12:45: 12:56>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 4";
        _0 = &_1;
        return;
    }
}

fn flags::display::_::<impl at src/flags/display.rs:12:45: 12:56>::deserialize::<impl at src/flags/display.rs:12:45: 12:56>::visit_str(_1: flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor, _2: &str) -> Result<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E> {
    debug self => const flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let mut _8: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let mut _9: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let mut _10: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let mut _11: __E;

    bb0: {
        _6 = <str as PartialEq>::eq(_2, const "all") -> [return: bb12, unwind continue];
    }

    bb1: {
        _7 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field0;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb14;
    }

    bb2: {
        _5 = <str as PartialEq>::eq(_2, const "almost-all") -> [return: bb11, unwind continue];
    }

    bb3: {
        _8 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field1;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb14;
    }

    bb4: {
        _4 = <str as PartialEq>::eq(_2, const "directory-only") -> [return: bb10, unwind continue];
    }

    bb5: {
        _9 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field2;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb14;
    }

    bb6: {
        _3 = <str as PartialEq>::eq(_2, const "visible-only") -> [return: bb9, unwind continue];
    }

    bb7: {
        _10 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field3;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb14;
    }

    bb8: {
        _11 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb13, unwind continue];
    }

    bb9: {
        switchInt(move _3) -> [0: bb8, otherwise: bb7];
    }

    bb10: {
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb11: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb12: {
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb13: {
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Err(move _11);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

fn flags::display::_::<impl at src/flags/display.rs:12:45: 12:56>::deserialize::<impl at src/flags/display.rs:12:45: 12:56>::visit_bytes(_1: flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E> {
    debug self => const flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let mut _16: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let mut _17: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let mut _18: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field;
    let _19: &std::borrow::Cow<'_, str>;
    let _20: std::borrow::Cow<'_, str>;
    let mut _21: __E;
    let _22: &str;
    scope 1 {
        debug __value => _19;
    }

    bb0: {
        _12 = Len((*_2));
        _13 = const 3_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 3]) -> [97: bb2, otherwise: bb4];
    }

    bb2: {
        switchInt((*_2)[1 of 3]) -> [108: bb3, otherwise: bb4];
    }

    bb3: {
        switchInt((*_2)[2 of 3]) -> [108: bb44, otherwise: bb4];
    }

    bb4: {
        _20 = from_utf8_lossy(_2) -> [return: bb48, unwind continue];
    }

    bb5: {
        _9 = Len((*_2));
        _10 = const 10_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb16, otherwise: bb6];
    }

    bb6: {
        switchInt((*_2)[0 of 10]) -> [97: bb7, otherwise: bb4];
    }

    bb7: {
        switchInt((*_2)[1 of 10]) -> [108: bb8, otherwise: bb4];
    }

    bb8: {
        switchInt((*_2)[2 of 10]) -> [109: bb9, otherwise: bb4];
    }

    bb9: {
        switchInt((*_2)[3 of 10]) -> [111: bb10, otherwise: bb4];
    }

    bb10: {
        switchInt((*_2)[4 of 10]) -> [115: bb11, otherwise: bb4];
    }

    bb11: {
        switchInt((*_2)[5 of 10]) -> [116: bb12, otherwise: bb4];
    }

    bb12: {
        switchInt((*_2)[6 of 10]) -> [45: bb13, otherwise: bb4];
    }

    bb13: {
        switchInt((*_2)[7 of 10]) -> [97: bb14, otherwise: bb4];
    }

    bb14: {
        switchInt((*_2)[8 of 10]) -> [108: bb15, otherwise: bb4];
    }

    bb15: {
        switchInt((*_2)[9 of 10]) -> [108: bb45, otherwise: bb4];
    }

    bb16: {
        _6 = Len((*_2));
        _7 = const 14_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb31, otherwise: bb17];
    }

    bb17: {
        switchInt((*_2)[0 of 14]) -> [100: bb18, otherwise: bb4];
    }

    bb18: {
        switchInt((*_2)[1 of 14]) -> [105: bb19, otherwise: bb4];
    }

    bb19: {
        switchInt((*_2)[2 of 14]) -> [114: bb20, otherwise: bb4];
    }

    bb20: {
        switchInt((*_2)[3 of 14]) -> [101: bb21, otherwise: bb4];
    }

    bb21: {
        switchInt((*_2)[4 of 14]) -> [99: bb22, otherwise: bb4];
    }

    bb22: {
        switchInt((*_2)[5 of 14]) -> [116: bb23, otherwise: bb4];
    }

    bb23: {
        switchInt((*_2)[6 of 14]) -> [111: bb24, otherwise: bb4];
    }

    bb24: {
        switchInt((*_2)[7 of 14]) -> [114: bb25, otherwise: bb4];
    }

    bb25: {
        switchInt((*_2)[8 of 14]) -> [121: bb26, otherwise: bb4];
    }

    bb26: {
        switchInt((*_2)[9 of 14]) -> [45: bb27, otherwise: bb4];
    }

    bb27: {
        switchInt((*_2)[10 of 14]) -> [111: bb28, otherwise: bb4];
    }

    bb28: {
        switchInt((*_2)[11 of 14]) -> [110: bb29, otherwise: bb4];
    }

    bb29: {
        switchInt((*_2)[12 of 14]) -> [108: bb30, otherwise: bb4];
    }

    bb30: {
        switchInt((*_2)[13 of 14]) -> [121: bb46, otherwise: bb4];
    }

    bb31: {
        _3 = Len((*_2));
        _4 = const 12_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb4, otherwise: bb32];
    }

    bb32: {
        switchInt((*_2)[0 of 12]) -> [118: bb33, otherwise: bb4];
    }

    bb33: {
        switchInt((*_2)[1 of 12]) -> [105: bb34, otherwise: bb4];
    }

    bb34: {
        switchInt((*_2)[2 of 12]) -> [115: bb35, otherwise: bb4];
    }

    bb35: {
        switchInt((*_2)[3 of 12]) -> [105: bb36, otherwise: bb4];
    }

    bb36: {
        switchInt((*_2)[4 of 12]) -> [98: bb37, otherwise: bb4];
    }

    bb37: {
        switchInt((*_2)[5 of 12]) -> [108: bb38, otherwise: bb4];
    }

    bb38: {
        switchInt((*_2)[6 of 12]) -> [101: bb39, otherwise: bb4];
    }

    bb39: {
        switchInt((*_2)[7 of 12]) -> [45: bb40, otherwise: bb4];
    }

    bb40: {
        switchInt((*_2)[8 of 12]) -> [111: bb41, otherwise: bb4];
    }

    bb41: {
        switchInt((*_2)[9 of 12]) -> [110: bb42, otherwise: bb4];
    }

    bb42: {
        switchInt((*_2)[10 of 12]) -> [108: bb43, otherwise: bb4];
    }

    bb43: {
        switchInt((*_2)[11 of 12]) -> [121: bb47, otherwise: bb4];
    }

    bb44: {
        _15 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field0;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb51;
    }

    bb45: {
        _16 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field1;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb51;
    }

    bb46: {
        _17 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field2;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb51;
    }

    bb47: {
        _18 = flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field::__field3;
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb51;
    }

    bb48: {
        _19 = &_20;
        _22 = <Cow<'_, str> as Deref>::deref(_19) -> [return: bb49, unwind: bb52];
    }

    bb49: {
        _21 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_22, const _) -> [return: bb50, unwind: bb52];
    }

    bb50: {
        _0 = Result::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, __E>::Err(move _21);
        drop(_20) -> [return: bb51, unwind continue];
    }

    bb51: {
        return;
    }

    bb52 (cleanup): {
        drop(_20) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }
}

fn flags::display::_::<impl at src/flags/display.rs:12:45: 12:56>::deserialize::<impl at src/flags/display.rs:12:45: 12:56>::deserialize(_1: __D) -> Result<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor>(move _1, const flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::display::_::<impl at src/flags/display.rs:12:45: 12:56>::deserialize::<impl at src/flags/display.rs:12:45: 12:56>::expecting(_1: &flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum Display";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::display::_::<impl at src/flags/display.rs:12:45: 12:56>::deserialize::<impl at src/flags/display.rs:12:45: 12:56>::visit_enum(_1: flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Visitor<'_>, _2: __A) -> Result<flags::display::Display, <__A as EnumAccess<'_>>::Error> {
    debug self => const flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<flags::display::Display>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<flags::display::Display, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
    let mut _7: isize;
    let _8: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _9: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _10: isize;
    let mut _12: flags::display::Display;
    let _13: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _14: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _15: isize;
    let mut _17: flags::display::Display;
    let _18: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _19: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _20: isize;
    let mut _22: flags::display::Display;
    let _23: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _24: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _25: isize;
    let mut _27: flags::display::Display;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _8;
        let _11: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _11;
        }
    }
    scope 6 {
        debug __variant => _13;
        let _16: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 7 {
            debug __val => const ();
        }
        scope 8 {
            debug __err => _16;
        }
    }
    scope 9 {
        debug __variant => _18;
        let _21: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _21;
        }
    }
    scope 12 {
        debug __variant => _23;
        let _26: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 13 {
            debug __val => const ();
        }
        scope 14 {
            debug __err => _26;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<flags::display::_::<impl Deserialize<'de> for flags::display::Display>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<flags::display::Display, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb21;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant));
        _7 = discriminant((_5.0: flags::display::_::<impl config_file::_::_serde::Deserialize<'de> for flags::display::Display>::deserialize::__Field));
        switchInt(move _7) -> [0: bb6, 1: bb10, 2: bb14, 3: bb5, otherwise: bb3];
    }

    bb5: {
        _23 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _24 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _23) -> [return: bb18, unwind continue];
    }

    bb6: {
        _8 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _11 = move ((_9 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<flags::display::Display, <__A as EnumAccess<'_>>::Error>::Err(move _11);
        goto -> bb21;
    }

    bb9: {
        _12 = flags::display::Display::All;
        _0 = Result::<flags::display::Display, <__A as EnumAccess<'_>>::Error>::Ok(move _12);
        goto -> bb21;
    }

    bb10: {
        _13 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _16 = move ((_14 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<flags::display::Display, <__A as EnumAccess<'_>>::Error>::Err(move _16);
        goto -> bb21;
    }

    bb13: {
        _17 = flags::display::Display::AlmostAll;
        _0 = Result::<flags::display::Display, <__A as EnumAccess<'_>>::Error>::Ok(move _17);
        goto -> bb21;
    }

    bb14: {
        _18 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> [return: bb15, unwind continue];
    }

    bb15: {
        _20 = discriminant(_19);
        switchInt(move _20) -> [0: bb17, 1: bb16, otherwise: bb3];
    }

    bb16: {
        _21 = move ((_19 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<flags::display::Display, <__A as EnumAccess<'_>>::Error>::Err(move _21);
        goto -> bb21;
    }

    bb17: {
        _22 = flags::display::Display::DirectoryOnly;
        _0 = Result::<flags::display::Display, <__A as EnumAccess<'_>>::Error>::Ok(move _22);
        goto -> bb21;
    }

    bb18: {
        _25 = discriminant(_24);
        switchInt(move _25) -> [0: bb20, 1: bb19, otherwise: bb3];
    }

    bb19: {
        _26 = move ((_24 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<flags::display::Display, <__A as EnumAccess<'_>>::Error>::Err(move _26);
        goto -> bb21;
    }

    bb20: {
        _27 = flags::display::Display::VisibleOnly;
        _0 = Result::<flags::display::Display, <__A as EnumAccess<'_>>::Error>::Ok(move _27);
        goto -> bb21;
    }

    bb21: {
        return;
    }
}

const flags::display::_::<impl at src/flags/display.rs:12:45: 12:56>::deserialize::VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 4];
    let _2: &[&str; 4];
    let _3: [&str; 4];
    let mut _4: &[&str; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in flags::display::_::<impl at src/flags/display.rs:12:45: 12:56>::deserialize::VARIANTS: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "all", const "almost-all", const "directory-only", const "visible-only"];
        _0 = &_1;
        return;
    }
}

fn flags::display::<impl at src/flags/display.rs:21:1: 21:36>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<flags::display::Display> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::display::Display>;
    let mut _2: bool;
    let mut _3: flags::display::Display;
    let mut _4: bool;
    let mut _5: flags::display::Display;
    let mut _6: bool;
    let mut _7: flags::display::Display;

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "all") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = flags::display::Display::All;
        _0 = std::option::Option::<flags::display::Display>::Some(move _3);
        goto -> bb10;
    }

    bb3: {
        _4 = ArgMatches::<'_>::is_present::<&str>(_1, const "almost-all") -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _5 = flags::display::Display::AlmostAll;
        _0 = std::option::Option::<flags::display::Display>::Some(move _5);
        goto -> bb10;
    }

    bb6: {
        _6 = ArgMatches::<'_>::is_present::<&str>(_1, const "directory-only") -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _6) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _7 = flags::display::Display::DirectoryOnly;
        _0 = std::option::Option::<flags::display::Display>::Some(move _7);
        goto -> bb10;
    }

    bb9: {
        _0 = std::option::Option::<flags::display::Display>::None;
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn flags::display::<impl at src/flags/display.rs:21:1: 21:36>::from_config(_1: &Config) -> std::option::Option<flags::display::Display> {
    debug config => _1;
    let mut _0: std::option::Option<flags::display::Display>;

    bb0: {
        _0 = ((*_1).5: std::option::Option<flags::display::Display>);
        return;
    }
}

fn flags::display::<impl at src/flags/display.rs:51:1: 51:25>::default() -> flags::display::Display {
    let mut _0: flags::display::Display;

    bb0: {
        _0 = flags::display::Display::VisibleOnly;
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:12:10: 12:15>::clone(_1: &icons::Icons) -> icons::Icons {
    debug self => _1;
    let mut _0: flags::icons::Icons;
    let mut _2: flags::icons::IconOption;
    let _3: &flags::icons::IconOption;
    let mut _4: flags::icons::IconTheme;
    let _5: &flags::icons::IconTheme;
    let mut _6: flags::icons::IconSeparator;
    let _7: &flags::icons::IconSeparator;

    bb0: {
        _3 = &((*_1).0: flags::icons::IconOption);
        _2 = <IconOption as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: flags::icons::IconTheme);
        _4 = <IconTheme as Clone>::clone(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &((*_1).2: flags::icons::IconSeparator);
        _6 = <IconSeparator as Clone>::clone(_7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = icons::Icons { when: move _2, theme: move _4, separator: move _6 };
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:12:17: 12:22>::fmt(_1: &icons::Icons, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &flags::icons::IconOption;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &flags::icons::IconTheme;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&flags::icons::IconSeparator;
    let _13: &flags::icons::IconSeparator;

    bb0: {
        _3 = const "Icons";
        _4 = const "when";
        _6 = &((*_1).0: flags::icons::IconOption);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "theme";
        _9 = &((*_1).1: flags::icons::IconTheme);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "separator";
        _13 = &((*_1).2: flags::icons::IconSeparator);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:12:24: 12:33>::eq(_1: &icons::Icons, _2: &icons::Icons) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &flags::icons::IconOption;
    let mut _5: &flags::icons::IconOption;
    let mut _6: bool;
    let mut _7: &flags::icons::IconTheme;
    let mut _8: &flags::icons::IconTheme;
    let mut _9: &flags::icons::IconSeparator;
    let mut _10: &flags::icons::IconSeparator;

    bb0: {
        _4 = &((*_1).0: flags::icons::IconOption);
        _5 = &((*_2).0: flags::icons::IconOption);
        _3 = <IconOption as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        _7 = &((*_1).1: flags::icons::IconTheme);
        _8 = &((*_2).1: flags::icons::IconTheme);
        _6 = <IconTheme as PartialEq>::eq(move _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _9 = &((*_1).2: flags::icons::IconSeparator);
        _10 = &((*_2).2: flags::icons::IconSeparator);
        _0 = <IconSeparator as PartialEq>::eq(move _9, move _10) -> [return: bb6, unwind continue];
    }

    bb5: {
        _0 = const false;
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:12:35: 12:37>::assert_receiver_is_total_eq(_1: &icons::Icons) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:12:39: 12:46>::default() -> icons::Icons {
    let mut _0: flags::icons::Icons;
    let mut _1: flags::icons::IconOption;
    let mut _2: flags::icons::IconTheme;
    let mut _3: flags::icons::IconSeparator;

    bb0: {
        _1 = <IconOption as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <IconTheme as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <IconSeparator as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = icons::Icons { when: move _1, theme: move _2, separator: move _3 };
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:22:1: 22:11>::configure_from(_1: &ArgMatches<'_>, _2: &Config) -> icons::Icons {
    debug matches => _1;
    debug config => _2;
    let mut _0: flags::icons::Icons;
    let _3: flags::icons::IconOption;
    scope 1 {
        debug when => _3;
        let _4: flags::icons::IconTheme;
        scope 2 {
            debug theme => _4;
            let _5: flags::icons::IconSeparator;
            scope 3 {
                debug separator => _5;
            }
        }
    }

    bb0: {
        _3 = <IconOption as Configurable<IconOption>>::configure_from(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <IconTheme as Configurable<IconTheme>>::configure_from(_1, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = <IconSeparator as Configurable<IconSeparator>>::configure_from(_1, _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = icons::Icons { when: _3, theme: _4, separator: move _5 };
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:40:10: 40:15>::clone(_1: &IconOption) -> IconOption {
    debug self => _1;
    let mut _0: flags::icons::IconOption;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:40:17: 40:22>::fmt(_1: &IconOption, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "Never";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Always";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "Auto";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:40:30: 40:39>::eq(_1: &IconOption, _2: &IconOption) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:40:41: 40:43>::assert_receiver_is_total_eq(_1: &IconOption) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

const icons::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize(_1: __D) -> Result<IconOption, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::icons::IconOption, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_enum::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Visitor<'_>>(move _1, const "IconOption", const _, const icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<IconOption>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize::<impl at src/flags/icons.rs:40:45: 40:56>::expecting(_1: &icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize::<impl at src/flags/icons.rs:40:45: 40:56>::visit_u64(_1: icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__FieldVisitor, _2: u64) -> Result<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E> {
    debug self => const icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field, __E>;
    let mut _3: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field;
    let mut _4: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field;
    let mut _5: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: config_file::_::_serde::de::Unexpected<'_>;
    let mut _8: &dyn config_file::_::_serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field::__field0;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field::__field1;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field::__field2;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in icons::_::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize::<impl at src/flags/icons.rs:40:45: 40:56>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize::<impl at src/flags/icons.rs:40:45: 40:56>::visit_str(_1: icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__FieldVisitor, _2: &str) -> Result<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E> {
    debug self => const icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field;
    let mut _7: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field;
    let mut _8: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field;
    let mut _9: __E;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "always") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field::__field0;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb11;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "auto") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field::__field1;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb11;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "never") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field::__field2;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb11;
    }

    bb6: {
        _9 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb10, unwind continue];
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Err(move _9);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize::<impl at src/flags/icons.rs:40:45: 40:56>::visit_bytes(_1: icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E> {
    debug self => const icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field;
    let mut _13: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field;
    let mut _14: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field;
    let _15: &std::borrow::Cow<'_, str>;
    let _16: std::borrow::Cow<'_, str>;
    let mut _17: __E;
    let _18: &str;
    scope 1 {
        debug __value => _15;
    }

    bb0: {
        _9 = Len((*_2));
        _10 = const 6_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 6]) -> [97: bb2, otherwise: bb7];
    }

    bb2: {
        switchInt((*_2)[1 of 6]) -> [108: bb3, otherwise: bb7];
    }

    bb3: {
        switchInt((*_2)[2 of 6]) -> [119: bb4, otherwise: bb7];
    }

    bb4: {
        switchInt((*_2)[3 of 6]) -> [97: bb5, otherwise: bb7];
    }

    bb5: {
        switchInt((*_2)[4 of 6]) -> [121: bb6, otherwise: bb7];
    }

    bb6: {
        switchInt((*_2)[5 of 6]) -> [115: bb19, otherwise: bb7];
    }

    bb7: {
        _16 = from_utf8_lossy(_2) -> [return: bb22, unwind continue];
    }

    bb8: {
        _6 = Len((*_2));
        _7 = const 4_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb13, otherwise: bb9];
    }

    bb9: {
        switchInt((*_2)[0 of 4]) -> [97: bb10, otherwise: bb7];
    }

    bb10: {
        switchInt((*_2)[1 of 4]) -> [117: bb11, otherwise: bb7];
    }

    bb11: {
        switchInt((*_2)[2 of 4]) -> [116: bb12, otherwise: bb7];
    }

    bb12: {
        switchInt((*_2)[3 of 4]) -> [111: bb20, otherwise: bb7];
    }

    bb13: {
        _3 = Len((*_2));
        _4 = const 5_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb7, otherwise: bb14];
    }

    bb14: {
        switchInt((*_2)[0 of 5]) -> [110: bb15, otherwise: bb7];
    }

    bb15: {
        switchInt((*_2)[1 of 5]) -> [101: bb16, otherwise: bb7];
    }

    bb16: {
        switchInt((*_2)[2 of 5]) -> [118: bb17, otherwise: bb7];
    }

    bb17: {
        switchInt((*_2)[3 of 5]) -> [101: bb18, otherwise: bb7];
    }

    bb18: {
        switchInt((*_2)[4 of 5]) -> [114: bb21, otherwise: bb7];
    }

    bb19: {
        _12 = icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field::__field0;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb25;
    }

    bb20: {
        _13 = icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field::__field1;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb25;
    }

    bb21: {
        _14 = icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field::__field2;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb25;
    }

    bb22: {
        _15 = &_16;
        _18 = <Cow<'_, str> as Deref>::deref(_15) -> [return: bb23, unwind: bb26];
    }

    bb23: {
        _17 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_18, const _) -> [return: bb24, unwind: bb26];
    }

    bb24: {
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, __E>::Err(move _17);
        drop(_16) -> [return: bb25, unwind continue];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_16) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }
}

fn icons::_::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize(_1: __D) -> Result<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__FieldVisitor>(move _1, const icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize::<impl at src/flags/icons.rs:40:45: 40:56>::expecting(_1: &icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum IconOption";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize::<impl at src/flags/icons.rs:40:45: 40:56>::visit_enum(_1: icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Visitor<'_>, _2: __A) -> Result<IconOption, <__A as EnumAccess<'_>>::Error> {
    debug self => const icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<IconOption>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<flags::icons::IconOption, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
    let mut _7: isize;
    let _8: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _9: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _10: isize;
    let mut _12: flags::icons::IconOption;
    let _13: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _14: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _15: isize;
    let mut _17: flags::icons::IconOption;
    let _18: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _19: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _20: isize;
    let mut _22: flags::icons::IconOption;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _8;
        let _11: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _11;
        }
    }
    scope 6 {
        debug __variant => _13;
        let _16: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 7 {
            debug __val => const ();
        }
        scope 8 {
            debug __err => _16;
        }
    }
    scope 9 {
        debug __variant => _18;
        let _21: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _21;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<icons::_::<impl Deserialize<'de> for IconOption>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<IconOption, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb17;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant));
        _7 = discriminant((_5.0: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconOption>::deserialize::__Field));
        switchInt(move _7) -> [0: bb6, 1: bb10, 2: bb5, otherwise: bb3];
    }

    bb5: {
        _18 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> [return: bb14, unwind continue];
    }

    bb6: {
        _8 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _11 = move ((_9 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<IconOption, <__A as EnumAccess<'_>>::Error>::Err(move _11);
        goto -> bb17;
    }

    bb9: {
        _12 = IconOption::Always;
        _0 = Result::<IconOption, <__A as EnumAccess<'_>>::Error>::Ok(move _12);
        goto -> bb17;
    }

    bb10: {
        _13 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _16 = move ((_14 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<IconOption, <__A as EnumAccess<'_>>::Error>::Err(move _16);
        goto -> bb17;
    }

    bb13: {
        _17 = IconOption::Auto;
        _0 = Result::<IconOption, <__A as EnumAccess<'_>>::Error>::Ok(move _17);
        goto -> bb17;
    }

    bb14: {
        _20 = discriminant(_19);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _21 = move ((_19 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<IconOption, <__A as EnumAccess<'_>>::Error>::Err(move _21);
        goto -> bb17;
    }

    bb16: {
        _22 = IconOption::Never;
        _0 = Result::<IconOption, <__A as EnumAccess<'_>>::Error>::Ok(move _22);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

const icons::_::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize::VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in icons::_::<impl at src/flags/icons.rs:40:45: 40:56>::deserialize::VARIANTS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "always", const "auto", const "never"];
        _0 = &_1;
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:48:1: 48:39>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<IconOption> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::icons::IconOption>;
    let mut _2: bool;
    let mut _3: flags::icons::IconOption;
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: std::option::Option<&str>;
    let mut _7: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, clap::Values<'_>>;
    let mut _8: std::option::Option<clap::Values<'_>>;
    let mut _9: isize;
    let _10: clap::Values<'_>;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: isize;
    let mut _15: flags::icons::IconOption;
    let mut _16: flags::icons::IconOption;
    let mut _17: flags::icons::IconOption;
    let _18: !;
    scope 1 {
        debug residual => const std::option::Option::<Infallible>::None;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _10;
        scope 4 {
        }
    }

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "classic") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = IconOption::Never;
        _0 = std::option::Option::<IconOption>::Some(move _3);
        goto -> bb23;
    }

    bb3: {
        _5 = ArgMatches::<'_>::occurrences_of::<&str>(_1, const "icon") -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = Gt(move _5, const 0_u64);
        switchInt(move _4) -> [0: bb22, otherwise: bb5];
    }

    bb5: {
        _8 = ArgMatches::<'_>::values_of::<&str>(_1, const "icon") -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = <std::option::Option<clap::Values<'_>> as Try>::branch(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _10 = move ((_7 as Continue).0: clap::Values<'_>);
        _6 = <clap::Values<'_> as Iterator>::last(move _10) -> [return: bb11, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _0 = <std::option::Option<IconOption> as FromResidual<std::option::Option<Infallible>>>::from_residual(const std::option::Option::<Infallible>::None) -> [return: bb23, unwind continue];
    }

    bb11: {
        _14 = discriminant(_6);
        switchInt(move _14) -> [1: bb13, otherwise: bb12];
    }

    bb12: {
        _18 = begin_panic::<&str>(const "This should not be reachable!") -> unwind continue;
    }

    bb13: {
        _13 = <str as PartialEq>::eq(((_6 as Some).0: &str), const "always") -> [return: bb21, unwind continue];
    }

    bb14: {
        _15 = IconOption::Always;
        _0 = std::option::Option::<IconOption>::Some(move _15);
        goto -> bb23;
    }

    bb15: {
        _12 = <str as PartialEq>::eq(((_6 as Some).0: &str), const "auto") -> [return: bb20, unwind continue];
    }

    bb16: {
        _16 = IconOption::Auto;
        _0 = std::option::Option::<IconOption>::Some(move _16);
        goto -> bb23;
    }

    bb17: {
        _11 = <str as PartialEq>::eq(((_6 as Some).0: &str), const "never") -> [return: bb19, unwind continue];
    }

    bb18: {
        _17 = IconOption::Never;
        _0 = std::option::Option::<IconOption>::Some(move _17);
        goto -> bb23;
    }

    bb19: {
        switchInt(move _11) -> [0: bb12, otherwise: bb18];
    }

    bb20: {
        switchInt(move _12) -> [0: bb17, otherwise: bb16];
    }

    bb21: {
        switchInt(move _13) -> [0: bb15, otherwise: bb14];
    }

    bb22: {
        _0 = std::option::Option::<IconOption>::None;
        goto -> bb23;
    }

    bb23: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:48:1: 48:39>::from_config(_1: &Config) -> std::option::Option<IconOption> {
    debug config => _1;
    let mut _0: std::option::Option<flags::icons::IconOption>;
    let mut _2: &std::option::Option<bool>;
    let mut _3: isize;
    let mut _4: flags::icons::IconOption;
    let mut _5: &std::option::Option<config_file::Icons>;
    let mut _6: isize;
    scope 1 {
    }
    scope 2 {
        debug icon => _7;
        let _7: &config_file::Icons;
    }

    bb0: {
        _2 = &((*_1).0: std::option::Option<bool>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt((((*_2) as Some).0: bool)) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = IconOption::Never;
        _0 = std::option::Option::<IconOption>::Some(move _4);
        goto -> bb6;
    }

    bb3: {
        _5 = &((*_1).6: std::option::Option<config_file::Icons>);
        _6 = discriminant((*_5));
        switchInt(move _6) -> [1: bb5, otherwise: bb4];
    }

    bb4: {
        _0 = std::option::Option::<IconOption>::None;
        goto -> bb6;
    }

    bb5: {
        _7 = &(((*_5) as Some).0: config_file::Icons);
        _0 = ((*_7).0: std::option::Option<flags::icons::IconOption>);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:89:1: 89:28>::default() -> IconOption {
    let mut _0: flags::icons::IconOption;

    bb0: {
        _0 = IconOption::Auto;
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:96:10: 96:15>::clone(_1: &IconTheme) -> IconTheme {
    debug self => _1;
    let mut _0: flags::icons::IconTheme;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:96:17: 96:22>::fmt(_1: &IconTheme, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = const "Fancy";
        _3 = _6;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Unicode";
        _3 = _5;
        goto -> bb4;
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:96:30: 96:39>::eq(_1: &IconTheme, _2: &IconTheme) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:96:41: 96:43>::assert_receiver_is_total_eq(_1: &IconTheme) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

const icons::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize(_1: __D) -> Result<IconTheme, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::icons::IconTheme, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_enum::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Visitor<'_>>(move _1, const "IconTheme", const _, const icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<IconTheme>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize::<impl at src/flags/icons.rs:96:45: 96:56>::expecting(_1: &icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize::<impl at src/flags/icons.rs:96:45: 96:56>::visit_u64(_1: icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__FieldVisitor, _2: u64) -> Result<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E> {
    debug self => const icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field, __E>;
    let mut _3: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field;
    let mut _4: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field;
    let mut _5: __E;
    let mut _6: config_file::_::_serde::de::Unexpected<'_>;
    let mut _7: &dyn config_file::_::_serde::de::Expected;
    let mut _8: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        _6 = Unexpected::<'_>::Unsigned(_2);
        _8 = const _;
        _7 = _8 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _5 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb2: {
        _3 = icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field::__field0;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb5;
    }

    bb3: {
        _4 = icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field::__field1;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb5;
    }

    bb4: {
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E>::Err(move _5);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

promoted[0] in icons::_::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize::<impl at src/flags/icons.rs:96:45: 96:56>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 2";
        _0 = &_1;
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize::<impl at src/flags/icons.rs:96:45: 96:56>::visit_str(_1: icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__FieldVisitor, _2: &str) -> Result<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E> {
    debug self => const icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field;
    let mut _6: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field;
    let mut _7: __E;

    bb0: {
        _4 = <str as PartialEq>::eq(_2, const "unicode") -> [return: bb6, unwind continue];
    }

    bb1: {
        _5 = icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field::__field0;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb8;
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_2, const "fancy") -> [return: bb5, unwind continue];
    }

    bb3: {
        _6 = icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field::__field1;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb8;
    }

    bb4: {
        _7 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb7, unwind continue];
    }

    bb5: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb7: {
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E>::Err(move _7);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize::<impl at src/flags/icons.rs:96:45: 96:56>::visit_bytes(_1: icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E> {
    debug self => const icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field;
    let mut _10: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field;
    let _11: &std::borrow::Cow<'_, str>;
    let _12: std::borrow::Cow<'_, str>;
    let mut _13: __E;
    let _14: &str;
    scope 1 {
        debug __value => _11;
    }

    bb0: {
        _6 = Len((*_2));
        _7 = const 7_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [117: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [110: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [105: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [99: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [111: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [100: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [101: bb15, otherwise: bb8];
    }

    bb8: {
        _12 = from_utf8_lossy(_2) -> [return: bb17, unwind continue];
    }

    bb9: {
        _3 = Len((*_2));
        _4 = const 5_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb10];
    }

    bb10: {
        switchInt((*_2)[0 of 5]) -> [102: bb11, otherwise: bb8];
    }

    bb11: {
        switchInt((*_2)[1 of 5]) -> [97: bb12, otherwise: bb8];
    }

    bb12: {
        switchInt((*_2)[2 of 5]) -> [110: bb13, otherwise: bb8];
    }

    bb13: {
        switchInt((*_2)[3 of 5]) -> [99: bb14, otherwise: bb8];
    }

    bb14: {
        switchInt((*_2)[4 of 5]) -> [121: bb16, otherwise: bb8];
    }

    bb15: {
        _9 = icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field::__field0;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb20;
    }

    bb16: {
        _10 = icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field::__field1;
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb20;
    }

    bb17: {
        _11 = &_12;
        _14 = <Cow<'_, str> as Deref>::deref(_11) -> [return: bb18, unwind: bb21];
    }

    bb18: {
        _13 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_14, const _) -> [return: bb19, unwind: bb21];
    }

    bb19: {
        _0 = Result::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, __E>::Err(move _13);
        drop(_12) -> [return: bb20, unwind continue];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_12) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }
}

fn icons::_::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize(_1: __D) -> Result<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__FieldVisitor>(move _1, const icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize::<impl at src/flags/icons.rs:96:45: 96:56>::expecting(_1: &icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum IconTheme";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize::<impl at src/flags/icons.rs:96:45: 96:56>::visit_enum(_1: icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Visitor<'_>, _2: __A) -> Result<IconTheme, <__A as EnumAccess<'_>>::Error> {
    debug self => const icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<IconTheme>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<flags::icons::IconTheme, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
    let mut _7: isize;
    let _8: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _9: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _10: isize;
    let mut _12: flags::icons::IconTheme;
    let _13: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _14: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _15: isize;
    let mut _17: flags::icons::IconTheme;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _8;
        let _11: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _11;
        }
    }
    scope 6 {
        debug __variant => _13;
        let _16: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 7 {
            debug __val => const ();
        }
        scope 8 {
            debug __err => _16;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<icons::_::<impl Deserialize<'de> for IconTheme>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<IconTheme, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb13;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant));
        _7 = discriminant((_5.0: flags::icons::_::<impl config_file::_::_serde::Deserialize<'de> for flags::icons::IconTheme>::deserialize::__Field));
        switchInt(move _7) -> [0: bb6, 1: bb5, otherwise: bb3];
    }

    bb5: {
        _13 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> [return: bb10, unwind continue];
    }

    bb6: {
        _8 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _11 = move ((_9 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<IconTheme, <__A as EnumAccess<'_>>::Error>::Err(move _11);
        goto -> bb13;
    }

    bb9: {
        _12 = IconTheme::Unicode;
        _0 = Result::<IconTheme, <__A as EnumAccess<'_>>::Error>::Ok(move _12);
        goto -> bb13;
    }

    bb10: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb12, 1: bb11, otherwise: bb3];
    }

    bb11: {
        _16 = move ((_14 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<IconTheme, <__A as EnumAccess<'_>>::Error>::Err(move _16);
        goto -> bb13;
    }

    bb12: {
        _17 = IconTheme::Fancy;
        _0 = Result::<IconTheme, <__A as EnumAccess<'_>>::Error>::Ok(move _17);
        goto -> bb13;
    }

    bb13: {
        return;
    }
}

const icons::_::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize::VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 2];
    let _2: &[&str; 2];
    let _3: [&str; 2];
    let mut _4: &[&str; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in icons::_::<impl at src/flags/icons.rs:96:45: 96:56>::deserialize::VARIANTS: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "unicode", const "fancy"];
        _0 = &_1;
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:103:1: 103:38>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<IconTheme> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::icons::IconTheme>;
    let mut _2: bool;
    let mut _3: u64;
    let mut _4: std::option::Option<&str>;
    let mut _5: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, clap::Values<'_>>;
    let mut _6: std::option::Option<clap::Values<'_>>;
    let mut _7: isize;
    let _8: clap::Values<'_>;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: flags::icons::IconTheme;
    let mut _13: flags::icons::IconTheme;
    let _14: !;
    scope 1 {
        debug residual => const std::option::Option::<Infallible>::None;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;
        scope 4 {
        }
    }

    bb0: {
        _3 = ArgMatches::<'_>::occurrences_of::<&str>(_1, const "icon-theme") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Gt(move _3, const 0_u64);
        switchInt(move _2) -> [0: bb16, otherwise: bb2];
    }

    bb2: {
        _6 = ArgMatches::<'_>::values_of::<&str>(_1, const "icon-theme") -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = <std::option::Option<clap::Values<'_>> as Try>::branch(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _8 = move ((_5 as Continue).0: clap::Values<'_>);
        _4 = <clap::Values<'_> as Iterator>::last(move _8) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _0 = <std::option::Option<IconTheme> as FromResidual<std::option::Option<Infallible>>>::from_residual(const std::option::Option::<Infallible>::None) -> [return: bb17, unwind continue];
    }

    bb8: {
        _11 = discriminant(_4);
        switchInt(move _11) -> [1: bb10, otherwise: bb9];
    }

    bb9: {
        _14 = begin_panic::<&str>(const "This should not be reachable!") -> unwind continue;
    }

    bb10: {
        _10 = <str as PartialEq>::eq(((_4 as Some).0: &str), const "fancy") -> [return: bb15, unwind continue];
    }

    bb11: {
        _12 = IconTheme::Fancy;
        _0 = std::option::Option::<IconTheme>::Some(move _12);
        goto -> bb17;
    }

    bb12: {
        _9 = <str as PartialEq>::eq(((_4 as Some).0: &str), const "unicode") -> [return: bb14, unwind continue];
    }

    bb13: {
        _13 = IconTheme::Unicode;
        _0 = std::option::Option::<IconTheme>::Some(move _13);
        goto -> bb17;
    }

    bb14: {
        switchInt(move _9) -> [0: bb9, otherwise: bb13];
    }

    bb15: {
        switchInt(move _10) -> [0: bb12, otherwise: bb11];
    }

    bb16: {
        _0 = std::option::Option::<IconTheme>::None;
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:103:1: 103:38>::from_config(_1: &Config) -> std::option::Option<IconTheme> {
    debug config => _1;
    let mut _0: std::option::Option<flags::icons::IconTheme>;
    let mut _2: &std::option::Option<config_file::Icons>;
    let mut _3: isize;
    let mut _5: isize;
    scope 1 {
        debug icon => _4;
        let _4: &config_file::Icons;
        scope 2 {
            debug theme => _6;
            let _6: flags::icons::IconTheme;
        }
    }

    bb0: {
        _2 = &((*_1).6: std::option::Option<config_file::Icons>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        _4 = &(((*_2) as Some).0: config_file::Icons);
        _5 = discriminant(((*_4).1: std::option::Option<flags::icons::IconTheme>));
        switchInt(move _5) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = ((((*_4).1: std::option::Option<flags::icons::IconTheme>) as Some).0: flags::icons::IconTheme);
        _0 = std::option::Option::<IconTheme>::Some(_6);
        goto -> bb4;
    }

    bb3: {
        _0 = std::option::Option::<IconTheme>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:136:1: 136:27>::default() -> IconTheme {
    let mut _0: flags::icons::IconTheme;

    bb0: {
        _0 = IconTheme::Fancy;
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:142:10: 142:15>::clone(_1: &IconSeparator) -> IconSeparator {
    debug self => _1;
    let mut _0: flags::icons::IconSeparator;
    let mut _2: std::string::String;
    let _3: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <std::string::String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = IconSeparator(move _2);
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:142:17: 142:22>::fmt(_1: &IconSeparator, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::string::String;
    let _6: &std::string::String;

    bb0: {
        _3 = const "IconSeparator";
        _6 = &((*_1).0: std::string::String);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:142:24: 142:33>::eq(_1: &IconSeparator, _2: &IconSeparator) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::string::String;
    let mut _4: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _4 = &((*_2).0: std::string::String);
        _0 = <std::string::String as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:142:35: 142:37>::assert_receiver_is_total_eq(_1: &IconSeparator) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

const icons::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:142:39: 142:50>::deserialize(_1: __D) -> Result<IconSeparator, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::icons::IconSeparator, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_newtype_struct::<icons::_::<impl Deserialize<'de> for IconSeparator>::deserialize::__Visitor<'_>>(move _1, const "IconSeparator", const icons::_::<impl Deserialize<'de> for IconSeparator>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<IconSeparator>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:142:39: 142:50>::deserialize::<impl at src/flags/icons.rs:142:39: 142:50>::expecting(_1: &icons::_::<impl Deserialize<'de> for IconSeparator>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple struct IconSeparator";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:142:39: 142:50>::deserialize::<impl at src/flags/icons.rs:142:39: 142:50>::visit_newtype_struct(_1: icons::_::<impl Deserialize<'de> for IconSeparator>::deserialize::__Visitor<'_>, _2: __E) -> Result<IconSeparator, <__E as Deserializer<'_>>::Error> {
    debug self => const icons::_::<impl Deserialize<'de> for IconSeparator>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<IconSeparator>, lifetime: PhantomData::<&()> }};
    debug __e => _2;
    let mut _0: std::result::Result<flags::icons::IconSeparator, <__E as config_file::_::_serde::Deserializer<'_>>::Error>;
    let mut _3: std::result::Result<std::string::String, <__E as config_file::_::_serde::Deserializer<'_>>::Error>;
    let mut _4: isize;
    let _5: std::string::String;
    let _6: <__E as config_file::_::_serde::Deserializer<'_>>::Error;
    let mut _7: flags::icons::IconSeparator;
    scope 1 {
        debug __field0 => _5;
    }
    scope 2 {
        debug __val => _5;
    }
    scope 3 {
        debug __err => _6;
    }

    bb0: {
        _3 = <std::string::String as Deserialize<'_>>::deserialize::<__E>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__E as config_file::_::_serde::Deserializer<'_>>::Error);
        _0 = Result::<IconSeparator, <__E as Deserializer<'_>>::Error>::Err(move _6);
        goto -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: std::string::String);
        _7 = IconSeparator(move _5);
        _0 = Result::<IconSeparator, <__E as Deserializer<'_>>::Error>::Ok(move _7);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn icons::_::<impl at src/flags/icons.rs:142:39: 142:50>::deserialize::<impl at src/flags/icons.rs:142:39: 142:50>::visit_seq(_1: icons::_::<impl Deserialize<'de> for IconSeparator>::deserialize::__Visitor<'_>, _2: __A) -> Result<IconSeparator, <__A as SeqAccess<'_>>::Error> {
    debug self => const icons::_::<impl Deserialize<'de> for IconSeparator>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<IconSeparator>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<flags::icons::IconSeparator, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<std::string::String>, <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<std::string::String>;
    let _7: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: std::string::String;
    let mut _10: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn config_file::_::_serde::de::Expected;
    let mut _12: flags::icons::IconSeparator;
    let mut _13: &&str;
    scope 1 {
        debug __field0 => _9;
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_4) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<IconSeparator, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb8;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = move ((_3 as Ok).0: std::option::Option<std::string::String>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _13 = const _;
        _11 = _13 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as config_file::_::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb10];
    }

    bb6: {
        _9 = move ((_6 as Some).0: std::string::String);
        _12 = IconSeparator(move _9);
        _0 = Result::<IconSeparator, <__A as SeqAccess<'_>>::Error>::Ok(move _12);
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb7: {
        _0 = Result::<IconSeparator, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb8;
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in icons::_::<impl at src/flags/icons.rs:142:39: 142:50>::deserialize::<impl at src/flags/icons.rs:142:39: 142:50>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple struct IconSeparator with 1 element";
        _0 = &_1;
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:146:1: 146:42>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<IconSeparator> {
    debug _matches => _1;
    let mut _0: std::option::Option<flags::icons::IconSeparator>;

    bb0: {
        _0 = std::option::Option::<IconSeparator>::None;
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:146:1: 146:42>::from_config(_1: &Config) -> std::option::Option<IconSeparator> {
    debug config => _1;
    let mut _0: std::option::Option<flags::icons::IconSeparator>;
    let mut _2: &std::option::Option<config_file::Icons>;
    let mut _3: isize;
    let mut _5: std::option::Option<std::string::String>;
    let mut _6: &std::option::Option<std::string::String>;
    let mut _7: isize;
    let mut _9: flags::icons::IconSeparator;
    scope 1 {
        debug icon => _4;
        let _4: &config_file::Icons;
        scope 2 {
            debug separator => _8;
            let _8: std::string::String;
        }
    }

    bb0: {
        _2 = &((*_1).6: std::option::Option<config_file::Icons>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb5];
    }

    bb1: {
        _4 = &(((*_2) as Some).0: config_file::Icons);
        _6 = &((*_4).2: std::option::Option<std::string::String>);
        _5 = <std::option::Option<std::string::String> as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_5 as Some).0: std::string::String);
        _9 = IconSeparator(move _8);
        _0 = std::option::Option::<IconSeparator>::Some(move _9);
        goto -> bb6;
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = std::option::Option::<IconSeparator>::None;
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn icons::<impl at src/flags/icons.rs:170:1: 170:31>::default() -> IconSeparator {
    let mut _0: flags::icons::IconSeparator;
    let mut _1: std::string::String;
    let _2: &str;

    bb0: {
        _2 = const " ";
        _1 = <str as ToString>::to_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = IconSeparator(move _1);
        return;
    }
}

fn ignore_globs::<impl at src/flags/ignore_globs.rs:10:10: 10:15>::clone(_1: &IgnoreGlobs) -> IgnoreGlobs {
    debug self => _1;
    let mut _0: flags::ignore_globs::IgnoreGlobs;
    let mut _2: globset::GlobSet;
    let _3: &globset::GlobSet;

    bb0: {
        _3 = &((*_1).0: globset::GlobSet);
        _2 = <GlobSet as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = IgnoreGlobs(move _2);
        return;
    }
}

fn ignore_globs::<impl at src/flags/ignore_globs.rs:10:17: 10:22>::fmt(_1: &IgnoreGlobs, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&globset::GlobSet;
    let _6: &globset::GlobSet;

    bb0: {
        _3 = const "IgnoreGlobs";
        _6 = &((*_1).0: globset::GlobSet);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn ignore_globs::<impl at src/flags/ignore_globs.rs:13:1: 13:17>::configure_from(_1: &ArgMatches<'_>, _2: &Config) -> Result<IgnoreGlobs, clap::Error> {
    debug matches => _1;
    debug config => _2;
    let mut _0: std::result::Result<flags::ignore_globs::IgnoreGlobs, clap::Error>;
    let mut _3: std::result::Result<flags::ignore_globs::IgnoreGlobs, clap::Error>;
    let mut _4: flags::ignore_globs::IgnoreGlobs;
    let mut _5: bool;
    let mut _6: std::option::Option<std::result::Result<globset::GlobSet, clap::Error>>;
    let mut _7: isize;
    let mut _9: isize;
    let mut _11: std::result::Result<flags::ignore_globs::IgnoreGlobs, clap::Error>;
    let mut _12: flags::ignore_globs::IgnoreGlobs;
    let mut _14: std::result::Result<flags::ignore_globs::IgnoreGlobs, clap::Error>;
    let mut _15: std::option::Option<std::result::Result<globset::GlobSet, clap::Error>>;
    let mut _16: isize;
    let mut _18: isize;
    let mut _20: std::result::Result<flags::ignore_globs::IgnoreGlobs, clap::Error>;
    let mut _21: flags::ignore_globs::IgnoreGlobs;
    let mut _23: std::result::Result<flags::ignore_globs::IgnoreGlobs, clap::Error>;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    scope 1 {
        debug result => _3;
        scope 2 {
            debug value => _8;
            let _8: std::result::Result<globset::GlobSet, clap::Error>;
            let _10: globset::GlobSet;
            let _13: clap::Error;
            scope 3 {
                debug glob_set => _10;
            }
            scope 4 {
                debug err => _13;
            }
        }
        scope 5 {
            debug value => _17;
            let _17: std::result::Result<globset::GlobSet, clap::Error>;
            let _19: globset::GlobSet;
            let _22: clap::Error;
            scope 6 {
                debug glob_set => _19;
            }
            scope 7 {
                debug err => _22;
            }
        }
    }

    bb0: {
        _24 = const false;
        _25 = const false;
        _4 = <IgnoreGlobs as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Result::<IgnoreGlobs, clap::Error>::Ok(move _4);
        _5 = ArgMatches::<'_>::is_present::<&str>(_1, const "ignore-config") -> [return: bb2, unwind: bb22];
    }

    bb2: {
        switchInt(move _5) -> [0: bb3, otherwise: bb13];
    }

    bb3: {
        _6 = IgnoreGlobs::from_config(_2) -> [return: bb4, unwind: bb22];
    }

    bb4: {
        _24 = const true;
        _7 = discriminant(_6);
        switchInt(move _7) -> [1: bb5, otherwise: bb27];
    }

    bb5: {
        _24 = const false;
        _8 = move ((_6 as Some).0: std::result::Result<globset::GlobSet, clap::Error>);
        _9 = discriminant(_8);
        switchInt(move _9) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _13 = move ((_8 as Err).0: clap::Error);
        _14 = Result::<IgnoreGlobs, clap::Error>::Err(move _13);
        drop(_3) -> [return: bb11, unwind: bb12];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _10 = move ((_8 as Ok).0: globset::GlobSet);
        _12 = IgnoreGlobs(move _10);
        _11 = Result::<IgnoreGlobs, clap::Error>::Ok(move _12);
        drop(_3) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _3 = move _11;
        goto -> bb27;
    }

    bb10 (cleanup): {
        _3 = move _11;
        goto -> bb22;
    }

    bb11: {
        _3 = move _14;
        goto -> bb27;
    }

    bb12 (cleanup): {
        _3 = move _14;
        goto -> bb22;
    }

    bb13: {
        _15 = IgnoreGlobs::from_arg_matches(_1) -> [return: bb14, unwind: bb22];
    }

    bb14: {
        _25 = const true;
        _16 = discriminant(_15);
        switchInt(move _16) -> [1: bb15, otherwise: bb31];
    }

    bb15: {
        _25 = const false;
        _17 = move ((_15 as Some).0: std::result::Result<globset::GlobSet, clap::Error>);
        _18 = discriminant(_17);
        switchInt(move _18) -> [0: bb17, 1: bb16, otherwise: bb7];
    }

    bb16: {
        _22 = move ((_17 as Err).0: clap::Error);
        _23 = Result::<IgnoreGlobs, clap::Error>::Err(move _22);
        drop(_3) -> [return: bb20, unwind: bb21];
    }

    bb17: {
        _19 = move ((_17 as Ok).0: globset::GlobSet);
        _21 = IgnoreGlobs(move _19);
        _20 = Result::<IgnoreGlobs, clap::Error>::Ok(move _21);
        drop(_3) -> [return: bb18, unwind: bb19];
    }

    bb18: {
        _3 = move _20;
        goto -> bb31;
    }

    bb19 (cleanup): {
        _3 = move _20;
        goto -> bb22;
    }

    bb20: {
        _3 = move _23;
        goto -> bb31;
    }

    bb21 (cleanup): {
        _3 = move _23;
        goto -> bb22;
    }

    bb22 (cleanup): {
        drop(_3) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24: {
        _24 = const false;
        goto -> bb13;
    }

    bb25: {
        switchInt(_24) -> [0: bb24, otherwise: bb26];
    }

    bb26: {
        drop(((_6 as Some).0: std::result::Result<globset::GlobSet, clap::Error>)) -> [return: bb24, unwind: bb22];
    }

    bb27: {
        _26 = discriminant(_6);
        switchInt(move _26) -> [1: bb25, otherwise: bb24];
    }

    bb28: {
        _25 = const false;
        _0 = move _3;
        return;
    }

    bb29: {
        switchInt(_25) -> [0: bb28, otherwise: bb30];
    }

    bb30: {
        drop(((_15 as Some).0: std::result::Result<globset::GlobSet, clap::Error>)) -> [return: bb28, unwind: bb22];
    }

    bb31: {
        _27 = discriminant(_15);
        switchInt(move _27) -> [1: bb29, otherwise: bb28];
    }
}

fn ignore_globs::<impl at src/flags/ignore_globs.rs:13:1: 13:17>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<Result<GlobSet, clap::Error>> {
    debug matches => _1;
    let mut _0: std::option::Option<std::result::Result<globset::GlobSet, clap::Error>>;
    let mut _2: bool;
    let mut _3: u64;
    let mut _4: std::option::Option<clap::Values<'_>>;
    let mut _5: isize;
    let mut _8: clap::Values<'_>;
    let mut _10: std::option::Option<&str>;
    let mut _11: &mut clap::Values<'_>;
    let mut _12: isize;
    let mut _14: std::result::Result<globset::Glob, clap::Error>;
    let mut _15: isize;
    let _17: &mut globset::GlobSetBuilder;
    let mut _18: &mut globset::GlobSetBuilder;
    let mut _20: std::result::Result<globset::GlobSet, clap::Error>;
    let mut _21: std::result::Result<globset::GlobSet, clap::Error>;
    let _22: &globset::GlobSetBuilder;
    scope 1 {
        debug values => _6;
        let _6: clap::Values<'_>;
        let mut _7: globset::GlobSetBuilder;
        scope 2 {
            debug glob_set_builder => _7;
            let mut _9: clap::Values<'_>;
            scope 3 {
                debug iter => _9;
                let _13: &str;
                scope 4 {
                    debug value => _13;
                    let _16: globset::Glob;
                    let _19: clap::Error;
                    scope 5 {
                        debug glob => _16;
                    }
                    scope 6 {
                        debug err => _19;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = ArgMatches::<'_>::occurrences_of::<&str>(_1, const "ignore-glob") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Gt(move _3, const 0_u64);
        switchInt(move _2) -> [0: bb17, otherwise: bb2];
    }

    bb2: {
        _4 = ArgMatches::<'_>::values_of::<&str>(_1, const "ignore-glob") -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = discriminant(_4);
        switchInt(move _5) -> [1: bb4, otherwise: bb16];
    }

    bb4: {
        _6 = move ((_4 as Some).0: clap::Values<'_>);
        _7 = GlobSetBuilder::new() -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = <clap::Values<'_> as IntoIterator>::into_iter(move _6) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _9 = move _8;
        goto -> bb7;
    }

    bb7: {
        _11 = &mut _9;
        _10 = <clap::Values<'_> as Iterator>::next(_11) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        _13 = ((_10 as Some).0: &str);
        _14 = IgnoreGlobs::create_glob(_13) -> [return: bb12, unwind: bb19];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _22 = &_7;
        _21 = IgnoreGlobs::create_glob_set(_22) -> [return: bb15, unwind: bb19];
    }

    bb12: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb14, 1: bb13, otherwise: bb10];
    }

    bb13: {
        _19 = move ((_14 as Err).0: clap::Error);
        _20 = Result::<GlobSet, clap::Error>::Err(move _19);
        _0 = std::option::Option::<Result<GlobSet, clap::Error>>::Some(move _20);
        drop(_7) -> [return: bb18, unwind continue];
    }

    bb14: {
        _16 = move ((_14 as Ok).0: globset::Glob);
        _18 = &mut _7;
        _17 = GlobSetBuilder::add(move _18, move _16) -> [return: bb21, unwind: bb19];
    }

    bb15: {
        _0 = std::option::Option::<Result<GlobSet, clap::Error>>::Some(move _21);
        drop(_7) -> [return: bb18, unwind continue];
    }

    bb16: {
        _0 = std::option::Option::<Result<GlobSet, clap::Error>>::None;
        goto -> bb18;
    }

    bb17: {
        _0 = std::option::Option::<Result<GlobSet, clap::Error>>::None;
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_7) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }

    bb21: {
        goto -> bb7;
    }
}

fn ignore_globs::<impl at src/flags/ignore_globs.rs:13:1: 13:17>::from_config(_1: &Config) -> std::option::Option<Result<GlobSet, clap::Error>> {
    debug config => _1;
    let mut _0: std::option::Option<std::result::Result<globset::GlobSet, clap::Error>>;
    let mut _2: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _3: isize;
    let mut _6: std::slice::Iter<'_, std::string::String>;
    let mut _7: std::slice::Iter<'_, std::string::String>;
    let _8: &[std::string::String];
    let mut _10: std::option::Option<&std::string::String>;
    let mut _11: &mut std::slice::Iter<'_, std::string::String>;
    let mut _12: isize;
    let mut _14: std::result::Result<globset::Glob, clap::Error>;
    let _15: &str;
    let mut _16: isize;
    let _18: &mut globset::GlobSetBuilder;
    let mut _19: &mut globset::GlobSetBuilder;
    let mut _21: std::result::Result<globset::GlobSet, clap::Error>;
    let mut _22: std::result::Result<globset::GlobSet, clap::Error>;
    let _23: &globset::GlobSetBuilder;
    scope 1 {
        debug globs => _4;
        let _4: &std::vec::Vec<std::string::String>;
        let mut _5: globset::GlobSetBuilder;
        scope 2 {
            debug glob_set_builder => _5;
            let mut _9: std::slice::Iter<'_, std::string::String>;
            scope 3 {
                debug iter => _9;
                let _13: &std::string::String;
                scope 4 {
                    debug glob => _13;
                    let _17: globset::Glob;
                    let _20: clap::Error;
                    scope 5 {
                        debug glob => _17;
                    }
                    scope 6 {
                        debug err => _20;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = &((*_1).7: std::option::Option<std::vec::Vec<std::string::String>>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb16];
    }

    bb1: {
        _4 = &(((*_2) as Some).0: std::vec::Vec<std::string::String>);
        _5 = GlobSetBuilder::new() -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = <Vec<std::string::String> as Deref>::deref(_4) -> [return: bb3, unwind: bb18];
    }

    bb3: {
        _7 = core::slice::<impl [std::string::String]>::iter(_8) -> [return: bb4, unwind: bb18];
    }

    bb4: {
        _6 = <std::slice::Iter<'_, std::string::String> as IntoIterator>::into_iter(move _7) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _9 = move _6;
        goto -> bb6;
    }

    bb6: {
        _11 = &mut _9;
        _10 = <std::slice::Iter<'_, std::string::String> as Iterator>::next(_11) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _13 = ((_10 as Some).0: &std::string::String);
        _15 = <std::string::String as Deref>::deref(_13) -> [return: bb11, unwind: bb18];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _23 = &_5;
        _22 = IgnoreGlobs::create_glob_set(_23) -> [return: bb15, unwind: bb18];
    }

    bb11: {
        _14 = IgnoreGlobs::create_glob(_15) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb14, 1: bb13, otherwise: bb9];
    }

    bb13: {
        _20 = move ((_14 as Err).0: clap::Error);
        _21 = Result::<GlobSet, clap::Error>::Err(move _20);
        _0 = std::option::Option::<Result<GlobSet, clap::Error>>::Some(move _21);
        drop(_5) -> [return: bb17, unwind continue];
    }

    bb14: {
        _17 = move ((_14 as Ok).0: globset::Glob);
        _19 = &mut _5;
        _18 = GlobSetBuilder::add(move _19, move _17) -> [return: bb20, unwind: bb18];
    }

    bb15: {
        _0 = std::option::Option::<Result<GlobSet, clap::Error>>::Some(move _22);
        drop(_5) -> [return: bb17, unwind continue];
    }

    bb16: {
        _0 = std::option::Option::<Result<GlobSet, clap::Error>>::None;
        goto -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_5) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20: {
        goto -> bb6;
    }
}

fn ignore_globs::<impl at src/flags/ignore_globs.rs:13:1: 13:17>::create_glob(_1: &str) -> Result<Glob, clap::Error> {
    debug pattern => _1;
    let mut _0: std::result::Result<globset::Glob, clap::Error>;
    let mut _2: std::result::Result<globset::Glob, globset::Error>;
    let mut _3: isize;
    let _4: globset::Glob;
    let _5: globset::Error;
    let mut _6: clap::Error;
    let _7: &str;
    let _8: &std::string::String;
    let _9: std::string::String;
    let mut _10: &globset::Error;
    let mut _11: clap::ErrorKind;
    scope 1 {
        debug glob => _4;
    }
    scope 2 {
        debug err => _5;
    }

    bb0: {
        _2 = Glob::new(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = move ((_2 as Err).0: globset::Error);
        _10 = &_5;
        _9 = <globset::Error as ToString>::to_string(move _10) -> [return: bb5, unwind: bb10];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _4 = move ((_2 as Ok).0: globset::Glob);
        _0 = Result::<Glob, clap::Error>::Ok(move _4);
        goto -> bb11;
    }

    bb5: {
        _8 = &_9;
        _7 = <std::string::String as Deref>::deref(_8) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _11 = ValueValidation;
        _6 = clap::Error::with_description(_7, move _11) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = Result::<Glob, clap::Error>::Err(move _6);
        drop(_9) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_5) -> [return: bb11, unwind continue];
    }

    bb9 (cleanup): {
        drop(_9) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        resume;
    }
}

fn ignore_globs::<impl at src/flags/ignore_globs.rs:13:1: 13:17>::create_glob_set(_1: &GlobSetBuilder) -> Result<GlobSet, clap::Error> {
    debug builder => _1;
    let mut _0: std::result::Result<globset::GlobSet, clap::Error>;
    let mut _2: std::result::Result<globset::GlobSet, globset::Error>;
    let mut _3: isize;
    let _4: globset::GlobSet;
    let _5: globset::Error;
    let mut _6: clap::Error;
    let _7: &str;
    let _8: &std::string::String;
    let _9: std::string::String;
    let mut _10: &globset::Error;
    let mut _11: clap::ErrorKind;
    scope 1 {
        debug glob_set => _4;
    }
    scope 2 {
        debug err => _5;
    }

    bb0: {
        _2 = GlobSetBuilder::build(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = move ((_2 as Err).0: globset::Error);
        _10 = &_5;
        _9 = <globset::Error as ToString>::to_string(move _10) -> [return: bb5, unwind: bb10];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _4 = move ((_2 as Ok).0: globset::GlobSet);
        _0 = Result::<GlobSet, clap::Error>::Ok(move _4);
        goto -> bb11;
    }

    bb5: {
        _8 = &_9;
        _7 = <std::string::String as Deref>::deref(_8) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _11 = ValueValidation;
        _6 = clap::Error::with_description(_7, move _11) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = Result::<GlobSet, clap::Error>::Err(move _6);
        drop(_9) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_5) -> [return: bb11, unwind continue];
    }

    bb9 (cleanup): {
        drop(_9) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        resume;
    }
}

fn ignore_globs::<impl at src/flags/ignore_globs.rs:123:1: 123:29>::default() -> IgnoreGlobs {
    let mut _0: flags::ignore_globs::IgnoreGlobs;
    let mut _1: globset::GlobSet;

    bb0: {
        _1 = GlobSet::empty() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = IgnoreGlobs(move _1);
        return;
    }
}

fn indicators::<impl at src/flags/indicators.rs:11:10: 11:15>::clone(_1: &Indicators) -> Indicators {
    debug self => _1;
    let mut _0: flags::indicators::Indicators;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn indicators::<impl at src/flags/indicators.rs:11:17: 11:22>::fmt(_1: &Indicators, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&bool;
    let _6: &bool;

    bb0: {
        _3 = const "Indicators";
        _6 = &((*_1).0: bool);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn indicators::<impl at src/flags/indicators.rs:11:30: 11:39>::eq(_1: &Indicators, _2: &Indicators) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;

    bb0: {
        _3 = ((*_1).0: bool);
        _4 = ((*_2).0: bool);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn indicators::<impl at src/flags/indicators.rs:11:41: 11:43>::assert_receiver_is_total_eq(_1: &Indicators) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn indicators::<impl at src/flags/indicators.rs:11:45: 11:52>::default() -> Indicators {
    let mut _0: flags::indicators::Indicators;
    let mut _1: bool;

    bb0: {
        _1 = <bool as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Indicators(move _1);
        return;
    }
}

fn indicators::<impl at src/flags/indicators.rs:14:1: 14:39>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<Indicators> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::indicators::Indicators>;
    let mut _2: bool;
    let mut _3: flags::indicators::Indicators;

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "indicators") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = Indicators(const true);
        _0 = std::option::Option::<Indicators>::Some(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = std::option::Option::<Indicators>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn indicators::<impl at src/flags/indicators.rs:14:1: 14:39>::from_config(_1: &Config) -> std::option::Option<Indicators> {
    debug config => _1;
    let mut _0: std::option::Option<flags::indicators::Indicators>;
    let mut _2: &std::option::Option<bool>;
    let mut _3: isize;
    let mut _5: flags::indicators::Indicators;
    let mut _6: bool;
    scope 1 {
        debug ind => _4;
        let _4: &bool;
    }

    bb0: {
        _2 = &((*_1).8: std::option::Option<bool>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = &(((*_2) as Some).0: bool);
        _6 = (*_4);
        _5 = Indicators(move _6);
        _0 = std::option::Option::<Indicators>::Some(move _5);
        goto -> bb3;
    }

    bb2: {
        _0 = std::option::Option::<Indicators>::None;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn layout::<impl at src/flags/layout.rs:12:10: 12:15>::clone(_1: &layout::Layout) -> layout::Layout {
    debug self => _1;
    let mut _0: flags::layout::Layout;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn layout::<impl at src/flags/layout.rs:12:17: 12:22>::fmt(_1: &layout::Layout, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "OneLine";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Grid";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "Tree";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn layout::<impl at src/flags/layout.rs:12:30: 12:39>::eq(_1: &layout::Layout, _2: &layout::Layout) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn layout::<impl at src/flags/layout.rs:12:41: 12:43>::assert_receiver_is_total_eq(_1: &layout::Layout) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

const layout::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn layout::_::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize(_1: __D) -> Result<layout::Layout, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::layout::Layout, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_enum::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Visitor<'_>>(move _1, const "Layout", const _, const layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<layout::Layout>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn layout::_::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize::<impl at src/flags/layout.rs:12:45: 12:56>::expecting(_1: &layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn layout::_::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize::<impl at src/flags/layout.rs:12:45: 12:56>::visit_u64(_1: layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__FieldVisitor, _2: u64) -> Result<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E> {
    debug self => const layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field, __E>;
    let mut _3: flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field;
    let mut _4: flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field;
    let mut _5: flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: config_file::_::_serde::de::Unexpected<'_>;
    let mut _8: &dyn config_file::_::_serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field::__field0;
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field::__field1;
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field::__field2;
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in layout::_::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize::<impl at src/flags/layout.rs:12:45: 12:56>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn layout::_::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize::<impl at src/flags/layout.rs:12:45: 12:56>::visit_str(_1: layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__FieldVisitor, _2: &str) -> Result<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E> {
    debug self => const layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field;
    let mut _7: flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field;
    let mut _8: flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field;
    let mut _9: __E;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "grid") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field::__field0;
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb11;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "tree") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field::__field1;
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb11;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "oneline") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field::__field2;
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb11;
    }

    bb6: {
        _9 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb10, unwind continue];
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Err(move _9);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn layout::_::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize::<impl at src/flags/layout.rs:12:45: 12:56>::visit_bytes(_1: layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E> {
    debug self => const layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field;
    let mut _10: flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field;
    let mut _11: flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field;
    let _12: &std::borrow::Cow<'_, str>;
    let _13: std::borrow::Cow<'_, str>;
    let mut _14: __E;
    let _15: &str;
    scope 1 {
        debug __value => _12;
    }

    bb0: {
        _6 = Len((*_2));
        _7 = const 4_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 4]) -> [103: bb2, 116: bb6, otherwise: bb5];
    }

    bb2: {
        switchInt((*_2)[1 of 4]) -> [114: bb3, otherwise: bb5];
    }

    bb3: {
        switchInt((*_2)[2 of 4]) -> [105: bb4, otherwise: bb5];
    }

    bb4: {
        switchInt((*_2)[3 of 4]) -> [100: bb17, otherwise: bb5];
    }

    bb5: {
        _13 = from_utf8_lossy(_2) -> [return: bb20, unwind continue];
    }

    bb6: {
        switchInt((*_2)[1 of 4]) -> [114: bb7, otherwise: bb5];
    }

    bb7: {
        switchInt((*_2)[2 of 4]) -> [101: bb8, otherwise: bb5];
    }

    bb8: {
        switchInt((*_2)[3 of 4]) -> [101: bb18, otherwise: bb5];
    }

    bb9: {
        _3 = Len((*_2));
        _4 = const 7_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb5, otherwise: bb10];
    }

    bb10: {
        switchInt((*_2)[0 of 7]) -> [111: bb11, otherwise: bb5];
    }

    bb11: {
        switchInt((*_2)[1 of 7]) -> [110: bb12, otherwise: bb5];
    }

    bb12: {
        switchInt((*_2)[2 of 7]) -> [101: bb13, otherwise: bb5];
    }

    bb13: {
        switchInt((*_2)[3 of 7]) -> [108: bb14, otherwise: bb5];
    }

    bb14: {
        switchInt((*_2)[4 of 7]) -> [105: bb15, otherwise: bb5];
    }

    bb15: {
        switchInt((*_2)[5 of 7]) -> [110: bb16, otherwise: bb5];
    }

    bb16: {
        switchInt((*_2)[6 of 7]) -> [101: bb19, otherwise: bb5];
    }

    bb17: {
        _9 = layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field::__field0;
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb23;
    }

    bb18: {
        _10 = layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field::__field1;
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb23;
    }

    bb19: {
        _11 = layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field::__field2;
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb23;
    }

    bb20: {
        _12 = &_13;
        _15 = <Cow<'_, str> as Deref>::deref(_12) -> [return: bb21, unwind: bb24];
    }

    bb21: {
        _14 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_15, const _) -> [return: bb22, unwind: bb24];
    }

    bb22: {
        _0 = Result::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, __E>::Err(move _14);
        drop(_13) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_13) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }
}

fn layout::_::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize(_1: __D) -> Result<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__FieldVisitor>(move _1, const layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn layout::_::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize::<impl at src/flags/layout.rs:12:45: 12:56>::expecting(_1: &layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum Layout";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn layout::_::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize::<impl at src/flags/layout.rs:12:45: 12:56>::visit_enum(_1: layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Visitor<'_>, _2: __A) -> Result<layout::Layout, <__A as EnumAccess<'_>>::Error> {
    debug self => const layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<layout::Layout>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<flags::layout::Layout, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
    let mut _7: isize;
    let _8: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _9: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _10: isize;
    let mut _12: flags::layout::Layout;
    let _13: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _14: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _15: isize;
    let mut _17: flags::layout::Layout;
    let _18: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _19: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _20: isize;
    let mut _22: flags::layout::Layout;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _8;
        let _11: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _11;
        }
    }
    scope 6 {
        debug __variant => _13;
        let _16: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 7 {
            debug __val => const ();
        }
        scope 8 {
            debug __err => _16;
        }
    }
    scope 9 {
        debug __variant => _18;
        let _21: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _21;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<layout::_::<impl Deserialize<'de> for layout::Layout>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<layout::Layout, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb17;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant));
        _7 = discriminant((_5.0: flags::layout::_::<impl config_file::_::_serde::Deserialize<'de> for flags::layout::Layout>::deserialize::__Field));
        switchInt(move _7) -> [0: bb6, 1: bb10, 2: bb5, otherwise: bb3];
    }

    bb5: {
        _18 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> [return: bb14, unwind continue];
    }

    bb6: {
        _8 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _11 = move ((_9 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<layout::Layout, <__A as EnumAccess<'_>>::Error>::Err(move _11);
        goto -> bb17;
    }

    bb9: {
        _12 = layout::Layout::Grid;
        _0 = Result::<layout::Layout, <__A as EnumAccess<'_>>::Error>::Ok(move _12);
        goto -> bb17;
    }

    bb10: {
        _13 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _16 = move ((_14 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<layout::Layout, <__A as EnumAccess<'_>>::Error>::Err(move _16);
        goto -> bb17;
    }

    bb13: {
        _17 = layout::Layout::Tree;
        _0 = Result::<layout::Layout, <__A as EnumAccess<'_>>::Error>::Ok(move _17);
        goto -> bb17;
    }

    bb14: {
        _20 = discriminant(_19);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _21 = move ((_19 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<layout::Layout, <__A as EnumAccess<'_>>::Error>::Err(move _21);
        goto -> bb17;
    }

    bb16: {
        _22 = layout::Layout::OneLine;
        _0 = Result::<layout::Layout, <__A as EnumAccess<'_>>::Error>::Ok(move _22);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

const layout::_::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize::VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in layout::_::<impl at src/flags/layout.rs:12:45: 12:56>::deserialize::VARIANTS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "grid", const "tree", const "oneline"];
        _0 = &_1;
        return;
    }
}

fn layout::<impl at src/flags/layout.rs:21:1: 21:37>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<layout::Layout> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::layout::Layout>;
    let mut _2: bool;
    let mut _3: flags::layout::Layout;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: std::option::Option<clap::Values<'_>>;
    let mut _9: isize;
    let _10: clap::Values<'_>;
    let _11: &clap::Values<'_>;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: flags::layout::Layout;
    scope 1 {
        debug values => _10;
        debug values => _11;
    }

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "tree") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = layout::Layout::Tree;
        _0 = std::option::Option::<layout::Layout>::Some(move _3);
        goto -> bb18;
    }

    bb3: {
        _4 = ArgMatches::<'_>::is_present::<&str>(_1, const "long") -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _4) -> [0: bb5, otherwise: bb16];
    }

    bb5: {
        _5 = ArgMatches::<'_>::is_present::<&str>(_1, const "oneline") -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _5) -> [0: bb7, otherwise: bb16];
    }

    bb7: {
        _6 = ArgMatches::<'_>::is_present::<&str>(_1, const "inode") -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _6) -> [0: bb9, otherwise: bb16];
    }

    bb9: {
        _8 = ArgMatches::<'_>::values_of::<&str>(_1, const "blocks") -> [return: bb10, unwind continue];
    }

    bb10: {
        _9 = discriminant(_8);
        switchInt(move _9) -> [1: bb12, otherwise: bb11];
    }

    bb11: {
        _7 = const false;
        goto -> bb15;
    }

    bb12: {
        _11 = &((_8 as Some).0: clap::Values<'_>);
        _13 = <clap::Values<'_> as ExactSizeIterator>::len(_11) -> [return: bb13, unwind continue];
    }

    bb13: {
        _12 = Gt(move _13, const 1_usize);
        switchInt(move _12) -> [0: bb11, otherwise: bb14];
    }

    bb14: {
        _10 = move ((_8 as Some).0: clap::Values<'_>);
        _7 = const true;
        goto -> bb15;
    }

    bb15: {
        switchInt(move _7) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _14 = layout::Layout::OneLine;
        _0 = std::option::Option::<layout::Layout>::Some(move _14);
        goto -> bb18;
    }

    bb17: {
        _0 = std::option::Option::<layout::Layout>::None;
        goto -> bb18;
    }

    bb18: {
        return;
    }
}

fn layout::<impl at src/flags/layout.rs:21:1: 21:37>::from_config(_1: &Config) -> std::option::Option<layout::Layout> {
    debug config => _1;
    let mut _0: std::option::Option<flags::layout::Layout>;

    bb0: {
        _0 = ((*_1).9: std::option::Option<flags::layout::Layout>);
        return;
    }
}

fn layout::<impl at src/flags/layout.rs:54:1: 54:24>::default() -> layout::Layout {
    let mut _0: flags::layout::Layout;

    bb0: {
        _0 = layout::Layout::Grid;
        return;
    }
}

fn recursion::<impl at src/flags/recursion.rs:9:10: 9:15>::clone(_1: &recursion::Recursion) -> recursion::Recursion {
    debug self => _1;
    let mut _0: flags::recursion::Recursion;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn recursion::<impl at src/flags/recursion.rs:9:17: 9:22>::fmt(_1: &recursion::Recursion, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &bool;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&usize;
    let _10: &usize;

    bb0: {
        _3 = const "Recursion";
        _4 = const "enabled";
        _6 = &((*_1).0: bool);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "depth";
        _10 = &((*_1).1: usize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn recursion::<impl at src/flags/recursion.rs:9:30: 9:39>::eq(_1: &recursion::Recursion, _2: &recursion::Recursion) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;

    bb0: {
        _4 = ((*_1).0: bool);
        _5 = ((*_2).0: bool);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = ((*_1).1: usize);
        _7 = ((*_2).1: usize);
        _0 = Eq(move _6, move _7);
        goto -> bb3;
    }

    bb2: {
        _0 = const false;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn recursion::<impl at src/flags/recursion.rs:9:41: 9:43>::assert_receiver_is_total_eq(_1: &recursion::Recursion) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn recursion::<impl at src/flags/recursion.rs:17:1: 17:15>::configure_from(_1: &ArgMatches<'_>, _2: &Config) -> Result<recursion::Recursion, clap::Error> {
    debug matches => _1;
    debug config => _2;
    let mut _0: std::result::Result<flags::recursion::Recursion, clap::Error>;
    let _3: bool;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, clap::Error>, usize>;
    let mut _5: std::result::Result<usize, clap::Error>;
    let mut _6: isize;
    let mut _9: flags::recursion::Recursion;
    scope 1 {
        debug enabled => _3;
        let _7: std::result::Result<std::convert::Infallible, clap::Error>;
        let _8: usize;
        scope 2 {
            debug depth => _8;
        }
        scope 3 {
            debug residual => _7;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _8;
            scope 6 {
            }
        }
    }

    bb0: {
        _3 = recursion::Recursion::enabled_from(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = recursion::Recursion::depth_from(_1, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = <Result<usize, clap::Error> as Try>::branch(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _8 = ((_4 as Continue).0: usize);
        _9 = recursion::Recursion { enabled: _3, depth: _8 };
        _0 = Result::<recursion::Recursion, clap::Error>::Ok(move _9);
        goto -> bb7;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, clap::Error>);
        _0 = <Result<recursion::Recursion, clap::Error> as FromResidual<Result<Infallible, clap::Error>>>::from_residual(move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn recursion::<impl at src/flags/recursion.rs:17:1: 17:15>::enabled_from(_1: &ArgMatches<'_>, _2: &Config) -> bool {
    debug matches => _1;
    debug config => _2;
    let mut _0: bool;
    let mut _3: std::option::Option<bool>;
    let mut _4: isize;
    let mut _6: &std::option::Option<config_file::Recursion>;
    let mut _7: isize;
    let mut _9: isize;
    scope 1 {
        debug value => _5;
        let _5: bool;
    }
    scope 2 {
        debug recursion => _8;
        let _8: &config_file::Recursion;
        scope 3 {
            debug enabled => _10;
            let _10: bool;
        }
    }

    bb0: {
        _3 = recursion::Recursion::enabled_from_arg_matches(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = ((_3 as Some).0: bool);
        _0 = _5;
        goto -> bb7;
    }

    bb3: {
        _6 = &((*_2).10: std::option::Option<config_file::Recursion>);
        _7 = discriminant((*_6));
        switchInt(move _7) -> [1: bb4, otherwise: bb6];
    }

    bb4: {
        _8 = &(((*_6) as Some).0: config_file::Recursion);
        _9 = discriminant(((*_8).0: std::option::Option<bool>));
        switchInt(move _9) -> [1: bb5, otherwise: bb6];
    }

    bb5: {
        _10 = ((((*_8).0: std::option::Option<bool>) as Some).0: bool);
        _0 = _10;
        goto -> bb7;
    }

    bb6: {
        _0 = <bool as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn recursion::<impl at src/flags/recursion.rs:17:1: 17:15>::enabled_from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<bool> {
    debug matches => _1;
    let mut _0: std::option::Option<bool>;
    let mut _2: bool;

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "recursive") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = std::option::Option::<bool>::Some(const true);
        goto -> bb4;
    }

    bb3: {
        _0 = std::option::Option::<bool>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn recursion::<impl at src/flags/recursion.rs:17:1: 17:15>::depth_from(_1: &ArgMatches<'_>, _2: &Config) -> Result<usize, clap::Error> {
    debug matches => _1;
    debug config => _2;
    let mut _0: std::result::Result<usize, clap::Error>;
    let mut _3: std::option::Option<std::result::Result<usize, clap::Error>>;
    let mut _4: isize;
    let mut _6: &std::option::Option<config_file::Recursion>;
    let mut _7: isize;
    let mut _9: isize;
    let mut _11: usize;
    scope 1 {
        debug value => _5;
        let _5: std::result::Result<usize, clap::Error>;
    }
    scope 2 {
        debug recursion => _8;
        let _8: &config_file::Recursion;
        scope 3 {
            debug depth => _10;
            let _10: usize;
        }
    }

    bb0: {
        _3 = recursion::Recursion::depth_from_arg_matches(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = move ((_3 as Some).0: std::result::Result<usize, clap::Error>);
        _0 = move _5;
        goto -> bb9;
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = &((*_2).10: std::option::Option<config_file::Recursion>);
        _7 = discriminant((*_6));
        switchInt(move _7) -> [1: bb5, otherwise: bb7];
    }

    bb5: {
        _8 = &(((*_6) as Some).0: config_file::Recursion);
        _9 = discriminant(((*_8).1: std::option::Option<usize>));
        switchInt(move _9) -> [1: bb6, otherwise: bb7];
    }

    bb6: {
        _10 = ((((*_8).1: std::option::Option<usize>) as Some).0: usize);
        _0 = Result::<usize, clap::Error>::Ok(_10);
        goto -> bb9;
    }

    bb7: {
        _11 = core::num::<impl usize>::max_value() -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = Result::<usize, clap::Error>::Ok(move _11);
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn recursion::<impl at src/flags/recursion.rs:17:1: 17:15>::depth_from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<Result<usize, clap::Error>> {
    debug matches => _1;
    let mut _0: std::option::Option<std::result::Result<usize, clap::Error>>;
    let _2: std::option::Option<&str>;
    let mut _3: std::option::Option<clap::Values<'_>>;
    let mut _4: isize;
    let _5: clap::Values<'_>;
    let mut _6: isize;
    let mut _8: std::result::Result<usize, std::num::ParseIntError>;
    let mut _9: isize;
    let mut _11: std::result::Result<usize, clap::Error>;
    let mut _12: std::result::Result<usize, clap::Error>;
    let mut _13: clap::Error;
    let _14: &str;
    let mut _15: clap::ErrorKind;
    scope 1 {
        debug depth => _2;
        scope 3 {
            debug str => _7;
            let _7: &str;
            let _10: usize;
            scope 4 {
                debug value => _10;
            }
        }
    }
    scope 2 {
        debug d => _5;
    }

    bb0: {
        _3 = ArgMatches::<'_>::values_of::<&str>(_1, const "depth") -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _2 = std::option::Option::<&str>::None;
        goto -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Some).0: clap::Values<'_>);
        _2 = <clap::Values<'_> as Iterator>::last(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = discriminant(_2);
        switchInt(move _6) -> [1: bb6, otherwise: bb11];
    }

    bb6: {
        _7 = ((_2 as Some).0: &str);
        _8 = core::str::<impl str>::parse::<usize>(_7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _9 = discriminant(_8);
        switchInt(move _9) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _14 = const "The argument '--depth' requires a valid positive number.";
        _15 = ValueValidation;
        _13 = clap::Error::with_description(_14, move _15) -> [return: bb10, unwind continue];
    }

    bb9: {
        _10 = ((_8 as Ok).0: usize);
        _11 = Result::<usize, clap::Error>::Ok(_10);
        _0 = std::option::Option::<Result<usize, clap::Error>>::Some(move _11);
        goto -> bb12;
    }

    bb10: {
        _12 = Result::<usize, clap::Error>::Err(move _13);
        _0 = std::option::Option::<Result<usize, clap::Error>>::Some(move _12);
        goto -> bb12;
    }

    bb11: {
        _0 = std::option::Option::<Result<usize, clap::Error>>::None;
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

fn recursion::<impl at src/flags/recursion.rs:121:1: 121:27>::default() -> recursion::Recursion {
    let mut _0: flags::recursion::Recursion;
    let mut _1: usize;

    bb0: {
        _1 = core::num::<impl usize>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = recursion::Recursion { enabled: const false, depth: move _1 };
        return;
    }
}

fn flags::size::<impl at src/flags/size.rs:12:10: 12:15>::clone(_1: &SizeFlag) -> SizeFlag {
    debug self => _1;
    let mut _0: flags::size::SizeFlag;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn flags::size::<impl at src/flags/size.rs:12:17: 12:22>::fmt(_1: &SizeFlag, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "Bytes";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Default";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "Short";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn flags::size::<impl at src/flags/size.rs:12:30: 12:39>::eq(_1: &SizeFlag, _2: &SizeFlag) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn flags::size::<impl at src/flags/size.rs:12:41: 12:43>::assert_receiver_is_total_eq(_1: &SizeFlag) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

const flags::size::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn flags::size::_::<impl at src/flags/size.rs:12:45: 12:56>::deserialize(_1: __D) -> Result<SizeFlag, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::size::SizeFlag, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_enum::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Visitor<'_>>(move _1, const "SizeFlag", const _, const flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<SizeFlag>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::size::_::<impl at src/flags/size.rs:12:45: 12:56>::deserialize::<impl at src/flags/size.rs:12:45: 12:56>::expecting(_1: &flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::size::_::<impl at src/flags/size.rs:12:45: 12:56>::deserialize::<impl at src/flags/size.rs:12:45: 12:56>::visit_u64(_1: flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__FieldVisitor, _2: u64) -> Result<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E> {
    debug self => const flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field, __E>;
    let mut _3: flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field;
    let mut _4: flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field;
    let mut _5: flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: config_file::_::_serde::de::Unexpected<'_>;
    let mut _8: &dyn config_file::_::_serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field::__field0;
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field::__field1;
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field::__field2;
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in flags::size::_::<impl at src/flags/size.rs:12:45: 12:56>::deserialize::<impl at src/flags/size.rs:12:45: 12:56>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn flags::size::_::<impl at src/flags/size.rs:12:45: 12:56>::deserialize::<impl at src/flags/size.rs:12:45: 12:56>::visit_str(_1: flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__FieldVisitor, _2: &str) -> Result<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E> {
    debug self => const flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field;
    let mut _7: flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field;
    let mut _8: flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field;
    let mut _9: __E;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "default") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field::__field0;
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb11;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "short") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field::__field1;
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb11;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "bytes") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field::__field2;
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb11;
    }

    bb6: {
        _9 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb10, unwind continue];
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Err(move _9);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn flags::size::_::<impl at src/flags/size.rs:12:45: 12:56>::deserialize::<impl at src/flags/size.rs:12:45: 12:56>::visit_bytes(_1: flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E> {
    debug self => const flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field;
    let mut _10: flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field;
    let mut _11: flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field;
    let _12: &std::borrow::Cow<'_, str>;
    let _13: std::borrow::Cow<'_, str>;
    let mut _14: __E;
    let _15: &str;
    scope 1 {
        debug __value => _12;
    }

    bb0: {
        _6 = Len((*_2));
        _7 = const 7_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [100: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [101: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [102: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [97: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [117: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [108: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [116: bb19, otherwise: bb8];
    }

    bb8: {
        _13 = from_utf8_lossy(_2) -> [return: bb22, unwind continue];
    }

    bb9: {
        _3 = Len((*_2));
        _4 = const 5_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb10];
    }

    bb10: {
        switchInt((*_2)[0 of 5]) -> [115: bb11, 98: bb15, otherwise: bb8];
    }

    bb11: {
        switchInt((*_2)[1 of 5]) -> [104: bb12, otherwise: bb8];
    }

    bb12: {
        switchInt((*_2)[2 of 5]) -> [111: bb13, otherwise: bb8];
    }

    bb13: {
        switchInt((*_2)[3 of 5]) -> [114: bb14, otherwise: bb8];
    }

    bb14: {
        switchInt((*_2)[4 of 5]) -> [116: bb20, otherwise: bb8];
    }

    bb15: {
        switchInt((*_2)[1 of 5]) -> [121: bb16, otherwise: bb8];
    }

    bb16: {
        switchInt((*_2)[2 of 5]) -> [116: bb17, otherwise: bb8];
    }

    bb17: {
        switchInt((*_2)[3 of 5]) -> [101: bb18, otherwise: bb8];
    }

    bb18: {
        switchInt((*_2)[4 of 5]) -> [115: bb21, otherwise: bb8];
    }

    bb19: {
        _9 = flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field::__field0;
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb25;
    }

    bb20: {
        _10 = flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field::__field1;
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb25;
    }

    bb21: {
        _11 = flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field::__field2;
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb25;
    }

    bb22: {
        _12 = &_13;
        _15 = <Cow<'_, str> as Deref>::deref(_12) -> [return: bb23, unwind: bb26];
    }

    bb23: {
        _14 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_15, const _) -> [return: bb24, unwind: bb26];
    }

    bb24: {
        _0 = Result::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, __E>::Err(move _14);
        drop(_13) -> [return: bb25, unwind continue];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_13) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }
}

fn flags::size::_::<impl at src/flags/size.rs:12:45: 12:56>::deserialize::<impl at src/flags/size.rs:12:45: 12:56>::deserialize(_1: __D) -> Result<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__FieldVisitor>(move _1, const flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::size::_::<impl at src/flags/size.rs:12:45: 12:56>::deserialize::<impl at src/flags/size.rs:12:45: 12:56>::expecting(_1: &flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum SizeFlag";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flags::size::_::<impl at src/flags/size.rs:12:45: 12:56>::deserialize::<impl at src/flags/size.rs:12:45: 12:56>::visit_enum(_1: flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Visitor<'_>, _2: __A) -> Result<SizeFlag, <__A as EnumAccess<'_>>::Error> {
    debug self => const flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<SizeFlag>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<flags::size::SizeFlag, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
    let mut _7: isize;
    let _8: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _9: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _10: isize;
    let mut _12: flags::size::SizeFlag;
    let _13: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _14: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _15: isize;
    let mut _17: flags::size::SizeFlag;
    let _18: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _19: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _20: isize;
    let mut _22: flags::size::SizeFlag;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _8;
        let _11: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _11;
        }
    }
    scope 6 {
        debug __variant => _13;
        let _16: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 7 {
            debug __val => const ();
        }
        scope 8 {
            debug __err => _16;
        }
    }
    scope 9 {
        debug __variant => _18;
        let _21: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _21;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<flags::size::_::<impl Deserialize<'de> for SizeFlag>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<SizeFlag, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb17;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant));
        _7 = discriminant((_5.0: flags::size::_::<impl config_file::_::_serde::Deserialize<'de> for flags::size::SizeFlag>::deserialize::__Field));
        switchInt(move _7) -> [0: bb6, 1: bb10, 2: bb5, otherwise: bb3];
    }

    bb5: {
        _18 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> [return: bb14, unwind continue];
    }

    bb6: {
        _8 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _11 = move ((_9 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<SizeFlag, <__A as EnumAccess<'_>>::Error>::Err(move _11);
        goto -> bb17;
    }

    bb9: {
        _12 = SizeFlag::Default;
        _0 = Result::<SizeFlag, <__A as EnumAccess<'_>>::Error>::Ok(move _12);
        goto -> bb17;
    }

    bb10: {
        _13 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _16 = move ((_14 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<SizeFlag, <__A as EnumAccess<'_>>::Error>::Err(move _16);
        goto -> bb17;
    }

    bb13: {
        _17 = SizeFlag::Short;
        _0 = Result::<SizeFlag, <__A as EnumAccess<'_>>::Error>::Ok(move _17);
        goto -> bb17;
    }

    bb14: {
        _20 = discriminant(_19);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _21 = move ((_19 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<SizeFlag, <__A as EnumAccess<'_>>::Error>::Err(move _21);
        goto -> bb17;
    }

    bb16: {
        _22 = SizeFlag::Bytes;
        _0 = Result::<SizeFlag, <__A as EnumAccess<'_>>::Error>::Ok(move _22);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

const flags::size::_::<impl at src/flags/size.rs:12:45: 12:56>::deserialize::VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in flags::size::_::<impl at src/flags/size.rs:12:45: 12:56>::deserialize::VARIANTS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "default", const "short", const "bytes"];
        _0 = &_1;
        return;
    }
}

fn flags::size::<impl at src/flags/size.rs:23:1: 23:14>::from_str(_1: &str) -> std::option::Option<SizeFlag> {
    debug value => _1;
    let mut _0: std::option::Option<flags::size::SizeFlag>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: flags::size::SizeFlag;
    let mut _6: flags::size::SizeFlag;
    let mut _7: flags::size::SizeFlag;
    let _8: !;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &&str;
    let mut _16: &[&str; 2];

    bb0: {
        _4 = <str as PartialEq>::eq(_1, const "default") -> [return: bb9, unwind continue];
    }

    bb1: {
        _5 = SizeFlag::Default;
        _0 = std::option::Option::<SizeFlag>::Some(move _5);
        goto -> bb12;
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "short") -> [return: bb8, unwind continue];
    }

    bb3: {
        _6 = SizeFlag::Short;
        _0 = std::option::Option::<SizeFlag>::Some(move _6);
        goto -> bb12;
    }

    bb4: {
        _2 = <str as PartialEq>::eq(_1, const "bytes") -> [return: bb7, unwind continue];
    }

    bb5: {
        _7 = SizeFlag::Bytes;
        _0 = std::option::Option::<SizeFlag>::Some(move _7);
        goto -> bb12;
    }

    bb6: {
        _16 = const _;
        _10 = _16 as &[&str] (PointerCoercion(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_15) -> [return: bb10, unwind continue];
    }

    bb7: {
        switchInt(move _2) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb11, unwind continue];
    }

    bb11: {
        _8 = panic_fmt(move _9) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in flags::size::<impl at src/flags/size.rs:23:1: 23:14>::from_str: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Size can only be one of default, short or bytes, but got ", const "."];
        _0 = &_1;
        return;
    }
}

fn flags::size::<impl at src/flags/size.rs:39:1: 39:37>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<SizeFlag> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::size::SizeFlag>;
    let mut _2: bool;
    let mut _3: u64;
    let mut _4: std::option::Option<&str>;
    let mut _5: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, clap::Values<'_>>;
    let mut _6: std::option::Option<clap::Values<'_>>;
    let mut _7: isize;
    let mut _9: isize;
    scope 1 {
        debug size => _10;
        let _8: clap::Values<'_>;
        let _10: &str;
        scope 2 {
            debug residual => const std::option::Option::<Infallible>::None;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _8;
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = ArgMatches::<'_>::occurrences_of::<&str>(_1, const "size") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Gt(move _3, const 0_u64);
        switchInt(move _2) -> [0: bb10, otherwise: bb2];
    }

    bb2: {
        _6 = ArgMatches::<'_>::values_of::<&str>(_1, const "size") -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = <std::option::Option<clap::Values<'_>> as Try>::branch(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _8 = move ((_5 as Continue).0: clap::Values<'_>);
        _4 = <clap::Values<'_> as Iterator>::last(move _8) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _0 = <std::option::Option<SizeFlag> as FromResidual<std::option::Option<Infallible>>>::from_residual(const std::option::Option::<Infallible>::None) -> [return: bb11, unwind continue];
    }

    bb8: {
        _9 = discriminant(_4);
        switchInt(move _9) -> [1: bb9, otherwise: bb10];
    }

    bb9: {
        _10 = ((_4 as Some).0: &str);
        _0 = SizeFlag::from_str(_10) -> [return: bb11, unwind continue];
    }

    bb10: {
        _0 = std::option::Option::<SizeFlag>::None;
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn flags::size::<impl at src/flags/size.rs:39:1: 39:37>::from_config(_1: &Config) -> std::option::Option<SizeFlag> {
    debug config => _1;
    let mut _0: std::option::Option<flags::size::SizeFlag>;

    bb0: {
        _0 = ((*_1).11: std::option::Option<flags::size::SizeFlag>);
        return;
    }
}

fn flags::size::<impl at src/flags/size.rs:65:1: 65:26>::default() -> SizeFlag {
    let mut _0: flags::size::SizeFlag;

    bb0: {
        _0 = SizeFlag::Default;
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:12:10: 12:15>::clone(_1: &sorting::Sorting) -> sorting::Sorting {
    debug self => _1;
    let mut _0: flags::sorting::Sorting;
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:12:17: 12:22>::fmt(_1: &sorting::Sorting, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &flags::sorting::SortColumn;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &flags::sorting::SortOrder;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&flags::sorting::DirGrouping;
    let _13: &flags::sorting::DirGrouping;

    bb0: {
        _3 = const "Sorting";
        _4 = const "column";
        _6 = &((*_1).0: flags::sorting::SortColumn);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "order";
        _9 = &((*_1).1: flags::sorting::SortOrder);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "dir_grouping";
        _13 = &((*_1).2: flags::sorting::DirGrouping);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:12:30: 12:39>::eq(_1: &sorting::Sorting, _2: &sorting::Sorting) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &flags::sorting::SortColumn;
    let mut _5: &flags::sorting::SortColumn;
    let mut _6: bool;
    let mut _7: &flags::sorting::SortOrder;
    let mut _8: &flags::sorting::SortOrder;
    let mut _9: &flags::sorting::DirGrouping;
    let mut _10: &flags::sorting::DirGrouping;

    bb0: {
        _4 = &((*_1).0: flags::sorting::SortColumn);
        _5 = &((*_2).0: flags::sorting::SortColumn);
        _3 = <SortColumn as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        _7 = &((*_1).1: flags::sorting::SortOrder);
        _8 = &((*_2).1: flags::sorting::SortOrder);
        _6 = <SortOrder as PartialEq>::eq(move _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _9 = &((*_1).2: flags::sorting::DirGrouping);
        _10 = &((*_2).2: flags::sorting::DirGrouping);
        _0 = <DirGrouping as PartialEq>::eq(move _9, move _10) -> [return: bb6, unwind continue];
    }

    bb5: {
        _0 = const false;
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:12:41: 12:43>::assert_receiver_is_total_eq(_1: &sorting::Sorting) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:12:45: 12:52>::default() -> sorting::Sorting {
    let mut _0: flags::sorting::Sorting;
    let mut _1: flags::sorting::SortColumn;
    let mut _2: flags::sorting::SortOrder;
    let mut _3: flags::sorting::DirGrouping;

    bb0: {
        _1 = <SortColumn as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <SortOrder as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <DirGrouping as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = sorting::Sorting { column: move _1, order: move _2, dir_grouping: move _3 };
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:19:1: 19:13>::configure_from(_1: &ArgMatches<'_>, _2: &Config) -> sorting::Sorting {
    debug matches => _1;
    debug config => _2;
    let mut _0: flags::sorting::Sorting;
    let _3: flags::sorting::SortColumn;
    scope 1 {
        debug column => _3;
        let _4: flags::sorting::SortOrder;
        scope 2 {
            debug order => _4;
            let _5: flags::sorting::DirGrouping;
            scope 3 {
                debug dir_grouping => _5;
            }
        }
    }

    bb0: {
        _3 = <SortColumn as Configurable<SortColumn>>::configure_from(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <SortOrder as Configurable<SortOrder>>::configure_from(_1, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = <DirGrouping as Configurable<DirGrouping>>::configure_from(_1, _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = sorting::Sorting { column: _3, order: _4, dir_grouping: _5 };
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:37:10: 37:15>::clone(_1: &SortColumn) -> SortColumn {
    debug self => _1;
    let mut _0: flags::sorting::SortColumn;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:37:17: 37:22>::fmt(_1: &SortColumn, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb1, otherwise: bb2];
    }

    bb1: {
        _9 = const "Version";
        _3 = _9;
        goto -> bb7;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Extension";
        _3 = _5;
        goto -> bb7;
    }

    bb4: {
        _6 = const "Name";
        _3 = _6;
        goto -> bb7;
    }

    bb5: {
        _7 = const "Time";
        _3 = _7;
        goto -> bb7;
    }

    bb6: {
        _8 = const "Size";
        _3 = _8;
        goto -> bb7;
    }

    bb7: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:37:30: 37:39>::eq(_1: &SortColumn, _2: &SortColumn) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:37:41: 37:43>::assert_receiver_is_total_eq(_1: &SortColumn) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

const sorting::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize(_1: __D) -> Result<SortColumn, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::sorting::SortColumn, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_enum::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Visitor<'_>>(move _1, const "SortColumn", const _, const sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<SortColumn>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize::<impl at src/flags/sorting.rs:37:45: 37:56>::expecting(_1: &sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize::<impl at src/flags/sorting.rs:37:45: 37:56>::visit_u64(_1: sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__FieldVisitor, _2: u64) -> Result<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E> {
    debug self => const sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field, __E>;
    let mut _3: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _4: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _5: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _6: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _7: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _8: __E;
    let mut _9: config_file::_::_serde::de::Unexpected<'_>;
    let mut _10: &dyn config_file::_::_serde::de::Expected;
    let mut _11: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, otherwise: bb1];
    }

    bb1: {
        _9 = Unexpected::<'_>::Unsigned(_2);
        _11 = const _;
        _10 = _11 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _8 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _9, move _10) -> [return: bb7, unwind continue];
    }

    bb2: {
        _3 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field0;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _4 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field1;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb8;
    }

    bb4: {
        _5 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field2;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb8;
    }

    bb5: {
        _6 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field3;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb8;
    }

    bb6: {
        _7 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field4;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb8;
    }

    bb7: {
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Err(move _8);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

promoted[0] in sorting::_::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize::<impl at src/flags/sorting.rs:37:45: 37:56>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 5";
        _0 = &_1;
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize::<impl at src/flags/sorting.rs:37:45: 37:56>::visit_str(_1: sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__FieldVisitor, _2: &str) -> Result<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E> {
    debug self => const sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _9: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _10: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _11: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _12: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _13: __E;

    bb0: {
        _7 = <str as PartialEq>::eq(_2, const "extension") -> [return: bb15, unwind continue];
    }

    bb1: {
        _8 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field0;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb17;
    }

    bb2: {
        _6 = <str as PartialEq>::eq(_2, const "name") -> [return: bb14, unwind continue];
    }

    bb3: {
        _9 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field1;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb17;
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "time") -> [return: bb13, unwind continue];
    }

    bb5: {
        _10 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field2;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb17;
    }

    bb6: {
        _4 = <str as PartialEq>::eq(_2, const "size") -> [return: bb12, unwind continue];
    }

    bb7: {
        _11 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field3;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb17;
    }

    bb8: {
        _3 = <str as PartialEq>::eq(_2, const "version") -> [return: bb11, unwind continue];
    }

    bb9: {
        _12 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field4;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb17;
    }

    bb10: {
        _13 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb16, unwind continue];
    }

    bb11: {
        switchInt(move _3) -> [0: bb10, otherwise: bb9];
    }

    bb12: {
        switchInt(move _4) -> [0: bb8, otherwise: bb7];
    }

    bb13: {
        switchInt(move _5) -> [0: bb6, otherwise: bb5];
    }

    bb14: {
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb15: {
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb16: {
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Err(move _13);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize::<impl at src/flags/sorting.rs:37:45: 37:56>::visit_bytes(_1: sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E> {
    debug self => const sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _13: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _14: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _15: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let mut _16: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field;
    let _17: &std::borrow::Cow<'_, str>;
    let _18: std::borrow::Cow<'_, str>;
    let mut _19: __E;
    let _20: &str;
    scope 1 {
        debug __value => _17;
    }

    bb0: {
        _9 = Len((*_2));
        _10 = const 9_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [101: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [120: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [116: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [101: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [110: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [115: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [105: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [111: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [110: bb30, otherwise: bb10];
    }

    bb10: {
        _18 = from_utf8_lossy(_2) -> [return: bb35, unwind continue];
    }

    bb11: {
        _6 = Len((*_2));
        _7 = const 4_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb22, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 4]) -> [110: bb13, 116: bb16, 115: bb19, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 4]) -> [97: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 4]) -> [109: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 4]) -> [101: bb31, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[1 of 4]) -> [105: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[2 of 4]) -> [109: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[3 of 4]) -> [101: bb32, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[1 of 4]) -> [105: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[2 of 4]) -> [122: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[3 of 4]) -> [101: bb33, otherwise: bb10];
    }

    bb22: {
        _3 = Len((*_2));
        _4 = const 7_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb23];
    }

    bb23: {
        switchInt((*_2)[0 of 7]) -> [118: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[1 of 7]) -> [101: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[2 of 7]) -> [114: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[3 of 7]) -> [115: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[4 of 7]) -> [105: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[5 of 7]) -> [111: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[6 of 7]) -> [110: bb34, otherwise: bb10];
    }

    bb30: {
        _12 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field0;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb38;
    }

    bb31: {
        _13 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field1;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb38;
    }

    bb32: {
        _14 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field2;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb38;
    }

    bb33: {
        _15 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field3;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb38;
    }

    bb34: {
        _16 = sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field::__field4;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb38;
    }

    bb35: {
        _17 = &_18;
        _20 = <Cow<'_, str> as Deref>::deref(_17) -> [return: bb36, unwind: bb39];
    }

    bb36: {
        _19 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_20, const _) -> [return: bb37, unwind: bb39];
    }

    bb37: {
        _0 = Result::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, __E>::Err(move _19);
        drop(_18) -> [return: bb38, unwind continue];
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        drop(_18) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        resume;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize(_1: __D) -> Result<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__FieldVisitor>(move _1, const sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize::<impl at src/flags/sorting.rs:37:45: 37:56>::expecting(_1: &sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum SortColumn";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize::<impl at src/flags/sorting.rs:37:45: 37:56>::visit_enum(_1: sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Visitor<'_>, _2: __A) -> Result<SortColumn, <__A as EnumAccess<'_>>::Error> {
    debug self => const sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<SortColumn>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<flags::sorting::SortColumn, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
    let mut _7: isize;
    let _8: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _9: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _10: isize;
    let mut _12: flags::sorting::SortColumn;
    let _13: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _14: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _15: isize;
    let mut _17: flags::sorting::SortColumn;
    let _18: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _19: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _20: isize;
    let mut _22: flags::sorting::SortColumn;
    let _23: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _24: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _25: isize;
    let mut _27: flags::sorting::SortColumn;
    let _28: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _29: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _30: isize;
    let mut _32: flags::sorting::SortColumn;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _8;
        let _11: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _11;
        }
    }
    scope 6 {
        debug __variant => _13;
        let _16: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 7 {
            debug __val => const ();
        }
        scope 8 {
            debug __err => _16;
        }
    }
    scope 9 {
        debug __variant => _18;
        let _21: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _21;
        }
    }
    scope 12 {
        debug __variant => _23;
        let _26: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 13 {
            debug __val => const ();
        }
        scope 14 {
            debug __err => _26;
        }
    }
    scope 15 {
        debug __variant => _28;
        let _31: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 16 {
            debug __val => const ();
        }
        scope 17 {
            debug __err => _31;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<sorting::_::<impl Deserialize<'de> for SortColumn>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<SortColumn, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb25;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant));
        _7 = discriminant((_5.0: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::SortColumn>::deserialize::__Field));
        switchInt(move _7) -> [0: bb6, 1: bb10, 2: bb14, 3: bb18, 4: bb5, otherwise: bb3];
    }

    bb5: {
        _28 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _29 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _28) -> [return: bb22, unwind continue];
    }

    bb6: {
        _8 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _11 = move ((_9 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<SortColumn, <__A as EnumAccess<'_>>::Error>::Err(move _11);
        goto -> bb25;
    }

    bb9: {
        _12 = SortColumn::Extension;
        _0 = Result::<SortColumn, <__A as EnumAccess<'_>>::Error>::Ok(move _12);
        goto -> bb25;
    }

    bb10: {
        _13 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _16 = move ((_14 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<SortColumn, <__A as EnumAccess<'_>>::Error>::Err(move _16);
        goto -> bb25;
    }

    bb13: {
        _17 = SortColumn::Name;
        _0 = Result::<SortColumn, <__A as EnumAccess<'_>>::Error>::Ok(move _17);
        goto -> bb25;
    }

    bb14: {
        _18 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> [return: bb15, unwind continue];
    }

    bb15: {
        _20 = discriminant(_19);
        switchInt(move _20) -> [0: bb17, 1: bb16, otherwise: bb3];
    }

    bb16: {
        _21 = move ((_19 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<SortColumn, <__A as EnumAccess<'_>>::Error>::Err(move _21);
        goto -> bb25;
    }

    bb17: {
        _22 = SortColumn::Time;
        _0 = Result::<SortColumn, <__A as EnumAccess<'_>>::Error>::Ok(move _22);
        goto -> bb25;
    }

    bb18: {
        _23 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _24 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _23) -> [return: bb19, unwind continue];
    }

    bb19: {
        _25 = discriminant(_24);
        switchInt(move _25) -> [0: bb21, 1: bb20, otherwise: bb3];
    }

    bb20: {
        _26 = move ((_24 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<SortColumn, <__A as EnumAccess<'_>>::Error>::Err(move _26);
        goto -> bb25;
    }

    bb21: {
        _27 = SortColumn::Size;
        _0 = Result::<SortColumn, <__A as EnumAccess<'_>>::Error>::Ok(move _27);
        goto -> bb25;
    }

    bb22: {
        _30 = discriminant(_29);
        switchInt(move _30) -> [0: bb24, 1: bb23, otherwise: bb3];
    }

    bb23: {
        _31 = move ((_29 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<SortColumn, <__A as EnumAccess<'_>>::Error>::Err(move _31);
        goto -> bb25;
    }

    bb24: {
        _32 = SortColumn::Version;
        _0 = Result::<SortColumn, <__A as EnumAccess<'_>>::Error>::Ok(move _32);
        goto -> bb25;
    }

    bb25: {
        return;
    }
}

const sorting::_::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize::VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 5];
    let _2: &[&str; 5];
    let _3: [&str; 5];
    let mut _4: &[&str; 5];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in sorting::_::<impl at src/flags/sorting.rs:37:45: 37:56>::deserialize::VARIANTS: &[&str; 5] = {
    let mut _0: &[&str; 5];
    let mut _1: [&str; 5];

    bb0: {
        _1 = [const "extension", const "name", const "time", const "size", const "version"];
        _0 = &_1;
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:47:1: 47:39>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<SortColumn> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::sorting::SortColumn>;
    let _2: std::option::Option<&str>;
    let mut _3: std::option::Option<clap::Values<'_>>;
    let mut _4: isize;
    let _5: clap::Values<'_>;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: &std::option::Option<&str>;
    let mut _9: flags::sorting::SortColumn;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: &std::option::Option<&str>;
    let mut _13: flags::sorting::SortColumn;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: &std::option::Option<&str>;
    let mut _17: flags::sorting::SortColumn;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: &std::option::Option<&str>;
    let mut _21: flags::sorting::SortColumn;
    scope 1 {
        debug sort => _2;
        let mut _22: &std::option::Option<&str>;
        let mut _23: &std::option::Option<&str>;
        let mut _24: &std::option::Option<&str>;
        let mut _25: &std::option::Option<&str>;
    }
    scope 2 {
        debug s => _5;
    }

    bb0: {
        _3 = ArgMatches::<'_>::values_of::<&str>(_1, const "sort") -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _2 = std::option::Option::<&str>::None;
        goto -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Some).0: clap::Values<'_>);
        _2 = <clap::Values<'_> as Iterator>::last(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = ArgMatches::<'_>::is_present::<&str>(_1, const "timesort") -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _6) -> [0: bb7, otherwise: bb9];
    }

    bb7: {
        _8 = &_2;
        _25 = const _;
        _7 = <std::option::Option<&str> as PartialEq>::eq(move _8, _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _7) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _9 = SortColumn::Time;
        _0 = std::option::Option::<SortColumn>::Some(move _9);
        goto -> bb26;
    }

    bb10: {
        _10 = ArgMatches::<'_>::is_present::<&str>(_1, const "sizesort") -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _10) -> [0: bb12, otherwise: bb14];
    }

    bb12: {
        _12 = &_2;
        _24 = const _;
        _11 = <std::option::Option<&str> as PartialEq>::eq(move _12, _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _11) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _13 = SortColumn::Size;
        _0 = std::option::Option::<SortColumn>::Some(move _13);
        goto -> bb26;
    }

    bb15: {
        _14 = ArgMatches::<'_>::is_present::<&str>(_1, const "extensionsort") -> [return: bb16, unwind continue];
    }

    bb16: {
        switchInt(move _14) -> [0: bb17, otherwise: bb19];
    }

    bb17: {
        _16 = &_2;
        _23 = const _;
        _15 = <std::option::Option<&str> as PartialEq>::eq(move _16, _23) -> [return: bb18, unwind continue];
    }

    bb18: {
        switchInt(move _15) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _17 = SortColumn::Extension;
        _0 = std::option::Option::<SortColumn>::Some(move _17);
        goto -> bb26;
    }

    bb20: {
        _18 = ArgMatches::<'_>::is_present::<&str>(_1, const "versionsort") -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _18) -> [0: bb22, otherwise: bb24];
    }

    bb22: {
        _20 = &_2;
        _22 = const _;
        _19 = <std::option::Option<&str> as PartialEq>::eq(move _20, _22) -> [return: bb23, unwind continue];
    }

    bb23: {
        switchInt(move _19) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _21 = SortColumn::Version;
        _0 = std::option::Option::<SortColumn>::Some(move _21);
        goto -> bb26;
    }

    bb25: {
        _0 = std::option::Option::<SortColumn>::None;
        goto -> bb26;
    }

    bb26: {
        return;
    }
}

promoted[0] in sorting::<impl at src/flags/sorting.rs:47:1: 47:39>::from_arg_matches: &std::option::Option<&str> = {
    let mut _0: &std::option::Option<&str>;
    let mut _1: std::option::Option<&str>;
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "version";
        _2 = &(*_3);
        _1 = std::option::Option::<&str>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[1] in sorting::<impl at src/flags/sorting.rs:47:1: 47:39>::from_arg_matches: &std::option::Option<&str> = {
    let mut _0: &std::option::Option<&str>;
    let mut _1: std::option::Option<&str>;
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "extension";
        _2 = &(*_3);
        _1 = std::option::Option::<&str>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[2] in sorting::<impl at src/flags/sorting.rs:47:1: 47:39>::from_arg_matches: &std::option::Option<&str> = {
    let mut _0: &std::option::Option<&str>;
    let mut _1: std::option::Option<&str>;
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "size";
        _2 = &(*_3);
        _1 = std::option::Option::<&str>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[3] in sorting::<impl at src/flags/sorting.rs:47:1: 47:39>::from_arg_matches: &std::option::Option<&str> = {
    let mut _0: &std::option::Option<&str>;
    let mut _1: std::option::Option<&str>;
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "time";
        _2 = &(*_3);
        _1 = std::option::Option::<&str>::Some(move _2);
        _0 = &_1;
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:47:1: 47:39>::from_config(_1: &Config) -> std::option::Option<SortColumn> {
    debug config => _1;
    let mut _0: std::option::Option<flags::sorting::SortColumn>;
    let mut _2: &std::option::Option<config_file::Sorting>;
    let mut _3: isize;
    scope 1 {
        debug sort => _4;
        let _4: &config_file::Sorting;
    }

    bb0: {
        _2 = &((*_1).12: std::option::Option<config_file::Sorting>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = &(((*_2) as Some).0: config_file::Sorting);
        _0 = ((*_4).0: std::option::Option<flags::sorting::SortColumn>);
        goto -> bb3;
    }

    bb2: {
        _0 = std::option::Option::<SortColumn>::None;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:85:1: 85:28>::default() -> SortColumn {
    let mut _0: flags::sorting::SortColumn;

    bb0: {
        _0 = SortColumn::Name;
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:92:10: 92:15>::clone(_1: &SortOrder) -> SortOrder {
    debug self => _1;
    let mut _0: flags::sorting::SortOrder;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:92:17: 92:22>::fmt(_1: &SortOrder, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = const "Reverse";
        _3 = _6;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Default";
        _3 = _5;
        goto -> bb4;
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:92:30: 92:39>::eq(_1: &SortOrder, _2: &SortOrder) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:92:41: 92:43>::assert_receiver_is_total_eq(_1: &SortOrder) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:98:1: 98:38>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<SortOrder> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::sorting::SortOrder>;
    let mut _2: bool;
    let mut _3: flags::sorting::SortOrder;

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "reverse") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = SortOrder::Reverse;
        _0 = std::option::Option::<SortOrder>::Some(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = std::option::Option::<SortOrder>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:98:1: 98:38>::from_config(_1: &Config) -> std::option::Option<SortOrder> {
    debug config => _1;
    let mut _0: std::option::Option<flags::sorting::SortOrder>;
    let mut _2: &std::option::Option<config_file::Sorting>;
    let mut _3: isize;
    let mut _5: isize;
    let mut _7: flags::sorting::SortOrder;
    let mut _8: flags::sorting::SortOrder;
    scope 1 {
        debug sort => _4;
        let _4: &config_file::Sorting;
        scope 2 {
            debug reverse => _6;
            let _6: bool;
        }
    }

    bb0: {
        _2 = &((*_1).12: std::option::Option<config_file::Sorting>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb6];
    }

    bb1: {
        _4 = &(((*_2) as Some).0: config_file::Sorting);
        _5 = discriminant(((*_4).1: std::option::Option<bool>));
        switchInt(move _5) -> [1: bb2, otherwise: bb5];
    }

    bb2: {
        _6 = ((((*_4).1: std::option::Option<bool>) as Some).0: bool);
        switchInt(_6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _7 = SortOrder::Reverse;
        _0 = std::option::Option::<SortOrder>::Some(move _7);
        goto -> bb7;
    }

    bb4: {
        _8 = SortOrder::Default;
        _0 = std::option::Option::<SortOrder>::Some(move _8);
        goto -> bb7;
    }

    bb5: {
        _0 = std::option::Option::<SortOrder>::None;
        goto -> bb7;
    }

    bb6: {
        _0 = std::option::Option::<SortOrder>::None;
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:135:1: 135:27>::default() -> SortOrder {
    let mut _0: flags::sorting::SortOrder;

    bb0: {
        _0 = SortOrder::Default;
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:142:10: 142:15>::clone(_1: &DirGrouping) -> DirGrouping {
    debug self => _1;
    let mut _0: flags::sorting::DirGrouping;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:142:17: 142:22>::fmt(_1: &DirGrouping, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "Last";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "None";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "First";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:142:30: 142:39>::eq(_1: &DirGrouping, _2: &DirGrouping) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:142:41: 142:43>::assert_receiver_is_total_eq(_1: &DirGrouping) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

const sorting::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize(_1: __D) -> Result<DirGrouping, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::sorting::DirGrouping, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_enum::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Visitor<'_>>(move _1, const "DirGrouping", const _, const sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<DirGrouping>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize::<impl at src/flags/sorting.rs:142:45: 142:56>::expecting(_1: &sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize::<impl at src/flags/sorting.rs:142:45: 142:56>::visit_u64(_1: sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__FieldVisitor, _2: u64) -> Result<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E> {
    debug self => const sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field, __E>;
    let mut _3: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field;
    let mut _4: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field;
    let mut _5: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: config_file::_::_serde::de::Unexpected<'_>;
    let mut _8: &dyn config_file::_::_serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn config_file::_::_serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as config_file::_::_serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field::__field0;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field::__field1;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field::__field2;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in sorting::_::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize::<impl at src/flags/sorting.rs:142:45: 142:56>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize::<impl at src/flags/sorting.rs:142:45: 142:56>::visit_str(_1: sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__FieldVisitor, _2: &str) -> Result<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E> {
    debug self => const sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field;
    let mut _7: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field;
    let mut _8: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field;
    let mut _9: __E;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "none") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field::__field0;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb11;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "first") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field::__field1;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb11;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "last") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field::__field2;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb11;
    }

    bb6: {
        _9 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb10, unwind continue];
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Err(move _9);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize::<impl at src/flags/sorting.rs:142:45: 142:56>::visit_bytes(_1: sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E> {
    debug self => const sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field;
    let mut _10: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field;
    let mut _11: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field;
    let _12: &std::borrow::Cow<'_, str>;
    let _13: std::borrow::Cow<'_, str>;
    let mut _14: __E;
    let _15: &str;
    scope 1 {
        debug __value => _12;
    }

    bb0: {
        _6 = Len((*_2));
        _7 = const 4_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 4]) -> [110: bb2, 108: bb6, otherwise: bb5];
    }

    bb2: {
        switchInt((*_2)[1 of 4]) -> [111: bb3, otherwise: bb5];
    }

    bb3: {
        switchInt((*_2)[2 of 4]) -> [110: bb4, otherwise: bb5];
    }

    bb4: {
        switchInt((*_2)[3 of 4]) -> [101: bb15, otherwise: bb5];
    }

    bb5: {
        _13 = from_utf8_lossy(_2) -> [return: bb18, unwind continue];
    }

    bb6: {
        switchInt((*_2)[1 of 4]) -> [97: bb7, otherwise: bb5];
    }

    bb7: {
        switchInt((*_2)[2 of 4]) -> [115: bb8, otherwise: bb5];
    }

    bb8: {
        switchInt((*_2)[3 of 4]) -> [116: bb17, otherwise: bb5];
    }

    bb9: {
        _3 = Len((*_2));
        _4 = const 5_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb5, otherwise: bb10];
    }

    bb10: {
        switchInt((*_2)[0 of 5]) -> [102: bb11, otherwise: bb5];
    }

    bb11: {
        switchInt((*_2)[1 of 5]) -> [105: bb12, otherwise: bb5];
    }

    bb12: {
        switchInt((*_2)[2 of 5]) -> [114: bb13, otherwise: bb5];
    }

    bb13: {
        switchInt((*_2)[3 of 5]) -> [115: bb14, otherwise: bb5];
    }

    bb14: {
        switchInt((*_2)[4 of 5]) -> [116: bb16, otherwise: bb5];
    }

    bb15: {
        _9 = sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field::__field0;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb21;
    }

    bb16: {
        _10 = sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field::__field1;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb21;
    }

    bb17: {
        _11 = sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field::__field2;
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb21;
    }

    bb18: {
        _12 = &_13;
        _15 = <Cow<'_, str> as Deref>::deref(_12) -> [return: bb19, unwind: bb22];
    }

    bb19: {
        _14 = <__E as config_file::_::_serde::de::Error>::unknown_variant(_15, const _) -> [return: bb20, unwind: bb22];
    }

    bb20: {
        _0 = Result::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, __E>::Err(move _14);
        drop(_13) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_13) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize(_1: __D) -> Result<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field, <__D as config_file::_::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__FieldVisitor>(move _1, const sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize::<impl at src/flags/sorting.rs:142:45: 142:56>::expecting(_1: &sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum DirGrouping";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sorting::_::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize::<impl at src/flags/sorting.rs:142:45: 142:56>::visit_enum(_1: sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Visitor<'_>, _2: __A) -> Result<DirGrouping, <__A as EnumAccess<'_>>::Error> {
    debug self => const sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<DirGrouping>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<flags::sorting::DirGrouping, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
    let mut _7: isize;
    let _8: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _9: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _10: isize;
    let mut _12: flags::sorting::DirGrouping;
    let _13: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _14: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _15: isize;
    let mut _17: flags::sorting::DirGrouping;
    let _18: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant;
    let mut _19: std::result::Result<(), <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error>;
    let mut _20: isize;
    let mut _22: flags::sorting::DirGrouping;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _8;
        let _11: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _11;
        }
    }
    scope 6 {
        debug __variant => _13;
        let _16: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 7 {
            debug __val => const ();
        }
        scope 8 {
            debug __err => _16;
        }
    }
    scope 9 {
        debug __variant => _18;
        let _21: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error;
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _21;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<sorting::_::<impl Deserialize<'de> for DirGrouping>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<DirGrouping, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb17;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field, <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant));
        _7 = discriminant((_5.0: flags::sorting::_::<impl config_file::_::_serde::Deserialize<'de> for flags::sorting::DirGrouping>::deserialize::__Field));
        switchInt(move _7) -> [0: bb6, 1: bb10, 2: bb5, otherwise: bb3];
    }

    bb5: {
        _18 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> [return: bb14, unwind continue];
    }

    bb6: {
        _8 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _11 = move ((_9 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<DirGrouping, <__A as EnumAccess<'_>>::Error>::Err(move _11);
        goto -> bb17;
    }

    bb9: {
        _12 = DirGrouping::None;
        _0 = Result::<DirGrouping, <__A as EnumAccess<'_>>::Error>::Ok(move _12);
        goto -> bb17;
    }

    bb10: {
        _13 = move (_5.1: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Variant);
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _16 = move ((_14 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<DirGrouping, <__A as EnumAccess<'_>>::Error>::Err(move _16);
        goto -> bb17;
    }

    bb13: {
        _17 = DirGrouping::First;
        _0 = Result::<DirGrouping, <__A as EnumAccess<'_>>::Error>::Ok(move _17);
        goto -> bb17;
    }

    bb14: {
        _20 = discriminant(_19);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _21 = move ((_19 as Err).0: <__A as config_file::_::_serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<DirGrouping, <__A as EnumAccess<'_>>::Error>::Err(move _21);
        goto -> bb17;
    }

    bb16: {
        _22 = DirGrouping::Last;
        _0 = Result::<DirGrouping, <__A as EnumAccess<'_>>::Error>::Ok(move _22);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

const sorting::_::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize::VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in sorting::_::<impl at src/flags/sorting.rs:142:45: 142:56>::deserialize::VARIANTS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "none", const "first", const "last"];
        _0 = &_1;
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:150:1: 150:17>::from_str(_1: &str) -> std::option::Option<DirGrouping> {
    debug value => _1;
    let mut _0: std::option::Option<flags::sorting::DirGrouping>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: flags::sorting::DirGrouping;
    let mut _6: flags::sorting::DirGrouping;
    let mut _7: flags::sorting::DirGrouping;
    let _8: !;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &&str;
    let mut _16: &[&str; 2];

    bb0: {
        _4 = <str as PartialEq>::eq(_1, const "first") -> [return: bb9, unwind continue];
    }

    bb1: {
        _5 = DirGrouping::First;
        _0 = std::option::Option::<DirGrouping>::Some(move _5);
        goto -> bb12;
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "last") -> [return: bb8, unwind continue];
    }

    bb3: {
        _6 = DirGrouping::Last;
        _0 = std::option::Option::<DirGrouping>::Some(move _6);
        goto -> bb12;
    }

    bb4: {
        _2 = <str as PartialEq>::eq(_1, const "none") -> [return: bb7, unwind continue];
    }

    bb5: {
        _7 = DirGrouping::None;
        _0 = std::option::Option::<DirGrouping>::Some(move _7);
        goto -> bb12;
    }

    bb6: {
        _16 = const _;
        _10 = _16 as &[&str] (PointerCoercion(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_15) -> [return: bb10, unwind continue];
    }

    bb7: {
        switchInt(move _2) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb11, unwind continue];
    }

    bb11: {
        _8 = panic_fmt(move _9) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in sorting::<impl at src/flags/sorting.rs:150:1: 150:17>::from_str: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Group Dir can only be one of first, last or none, but got ", const "."];
        _0 = &_1;
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:163:1: 163:40>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<DirGrouping> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::sorting::DirGrouping>;
    let mut _2: bool;
    let mut _3: flags::sorting::DirGrouping;
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: std::option::Option<&str>;
    let mut _7: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, clap::Values<'_>>;
    let mut _8: std::option::Option<clap::Values<'_>>;
    let mut _9: isize;
    let mut _11: isize;
    scope 1 {
        debug group_dirs => _12;
        let _10: clap::Values<'_>;
        let _12: &str;
        scope 2 {
            debug residual => const std::option::Option::<Infallible>::None;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _10;
            scope 5 {
            }
        }
    }

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "classic") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = DirGrouping::None;
        _0 = std::option::Option::<DirGrouping>::Some(move _3);
        goto -> bb14;
    }

    bb3: {
        _5 = ArgMatches::<'_>::occurrences_of::<&str>(_1, const "group-dirs") -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = Gt(move _5, const 0_u64);
        switchInt(move _4) -> [0: bb13, otherwise: bb5];
    }

    bb5: {
        _8 = ArgMatches::<'_>::values_of::<&str>(_1, const "group-dirs") -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = <std::option::Option<clap::Values<'_>> as Try>::branch(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _10 = move ((_7 as Continue).0: clap::Values<'_>);
        _6 = <clap::Values<'_> as Iterator>::last(move _10) -> [return: bb11, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _0 = <std::option::Option<DirGrouping> as FromResidual<std::option::Option<Infallible>>>::from_residual(const std::option::Option::<Infallible>::None) -> [return: bb14, unwind continue];
    }

    bb11: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [1: bb12, otherwise: bb13];
    }

    bb12: {
        _12 = ((_6 as Some).0: &str);
        _0 = DirGrouping::from_str(_12) -> [return: bb14, unwind continue];
    }

    bb13: {
        _0 = std::option::Option::<DirGrouping>::None;
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:163:1: 163:40>::from_config(_1: &Config) -> std::option::Option<DirGrouping> {
    debug config => _1;
    let mut _0: std::option::Option<flags::sorting::DirGrouping>;
    let mut _2: isize;
    let mut _3: flags::sorting::DirGrouping;
    let mut _4: &std::option::Option<config_file::Sorting>;
    let mut _5: isize;
    scope 1 {
    }
    scope 2 {
        debug sort => _6;
        let _6: &config_file::Sorting;
    }

    bb0: {
        _2 = discriminant(((*_1).0: std::option::Option<bool>));
        switchInt(move _2) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt(((((*_1).0: std::option::Option<bool>) as Some).0: bool)) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = DirGrouping::None;
        _0 = std::option::Option::<DirGrouping>::Some(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = &((*_1).12: std::option::Option<config_file::Sorting>);
        _5 = discriminant((*_4));
        switchInt(move _5) -> [1: bb5, otherwise: bb4];
    }

    bb4: {
        _0 = std::option::Option::<DirGrouping>::None;
        goto -> bb6;
    }

    bb5: {
        _6 = &(((*_4) as Some).0: config_file::Sorting);
        _0 = ((*_6).2: std::option::Option<flags::sorting::DirGrouping>);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn sorting::<impl at src/flags/sorting.rs:201:1: 201:29>::default() -> DirGrouping {
    let mut _0: flags::sorting::DirGrouping;

    bb0: {
        _0 = DirGrouping::None;
        return;
    }
}

fn symlink_arrow::<impl at src/flags/symlink_arrow.rs:8:10: 8:15>::clone(_1: &SymlinkArrow) -> SymlinkArrow {
    debug self => _1;
    let mut _0: flags::symlink_arrow::SymlinkArrow;
    let mut _2: std::string::String;
    let _3: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <std::string::String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = SymlinkArrow(move _2);
        return;
    }
}

fn symlink_arrow::<impl at src/flags/symlink_arrow.rs:8:17: 8:22>::fmt(_1: &SymlinkArrow, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::string::String;
    let _6: &std::string::String;

    bb0: {
        _3 = const "SymlinkArrow";
        _6 = &((*_1).0: std::string::String);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn symlink_arrow::<impl at src/flags/symlink_arrow.rs:8:24: 8:26>::assert_receiver_is_total_eq(_1: &SymlinkArrow) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn symlink_arrow::<impl at src/flags/symlink_arrow.rs:8:28: 8:37>::eq(_1: &SymlinkArrow, _2: &SymlinkArrow) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::string::String;
    let mut _4: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _4 = &((*_2).0: std::string::String);
        _0 = <std::string::String as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn symlink_arrow::<impl at src/flags/symlink_arrow.rs:11:1: 11:41>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<SymlinkArrow> {
    let mut _0: std::option::Option<flags::symlink_arrow::SymlinkArrow>;

    bb0: {
        _0 = std::option::Option::<SymlinkArrow>::None;
        return;
    }
}

fn symlink_arrow::<impl at src/flags/symlink_arrow.rs:11:1: 11:41>::from_config(_1: &Config) -> std::option::Option<SymlinkArrow> {
    debug config => _1;
    let mut _0: std::option::Option<flags::symlink_arrow::SymlinkArrow>;
    let mut _2: &std::option::Option<std::string::String>;
    let mut _3: isize;
    let mut _5: flags::symlink_arrow::SymlinkArrow;
    let mut _6: std::string::String;
    scope 1 {
        debug arrow => _4;
        let _4: &std::string::String;
    }

    bb0: {
        _2 = &((*_1).15: std::option::Option<std::string::String>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        _4 = &(((*_2) as Some).0: std::string::String);
        _6 = <std::string::String as ToString>::to_string(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = SymlinkArrow(move _6);
        _0 = std::option::Option::<SymlinkArrow>::Some(move _5);
        goto -> bb4;
    }

    bb3: {
        _0 = std::option::Option::<SymlinkArrow>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn symlink_arrow::<impl at src/flags/symlink_arrow.rs:33:1: 33:30>::default() -> SymlinkArrow {
    let mut _0: flags::symlink_arrow::SymlinkArrow;
    let mut _1: std::string::String;

    bb0: {
        _1 = <std::string::String as From<&str>>::from(const "⇒") -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = SymlinkArrow(move _1);
        return;
    }
}

fn symlink_arrow::<impl at src/flags/symlink_arrow.rs:40:1: 40:35>::fmt(_1: &SymlinkArrow, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let mut _10: &[&str; 1];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (PointerCoercion(Unsize));
        _9 = &((*_1).0: std::string::String);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in symlink_arrow::<impl at src/flags/symlink_arrow.rs:40:1: 40:35>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn symlinks::<impl at src/flags/symlinks.rs:11:10: 11:15>::clone(_1: &NoSymlink) -> NoSymlink {
    debug self => _1;
    let mut _0: flags::symlinks::NoSymlink;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn symlinks::<impl at src/flags/symlinks.rs:11:17: 11:22>::fmt(_1: &NoSymlink, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&bool;
    let _6: &bool;

    bb0: {
        _3 = const "NoSymlink";
        _6 = &((*_1).0: bool);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn symlinks::<impl at src/flags/symlinks.rs:11:30: 11:39>::eq(_1: &NoSymlink, _2: &NoSymlink) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;

    bb0: {
        _3 = ((*_1).0: bool);
        _4 = ((*_2).0: bool);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn symlinks::<impl at src/flags/symlinks.rs:11:41: 11:43>::assert_receiver_is_total_eq(_1: &NoSymlink) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn symlinks::<impl at src/flags/symlinks.rs:11:45: 11:52>::default() -> NoSymlink {
    let mut _0: flags::symlinks::NoSymlink;
    let mut _1: bool;

    bb0: {
        _1 = <bool as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = NoSymlink(move _1);
        return;
    }
}

fn symlinks::<impl at src/flags/symlinks.rs:14:1: 14:38>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<NoSymlink> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::symlinks::NoSymlink>;
    let mut _2: bool;
    let mut _3: flags::symlinks::NoSymlink;

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "no-symlink") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = NoSymlink(const true);
        _0 = std::option::Option::<NoSymlink>::Some(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = std::option::Option::<NoSymlink>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn symlinks::<impl at src/flags/symlinks.rs:14:1: 14:38>::from_config(_1: &Config) -> std::option::Option<NoSymlink> {
    debug config => _1;
    let mut _0: std::option::Option<flags::symlinks::NoSymlink>;
    let mut _2: isize;
    let mut _4: flags::symlinks::NoSymlink;
    scope 1 {
        debug no_link => _3;
        let _3: bool;
    }

    bb0: {
        _2 = discriminant(((*_1).13: std::option::Option<bool>));
        switchInt(move _2) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = ((((*_1).13: std::option::Option<bool>) as Some).0: bool);
        _4 = NoSymlink(_3);
        _0 = std::option::Option::<NoSymlink>::Some(move _4);
        goto -> bb3;
    }

    bb2: {
        _0 = std::option::Option::<NoSymlink>::None;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn total_size::<impl at src/flags/total_size.rs:11:10: 11:15>::clone(_1: &TotalSize) -> TotalSize {
    debug self => _1;
    let mut _0: flags::total_size::TotalSize;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn total_size::<impl at src/flags/total_size.rs:11:17: 11:22>::fmt(_1: &TotalSize, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&bool;
    let _6: &bool;

    bb0: {
        _3 = const "TotalSize";
        _6 = &((*_1).0: bool);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn total_size::<impl at src/flags/total_size.rs:11:30: 11:39>::eq(_1: &TotalSize, _2: &TotalSize) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;

    bb0: {
        _3 = ((*_1).0: bool);
        _4 = ((*_2).0: bool);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn total_size::<impl at src/flags/total_size.rs:11:41: 11:43>::assert_receiver_is_total_eq(_1: &TotalSize) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn total_size::<impl at src/flags/total_size.rs:11:45: 11:52>::default() -> TotalSize {
    let mut _0: flags::total_size::TotalSize;
    let mut _1: bool;

    bb0: {
        _1 = <bool as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = TotalSize(move _1);
        return;
    }
}

fn total_size::<impl at src/flags/total_size.rs:14:1: 14:38>::from_arg_matches(_1: &ArgMatches<'_>) -> std::option::Option<TotalSize> {
    debug matches => _1;
    let mut _0: std::option::Option<flags::total_size::TotalSize>;
    let mut _2: bool;
    let mut _3: flags::total_size::TotalSize;

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "total-size") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = TotalSize(const true);
        _0 = std::option::Option::<TotalSize>::Some(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = std::option::Option::<TotalSize>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn total_size::<impl at src/flags/total_size.rs:14:1: 14:38>::from_config(_1: &Config) -> std::option::Option<TotalSize> {
    debug config => _1;
    let mut _0: std::option::Option<flags::total_size::TotalSize>;
    let mut _2: isize;
    let mut _4: flags::total_size::TotalSize;
    scope 1 {
        debug total => _3;
        let _3: bool;
    }

    bb0: {
        _2 = discriminant(((*_1).14: std::option::Option<bool>));
        switchInt(move _2) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = ((((*_1).14: std::option::Option<bool>) as Some).0: bool);
        _4 = TotalSize(_3);
        _0 = std::option::Option::<TotalSize>::Some(move _4);
        goto -> bb3;
    }

    bb2: {
        _0 = std::option::Option::<TotalSize>::None;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn flags::<impl at src/flags.rs:49:10: 49:15>::clone(_1: &Flags) -> Flags {
    debug self => _1;
    let mut _0: flags::Flags;
    let mut _2: flags::blocks::Blocks;
    let _3: &flags::blocks::Blocks;
    let mut _4: flags::color::Color;
    let _5: &flags::color::Color;
    let mut _6: flags::date::DateFlag;
    let _7: &flags::date::DateFlag;
    let mut _8: flags::dereference::Dereference;
    let _9: &flags::dereference::Dereference;
    let mut _10: flags::display::Display;
    let _11: &flags::display::Display;
    let mut _12: flags::indicators::Indicators;
    let _13: &flags::indicators::Indicators;
    let mut _14: flags::icons::Icons;
    let _15: &flags::icons::Icons;
    let mut _16: flags::ignore_globs::IgnoreGlobs;
    let _17: &flags::ignore_globs::IgnoreGlobs;
    let mut _18: flags::layout::Layout;
    let _19: &flags::layout::Layout;
    let mut _20: flags::symlinks::NoSymlink;
    let _21: &flags::symlinks::NoSymlink;
    let mut _22: flags::recursion::Recursion;
    let _23: &flags::recursion::Recursion;
    let mut _24: flags::size::SizeFlag;
    let _25: &flags::size::SizeFlag;
    let mut _26: flags::sorting::Sorting;
    let _27: &flags::sorting::Sorting;
    let mut _28: flags::total_size::TotalSize;
    let _29: &flags::total_size::TotalSize;
    let mut _30: flags::symlink_arrow::SymlinkArrow;
    let _31: &flags::symlink_arrow::SymlinkArrow;

    bb0: {
        _3 = &((*_1).0: flags::blocks::Blocks);
        _2 = <Blocks as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: flags::color::Color);
        _4 = <flags::color::Color as Clone>::clone(_5) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _7 = &((*_1).2: flags::date::DateFlag);
        _6 = <DateFlag as Clone>::clone(_7) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _9 = &((*_1).3: flags::dereference::Dereference);
        _8 = <Dereference as Clone>::clone(_9) -> [return: bb4, unwind: bb18];
    }

    bb4: {
        _11 = &((*_1).4: flags::display::Display);
        _10 = <flags::display::Display as Clone>::clone(_11) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _13 = &((*_1).5: flags::indicators::Indicators);
        _12 = <Indicators as Clone>::clone(_13) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        _15 = &((*_1).6: flags::icons::Icons);
        _14 = <icons::Icons as Clone>::clone(_15) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _17 = &((*_1).7: flags::ignore_globs::IgnoreGlobs);
        _16 = <IgnoreGlobs as Clone>::clone(_17) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _19 = &((*_1).8: flags::layout::Layout);
        _18 = <layout::Layout as Clone>::clone(_19) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _21 = &((*_1).9: flags::symlinks::NoSymlink);
        _20 = <NoSymlink as Clone>::clone(_21) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _23 = &((*_1).10: flags::recursion::Recursion);
        _22 = <recursion::Recursion as Clone>::clone(_23) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _25 = &((*_1).11: flags::size::SizeFlag);
        _24 = <SizeFlag as Clone>::clone(_25) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _27 = &((*_1).12: flags::sorting::Sorting);
        _26 = <sorting::Sorting as Clone>::clone(_27) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _29 = &((*_1).13: flags::total_size::TotalSize);
        _28 = <TotalSize as Clone>::clone(_29) -> [return: bb14, unwind: bb16];
    }

    bb14: {
        _31 = &((*_1).14: flags::symlink_arrow::SymlinkArrow);
        _30 = <SymlinkArrow as Clone>::clone(_31) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        _0 = Flags { blocks: move _2, color: move _4, date: move _6, dereference: move _8, display: move _10, display_indicators: move _12, icons: move _14, ignore_globs: move _16, layout: move _18, no_symlink: move _20, recursion: move _22, size: move _24, sorting: move _26, total_size: move _28, symlink_arrow: move _30 };
        return;
    }

    bb16 (cleanup): {
        drop(_16) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_14) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_6) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_2) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}

fn flags::<impl at src/flags.rs:49:17: 49:22>::fmt(_1: &Flags, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 15];
    let _5: [&dyn std::fmt::Debug; 15];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &flags::blocks::Blocks;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &flags::color::Color;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &flags::date::DateFlag;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &flags::dereference::Dereference;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &flags::display::Display;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &flags::indicators::Indicators;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &flags::icons::Icons;
    let mut _20: &dyn std::fmt::Debug;
    let _21: &flags::ignore_globs::IgnoreGlobs;
    let mut _22: &dyn std::fmt::Debug;
    let _23: &flags::layout::Layout;
    let mut _24: &dyn std::fmt::Debug;
    let _25: &flags::symlinks::NoSymlink;
    let mut _26: &dyn std::fmt::Debug;
    let _27: &flags::recursion::Recursion;
    let mut _28: &dyn std::fmt::Debug;
    let _29: &flags::size::SizeFlag;
    let mut _30: &dyn std::fmt::Debug;
    let _31: &flags::sorting::Sorting;
    let mut _32: &dyn std::fmt::Debug;
    let _33: &flags::total_size::TotalSize;
    let mut _34: &dyn std::fmt::Debug;
    let _35: &&flags::symlink_arrow::SymlinkArrow;
    let _36: &flags::symlink_arrow::SymlinkArrow;
    let _37: &str;
    let mut _38: &[&str];
    let mut _39: &[&str; 15];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _39 = const _;
        _7 = &((*_1).0: flags::blocks::Blocks);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: flags::color::Color);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: flags::date::DateFlag);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: flags::dereference::Dereference);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: flags::display::Display);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: flags::indicators::Indicators);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _19 = &((*_1).6: flags::icons::Icons);
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _21 = &((*_1).7: flags::ignore_globs::IgnoreGlobs);
        _20 = _21 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _23 = &((*_1).8: flags::layout::Layout);
        _22 = _23 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _25 = &((*_1).9: flags::symlinks::NoSymlink);
        _24 = _25 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _27 = &((*_1).10: flags::recursion::Recursion);
        _26 = _27 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _29 = &((*_1).11: flags::size::SizeFlag);
        _28 = _29 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _31 = &((*_1).12: flags::sorting::Sorting);
        _30 = _31 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _33 = &((*_1).13: flags::total_size::TotalSize);
        _32 = _33 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _36 = &((*_1).14: flags::symlink_arrow::SymlinkArrow);
        _35 = &_36;
        _34 = _35 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _37 = const "Flags";
        _38 = _39 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _37, move _38, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in flags::<impl at src/flags.rs:49:17: 49:22>::fmt: &[&str; 15] = {
    let mut _0: &[&str; 15];
    let mut _1: [&str; 15];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: &str;
    let mut _19: &str;
    let mut _20: &str;
    let mut _21: &str;
    let mut _22: &str;
    let mut _23: &str;
    let mut _24: &str;
    let mut _25: &str;
    let mut _26: &str;
    let mut _27: &str;
    let mut _28: &str;
    let mut _29: &str;

    bb0: {
        _3 = const "color";
        _2 = &(*_3);
        _5 = const "date";
        _4 = &(*_5);
        _7 = const "dereference";
        _6 = &(*_7);
        _9 = const "display";
        _8 = &(*_9);
        _11 = const "display_indicators";
        _10 = &(*_11);
        _13 = const "icons";
        _12 = &(*_13);
        _15 = const "ignore_globs";
        _14 = &(*_15);
        _17 = const "layout";
        _16 = &(*_17);
        _19 = const "no_symlink";
        _18 = &(*_19);
        _21 = const "recursion";
        _20 = &(*_21);
        _23 = const "size";
        _22 = &(*_23);
        _25 = const "sorting";
        _24 = &(*_25);
        _27 = const "total_size";
        _26 = &(*_27);
        _29 = const "symlink_arrow";
        _28 = &(*_29);
        _1 = [const "blocks", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28];
        _0 = &_1;
        return;
    }
}

fn flags::<impl at src/flags.rs:49:24: 49:31>::default() -> Flags {
    let mut _0: flags::Flags;
    let mut _1: flags::blocks::Blocks;
    let mut _2: flags::color::Color;
    let mut _3: flags::date::DateFlag;
    let mut _4: flags::dereference::Dereference;
    let mut _5: flags::display::Display;
    let mut _6: flags::indicators::Indicators;
    let mut _7: flags::icons::Icons;
    let mut _8: flags::ignore_globs::IgnoreGlobs;
    let mut _9: flags::layout::Layout;
    let mut _10: flags::symlinks::NoSymlink;
    let mut _11: flags::recursion::Recursion;
    let mut _12: flags::size::SizeFlag;
    let mut _13: flags::sorting::Sorting;
    let mut _14: flags::total_size::TotalSize;
    let mut _15: flags::symlink_arrow::SymlinkArrow;

    bb0: {
        _1 = <Blocks as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <flags::color::Color as Default>::default() -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _3 = <DateFlag as Default>::default() -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _4 = <Dereference as Default>::default() -> [return: bb4, unwind: bb18];
    }

    bb4: {
        _5 = <flags::display::Display as Default>::default() -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _6 = <Indicators as Default>::default() -> [return: bb6, unwind: bb18];
    }

    bb6: {
        _7 = <icons::Icons as Default>::default() -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _8 = <IgnoreGlobs as Default>::default() -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _9 = <layout::Layout as Default>::default() -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _10 = <NoSymlink as Default>::default() -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _11 = <recursion::Recursion as Default>::default() -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _12 = <SizeFlag as Default>::default() -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _13 = <sorting::Sorting as Default>::default() -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _14 = <TotalSize as Default>::default() -> [return: bb14, unwind: bb16];
    }

    bb14: {
        _15 = <SymlinkArrow as Default>::default() -> [return: bb15, unwind: bb16];
    }

    bb15: {
        _0 = Flags { blocks: move _1, color: move _2, date: move _3, dereference: move _4, display: move _5, display_indicators: move _6, icons: move _7, ignore_globs: move _8, layout: move _9, no_symlink: move _10, recursion: move _11, size: move _12, sorting: move _13, total_size: move _14, symlink_arrow: move _15 };
        return;
    }

    bb16 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_7) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_3) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_1) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}

fn flags::<impl at src/flags.rs:68:1: 68:11>::configure_from(_1: &ArgMatches<'_>, _2: &Config) -> Result<Flags, clap::Error> {
    debug matches => _1;
    debug config => _2;
    let mut _0: std::result::Result<flags::Flags, clap::Error>;
    let mut _3: flags::Flags;
    let mut _4: flags::blocks::Blocks;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, clap::Error>, flags::blocks::Blocks>;
    let mut _6: std::result::Result<flags::blocks::Blocks, clap::Error>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, clap::Error>;
    let _9: flags::blocks::Blocks;
    let mut _10: flags::color::Color;
    let mut _11: flags::date::DateFlag;
    let mut _12: flags::dereference::Dereference;
    let mut _13: flags::display::Display;
    let mut _14: flags::layout::Layout;
    let mut _15: flags::size::SizeFlag;
    let mut _16: flags::indicators::Indicators;
    let mut _17: flags::icons::Icons;
    let mut _18: flags::ignore_globs::IgnoreGlobs;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, clap::Error>, flags::ignore_globs::IgnoreGlobs>;
    let mut _20: std::result::Result<flags::ignore_globs::IgnoreGlobs, clap::Error>;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, clap::Error>;
    let _23: flags::ignore_globs::IgnoreGlobs;
    let mut _24: flags::symlinks::NoSymlink;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, clap::Error>, flags::recursion::Recursion>;
    let mut _26: std::result::Result<flags::recursion::Recursion, clap::Error>;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, clap::Error>;
    let _29: flags::recursion::Recursion;
    let mut _30: flags::sorting::Sorting;
    let mut _31: flags::total_size::TotalSize;
    let mut _32: flags::symlink_arrow::SymlinkArrow;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _22;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _23;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _28;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _29;
        scope 12 {
        }
    }

    bb0: {
        _6 = Blocks::configure_from(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <Result<Blocks, clap::Error> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_5 as Continue).0: flags::blocks::Blocks);
        _4 = move _9;
        _10 = flags::color::Color::configure_from(_1, _2) -> [return: bb6, unwind: bb44];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, clap::Error>);
        _0 = <Result<Flags, clap::Error> as FromResidual<Result<Infallible, clap::Error>>>::from_residual(move _8) -> [return: bb33, unwind continue];
    }

    bb6: {
        _11 = <DateFlag as Configurable<DateFlag>>::configure_from(_1, _2) -> [return: bb7, unwind: bb44];
    }

    bb7: {
        _12 = <Dereference as Configurable<Dereference>>::configure_from(_1, _2) -> [return: bb8, unwind: bb43];
    }

    bb8: {
        _13 = <flags::display::Display as Configurable<flags::display::Display>>::configure_from(_1, _2) -> [return: bb9, unwind: bb43];
    }

    bb9: {
        _14 = <layout::Layout as Configurable<layout::Layout>>::configure_from(_1, _2) -> [return: bb10, unwind: bb43];
    }

    bb10: {
        _15 = <SizeFlag as Configurable<SizeFlag>>::configure_from(_1, _2) -> [return: bb11, unwind: bb43];
    }

    bb11: {
        _16 = <Indicators as Configurable<Indicators>>::configure_from(_1, _2) -> [return: bb12, unwind: bb43];
    }

    bb12: {
        _17 = icons::Icons::configure_from(_1, _2) -> [return: bb13, unwind: bb43];
    }

    bb13: {
        _20 = IgnoreGlobs::configure_from(_1, _2) -> [return: bb14, unwind: bb42];
    }

    bb14: {
        _19 = <Result<IgnoreGlobs, clap::Error> as Try>::branch(move _20) -> [return: bb15, unwind: bb42];
    }

    bb15: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        _23 = move ((_19 as Continue).0: flags::ignore_globs::IgnoreGlobs);
        _18 = move _23;
        _24 = <NoSymlink as Configurable<NoSymlink>>::configure_from(_1, _2) -> [return: bb19, unwind: bb38];
    }

    bb17: {
        _22 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, clap::Error>);
        _0 = <Result<Flags, clap::Error> as FromResidual<Result<Infallible, clap::Error>>>::from_residual(move _22) -> [return: bb18, unwind: bb39];
    }

    bb18: {
        drop(_17) -> [return: bb31, unwind: bb40];
    }

    bb19: {
        _26 = recursion::Recursion::configure_from(_1, _2) -> [return: bb20, unwind: bb38];
    }

    bb20: {
        _25 = <Result<recursion::Recursion, clap::Error> as Try>::branch(move _26) -> [return: bb21, unwind: bb38];
    }

    bb21: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        _29 = ((_25 as Continue).0: flags::recursion::Recursion);
        _30 = sorting::Sorting::configure_from(_1, _2) -> [return: bb25, unwind: bb34];
    }

    bb23: {
        _28 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, clap::Error>);
        _0 = <Result<Flags, clap::Error> as FromResidual<Result<Infallible, clap::Error>>>::from_residual(move _28) -> [return: bb24, unwind: bb34];
    }

    bb24: {
        drop(_18) -> [return: bb28, unwind: bb35];
    }

    bb25: {
        _31 = <TotalSize as Configurable<TotalSize>>::configure_from(_1, _2) -> [return: bb26, unwind: bb34];
    }

    bb26: {
        _32 = <SymlinkArrow as Configurable<SymlinkArrow>>::configure_from(_1, _2) -> [return: bb27, unwind: bb34];
    }

    bb27: {
        _3 = Flags { blocks: move _4, color: move _10, date: move _11, dereference: move _12, display: move _13, display_indicators: move _16, icons: move _17, ignore_globs: move _18, layout: move _14, no_symlink: move _24, recursion: _29, size: move _15, sorting: move _30, total_size: move _31, symlink_arrow: move _32 };
        _0 = Result::<Flags, clap::Error>::Ok(move _3);
        goto -> bb33;
    }

    bb28: {
        drop(_17) -> [return: bb29, unwind: bb36];
    }

    bb29: {
        drop(_11) -> [return: bb30, unwind: bb37];
    }

    bb30: {
        drop(_4) -> [return: bb33, unwind continue];
    }

    bb31: {
        drop(_11) -> [return: bb32, unwind: bb41];
    }

    bb32: {
        drop(_4) -> [return: bb33, unwind continue];
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_18) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_17) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_11) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_4) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_18) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_17) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_11) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_4) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_17) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_11) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_4) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        resume;
    }
}

fn Configurable::configure_from(_1: &ArgMatches<'_>, _2: &Config) -> T {
    debug matches => _1;
    debug config => _2;
    let mut _0: T;
    let mut _3: std::option::Option<T>;
    let mut _4: isize;
    let mut _6: std::option::Option<T>;
    let mut _7: isize;
    let mut _9: std::option::Option<T>;
    let mut _10: isize;
    scope 1 {
        debug value => _5;
        let _5: T;
    }
    scope 2 {
        debug value => _8;
        let _8: T;
    }
    scope 3 {
        debug value => _11;
        let _11: T;
    }

    bb0: {
        _3 = <Self as Configurable<T>>::from_arg_matches(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = move ((_3 as Some).0: T);
        _0 = move _5;
        goto -> bb13;
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = <Self as Configurable<T>>::from_environment() -> [return: bb5, unwind continue];
    }

    bb5: {
        _7 = discriminant(_6);
        switchInt(move _7) -> [1: bb6, otherwise: bb7];
    }

    bb6: {
        _8 = move ((_6 as Some).0: T);
        _0 = move _8;
        goto -> bb13;
    }

    bb7: {
        drop(_6) -> [return: bb8, unwind continue];
    }

    bb8: {
        _9 = <Self as Configurable<T>>::from_config(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [1: bb10, otherwise: bb11];
    }

    bb10: {
        _11 = move ((_9 as Some).0: T);
        _0 = move _11;
        goto -> bb13;
    }

    bb11: {
        drop(_9) -> [return: bb12, unwind continue];
    }

    bb12: {
        _0 = <T as Default>::default() -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }
}

fn Configurable::from_environment() -> std::option::Option<T> {
    let mut _0: std::option::Option<T>;

    bb0: {
        _0 = std::option::Option::<T>::None;
        return;
    }
}

fn icon::<impl at src/icon.rs:13:10: 13:15>::fmt(_1: &icon::Theme, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "Unicode";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "NoIcon";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "Fancy";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn icon::<impl at src/icon.rs:13:23: 13:28>::clone(_1: &icon::Theme) -> icon::Theme {
    debug self => _1;
    let mut _0: icon::Theme;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn icon::<impl at src/icon.rs:13:30: 13:32>::assert_receiver_is_total_eq(_1: &icon::Theme) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn icon::<impl at src/icon.rs:13:34: 13:43>::eq(_1: &icon::Theme, _2: &icon::Theme) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn icon::<impl at src/icon.rs:24:1: 24:11>::new(_1: icon::Theme, _2: std::string::String) -> icon::Icons {
    debug theme => _1;
    debug icon_separator => _2;
    let mut _0: icon::Icons;
    let _3: bool;
    let mut _4: bool;
    let mut _5: &icon::Theme;
    let mut _6: &icon::Theme;
    let mut _11: (std::collections::HashMap<&str, &str>, std::collections::HashMap<&str, &str>, &str, &str);
    let mut _12: bool;
    let mut _13: &icon::Theme;
    let mut _14: std::collections::HashMap<&str, &str>;
    let mut _15: std::collections::HashMap<&str, &str>;
    let mut _16: std::collections::HashMap<&str, &str>;
    let mut _17: std::collections::HashMap<&str, &str>;
    let mut _18: bool;
    let mut _19: std::string::String;
    let mut _21: &icon::Theme;
    let mut _22: &icon::Theme;
    scope 1 {
        debug display_icons => _3;
        let _7: std::collections::HashMap<&str, &str>;
        let _8: std::collections::HashMap<&str, &str>;
        let _9: &str;
        let _10: &str;
        let mut _20: &icon::Theme;
        scope 2 {
            debug icons_by_name => _7;
            debug icons_by_extension => _8;
            debug default_file_icon => _9;
            debug default_folder_icon => _10;
        }
    }

    bb0: {
        _5 = &_1;
        _22 = const _;
        _4 = <icon::Theme as PartialEq>::eq(move _5, _22) -> [return: bb1, unwind: bb15];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = const true;
        goto -> bb4;
    }

    bb3: {
        _6 = &_1;
        _21 = const _;
        _3 = <icon::Theme as PartialEq>::eq(move _6, _21) -> [return: bb17, unwind: bb15];
    }

    bb4: {
        _13 = &_1;
        _20 = const _;
        _12 = <icon::Theme as PartialEq>::eq(move _13, _20) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        switchInt(move _12) -> [0: bb9, otherwise: bb6];
    }

    bb6: {
        _14 = icon::Icons::get_default_icons_by_name() -> [return: bb7, unwind: bb15];
    }

    bb7: {
        _15 = icon::Icons::get_default_icons_by_extension() -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _11 = (move _14, move _15, const "\u{f016}", const "\u{f115}");
        goto -> bb12;
    }

    bb9: {
        _16 = HashMap::<&str, &str>::new() -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _17 = HashMap::<&str, &str>::new() -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _11 = (move _16, move _17, const "🗋", const "🗁");
        goto -> bb12;
    }

    bb12: {
        _7 = move (_11.0: std::collections::HashMap<&str, &str>);
        _8 = move (_11.1: std::collections::HashMap<&str, &str>);
        _9 = (_11.2: &str);
        _10 = (_11.3: &str);
        _18 = _3;
        _19 = move _2;
        _0 = icon::Icons { display_icons: move _18, icons_by_name: move _7, icons_by_extension: move _8, default_folder_icon: _10, default_file_icon: _9, icon_separator: move _19 };
        return;
    }

    bb13 (cleanup): {
        drop(_16) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_14) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_2) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        goto -> bb4;
    }
}

promoted[0] in icon::<impl at src/icon.rs:24:1: 24:11>::new: &icon::Theme = {
    let mut _0: &icon::Theme;
    let mut _1: icon::Theme;

    bb0: {
        _1 = icon::Theme::Fancy;
        _0 = &_1;
        return;
    }
}

promoted[1] in icon::<impl at src/icon.rs:24:1: 24:11>::new: &icon::Theme = {
    let mut _0: &icon::Theme;
    let mut _1: icon::Theme;

    bb0: {
        _1 = icon::Theme::Unicode;
        _0 = &_1;
        return;
    }
}

promoted[2] in icon::<impl at src/icon.rs:24:1: 24:11>::new: &icon::Theme = {
    let mut _0: &icon::Theme;
    let mut _1: icon::Theme;

    bb0: {
        _1 = icon::Theme::Fancy;
        _0 = &_1;
        return;
    }
}

fn icon::<impl at src/icon.rs:24:1: 24:11>::get(_1: &icon::Icons, _2: &Name) -> std::string::String {
    debug self => _1;
    debug name => _2;
    let mut _0: std::string::String;
    let mut _3: bool;
    let _4: meta::filetype::FileType;
    let mut _6: isize;
    let _7: &str;
    let mut _8: isize;
    let _9: &str;
    let mut _10: isize;
    let _11: &str;
    let mut _12: isize;
    let _13: &str;
    let mut _14: isize;
    let _15: &str;
    let mut _16: isize;
    let _17: &str;
    let mut _18: isize;
    let _19: &str;
    let mut _20: isize;
    let _21: &str;
    let mut _22: std::option::Option<&&str>;
    let mut _23: &std::collections::HashMap<&str, &str>;
    let _24: &str;
    let mut _25: &std::string::String;
    let _26: std::string::String;
    let _27: &str;
    let mut _28: isize;
    let mut _30: std::option::Option<&&str>;
    let mut _31: std::option::Option<&str>;
    let mut _32: {closure@src/icon.rs:84:62: 84:73};
    let mut _33: &&icon::Icons;
    let mut _34: isize;
    let mut _37: std::fmt::Arguments<'_>;
    let mut _38: &[&str];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let _40: &[core::fmt::rt::Argument<'_>; 2];
    let _41: [core::fmt::rt::Argument<'_>; 2];
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &&str;
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: &std::string::String;
    let mut _47: &str;
    let mut _48: &str;
    scope 1 {
        debug file_type => _4;
        let _5: &str;
        scope 2 {
            debug icon => _5;
            let _36: std::string::String;
            let mut _46: &[&str; 2];
            scope 13 {
                debug res => _36;
            }
        }
        scope 3 {
        }
        scope 4 {
        }
        scope 5 {
        }
        scope 6 {
        }
        scope 7 {
        }
        scope 8 {
        }
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
            debug icon => _29;
            let _29: &&str;
        }
        scope 12 {
            debug icon => _35;
            let _35: &&str;
        }
    }

    bb0: {
        _3 = ((*_1).0: bool);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = std::string::String::new() -> [return: bb45, unwind continue];
    }

    bb2: {
        _4 = Name::file_type(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [2: bb4, otherwise: bb5];
    }

    bb4: {
        _5 = ((*_1).3: &str);
        goto -> bb40;
    }

    bb5: {
        _8 = discriminant(_4);
        switchInt(move _8) -> [4: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt(((_4 as SymLink).0: bool)) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _7 = const "\u{f482}";
        goto -> bb39;
    }

    bb8: {
        _10 = discriminant(_4);
        switchInt(move _10) -> [4: bb9, otherwise: bb11];
    }

    bb9: {
        switchInt(((_4 as SymLink).0: bool)) -> [0: bb10, otherwise: bb11];
    }

    bb10: {
        _9 = const "\u{f481}";
        goto -> bb38;
    }

    bb11: {
        _12 = discriminant(_4);
        switchInt(move _12) -> [6: bb12, otherwise: bb13];
    }

    bb12: {
        _11 = const "\u{f6a7}";
        goto -> bb37;
    }

    bb13: {
        _14 = discriminant(_4);
        switchInt(move _14) -> [5: bb14, otherwise: bb15];
    }

    bb14: {
        _13 = const "\u{f731}";
        goto -> bb36;
    }

    bb15: {
        _16 = discriminant(_4);
        switchInt(move _16) -> [1: bb16, otherwise: bb17];
    }

    bb16: {
        _15 = const "\u{e601}";
        goto -> bb35;
    }

    bb17: {
        _18 = discriminant(_4);
        switchInt(move _18) -> [0: bb18, otherwise: bb19];
    }

    bb18: {
        _17 = const "ﰩ";
        goto -> bb34;
    }

    bb19: {
        _20 = discriminant(_4);
        switchInt(move _20) -> [7: bb20, otherwise: bb21];
    }

    bb20: {
        _19 = const "\u{f2dc}";
        goto -> bb33;
    }

    bb21: {
        _23 = &((*_1).1: std::collections::HashMap<&str, &str>);
        _27 = Name::file_name(_2) -> [return: bb22, unwind continue];
    }

    bb22: {
        _26 = str::<impl str>::to_lowercase(_27) -> [return: bb23, unwind continue];
    }

    bb23: {
        _25 = &_26;
        _24 = std::string::String::as_str(move _25) -> [return: bb24, unwind: bb46];
    }

    bb24: {
        _22 = HashMap::<&str, &str>::get::<str>(move _23, _24) -> [return: bb25, unwind: bb46];
    }

    bb25: {
        _28 = discriminant(_22);
        switchInt(move _28) -> [1: bb26, otherwise: bb27];
    }

    bb26: {
        _29 = ((_22 as Some).0: &&str);
        _47 = deref_copy (*_29);
        _21 = _47;
        goto -> bb32;
    }

    bb27: {
        _31 = Name::extension(_2) -> [return: bb28, unwind: bb46];
    }

    bb28: {
        _33 = &_1;
        _32 = {closure@src/icon.rs:84:62: 84:73} { self: move _33 };
        _30 = std::option::Option::<&str>::and_then::<&&str, {closure@src/icon.rs:84:62: 84:73}>(move _31, move _32) -> [return: bb29, unwind: bb46];
    }

    bb29: {
        _34 = discriminant(_30);
        switchInt(move _34) -> [1: bb30, otherwise: bb31];
    }

    bb30: {
        _35 = ((_30 as Some).0: &&str);
        _48 = deref_copy (*_35);
        _21 = _48;
        goto -> bb32;
    }

    bb31: {
        _21 = ((*_1).4: &str);
        goto -> bb32;
    }

    bb32: {
        _19 = _21;
        drop(_26) -> [return: bb33, unwind continue];
    }

    bb33: {
        _17 = _19;
        goto -> bb34;
    }

    bb34: {
        _15 = _17;
        goto -> bb35;
    }

    bb35: {
        _13 = _15;
        goto -> bb36;
    }

    bb36: {
        _11 = _13;
        goto -> bb37;
    }

    bb37: {
        _9 = _11;
        goto -> bb38;
    }

    bb38: {
        _7 = _9;
        goto -> bb39;
    }

    bb39: {
        _5 = _7;
        goto -> bb40;
    }

    bb40: {
        _46 = const _;
        _38 = _46 as &[&str] (PointerCoercion(Unsize));
        _43 = &_5;
        _42 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_43) -> [return: bb41, unwind continue];
    }

    bb41: {
        _45 = &((*_1).5: std::string::String);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_45) -> [return: bb42, unwind continue];
    }

    bb42: {
        _41 = [move _42, move _44];
        _40 = &_41;
        _39 = _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _37 = Arguments::<'_>::new_v1(move _38, move _39) -> [return: bb43, unwind continue];
    }

    bb43: {
        _36 = std::fmt::format(move _37) -> [return: bb44, unwind continue];
    }

    bb44: {
        _0 = move _36;
        goto -> bb45;
    }

    bb45: {
        return;
    }

    bb46 (cleanup): {
        drop(_26) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }
}

promoted[0] in icon::<impl at src/icon.rs:24:1: 24:11>::get: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const ""];
        _0 = &_1;
        return;
    }
}

fn icon::<impl at src/icon.rs:24:1: 24:11>::get::{closure#0}(_1: {closure@src/icon.rs:84:62: 84:73}, _2: &str) -> std::option::Option<&&str> {
    debug extension => _2;
    debug self => (*(_1.0: &&icon::Icons));
    let mut _0: std::option::Option<&&str>;
    let mut _3: &std::collections::HashMap<&str, &str>;
    let _4: &str;
    let mut _5: &std::string::String;
    let _6: std::string::String;
    let mut _7: &&icon::Icons;
    let mut _8: &icon::Icons;

    bb0: {
        _7 = deref_copy (_1.0: &&icon::Icons);
        _8 = deref_copy (*_7);
        _3 = &((*_8).2: std::collections::HashMap<&str, &str>);
        _6 = str::<impl str>::to_lowercase(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = std::string::String::as_str(move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = HashMap::<&str, &str>::get::<str>(move _3, _4) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn icon::<impl at src/icon.rs:24:1: 24:11>::get_default_icons_by_name() -> HashMap<&str, &str> {
    let mut _0: std::collections::HashMap<&str, &str>;
    let mut _1: std::collections::HashMap<&str, &str>;
    let _2: std::option::Option<&str>;
    let mut _3: &mut std::collections::HashMap<&str, &str>;
    let _4: std::option::Option<&str>;
    let mut _5: &mut std::collections::HashMap<&str, &str>;
    let _6: &str;
    let _7: &str;
    let _8: std::option::Option<&str>;
    let mut _9: &mut std::collections::HashMap<&str, &str>;
    let _10: &str;
    let _11: &str;
    let _12: std::option::Option<&str>;
    let mut _13: &mut std::collections::HashMap<&str, &str>;
    let _14: &str;
    let _15: &str;
    let _16: std::option::Option<&str>;
    let mut _17: &mut std::collections::HashMap<&str, &str>;
    let _18: &str;
    let _19: &str;
    let _20: std::option::Option<&str>;
    let mut _21: &mut std::collections::HashMap<&str, &str>;
    let _22: &str;
    let _23: &str;
    let _24: std::option::Option<&str>;
    let mut _25: &mut std::collections::HashMap<&str, &str>;
    let _26: &str;
    let _27: &str;
    let _28: std::option::Option<&str>;
    let mut _29: &mut std::collections::HashMap<&str, &str>;
    let _30: &str;
    let _31: &str;
    let _32: std::option::Option<&str>;
    let mut _33: &mut std::collections::HashMap<&str, &str>;
    let _34: &str;
    let _35: &str;
    let _36: std::option::Option<&str>;
    let mut _37: &mut std::collections::HashMap<&str, &str>;
    let _38: &str;
    let _39: &str;
    let _40: std::option::Option<&str>;
    let mut _41: &mut std::collections::HashMap<&str, &str>;
    let _42: &str;
    let _43: &str;
    let _44: std::option::Option<&str>;
    let mut _45: &mut std::collections::HashMap<&str, &str>;
    let _46: &str;
    let _47: &str;
    let _48: std::option::Option<&str>;
    let mut _49: &mut std::collections::HashMap<&str, &str>;
    let _50: &str;
    let _51: &str;
    let _52: std::option::Option<&str>;
    let mut _53: &mut std::collections::HashMap<&str, &str>;
    let _54: &str;
    let _55: &str;
    let _56: std::option::Option<&str>;
    let mut _57: &mut std::collections::HashMap<&str, &str>;
    let _58: &str;
    let _59: &str;
    let _60: std::option::Option<&str>;
    let mut _61: &mut std::collections::HashMap<&str, &str>;
    let _62: &str;
    let _63: &str;
    let _64: std::option::Option<&str>;
    let mut _65: &mut std::collections::HashMap<&str, &str>;
    let _66: &str;
    let _67: &str;
    let _68: std::option::Option<&str>;
    let mut _69: &mut std::collections::HashMap<&str, &str>;
    let _70: &str;
    let _71: &str;
    let _72: std::option::Option<&str>;
    let mut _73: &mut std::collections::HashMap<&str, &str>;
    let _74: &str;
    let _75: &str;
    let _76: std::option::Option<&str>;
    let mut _77: &mut std::collections::HashMap<&str, &str>;
    let _78: &str;
    let _79: &str;
    let _80: std::option::Option<&str>;
    let mut _81: &mut std::collections::HashMap<&str, &str>;
    let _82: &str;
    let _83: &str;
    let _84: std::option::Option<&str>;
    let mut _85: &mut std::collections::HashMap<&str, &str>;
    let _86: &str;
    let _87: &str;
    let _88: std::option::Option<&str>;
    let mut _89: &mut std::collections::HashMap<&str, &str>;
    let _90: &str;
    let _91: &str;
    let _92: std::option::Option<&str>;
    let mut _93: &mut std::collections::HashMap<&str, &str>;
    let _94: &str;
    let _95: &str;
    let _96: std::option::Option<&str>;
    let mut _97: &mut std::collections::HashMap<&str, &str>;
    let _98: &str;
    let _99: &str;
    let _100: std::option::Option<&str>;
    let mut _101: &mut std::collections::HashMap<&str, &str>;
    let _102: &str;
    let _103: &str;
    let _104: std::option::Option<&str>;
    let mut _105: &mut std::collections::HashMap<&str, &str>;
    let _106: &str;
    let _107: &str;
    let _108: std::option::Option<&str>;
    let mut _109: &mut std::collections::HashMap<&str, &str>;
    let _110: &str;
    let _111: &str;
    let _112: std::option::Option<&str>;
    let mut _113: &mut std::collections::HashMap<&str, &str>;
    let _114: &str;
    let _115: &str;
    let _116: std::option::Option<&str>;
    let mut _117: &mut std::collections::HashMap<&str, &str>;
    let _118: &str;
    let _119: &str;
    let _120: std::option::Option<&str>;
    let mut _121: &mut std::collections::HashMap<&str, &str>;
    let _122: &str;
    let _123: &str;
    let _124: std::option::Option<&str>;
    let mut _125: &mut std::collections::HashMap<&str, &str>;
    let _126: &str;
    let _127: &str;
    let _128: std::option::Option<&str>;
    let mut _129: &mut std::collections::HashMap<&str, &str>;
    let _130: &str;
    let _131: &str;
    let _132: std::option::Option<&str>;
    let mut _133: &mut std::collections::HashMap<&str, &str>;
    let _134: &str;
    let _135: &str;
    scope 1 {
        debug m => _1;
    }

    bb0: {
        _1 = HashMap::<&str, &str>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _1;
        _2 = HashMap::<&str, &str>::insert(move _3, const ".trash", const "\u{f1f8}") -> [return: bb2, unwind: bb36];
    }

    bb2: {
        _5 = &mut _1;
        _6 = const ".atom";
        _7 = const "\u{e764}";
        _4 = HashMap::<&str, &str>::insert(move _5, _6, _7) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        _9 = &mut _1;
        _10 = const ".bashprofile";
        _11 = const "\u{e615}";
        _8 = HashMap::<&str, &str>::insert(move _9, _10, _11) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        _13 = &mut _1;
        _14 = const ".bashrc";
        _15 = const "\u{f489}";
        _12 = HashMap::<&str, &str>::insert(move _13, _14, _15) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        _17 = &mut _1;
        _18 = const ".git";
        _19 = const "\u{f1d3}";
        _16 = HashMap::<&str, &str>::insert(move _17, _18, _19) -> [return: bb6, unwind: bb36];
    }

    bb6: {
        _21 = &mut _1;
        _22 = const ".gitattributes";
        _23 = const "\u{f1d3}";
        _20 = HashMap::<&str, &str>::insert(move _21, _22, _23) -> [return: bb7, unwind: bb36];
    }

    bb7: {
        _25 = &mut _1;
        _26 = const ".gitconfig";
        _27 = const "\u{f1d3}";
        _24 = HashMap::<&str, &str>::insert(move _25, _26, _27) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        _29 = &mut _1;
        _30 = const ".github";
        _31 = const "\u{f408}";
        _28 = HashMap::<&str, &str>::insert(move _29, _30, _31) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        _33 = &mut _1;
        _34 = const ".gitignore";
        _35 = const "\u{f1d3}";
        _32 = HashMap::<&str, &str>::insert(move _33, _34, _35) -> [return: bb10, unwind: bb36];
    }

    bb10: {
        _37 = &mut _1;
        _38 = const ".gitmodules";
        _39 = const "\u{f1d3}";
        _36 = HashMap::<&str, &str>::insert(move _37, _38, _39) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        _41 = &mut _1;
        _42 = const ".rvm";
        _43 = const "\u{e21e}";
        _40 = HashMap::<&str, &str>::insert(move _41, _42, _43) -> [return: bb12, unwind: bb36];
    }

    bb12: {
        _45 = &mut _1;
        _46 = const ".vimrc";
        _47 = const "\u{e62b}";
        _44 = HashMap::<&str, &str>::insert(move _45, _46, _47) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        _49 = &mut _1;
        _50 = const ".vscode";
        _51 = const "\u{e70c}";
        _48 = HashMap::<&str, &str>::insert(move _49, _50, _51) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        _53 = &mut _1;
        _54 = const ".zshrc";
        _55 = const "\u{f489}";
        _52 = HashMap::<&str, &str>::insert(move _53, _54, _55) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        _57 = &mut _1;
        _58 = const "bin";
        _59 = const "\u{e5fc}";
        _56 = HashMap::<&str, &str>::insert(move _57, _58, _59) -> [return: bb16, unwind: bb36];
    }

    bb16: {
        _61 = &mut _1;
        _62 = const "config";
        _63 = const "\u{e5fc}";
        _60 = HashMap::<&str, &str>::insert(move _61, _62, _63) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        _65 = &mut _1;
        _66 = const "docker-compose.yml";
        _67 = const "\u{f308}";
        _64 = HashMap::<&str, &str>::insert(move _65, _66, _67) -> [return: bb18, unwind: bb36];
    }

    bb18: {
        _69 = &mut _1;
        _70 = const "dockerfile";
        _71 = const "\u{f308}";
        _68 = HashMap::<&str, &str>::insert(move _69, _70, _71) -> [return: bb19, unwind: bb36];
    }

    bb19: {
        _73 = &mut _1;
        _74 = const "ds_store";
        _75 = const "\u{f179}";
        _72 = HashMap::<&str, &str>::insert(move _73, _74, _75) -> [return: bb20, unwind: bb36];
    }

    bb20: {
        _77 = &mut _1;
        _78 = const "gitignore_global";
        _79 = const "\u{f1d3}";
        _76 = HashMap::<&str, &str>::insert(move _77, _78, _79) -> [return: bb21, unwind: bb36];
    }

    bb21: {
        _81 = &mut _1;
        _82 = const "gradle";
        _83 = const "\u{e70e}";
        _80 = HashMap::<&str, &str>::insert(move _81, _82, _83) -> [return: bb22, unwind: bb36];
    }

    bb22: {
        _85 = &mut _1;
        _86 = const "gruntfile.coffee";
        _87 = const "\u{e611}";
        _84 = HashMap::<&str, &str>::insert(move _85, _86, _87) -> [return: bb23, unwind: bb36];
    }

    bb23: {
        _89 = &mut _1;
        _90 = const "gruntfile.js";
        _91 = const "\u{e611}";
        _88 = HashMap::<&str, &str>::insert(move _89, _90, _91) -> [return: bb24, unwind: bb36];
    }

    bb24: {
        _93 = &mut _1;
        _94 = const "gruntfile.ls";
        _95 = const "\u{e611}";
        _92 = HashMap::<&str, &str>::insert(move _93, _94, _95) -> [return: bb25, unwind: bb36];
    }

    bb25: {
        _97 = &mut _1;
        _98 = const "gulpfile.coffee";
        _99 = const "\u{e610}";
        _96 = HashMap::<&str, &str>::insert(move _97, _98, _99) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        _101 = &mut _1;
        _102 = const "gulpfile.js";
        _103 = const "\u{e610}";
        _100 = HashMap::<&str, &str>::insert(move _101, _102, _103) -> [return: bb27, unwind: bb36];
    }

    bb27: {
        _105 = &mut _1;
        _106 = const "gulpfile.ls";
        _107 = const "\u{e610}";
        _104 = HashMap::<&str, &str>::insert(move _105, _106, _107) -> [return: bb28, unwind: bb36];
    }

    bb28: {
        _109 = &mut _1;
        _110 = const "hidden";
        _111 = const "\u{f023}";
        _108 = HashMap::<&str, &str>::insert(move _109, _110, _111) -> [return: bb29, unwind: bb36];
    }

    bb29: {
        _113 = &mut _1;
        _114 = const "include";
        _115 = const "\u{e5fc}";
        _112 = HashMap::<&str, &str>::insert(move _113, _114, _115) -> [return: bb30, unwind: bb36];
    }

    bb30: {
        _117 = &mut _1;
        _118 = const "lib";
        _119 = const "\u{f121}";
        _116 = HashMap::<&str, &str>::insert(move _117, _118, _119) -> [return: bb31, unwind: bb36];
    }

    bb31: {
        _121 = &mut _1;
        _122 = const "localized";
        _123 = const "\u{f179}";
        _120 = HashMap::<&str, &str>::insert(move _121, _122, _123) -> [return: bb32, unwind: bb36];
    }

    bb32: {
        _125 = &mut _1;
        _126 = const "node_modules";
        _127 = const "\u{e718}";
        _124 = HashMap::<&str, &str>::insert(move _125, _126, _127) -> [return: bb33, unwind: bb36];
    }

    bb33: {
        _129 = &mut _1;
        _130 = const "npmignore";
        _131 = const "\u{e71e}";
        _128 = HashMap::<&str, &str>::insert(move _129, _130, _131) -> [return: bb34, unwind: bb36];
    }

    bb34: {
        _133 = &mut _1;
        _134 = const "rubydoc";
        _135 = const "\u{e73b}";
        _132 = HashMap::<&str, &str>::insert(move _133, _134, _135) -> [return: bb35, unwind: bb36];
    }

    bb35: {
        _0 = move _1;
        return;
    }

    bb36 (cleanup): {
        drop(_1) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }
}

fn icon::<impl at src/icon.rs:24:1: 24:11>::get_default_icons_by_extension() -> HashMap<&str, &str> {
    let mut _0: std::collections::HashMap<&str, &str>;
    let mut _1: std::collections::HashMap<&str, &str>;
    let _2: std::option::Option<&str>;
    let mut _3: &mut std::collections::HashMap<&str, &str>;
    let _4: std::option::Option<&str>;
    let mut _5: &mut std::collections::HashMap<&str, &str>;
    let _6: &str;
    let _7: &str;
    let _8: std::option::Option<&str>;
    let mut _9: &mut std::collections::HashMap<&str, &str>;
    let _10: &str;
    let _11: &str;
    let _12: std::option::Option<&str>;
    let mut _13: &mut std::collections::HashMap<&str, &str>;
    let _14: &str;
    let _15: &str;
    let _16: std::option::Option<&str>;
    let mut _17: &mut std::collections::HashMap<&str, &str>;
    let _18: &str;
    let _19: &str;
    let _20: std::option::Option<&str>;
    let mut _21: &mut std::collections::HashMap<&str, &str>;
    let _22: &str;
    let _23: &str;
    let _24: std::option::Option<&str>;
    let mut _25: &mut std::collections::HashMap<&str, &str>;
    let _26: &str;
    let _27: &str;
    let _28: std::option::Option<&str>;
    let mut _29: &mut std::collections::HashMap<&str, &str>;
    let _30: &str;
    let _31: &str;
    let _32: std::option::Option<&str>;
    let mut _33: &mut std::collections::HashMap<&str, &str>;
    let _34: &str;
    let _35: &str;
    let _36: std::option::Option<&str>;
    let mut _37: &mut std::collections::HashMap<&str, &str>;
    let _38: &str;
    let _39: &str;
    let _40: std::option::Option<&str>;
    let mut _41: &mut std::collections::HashMap<&str, &str>;
    let _42: &str;
    let _43: &str;
    let _44: std::option::Option<&str>;
    let mut _45: &mut std::collections::HashMap<&str, &str>;
    let _46: &str;
    let _47: &str;
    let _48: std::option::Option<&str>;
    let mut _49: &mut std::collections::HashMap<&str, &str>;
    let _50: &str;
    let _51: &str;
    let _52: std::option::Option<&str>;
    let mut _53: &mut std::collections::HashMap<&str, &str>;
    let _54: &str;
    let _55: &str;
    let _56: std::option::Option<&str>;
    let mut _57: &mut std::collections::HashMap<&str, &str>;
    let _58: &str;
    let _59: &str;
    let _60: std::option::Option<&str>;
    let mut _61: &mut std::collections::HashMap<&str, &str>;
    let _62: &str;
    let _63: &str;
    let _64: std::option::Option<&str>;
    let mut _65: &mut std::collections::HashMap<&str, &str>;
    let _66: &str;
    let _67: &str;
    let _68: std::option::Option<&str>;
    let mut _69: &mut std::collections::HashMap<&str, &str>;
    let _70: &str;
    let _71: &str;
    let _72: std::option::Option<&str>;
    let mut _73: &mut std::collections::HashMap<&str, &str>;
    let _74: &str;
    let _75: &str;
    let _76: std::option::Option<&str>;
    let mut _77: &mut std::collections::HashMap<&str, &str>;
    let _78: &str;
    let _79: &str;
    let _80: std::option::Option<&str>;
    let mut _81: &mut std::collections::HashMap<&str, &str>;
    let _82: &str;
    let _83: &str;
    let _84: std::option::Option<&str>;
    let mut _85: &mut std::collections::HashMap<&str, &str>;
    let _86: &str;
    let _87: &str;
    let _88: std::option::Option<&str>;
    let mut _89: &mut std::collections::HashMap<&str, &str>;
    let _90: &str;
    let _91: &str;
    let _92: std::option::Option<&str>;
    let mut _93: &mut std::collections::HashMap<&str, &str>;
    let _94: &str;
    let _95: &str;
    let _96: std::option::Option<&str>;
    let mut _97: &mut std::collections::HashMap<&str, &str>;
    let _98: &str;
    let _99: &str;
    let _100: std::option::Option<&str>;
    let mut _101: &mut std::collections::HashMap<&str, &str>;
    let _102: &str;
    let _103: &str;
    let _104: std::option::Option<&str>;
    let mut _105: &mut std::collections::HashMap<&str, &str>;
    let _106: &str;
    let _107: &str;
    let _108: std::option::Option<&str>;
    let mut _109: &mut std::collections::HashMap<&str, &str>;
    let _110: &str;
    let _111: &str;
    let _112: std::option::Option<&str>;
    let mut _113: &mut std::collections::HashMap<&str, &str>;
    let _114: &str;
    let _115: &str;
    let _116: std::option::Option<&str>;
    let mut _117: &mut std::collections::HashMap<&str, &str>;
    let _118: &str;
    let _119: &str;
    let _120: std::option::Option<&str>;
    let mut _121: &mut std::collections::HashMap<&str, &str>;
    let _122: &str;
    let _123: &str;
    let _124: std::option::Option<&str>;
    let mut _125: &mut std::collections::HashMap<&str, &str>;
    let _126: &str;
    let _127: &str;
    let _128: std::option::Option<&str>;
    let mut _129: &mut std::collections::HashMap<&str, &str>;
    let _130: &str;
    let _131: &str;
    let _132: std::option::Option<&str>;
    let mut _133: &mut std::collections::HashMap<&str, &str>;
    let _134: &str;
    let _135: &str;
    let _136: std::option::Option<&str>;
    let mut _137: &mut std::collections::HashMap<&str, &str>;
    let _138: &str;
    let _139: &str;
    let _140: std::option::Option<&str>;
    let mut _141: &mut std::collections::HashMap<&str, &str>;
    let _142: &str;
    let _143: &str;
    let _144: std::option::Option<&str>;
    let mut _145: &mut std::collections::HashMap<&str, &str>;
    let _146: &str;
    let _147: &str;
    let _148: std::option::Option<&str>;
    let mut _149: &mut std::collections::HashMap<&str, &str>;
    let _150: &str;
    let _151: &str;
    let _152: std::option::Option<&str>;
    let mut _153: &mut std::collections::HashMap<&str, &str>;
    let _154: &str;
    let _155: &str;
    let _156: std::option::Option<&str>;
    let mut _157: &mut std::collections::HashMap<&str, &str>;
    let _158: &str;
    let _159: &str;
    let _160: std::option::Option<&str>;
    let mut _161: &mut std::collections::HashMap<&str, &str>;
    let _162: &str;
    let _163: &str;
    let _164: std::option::Option<&str>;
    let mut _165: &mut std::collections::HashMap<&str, &str>;
    let _166: &str;
    let _167: &str;
    let _168: std::option::Option<&str>;
    let mut _169: &mut std::collections::HashMap<&str, &str>;
    let _170: &str;
    let _171: &str;
    let _172: std::option::Option<&str>;
    let mut _173: &mut std::collections::HashMap<&str, &str>;
    let _174: &str;
    let _175: &str;
    let _176: std::option::Option<&str>;
    let mut _177: &mut std::collections::HashMap<&str, &str>;
    let _178: &str;
    let _179: &str;
    let _180: std::option::Option<&str>;
    let mut _181: &mut std::collections::HashMap<&str, &str>;
    let _182: &str;
    let _183: &str;
    let _184: std::option::Option<&str>;
    let mut _185: &mut std::collections::HashMap<&str, &str>;
    let _186: &str;
    let _187: &str;
    let _188: std::option::Option<&str>;
    let mut _189: &mut std::collections::HashMap<&str, &str>;
    let _190: &str;
    let _191: &str;
    let _192: std::option::Option<&str>;
    let mut _193: &mut std::collections::HashMap<&str, &str>;
    let _194: &str;
    let _195: &str;
    let _196: std::option::Option<&str>;
    let mut _197: &mut std::collections::HashMap<&str, &str>;
    let _198: &str;
    let _199: &str;
    let _200: std::option::Option<&str>;
    let mut _201: &mut std::collections::HashMap<&str, &str>;
    let _202: &str;
    let _203: &str;
    let _204: std::option::Option<&str>;
    let mut _205: &mut std::collections::HashMap<&str, &str>;
    let _206: &str;
    let _207: &str;
    let _208: std::option::Option<&str>;
    let mut _209: &mut std::collections::HashMap<&str, &str>;
    let _210: &str;
    let _211: &str;
    let _212: std::option::Option<&str>;
    let mut _213: &mut std::collections::HashMap<&str, &str>;
    let _214: &str;
    let _215: &str;
    let _216: std::option::Option<&str>;
    let mut _217: &mut std::collections::HashMap<&str, &str>;
    let _218: &str;
    let _219: &str;
    let _220: std::option::Option<&str>;
    let mut _221: &mut std::collections::HashMap<&str, &str>;
    let _222: &str;
    let _223: &str;
    let _224: std::option::Option<&str>;
    let mut _225: &mut std::collections::HashMap<&str, &str>;
    let _226: &str;
    let _227: &str;
    let _228: std::option::Option<&str>;
    let mut _229: &mut std::collections::HashMap<&str, &str>;
    let _230: &str;
    let _231: &str;
    let _232: std::option::Option<&str>;
    let mut _233: &mut std::collections::HashMap<&str, &str>;
    let _234: &str;
    let _235: &str;
    let _236: std::option::Option<&str>;
    let mut _237: &mut std::collections::HashMap<&str, &str>;
    let _238: &str;
    let _239: &str;
    let _240: std::option::Option<&str>;
    let mut _241: &mut std::collections::HashMap<&str, &str>;
    let _242: &str;
    let _243: &str;
    let _244: std::option::Option<&str>;
    let mut _245: &mut std::collections::HashMap<&str, &str>;
    let _246: &str;
    let _247: &str;
    let _248: std::option::Option<&str>;
    let mut _249: &mut std::collections::HashMap<&str, &str>;
    let _250: &str;
    let _251: &str;
    let _252: std::option::Option<&str>;
    let mut _253: &mut std::collections::HashMap<&str, &str>;
    let _254: &str;
    let _255: &str;
    let _256: std::option::Option<&str>;
    let mut _257: &mut std::collections::HashMap<&str, &str>;
    let _258: &str;
    let _259: &str;
    let _260: std::option::Option<&str>;
    let mut _261: &mut std::collections::HashMap<&str, &str>;
    let _262: &str;
    let _263: &str;
    let _264: std::option::Option<&str>;
    let mut _265: &mut std::collections::HashMap<&str, &str>;
    let _266: &str;
    let _267: &str;
    let _268: std::option::Option<&str>;
    let mut _269: &mut std::collections::HashMap<&str, &str>;
    let _270: &str;
    let _271: &str;
    let _272: std::option::Option<&str>;
    let mut _273: &mut std::collections::HashMap<&str, &str>;
    let _274: &str;
    let _275: &str;
    let _276: std::option::Option<&str>;
    let mut _277: &mut std::collections::HashMap<&str, &str>;
    let _278: &str;
    let _279: &str;
    let _280: std::option::Option<&str>;
    let mut _281: &mut std::collections::HashMap<&str, &str>;
    let _282: &str;
    let _283: &str;
    let _284: std::option::Option<&str>;
    let mut _285: &mut std::collections::HashMap<&str, &str>;
    let _286: &str;
    let _287: &str;
    let _288: std::option::Option<&str>;
    let mut _289: &mut std::collections::HashMap<&str, &str>;
    let _290: &str;
    let _291: &str;
    let _292: std::option::Option<&str>;
    let mut _293: &mut std::collections::HashMap<&str, &str>;
    let _294: &str;
    let _295: &str;
    let _296: std::option::Option<&str>;
    let mut _297: &mut std::collections::HashMap<&str, &str>;
    let _298: &str;
    let _299: &str;
    let _300: std::option::Option<&str>;
    let mut _301: &mut std::collections::HashMap<&str, &str>;
    let _302: &str;
    let _303: &str;
    let _304: std::option::Option<&str>;
    let mut _305: &mut std::collections::HashMap<&str, &str>;
    let _306: &str;
    let _307: &str;
    let _308: std::option::Option<&str>;
    let mut _309: &mut std::collections::HashMap<&str, &str>;
    let _310: &str;
    let _311: &str;
    let _312: std::option::Option<&str>;
    let mut _313: &mut std::collections::HashMap<&str, &str>;
    let _314: &str;
    let _315: &str;
    let _316: std::option::Option<&str>;
    let mut _317: &mut std::collections::HashMap<&str, &str>;
    let _318: &str;
    let _319: &str;
    let _320: std::option::Option<&str>;
    let mut _321: &mut std::collections::HashMap<&str, &str>;
    let _322: &str;
    let _323: &str;
    let _324: std::option::Option<&str>;
    let mut _325: &mut std::collections::HashMap<&str, &str>;
    let _326: &str;
    let _327: &str;
    let _328: std::option::Option<&str>;
    let mut _329: &mut std::collections::HashMap<&str, &str>;
    let _330: &str;
    let _331: &str;
    let _332: std::option::Option<&str>;
    let mut _333: &mut std::collections::HashMap<&str, &str>;
    let _334: &str;
    let _335: &str;
    let _336: std::option::Option<&str>;
    let mut _337: &mut std::collections::HashMap<&str, &str>;
    let _338: &str;
    let _339: &str;
    let _340: std::option::Option<&str>;
    let mut _341: &mut std::collections::HashMap<&str, &str>;
    let _342: &str;
    let _343: &str;
    let _344: std::option::Option<&str>;
    let mut _345: &mut std::collections::HashMap<&str, &str>;
    let _346: &str;
    let _347: &str;
    let _348: std::option::Option<&str>;
    let mut _349: &mut std::collections::HashMap<&str, &str>;
    let _350: &str;
    let _351: &str;
    let _352: std::option::Option<&str>;
    let mut _353: &mut std::collections::HashMap<&str, &str>;
    let _354: &str;
    let _355: &str;
    let _356: std::option::Option<&str>;
    let mut _357: &mut std::collections::HashMap<&str, &str>;
    let _358: &str;
    let _359: &str;
    let _360: std::option::Option<&str>;
    let mut _361: &mut std::collections::HashMap<&str, &str>;
    let _362: &str;
    let _363: &str;
    let _364: std::option::Option<&str>;
    let mut _365: &mut std::collections::HashMap<&str, &str>;
    let _366: &str;
    let _367: &str;
    let _368: std::option::Option<&str>;
    let mut _369: &mut std::collections::HashMap<&str, &str>;
    let _370: &str;
    let _371: &str;
    let _372: std::option::Option<&str>;
    let mut _373: &mut std::collections::HashMap<&str, &str>;
    let _374: &str;
    let _375: &str;
    let _376: std::option::Option<&str>;
    let mut _377: &mut std::collections::HashMap<&str, &str>;
    let _378: &str;
    let _379: &str;
    let _380: std::option::Option<&str>;
    let mut _381: &mut std::collections::HashMap<&str, &str>;
    let _382: &str;
    let _383: &str;
    let _384: std::option::Option<&str>;
    let mut _385: &mut std::collections::HashMap<&str, &str>;
    let _386: &str;
    let _387: &str;
    let _388: std::option::Option<&str>;
    let mut _389: &mut std::collections::HashMap<&str, &str>;
    let _390: &str;
    let _391: &str;
    let _392: std::option::Option<&str>;
    let mut _393: &mut std::collections::HashMap<&str, &str>;
    let _394: &str;
    let _395: &str;
    let _396: std::option::Option<&str>;
    let mut _397: &mut std::collections::HashMap<&str, &str>;
    let _398: &str;
    let _399: &str;
    let _400: std::option::Option<&str>;
    let mut _401: &mut std::collections::HashMap<&str, &str>;
    let _402: &str;
    let _403: &str;
    let _404: std::option::Option<&str>;
    let mut _405: &mut std::collections::HashMap<&str, &str>;
    let _406: &str;
    let _407: &str;
    let _408: std::option::Option<&str>;
    let mut _409: &mut std::collections::HashMap<&str, &str>;
    let _410: &str;
    let _411: &str;
    let _412: std::option::Option<&str>;
    let mut _413: &mut std::collections::HashMap<&str, &str>;
    let _414: &str;
    let _415: &str;
    let _416: std::option::Option<&str>;
    let mut _417: &mut std::collections::HashMap<&str, &str>;
    let _418: &str;
    let _419: &str;
    let _420: std::option::Option<&str>;
    let mut _421: &mut std::collections::HashMap<&str, &str>;
    let _422: &str;
    let _423: &str;
    let _424: std::option::Option<&str>;
    let mut _425: &mut std::collections::HashMap<&str, &str>;
    let _426: &str;
    let _427: &str;
    let _428: std::option::Option<&str>;
    let mut _429: &mut std::collections::HashMap<&str, &str>;
    let _430: &str;
    let _431: &str;
    let _432: std::option::Option<&str>;
    let mut _433: &mut std::collections::HashMap<&str, &str>;
    let _434: &str;
    let _435: &str;
    let _436: std::option::Option<&str>;
    let mut _437: &mut std::collections::HashMap<&str, &str>;
    let _438: &str;
    let _439: &str;
    let _440: std::option::Option<&str>;
    let mut _441: &mut std::collections::HashMap<&str, &str>;
    let _442: &str;
    let _443: &str;
    let _444: std::option::Option<&str>;
    let mut _445: &mut std::collections::HashMap<&str, &str>;
    let _446: &str;
    let _447: &str;
    let _448: std::option::Option<&str>;
    let mut _449: &mut std::collections::HashMap<&str, &str>;
    let _450: &str;
    let _451: &str;
    let _452: std::option::Option<&str>;
    let mut _453: &mut std::collections::HashMap<&str, &str>;
    let _454: &str;
    let _455: &str;
    let _456: std::option::Option<&str>;
    let mut _457: &mut std::collections::HashMap<&str, &str>;
    let _458: &str;
    let _459: &str;
    let _460: std::option::Option<&str>;
    let mut _461: &mut std::collections::HashMap<&str, &str>;
    let _462: &str;
    let _463: &str;
    let _464: std::option::Option<&str>;
    let mut _465: &mut std::collections::HashMap<&str, &str>;
    let _466: &str;
    let _467: &str;
    let _468: std::option::Option<&str>;
    let mut _469: &mut std::collections::HashMap<&str, &str>;
    let _470: &str;
    let _471: &str;
    let _472: std::option::Option<&str>;
    let mut _473: &mut std::collections::HashMap<&str, &str>;
    let _474: &str;
    let _475: &str;
    let _476: std::option::Option<&str>;
    let mut _477: &mut std::collections::HashMap<&str, &str>;
    let _478: &str;
    let _479: &str;
    let _480: std::option::Option<&str>;
    let mut _481: &mut std::collections::HashMap<&str, &str>;
    let _482: &str;
    let _483: &str;
    let _484: std::option::Option<&str>;
    let mut _485: &mut std::collections::HashMap<&str, &str>;
    let _486: &str;
    let _487: &str;
    let _488: std::option::Option<&str>;
    let mut _489: &mut std::collections::HashMap<&str, &str>;
    let _490: &str;
    let _491: &str;
    let _492: std::option::Option<&str>;
    let mut _493: &mut std::collections::HashMap<&str, &str>;
    let _494: &str;
    let _495: &str;
    let _496: std::option::Option<&str>;
    let mut _497: &mut std::collections::HashMap<&str, &str>;
    let _498: &str;
    let _499: &str;
    let _500: std::option::Option<&str>;
    let mut _501: &mut std::collections::HashMap<&str, &str>;
    let _502: &str;
    let _503: &str;
    let _504: std::option::Option<&str>;
    let mut _505: &mut std::collections::HashMap<&str, &str>;
    let _506: &str;
    let _507: &str;
    let _508: std::option::Option<&str>;
    let mut _509: &mut std::collections::HashMap<&str, &str>;
    let _510: &str;
    let _511: &str;
    let _512: std::option::Option<&str>;
    let mut _513: &mut std::collections::HashMap<&str, &str>;
    let _514: &str;
    let _515: &str;
    let _516: std::option::Option<&str>;
    let mut _517: &mut std::collections::HashMap<&str, &str>;
    let _518: &str;
    let _519: &str;
    let _520: std::option::Option<&str>;
    let mut _521: &mut std::collections::HashMap<&str, &str>;
    let _522: &str;
    let _523: &str;
    let _524: std::option::Option<&str>;
    let mut _525: &mut std::collections::HashMap<&str, &str>;
    let _526: &str;
    let _527: &str;
    let _528: std::option::Option<&str>;
    let mut _529: &mut std::collections::HashMap<&str, &str>;
    let _530: &str;
    let _531: &str;
    let _532: std::option::Option<&str>;
    let mut _533: &mut std::collections::HashMap<&str, &str>;
    let _534: &str;
    let _535: &str;
    let _536: std::option::Option<&str>;
    let mut _537: &mut std::collections::HashMap<&str, &str>;
    let _538: &str;
    let _539: &str;
    let _540: std::option::Option<&str>;
    let mut _541: &mut std::collections::HashMap<&str, &str>;
    let _542: &str;
    let _543: &str;
    let _544: std::option::Option<&str>;
    let mut _545: &mut std::collections::HashMap<&str, &str>;
    let _546: &str;
    let _547: &str;
    let _548: std::option::Option<&str>;
    let mut _549: &mut std::collections::HashMap<&str, &str>;
    let _550: &str;
    let _551: &str;
    let _552: std::option::Option<&str>;
    let mut _553: &mut std::collections::HashMap<&str, &str>;
    let _554: &str;
    let _555: &str;
    let _556: std::option::Option<&str>;
    let mut _557: &mut std::collections::HashMap<&str, &str>;
    let _558: &str;
    let _559: &str;
    let _560: std::option::Option<&str>;
    let mut _561: &mut std::collections::HashMap<&str, &str>;
    let _562: &str;
    let _563: &str;
    let _564: std::option::Option<&str>;
    let mut _565: &mut std::collections::HashMap<&str, &str>;
    let _566: &str;
    let _567: &str;
    let _568: std::option::Option<&str>;
    let mut _569: &mut std::collections::HashMap<&str, &str>;
    let _570: &str;
    let _571: &str;
    let _572: std::option::Option<&str>;
    let mut _573: &mut std::collections::HashMap<&str, &str>;
    let _574: &str;
    let _575: &str;
    let _576: std::option::Option<&str>;
    let mut _577: &mut std::collections::HashMap<&str, &str>;
    let _578: &str;
    let _579: &str;
    let _580: std::option::Option<&str>;
    let mut _581: &mut std::collections::HashMap<&str, &str>;
    let _582: &str;
    let _583: &str;
    let _584: std::option::Option<&str>;
    let mut _585: &mut std::collections::HashMap<&str, &str>;
    let _586: &str;
    let _587: &str;
    let _588: std::option::Option<&str>;
    let mut _589: &mut std::collections::HashMap<&str, &str>;
    let _590: &str;
    let _591: &str;
    let _592: std::option::Option<&str>;
    let mut _593: &mut std::collections::HashMap<&str, &str>;
    let _594: &str;
    let _595: &str;
    let _596: std::option::Option<&str>;
    let mut _597: &mut std::collections::HashMap<&str, &str>;
    let _598: &str;
    let _599: &str;
    let _600: std::option::Option<&str>;
    let mut _601: &mut std::collections::HashMap<&str, &str>;
    let _602: &str;
    let _603: &str;
    let _604: std::option::Option<&str>;
    let mut _605: &mut std::collections::HashMap<&str, &str>;
    let _606: &str;
    let _607: &str;
    let _608: std::option::Option<&str>;
    let mut _609: &mut std::collections::HashMap<&str, &str>;
    let _610: &str;
    let _611: &str;
    let _612: std::option::Option<&str>;
    let mut _613: &mut std::collections::HashMap<&str, &str>;
    let _614: &str;
    let _615: &str;
    let _616: std::option::Option<&str>;
    let mut _617: &mut std::collections::HashMap<&str, &str>;
    let _618: &str;
    let _619: &str;
    let _620: std::option::Option<&str>;
    let mut _621: &mut std::collections::HashMap<&str, &str>;
    let _622: &str;
    let _623: &str;
    let _624: std::option::Option<&str>;
    let mut _625: &mut std::collections::HashMap<&str, &str>;
    let _626: &str;
    let _627: &str;
    let _628: std::option::Option<&str>;
    let mut _629: &mut std::collections::HashMap<&str, &str>;
    let _630: &str;
    let _631: &str;
    let _632: std::option::Option<&str>;
    let mut _633: &mut std::collections::HashMap<&str, &str>;
    let _634: &str;
    let _635: &str;
    let _636: std::option::Option<&str>;
    let mut _637: &mut std::collections::HashMap<&str, &str>;
    let _638: &str;
    let _639: &str;
    let _640: std::option::Option<&str>;
    let mut _641: &mut std::collections::HashMap<&str, &str>;
    let _642: &str;
    let _643: &str;
    let _644: std::option::Option<&str>;
    let mut _645: &mut std::collections::HashMap<&str, &str>;
    let _646: &str;
    let _647: &str;
    let _648: std::option::Option<&str>;
    let mut _649: &mut std::collections::HashMap<&str, &str>;
    let _650: &str;
    let _651: &str;
    let _652: std::option::Option<&str>;
    let mut _653: &mut std::collections::HashMap<&str, &str>;
    let _654: &str;
    let _655: &str;
    let _656: std::option::Option<&str>;
    let mut _657: &mut std::collections::HashMap<&str, &str>;
    let _658: &str;
    let _659: &str;
    let _660: std::option::Option<&str>;
    let mut _661: &mut std::collections::HashMap<&str, &str>;
    let _662: &str;
    let _663: &str;
    let _664: std::option::Option<&str>;
    let mut _665: &mut std::collections::HashMap<&str, &str>;
    let _666: &str;
    let _667: &str;
    let _668: std::option::Option<&str>;
    let mut _669: &mut std::collections::HashMap<&str, &str>;
    let _670: &str;
    let _671: &str;
    let _672: std::option::Option<&str>;
    let mut _673: &mut std::collections::HashMap<&str, &str>;
    let _674: &str;
    let _675: &str;
    let _676: std::option::Option<&str>;
    let mut _677: &mut std::collections::HashMap<&str, &str>;
    let _678: &str;
    let _679: &str;
    let _680: std::option::Option<&str>;
    let mut _681: &mut std::collections::HashMap<&str, &str>;
    let _682: &str;
    let _683: &str;
    let _684: std::option::Option<&str>;
    let mut _685: &mut std::collections::HashMap<&str, &str>;
    let _686: &str;
    let _687: &str;
    let _688: std::option::Option<&str>;
    let mut _689: &mut std::collections::HashMap<&str, &str>;
    let _690: &str;
    let _691: &str;
    let _692: std::option::Option<&str>;
    let mut _693: &mut std::collections::HashMap<&str, &str>;
    let _694: &str;
    let _695: &str;
    let _696: std::option::Option<&str>;
    let mut _697: &mut std::collections::HashMap<&str, &str>;
    let _698: &str;
    let _699: &str;
    let _700: std::option::Option<&str>;
    let mut _701: &mut std::collections::HashMap<&str, &str>;
    let _702: &str;
    let _703: &str;
    let _704: std::option::Option<&str>;
    let mut _705: &mut std::collections::HashMap<&str, &str>;
    let _706: &str;
    let _707: &str;
    let _708: std::option::Option<&str>;
    let mut _709: &mut std::collections::HashMap<&str, &str>;
    let _710: &str;
    let _711: &str;
    let _712: std::option::Option<&str>;
    let mut _713: &mut std::collections::HashMap<&str, &str>;
    let _714: &str;
    let _715: &str;
    let _716: std::option::Option<&str>;
    let mut _717: &mut std::collections::HashMap<&str, &str>;
    let _718: &str;
    let _719: &str;
    let _720: std::option::Option<&str>;
    let mut _721: &mut std::collections::HashMap<&str, &str>;
    let _722: &str;
    let _723: &str;
    let _724: std::option::Option<&str>;
    let mut _725: &mut std::collections::HashMap<&str, &str>;
    let _726: &str;
    let _727: &str;
    let _728: std::option::Option<&str>;
    let mut _729: &mut std::collections::HashMap<&str, &str>;
    let _730: &str;
    let _731: &str;
    let _732: std::option::Option<&str>;
    let mut _733: &mut std::collections::HashMap<&str, &str>;
    let _734: &str;
    let _735: &str;
    let _736: std::option::Option<&str>;
    let mut _737: &mut std::collections::HashMap<&str, &str>;
    let _738: &str;
    let _739: &str;
    let _740: std::option::Option<&str>;
    let mut _741: &mut std::collections::HashMap<&str, &str>;
    let _742: &str;
    let _743: &str;
    let _744: std::option::Option<&str>;
    let mut _745: &mut std::collections::HashMap<&str, &str>;
    let _746: &str;
    let _747: &str;
    let _748: std::option::Option<&str>;
    let mut _749: &mut std::collections::HashMap<&str, &str>;
    let _750: &str;
    let _751: &str;
    let _752: std::option::Option<&str>;
    let mut _753: &mut std::collections::HashMap<&str, &str>;
    let _754: &str;
    let _755: &str;
    let _756: std::option::Option<&str>;
    let mut _757: &mut std::collections::HashMap<&str, &str>;
    let _758: &str;
    let _759: &str;
    let _760: std::option::Option<&str>;
    let mut _761: &mut std::collections::HashMap<&str, &str>;
    let _762: &str;
    let _763: &str;
    let _764: std::option::Option<&str>;
    let mut _765: &mut std::collections::HashMap<&str, &str>;
    let _766: &str;
    let _767: &str;
    let _768: std::option::Option<&str>;
    let mut _769: &mut std::collections::HashMap<&str, &str>;
    let _770: &str;
    let _771: &str;
    let _772: std::option::Option<&str>;
    let mut _773: &mut std::collections::HashMap<&str, &str>;
    let _774: &str;
    let _775: &str;
    let _776: std::option::Option<&str>;
    let mut _777: &mut std::collections::HashMap<&str, &str>;
    let _778: &str;
    let _779: &str;
    scope 1 {
        debug m => _1;
    }

    bb0: {
        _1 = HashMap::<&str, &str>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _1;
        _2 = HashMap::<&str, &str>::insert(move _3, const "7z", const "\u{f410}") -> [return: bb2, unwind: bb197];
    }

    bb2: {
        _5 = &mut _1;
        _6 = const "apk";
        _7 = const "\u{e70e}";
        _4 = HashMap::<&str, &str>::insert(move _5, _6, _7) -> [return: bb3, unwind: bb197];
    }

    bb3: {
        _9 = &mut _1;
        _10 = const "avi";
        _11 = const "\u{f03d}";
        _8 = HashMap::<&str, &str>::insert(move _9, _10, _11) -> [return: bb4, unwind: bb197];
    }

    bb4: {
        _13 = &mut _1;
        _14 = const "avro";
        _15 = const "\u{e60b}";
        _12 = HashMap::<&str, &str>::insert(move _13, _14, _15) -> [return: bb5, unwind: bb197];
    }

    bb5: {
        _17 = &mut _1;
        _18 = const "awk";
        _19 = const "\u{f489}";
        _16 = HashMap::<&str, &str>::insert(move _17, _18, _19) -> [return: bb6, unwind: bb197];
    }

    bb6: {
        _21 = &mut _1;
        _22 = const "bash";
        _23 = const "\u{f489}";
        _20 = HashMap::<&str, &str>::insert(move _21, _22, _23) -> [return: bb7, unwind: bb197];
    }

    bb7: {
        _25 = &mut _1;
        _26 = const "bash_history";
        _27 = const "\u{f489}";
        _24 = HashMap::<&str, &str>::insert(move _25, _26, _27) -> [return: bb8, unwind: bb197];
    }

    bb8: {
        _29 = &mut _1;
        _30 = const "bash_profile";
        _31 = const "\u{f489}";
        _28 = HashMap::<&str, &str>::insert(move _29, _30, _31) -> [return: bb9, unwind: bb197];
    }

    bb9: {
        _33 = &mut _1;
        _34 = const "bashrc";
        _35 = const "\u{f489}";
        _32 = HashMap::<&str, &str>::insert(move _33, _34, _35) -> [return: bb10, unwind: bb197];
    }

    bb10: {
        _37 = &mut _1;
        _38 = const "bat";
        _39 = const "\u{f17a}";
        _36 = HashMap::<&str, &str>::insert(move _37, _38, _39) -> [return: bb11, unwind: bb197];
    }

    bb11: {
        _41 = &mut _1;
        _42 = const "bio";
        _43 = const "蘿";
        _40 = HashMap::<&str, &str>::insert(move _41, _42, _43) -> [return: bb12, unwind: bb197];
    }

    bb12: {
        _45 = &mut _1;
        _46 = const "bmp";
        _47 = const "\u{f1c5}";
        _44 = HashMap::<&str, &str>::insert(move _45, _46, _47) -> [return: bb13, unwind: bb197];
    }

    bb13: {
        _49 = &mut _1;
        _50 = const "bz2";
        _51 = const "\u{f410}";
        _48 = HashMap::<&str, &str>::insert(move _49, _50, _51) -> [return: bb14, unwind: bb197];
    }

    bb14: {
        _53 = &mut _1;
        _54 = const "c";
        _55 = const "\u{e61e}";
        _52 = HashMap::<&str, &str>::insert(move _53, _54, _55) -> [return: bb15, unwind: bb197];
    }

    bb15: {
        _57 = &mut _1;
        _58 = const "c++";
        _59 = const "\u{e61d}";
        _56 = HashMap::<&str, &str>::insert(move _57, _58, _59) -> [return: bb16, unwind: bb197];
    }

    bb16: {
        _61 = &mut _1;
        _62 = const "cc";
        _63 = const "\u{e61d}";
        _60 = HashMap::<&str, &str>::insert(move _61, _62, _63) -> [return: bb17, unwind: bb197];
    }

    bb17: {
        _65 = &mut _1;
        _66 = const "cfg";
        _67 = const "\u{e615}";
        _64 = HashMap::<&str, &str>::insert(move _65, _66, _67) -> [return: bb18, unwind: bb197];
    }

    bb18: {
        _69 = &mut _1;
        _70 = const "clj";
        _71 = const "\u{e768}";
        _68 = HashMap::<&str, &str>::insert(move _69, _70, _71) -> [return: bb19, unwind: bb197];
    }

    bb19: {
        _73 = &mut _1;
        _74 = const "cljs";
        _75 = const "\u{e76a}";
        _72 = HashMap::<&str, &str>::insert(move _73, _74, _75) -> [return: bb20, unwind: bb197];
    }

    bb20: {
        _77 = &mut _1;
        _78 = const "cls";
        _79 = const "\u{e600}";
        _76 = HashMap::<&str, &str>::insert(move _77, _78, _79) -> [return: bb21, unwind: bb197];
    }

    bb21: {
        _81 = &mut _1;
        _82 = const "coffee";
        _83 = const "\u{f0f4}";
        _80 = HashMap::<&str, &str>::insert(move _81, _82, _83) -> [return: bb22, unwind: bb197];
    }

    bb22: {
        _85 = &mut _1;
        _86 = const "conf";
        _87 = const "\u{e615}";
        _84 = HashMap::<&str, &str>::insert(move _85, _86, _87) -> [return: bb23, unwind: bb197];
    }

    bb23: {
        _89 = &mut _1;
        _90 = const "cp";
        _91 = const "\u{e61d}";
        _88 = HashMap::<&str, &str>::insert(move _89, _90, _91) -> [return: bb24, unwind: bb197];
    }

    bb24: {
        _93 = &mut _1;
        _94 = const "cpp";
        _95 = const "\u{e61d}";
        _92 = HashMap::<&str, &str>::insert(move _93, _94, _95) -> [return: bb25, unwind: bb197];
    }

    bb25: {
        _97 = &mut _1;
        _98 = const "cs";
        _99 = const "\u{f81a}";
        _96 = HashMap::<&str, &str>::insert(move _97, _98, _99) -> [return: bb26, unwind: bb197];
    }

    bb26: {
        _101 = &mut _1;
        _102 = const "cshtml";
        _103 = const "\u{f1fa}";
        _100 = HashMap::<&str, &str>::insert(move _101, _102, _103) -> [return: bb27, unwind: bb197];
    }

    bb27: {
        _105 = &mut _1;
        _106 = const "csproj";
        _107 = const "\u{f81a}";
        _104 = HashMap::<&str, &str>::insert(move _105, _106, _107) -> [return: bb28, unwind: bb197];
    }

    bb28: {
        _109 = &mut _1;
        _110 = const "csx";
        _111 = const "\u{f81a}";
        _108 = HashMap::<&str, &str>::insert(move _109, _110, _111) -> [return: bb29, unwind: bb197];
    }

    bb29: {
        _113 = &mut _1;
        _114 = const "csh";
        _115 = const "\u{f489}";
        _112 = HashMap::<&str, &str>::insert(move _113, _114, _115) -> [return: bb30, unwind: bb197];
    }

    bb30: {
        _117 = &mut _1;
        _118 = const "css";
        _119 = const "\u{e749}";
        _116 = HashMap::<&str, &str>::insert(move _117, _118, _119) -> [return: bb31, unwind: bb197];
    }

    bb31: {
        _121 = &mut _1;
        _122 = const "csv";
        _123 = const "\u{f1c3}";
        _120 = HashMap::<&str, &str>::insert(move _121, _122, _123) -> [return: bb32, unwind: bb197];
    }

    bb32: {
        _125 = &mut _1;
        _126 = const "cxx";
        _127 = const "\u{e61d}";
        _124 = HashMap::<&str, &str>::insert(move _125, _126, _127) -> [return: bb33, unwind: bb197];
    }

    bb33: {
        _129 = &mut _1;
        _130 = const "d";
        _131 = const "\u{e7af}";
        _128 = HashMap::<&str, &str>::insert(move _129, _130, _131) -> [return: bb34, unwind: bb197];
    }

    bb34: {
        _133 = &mut _1;
        _134 = const "dart";
        _135 = const "\u{e798}";
        _132 = HashMap::<&str, &str>::insert(move _133, _134, _135) -> [return: bb35, unwind: bb197];
    }

    bb35: {
        _137 = &mut _1;
        _138 = const "db";
        _139 = const "\u{f1c0}";
        _136 = HashMap::<&str, &str>::insert(move _137, _138, _139) -> [return: bb36, unwind: bb197];
    }

    bb36: {
        _141 = &mut _1;
        _142 = const "diff";
        _143 = const "\u{f440}";
        _140 = HashMap::<&str, &str>::insert(move _141, _142, _143) -> [return: bb37, unwind: bb197];
    }

    bb37: {
        _145 = &mut _1;
        _146 = const "doc";
        _147 = const "\u{f1c2}";
        _144 = HashMap::<&str, &str>::insert(move _145, _146, _147) -> [return: bb38, unwind: bb197];
    }

    bb38: {
        _149 = &mut _1;
        _150 = const "docx";
        _151 = const "\u{f1c2}";
        _148 = HashMap::<&str, &str>::insert(move _149, _150, _151) -> [return: bb39, unwind: bb197];
    }

    bb39: {
        _153 = &mut _1;
        _154 = const "ds_store";
        _155 = const "\u{f179}";
        _152 = HashMap::<&str, &str>::insert(move _153, _154, _155) -> [return: bb40, unwind: bb197];
    }

    bb40: {
        _157 = &mut _1;
        _158 = const "dump";
        _159 = const "\u{f1c0}";
        _156 = HashMap::<&str, &str>::insert(move _157, _158, _159) -> [return: bb41, unwind: bb197];
    }

    bb41: {
        _161 = &mut _1;
        _162 = const "ebook";
        _163 = const "\u{e28b}";
        _160 = HashMap::<&str, &str>::insert(move _161, _162, _163) -> [return: bb42, unwind: bb197];
    }

    bb42: {
        _165 = &mut _1;
        _166 = const "editorconfig";
        _167 = const "\u{e615}";
        _164 = HashMap::<&str, &str>::insert(move _165, _166, _167) -> [return: bb43, unwind: bb197];
    }

    bb43: {
        _169 = &mut _1;
        _170 = const "ejs";
        _171 = const "\u{e618}";
        _168 = HashMap::<&str, &str>::insert(move _169, _170, _171) -> [return: bb44, unwind: bb197];
    }

    bb44: {
        _173 = &mut _1;
        _174 = const "elm";
        _175 = const "\u{e62c}";
        _172 = HashMap::<&str, &str>::insert(move _173, _174, _175) -> [return: bb45, unwind: bb197];
    }

    bb45: {
        _177 = &mut _1;
        _178 = const "env";
        _179 = const "\u{f462}";
        _176 = HashMap::<&str, &str>::insert(move _177, _178, _179) -> [return: bb46, unwind: bb197];
    }

    bb46: {
        _181 = &mut _1;
        _182 = const "eot";
        _183 = const "\u{f031}";
        _180 = HashMap::<&str, &str>::insert(move _181, _182, _183) -> [return: bb47, unwind: bb197];
    }

    bb47: {
        _185 = &mut _1;
        _186 = const "epub";
        _187 = const "\u{e28a}";
        _184 = HashMap::<&str, &str>::insert(move _185, _186, _187) -> [return: bb48, unwind: bb197];
    }

    bb48: {
        _189 = &mut _1;
        _190 = const "erb";
        _191 = const "\u{e73b}";
        _188 = HashMap::<&str, &str>::insert(move _189, _190, _191) -> [return: bb49, unwind: bb197];
    }

    bb49: {
        _193 = &mut _1;
        _194 = const "erl";
        _195 = const "\u{e7b1}";
        _192 = HashMap::<&str, &str>::insert(move _193, _194, _195) -> [return: bb50, unwind: bb197];
    }

    bb50: {
        _197 = &mut _1;
        _198 = const "exe";
        _199 = const "\u{f17a}";
        _196 = HashMap::<&str, &str>::insert(move _197, _198, _199) -> [return: bb51, unwind: bb197];
    }

    bb51: {
        _201 = &mut _1;
        _202 = const "ex";
        _203 = const "\u{e62d}";
        _200 = HashMap::<&str, &str>::insert(move _201, _202, _203) -> [return: bb52, unwind: bb197];
    }

    bb52: {
        _205 = &mut _1;
        _206 = const "exs";
        _207 = const "\u{e62d}";
        _204 = HashMap::<&str, &str>::insert(move _205, _206, _207) -> [return: bb53, unwind: bb197];
    }

    bb53: {
        _209 = &mut _1;
        _210 = const "fish";
        _211 = const "\u{f489}";
        _208 = HashMap::<&str, &str>::insert(move _209, _210, _211) -> [return: bb54, unwind: bb197];
    }

    bb54: {
        _213 = &mut _1;
        _214 = const "flac";
        _215 = const "\u{f001}";
        _212 = HashMap::<&str, &str>::insert(move _213, _214, _215) -> [return: bb55, unwind: bb197];
    }

    bb55: {
        _217 = &mut _1;
        _218 = const "flv";
        _219 = const "\u{f03d}";
        _216 = HashMap::<&str, &str>::insert(move _217, _218, _219) -> [return: bb56, unwind: bb197];
    }

    bb56: {
        _221 = &mut _1;
        _222 = const "font";
        _223 = const "\u{f031}";
        _220 = HashMap::<&str, &str>::insert(move _221, _222, _223) -> [return: bb57, unwind: bb197];
    }

    bb57: {
        _225 = &mut _1;
        _226 = const "fpl";
        _227 = const "蘿";
        _224 = HashMap::<&str, &str>::insert(move _225, _226, _227) -> [return: bb58, unwind: bb197];
    }

    bb58: {
        _229 = &mut _1;
        _230 = const "gdoc";
        _231 = const "\u{f1c2}";
        _228 = HashMap::<&str, &str>::insert(move _229, _230, _231) -> [return: bb59, unwind: bb197];
    }

    bb59: {
        _233 = &mut _1;
        _234 = const "gemfile";
        _235 = const "\u{e21e}";
        _232 = HashMap::<&str, &str>::insert(move _233, _234, _235) -> [return: bb60, unwind: bb197];
    }

    bb60: {
        _237 = &mut _1;
        _238 = const "gemspec";
        _239 = const "\u{e21e}";
        _236 = HashMap::<&str, &str>::insert(move _237, _238, _239) -> [return: bb61, unwind: bb197];
    }

    bb61: {
        _241 = &mut _1;
        _242 = const "gform";
        _243 = const "\u{f298}";
        _240 = HashMap::<&str, &str>::insert(move _241, _242, _243) -> [return: bb62, unwind: bb197];
    }

    bb62: {
        _245 = &mut _1;
        _246 = const "gif";
        _247 = const "\u{f1c5}";
        _244 = HashMap::<&str, &str>::insert(move _245, _246, _247) -> [return: bb63, unwind: bb197];
    }

    bb63: {
        _249 = &mut _1;
        _250 = const "git";
        _251 = const "\u{f1d3}";
        _248 = HashMap::<&str, &str>::insert(move _249, _250, _251) -> [return: bb64, unwind: bb197];
    }

    bb64: {
        _253 = &mut _1;
        _254 = const "go";
        _255 = const "\u{e626}";
        _252 = HashMap::<&str, &str>::insert(move _253, _254, _255) -> [return: bb65, unwind: bb197];
    }

    bb65: {
        _257 = &mut _1;
        _258 = const "gradle";
        _259 = const "\u{e70e}";
        _256 = HashMap::<&str, &str>::insert(move _257, _258, _259) -> [return: bb66, unwind: bb197];
    }

    bb66: {
        _261 = &mut _1;
        _262 = const "gsheet";
        _263 = const "\u{f1c3}";
        _260 = HashMap::<&str, &str>::insert(move _261, _262, _263) -> [return: bb67, unwind: bb197];
    }

    bb67: {
        _265 = &mut _1;
        _266 = const "gslides";
        _267 = const "\u{f1c4}";
        _264 = HashMap::<&str, &str>::insert(move _265, _266, _267) -> [return: bb68, unwind: bb197];
    }

    bb68: {
        _269 = &mut _1;
        _270 = const "guardfile";
        _271 = const "\u{e21e}";
        _268 = HashMap::<&str, &str>::insert(move _269, _270, _271) -> [return: bb69, unwind: bb197];
    }

    bb69: {
        _273 = &mut _1;
        _274 = const "gz";
        _275 = const "\u{f410}";
        _272 = HashMap::<&str, &str>::insert(move _273, _274, _275) -> [return: bb70, unwind: bb197];
    }

    bb70: {
        _277 = &mut _1;
        _278 = const "h";
        _279 = const "\u{f0fd}";
        _276 = HashMap::<&str, &str>::insert(move _277, _278, _279) -> [return: bb71, unwind: bb197];
    }

    bb71: {
        _281 = &mut _1;
        _282 = const "hbs";
        _283 = const "\u{e60f}";
        _280 = HashMap::<&str, &str>::insert(move _281, _282, _283) -> [return: bb72, unwind: bb197];
    }

    bb72: {
        _285 = &mut _1;
        _286 = const "hpp";
        _287 = const "\u{f0fd}";
        _284 = HashMap::<&str, &str>::insert(move _285, _286, _287) -> [return: bb73, unwind: bb197];
    }

    bb73: {
        _289 = &mut _1;
        _290 = const "hs";
        _291 = const "\u{e777}";
        _288 = HashMap::<&str, &str>::insert(move _289, _290, _291) -> [return: bb74, unwind: bb197];
    }

    bb74: {
        _293 = &mut _1;
        _294 = const "htm";
        _295 = const "\u{f13b}";
        _292 = HashMap::<&str, &str>::insert(move _293, _294, _295) -> [return: bb75, unwind: bb197];
    }

    bb75: {
        _297 = &mut _1;
        _298 = const "html";
        _299 = const "\u{f13b}";
        _296 = HashMap::<&str, &str>::insert(move _297, _298, _299) -> [return: bb76, unwind: bb197];
    }

    bb76: {
        _301 = &mut _1;
        _302 = const "hxx";
        _303 = const "\u{f0fd}";
        _300 = HashMap::<&str, &str>::insert(move _301, _302, _303) -> [return: bb77, unwind: bb197];
    }

    bb77: {
        _305 = &mut _1;
        _306 = const "ico";
        _307 = const "\u{f1c5}";
        _304 = HashMap::<&str, &str>::insert(move _305, _306, _307) -> [return: bb78, unwind: bb197];
    }

    bb78: {
        _309 = &mut _1;
        _310 = const "image";
        _311 = const "\u{f1c5}";
        _308 = HashMap::<&str, &str>::insert(move _309, _310, _311) -> [return: bb79, unwind: bb197];
    }

    bb79: {
        _313 = &mut _1;
        _314 = const "iml";
        _315 = const "\u{e7b5}";
        _312 = HashMap::<&str, &str>::insert(move _313, _314, _315) -> [return: bb80, unwind: bb197];
    }

    bb80: {
        _317 = &mut _1;
        _318 = const "ini";
        _319 = const "\u{e615}";
        _316 = HashMap::<&str, &str>::insert(move _317, _318, _319) -> [return: bb81, unwind: bb197];
    }

    bb81: {
        _321 = &mut _1;
        _322 = const "ipynb";
        _323 = const "\u{e606}";
        _320 = HashMap::<&str, &str>::insert(move _321, _322, _323) -> [return: bb82, unwind: bb197];
    }

    bb82: {
        _325 = &mut _1;
        _326 = const "jar";
        _327 = const "\u{e204}";
        _324 = HashMap::<&str, &str>::insert(move _325, _326, _327) -> [return: bb83, unwind: bb197];
    }

    bb83: {
        _329 = &mut _1;
        _330 = const "java";
        _331 = const "\u{e204}";
        _328 = HashMap::<&str, &str>::insert(move _329, _330, _331) -> [return: bb84, unwind: bb197];
    }

    bb84: {
        _333 = &mut _1;
        _334 = const "jpeg";
        _335 = const "\u{f1c5}";
        _332 = HashMap::<&str, &str>::insert(move _333, _334, _335) -> [return: bb85, unwind: bb197];
    }

    bb85: {
        _337 = &mut _1;
        _338 = const "jpg";
        _339 = const "\u{f1c5}";
        _336 = HashMap::<&str, &str>::insert(move _337, _338, _339) -> [return: bb86, unwind: bb197];
    }

    bb86: {
        _341 = &mut _1;
        _342 = const "js";
        _343 = const "\u{e74e}";
        _340 = HashMap::<&str, &str>::insert(move _341, _342, _343) -> [return: bb87, unwind: bb197];
    }

    bb87: {
        _345 = &mut _1;
        _346 = const "json";
        _347 = const "\u{e60b}";
        _344 = HashMap::<&str, &str>::insert(move _345, _346, _347) -> [return: bb88, unwind: bb197];
    }

    bb88: {
        _349 = &mut _1;
        _350 = const "jsx";
        _351 = const "\u{e7ba}";
        _348 = HashMap::<&str, &str>::insert(move _349, _350, _351) -> [return: bb89, unwind: bb197];
    }

    bb89: {
        _353 = &mut _1;
        _354 = const "jl";
        _355 = const "\u{e624}";
        _352 = HashMap::<&str, &str>::insert(move _353, _354, _355) -> [return: bb90, unwind: bb197];
    }

    bb90: {
        _357 = &mut _1;
        _358 = const "ksh";
        _359 = const "\u{f489}";
        _356 = HashMap::<&str, &str>::insert(move _357, _358, _359) -> [return: bb91, unwind: bb197];
    }

    bb91: {
        _361 = &mut _1;
        _362 = const "less";
        _363 = const "\u{e758}";
        _360 = HashMap::<&str, &str>::insert(move _361, _362, _363) -> [return: bb92, unwind: bb197];
    }

    bb92: {
        _365 = &mut _1;
        _366 = const "lhs";
        _367 = const "\u{e777}";
        _364 = HashMap::<&str, &str>::insert(move _365, _366, _367) -> [return: bb93, unwind: bb197];
    }

    bb93: {
        _369 = &mut _1;
        _370 = const "license";
        _371 = const "\u{f48a}";
        _368 = HashMap::<&str, &str>::insert(move _369, _370, _371) -> [return: bb94, unwind: bb197];
    }

    bb94: {
        _373 = &mut _1;
        _374 = const "localized";
        _375 = const "\u{f179}";
        _372 = HashMap::<&str, &str>::insert(move _373, _374, _375) -> [return: bb95, unwind: bb197];
    }

    bb95: {
        _377 = &mut _1;
        _378 = const "lock";
        _379 = const "\u{f023}";
        _376 = HashMap::<&str, &str>::insert(move _377, _378, _379) -> [return: bb96, unwind: bb197];
    }

    bb96: {
        _381 = &mut _1;
        _382 = const "log";
        _383 = const "\u{f18d}";
        _380 = HashMap::<&str, &str>::insert(move _381, _382, _383) -> [return: bb97, unwind: bb197];
    }

    bb97: {
        _385 = &mut _1;
        _386 = const "lua";
        _387 = const "\u{e620}";
        _384 = HashMap::<&str, &str>::insert(move _385, _386, _387) -> [return: bb98, unwind: bb197];
    }

    bb98: {
        _389 = &mut _1;
        _390 = const "lz";
        _391 = const "\u{f410}";
        _388 = HashMap::<&str, &str>::insert(move _389, _390, _391) -> [return: bb99, unwind: bb197];
    }

    bb99: {
        _393 = &mut _1;
        _394 = const "m3u";
        _395 = const "蘿";
        _392 = HashMap::<&str, &str>::insert(move _393, _394, _395) -> [return: bb100, unwind: bb197];
    }

    bb100: {
        _397 = &mut _1;
        _398 = const "m3u8";
        _399 = const "蘿";
        _396 = HashMap::<&str, &str>::insert(move _397, _398, _399) -> [return: bb101, unwind: bb197];
    }

    bb101: {
        _401 = &mut _1;
        _402 = const "m4a";
        _403 = const "\u{f001}";
        _400 = HashMap::<&str, &str>::insert(move _401, _402, _403) -> [return: bb102, unwind: bb197];
    }

    bb102: {
        _405 = &mut _1;
        _406 = const "markdown";
        _407 = const "\u{f48a}";
        _404 = HashMap::<&str, &str>::insert(move _405, _406, _407) -> [return: bb103, unwind: bb197];
    }

    bb103: {
        _409 = &mut _1;
        _410 = const "md";
        _411 = const "\u{f48a}";
        _408 = HashMap::<&str, &str>::insert(move _409, _410, _411) -> [return: bb104, unwind: bb197];
    }

    bb104: {
        _413 = &mut _1;
        _414 = const "mkd";
        _415 = const "\u{f48a}";
        _412 = HashMap::<&str, &str>::insert(move _413, _414, _415) -> [return: bb105, unwind: bb197];
    }

    bb105: {
        _417 = &mut _1;
        _418 = const "mkv";
        _419 = const "\u{f03d}";
        _416 = HashMap::<&str, &str>::insert(move _417, _418, _419) -> [return: bb106, unwind: bb197];
    }

    bb106: {
        _421 = &mut _1;
        _422 = const "mobi";
        _423 = const "\u{e28b}";
        _420 = HashMap::<&str, &str>::insert(move _421, _422, _423) -> [return: bb107, unwind: bb197];
    }

    bb107: {
        _425 = &mut _1;
        _426 = const "mov";
        _427 = const "\u{f03d}";
        _424 = HashMap::<&str, &str>::insert(move _425, _426, _427) -> [return: bb108, unwind: bb197];
    }

    bb108: {
        _429 = &mut _1;
        _430 = const "mp3";
        _431 = const "\u{f001}";
        _428 = HashMap::<&str, &str>::insert(move _429, _430, _431) -> [return: bb109, unwind: bb197];
    }

    bb109: {
        _433 = &mut _1;
        _434 = const "mp4";
        _435 = const "\u{f03d}";
        _432 = HashMap::<&str, &str>::insert(move _433, _434, _435) -> [return: bb110, unwind: bb197];
    }

    bb110: {
        _437 = &mut _1;
        _438 = const "mustache";
        _439 = const "\u{e60f}";
        _436 = HashMap::<&str, &str>::insert(move _437, _438, _439) -> [return: bb111, unwind: bb197];
    }

    bb111: {
        _441 = &mut _1;
        _442 = const "nix";
        _443 = const "\u{f313}";
        _440 = HashMap::<&str, &str>::insert(move _441, _442, _443) -> [return: bb112, unwind: bb197];
    }

    bb112: {
        _445 = &mut _1;
        _446 = const "npmignore";
        _447 = const "\u{e71e}";
        _444 = HashMap::<&str, &str>::insert(move _445, _446, _447) -> [return: bb113, unwind: bb197];
    }

    bb113: {
        _449 = &mut _1;
        _450 = const "opus";
        _451 = const "\u{f001}";
        _448 = HashMap::<&str, &str>::insert(move _449, _450, _451) -> [return: bb114, unwind: bb197];
    }

    bb114: {
        _453 = &mut _1;
        _454 = const "ogg";
        _455 = const "\u{f001}";
        _452 = HashMap::<&str, &str>::insert(move _453, _454, _455) -> [return: bb115, unwind: bb197];
    }

    bb115: {
        _457 = &mut _1;
        _458 = const "ogv";
        _459 = const "\u{f03d}";
        _456 = HashMap::<&str, &str>::insert(move _457, _458, _459) -> [return: bb116, unwind: bb197];
    }

    bb116: {
        _461 = &mut _1;
        _462 = const "otf";
        _463 = const "\u{f031}";
        _460 = HashMap::<&str, &str>::insert(move _461, _462, _463) -> [return: bb117, unwind: bb197];
    }

    bb117: {
        _465 = &mut _1;
        _466 = const "pdf";
        _467 = const "\u{f1c1}";
        _464 = HashMap::<&str, &str>::insert(move _465, _466, _467) -> [return: bb118, unwind: bb197];
    }

    bb118: {
        _469 = &mut _1;
        _470 = const "php";
        _471 = const "\u{e73d}";
        _468 = HashMap::<&str, &str>::insert(move _469, _470, _471) -> [return: bb119, unwind: bb197];
    }

    bb119: {
        _473 = &mut _1;
        _474 = const "pl";
        _475 = const "\u{e769}";
        _472 = HashMap::<&str, &str>::insert(move _473, _474, _475) -> [return: bb120, unwind: bb197];
    }

    bb120: {
        _477 = &mut _1;
        _478 = const "pls";
        _479 = const "蘿";
        _476 = HashMap::<&str, &str>::insert(move _477, _478, _479) -> [return: bb121, unwind: bb197];
    }

    bb121: {
        _481 = &mut _1;
        _482 = const "png";
        _483 = const "\u{f1c5}";
        _480 = HashMap::<&str, &str>::insert(move _481, _482, _483) -> [return: bb122, unwind: bb197];
    }

    bb122: {
        _485 = &mut _1;
        _486 = const "ppt";
        _487 = const "\u{f1c4}";
        _484 = HashMap::<&str, &str>::insert(move _485, _486, _487) -> [return: bb123, unwind: bb197];
    }

    bb123: {
        _489 = &mut _1;
        _490 = const "pptx";
        _491 = const "\u{f1c4}";
        _488 = HashMap::<&str, &str>::insert(move _489, _490, _491) -> [return: bb124, unwind: bb197];
    }

    bb124: {
        _493 = &mut _1;
        _494 = const "procfile";
        _495 = const "\u{e21e}";
        _492 = HashMap::<&str, &str>::insert(move _493, _494, _495) -> [return: bb125, unwind: bb197];
    }

    bb125: {
        _497 = &mut _1;
        _498 = const "properties";
        _499 = const "\u{e60b}";
        _496 = HashMap::<&str, &str>::insert(move _497, _498, _499) -> [return: bb126, unwind: bb197];
    }

    bb126: {
        _501 = &mut _1;
        _502 = const "ps1";
        _503 = const "\u{f489}";
        _500 = HashMap::<&str, &str>::insert(move _501, _502, _503) -> [return: bb127, unwind: bb197];
    }

    bb127: {
        _505 = &mut _1;
        _506 = const "psd";
        _507 = const "\u{e7b8}";
        _504 = HashMap::<&str, &str>::insert(move _505, _506, _507) -> [return: bb128, unwind: bb197];
    }

    bb128: {
        _509 = &mut _1;
        _510 = const "pxm";
        _511 = const "\u{f1c5}";
        _508 = HashMap::<&str, &str>::insert(move _509, _510, _511) -> [return: bb129, unwind: bb197];
    }

    bb129: {
        _513 = &mut _1;
        _514 = const "py";
        _515 = const "\u{e606}";
        _512 = HashMap::<&str, &str>::insert(move _513, _514, _515) -> [return: bb130, unwind: bb197];
    }

    bb130: {
        _517 = &mut _1;
        _518 = const "pyc";
        _519 = const "\u{e606}";
        _516 = HashMap::<&str, &str>::insert(move _517, _518, _519) -> [return: bb131, unwind: bb197];
    }

    bb131: {
        _521 = &mut _1;
        _522 = const "r";
        _523 = const "\u{f25d}";
        _520 = HashMap::<&str, &str>::insert(move _521, _522, _523) -> [return: bb132, unwind: bb197];
    }

    bb132: {
        _525 = &mut _1;
        _526 = const "rakefile";
        _527 = const "\u{e21e}";
        _524 = HashMap::<&str, &str>::insert(move _525, _526, _527) -> [return: bb133, unwind: bb197];
    }

    bb133: {
        _529 = &mut _1;
        _530 = const "rar";
        _531 = const "\u{f410}";
        _528 = HashMap::<&str, &str>::insert(move _529, _530, _531) -> [return: bb134, unwind: bb197];
    }

    bb134: {
        _533 = &mut _1;
        _534 = const "razor";
        _535 = const "\u{f1fa}";
        _532 = HashMap::<&str, &str>::insert(move _533, _534, _535) -> [return: bb135, unwind: bb197];
    }

    bb135: {
        _537 = &mut _1;
        _538 = const "rb";
        _539 = const "\u{e21e}";
        _536 = HashMap::<&str, &str>::insert(move _537, _538, _539) -> [return: bb136, unwind: bb197];
    }

    bb136: {
        _541 = &mut _1;
        _542 = const "rdata";
        _543 = const "\u{f25d}";
        _540 = HashMap::<&str, &str>::insert(move _541, _542, _543) -> [return: bb137, unwind: bb197];
    }

    bb137: {
        _545 = &mut _1;
        _546 = const "rdb";
        _547 = const "\u{e76d}";
        _544 = HashMap::<&str, &str>::insert(move _545, _546, _547) -> [return: bb138, unwind: bb197];
    }

    bb138: {
        _549 = &mut _1;
        _550 = const "rdoc";
        _551 = const "\u{f48a}";
        _548 = HashMap::<&str, &str>::insert(move _549, _550, _551) -> [return: bb139, unwind: bb197];
    }

    bb139: {
        _553 = &mut _1;
        _554 = const "rds";
        _555 = const "\u{f25d}";
        _552 = HashMap::<&str, &str>::insert(move _553, _554, _555) -> [return: bb140, unwind: bb197];
    }

    bb140: {
        _557 = &mut _1;
        _558 = const "readme";
        _559 = const "\u{f48a}";
        _556 = HashMap::<&str, &str>::insert(move _557, _558, _559) -> [return: bb141, unwind: bb197];
    }

    bb141: {
        _561 = &mut _1;
        _562 = const "rlib";
        _563 = const "\u{e7a8}";
        _560 = HashMap::<&str, &str>::insert(move _561, _562, _563) -> [return: bb142, unwind: bb197];
    }

    bb142: {
        _565 = &mut _1;
        _566 = const "rmd";
        _567 = const "\u{f48a}";
        _564 = HashMap::<&str, &str>::insert(move _565, _566, _567) -> [return: bb143, unwind: bb197];
    }

    bb143: {
        _569 = &mut _1;
        _570 = const "rs";
        _571 = const "\u{e7a8}";
        _568 = HashMap::<&str, &str>::insert(move _569, _570, _571) -> [return: bb144, unwind: bb197];
    }

    bb144: {
        _573 = &mut _1;
        _574 = const "rspec";
        _575 = const "\u{e21e}";
        _572 = HashMap::<&str, &str>::insert(move _573, _574, _575) -> [return: bb145, unwind: bb197];
    }

    bb145: {
        _577 = &mut _1;
        _578 = const "rspec_parallel";
        _579 = const "\u{e21e}";
        _576 = HashMap::<&str, &str>::insert(move _577, _578, _579) -> [return: bb146, unwind: bb197];
    }

    bb146: {
        _581 = &mut _1;
        _582 = const "rspec_status";
        _583 = const "\u{e21e}";
        _580 = HashMap::<&str, &str>::insert(move _581, _582, _583) -> [return: bb147, unwind: bb197];
    }

    bb147: {
        _585 = &mut _1;
        _586 = const "rss";
        _587 = const "\u{f09e}";
        _584 = HashMap::<&str, &str>::insert(move _585, _586, _587) -> [return: bb148, unwind: bb197];
    }

    bb148: {
        _589 = &mut _1;
        _590 = const "ru";
        _591 = const "\u{e21e}";
        _588 = HashMap::<&str, &str>::insert(move _589, _590, _591) -> [return: bb149, unwind: bb197];
    }

    bb149: {
        _593 = &mut _1;
        _594 = const "rubydoc";
        _595 = const "\u{e73b}";
        _592 = HashMap::<&str, &str>::insert(move _593, _594, _595) -> [return: bb150, unwind: bb197];
    }

    bb150: {
        _597 = &mut _1;
        _598 = const "sass";
        _599 = const "\u{e603}";
        _596 = HashMap::<&str, &str>::insert(move _597, _598, _599) -> [return: bb151, unwind: bb197];
    }

    bb151: {
        _601 = &mut _1;
        _602 = const "scala";
        _603 = const "\u{e737}";
        _600 = HashMap::<&str, &str>::insert(move _601, _602, _603) -> [return: bb152, unwind: bb197];
    }

    bb152: {
        _605 = &mut _1;
        _606 = const "scss";
        _607 = const "\u{e749}";
        _604 = HashMap::<&str, &str>::insert(move _605, _606, _607) -> [return: bb153, unwind: bb197];
    }

    bb153: {
        _609 = &mut _1;
        _610 = const "sh";
        _611 = const "\u{f489}";
        _608 = HashMap::<&str, &str>::insert(move _609, _610, _611) -> [return: bb154, unwind: bb197];
    }

    bb154: {
        _613 = &mut _1;
        _614 = const "shell";
        _615 = const "\u{f489}";
        _612 = HashMap::<&str, &str>::insert(move _613, _614, _615) -> [return: bb155, unwind: bb197];
    }

    bb155: {
        _617 = &mut _1;
        _618 = const "slim";
        _619 = const "\u{e73b}";
        _616 = HashMap::<&str, &str>::insert(move _617, _618, _619) -> [return: bb156, unwind: bb197];
    }

    bb156: {
        _621 = &mut _1;
        _622 = const "sln";
        _623 = const "\u{e70c}";
        _620 = HashMap::<&str, &str>::insert(move _621, _622, _623) -> [return: bb157, unwind: bb197];
    }

    bb157: {
        _625 = &mut _1;
        _626 = const "sql";
        _627 = const "\u{f1c0}";
        _624 = HashMap::<&str, &str>::insert(move _625, _626, _627) -> [return: bb158, unwind: bb197];
    }

    bb158: {
        _629 = &mut _1;
        _630 = const "sqlite3";
        _631 = const "\u{e7c4}";
        _628 = HashMap::<&str, &str>::insert(move _629, _630, _631) -> [return: bb159, unwind: bb197];
    }

    bb159: {
        _633 = &mut _1;
        _634 = const "styl";
        _635 = const "\u{e600}";
        _632 = HashMap::<&str, &str>::insert(move _633, _634, _635) -> [return: bb160, unwind: bb197];
    }

    bb160: {
        _637 = &mut _1;
        _638 = const "stylus";
        _639 = const "\u{e600}";
        _636 = HashMap::<&str, &str>::insert(move _637, _638, _639) -> [return: bb161, unwind: bb197];
    }

    bb161: {
        _641 = &mut _1;
        _642 = const "svg";
        _643 = const "\u{f1c5}";
        _640 = HashMap::<&str, &str>::insert(move _641, _642, _643) -> [return: bb162, unwind: bb197];
    }

    bb162: {
        _645 = &mut _1;
        _646 = const "swift";
        _647 = const "\u{e755}";
        _644 = HashMap::<&str, &str>::insert(move _645, _646, _647) -> [return: bb163, unwind: bb197];
    }

    bb163: {
        _649 = &mut _1;
        _650 = const "tar";
        _651 = const "\u{f410}";
        _648 = HashMap::<&str, &str>::insert(move _649, _650, _651) -> [return: bb164, unwind: bb197];
    }

    bb164: {
        _653 = &mut _1;
        _654 = const "tex";
        _655 = const "\u{e600}";
        _652 = HashMap::<&str, &str>::insert(move _653, _654, _655) -> [return: bb165, unwind: bb197];
    }

    bb165: {
        _657 = &mut _1;
        _658 = const "tiff";
        _659 = const "\u{f1c5}";
        _656 = HashMap::<&str, &str>::insert(move _657, _658, _659) -> [return: bb166, unwind: bb197];
    }

    bb166: {
        _661 = &mut _1;
        _662 = const "ts";
        _663 = const "\u{e628}";
        _660 = HashMap::<&str, &str>::insert(move _661, _662, _663) -> [return: bb167, unwind: bb197];
    }

    bb167: {
        _665 = &mut _1;
        _666 = const "tsx";
        _667 = const "\u{e7ba}";
        _664 = HashMap::<&str, &str>::insert(move _665, _666, _667) -> [return: bb168, unwind: bb197];
    }

    bb168: {
        _669 = &mut _1;
        _670 = const "ttc";
        _671 = const "\u{f031}";
        _668 = HashMap::<&str, &str>::insert(move _669, _670, _671) -> [return: bb169, unwind: bb197];
    }

    bb169: {
        _673 = &mut _1;
        _674 = const "ttf";
        _675 = const "\u{f031}";
        _672 = HashMap::<&str, &str>::insert(move _673, _674, _675) -> [return: bb170, unwind: bb197];
    }

    bb170: {
        _677 = &mut _1;
        _678 = const "twig";
        _679 = const "\u{e61c}";
        _676 = HashMap::<&str, &str>::insert(move _677, _678, _679) -> [return: bb171, unwind: bb197];
    }

    bb171: {
        _681 = &mut _1;
        _682 = const "txt";
        _683 = const "\u{f15c}";
        _680 = HashMap::<&str, &str>::insert(move _681, _682, _683) -> [return: bb172, unwind: bb197];
    }

    bb172: {
        _685 = &mut _1;
        _686 = const "video";
        _687 = const "\u{f03d}";
        _684 = HashMap::<&str, &str>::insert(move _685, _686, _687) -> [return: bb173, unwind: bb197];
    }

    bb173: {
        _689 = &mut _1;
        _690 = const "vim";
        _691 = const "\u{e62b}";
        _688 = HashMap::<&str, &str>::insert(move _689, _690, _691) -> [return: bb174, unwind: bb197];
    }

    bb174: {
        _693 = &mut _1;
        _694 = const "vlc";
        _695 = const "蘿";
        _692 = HashMap::<&str, &str>::insert(move _693, _694, _695) -> [return: bb175, unwind: bb197];
    }

    bb175: {
        _697 = &mut _1;
        _698 = const "vue";
        _699 = const "﵂";
        _696 = HashMap::<&str, &str>::insert(move _697, _698, _699) -> [return: bb176, unwind: bb197];
    }

    bb176: {
        _701 = &mut _1;
        _702 = const "wav";
        _703 = const "\u{f001}";
        _700 = HashMap::<&str, &str>::insert(move _701, _702, _703) -> [return: bb177, unwind: bb197];
    }

    bb177: {
        _705 = &mut _1;
        _706 = const "webm";
        _707 = const "\u{f03d}";
        _704 = HashMap::<&str, &str>::insert(move _705, _706, _707) -> [return: bb178, unwind: bb197];
    }

    bb178: {
        _709 = &mut _1;
        _710 = const "webp";
        _711 = const "\u{f1c5}";
        _708 = HashMap::<&str, &str>::insert(move _709, _710, _711) -> [return: bb179, unwind: bb197];
    }

    bb179: {
        _713 = &mut _1;
        _714 = const "windows";
        _715 = const "\u{f17a}";
        _712 = HashMap::<&str, &str>::insert(move _713, _714, _715) -> [return: bb180, unwind: bb197];
    }

    bb180: {
        _717 = &mut _1;
        _718 = const "wma";
        _719 = const "\u{f001}";
        _716 = HashMap::<&str, &str>::insert(move _717, _718, _719) -> [return: bb181, unwind: bb197];
    }

    bb181: {
        _721 = &mut _1;
        _722 = const "wmv";
        _723 = const "\u{f03d}";
        _720 = HashMap::<&str, &str>::insert(move _721, _722, _723) -> [return: bb182, unwind: bb197];
    }

    bb182: {
        _725 = &mut _1;
        _726 = const "wpl";
        _727 = const "蘿";
        _724 = HashMap::<&str, &str>::insert(move _725, _726, _727) -> [return: bb183, unwind: bb197];
    }

    bb183: {
        _729 = &mut _1;
        _730 = const "woff";
        _731 = const "\u{f031}";
        _728 = HashMap::<&str, &str>::insert(move _729, _730, _731) -> [return: bb184, unwind: bb197];
    }

    bb184: {
        _733 = &mut _1;
        _734 = const "woff2";
        _735 = const "\u{f031}";
        _732 = HashMap::<&str, &str>::insert(move _733, _734, _735) -> [return: bb185, unwind: bb197];
    }

    bb185: {
        _737 = &mut _1;
        _738 = const "xls";
        _739 = const "\u{f1c3}";
        _736 = HashMap::<&str, &str>::insert(move _737, _738, _739) -> [return: bb186, unwind: bb197];
    }

    bb186: {
        _741 = &mut _1;
        _742 = const "xlsx";
        _743 = const "\u{f1c3}";
        _740 = HashMap::<&str, &str>::insert(move _741, _742, _743) -> [return: bb187, unwind: bb197];
    }

    bb187: {
        _745 = &mut _1;
        _746 = const "xml";
        _747 = const "\u{e619}";
        _744 = HashMap::<&str, &str>::insert(move _745, _746, _747) -> [return: bb188, unwind: bb197];
    }

    bb188: {
        _749 = &mut _1;
        _750 = const "xul";
        _751 = const "\u{e619}";
        _748 = HashMap::<&str, &str>::insert(move _749, _750, _751) -> [return: bb189, unwind: bb197];
    }

    bb189: {
        _753 = &mut _1;
        _754 = const "xz";
        _755 = const "\u{f410}";
        _752 = HashMap::<&str, &str>::insert(move _753, _754, _755) -> [return: bb190, unwind: bb197];
    }

    bb190: {
        _757 = &mut _1;
        _758 = const "yaml";
        _759 = const "\u{e60b}";
        _756 = HashMap::<&str, &str>::insert(move _757, _758, _759) -> [return: bb191, unwind: bb197];
    }

    bb191: {
        _761 = &mut _1;
        _762 = const "yml";
        _763 = const "\u{e60b}";
        _760 = HashMap::<&str, &str>::insert(move _761, _762, _763) -> [return: bb192, unwind: bb197];
    }

    bb192: {
        _765 = &mut _1;
        _766 = const "zip";
        _767 = const "\u{f410}";
        _764 = HashMap::<&str, &str>::insert(move _765, _766, _767) -> [return: bb193, unwind: bb197];
    }

    bb193: {
        _769 = &mut _1;
        _770 = const "zsh";
        _771 = const "\u{f489}";
        _768 = HashMap::<&str, &str>::insert(move _769, _770, _771) -> [return: bb194, unwind: bb197];
    }

    bb194: {
        _773 = &mut _1;
        _774 = const "zsh-theme";
        _775 = const "\u{f489}";
        _772 = HashMap::<&str, &str>::insert(move _773, _774, _775) -> [return: bb195, unwind: bb197];
    }

    bb195: {
        _777 = &mut _1;
        _778 = const "zshrc";
        _779 = const "\u{f489}";
        _776 = HashMap::<&str, &str>::insert(move _777, _778, _779) -> [return: bb196, unwind: bb197];
    }

    bb196: {
        _0 = move _1;
        return;
    }

    bb197 (cleanup): {
        drop(_1) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb198 (cleanup): {
        resume;
    }
}

fn meta::date::<impl at src/meta/date.rs:7:10: 7:15>::clone(_1: &meta::date::Date) -> meta::date::Date {
    debug self => _1;
    let mut _0: meta::date::Date;
    let mut _2: chrono::DateTime<chrono::Local>;
    let _3: &chrono::DateTime<chrono::Local>;

    bb0: {
        _3 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _2 = <DateTime<Local> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = meta::date::Date(move _2);
        return;
    }
}

fn meta::date::<impl at src/meta/date.rs:7:17: 7:22>::fmt(_1: &meta::date::Date, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&chrono::DateTime<chrono::Local>;
    let _6: &chrono::DateTime<chrono::Local>;

    bb0: {
        _3 = const "Date";
        _6 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn meta::date::<impl at src/meta/date.rs:7:24: 7:33>::eq(_1: &meta::date::Date, _2: &meta::date::Date) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &chrono::DateTime<chrono::Local>;
    let mut _4: &chrono::DateTime<chrono::Local>;

    bb0: {
        _3 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _4 = &((*_2).0: chrono::DateTime<chrono::Local>);
        _0 = <DateTime<Local> as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn meta::date::<impl at src/meta/date.rs:7:35: 7:37>::assert_receiver_is_total_eq(_1: &meta::date::Date) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn meta::date::<impl at src/meta/date.rs:7:39: 7:49>::partial_cmp(_1: &meta::date::Date, _2: &meta::date::Date) -> std::option::Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let _3: &chrono::DateTime<chrono::Local>;
    let _4: &chrono::DateTime<chrono::Local>;

    bb0: {
        _3 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _4 = &((*_2).0: chrono::DateTime<chrono::Local>);
        _0 = <DateTime<Local> as PartialOrd>::partial_cmp(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn meta::date::<impl at src/meta/date.rs:7:51: 7:54>::cmp(_1: &meta::date::Date, _2: &meta::date::Date) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let _3: &chrono::DateTime<chrono::Local>;
    let _4: &chrono::DateTime<chrono::Local>;

    bb0: {
        _3 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _4 = &((*_2).0: chrono::DateTime<chrono::Local>);
        _0 = <DateTime<Local> as Ord>::cmp(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn meta::date::<impl at src/meta/date.rs:10:1: 10:37>::from(_1: &Metadata) -> meta::date::Date {
    debug meta => _1;
    let mut _0: meta::date::Date;
    let _2: std::time::SystemTime;
    let mut _3: std::result::Result<std::time::SystemTime, std::io::Error>;
    let _4: &str;
    scope 1 {
        debug modified_time => _2;
        let _5: chrono::DateTime<chrono::Local>;
        scope 2 {
            debug time => _5;
        }
    }

    bb0: {
        _3 = Metadata::modified(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = const "failed to retrieve modified date";
        _2 = Result::<SystemTime, std::io::Error>::expect(move _3, _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = <SystemTime as Into<DateTime<Local>>>::into(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = meta::date::Date(_5);
        return;
    }
}

fn meta::date::<impl at src/meta/date.rs:20:1: 20:10>::render(_1: &meta::date::Date, _2: &Colors, _3: &Flags) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    debug flags => _3;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let _4: chrono::DateTime<chrono::Local>;
    let mut _6: bool;
    let mut _7: &chrono::DateTime<chrono::Local>;
    let mut _8: &chrono::DateTime<chrono::Local>;
    let _9: chrono::DateTime<chrono::Local>;
    let mut _10: chrono::Duration;
    let mut _11: bool;
    let mut _12: &chrono::DateTime<chrono::Local>;
    let mut _13: &chrono::DateTime<chrono::Local>;
    let _14: chrono::DateTime<chrono::Local>;
    let mut _15: chrono::Duration;
    let mut _16: std::string::String;
    let _17: &&flags::Flags;
    let mut _18: &color::Elem;
    let mut _22: &flags::Flags;
    scope 1 {
        debug now => _4;
        let _5: &color::Elem;
        scope 2 {
            debug elem => _5;
            let mut _19: &color::Elem;
            let mut _20: &color::Elem;
            let mut _21: &color::Elem;
        }
    }

    bb0: {
        _4 = Local::now() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _10 = chrono::Duration::hours(const 1_i64) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = <DateTime<Local> as Sub<chrono::Duration>>::sub(_4, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = &_9;
        _6 = <DateTime<Local> as PartialOrd>::gt(move _7, move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _19 = const _;
        _5 = _19;
        goto -> bb12;
    }

    bb6: {
        _12 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _15 = chrono::Duration::days(const 1_i64) -> [return: bb7, unwind continue];
    }

    bb7: {
        _14 = <DateTime<Local> as Sub<chrono::Duration>>::sub(_4, move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        _13 = &_14;
        _11 = <DateTime<Local> as PartialOrd>::gt(move _12, move _13) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _11) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _20 = const _;
        _5 = _20;
        goto -> bb12;
    }

    bb11: {
        _21 = const _;
        _5 = _21;
        goto -> bb12;
    }

    bb12: {
        _17 = &_3;
        _22 = deref_copy (*_17);
        _16 = meta::date::Date::date_string(_1, _22) -> [return: bb13, unwind continue];
    }

    bb13: {
        _18 = _5;
        _0 = Colors::colorize::<'_>(_2, move _16, move _18) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }
}

promoted[0] in meta::date::<impl at src/meta/date.rs:20:1: 20:10>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::HourOld;
        _0 = &_1;
        return;
    }
}

promoted[1] in meta::date::<impl at src/meta/date.rs:20:1: 20:10>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::DayOld;
        _0 = &_1;
        return;
    }
}

promoted[2] in meta::date::<impl at src/meta/date.rs:20:1: 20:10>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Older;
        _0 = &_1;
        return;
    }
}

fn meta::date::<impl at src/meta/date.rs:20:1: 20:10>::date_string(_1: &meta::date::Date, _2: &Flags) -> std::string::String {
    debug self => _1;
    debug flags => _2;
    let mut _0: std::string::String;
    let mut _3: &flags::date::DateFlag;
    let mut _4: isize;
    let mut _5: &chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let _6: chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let mut _7: &chrono::DateTime<chrono::Local>;
    let _8: &str;
    let _9: std::string::String;
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &chrono_humanize::HumanTime;
    let _17: chrono_humanize::HumanTime;
    let mut _18: chrono::Duration;
    let mut _19: chrono::DateTime<chrono::Local>;
    let mut _20: chrono::DateTime<chrono::Local>;
    let mut _21: bool;
    let mut _22: &chrono::DateTime<chrono::Local>;
    let mut _23: &chrono::DateTime<chrono::Local>;
    let _24: chrono::DateTime<chrono::Local>;
    let mut _25: chrono::DateTime<chrono::Local>;
    let mut _26: chrono::Duration;
    let mut _27: &chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let _28: chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let mut _29: &chrono::DateTime<chrono::Local>;
    let _30: &str;
    let mut _31: &chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let _32: chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let mut _33: &chrono::DateTime<chrono::Local>;
    let _34: &str;
    let _35: &std::string::String;
    let mut _36: &chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let _37: chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let mut _38: &chrono::DateTime<chrono::Local>;
    let _39: &str;
    let _40: &&std::string::String;
    let mut _41: &[&str; 1];
    let mut _42: &std::string::String;
    scope 1 {
        debug res => _9;
    }
    scope 2 {
        debug format => _35;
    }

    bb0: {
        _3 = &((*_2).2: flags::date::DateFlag);
        _4 = discriminant((*_3));
        switchInt(move _4) -> [0: bb3, 1: bb6, 2: bb13, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _35 = &(((*_3) as Formatted).0: std::string::String);
        _38 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _40 = &_35;
        _42 = deref_copy (*_40);
        _39 = <std::string::String as Deref>::deref(_42) -> [return: bb24, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _7 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _8 = const "%c";
        _6 = DateTime::<Local>::format(move _7, _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = &_6;
        _0 = <DelayedFormat<StrftimeItems<'_>> as ToString>::to_string(move _5) -> [return: bb5, unwind: bb31];
    }

    bb5: {
        drop(_6) -> [return: bb27, unwind continue];
    }

    bb6: {
        _41 = const _;
        _11 = _41 as &[&str] (PointerCoercion(Unsize));
        _19 = ((*_1).0: chrono::DateTime<chrono::Local>);
        _20 = Local::now() -> [return: bb7, unwind continue];
    }

    bb7: {
        _18 = <DateTime<Local> as Sub>::sub(move _19, move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = <HumanTime as From<chrono::Duration>>::from(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        _16 = &_17;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<HumanTime>(_16) -> [return: bb10, unwind continue];
    }

    bb10: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _10 = Arguments::<'_>::new_v1(move _11, move _12) -> [return: bb11, unwind continue];
    }

    bb11: {
        _9 = std::fmt::format(move _10) -> [return: bb12, unwind continue];
    }

    bb12: {
        _0 = move _9;
        goto -> bb27;
    }

    bb13: {
        _22 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _25 = Local::now() -> [return: bb14, unwind continue];
    }

    bb14: {
        _26 = chrono::Duration::seconds(const 15778476_i64) -> [return: bb15, unwind continue];
    }

    bb15: {
        _24 = <DateTime<Local> as Sub<chrono::Duration>>::sub(move _25, move _26) -> [return: bb16, unwind continue];
    }

    bb16: {
        _23 = &_24;
        _21 = <DateTime<Local> as PartialOrd>::gt(move _22, move _23) -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _21) -> [0: bb21, otherwise: bb18];
    }

    bb18: {
        _29 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _30 = const "%m-%d %R";
        _28 = DateTime::<Local>::format(move _29, _30) -> [return: bb19, unwind continue];
    }

    bb19: {
        _27 = &_28;
        _0 = <DelayedFormat<StrftimeItems<'_>> as ToString>::to_string(move _27) -> [return: bb20, unwind: bb30];
    }

    bb20: {
        drop(_28) -> [return: bb27, unwind continue];
    }

    bb21: {
        _33 = &((*_1).0: chrono::DateTime<chrono::Local>);
        _34 = const "%F";
        _32 = DateTime::<Local>::format(move _33, _34) -> [return: bb22, unwind continue];
    }

    bb22: {
        _31 = &_32;
        _0 = <DelayedFormat<StrftimeItems<'_>> as ToString>::to_string(move _31) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        drop(_32) -> [return: bb27, unwind continue];
    }

    bb24: {
        _37 = DateTime::<Local>::format(move _38, _39) -> [return: bb25, unwind continue];
    }

    bb25: {
        _36 = &_37;
        _0 = <DelayedFormat<StrftimeItems<'_>> as ToString>::to_string(move _36) -> [return: bb26, unwind: bb28];
    }

    bb26: {
        drop(_37) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_37) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_32) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_28) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_6) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        resume;
    }
}

promoted[0] in meta::date::<impl at src/meta/date.rs:20:1: 20:10>::date_string: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn filetype::<impl at src/meta/filetype.rs:5:10: 5:15>::fmt(_1: &filetype::FileType, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &str;
    let _6: &bool;
    let _7: &str;
    let _8: &str;
    let mut _9: &dyn std::fmt::Debug;
    let _10: &&bool;
    let _11: &bool;
    let _12: &bool;
    let _13: &str;
    let _14: &str;
    let mut _15: &dyn std::fmt::Debug;
    let _16: &str;
    let mut _17: &dyn std::fmt::Debug;
    let _18: &&bool;
    let _19: &bool;
    let _20: &str;
    let _21: &str;
    let mut _22: &dyn std::fmt::Debug;
    let _23: &&bool;
    let _24: &str;
    let _25: &str;
    let _26: &str;
    scope 1 {
        debug __self_0 => _6;
    }
    scope 2 {
        debug __self_0 => _11;
        debug __self_1 => _12;
    }
    scope 3 {
        debug __self_0 => _19;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb1, otherwise: bb2];
    }

    bb1: {
        _26 = const "Special";
        _0 = Formatter::<'_>::write_str(_2, _26) -> [return: bb10, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = const "BlockDevice";
        _0 = Formatter::<'_>::write_str(_2, _4) -> [return: bb10, unwind continue];
    }

    bb4: {
        _5 = const "CharDevice";
        _0 = Formatter::<'_>::write_str(_2, _5) -> [return: bb10, unwind continue];
    }

    bb5: {
        _6 = &(((*_1) as Directory).0: bool);
        _7 = const "Directory";
        _8 = const "uid";
        _10 = &_6;
        _9 = _10 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _7, _8, move _9) -> [return: bb10, unwind continue];
    }

    bb6: {
        _11 = &(((*_1) as File).0: bool);
        _12 = &(((*_1) as File).1: bool);
        _13 = const "File";
        _14 = const "uid";
        _15 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _16 = const "exec";
        _18 = &_12;
        _17 = _18 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _13, _14, move _15, _16, move _17) -> [return: bb10, unwind continue];
    }

    bb7: {
        _19 = &(((*_1) as SymLink).0: bool);
        _20 = const "SymLink";
        _21 = const "is_dir";
        _23 = &_19;
        _22 = _23 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _20, _21, move _22) -> [return: bb10, unwind continue];
    }

    bb8: {
        _24 = const "Pipe";
        _0 = Formatter::<'_>::write_str(_2, _24) -> [return: bb10, unwind continue];
    }

    bb9: {
        _25 = const "Socket";
        _0 = Formatter::<'_>::write_str(_2, _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

fn filetype::<impl at src/meta/filetype.rs:5:17: 5:26>::eq(_1: &filetype::FileType, _2: &filetype::FileType) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&meta::filetype::FileType, &meta::filetype::FileType);
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: &meta::filetype::FileType;
    let mut _29: &meta::filetype::FileType;
    let mut _30: &meta::filetype::FileType;
    let mut _31: &meta::filetype::FileType;
    let mut _32: &meta::filetype::FileType;
    let mut _33: &meta::filetype::FileType;
    let mut _34: &meta::filetype::FileType;
    let mut _35: &meta::filetype::FileType;
    let mut _36: &meta::filetype::FileType;
    let mut _37: &meta::filetype::FileType;
    let mut _38: &meta::filetype::FileType;
    let mut _39: &meta::filetype::FileType;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _11: &bool;
            let _12: &bool;
            let _15: &bool;
            let _16: &bool;
            let _17: &bool;
            let _18: &bool;
            let _24: &bool;
            let _25: &bool;
            scope 3 {
                debug __self_0 => _11;
                debug __arg1_0 => _12;
            }
            scope 4 {
                debug __self_0 => _15;
                debug __self_1 => _16;
                debug __arg1_0 => _17;
                debug __arg1_1 => _18;
            }
            scope 5 {
                debug __self_0 => _24;
                debug __arg1_0 => _25;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _28 = deref_copy (_6.0: &meta::filetype::FileType);
        _10 = discriminant((*_28));
        switchInt(move _10) -> [2: bb4, 3: bb5, 4: bb6, otherwise: bb3];
    }

    bb2: {
        _0 = const false;
        goto -> bb12;
    }

    bb3: {
        _0 = const true;
        goto -> bb12;
    }

    bb4: {
        _29 = deref_copy (_6.1: &meta::filetype::FileType);
        _7 = discriminant((*_29));
        switchInt(move _7) -> [2: bb7, otherwise: bb3];
    }

    bb5: {
        _30 = deref_copy (_6.1: &meta::filetype::FileType);
        _8 = discriminant((*_30));
        switchInt(move _8) -> [3: bb8, otherwise: bb3];
    }

    bb6: {
        _31 = deref_copy (_6.1: &meta::filetype::FileType);
        _9 = discriminant((*_31));
        switchInt(move _9) -> [4: bb11, otherwise: bb3];
    }

    bb7: {
        _32 = deref_copy (_6.0: &meta::filetype::FileType);
        _11 = &(((*_32) as Directory).0: bool);
        _33 = deref_copy (_6.1: &meta::filetype::FileType);
        _12 = &(((*_33) as Directory).0: bool);
        _13 = (*_11);
        _14 = (*_12);
        _0 = Eq(move _13, move _14);
        goto -> bb12;
    }

    bb8: {
        _34 = deref_copy (_6.0: &meta::filetype::FileType);
        _15 = &(((*_34) as File).0: bool);
        _35 = deref_copy (_6.0: &meta::filetype::FileType);
        _16 = &(((*_35) as File).1: bool);
        _36 = deref_copy (_6.1: &meta::filetype::FileType);
        _17 = &(((*_36) as File).0: bool);
        _37 = deref_copy (_6.1: &meta::filetype::FileType);
        _18 = &(((*_37) as File).1: bool);
        _20 = (*_15);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        switchInt(move _19) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _22 = (*_16);
        _23 = (*_18);
        _0 = Eq(move _22, move _23);
        goto -> bb12;
    }

    bb10: {
        _0 = const false;
        goto -> bb12;
    }

    bb11: {
        _38 = deref_copy (_6.0: &meta::filetype::FileType);
        _24 = &(((*_38) as SymLink).0: bool);
        _39 = deref_copy (_6.1: &meta::filetype::FileType);
        _25 = &(((*_39) as SymLink).0: bool);
        _26 = (*_24);
        _27 = (*_25);
        _0 = Eq(move _26, move _27);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

fn filetype::<impl at src/meta/filetype.rs:5:28: 5:30>::assert_receiver_is_total_eq(_1: &filetype::FileType) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn filetype::<impl at src/meta/filetype.rs:5:38: 5:43>::clone(_1: &filetype::FileType) -> filetype::FileType {
    debug self => _1;
    let mut _0: meta::filetype::FileType;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn filetype::<impl at src/meta/filetype.rs:18:1: 18:14>::new(_1: &Metadata, _2: std::option::Option<&Metadata>, _3: &permissions::Permissions) -> filetype::FileType {
    debug meta => _1;
    debug symlink_meta => _2;
    debug permissions => _3;
    let mut _0: meta::filetype::FileType;
    let _4: std::fs::FileType;
    let mut _5: bool;
    let mut _6: &std::fs::FileType;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: &std::fs::FileType;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: &std::fs::FileType;
    let mut _14: bool;
    let mut _15: &std::fs::FileType;
    let mut _16: bool;
    let mut _17: std::option::Option<bool>;
    let mut _18: bool;
    let mut _19: &std::fs::FileType;
    let mut _20: bool;
    let mut _21: &std::fs::FileType;
    let mut _22: bool;
    let mut _23: &std::fs::FileType;
    scope 1 {
        debug file_type => _4;
    }

    bb0: {
        _4 = Metadata::file_type(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_4;
        _5 = std::fs::FileType::is_file(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _7 = permissions::Permissions::is_executable(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = ((*_3).11: bool);
        _0 = filetype::FileType::File { uid: move _8, exec: move _7 };
        goto -> bb26;
    }

    bb5: {
        _10 = &_4;
        _9 = std::fs::FileType::is_dir(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _9) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _11 = ((*_3).11: bool);
        _0 = filetype::FileType::Directory { uid: move _11 };
        goto -> bb26;
    }

    bb8: {
        _13 = &_4;
        _12 = <std::fs::FileType as FileTypeExt>::is_fifo(move _13) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _12) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _0 = filetype::FileType::Pipe;
        goto -> bb26;
    }

    bb11: {
        _15 = &_4;
        _14 = std::fs::FileType::is_symlink(move _15) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt(move _14) -> [0: bb16, otherwise: bb13];
    }

    bb13: {
        _17 = std::option::Option::<&Metadata>::map::<bool, {closure@src/meta/filetype.rs:43:42: 43:45}>(_2, const ZeroSized: {closure@src/meta/filetype.rs:43:42: 43:45}) -> [return: bb14, unwind continue];
    }

    bb14: {
        _16 = std::option::Option::<bool>::unwrap_or_default(move _17) -> [return: bb15, unwind continue];
    }

    bb15: {
        _0 = filetype::FileType::SymLink { is_dir: move _16 };
        goto -> bb26;
    }

    bb16: {
        _19 = &_4;
        _18 = <std::fs::FileType as FileTypeExt>::is_char_device(move _19) -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _18) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _0 = filetype::FileType::CharDevice;
        goto -> bb26;
    }

    bb19: {
        _21 = &_4;
        _20 = <std::fs::FileType as FileTypeExt>::is_block_device(move _21) -> [return: bb20, unwind continue];
    }

    bb20: {
        switchInt(move _20) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _0 = filetype::FileType::BlockDevice;
        goto -> bb26;
    }

    bb22: {
        _23 = &_4;
        _22 = <std::fs::FileType as FileTypeExt>::is_socket(move _23) -> [return: bb23, unwind continue];
    }

    bb23: {
        switchInt(move _22) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _0 = filetype::FileType::Socket;
        goto -> bb26;
    }

    bb25: {
        _0 = filetype::FileType::Special;
        goto -> bb26;
    }

    bb26: {
        return;
    }
}

fn filetype::<impl at src/meta/filetype.rs:18:1: 18:14>::new::{closure#0}(_1: {closure@src/meta/filetype.rs:43:42: 43:45}, _2: &Metadata) -> bool {
    debug m => _2;
    let mut _0: bool;

    bb0: {
        _0 = Metadata::is_dir(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn filetype::<impl at src/meta/filetype.rs:18:1: 18:14>::is_dirlike(_1: filetype::FileType) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: isize;
    let mut _3: bool;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [2: bb3, 4: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const false;
        goto -> bb4;
    }

    bb2: {
        StorageLive(_3);
        _3 = ((_1 as SymLink).0: bool);
        _0 = _3;
        StorageDead(_3);
        goto -> bb4;
    }

    bb3: {
        _0 = const true;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn filetype::<impl at src/meta/filetype.rs:88:1: 88:14>::render(_1: filetype::FileType, _2: &Colors) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let mut _3: isize;
    let _4: bool;
    let mut _5: std::string::String;
    let _6: &color::Elem;
    let _7: color::Elem;
    let mut _8: std::string::String;
    let mut _9: std::string::String;
    let mut _10: std::string::String;
    let mut _11: std::string::String;
    let mut _12: std::string::String;
    let mut _13: std::string::String;
    let mut _14: std::string::String;
    let mut _15: &color::Elem;
    let mut _16: &color::Elem;
    let mut _17: &color::Elem;
    let mut _18: &color::Elem;
    let mut _19: &color::Elem;
    let mut _20: &color::Elem;
    let mut _21: &color::Elem;
    scope 1 {
        debug exec => _4;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb11, 1: bb13, 2: bb5, 3: bb3, 4: bb9, 5: bb7, 6: bb15, 7: bb1, otherwise: bb2];
    }

    bb1: {
        _14 = <std::string::String as From<&str>>::from(const "?") -> [return: bb17, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = ((_1 as File).1: bool);
        _5 = <std::string::String as From<&str>>::from(const ".") -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = Elem::File { exec: _4, uid: const false };
        _6 = &_7;
        _0 = Colors::colorize::<'_>(_2, move _5, _6) -> [return: bb18, unwind continue];
    }

    bb5: {
        _8 = <std::string::String as From<&str>>::from(const "d") -> [return: bb6, unwind continue];
    }

    bb6: {
        _21 = const _;
        _0 = Colors::colorize::<'_>(_2, move _8, _21) -> [return: bb18, unwind continue];
    }

    bb7: {
        _9 = <std::string::String as From<&str>>::from(const "|") -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = const _;
        _0 = Colors::colorize::<'_>(_2, move _9, _20) -> [return: bb18, unwind continue];
    }

    bb9: {
        _10 = <std::string::String as From<&str>>::from(const "l") -> [return: bb10, unwind continue];
    }

    bb10: {
        _19 = const _;
        _0 = Colors::colorize::<'_>(_2, move _10, _19) -> [return: bb18, unwind continue];
    }

    bb11: {
        _11 = <std::string::String as From<&str>>::from(const "b") -> [return: bb12, unwind continue];
    }

    bb12: {
        _18 = const _;
        _0 = Colors::colorize::<'_>(_2, move _11, _18) -> [return: bb18, unwind continue];
    }

    bb13: {
        _12 = <std::string::String as From<&str>>::from(const "c") -> [return: bb14, unwind continue];
    }

    bb14: {
        _17 = const _;
        _0 = Colors::colorize::<'_>(_2, move _12, _17) -> [return: bb18, unwind continue];
    }

    bb15: {
        _13 = <std::string::String as From<&str>>::from(const "s") -> [return: bb16, unwind continue];
    }

    bb16: {
        _16 = const _;
        _0 = Colors::colorize::<'_>(_2, move _13, _16) -> [return: bb18, unwind continue];
    }

    bb17: {
        _15 = const _;
        _0 = Colors::colorize::<'_>(_2, move _14, _15) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

promoted[0] in filetype::<impl at src/meta/filetype.rs:88:1: 88:14>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Special;
        _0 = &_1;
        return;
    }
}

promoted[1] in filetype::<impl at src/meta/filetype.rs:88:1: 88:14>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Socket;
        _0 = &_1;
        return;
    }
}

promoted[2] in filetype::<impl at src/meta/filetype.rs:88:1: 88:14>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::CharDevice;
        _0 = &_1;
        return;
    }
}

promoted[3] in filetype::<impl at src/meta/filetype.rs:88:1: 88:14>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::BlockDevice;
        _0 = &_1;
        return;
    }
}

promoted[4] in filetype::<impl at src/meta/filetype.rs:88:1: 88:14>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::SymLink;
        _0 = &_1;
        return;
    }
}

promoted[5] in filetype::<impl at src/meta/filetype.rs:88:1: 88:14>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Pipe;
        _0 = &_1;
        return;
    }
}

promoted[6] in filetype::<impl at src/meta/filetype.rs:88:1: 88:14>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Dir { uid: const false };
        _0 = &_1;
        return;
    }
}

fn indicator::<impl at src/meta/indicator.rs:6:10: 6:15>::clone(_1: &indicator::Indicator) -> indicator::Indicator {
    debug self => _1;
    let mut _0: meta::indicator::Indicator;
    let _2: &str;
    let _3: &&str;

    bb0: {
        _3 = &((*_1).0: &str);
        _2 = <&str as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = indicator::Indicator(_2);
        return;
    }
}

fn indicator::<impl at src/meta/indicator.rs:6:17: 6:22>::fmt(_1: &indicator::Indicator, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&&str;
    let _6: &&str;

    bb0: {
        _3 = const "Indicator";
        _6 = &((*_1).0: &str);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn indicator::<impl at src/meta/indicator.rs:9:1: 9:34>::from(_1: filetype::FileType) -> indicator::Indicator {
    debug file_type => _1;
    let mut _0: meta::indicator::Indicator;
    let _2: &str;
    let mut _3: isize;
    let _4: &str;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let mut _9: &str;
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [2: bb3, 3: bb2, 4: bb7, 5: bb5, 6: bb6, otherwise: bb1];
    }

    bb1: {
        _8 = const "";
        _2 = _8;
        goto -> bb8;
    }

    bb2: {
        switchInt(((_1 as File).1: bool)) -> [0: bb1, otherwise: bb4];
    }

    bb3: {
        _2 = const "/";
        goto -> bb8;
    }

    bb4: {
        _4 = const "*";
        _2 = _4;
        goto -> bb8;
    }

    bb5: {
        _5 = const "|";
        _2 = _5;
        goto -> bb8;
    }

    bb6: {
        _6 = const "=";
        _2 = _6;
        goto -> bb8;
    }

    bb7: {
        _7 = const "@";
        _2 = _7;
        goto -> bb8;
    }

    bb8: {
        _9 = _2;
        _0 = indicator::Indicator(move _9);
        return;
    }
}

fn indicator::<impl at src/meta/indicator.rs:24:1: 24:15>::render(_1: &indicator::Indicator, _2: &Flags) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug flags => _2;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let mut _3: bool;
    let mut _4: &str;

    bb0: {
        _3 = (((*_2).5: flags::indicators::Indicators).0: bool);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = ((*_1).0: &str);
        _0 = <ANSIGenericString<'_, str> as From<&str>>::from(move _4) -> [return: bb3, unwind continue];
    }

    bb2: {
        _0 = <ANSIGenericString<'_, str> as From<&str>>::from(const "") -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn inode::<impl at src/meta/inode.rs:4:10: 4:15>::fmt(_1: &INode, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&std::option::Option<u64>;
    let _7: &std::option::Option<u64>;

    bb0: {
        _3 = const "INode";
        _4 = const "index";
        _7 = &((*_1).0: std::option::Option<u64>);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inode::<impl at src/meta/inode.rs:4:17: 4:26>::eq(_1: &INode, _2: &INode) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::option::Option<u64>;
    let mut _4: &std::option::Option<u64>;

    bb0: {
        _3 = &((*_1).0: std::option::Option<u64>);
        _4 = &((*_2).0: std::option::Option<u64>);
        _0 = <std::option::Option<u64> as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inode::<impl at src/meta/inode.rs:4:28: 4:30>::assert_receiver_is_total_eq(_1: &INode) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn inode::<impl at src/meta/inode.rs:4:38: 4:43>::clone(_1: &INode) -> INode {
    debug self => _1;
    let mut _0: meta::inode::INode;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn inode::<impl at src/meta/inode.rs:9:1: 9:38>::from(_1: &Metadata) -> INode {
    debug meta => _1;
    let mut _0: meta::inode::INode;
    let _2: u64;
    let mut _3: std::option::Option<u64>;
    scope 1 {
        debug index => _2;
    }

    bb0: {
        _2 = <Metadata as std::os::unix::fs::MetadataExt>::ino(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = std::option::Option::<u64>::Some(_2);
        _0 = INode { index: move _3 };
        return;
    }
}

fn inode::<impl at src/meta/inode.rs:25:1: 25:11>::render(_1: &INode, _2: &Colors) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let mut _3: isize;
    let _4: u64;
    let mut _5: std::string::String;
    let mut _6: &u64;
    let mut _7: std::string::String;
    let mut _8: &color::Elem;
    scope 1 {
        debug i => _4;
        let mut _9: &color::Elem;
    }

    bb0: {
        _3 = discriminant(((*_1).0: std::option::Option<u64>));
        switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _7 = <std::string::String as From<&str>>::from(const "-") -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = ((((*_1).0: std::option::Option<u64>) as Some).0: u64);
        _6 = &_4;
        _5 = <u64 as ToString>::to_string(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = const _;
        _0 = Colors::colorize::<'_>(_2, move _5, _9) -> [return: bb6, unwind continue];
    }

    bb5: {
        _8 = const _;
        _0 = Colors::colorize::<'_>(_2, move _7, _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

promoted[0] in inode::<impl at src/meta/inode.rs:25:1: 25:11>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::INode { valid: const false };
        _0 = &_1;
        return;
    }
}

promoted[1] in inode::<impl at src/meta/inode.rs:25:1: 25:11>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::INode { valid: const true };
        _0 = &_1;
        return;
    }
}

fn links::<impl at src/meta/links.rs:4:10: 4:15>::fmt(_1: &Links, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&std::option::Option<u64>;
    let _7: &std::option::Option<u64>;

    bb0: {
        _3 = const "Links";
        _4 = const "nlink";
        _7 = &((*_1).0: std::option::Option<u64>);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn links::<impl at src/meta/links.rs:4:17: 4:26>::eq(_1: &Links, _2: &Links) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::option::Option<u64>;
    let mut _4: &std::option::Option<u64>;

    bb0: {
        _3 = &((*_1).0: std::option::Option<u64>);
        _4 = &((*_2).0: std::option::Option<u64>);
        _0 = <std::option::Option<u64> as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn links::<impl at src/meta/links.rs:4:28: 4:30>::assert_receiver_is_total_eq(_1: &Links) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn links::<impl at src/meta/links.rs:4:38: 4:43>::clone(_1: &Links) -> Links {
    debug self => _1;
    let mut _0: meta::links::Links;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn links::<impl at src/meta/links.rs:9:1: 9:38>::from(_1: &Metadata) -> Links {
    debug meta => _1;
    let mut _0: meta::links::Links;
    let _2: u64;
    let mut _3: std::option::Option<u64>;
    scope 1 {
        debug nlink => _2;
    }

    bb0: {
        _2 = <Metadata as std::os::unix::fs::MetadataExt>::nlink(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = std::option::Option::<u64>::Some(_2);
        _0 = Links { nlink: move _3 };
        return;
    }
}

fn links::<impl at src/meta/links.rs:25:1: 25:11>::render(_1: &Links, _2: &Colors) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let mut _3: isize;
    let _4: u64;
    let mut _5: std::string::String;
    let mut _6: &u64;
    let mut _7: std::string::String;
    let mut _8: &color::Elem;
    scope 1 {
        debug i => _4;
        let mut _9: &color::Elem;
    }

    bb0: {
        _3 = discriminant(((*_1).0: std::option::Option<u64>));
        switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _7 = <std::string::String as From<&str>>::from(const "-") -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = ((((*_1).0: std::option::Option<u64>) as Some).0: u64);
        _6 = &_4;
        _5 = <u64 as ToString>::to_string(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = const _;
        _0 = Colors::colorize::<'_>(_2, move _5, _9) -> [return: bb6, unwind continue];
    }

    bb5: {
        _8 = const _;
        _0 = Colors::colorize::<'_>(_2, move _7, _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

promoted[0] in links::<impl at src/meta/links.rs:25:1: 25:11>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Links { valid: const false };
        _0 = &_1;
        return;
    }
}

promoted[1] in links::<impl at src/meta/links.rs:25:1: 25:11>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Links { valid: const true };
        _0 = &_1;
        return;
    }
}

fn name::<impl at src/meta/name.rs:8:10: 8:15>::fmt(_1: &DisplayOption<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &&std::path::Path;
    let _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&&std::path::Path;
    let _10: &str;
    scope 1 {
        debug __self_0 => _5;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _10 = const "None";
        _0 = Formatter::<'_>::write_str(_2, _10) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = const "FileName";
        _0 = Formatter::<'_>::write_str(_2, _4) -> [return: bb5, unwind continue];
    }

    bb4: {
        _5 = &(((*_1) as Relative).0: &std::path::Path);
        _6 = const "Relative";
        _7 = const "base_path";
        _9 = &_5;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _6, _7, move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn name::<impl at src/meta/name.rs:15:10: 15:15>::clone(_1: &Name) -> Name {
    debug self => _1;
    let mut _0: meta::name::Name;
    let mut _2: std::string::String;
    let _3: &std::string::String;
    let mut _4: std::path::PathBuf;
    let _5: &std::path::PathBuf;
    let mut _6: std::option::Option<std::string::String>;
    let _7: &std::option::Option<std::string::String>;
    let mut _8: meta::filetype::FileType;
    let _9: &meta::filetype::FileType;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <std::string::String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::path::PathBuf);
        _4 = <PathBuf as Clone>::clone(_5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = &((*_1).2: std::option::Option<std::string::String>);
        _6 = <std::option::Option<std::string::String> as Clone>::clone(_7) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _9 = &((*_1).3: meta::filetype::FileType);
        _8 = <filetype::FileType as Clone>::clone(_9) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = Name { name: move _2, path: move _4, extension: move _6, file_type: move _8 };
        return;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn name::<impl at src/meta/name.rs:15:17: 15:22>::fmt(_1: &Name, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::path::PathBuf;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &std::option::Option<std::string::String>;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&meta::filetype::FileType;
    let _16: &meta::filetype::FileType;

    bb0: {
        _3 = const "Name";
        _4 = const "name";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "path";
        _9 = &((*_1).1: std::path::PathBuf);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "extension";
        _12 = &((*_1).2: std::option::Option<std::string::String>);
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = const "file_type";
        _16 = &((*_1).3: meta::filetype::FileType);
        _15 = &_16;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field4_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn name::<impl at src/meta/name.rs:15:24: 15:26>::assert_receiver_is_total_eq(_1: &Name) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        return;
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::new(_1: &Path, _2: filetype::FileType) -> Name {
    debug path => _1;
    debug file_type => _2;
    let mut _0: meta::name::Name;
    let _3: std::string::String;
    let mut _4: std::option::Option<&std::ffi::OsStr>;
    let mut _5: isize;
    let _6: &std::ffi::OsStr;
    let mut _7: &std::borrow::Cow<'_, str>;
    let _8: std::borrow::Cow<'_, str>;
    let mut _9: &std::borrow::Cow<'_, str>;
    let _10: std::borrow::Cow<'_, str>;
    let mut _12: std::option::Option<&std::ffi::OsStr>;
    let mut _13: std::string::String;
    let mut _14: std::path::PathBuf;
    let mut _15: std::option::Option<std::string::String>;
    let mut _16: bool;
    scope 1 {
        debug name => _3;
        let _11: std::option::Option<std::string::String>;
        scope 3 {
            debug extension => _11;
        }
    }
    scope 2 {
        debug name => _6;
    }

    bb0: {
        _16 = const false;
        _4 = Path::file_name(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_4);
        switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _10 = Path::to_string_lossy(_1) -> [return: bb7, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_4 as Some).0: &std::ffi::OsStr);
        _8 = OsStr::to_string_lossy(_6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _7 = &_8;
        _3 = <Cow<'_, str> as ToString>::to_string(move _7) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _16 = const true;
        drop(_8) -> [return: bb9, unwind continue];
    }

    bb7: {
        _9 = &_10;
        _3 = <Cow<'_, str> as ToString>::to_string(move _9) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        _16 = const true;
        drop(_10) -> [return: bb9, unwind continue];
    }

    bb9: {
        _12 = Path::extension(_1) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _11 = std::option::Option::<&OsStr>::map::<std::string::String, {closure@src/meta/name.rs:32:18: 32:23}>(move _12, const ZeroSized: {closure@src/meta/name.rs:32:18: 32:23}) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _16 = const false;
        _13 = move _3;
        _14 = <PathBuf as From<&Path>>::from(_1) -> [return: bb12, unwind: bb13];
    }

    bb12: {
        _15 = move _11;
        _0 = Name { name: move _13, path: move _14, extension: move _15, file_type: _2 };
        _16 = const false;
        return;
    }

    bb13 (cleanup): {
        drop(_13) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_11) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_10) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_16) -> [0: bb17, otherwise: bb18];
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::new::{closure#0}(_1: {closure@src/meta/name.rs:32:18: 32:23}, _2: &OsStr) -> std::string::String {
    debug ext => _2;
    let mut _0: std::string::String;
    let mut _3: &std::borrow::Cow<'_, str>;
    let _4: std::borrow::Cow<'_, str>;

    bb0: {
        _4 = OsStr::to_string_lossy(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _0 = <Cow<'_, str> as ToString>::to_string(move _3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_4) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::file_name(_1: &Name) -> &str {
    debug self => _1;
    let mut _0: &str;
    let mut _2: std::option::Option<&str>;
    let mut _3: std::option::Option<&std::ffi::OsStr>;
    let _4: &std::path::Path;
    let mut _5: &std::path::PathBuf;
    let _6: &str;
    let _7: &std::string::String;

    bb0: {
        _5 = &((*_1).1: std::path::PathBuf);
        _4 = <PathBuf as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Path::file_name(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = std::option::Option::<&OsStr>::and_then::<&str, for<'a> fn(&'a OsStr) -> std::option::Option<&'a str> {OsStr::to_str}>(move _3, OsStr::to_str) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = &((*_1).0: std::string::String);
        _6 = <std::string::String as Deref>::deref(_7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = std::option::Option::<&str>::unwrap_or(move _2, _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::relative_path(_1: &Name, _2: T) -> PathBuf {
    debug self => _1;
    debug base_path => _2;
    let mut _0: std::path::PathBuf;
    let _3: &std::path::Path;
    let mut _4: &T;
    let mut _5: bool;
    let mut _6: &std::path::PathBuf;
    let mut _7: &&std::path::Path;
    let mut _8: &std::path::Path;
    let mut _10: std::iter::Map<std::iter::TakeWhile<std::iter::Zip<std::path::Components<'_>, std::path::Components<'_>>, {closure@src/meta/name.rs:60:25: 60:61}>, {closure@src/meta/name.rs:61:18: 61:25}>;
    let mut _11: std::iter::TakeWhile<std::iter::Zip<std::path::Components<'_>, std::path::Components<'_>>, {closure@src/meta/name.rs:60:25: 60:61}>;
    let mut _12: std::iter::Zip<std::path::Components<'_>, std::path::Components<'_>>;
    let mut _13: std::path::Components<'_>;
    let _14: &std::path::Path;
    let mut _15: &std::path::PathBuf;
    let mut _16: std::path::Components<'_>;
    let mut _17: &std::path::Path;
    let mut _18: std::iter::Chain<std::iter::Map<std::path::Components<'_>, {closure@src/meta/name.rs:68:18: 68:21}>, std::path::Components<'_>>;
    let mut _19: std::iter::Map<std::path::Components<'_>, {closure@src/meta/name.rs:68:18: 68:21}>;
    let mut _20: std::path::Components<'_>;
    let _21: &std::path::Path;
    let mut _22: std::result::Result<&std::path::Path, std::path::StripPrefixError>;
    let mut _23: &std::path::Path;
    let mut _24: &std::path::PathBuf;
    let mut _25: std::path::Components<'_>;
    let _26: &std::path::Path;
    let mut _27: std::result::Result<&std::path::Path, std::path::StripPrefixError>;
    let _28: &std::path::Path;
    let mut _29: &std::path::PathBuf;
    let mut _30: &std::path::PathBuf;
    scope 1 {
        debug base_path => _3;
        let _9: std::path::PathBuf;
        let mut _31: &std::path::Component<'_>;
        scope 2 {
            debug shared_components => _9;
        }
    }

    bb0: {
        _4 = &_2;
        _3 = <T as AsRef<Path>>::as_ref(move _4) -> [return: bb1, unwind: bb27];
    }

    bb1: {
        _6 = &((*_1).1: std::path::PathBuf);
        _7 = &_3;
        _5 = <PathBuf as PartialEq<&Path>>::eq(move _6, move _7) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        switchInt(move _5) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        _31 = const _;
        _8 = <Component<'_> as AsRef<Path>>::as_ref(_31) -> [return: bb4, unwind: bb27];
    }

    bb4: {
        _0 = <PathBuf as From<&Path>>::from(move _8) -> [return: bb5, unwind: bb27];
    }

    bb5: {
        drop(_2) -> [return: bb25, unwind continue];
    }

    bb6: {
        _15 = &((*_1).1: std::path::PathBuf);
        _14 = <PathBuf as Deref>::deref(move _15) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        _13 = Path::components(_14) -> [return: bb8, unwind: bb27];
    }

    bb8: {
        _17 = _3;
        _16 = Path::components(move _17) -> [return: bb9, unwind: bb27];
    }

    bb9: {
        _12 = <Components<'_> as Iterator>::zip::<Components<'_>>(move _13, move _16) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        _11 = <Zip<Components<'_>, Components<'_>> as Iterator>::take_while::<{closure@src/meta/name.rs:60:25: 60:61}>(move _12, const ZeroSized: {closure@src/meta/name.rs:60:25: 60:61}) -> [return: bb11, unwind: bb27];
    }

    bb11: {
        _10 = <TakeWhile<Zip<Components<'_>, Components<'_>>, {closure@src/meta/name.rs:60:25: 60:61}> as Iterator>::map::<Component<'_>, {closure@src/meta/name.rs:61:18: 61:25}>(move _11, const ZeroSized: {closure@src/meta/name.rs:61:18: 61:25}) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _9 = <std::iter::Map<TakeWhile<Zip<Components<'_>, Components<'_>>, {closure@src/meta/name.rs:60:25: 60:61}>, {closure@src/meta/name.rs:61:18: 61:25}> as Iterator>::collect::<PathBuf>(move _10) -> [return: bb13, unwind: bb27];
    }

    bb13: {
        _23 = _3;
        _24 = &_9;
        _22 = Path::strip_prefix::<&PathBuf>(move _23, move _24) -> [return: bb14, unwind: bb26];
    }

    bb14: {
        _21 = Result::<&Path, StripPrefixError>::unwrap(move _22) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        _20 = Path::components(_21) -> [return: bb16, unwind: bb26];
    }

    bb16: {
        _19 = <Components<'_> as Iterator>::map::<Component<'_>, {closure@src/meta/name.rs:68:18: 68:21}>(move _20, const ZeroSized: {closure@src/meta/name.rs:68:18: 68:21}) -> [return: bb17, unwind: bb26];
    }

    bb17: {
        _29 = &((*_1).1: std::path::PathBuf);
        _28 = <PathBuf as Deref>::deref(move _29) -> [return: bb18, unwind: bb26];
    }

    bb18: {
        _30 = &_9;
        _27 = Path::strip_prefix::<&PathBuf>(_28, move _30) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        _26 = Result::<&Path, StripPrefixError>::unwrap(move _27) -> [return: bb20, unwind: bb26];
    }

    bb20: {
        _25 = Path::components(_26) -> [return: bb21, unwind: bb26];
    }

    bb21: {
        _18 = <std::iter::Map<Components<'_>, {closure@src/meta/name.rs:68:18: 68:21}> as Iterator>::chain::<Components<'_>>(move _19, move _25) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        _0 = <std::iter::Chain<std::iter::Map<Components<'_>, {closure@src/meta/name.rs:68:18: 68:21}>, Components<'_>> as Iterator>::collect::<PathBuf>(move _18) -> [return: bb23, unwind: bb26];
    }

    bb23: {
        drop(_9) -> [return: bb24, unwind: bb27];
    }

    bb24: {
        drop(_2) -> [return: bb25, unwind continue];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_9) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_2) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        resume;
    }
}

promoted[0] in name::<impl at src/meta/name.rs:23:1: 23:10>::relative_path: &Component<'_> = {
    let mut _0: &std::path::Component<'_>;
    let mut _1: std::path::Component<'_>;

    bb0: {
        _1 = Component::<'_>::CurDir;
        _0 = &_1;
        return;
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::relative_path::{closure#0}(_1: &mut {closure@src/meta/name.rs:60:25: 60:61}, _2: &(Component<'_>, Component<'_>)) -> bool {
    let mut _0: bool;
    let _3: &std::path::Component<'_>;
    let _4: &std::path::Component<'_>;
    let mut _5: &&std::path::Component<'_>;
    let mut _6: &&std::path::Component<'_>;
    scope 1 {
        debug target_component => _3;
        debug base_component => _4;
    }

    bb0: {
        _3 = &((*_2).0: std::path::Component<'_>);
        _4 = &((*_2).1: std::path::Component<'_>);
        _5 = &_3;
        _6 = &_4;
        _0 = <&Component<'_> as PartialEq>::eq(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::relative_path::{closure#1}(_1: &mut {closure@src/meta/name.rs:61:18: 61:25}, _2: (Component<'_>, Component<'_>)) -> Component<'_> {
    debug tuple => _2;
    let mut _0: std::path::Component<'_>;

    bb0: {
        _0 = (_2.0: std::path::Component<'_>);
        return;
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::relative_path::{closure#2}(_1: &mut {closure@src/meta/name.rs:68:18: 68:21}, _2: Component<'_>) -> Component<'_> {
    let mut _0: std::path::Component<'_>;

    bb0: {
        _0 = Component::<'_>::ParentDir;
        return;
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::escape(_1: &Name, _2: &str) -> std::string::String {
    debug self => _1;
    debug string => _2;
    let mut _0: std::string::String;
    let mut _3: bool;
    let mut _4: &mut std::str::Chars<'_>;
    let mut _5: std::str::Chars<'_>;
    let mut _6: std::string::String;
    let mut _7: std::str::Chars<'_>;
    let mut _8: std::str::Chars<'_>;
    let mut _10: std::option::Option<char>;
    let mut _11: &mut std::str::Chars<'_>;
    let mut _12: isize;
    let mut _14: bool;
    let mut _15: char;
    let mut _16: bool;
    let mut _17: char;
    let _18: ();
    let mut _19: &mut std::string::String;
    let _20: ();
    let mut _21: &mut std::string::String;
    let _22: &str;
    let _23: &std::string::String;
    let _24: std::string::String;
    let mut _25: std::char::EscapeDefault;
    scope 1 {
        debug chars => _6;
        let mut _9: std::str::Chars<'_>;
        scope 2 {
            debug iter => _9;
            let _13: char;
            scope 3 {
                debug c => _13;
            }
        }
    }

    bb0: {
        _5 = core::str::<impl str>::chars(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <Chars<'_> as Iterator>::all::<{closure@src/meta/name.rs:81:18: 81:21}>(move _4, const ZeroSized: {closure@src/meta/name.rs:81:18: 81:21}) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = <str as ToString>::to_string(_2) -> [return: bb20, unwind continue];
    }

    bb4: {
        _6 = std::string::String::new() -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = core::str::<impl str>::chars(_2) -> [return: bb6, unwind: bb22];
    }

    bb6: {
        _7 = <Chars<'_> as IntoIterator>::into_iter(move _8) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        _9 = move _7;
        goto -> bb8;
    }

    bb8: {
        _11 = &mut _9;
        _10 = <Chars<'_> as Iterator>::next(_11) -> [return: bb9, unwind: bb22];
    }

    bb9: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _13 = ((_10 as Some).0: char);
        _15 = const 32_u8 as char (IntToInt);
        _14 = Ge(_13, move _15);
        switchInt(move _14) -> [0: bb15, otherwise: bb13];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _0 = move _6;
        goto -> bb20;
    }

    bb13: {
        _17 = const 127_u8 as char (IntToInt);
        _16 = Ne(_13, move _17);
        switchInt(move _16) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _19 = &mut _6;
        _18 = std::string::String::push(move _19, _13) -> [return: bb24, unwind: bb22];
    }

    bb15: {
        _21 = &mut _6;
        _25 = char::methods::<impl char>::escape_default(_13) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        _24 = <std::char::EscapeDefault as Iterator>::collect::<std::string::String>(move _25) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        _23 = &_24;
        _22 = <std::string::String as Deref>::deref(_23) -> [return: bb18, unwind: bb21];
    }

    bb18: {
        _20 = <std::string::String as AddAssign<&str>>::add_assign(move _21, _22) -> [return: bb19, unwind: bb21];
    }

    bb19: {
        drop(_24) -> [return: bb8, unwind: bb22];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_24) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_6) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24: {
        goto -> bb8;
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::escape::{closure#0}(_1: &mut {closure@src/meta/name.rs:81:18: 81:21}, _2: char) -> bool {
    debug c => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: char;
    let mut _5: char;

    bb0: {
        _4 = const 32_u8 as char (IntToInt);
        _3 = Ge(_2, move _4);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = const 127_u8 as char (IntToInt);
        _0 = Ne(_2, move _5);
        goto -> bb3;
    }

    bb2: {
        _0 = const false;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::render(_1: &Name, _2: &Colors, _3: &icon::Icons, _4: &DisplayOption<'_>) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    debug icons => _3;
    debug display_option => _4;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let _5: std::string::String;
    let mut _6: isize;
    let _7: std::string::String;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 2];
    let _12: [core::fmt::rt::Argument<'_>; 2];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &std::string::String;
    let _18: std::string::String;
    let _19: &str;
    let _20: &&std::path::Path;
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let _25: &[core::fmt::rt::Argument<'_>; 2];
    let _26: [core::fmt::rt::Argument<'_>; 2];
    let mut _27: core::fmt::rt::Argument<'_>;
    let _28: &std::string::String;
    let _29: std::string::String;
    let mut _30: core::fmt::rt::Argument<'_>;
    let _31: &std::string::String;
    let _32: std::string::String;
    let _33: &str;
    let _34: &std::borrow::Cow<'_, str>;
    let _35: std::borrow::Cow<'_, str>;
    let _36: &std::path::Path;
    let mut _37: &std::path::PathBuf;
    let _38: std::path::PathBuf;
    let _39: std::string::String;
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let _43: &[core::fmt::rt::Argument<'_>; 2];
    let _44: [core::fmt::rt::Argument<'_>; 2];
    let mut _45: core::fmt::rt::Argument<'_>;
    let _46: &std::string::String;
    let _47: std::string::String;
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &std::string::String;
    let _50: std::string::String;
    let _51: &str;
    let _52: &std::borrow::Cow<'_, str>;
    let _53: std::borrow::Cow<'_, str>;
    let _54: &std::path::Path;
    let mut _55: &std::path::PathBuf;
    let mut _57: isize;
    let mut _61: std::string::String;
    let _62: &std::path::Path;
    let _63: &std::path::PathBuf;
    let _64: &color::Elem;
    let mut _65: &[&str; 2];
    let mut _67: &[&str; 2];
    let mut _68: bool;
    scope 1 {
        debug content => _5;
        let _56: color::Elem;
        let _58: bool;
        let _59: bool;
        let _60: bool;
        scope 6 {
            debug elem => _56;
        }
        scope 7 {
            debug uid => _58;
        }
        scope 8 {
            debug uid => _59;
            debug exec => _60;
        }
    }
    scope 2 {
        debug res => _7;
    }
    scope 3 {
        debug base_path => _20;
        let _21: std::string::String;
        let mut _66: &[&str; 2];
        scope 4 {
            debug res => _21;
        }
    }
    scope 5 {
        debug res => _39;
    }

    bb0: {
        _68 = const false;
        _6 = discriminant((*_4));
        switchInt(move _6) -> [0: bb3, 1: bb13, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _65 = const _;
        _41 = _65 as &[&str] (PointerCoercion(Unsize));
        _47 = icon::Icons::get(_3, _1) -> [return: bb28, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _67 = const _;
        _9 = _67 as &[&str] (PointerCoercion(Unsize));
        _15 = icon::Icons::get(_3, _1) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_14) -> [return: bb5, unwind: bb66];
    }

    bb5: {
        _19 = Name::file_name(_1) -> [return: bb6, unwind: bb66];
    }

    bb6: {
        _18 = Name::escape(_1, _19) -> [return: bb7, unwind: bb66];
    }

    bb7: {
        _17 = &_18;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_17) -> [return: bb8, unwind: bb65];
    }

    bb8: {
        _12 = [move _13, move _16];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb9, unwind: bb65];
    }

    bb9: {
        _7 = std::fmt::format(move _8) -> [return: bb10, unwind: bb65];
    }

    bb10: {
        drop(_18) -> [return: bb11, unwind: bb63];
    }

    bb11: {
        drop(_15) -> [return: bb12, unwind: bb64];
    }

    bb12: {
        _5 = move _7;
        goto -> bb40;
    }

    bb13: {
        _20 = &(((*_4) as Relative).0: &std::path::Path);
        _66 = const _;
        _23 = _66 as &[&str] (PointerCoercion(Unsize));
        _29 = icon::Icons::get(_3, _1) -> [return: bb14, unwind continue];
    }

    bb14: {
        _28 = &_29;
        _27 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_28) -> [return: bb15, unwind: bb62];
    }

    bb15: {
        _38 = Name::relative_path::<&&Path>(_1, _20) -> [return: bb16, unwind: bb62];
    }

    bb16: {
        _37 = &_38;
        _36 = <PathBuf as Deref>::deref(move _37) -> [return: bb17, unwind: bb61];
    }

    bb17: {
        _35 = Path::to_string_lossy(_36) -> [return: bb18, unwind: bb61];
    }

    bb18: {
        _34 = &_35;
        _33 = <Cow<'_, str> as Deref>::deref(_34) -> [return: bb19, unwind: bb60];
    }

    bb19: {
        _32 = Name::escape(_1, _33) -> [return: bb20, unwind: bb60];
    }

    bb20: {
        _31 = &_32;
        _30 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_31) -> [return: bb21, unwind: bb59];
    }

    bb21: {
        _26 = [move _27, move _30];
        _25 = &_26;
        _24 = _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _22 = Arguments::<'_>::new_v1(move _23, move _24) -> [return: bb22, unwind: bb59];
    }

    bb22: {
        _21 = std::fmt::format(move _22) -> [return: bb23, unwind: bb59];
    }

    bb23: {
        drop(_32) -> [return: bb24, unwind: bb55];
    }

    bb24: {
        drop(_35) -> [return: bb25, unwind: bb56];
    }

    bb25: {
        drop(_38) -> [return: bb26, unwind: bb57];
    }

    bb26: {
        drop(_29) -> [return: bb27, unwind: bb58];
    }

    bb27: {
        _5 = move _21;
        goto -> bb40;
    }

    bb28: {
        _46 = &_47;
        _45 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_46) -> [return: bb29, unwind: bb54];
    }

    bb29: {
        _55 = &((*_1).1: std::path::PathBuf);
        _54 = <PathBuf as Deref>::deref(move _55) -> [return: bb30, unwind: bb54];
    }

    bb30: {
        _53 = Path::to_string_lossy(_54) -> [return: bb31, unwind: bb54];
    }

    bb31: {
        _52 = &_53;
        _51 = <Cow<'_, str> as Deref>::deref(_52) -> [return: bb32, unwind: bb53];
    }

    bb32: {
        _50 = Name::escape(_1, _51) -> [return: bb33, unwind: bb53];
    }

    bb33: {
        _49 = &_50;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_49) -> [return: bb34, unwind: bb52];
    }

    bb34: {
        _44 = [move _45, move _48];
        _43 = &_44;
        _42 = _43 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> [return: bb35, unwind: bb52];
    }

    bb35: {
        _39 = std::fmt::format(move _40) -> [return: bb36, unwind: bb52];
    }

    bb36: {
        drop(_50) -> [return: bb37, unwind: bb49];
    }

    bb37: {
        drop(_53) -> [return: bb38, unwind: bb50];
    }

    bb38: {
        drop(_47) -> [return: bb39, unwind: bb51];
    }

    bb39: {
        _5 = move _39;
        goto -> bb40;
    }

    bb40: {
        _57 = discriminant(((*_1).3: meta::filetype::FileType));
        switchInt(move _57) -> [1: bb42, 2: bb43, 3: bb45, 4: bb44, otherwise: bb41];
    }

    bb41: {
        _56 = Elem::File { exec: const false, uid: const false };
        goto -> bb46;
    }

    bb42: {
        _56 = Elem::CharDevice;
        goto -> bb46;
    }

    bb43: {
        _58 = ((((*_1).3: meta::filetype::FileType) as Directory).0: bool);
        _56 = Elem::Dir { uid: _58 };
        goto -> bb46;
    }

    bb44: {
        _56 = Elem::SymLink;
        goto -> bb46;
    }

    bb45: {
        _59 = ((((*_1).3: meta::filetype::FileType) as File).0: bool);
        _60 = ((((*_1).3: meta::filetype::FileType) as File).1: bool);
        _56 = Elem::File { exec: _60, uid: _59 };
        goto -> bb46;
    }

    bb46: {
        _68 = const true;
        _61 = move _5;
        _63 = &((*_1).1: std::path::PathBuf);
        _62 = <PathBuf as Deref>::deref(_63) -> [return: bb47, unwind: bb69];
    }

    bb47: {
        _64 = &_56;
        _68 = const false;
        _0 = Colors::colorize_using_path::<'_>(_2, move _61, _62, _64) -> [return: bb48, unwind: bb69];
    }

    bb48: {
        _68 = const false;
        return;
    }

    bb49 (cleanup): {
        drop(_53) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_47) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_39) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_50) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_53) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_47) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_35) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_38) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_29) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_21) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_32) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_35) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_38) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_29) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_15) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_7) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_18) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_15) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        resume;
    }

    bb68 (cleanup): {
        drop(_61) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_68) -> [0: bb67, otherwise: bb68];
    }
}

promoted[0] in name::<impl at src/meta/name.rs:23:1: 23:10>::render: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const ""];
        _0 = &_1;
        return;
    }
}

promoted[1] in name::<impl at src/meta/name.rs:23:1: 23:10>::render: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const ""];
        _0 = &_1;
        return;
    }
}

promoted[2] in name::<impl at src/meta/name.rs:23:1: 23:10>::render: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const ""];
        _0 = &_1;
        return;
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::extension(_1: &Name) -> std::option::Option<&str> {
    debug self => _1;
    let mut _0: std::option::Option<&str>;
    let mut _2: &std::option::Option<std::string::String>;

    bb0: {
        _2 = &((*_1).2: std::option::Option<std::string::String>);
        _0 = std::option::Option::<std::string::String>::as_deref(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn name::<impl at src/meta/name.rs:23:1: 23:10>::file_type(_1: &Name) -> filetype::FileType {
    debug self => _1;
    let mut _0: meta::filetype::FileType;

    bb0: {
        _0 = ((*_1).3: meta::filetype::FileType);
        return;
    }
}

fn name::<impl at src/meta/name.rs:144:1: 144:18>::cmp(_1: &Name, _2: &Name) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: &std::string::String;
    let _4: std::string::String;
    let _5: &str;
    let mut _6: &std::string::String;
    let _7: &std::string::String;
    let _8: std::string::String;
    let _9: &str;
    let mut _10: &std::string::String;

    bb0: {
        _6 = &((*_1).0: std::string::String);
        _5 = <std::string::String as Deref>::deref(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = str::<impl str>::to_lowercase(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _10 = &((*_2).0: std::string::String);
        _9 = <std::string::String as Deref>::deref(move _10) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _8 = str::<impl str>::to_lowercase(_9) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _7 = &_8;
        _0 = <std::string::String as Ord>::cmp(move _3, _7) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_8) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_8) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn name::<impl at src/meta/name.rs:150:1: 150:25>::partial_cmp(_1: &Name, _2: &Name) -> std::option::Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let mut _3: &std::string::String;
    let _4: std::string::String;
    let _5: &str;
    let mut _6: &std::string::String;
    let _7: &std::string::String;
    let _8: std::string::String;
    let _9: &str;
    let mut _10: &std::string::String;

    bb0: {
        _6 = &((*_1).0: std::string::String);
        _5 = <std::string::String as Deref>::deref(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = str::<impl str>::to_lowercase(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _10 = &((*_2).0: std::string::String);
        _9 = <std::string::String as Deref>::deref(move _10) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _8 = str::<impl str>::to_lowercase(_9) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _7 = &_8;
        _0 = <std::string::String as PartialOrd>::partial_cmp(move _3, _7) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_8) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_8) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn name::<impl at src/meta/name.rs:158:1: 158:24>::eq(_1: &Name, _2: &Name) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: &str;
    let mut _4: &std::string::String;
    let _5: &str;
    let _6: &std::string::String;
    let _7: std::string::String;
    let _8: &str;
    let mut _9: &std::string::String;

    bb0: {
        _4 = &((*_1).0: std::string::String);
        _3 = <std::string::String as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &((*_2).0: std::string::String);
        _8 = <std::string::String as Deref>::deref(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = str::<impl str>::to_lowercase(_8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = &_7;
        _5 = <std::string::String as Deref>::deref(_6) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _0 = core::str::<impl str>::eq_ignore_ascii_case(_3, _5) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_7) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn owner::<impl at src/meta/owner.rs:5:10: 5:15>::clone(_1: &Owner) -> Owner {
    debug self => _1;
    let mut _0: meta::owner::Owner;
    let mut _2: std::string::String;
    let _3: &std::string::String;
    let mut _4: std::string::String;
    let _5: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <std::string::String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::string::String);
        _4 = <std::string::String as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = Owner { user: move _2, group: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn owner::<impl at src/meta/owner.rs:5:17: 5:22>::fmt(_1: &Owner, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::string::String;
    let _10: &std::string::String;

    bb0: {
        _3 = const "Owner";
        _4 = const "user";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "group";
        _10 = &((*_1).1: std::string::String);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn owner::<impl at src/meta/owner.rs:11:1: 11:11>::new(_1: std::string::String, _2: std::string::String) -> Owner {
    debug user => _1;
    debug group => _2;
    let mut _0: meta::owner::Owner;

    bb0: {
        _0 = Owner { user: move _1, group: move _2 };
        return;
    }
}

fn owner::<impl at src/meta/owner.rs:19:1: 19:38>::from(_1: &Metadata) -> Owner {
    debug meta => _1;
    let mut _0: meta::owner::Owner;
    let _2: std::string::String;
    let mut _3: std::option::Option<users::User>;
    let mut _4: u32;
    let mut _5: isize;
    let _6: users::User;
    let mut _7: &std::borrow::Cow<'_, str>;
    let _8: std::borrow::Cow<'_, str>;
    let _9: &std::ffi::OsStr;
    let mut _10: &users::User;
    let mut _11: &u32;
    let _12: u32;
    let mut _14: std::option::Option<users::Group>;
    let mut _15: u32;
    let mut _16: isize;
    let mut _18: &std::borrow::Cow<'_, str>;
    let _19: std::borrow::Cow<'_, str>;
    let _20: &std::ffi::OsStr;
    let mut _21: &users::Group;
    let mut _22: &u32;
    let _23: u32;
    let mut _24: std::string::String;
    let mut _25: std::string::String;
    scope 1 {
        debug user => _2;
        let _13: std::string::String;
        let _17: users::Group;
        scope 3 {
            debug group => _13;
        }
        scope 4 {
            debug res => _17;
        }
    }
    scope 2 {
        debug res => _6;
    }

    bb0: {
        _4 = <Metadata as std::os::unix::fs::MetadataExt>::uid(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = users::get_user_by_uid(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _12 = <Metadata as std::os::unix::fs::MetadataExt>::uid(_1) -> [return: bb10, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Some).0: users::User);
        _10 = &_6;
        _9 = User::name(move _10) -> [return: bb6, unwind: bb24];
    }

    bb6: {
        _8 = OsStr::to_string_lossy(_9) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _7 = &_8;
        _2 = <Cow<'_, str> as ToString>::to_string(move _7) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        drop(_8) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        drop(_6) -> [return: bb26, unwind continue];
    }

    bb10: {
        _11 = &_12;
        _2 = <u32 as ToString>::to_string(move _11) -> [return: bb26, unwind continue];
    }

    bb11: {
        _14 = users::get_group_by_gid(move _15) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _23 = <Metadata as std::os::unix::fs::MetadataExt>::gid(_1) -> [return: bb19, unwind: bb22];
    }

    bb14: {
        _17 = move ((_14 as Some).0: users::Group);
        _21 = &_17;
        _20 = Group::name(move _21) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        _19 = OsStr::to_string_lossy(_20) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _18 = &_19;
        _13 = <Cow<'_, str> as ToString>::to_string(move _18) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        drop(_19) -> [return: bb18, unwind: bb21];
    }

    bb18: {
        drop(_17) -> [return: bb27, unwind: bb22];
    }

    bb19: {
        _22 = &_23;
        _13 = <u32 as ToString>::to_string(move _22) -> [return: bb28, unwind: bb22];
    }

    bb20 (cleanup): {
        drop(_19) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_17) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_8) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_6) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26: {
        _15 = <Metadata as std::os::unix::fs::MetadataExt>::gid(_1) -> [return: bb11, unwind: bb22];
    }

    bb27: {
        _24 = move _2;
        _25 = move _13;
        _0 = Owner { user: move _24, group: move _25 };
        return;
    }

    bb28: {
        goto -> bb27;
    }
}

fn owner::<impl at src/meta/owner.rs:38:1: 38:11>::render_user(_1: &Owner, _2: &Colors) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let mut _3: std::string::String;
    let mut _4: &std::string::String;
    let mut _5: &color::Elem;

    bb0: {
        _4 = &((*_1).0: std::string::String);
        _3 = <std::string::String as Clone>::clone(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const _;
        _0 = Colors::colorize::<'_>(_2, move _3, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in owner::<impl at src/meta/owner.rs:38:1: 38:11>::render_user: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::User;
        _0 = &_1;
        return;
    }
}

fn owner::<impl at src/meta/owner.rs:38:1: 38:11>::render_group(_1: &Owner, _2: &Colors) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let mut _3: std::string::String;
    let mut _4: &std::string::String;
    let mut _5: &color::Elem;

    bb0: {
        _4 = &((*_1).1: std::string::String);
        _3 = <std::string::String as Clone>::clone(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const _;
        _0 = Colors::colorize::<'_>(_2, move _3, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in owner::<impl at src/meta/owner.rs:38:1: 38:11>::render_group: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Group;
        _0 = &_1;
        return;
    }
}

fn permissions::<impl at src/meta/permissions.rs:5:10: 5:15>::fmt(_1: &permissions::Permissions, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 12];
    let _5: [&dyn std::fmt::Debug; 12];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &bool;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &bool;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &bool;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &bool;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &bool;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &bool;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &bool;
    let mut _20: &dyn std::fmt::Debug;
    let _21: &bool;
    let mut _22: &dyn std::fmt::Debug;
    let _23: &bool;
    let mut _24: &dyn std::fmt::Debug;
    let _25: &bool;
    let mut _26: &dyn std::fmt::Debug;
    let _27: &bool;
    let mut _28: &dyn std::fmt::Debug;
    let _29: &&bool;
    let _30: &bool;
    let _31: &str;
    let mut _32: &[&str];
    let mut _33: &[&str; 12];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _33 = const _;
        _7 = &((*_1).0: bool);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: bool);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: bool);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: bool);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: bool);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: bool);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _19 = &((*_1).6: bool);
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _21 = &((*_1).7: bool);
        _20 = _21 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _23 = &((*_1).8: bool);
        _22 = _23 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _25 = &((*_1).9: bool);
        _24 = _25 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _27 = &((*_1).10: bool);
        _26 = _27 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _30 = &((*_1).11: bool);
        _29 = &_30;
        _28 = _29 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _31 = const "Permissions";
        _32 = _33 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _31, move _32, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in permissions::<impl at src/meta/permissions.rs:5:10: 5:15>::fmt: &[&str; 12] = {
    let mut _0: &[&str; 12];
    let mut _1: [&str; 12];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: &str;
    let mut _19: &str;
    let mut _20: &str;
    let mut _21: &str;
    let mut _22: &str;
    let mut _23: &str;

    bb0: {
        _3 = const "user_write";
        _2 = &(*_3);
        _5 = const "user_execute";
        _4 = &(*_5);
        _7 = const "group_read";
        _6 = &(*_7);
        _9 = const "group_write";
        _8 = &(*_9);
        _11 = const "group_execute";
        _10 = &(*_11);
        _13 = const "other_read";
        _12 = &(*_13);
        _15 = const "other_write";
        _14 = &(*_15);
        _17 = const "other_execute";
        _16 = &(*_17);
        _19 = const "sticky";
        _18 = &(*_19);
        _21 = const "setgid";
        _20 = &(*_21);
        _23 = const "setuid";
        _22 = &(*_23);
        _1 = [const "user_read", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22];
        _0 = &_1;
        return;
    }
}

fn permissions::<impl at src/meta/permissions.rs:5:17: 5:26>::eq(_1: &permissions::Permissions, _2: &permissions::Permissions) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;

    bb0: {
        _4 = ((*_1).0: bool);
        _5 = ((*_2).0: bool);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb12, otherwise: bb1];
    }

    bb1: {
        _7 = ((*_1).1: bool);
        _8 = ((*_2).1: bool);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb12, otherwise: bb2];
    }

    bb2: {
        _10 = ((*_1).2: bool);
        _11 = ((*_2).2: bool);
        _9 = Eq(move _10, move _11);
        switchInt(move _9) -> [0: bb12, otherwise: bb3];
    }

    bb3: {
        _13 = ((*_1).3: bool);
        _14 = ((*_2).3: bool);
        _12 = Eq(move _13, move _14);
        switchInt(move _12) -> [0: bb12, otherwise: bb4];
    }

    bb4: {
        _16 = ((*_1).4: bool);
        _17 = ((*_2).4: bool);
        _15 = Eq(move _16, move _17);
        switchInt(move _15) -> [0: bb12, otherwise: bb5];
    }

    bb5: {
        _19 = ((*_1).5: bool);
        _20 = ((*_2).5: bool);
        _18 = Eq(move _19, move _20);
        switchInt(move _18) -> [0: bb12, otherwise: bb6];
    }

    bb6: {
        _22 = ((*_1).6: bool);
        _23 = ((*_2).6: bool);
        _21 = Eq(move _22, move _23);
        switchInt(move _21) -> [0: bb12, otherwise: bb7];
    }

    bb7: {
        _25 = ((*_1).7: bool);
        _26 = ((*_2).7: bool);
        _24 = Eq(move _25, move _26);
        switchInt(move _24) -> [0: bb12, otherwise: bb8];
    }

    bb8: {
        _28 = ((*_1).8: bool);
        _29 = ((*_2).8: bool);
        _27 = Eq(move _28, move _29);
        switchInt(move _27) -> [0: bb12, otherwise: bb9];
    }

    bb9: {
        _31 = ((*_1).9: bool);
        _32 = ((*_2).9: bool);
        _30 = Eq(move _31, move _32);
        switchInt(move _30) -> [0: bb12, otherwise: bb10];
    }

    bb10: {
        _34 = ((*_1).10: bool);
        _35 = ((*_2).10: bool);
        _33 = Eq(move _34, move _35);
        switchInt(move _33) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _36 = ((*_1).11: bool);
        _37 = ((*_2).11: bool);
        _0 = Eq(move _36, move _37);
        goto -> bb13;
    }

    bb12: {
        _0 = const false;
        goto -> bb13;
    }

    bb13: {
        return;
    }
}

fn permissions::<impl at src/meta/permissions.rs:5:28: 5:30>::assert_receiver_is_total_eq(_1: &permissions::Permissions) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn permissions::<impl at src/meta/permissions.rs:5:38: 5:43>::clone(_1: &permissions::Permissions) -> permissions::Permissions {
    debug self => _1;
    let mut _0: meta::permissions::Permissions;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn permissions::<impl at src/meta/permissions.rs:24:1: 24:44>::from(_1: &Metadata) -> permissions::Permissions {
    debug meta => _1;
    let mut _0: meta::permissions::Permissions;
    let _2: u32;
    let mut _3: &std::fs::Permissions;
    let _4: std::fs::Permissions;
    let mut _6: &u32;
    let mut _7: bool;
    let mut _8: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _9: (u32,);
    let mut _10: bool;
    let mut _11: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _12: (u32,);
    let mut _13: bool;
    let mut _14: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _15: (u32,);
    let mut _16: bool;
    let mut _17: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _18: (u32,);
    let mut _19: bool;
    let mut _20: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _21: (u32,);
    let mut _22: bool;
    let mut _23: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _24: (u32,);
    let mut _25: bool;
    let mut _26: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _27: (u32,);
    let mut _28: bool;
    let mut _29: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _30: (u32,);
    let mut _31: bool;
    let mut _32: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _33: (u32,);
    let mut _34: bool;
    let mut _35: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _36: (u32,);
    let mut _37: bool;
    let mut _38: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _39: (u32,);
    let mut _40: bool;
    let mut _41: &{closure@src/meta/permissions.rs:30:23: 30:28};
    let mut _42: (u32,);
    scope 1 {
        debug bits => _2;
        let _5: {closure@src/meta/permissions.rs:30:23: 30:28};
        scope 2 {
            debug has_bit => _5;
        }
    }

    bb0: {
        _4 = Metadata::permissions(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _2 = <std::fs::Permissions as PermissionsExt>::mode(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_2;
        _5 = {closure@src/meta/permissions.rs:30:23: 30:28} { bits: move _6 };
        _8 = &_5;
        _9 = (const _,);
        _7 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _8, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = &_5;
        _12 = (const _,);
        _10 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _11, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_5;
        _15 = (const _,);
        _13 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _14, move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _17 = &_5;
        _18 = (const _,);
        _16 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _17, move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = &_5;
        _21 = (const _,);
        _19 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _20, move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        _23 = &_5;
        _24 = (const _,);
        _22 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _23, move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        _26 = &_5;
        _27 = (const _,);
        _25 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _26, move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        _29 = &_5;
        _30 = (const _,);
        _28 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _29, move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        _32 = &_5;
        _33 = (const _,);
        _31 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _32, move _33) -> [return: bb11, unwind continue];
    }

    bb11: {
        _35 = &_5;
        _36 = (const _,);
        _34 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _35, move _36) -> [return: bb12, unwind continue];
    }

    bb12: {
        _38 = &_5;
        _39 = (const _,);
        _37 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _38, move _39) -> [return: bb13, unwind continue];
    }

    bb13: {
        _41 = &_5;
        _42 = (const _,);
        _40 = <{closure@src/meta/permissions.rs:30:23: 30:28} as Fn<(u32,)>>::call(move _41, move _42) -> [return: bb14, unwind continue];
    }

    bb14: {
        _0 = permissions::Permissions { user_read: move _7, user_write: move _10, user_execute: move _13, group_read: move _16, group_write: move _19, group_execute: move _22, other_read: move _25, other_write: move _28, other_execute: move _31, sticky: move _34, setgid: move _37, setuid: move _40 };
        return;
    }
}

fn permissions::<impl at src/meta/permissions.rs:24:1: 24:44>::from::{closure#0}(_1: &{closure@src/meta/permissions.rs:30:23: 30:28}, _2: u32) -> bool {
    debug bit => _2;
    debug bits => (*((*_1).0: &u32));
    let mut _0: bool;
    let mut _3: u32;
    let mut _4: u32;
    let mut _5: &u32;

    bb0: {
        _5 = deref_copy ((*_1).0: &u32);
        _4 = (*_5);
        _3 = BitAnd(move _4, _2);
        _0 = Eq(move _3, _2);
        return;
    }
}

fn permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render(_1: &permissions::Permissions, _2: &Colors) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let _3: {closure@src/meta/permissions.rs:59:19: 59:56};
    let mut _4: &&color::Colors;
    let _6: &[ansi_term::ANSIGenericString<'_, str>; 9];
    let _7: [ansi_term::ANSIGenericString<'_, str>; 9];
    let mut _8: ansi_term::ANSIGenericString<'_, str>;
    let mut _9: &{closure@src/meta/permissions.rs:59:19: 59:56};
    let mut _10: (bool, &str, &color::Elem);
    let mut _11: bool;
    let mut _12: ansi_term::ANSIGenericString<'_, str>;
    let mut _13: &{closure@src/meta/permissions.rs:59:19: 59:56};
    let mut _14: (bool, &str, &color::Elem);
    let mut _15: bool;
    let mut _16: ansi_term::ANSIGenericString<'_, str>;
    let mut _17: (bool, bool);
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: &color::Colors;
    let mut _21: std::string::String;
    let mut _22: &color::Colors;
    let mut _23: std::string::String;
    let mut _24: &color::Colors;
    let mut _25: std::string::String;
    let mut _26: &color::Colors;
    let mut _27: std::string::String;
    let mut _28: ansi_term::ANSIGenericString<'_, str>;
    let mut _29: &{closure@src/meta/permissions.rs:59:19: 59:56};
    let mut _30: (bool, &str, &color::Elem);
    let mut _31: bool;
    let mut _32: ansi_term::ANSIGenericString<'_, str>;
    let mut _33: &{closure@src/meta/permissions.rs:59:19: 59:56};
    let mut _34: (bool, &str, &color::Elem);
    let mut _35: bool;
    let mut _36: ansi_term::ANSIGenericString<'_, str>;
    let mut _37: (bool, bool);
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: &color::Colors;
    let mut _41: std::string::String;
    let mut _42: &color::Colors;
    let mut _43: std::string::String;
    let mut _44: &color::Colors;
    let mut _45: std::string::String;
    let mut _46: &color::Colors;
    let mut _47: std::string::String;
    let mut _48: ansi_term::ANSIGenericString<'_, str>;
    let mut _49: &{closure@src/meta/permissions.rs:59:19: 59:56};
    let mut _50: (bool, &str, &color::Elem);
    let mut _51: bool;
    let mut _52: ansi_term::ANSIGenericString<'_, str>;
    let mut _53: &{closure@src/meta/permissions.rs:59:19: 59:56};
    let mut _54: (bool, &str, &color::Elem);
    let mut _55: bool;
    let mut _56: ansi_term::ANSIGenericString<'_, str>;
    let mut _57: (bool, bool);
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: &color::Colors;
    let mut _61: std::string::String;
    let mut _62: &color::Colors;
    let mut _63: std::string::String;
    let mut _64: &color::Colors;
    let mut _65: std::string::String;
    let mut _66: &color::Colors;
    let mut _67: std::string::String;
    let mut _69: &ansi_term::ANSIGenericStrings<'_, str>;
    let _70: ansi_term::ANSIGenericStrings<'_, str>;
    scope 1 {
        debug bit => _3;
        let _5: &[ansi_term::ANSIGenericString<'_, str>];
        let mut _71: &color::Elem;
        let mut _72: &color::Elem;
        let mut _73: &color::Elem;
        let mut _74: &color::Elem;
        let mut _75: &color::Elem;
        let mut _76: &color::Elem;
        let mut _77: &color::Elem;
        let mut _78: &color::Elem;
        let mut _79: &color::Elem;
        let mut _80: &color::Elem;
        let mut _81: &color::Elem;
        let mut _82: &color::Elem;
        let mut _83: &color::Elem;
        let mut _84: &color::Elem;
        let mut _85: &color::Elem;
        let mut _86: &color::Elem;
        let mut _87: &color::Elem;
        let mut _88: &color::Elem;
        scope 2 {
            debug strings => _5;
            let _68: std::string::String;
            scope 3 {
                debug res => _68;
            }
        }
    }

    bb0: {
        _4 = &_2;
        _3 = {closure@src/meta/permissions.rs:59:19: 59:56} { colors: move _4 };
        _9 = &_3;
        _11 = ((*_1).0: bool);
        _88 = const _;
        _10 = (move _11, const "r", _88);
        _8 = <{closure@src/meta/permissions.rs:59:19: 59:56} as Fn<(bool, &str, &Elem)>>::call(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = &_3;
        _15 = ((*_1).1: bool);
        _87 = const _;
        _14 = (move _15, const "w", _87);
        _12 = <{closure@src/meta/permissions.rs:59:19: 59:56} as Fn<(bool, &str, &Elem)>>::call(move _13, move _14) -> [return: bb2, unwind: bb52];
    }

    bb2: {
        _18 = ((*_1).2: bool);
        _19 = ((*_1).11: bool);
        _17 = (move _18, move _19);
        switchInt((_17.0: bool)) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        switchInt((_17.1: bool)) -> [0: bb6, otherwise: bb10];
    }

    bb4: {
        switchInt((_17.1: bool)) -> [0: bb8, otherwise: bb5];
    }

    bb5: {
        _26 = _2;
        _27 = <std::string::String as From<&str>>::from(const "s") -> [return: bb12, unwind: bb51];
    }

    bb6: {
        _20 = _2;
        _21 = <std::string::String as From<&str>>::from(const "-") -> [return: bb7, unwind: bb51];
    }

    bb7: {
        _86 = const _;
        _16 = Colors::colorize::<'_>(move _20, move _21, _86) -> [return: bb54, unwind: bb51];
    }

    bb8: {
        _22 = _2;
        _23 = <std::string::String as From<&str>>::from(const "x") -> [return: bb9, unwind: bb51];
    }

    bb9: {
        _85 = const _;
        _16 = Colors::colorize::<'_>(move _22, move _23, _85) -> [return: bb55, unwind: bb51];
    }

    bb10: {
        _24 = _2;
        _25 = <std::string::String as From<&str>>::from(const "S") -> [return: bb11, unwind: bb51];
    }

    bb11: {
        _84 = const _;
        _16 = Colors::colorize::<'_>(move _24, move _25, _84) -> [return: bb56, unwind: bb51];
    }

    bb12: {
        _83 = const _;
        _16 = Colors::colorize::<'_>(move _26, move _27, _83) -> [return: bb57, unwind: bb51];
    }

    bb13: {
        _29 = &_3;
        _31 = ((*_1).3: bool);
        _82 = const _;
        _30 = (move _31, const "r", _82);
        _28 = <{closure@src/meta/permissions.rs:59:19: 59:56} as Fn<(bool, &str, &Elem)>>::call(move _29, move _30) -> [return: bb14, unwind: bb50];
    }

    bb14: {
        _33 = &_3;
        _35 = ((*_1).4: bool);
        _81 = const _;
        _34 = (move _35, const "w", _81);
        _32 = <{closure@src/meta/permissions.rs:59:19: 59:56} as Fn<(bool, &str, &Elem)>>::call(move _33, move _34) -> [return: bb15, unwind: bb49];
    }

    bb15: {
        _38 = ((*_1).5: bool);
        _39 = ((*_1).10: bool);
        _37 = (move _38, move _39);
        switchInt((_37.0: bool)) -> [0: bb16, otherwise: bb17];
    }

    bb16: {
        switchInt((_37.1: bool)) -> [0: bb19, otherwise: bb23];
    }

    bb17: {
        switchInt((_37.1: bool)) -> [0: bb21, otherwise: bb18];
    }

    bb18: {
        _46 = _2;
        _47 = <std::string::String as From<&str>>::from(const "s") -> [return: bb25, unwind: bb48];
    }

    bb19: {
        _40 = _2;
        _41 = <std::string::String as From<&str>>::from(const "-") -> [return: bb20, unwind: bb48];
    }

    bb20: {
        _80 = const _;
        _36 = Colors::colorize::<'_>(move _40, move _41, _80) -> [return: bb58, unwind: bb48];
    }

    bb21: {
        _42 = _2;
        _43 = <std::string::String as From<&str>>::from(const "x") -> [return: bb22, unwind: bb48];
    }

    bb22: {
        _79 = const _;
        _36 = Colors::colorize::<'_>(move _42, move _43, _79) -> [return: bb59, unwind: bb48];
    }

    bb23: {
        _44 = _2;
        _45 = <std::string::String as From<&str>>::from(const "S") -> [return: bb24, unwind: bb48];
    }

    bb24: {
        _78 = const _;
        _36 = Colors::colorize::<'_>(move _44, move _45, _78) -> [return: bb60, unwind: bb48];
    }

    bb25: {
        _77 = const _;
        _36 = Colors::colorize::<'_>(move _46, move _47, _77) -> [return: bb61, unwind: bb48];
    }

    bb26: {
        _49 = &_3;
        _51 = ((*_1).6: bool);
        _76 = const _;
        _50 = (move _51, const "r", _76);
        _48 = <{closure@src/meta/permissions.rs:59:19: 59:56} as Fn<(bool, &str, &Elem)>>::call(move _49, move _50) -> [return: bb27, unwind: bb47];
    }

    bb27: {
        _53 = &_3;
        _55 = ((*_1).7: bool);
        _75 = const _;
        _54 = (move _55, const "w", _75);
        _52 = <{closure@src/meta/permissions.rs:59:19: 59:56} as Fn<(bool, &str, &Elem)>>::call(move _53, move _54) -> [return: bb28, unwind: bb46];
    }

    bb28: {
        _58 = ((*_1).8: bool);
        _59 = ((*_1).9: bool);
        _57 = (move _58, move _59);
        switchInt((_57.0: bool)) -> [0: bb29, otherwise: bb30];
    }

    bb29: {
        switchInt((_57.1: bool)) -> [0: bb32, otherwise: bb36];
    }

    bb30: {
        switchInt((_57.1: bool)) -> [0: bb34, otherwise: bb31];
    }

    bb31: {
        _66 = _2;
        _67 = <std::string::String as From<&str>>::from(const "t") -> [return: bb38, unwind: bb45];
    }

    bb32: {
        _60 = _2;
        _61 = <std::string::String as From<&str>>::from(const "-") -> [return: bb33, unwind: bb45];
    }

    bb33: {
        _74 = const _;
        _56 = Colors::colorize::<'_>(move _60, move _61, _74) -> [return: bb62, unwind: bb45];
    }

    bb34: {
        _62 = _2;
        _63 = <std::string::String as From<&str>>::from(const "x") -> [return: bb35, unwind: bb45];
    }

    bb35: {
        _73 = const _;
        _56 = Colors::colorize::<'_>(move _62, move _63, _73) -> [return: bb63, unwind: bb45];
    }

    bb36: {
        _64 = _2;
        _65 = <std::string::String as From<&str>>::from(const "T") -> [return: bb37, unwind: bb45];
    }

    bb37: {
        _72 = const _;
        _56 = Colors::colorize::<'_>(move _64, move _65, _72) -> [return: bb64, unwind: bb45];
    }

    bb38: {
        _71 = const _;
        _56 = Colors::colorize::<'_>(move _66, move _67, _71) -> [return: bb65, unwind: bb45];
    }

    bb39: {
        _7 = [move _8, move _12, move _16, move _28, move _32, move _36, move _48, move _52, move _56];
        _6 = &_7;
        _5 = _6 as &[ansi_term::ANSIGenericString<'_, str>] (PointerCoercion(Unsize));
        _70 = ANSIStrings(_5) -> [return: bb40, unwind: bb44];
    }

    bb40: {
        _69 = &_70;
        _68 = <ANSIGenericStrings<'_, str> as ToString>::to_string(move _69) -> [return: bb41, unwind: bb44];
    }

    bb41: {
        _0 = <ANSIGenericString<'_, str> as From<std::string::String>>::from(move _68) -> [return: bb42, unwind: bb44];
    }

    bb42: {
        drop(_7) -> [return: bb43, unwind continue];
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_7) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_52) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_48) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_36) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_32) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_28) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_16) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_12) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_8) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }

    bb54: {
        goto -> bb13;
    }

    bb55: {
        goto -> bb13;
    }

    bb56: {
        goto -> bb13;
    }

    bb57: {
        goto -> bb13;
    }

    bb58: {
        goto -> bb26;
    }

    bb59: {
        goto -> bb26;
    }

    bb60: {
        goto -> bb26;
    }

    bb61: {
        goto -> bb26;
    }

    bb62: {
        goto -> bb39;
    }

    bb63: {
        goto -> bb39;
    }

    bb64: {
        goto -> bb39;
    }

    bb65: {
        goto -> bb39;
    }
}

promoted[0] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::ExecSticky;
        _0 = &_1;
        return;
    }
}

promoted[1] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::ExecSticky;
        _0 = &_1;
        return;
    }
}

promoted[2] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Exec;
        _0 = &_1;
        return;
    }
}

promoted[3] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::NoAccess;
        _0 = &_1;
        return;
    }
}

promoted[4] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Write;
        _0 = &_1;
        return;
    }
}

promoted[5] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Read;
        _0 = &_1;
        return;
    }
}

promoted[6] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::ExecSticky;
        _0 = &_1;
        return;
    }
}

promoted[7] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::ExecSticky;
        _0 = &_1;
        return;
    }
}

promoted[8] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Exec;
        _0 = &_1;
        return;
    }
}

promoted[9] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::NoAccess;
        _0 = &_1;
        return;
    }
}

promoted[10] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Write;
        _0 = &_1;
        return;
    }
}

promoted[11] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Read;
        _0 = &_1;
        return;
    }
}

promoted[12] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::ExecSticky;
        _0 = &_1;
        return;
    }
}

promoted[13] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::ExecSticky;
        _0 = &_1;
        return;
    }
}

promoted[14] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Exec;
        _0 = &_1;
        return;
    }
}

promoted[15] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::NoAccess;
        _0 = &_1;
        return;
    }
}

promoted[16] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Write;
        _0 = &_1;
        return;
    }
}

promoted[17] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::Read;
        _0 = &_1;
        return;
    }
}

fn permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render::{closure#0}(_1: &{closure@src/meta/permissions.rs:59:19: 59:56}, _2: bool, _3: &str, _4: &Elem) -> ANSIGenericString<'_, str> {
    debug bit => _2;
    debug chr => _3;
    debug elem => _4;
    debug colors => (*((*_1).0: &&color::Colors));
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let mut _5: std::string::String;
    let mut _6: std::string::String;
    let mut _7: &color::Elem;
    let mut _8: &&color::Colors;
    let mut _9: &color::Colors;
    let mut _10: &&color::Colors;
    let mut _11: &color::Colors;

    bb0: {
        switchInt(_2) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _8 = deref_copy ((*_1).0: &&color::Colors);
        _9 = deref_copy (*_8);
        _5 = <std::string::String as From<&str>>::from(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Colors::colorize::<'_>(_9, move _5, _4) -> [return: bb5, unwind continue];
    }

    bb3: {
        _10 = deref_copy ((*_1).0: &&color::Colors);
        _11 = deref_copy (*_10);
        _6 = <std::string::String as From<&str>>::from(const "-") -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = const _;
        _0 = Colors::colorize::<'_>(_11, move _6, _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

promoted[0] in permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::render::{closure#0}: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::NoAccess;
        _0 = &_1;
        return;
    }
}

fn permissions::<impl at src/meta/permissions.rs:57:1: 57:17>::is_executable(_1: &permissions::Permissions) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: bool;

    bb0: {
        _2 = ((*_1).2: bool);
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = ((*_1).5: bool);
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const true;
        goto -> bb4;
    }

    bb3: {
        _0 = ((*_1).8: bool);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

const USER_READ: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const USER_WRITE: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const USER_EXECUTE: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const GROUP_READ: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const GROUP_WRITE: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const GROUP_EXECUTE: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const OTHER_READ: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const OTHER_WRITE: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const OTHER_EXECUTE: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const STICKY: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const SETGID: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const SETUID: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:6:10: 6:15>::clone(_1: &meta::size::Unit) -> meta::size::Unit {
    debug self => _1;
    let mut _0: meta::size::Unit;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = meta::size::Unit::Tera;
        goto -> bb8;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = meta::size::Unit::None;
        goto -> bb8;
    }

    bb4: {
        _0 = meta::size::Unit::Byte;
        goto -> bb8;
    }

    bb5: {
        _0 = meta::size::Unit::Kilo;
        goto -> bb8;
    }

    bb6: {
        _0 = meta::size::Unit::Mega;
        goto -> bb8;
    }

    bb7: {
        _0 = meta::size::Unit::Giga;
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:6:17: 6:22>::fmt(_1: &meta::size::Unit, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;
    let _10: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb1, otherwise: bb2];
    }

    bb1: {
        _10 = const "Tera";
        _3 = _10;
        goto -> bb8;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "None";
        _3 = _5;
        goto -> bb8;
    }

    bb4: {
        _6 = const "Byte";
        _3 = _6;
        goto -> bb8;
    }

    bb5: {
        _7 = const "Kilo";
        _3 = _7;
        goto -> bb8;
    }

    bb6: {
        _8 = const "Mega";
        _3 = _8;
        goto -> bb8;
    }

    bb7: {
        _9 = const "Giga";
        _3 = _9;
        goto -> bb8;
    }

    bb8: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:6:24: 6:33>::eq(_1: &meta::size::Unit, _2: &meta::size::Unit) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:6:35: 6:37>::assert_receiver_is_total_eq(_1: &meta::size::Unit) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:16:10: 16:15>::clone(_1: &Size) -> Size {
    debug self => _1;
    let mut _0: meta::size::Size;
    let mut _2: u64;
    let _3: &u64;

    bb0: {
        _3 = &((*_1).0: u64);
        _2 = (*_3);
        _0 = Size { bytes: move _2 };
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:16:17: 16:22>::fmt(_1: &Size, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&u64;
    let _7: &u64;

    bb0: {
        _3 = const "Size";
        _4 = const "bytes";
        _7 = &((*_1).0: u64);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:16:24: 16:33>::eq(_1: &Size, _2: &Size) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: u64;
    let mut _4: u64;

    bb0: {
        _3 = ((*_1).0: u64);
        _4 = ((*_2).0: u64);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:16:35: 16:37>::assert_receiver_is_total_eq(_1: &Size) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:21:1: 21:37>::from(_1: &Metadata) -> Size {
    debug meta => _1;
    let mut _0: meta::size::Size;
    let _2: u64;
    scope 1 {
        debug len => _2;
    }

    bb0: {
        _2 = Metadata::len(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Size { bytes: _2 };
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:28:1: 28:10>::new(_1: u64) -> Size {
    debug bytes => _1;
    let mut _0: meta::size::Size;

    bb0: {
        _0 = Size { bytes: _1 };
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:28:1: 28:10>::get_bytes(_1: &Size) -> u64 {
    debug self => _1;
    let mut _0: u64;

    bb0: {
        _0 = ((*_1).0: u64);
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:28:1: 28:10>::format_size(_1: &Size, _2: f64) -> std::string::String {
    debug self => _1;
    debug number => _2;
    let mut _0: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 2];
    let _7: [core::fmt::rt::Argument<'_>; 2];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &f64;
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &usize;
    let _12: usize;
    let mut _13: bool;
    let mut _14: f64;
    let mut _15: &[core::fmt::rt::Placeholder];
    let _16: &[core::fmt::rt::Placeholder; 1];
    let _17: [core::fmt::rt::Placeholder; 1];
    let mut _18: core::fmt::rt::Placeholder;
    let mut _19: core::fmt::rt::Alignment;
    let mut _20: core::fmt::rt::Count;
    let mut _21: core::fmt::rt::Count;
    let mut _22: core::fmt::rt::UnsafeArg;
    let mut _23: &[&str; 1];
    scope 1 {
        debug res => _0;
    }
    scope 2 {
    }

    bb0: {
        _23 = const _;
        _4 = _23 as &[&str] (PointerCoercion(Unsize));
        _9 = &_2;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _14 = _2;
        _13 = Lt(move _14, const 10f64);
        switchInt(move _13) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = const 1_usize;
        goto -> bb4;
    }

    bb3: {
        _12 = const 0_usize;
        goto -> bb4;
    }

    bb4: {
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::from_usize(_11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _7 = [move _8, move _10];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _19 = core::fmt::rt::Alignment::Unknown;
        _20 = core::fmt::rt::Count::Param(const 1_usize);
        _21 = core::fmt::rt::Count::Implied;
        _18 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _19, const 0_u32, move _20, move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _22 = core::fmt::rt::UnsafeArg::new() -> [return: bb7, unwind continue];
    }

    bb7: {
        _3 = Arguments::<'_>::new_v1_formatted(move _4, move _5, move _15, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = std::fmt::format(move _3) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

promoted[0] in meta::size::<impl at src/meta/size.rs:28:1: 28:10>::format_size: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:28:1: 28:10>::get_unit(_1: &Size, _2: &Flags) -> meta::size::Unit {
    debug self => _1;
    debug flags => _2;
    let mut _0: meta::size::Unit;
    let mut _3: bool;
    let mut _4: u64;
    let mut _5: bool;
    let mut _6: &flags::size::SizeFlag;
    let mut _7: bool;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: (u64, bool);
    let mut _11: bool;
    let mut _12: u64;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: (u64, bool);
    let mut _16: (u64, bool);
    let mut _17: bool;
    let mut _18: u64;
    let mut _19: u64;
    let mut _20: u64;
    let mut _21: u64;
    let mut _22: (u64, bool);
    let mut _23: (u64, bool);
    let mut _24: (u64, bool);
    let mut _25: &flags::size::SizeFlag;

    bb0: {
        _4 = ((*_1).0: u64);
        _3 = Lt(move _4, const 1024_u64);
        switchInt(move _3) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        _6 = &((*_2).11: flags::size::SizeFlag);
        _25 = const _;
        _5 = <SizeFlag as PartialEq>::eq(move _6, _25) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = meta::size::Unit::Byte;
        goto -> bb17;
    }

    bb4: {
        _8 = ((*_1).0: u64);
        _10 = CheckedMul(const 1024_u64, const 1024_u64);
        assert(!move (_10.1: bool), "attempt to compute `{} * {}`, which would overflow", const 1024_u64, const 1024_u64) -> [success: bb5, unwind continue];
    }

    bb5: {
        _9 = move (_10.0: u64);
        _7 = Lt(move _8, move _9);
        switchInt(move _7) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = meta::size::Unit::Kilo;
        goto -> bb17;
    }

    bb7: {
        _12 = ((*_1).0: u64);
        _15 = CheckedMul(const 1024_u64, const 1024_u64);
        assert(!move (_15.1: bool), "attempt to compute `{} * {}`, which would overflow", const 1024_u64, const 1024_u64) -> [success: bb8, unwind continue];
    }

    bb8: {
        _14 = move (_15.0: u64);
        _16 = CheckedMul(_14, const 1024_u64);
        assert(!move (_16.1: bool), "attempt to compute `{} * {}`, which would overflow", move _14, const 1024_u64) -> [success: bb9, unwind continue];
    }

    bb9: {
        _13 = move (_16.0: u64);
        _11 = Lt(move _12, move _13);
        switchInt(move _11) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _0 = meta::size::Unit::Mega;
        goto -> bb17;
    }

    bb11: {
        _18 = ((*_1).0: u64);
        _22 = CheckedMul(const 1024_u64, const 1024_u64);
        assert(!move (_22.1: bool), "attempt to compute `{} * {}`, which would overflow", const 1024_u64, const 1024_u64) -> [success: bb12, unwind continue];
    }

    bb12: {
        _21 = move (_22.0: u64);
        _23 = CheckedMul(_21, const 1024_u64);
        assert(!move (_23.1: bool), "attempt to compute `{} * {}`, which would overflow", move _21, const 1024_u64) -> [success: bb13, unwind continue];
    }

    bb13: {
        _20 = move (_23.0: u64);
        _24 = CheckedMul(_20, const 1024_u64);
        assert(!move (_24.1: bool), "attempt to compute `{} * {}`, which would overflow", move _20, const 1024_u64) -> [success: bb14, unwind continue];
    }

    bb14: {
        _19 = move (_24.0: u64);
        _17 = Lt(move _18, move _19);
        switchInt(move _17) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _0 = meta::size::Unit::Giga;
        goto -> bb17;
    }

    bb16: {
        _0 = meta::size::Unit::Tera;
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

promoted[0] in meta::size::<impl at src/meta/size.rs:28:1: 28:10>::get_unit: &SizeFlag = {
    let mut _0: &flags::size::SizeFlag;
    let mut _1: flags::size::SizeFlag;

    bb0: {
        _1 = SizeFlag::Bytes;
        _0 = &_1;
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:28:1: 28:10>::render(_1: &Size, _2: &Colors, _3: &Flags, _4: usize) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    debug flags => _3;
    debug val_alignment => _4;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let _5: ansi_term::ANSIGenericString<'_, str>;
    let mut _8: usize;
    let mut _9: usize;
    let _10: &str;
    let mut _11: &ansi_term::ANSIGenericString<'_, str>;
    let mut _12: (usize, bool);
    let mut _13: std::ops::Range<usize>;
    let mut _14: std::ops::Range<usize>;
    let mut _15: usize;
    let mut _16: &std::string::String;
    let mut _18: std::option::Option<usize>;
    let mut _19: &mut std::ops::Range<usize>;
    let mut _20: isize;
    let _21: ();
    let mut _22: &mut std::string::String;
    let mut _24: std::boxed::Box<[ansi_term::ANSIGenericString<'_, str>]>;
    let mut _25: std::boxed::Box<[ansi_term::ANSIGenericString<'_, str>; 2]>;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: *mut u8;
    let mut _29: std::boxed::Box<[ansi_term::ANSIGenericString<'_, str>; 2]>;
    let mut _30: ansi_term::ANSIGenericString<'_, str>;
    let mut _31: std::string::String;
    let mut _32: ansi_term::ANSIGenericString<'_, str>;
    let mut _33: bool;
    let mut _34: &flags::size::SizeFlag;
    let _35: ();
    let mut _36: &mut std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _37: ansi_term::ANSIGenericString<'_, str>;
    let _38: ();
    let mut _39: &mut std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _40: ansi_term::ANSIGenericString<'_, str>;
    let mut _42: &ansi_term::ANSIGenericStrings<'_, str>;
    let _43: ansi_term::ANSIGenericStrings<'_, str>;
    let _44: &[ansi_term::ANSIGenericString<'_, str>];
    let _45: &std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: &mut std::boxed::Box<[ansi_term::ANSIGenericString<'_, str>; 2]>;
    let mut _51: ();
    let mut _52: *const [ansi_term::ANSIGenericString<'_, str>; 2];
    scope 1 {
        debug val_content => _5;
        let _6: ansi_term::ANSIGenericString<'_, str>;
        scope 2 {
            debug unit_content => _6;
            let mut _7: std::string::String;
            scope 3 {
                debug left_pad => _7;
                let mut _17: std::ops::Range<usize>;
                let mut _23: std::vec::Vec<ansi_term::ANSIGenericString<'_, str>>;
                let mut _53: *const ();
                let mut _54: usize;
                let mut _55: usize;
                let mut _56: usize;
                let mut _57: usize;
                let mut _58: bool;
                scope 4 {
                    debug iter => _17;
                }
                scope 5 {
                    debug strings => _23;
                    let _41: std::string::String;
                    let mut _46: &flags::size::SizeFlag;
                    scope 7 {
                        debug res => _41;
                    }
                }
                scope 6 {
                }
            }
        }
    }

    bb0: {
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _49 = const true;
        _5 = Size::render_value(_1, _2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = Size::render_unit(_1, _2, _3) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        _48 = const true;
        _11 = &_5;
        _10 = <ANSIGenericString<'_, str> as Deref>::deref(move _11) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _9 = core::str::<impl str>::len(_10) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _12 = CheckedSub(_4, _9);
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", _4, move _9) -> [success: bb5, unwind: bb33];
    }

    bb5: {
        _8 = move (_12.0: usize);
        _7 = std::string::String::with_capacity(move _8) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _47 = const true;
        _16 = &_7;
        _15 = std::string::String::capacity(move _16) -> [return: bb7, unwind: bb31];
    }

    bb7: {
        _14 = std::ops::Range::<usize> { start: const 0_usize, end: move _15 };
        _13 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _14) -> [return: bb8, unwind: bb31];
    }

    bb8: {
        _17 = move _13;
        goto -> bb9;
    }

    bb9: {
        _19 = &mut _17;
        _18 = <std::ops::Range<usize> as Iterator>::next(_19) -> [return: bb10, unwind: bb31];
    }

    bb10: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb13, 1: bb11, otherwise: bb12];
    }

    bb11: {
        _22 = &mut _7;
        _21 = std::string::String::push(move _22, const ' ') -> [return: bb37, unwind: bb31];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _26 = SizeOf([ansi_term::ANSIGenericString<'_, str>; 2]);
        _27 = AlignOf([ansi_term::ANSIGenericString<'_, str>; 2]);
        _28 = alloc::alloc::exchange_malloc(move _26, move _27) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        _29 = ShallowInitBox(move _28, [ansi_term::ANSIGenericString<'_, str>; 2]);
        _47 = const false;
        _31 = move _7;
        _30 = <ANSIGenericString<'_, str> as From<std::string::String>>::from(move _31) -> [return: bb15, unwind: bb29];
    }

    bb15: {
        _49 = const false;
        _32 = move _5;
        _52 = (((_29.0: std::ptr::Unique<[ansi_term::ANSIGenericString<'_, str>; 2]>).0: std::ptr::NonNull<[ansi_term::ANSIGenericString<'_, str>; 2]>).0: *const [ansi_term::ANSIGenericString<'_, str>; 2]);
        _53 = _52 as *const () (PtrToPtr);
        _54 = _53 as usize (Transmute);
        _55 = AlignOf([ansi_term::ANSIGenericString<'_, str>; 2]);
        _56 = Sub(_55, const 1_usize);
        _57 = BitAnd(_54, _56);
        _58 = Eq(_57, const 0_usize);
        assert(_58, "misaligned pointer dereference: address must be a multiple of {} but is {}", _55, _54) -> [success: bb36, unwind unreachable];
    }

    bb16: {
        _34 = &((*_3).11: flags::size::SizeFlag);
        _46 = const _;
        _33 = <SizeFlag as PartialEq>::ne(move _34, _46) -> [return: bb17, unwind: bb27];
    }

    bb17: {
        switchInt(move _33) -> [0: bb20, otherwise: bb18];
    }

    bb18: {
        _36 = &mut _23;
        _37 = <ANSIGenericString<'_, str> as From<&str>>::from(const " ") -> [return: bb19, unwind: bb27];
    }

    bb19: {
        _35 = Vec::<ANSIGenericString<'_, str>>::push(move _36, move _37) -> [return: bb38, unwind: bb27];
    }

    bb20: {
        _39 = &mut _23;
        _48 = const false;
        _40 = move _6;
        _38 = Vec::<ANSIGenericString<'_, str>>::push(move _39, move _40) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        _45 = &_23;
        _44 = <Vec<ANSIGenericString<'_, str>> as Deref>::deref(_45) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        _43 = ANSIStrings(_44) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        _42 = &_43;
        _41 = <ANSIGenericStrings<'_, str> as ToString>::to_string(move _42) -> [return: bb24, unwind: bb27];
    }

    bb24: {
        _0 = <ANSIGenericString<'_, str> as From<std::string::String>>::from(move _41) -> [return: bb25, unwind: bb27];
    }

    bb25: {
        drop(_23) -> [return: bb26, unwind: bb31];
    }

    bb26: {
        _47 = const false;
        _48 = const false;
        _49 = const false;
        return;
    }

    bb27 (cleanup): {
        drop(_23) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        _50 = &mut _29;
        _51 = <Box<[ANSIGenericString<'_, str>; 2]> as Drop>::drop(move _50) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_7) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_47) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_6) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_48) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_5) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_49) -> [0: bb28, otherwise: bb34];
    }

    bb36: {
        (*_52) = [move _30, move _32];
        _25 = move _29;
        _24 = move _25 as std::boxed::Box<[ansi_term::ANSIGenericString<'_, str>]> (PointerCoercion(Unsize));
        _23 = slice::<impl [ANSIGenericString<'_, str>]>::into_vec::<std::alloc::Global>(move _24) -> [return: bb16, unwind: bb31];
    }

    bb37: {
        goto -> bb9;
    }

    bb38: {
        goto -> bb20;
    }

    bb39 (cleanup): {
        goto -> bb31;
    }
}

promoted[0] in meta::size::<impl at src/meta/size.rs:28:1: 28:10>::render: &SizeFlag = {
    let mut _0: &flags::size::SizeFlag;
    let mut _1: flags::size::SizeFlag;

    bb0: {
        _1 = SizeFlag::Short;
        _0 = &_1;
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:28:1: 28:10>::paint(_1: &Size, _2: &Colors, _3: &Flags, _4: std::string::String) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    debug flags => _3;
    debug content => _4;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let _5: meta::size::Unit;
    let mut _6: bool;
    let mut _7: &meta::size::Unit;
    let mut _8: std::string::String;
    let mut _9: bool;
    let mut _10: &meta::size::Unit;
    let mut _11: bool;
    let mut _12: &meta::size::Unit;
    let mut _13: std::string::String;
    let mut _14: bool;
    let mut _15: &meta::size::Unit;
    let mut _16: std::string::String;
    let mut _17: std::string::String;
    let mut _26: bool;
    scope 1 {
        debug unit => _5;
        let mut _18: &color::Elem;
        let mut _19: &color::Elem;
        let mut _20: &color::Elem;
        let mut _21: &color::Elem;
        let mut _22: &meta::size::Unit;
        let mut _23: &meta::size::Unit;
        let mut _24: &meta::size::Unit;
        let mut _25: &meta::size::Unit;
    }

    bb0: {
        _26 = const false;
        _26 = const true;
        _5 = Size::get_unit(_1, _3) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _7 = &_5;
        _25 = const _;
        _6 = <meta::size::Unit as PartialEq>::eq(move _7, _25) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = const false;
        _8 = move _4;
        _18 = const _;
        _0 = Colors::colorize::<'_>(_2, move _8, _18) -> [return: bb17, unwind: bb16];
    }

    bb4: {
        _10 = &_5;
        _24 = const _;
        _9 = <meta::size::Unit as PartialEq>::eq(move _10, _24) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        switchInt(move _9) -> [0: bb6, otherwise: bb8];
    }

    bb6: {
        _12 = &_5;
        _23 = const _;
        _11 = <meta::size::Unit as PartialEq>::eq(move _12, _23) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _26 = const false;
        _13 = move _4;
        _19 = const _;
        _0 = Colors::colorize::<'_>(_2, move _13, _19) -> [return: bb18, unwind: bb16];
    }

    bb9: {
        _15 = &_5;
        _22 = const _;
        _14 = <meta::size::Unit as PartialEq>::eq(move _15, _22) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        switchInt(move _14) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _26 = const false;
        _16 = move _4;
        _20 = const _;
        _0 = Colors::colorize::<'_>(_2, move _16, _20) -> [return: bb19, unwind: bb16];
    }

    bb12: {
        _26 = const false;
        _17 = move _4;
        _21 = const _;
        _0 = Colors::colorize::<'_>(_2, move _17, _21) -> [return: bb20, unwind: bb16];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_4) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_26) -> [0: bb14, otherwise: bb15];
    }

    bb17: {
        goto -> bb13;
    }

    bb18: {
        goto -> bb13;
    }

    bb19: {
        goto -> bb13;
    }

    bb20: {
        goto -> bb13;
    }
}

promoted[0] in meta::size::<impl at src/meta/size.rs:28:1: 28:10>::paint: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::NonFile;
        _0 = &_1;
        return;
    }
}

promoted[1] in meta::size::<impl at src/meta/size.rs:28:1: 28:10>::paint: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::FileSmall;
        _0 = &_1;
        return;
    }
}

promoted[2] in meta::size::<impl at src/meta/size.rs:28:1: 28:10>::paint: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::FileMedium;
        _0 = &_1;
        return;
    }
}

promoted[3] in meta::size::<impl at src/meta/size.rs:28:1: 28:10>::paint: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::FileLarge;
        _0 = &_1;
        return;
    }
}

promoted[4] in meta::size::<impl at src/meta/size.rs:28:1: 28:10>::paint: &meta::size::Unit = {
    let mut _0: &meta::size::Unit;
    let mut _1: meta::size::Unit;

    bb0: {
        _1 = meta::size::Unit::Mega;
        _0 = &_1;
        return;
    }
}

promoted[5] in meta::size::<impl at src/meta/size.rs:28:1: 28:10>::paint: &meta::size::Unit = {
    let mut _0: &meta::size::Unit;
    let mut _1: meta::size::Unit;

    bb0: {
        _1 = meta::size::Unit::Kilo;
        _0 = &_1;
        return;
    }
}

promoted[6] in meta::size::<impl at src/meta/size.rs:28:1: 28:10>::paint: &meta::size::Unit = {
    let mut _0: &meta::size::Unit;
    let mut _1: meta::size::Unit;

    bb0: {
        _1 = meta::size::Unit::Byte;
        _0 = &_1;
        return;
    }
}

promoted[7] in meta::size::<impl at src/meta/size.rs:28:1: 28:10>::paint: &meta::size::Unit = {
    let mut _0: &meta::size::Unit;
    let mut _1: meta::size::Unit;

    bb0: {
        _1 = meta::size::Unit::None;
        _0 = &_1;
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:28:1: 28:10>::render_value(_1: &Size, _2: &Colors, _3: &Flags) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    debug flags => _3;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let _4: std::string::String;
    scope 1 {
        debug content => _4;
    }

    bb0: {
        _4 = Size::value_string(_1, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Size::paint(_1, _2, _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:28:1: 28:10>::value_string(_1: &Size, _2: &Flags) -> std::string::String {
    debug self => _1;
    debug flags => _2;
    let mut _0: std::string::String;
    let _3: meta::size::Unit;
    let mut _4: isize;
    let _5: &str;
    let mut _6: &u64;
    let mut _7: f64;
    let mut _8: f64;
    let mut _9: f64;
    let mut _10: f64;
    let mut _11: f64;
    let mut _12: u64;
    let mut _13: f64;
    let mut _14: f64;
    let mut _15: f64;
    let mut _16: f64;
    let mut _17: f64;
    let mut _18: u64;
    let mut _19: f64;
    let mut _20: f64;
    let mut _21: f64;
    let mut _22: f64;
    let mut _23: f64;
    let mut _24: f64;
    let mut _25: u64;
    let mut _26: f64;
    let mut _27: f64;
    let mut _28: f64;
    let mut _29: f64;
    let mut _30: f64;
    let mut _31: f64;
    let mut _32: f64;
    let mut _33: u64;
    let mut _34: f64;
    let mut _35: f64;
    let mut _36: f64;
    scope 1 {
        debug unit => _3;
    }

    bb0: {
        _3 = Size::get_unit(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb5, 2: bb6, 3: bb8, 4: bb10, 5: bb2, otherwise: bb3];
    }

    bb2: {
        _33 = ((*_1).0: u64);
        _32 = move _33 as f64 (IntToFloat);
        _36 = Mul(const 1024f64, const 1024f64);
        _35 = Mul(move _36, const 1024f64);
        _34 = Mul(move _35, const 1024f64);
        _31 = Div(move _32, move _34);
        _30 = Mul(move _31, const 10f64);
        _29 = f64::<impl f64>::round(move _30) -> [return: bb12, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = const "";
        _0 = <str as ToString>::to_string(_5) -> [return: bb13, unwind continue];
    }

    bb5: {
        _6 = &((*_1).0: u64);
        _0 = <u64 as ToString>::to_string(move _6) -> [return: bb13, unwind continue];
    }

    bb6: {
        _12 = ((*_1).0: u64);
        _11 = move _12 as f64 (IntToFloat);
        _10 = Div(move _11, const 1024f64);
        _9 = Mul(move _10, const 10f64);
        _8 = f64::<impl f64>::round(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _7 = Div(move _8, const 10f64);
        _0 = Size::format_size(_1, move _7) -> [return: bb13, unwind continue];
    }

    bb8: {
        _18 = ((*_1).0: u64);
        _17 = move _18 as f64 (IntToFloat);
        _19 = Mul(const 1024f64, const 1024f64);
        _16 = Div(move _17, move _19);
        _15 = Mul(move _16, const 10f64);
        _14 = f64::<impl f64>::round(move _15) -> [return: bb9, unwind continue];
    }

    bb9: {
        _13 = Div(move _14, const 10f64);
        _0 = Size::format_size(_1, move _13) -> [return: bb13, unwind continue];
    }

    bb10: {
        _25 = ((*_1).0: u64);
        _24 = move _25 as f64 (IntToFloat);
        _27 = Mul(const 1024f64, const 1024f64);
        _26 = Mul(move _27, const 1024f64);
        _23 = Div(move _24, move _26);
        _22 = Mul(move _23, const 10f64);
        _21 = f64::<impl f64>::round(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        _20 = Div(move _21, const 10f64);
        _0 = Size::format_size(_1, move _20) -> [return: bb13, unwind continue];
    }

    bb12: {
        _28 = Div(move _29, const 10f64);
        _0 = Size::format_size(_1, move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:28:1: 28:10>::render_unit(_1: &Size, _2: &Colors, _3: &Flags) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    debug flags => _3;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let _4: std::string::String;
    scope 1 {
        debug content => _4;
    }

    bb0: {
        _4 = Size::unit_string(_1, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Size::paint(_1, _2, _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn meta::size::<impl at src/meta/size.rs:28:1: 28:10>::unit_string(_1: &Size, _2: &Flags) -> std::string::String {
    debug self => _1;
    debug flags => _2;
    let mut _0: std::string::String;
    let _3: meta::size::Unit;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    scope 1 {
        debug unit => _3;
    }

    bb0: {
        _3 = Size::get_unit(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(((*_2).11: flags::size::SizeFlag));
        switchInt(move _4) -> [0: bb4, 1: bb11, 2: bb2, otherwise: bb3];
    }

    bb2: {
        _0 = <std::string::String as From<&str>>::from(const "") -> [return: bb18, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb6, 1: bb7, 2: bb8, 3: bb9, 4: bb10, 5: bb5, otherwise: bb3];
    }

    bb5: {
        _0 = <std::string::String as From<&str>>::from(const "TB") -> [return: bb18, unwind continue];
    }

    bb6: {
        _0 = <std::string::String as From<&str>>::from(const "-") -> [return: bb18, unwind continue];
    }

    bb7: {
        _0 = <std::string::String as From<&str>>::from(const "B") -> [return: bb18, unwind continue];
    }

    bb8: {
        _0 = <std::string::String as From<&str>>::from(const "KB") -> [return: bb18, unwind continue];
    }

    bb9: {
        _0 = <std::string::String as From<&str>>::from(const "MB") -> [return: bb18, unwind continue];
    }

    bb10: {
        _0 = <std::string::String as From<&str>>::from(const "GB") -> [return: bb18, unwind continue];
    }

    bb11: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb13, 1: bb14, 2: bb15, 3: bb16, 4: bb17, 5: bb12, otherwise: bb3];
    }

    bb12: {
        _0 = <std::string::String as From<&str>>::from(const "T") -> [return: bb18, unwind continue];
    }

    bb13: {
        _0 = <std::string::String as From<&str>>::from(const "-") -> [return: bb18, unwind continue];
    }

    bb14: {
        _0 = <std::string::String as From<&str>>::from(const "B") -> [return: bb18, unwind continue];
    }

    bb15: {
        _0 = <std::string::String as From<&str>>::from(const "K") -> [return: bb18, unwind continue];
    }

    bb16: {
        _0 = <std::string::String as From<&str>>::from(const "M") -> [return: bb18, unwind continue];
    }

    bb17: {
        _0 = <std::string::String as From<&str>>::from(const "G") -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

fn symlink::<impl at src/meta/symlink.rs:7:10: 7:15>::clone(_1: &SymLink) -> SymLink {
    debug self => _1;
    let mut _0: meta::symlink::SymLink;
    let mut _2: std::option::Option<std::string::String>;
    let _3: &std::option::Option<std::string::String>;
    let mut _4: bool;
    let _5: &bool;

    bb0: {
        _3 = &((*_1).0: std::option::Option<std::string::String>);
        _2 = <std::option::Option<std::string::String> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: bool);
        _4 = (*_5);
        _0 = SymLink { target: move _2, valid: move _4 };
        return;
    }
}

fn symlink::<impl at src/meta/symlink.rs:7:17: 7:22>::fmt(_1: &SymLink, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::option::Option<std::string::String>;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&bool;
    let _10: &bool;

    bb0: {
        _3 = const "SymLink";
        _4 = const "target";
        _6 = &((*_1).0: std::option::Option<std::string::String>);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "valid";
        _10 = &((*_1).1: bool);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn symlink::<impl at src/meta/symlink.rs:13:1: 13:36>::from(_1: &Path) -> SymLink {
    debug path => _1;
    let mut _0: meta::symlink::SymLink;
    let mut _2: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _3: isize;
    let mut _5: bool;
    let _6: &std::path::Path;
    let mut _7: &std::path::PathBuf;
    let mut _8: bool;
    let mut _9: &std::option::Option<&std::path::Path>;
    let _10: std::option::Option<&std::path::Path>;
    let mut _11: bool;
    let _12: &std::path::Path;
    let mut _13: &std::path::PathBuf;
    let mut _14: std::option::Option<std::string::String>;
    let mut _15: std::string::String;
    let _16: &str;
    let mut _17: std::option::Option<&str>;
    let _18: &std::path::Path;
    let mut _19: &std::path::PathBuf;
    let _20: &str;
    let mut _21: std::option::Option<std::string::String>;
    let mut _22: std::string::String;
    let _23: &str;
    let mut _24: std::option::Option<&str>;
    let _25: &std::path::Path;
    let mut _26: &std::path::PathBuf;
    let _27: &str;
    let mut _28: bool;
    let _29: &std::path::Path;
    let mut _30: &std::path::PathBuf;
    let _31: std::path::PathBuf;
    let _32: &std::path::Path;
    let mut _33: std::option::Option<&std::path::Path>;
    let mut _34: std::path::PathBuf;
    let mut _35: std::option::Option<std::string::String>;
    let mut _37: bool;
    let mut _38: isize;
    let mut _39: isize;
    scope 1 {
        debug target => _4;
        let _4: std::path::PathBuf;
        let mut _36: &std::option::Option<&std::path::Path>;
    }

    bb0: {
        _37 = const false;
        _2 = read_link::<&Path>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb2, otherwise: bb25];
    }

    bb2: {
        _37 = const true;
        _4 = move ((_2 as Ok).0: std::path::PathBuf);
        _7 = &_4;
        _6 = <PathBuf as Deref>::deref(move _7) -> [return: bb3, unwind: bb38];
    }

    bb3: {
        _5 = Path::is_absolute(_6) -> [return: bb4, unwind: bb38];
    }

    bb4: {
        switchInt(move _5) -> [0: bb5, otherwise: bb8];
    }

    bb5: {
        _10 = Path::parent(_1) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        _9 = &_10;
        _36 = const _;
        _8 = <std::option::Option<&Path> as PartialEq>::eq(move _9, _36) -> [return: bb7, unwind: bb38];
    }

    bb7: {
        switchInt(move _8) -> [0: bb15, otherwise: bb8];
    }

    bb8: {
        _13 = &_4;
        _12 = <PathBuf as Deref>::deref(move _13) -> [return: bb9, unwind: bb38];
    }

    bb9: {
        _11 = Path::exists(_12) -> [return: bb10, unwind: bb38];
    }

    bb10: {
        _19 = &_4;
        _18 = <PathBuf as Deref>::deref(move _19) -> [return: bb11, unwind: bb38];
    }

    bb11: {
        _17 = Path::to_str(_18) -> [return: bb12, unwind: bb38];
    }

    bb12: {
        _20 = const "failed to convert symlink to str";
        _16 = std::option::Option::<&str>::expect(move _17, _20) -> [return: bb13, unwind: bb38];
    }

    bb13: {
        _15 = <str as ToString>::to_string(_16) -> [return: bb14, unwind: bb38];
    }

    bb14: {
        _14 = std::option::Option::<std::string::String>::Some(move _15);
        _0 = SymLink { target: move _14, valid: move _11 };
        goto -> bb35;
    }

    bb15: {
        _26 = &_4;
        _25 = <PathBuf as Deref>::deref(move _26) -> [return: bb16, unwind: bb38];
    }

    bb16: {
        _24 = Path::to_str(_25) -> [return: bb17, unwind: bb38];
    }

    bb17: {
        _27 = const "failed to convert symlink to str";
        _23 = std::option::Option::<&str>::expect(move _24, _27) -> [return: bb18, unwind: bb38];
    }

    bb18: {
        _22 = <str as ToString>::to_string(_23) -> [return: bb19, unwind: bb38];
    }

    bb19: {
        _21 = std::option::Option::<std::string::String>::Some(move _22);
        _33 = Path::parent(_1) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        _32 = std::option::Option::<&Path>::unwrap(move _33) -> [return: bb21, unwind: bb31];
    }

    bb21: {
        _37 = const false;
        _34 = move _4;
        _31 = Path::join::<PathBuf>(_32, move _34) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        _30 = &_31;
        _29 = <PathBuf as Deref>::deref(move _30) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        _28 = Path::exists(_29) -> [return: bb24, unwind: bb29];
    }

    bb24: {
        _0 = SymLink { target: move _21, valid: move _28 };
        drop(_31) -> [return: bb35, unwind: bb38];
    }

    bb25: {
        drop(_2) -> [return: bb26, unwind continue];
    }

    bb26: {
        _35 = std::option::Option::<std::string::String>::None;
        _0 = SymLink { target: move _35, valid: const false };
        goto -> bb28;
    }

    bb27: {
        _37 = const false;
        _38 = discriminant(_2);
        switchInt(move _38) -> [0: bb28, otherwise: bb36];
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        drop(_21) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_31) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_21) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        _39 = discriminant(_2);
        switchInt(move _39) -> [0: bb33, otherwise: bb39];
    }

    bb33 (cleanup): {
        resume;
    }

    bb34: {
        drop(_4) -> [return: bb27, unwind: bb32];
    }

    bb35: {
        switchInt(_37) -> [0: bb27, otherwise: bb34];
    }

    bb36: {
        drop(_2) -> [return: bb28, unwind continue];
    }

    bb37 (cleanup): {
        drop(_4) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_37) -> [0: bb32, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_2) -> [return: bb33, unwind terminate(cleanup)];
    }
}

promoted[0] in symlink::<impl at src/meta/symlink.rs:13:1: 13:36>::from: &std::option::Option<&Path> = {
    let mut _0: &std::option::Option<&std::path::Path>;
    let mut _1: std::option::Option<&std::path::Path>;

    bb0: {
        _1 = std::option::Option::<&Path>::None;
        _0 = &_1;
        return;
    }
}

fn symlink::<impl at src/meta/symlink.rs:46:1: 46:13>::symlink_string(_1: &SymLink) -> std::option::Option<std::string::String> {
    debug self => _1;
    let mut _0: std::option::Option<std::string::String>;
    let mut _2: isize;
    let mut _4: std::string::String;
    scope 1 {
        debug target => _3;
        let _3: &std::string::String;
    }

    bb0: {
        _2 = discriminant(((*_1).0: std::option::Option<std::string::String>));
        switchInt(move _2) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        _3 = &((((*_1).0: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _4 = <std::string::String as ToString>::to_string(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::option::Option::<std::string::String>::Some(move _4);
        goto -> bb4;
    }

    bb3: {
        _0 = std::option::Option::<std::string::String>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn symlink::<impl at src/meta/symlink.rs:46:1: 46:13>::render(_1: &SymLink, _2: &Colors, _3: &Flags) -> ANSIGenericString<'_, str> {
    debug self => _1;
    debug colors => _2;
    debug flag => _3;
    let mut _0: ansi_term::ANSIGenericString<'_, str>;
    let mut _4: std::option::Option<std::string::String>;
    let mut _5: isize;
    let mut _8: bool;
    let _10: &[ansi_term::ANSIGenericString<'_, str>; 2];
    let _11: [ansi_term::ANSIGenericString<'_, str>; 2];
    let mut _12: ansi_term::ANSIGenericString<'_, str>;
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &flags::symlink_arrow::SymlinkArrow;
    let mut _21: ansi_term::ANSIGenericString<'_, str>;
    let mut _22: std::string::String;
    let mut _23: &color::Elem;
    let mut _25: &ansi_term::ANSIGenericStrings<'_, str>;
    let _26: ansi_term::ANSIGenericStrings<'_, str>;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: isize;
    let mut _33: isize;
    scope 1 {
        debug target_string => _6;
        let _6: std::string::String;
        let _7: &color::Elem;
        let mut _28: &color::Elem;
        let mut _29: &color::Elem;
        scope 2 {
            debug elem => _7;
            let _9: &[ansi_term::ANSIGenericString<'_, str>];
            let _13: std::string::String;
            let mut _27: &[&str; 2];
            scope 3 {
                debug strings => _9;
                let _24: std::string::String;
                scope 5 {
                    debug res => _24;
                }
            }
            scope 4 {
                debug res => _13;
            }
        }
    }

    bb0: {
        _31 = const false;
        _30 = const false;
        _30 = const true;
        _4 = SymLink::symlink_string(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_4);
        switchInt(move _5) -> [1: bb2, otherwise: bb15];
    }

    bb2: {
        _30 = const false;
        _31 = const true;
        _6 = move ((_4 as Some).0: std::string::String);
        _8 = ((*_1).1: bool);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = const _;
        _7 = _28;
        goto -> bb5;
    }

    bb4: {
        _29 = const _;
        _7 = _29;
        goto -> bb5;
    }

    bb5: {
        _27 = const _;
        _15 = _27 as &[&str] (PointerCoercion(Unsize));
        _20 = &((*_3).14: flags::symlink_arrow::SymlinkArrow);
        _19 = core::fmt::rt::Argument::<'_>::new_display::<SymlinkArrow>(_20) -> [return: bb6, unwind: bb24];
    }

    bb6: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _13 = std::fmt::format(move _14) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _12 = <ANSIGenericString<'_, str> as From<std::string::String>>::from(move _13) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _31 = const false;
        _22 = move _6;
        _23 = _7;
        _21 = Colors::colorize::<'_>(_2, move _22, move _23) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _11 = [move _12, move _21];
        _10 = &_11;
        _9 = _10 as &[ansi_term::ANSIGenericString<'_, str>] (PointerCoercion(Unsize));
        _26 = ANSIStrings(_9) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _25 = &_26;
        _24 = <ANSIGenericStrings<'_, str> as ToString>::to_string(move _25) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _0 = <ANSIGenericString<'_, str> as From<std::string::String>>::from(move _24) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        drop(_11) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _31 = const false;
        goto -> bb22;
    }

    bb15: {
        _0 = <ANSIGenericString<'_, str> as From<&str>>::from(const "") -> [return: bb28, unwind: bb27];
    }

    bb16 (cleanup): {
        drop(_11) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_12) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        _30 = const false;
        return;
    }

    bb20: {
        switchInt(_30) -> [0: bb19, otherwise: bb21];
    }

    bb21: {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb19, unwind continue];
    }

    bb22: {
        _32 = discriminant(_4);
        switchInt(move _32) -> [1: bb20, otherwise: bb19];
    }

    bb23 (cleanup): {
        drop(_6) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_31) -> [0: bb27, otherwise: bb23];
    }

    bb25 (cleanup): {
        switchInt(_30) -> [0: bb18, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        _33 = discriminant(_4);
        switchInt(move _33) -> [1: bb25, otherwise: bb18];
    }

    bb28: {
        goto -> bb22;
    }
}

promoted[0] in symlink::<impl at src/meta/symlink.rs:46:1: 46:13>::render: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const " ", const " "];
        _0 = &_1;
        return;
    }
}

promoted[1] in symlink::<impl at src/meta/symlink.rs:46:1: 46:13>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::SymLink;
        _0 = &_1;
        return;
    }
}

promoted[2] in symlink::<impl at src/meta/symlink.rs:46:1: 46:13>::render: &Elem = {
    let mut _0: &color::Elem;
    let mut _1: color::Elem;

    bb0: {
        _1 = Elem::BrokenSymLink;
        _0 = &_1;
        return;
    }
}

fn meta::<impl at src/meta/mod.rs:34:10: 34:15>::clone(_1: &Meta) -> Meta {
    debug self => _1;
    let mut _0: meta::Meta;
    let mut _2: meta::name::Name;
    let _3: &meta::name::Name;
    let mut _4: std::path::PathBuf;
    let _5: &std::path::PathBuf;
    let mut _6: meta::permissions::Permissions;
    let _7: &meta::permissions::Permissions;
    let mut _8: meta::date::Date;
    let _9: &meta::date::Date;
    let mut _10: meta::owner::Owner;
    let _11: &meta::owner::Owner;
    let mut _12: meta::filetype::FileType;
    let _13: &meta::filetype::FileType;
    let mut _14: meta::size::Size;
    let _15: &meta::size::Size;
    let mut _16: meta::symlink::SymLink;
    let _17: &meta::symlink::SymLink;
    let mut _18: meta::indicator::Indicator;
    let _19: &meta::indicator::Indicator;
    let mut _20: meta::inode::INode;
    let _21: &meta::inode::INode;
    let mut _22: meta::links::Links;
    let _23: &meta::links::Links;
    let mut _24: std::option::Option<std::vec::Vec<meta::Meta>>;
    let _25: &std::option::Option<std::vec::Vec<meta::Meta>>;

    bb0: {
        _3 = &((*_1).0: meta::name::Name);
        _2 = <Name as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::path::PathBuf);
        _4 = <PathBuf as Clone>::clone(_5) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _7 = &((*_1).2: meta::permissions::Permissions);
        _6 = <permissions::Permissions as Clone>::clone(_7) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _9 = &((*_1).3: meta::date::Date);
        _8 = <meta::date::Date as Clone>::clone(_9) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _11 = &((*_1).4: meta::owner::Owner);
        _10 = <Owner as Clone>::clone(_11) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        _13 = &((*_1).5: meta::filetype::FileType);
        _12 = <filetype::FileType as Clone>::clone(_13) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _15 = &((*_1).6: meta::size::Size);
        _14 = <Size as Clone>::clone(_15) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _17 = &((*_1).7: meta::symlink::SymLink);
        _16 = <SymLink as Clone>::clone(_17) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _19 = &((*_1).8: meta::indicator::Indicator);
        _18 = <indicator::Indicator as Clone>::clone(_19) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _21 = &((*_1).9: meta::inode::INode);
        _20 = <INode as Clone>::clone(_21) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        _23 = &((*_1).10: meta::links::Links);
        _22 = <Links as Clone>::clone(_23) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _25 = &((*_1).11: std::option::Option<std::vec::Vec<meta::Meta>>);
        _24 = <std::option::Option<Vec<Meta>> as Clone>::clone(_25) -> [return: bb12, unwind: bb13];
    }

    bb12: {
        _0 = Meta { name: move _2, path: move _4, permissions: move _6, date: move _8, owner: move _10, file_type: move _12, size: move _14, symlink: move _16, indicator: move _18, inode: move _20, links: move _22, content: move _24 };
        return;
    }

    bb13 (cleanup): {
        drop(_16) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_10) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_4) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

fn meta::<impl at src/meta/mod.rs:34:17: 34:22>::fmt(_1: &Meta, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 12];
    let _5: [&dyn std::fmt::Debug; 12];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &meta::name::Name;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::path::PathBuf;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &meta::permissions::Permissions;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &meta::date::Date;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &meta::owner::Owner;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &meta::filetype::FileType;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &meta::size::Size;
    let mut _20: &dyn std::fmt::Debug;
    let _21: &meta::symlink::SymLink;
    let mut _22: &dyn std::fmt::Debug;
    let _23: &meta::indicator::Indicator;
    let mut _24: &dyn std::fmt::Debug;
    let _25: &meta::inode::INode;
    let mut _26: &dyn std::fmt::Debug;
    let _27: &meta::links::Links;
    let mut _28: &dyn std::fmt::Debug;
    let _29: &&std::option::Option<std::vec::Vec<meta::Meta>>;
    let _30: &std::option::Option<std::vec::Vec<meta::Meta>>;
    let _31: &str;
    let mut _32: &[&str];
    let mut _33: &[&str; 12];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _33 = const _;
        _7 = &((*_1).0: meta::name::Name);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: std::path::PathBuf);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: meta::permissions::Permissions);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: meta::date::Date);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: meta::owner::Owner);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: meta::filetype::FileType);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _19 = &((*_1).6: meta::size::Size);
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _21 = &((*_1).7: meta::symlink::SymLink);
        _20 = _21 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _23 = &((*_1).8: meta::indicator::Indicator);
        _22 = _23 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _25 = &((*_1).9: meta::inode::INode);
        _24 = _25 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _27 = &((*_1).10: meta::links::Links);
        _26 = _27 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _30 = &((*_1).11: std::option::Option<std::vec::Vec<meta::Meta>>);
        _29 = &_30;
        _28 = _29 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _31 = const "Meta";
        _32 = _33 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _31, move _32, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in meta::<impl at src/meta/mod.rs:34:17: 34:22>::fmt: &[&str; 12] = {
    let mut _0: &[&str; 12];
    let mut _1: [&str; 12];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: &str;
    let mut _19: &str;
    let mut _20: &str;
    let mut _21: &str;
    let mut _22: &str;
    let mut _23: &str;

    bb0: {
        _3 = const "path";
        _2 = &(*_3);
        _5 = const "permissions";
        _4 = &(*_5);
        _7 = const "date";
        _6 = &(*_7);
        _9 = const "owner";
        _8 = &(*_9);
        _11 = const "file_type";
        _10 = &(*_11);
        _13 = const "size";
        _12 = &(*_13);
        _15 = const "symlink";
        _14 = &(*_15);
        _17 = const "indicator";
        _16 = &(*_17);
        _19 = const "inode";
        _18 = &(*_19);
        _21 = const "links";
        _20 = &(*_21);
        _23 = const "content";
        _22 = &(*_23);
        _1 = [const "name", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22];
        _0 = &_1;
        return;
    }
}

fn meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into(_1: &Meta, _2: usize, _3: &Flags) -> Result<std::option::Option<Vec<Meta>>, std::io::Error> {
    debug self => _1;
    debug depth => _2;
    debug flags => _3;
    let mut _0: std::result::Result<std::option::Option<std::vec::Vec<meta::Meta>>, std::io::Error>;
    let mut _4: std::option::Option<std::vec::Vec<meta::Meta>>;
    let mut _5: bool;
    let mut _6: &flags::display::Display;
    let mut _7: bool;
    let mut _8: &flags::layout::Layout;
    let mut _9: std::option::Option<std::vec::Vec<meta::Meta>>;
    let mut _10: isize;
    let mut _11: bool;
    let mut _12: &flags::layout::Layout;
    let mut _13: std::option::Option<std::vec::Vec<meta::Meta>>;
    let mut _14: std::option::Option<std::vec::Vec<meta::Meta>>;
    let _15: std::fs::ReadDir;
    let mut _16: std::result::Result<std::fs::ReadDir, std::io::Error>;
    let _17: &std::path::Path;
    let mut _18: &std::path::PathBuf;
    let mut _19: isize;
    let _20: std::fs::ReadDir;
    let _21: std::io::Error;
    let mut _24: &std::io::Stderr;
    let mut _26: &mut std::io::StderrLock<'_>;
    let _27: &[u8];
    let mut _28: &std::string::String;
    let _29: std::string::String;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[core::fmt::rt::Argument<'_>];
    let _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: [core::fmt::rt::Argument<'_>; 1];
    let mut _36: core::fmt::rt::Argument<'_>;
    let _37: &std::string::String;
    let _38: std::string::String;
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let _43: &[core::fmt::rt::Argument<'_>; 2];
    let _44: [core::fmt::rt::Argument<'_>; 2];
    let mut _45: core::fmt::rt::Argument<'_>;
    let _46: &std::path::Display<'_>;
    let _47: std::path::Display<'_>;
    let _48: &std::path::Path;
    let mut _49: &std::path::PathBuf;
    let mut _50: core::fmt::rt::Argument<'_>;
    let _51: &std::io::Error;
    let mut _52: bool;
    let mut _53: &std::result::Result<(), std::io::Error>;
    let _54: !;
    let mut _55: std::option::Option<std::vec::Vec<meta::Meta>>;
    let mut _57: bool;
    let mut _58: &flags::display::Display;
    let mut _59: bool;
    let mut _60: &flags::layout::Layout;
    let mut _62: meta::Meta;
    let mut _63: std::string::String;
    let _64: &str;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, meta::Meta>;
    let mut _67: std::result::Result<meta::Meta, std::io::Error>;
    let _68: &std::path::Path;
    let _69: &std::path::PathBuf;
    let _70: std::path::PathBuf;
    let _71: &std::path::Path;
    let mut _72: &std::path::PathBuf;
    let mut _73: std::path::Component<'_>;
    let mut _74: bool;
    let mut _75: isize;
    let mut _78: std::string::String;
    let _79: &str;
    let _80: ();
    let mut _81: &mut std::vec::Vec<meta::Meta>;
    let mut _82: meta::Meta;
    let _83: ();
    let mut _84: &mut std::vec::Vec<meta::Meta>;
    let mut _85: meta::Meta;
    let mut _86: std::fs::ReadDir;
    let mut _87: std::fs::ReadDir;
    let mut _89: std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>;
    let mut _90: &mut std::fs::ReadDir;
    let mut _91: isize;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::DirEntry>;
    let mut _95: isize;
    let mut _99: &std::fs::DirEntry;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, &std::ffi::OsStr>;
    let mut _102: std::result::Result<&std::ffi::OsStr, std::io::Error>;
    let mut _103: std::option::Option<&std::ffi::OsStr>;
    let _104: &std::path::Path;
    let mut _105: &std::path::PathBuf;
    let mut _106: isize;
    let mut _109: bool;
    let mut _110: &globset::GlobSet;
    let mut _111: &&std::ffi::OsStr;
    let mut _112: isize;
    let mut _113: bool;
    let _114: &str;
    let mut _115: &std::borrow::Cow<'_, str>;
    let _116: std::borrow::Cow<'_, str>;
    let mut _117: &std::ffi::OsStr;
    let mut _119: std::result::Result<meta::Meta, std::io::Error>;
    let _120: &std::path::Path;
    let _121: &std::path::PathBuf;
    let mut _122: bool;
    let mut _123: isize;
    let mut _128: &std::io::Stderr;
    let mut _130: &mut std::io::StderrLock<'_>;
    let _131: &[u8];
    let mut _132: &std::string::String;
    let _133: std::string::String;
    let mut _135: std::fmt::Arguments<'_>;
    let mut _136: &[&str];
    let mut _137: &[core::fmt::rt::Argument<'_>];
    let _138: &[core::fmt::rt::Argument<'_>; 1];
    let _139: [core::fmt::rt::Argument<'_>; 1];
    let mut _140: core::fmt::rt::Argument<'_>;
    let _141: &std::string::String;
    let _142: std::string::String;
    let mut _144: std::fmt::Arguments<'_>;
    let mut _145: &[&str];
    let mut _146: &[core::fmt::rt::Argument<'_>];
    let _147: &[core::fmt::rt::Argument<'_>; 2];
    let _148: [core::fmt::rt::Argument<'_>; 2];
    let mut _149: core::fmt::rt::Argument<'_>;
    let _150: &std::path::Display<'_>;
    let _151: std::path::Display<'_>;
    let _152: &std::path::Path;
    let mut _153: &std::path::PathBuf;
    let mut _154: core::fmt::rt::Argument<'_>;
    let _155: &std::io::Error;
    let mut _156: bool;
    let mut _157: &std::result::Result<(), std::io::Error>;
    let _158: !;
    let mut _159: bool;
    let mut _160: &flags::layout::Layout;
    let mut _161: isize;
    let mut _162: bool;
    let mut _163: &std::fs::FileType;
    let _164: std::fs::FileType;
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::FileType>;
    let mut _166: std::result::Result<std::fs::FileType, std::io::Error>;
    let mut _167: &std::fs::DirEntry;
    let mut _168: isize;
    let mut _171: std::result::Result<std::option::Option<std::vec::Vec<meta::Meta>>, std::io::Error>;
    let mut _172: &meta::Meta;
    let mut _173: usize;
    let mut _174: (usize, bool);
    let _175: &&flags::Flags;
    let mut _176: isize;
    let mut _181: &std::io::Stderr;
    let mut _183: &mut std::io::StderrLock<'_>;
    let _184: &[u8];
    let mut _185: &std::string::String;
    let _186: std::string::String;
    let mut _188: std::fmt::Arguments<'_>;
    let mut _189: &[&str];
    let mut _190: &[core::fmt::rt::Argument<'_>];
    let _191: &[core::fmt::rt::Argument<'_>; 1];
    let _192: [core::fmt::rt::Argument<'_>; 1];
    let mut _193: core::fmt::rt::Argument<'_>;
    let _194: &std::string::String;
    let _195: std::string::String;
    let mut _197: std::fmt::Arguments<'_>;
    let mut _198: &[&str];
    let mut _199: &[core::fmt::rt::Argument<'_>];
    let _200: &[core::fmt::rt::Argument<'_>; 2];
    let _201: [core::fmt::rt::Argument<'_>; 2];
    let mut _202: core::fmt::rt::Argument<'_>;
    let _203: &std::path::Display<'_>;
    let _204: std::path::Display<'_>;
    let _205: &std::path::Path;
    let mut _206: &std::path::PathBuf;
    let mut _207: core::fmt::rt::Argument<'_>;
    let _208: &std::io::Error;
    let mut _209: bool;
    let mut _210: &std::result::Result<(), std::io::Error>;
    let _211: !;
    let _212: ();
    let mut _213: &mut std::vec::Vec<meta::Meta>;
    let mut _214: meta::Meta;
    let mut _215: std::option::Option<std::vec::Vec<meta::Meta>>;
    let mut _216: std::vec::Vec<meta::Meta>;
    let mut _226: &flags::layout::Layout;
    let mut _227: &flags::layout::Layout;
    let mut _228: &flags::display::Display;
    let mut _229: &flags::Flags;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: bool;
    let mut _233: bool;
    let mut _234: bool;
    let mut _235: bool;
    let mut _236: bool;
    let mut _237: bool;
    let mut _238: bool;
    scope 1 {
        debug entries => _15;
        let mut _56: std::vec::Vec<meta::Meta>;
        scope 9 {
            debug content => _56;
            let mut _61: meta::Meta;
            let mut _88: std::fs::ReadDir;
            let mut _224: &flags::layout::Layout;
            let mut _225: &flags::display::Display;
            scope 10 {
                debug current_meta => _61;
                let mut _65: meta::Meta;
                let _76: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _77: meta::Meta;
                scope 11 {
                    debug parent_meta => _65;
                }
                scope 12 {
                    debug residual => _76;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => _77;
                    scope 15 {
                    }
                }
            }
            scope 16 {
                debug iter => _88;
                let _92: std::result::Result<std::fs::DirEntry, std::io::Error>;
                scope 17 {
                    debug entry => _92;
                    let _93: std::fs::DirEntry;
                    let _96: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _97: std::fs::DirEntry;
                    scope 18 {
                        debug entry => _93;
                        let _98: std::path::PathBuf;
                        scope 23 {
                            debug path => _98;
                            let _100: &std::ffi::OsStr;
                            let _107: std::result::Result<std::convert::Infallible, std::io::Error>;
                            let _108: &std::ffi::OsStr;
                            scope 24 {
                                debug name => _100;
                                let mut _118: meta::Meta;
                                let _124: meta::Meta;
                                let _125: std::io::Error;
                                scope 29 {
                                }
                                scope 30 {
                                    debug entry_meta => _118;
                                    let _177: std::option::Option<std::vec::Vec<meta::Meta>>;
                                    let _178: std::io::Error;
                                    let mut _223: &flags::layout::Layout;
                                    scope 38 {
                                        let _169: std::result::Result<std::convert::Infallible, std::io::Error>;
                                        let _170: std::fs::FileType;
                                        scope 39 {
                                            debug residual => _169;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _170;
                                            scope 42 {
                                            }
                                        }
                                    }
                                    scope 43 {
                                        debug content => _177;
                                    }
                                    scope 44 {
                                        debug err => _178;
                                        let _179: std::io::Stderr;
                                        scope 45 {
                                            debug stderr => _179;
                                            let mut _180: std::io::StderrLock<'_>;
                                            scope 46 {
                                                debug handle => _180;
                                                let _182: std::result::Result<(), std::io::Error>;
                                                let _187: std::string::String;
                                                let _196: std::string::String;
                                                let mut _221: &[&str; 3];
                                                let mut _222: &[&str; 2];
                                                scope 47 {
                                                    debug res => _182;
                                                }
                                                scope 48 {
                                                    debug res => _187;
                                                }
                                                scope 49 {
                                                    debug res => _196;
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 31 {
                                    debug res => _124;
                                }
                                scope 32 {
                                    debug err => _125;
                                    let _126: std::io::Stderr;
                                    scope 33 {
                                        debug stderr => _126;
                                        let mut _127: std::io::StderrLock<'_>;
                                        scope 34 {
                                            debug handle => _127;
                                            let _129: std::result::Result<(), std::io::Error>;
                                            let _134: std::string::String;
                                            let _143: std::string::String;
                                            let mut _219: &[&str; 3];
                                            let mut _220: &[&str; 2];
                                            scope 35 {
                                                debug res => _129;
                                            }
                                            scope 36 {
                                                debug res => _134;
                                            }
                                            scope 37 {
                                                debug res => _143;
                                            }
                                        }
                                    }
                                }
                            }
                            scope 25 {
                                debug residual => _107;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug val => _108;
                                scope 28 {
                                }
                            }
                        }
                    }
                    scope 19 {
                        debug residual => _96;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _97;
                        scope 22 {
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug entries => _20;
    }
    scope 3 {
        debug err => _21;
        let _22: std::io::Stderr;
        scope 4 {
            debug stderr => _22;
            let mut _23: std::io::StderrLock<'_>;
            scope 5 {
                debug handle => _23;
                let _25: std::result::Result<(), std::io::Error>;
                let _30: std::string::String;
                let _39: std::string::String;
                let mut _217: &[&str; 3];
                let mut _218: &[&str; 2];
                scope 6 {
                    debug res => _25;
                }
                scope 7 {
                    debug res => _30;
                }
                scope 8 {
                    debug res => _39;
                }
            }
        }
    }

    bb0: {
        _230 = const false;
        _236 = const false;
        _233 = const false;
        _231 = const false;
        _237 = const false;
        _238 = const false;
        _234 = const false;
        _235 = const false;
        _232 = const false;
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = std::option::Option::<Vec<Meta>>::None;
        _0 = Result::<std::option::Option<Vec<Meta>>, std::io::Error>::Ok(move _4);
        goto -> bb163;
    }

    bb2: {
        _6 = &((*_3).4: flags::display::Display);
        _228 = const _;
        _5 = <flags::display::Display as PartialEq>::eq(move _6, _228) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _5) -> [0: bb7, otherwise: bb4];
    }

    bb4: {
        _8 = &((*_3).8: flags::layout::Layout);
        _227 = const _;
        _7 = <layout::Layout as PartialEq>::ne(move _8, _227) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _7) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _9 = std::option::Option::<Vec<Meta>>::None;
        _0 = Result::<std::option::Option<Vec<Meta>>, std::io::Error>::Ok(move _9);
        goto -> bb163;
    }

    bb7: {
        _10 = discriminant(((*_1).5: meta::filetype::FileType));
        switchInt(move _10) -> [2: bb13, 4: bb9, otherwise: bb8];
    }

    bb8: {
        _14 = std::option::Option::<Vec<Meta>>::None;
        _0 = Result::<std::option::Option<Vec<Meta>>, std::io::Error>::Ok(move _14);
        goto -> bb163;
    }

    bb9: {
        switchInt(((((*_1).5: meta::filetype::FileType) as SymLink).0: bool)) -> [0: bb8, otherwise: bb10];
    }

    bb10: {
        _12 = &((*_3).8: flags::layout::Layout);
        _226 = const _;
        _11 = <layout::Layout as PartialEq>::eq(move _12, _226) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _11) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _13 = std::option::Option::<Vec<Meta>>::None;
        _0 = Result::<std::option::Option<Vec<Meta>>, std::io::Error>::Ok(move _13);
        goto -> bb163;
    }

    bb13: {
        _18 = &((*_1).1: std::path::PathBuf);
        _17 = <PathBuf as Deref>::deref(move _18) -> [return: bb14, unwind continue];
    }

    bb14: {
        _16 = Path::read_dir(_17) -> [return: bb15, unwind continue];
    }

    bb15: {
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb18, 1: bb16, otherwise: bb17];
    }

    bb16: {
        _21 = move ((_16 as Err).0: std::io::Error);
        _22 = stderr() -> [return: bb19, unwind: bb187];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        _20 = move ((_16 as Ok).0: std::fs::ReadDir);
        _230 = const true;
        _15 = move _20;
        _56 = Vec::<Meta>::new() -> [return: bb39, unwind: bb229];
    }

    bb19: {
        _24 = &_22;
        _23 = Stderr::lock(move _24) -> [return: bb20, unwind: bb187];
    }

    bb20: {
        _26 = &mut _23;
        _218 = const _;
        _32 = _218 as &[&str] (PointerCoercion(Unsize));
        _217 = const _;
        _41 = _217 as &[&str] (PointerCoercion(Unsize));
        _49 = &((*_1).1: std::path::PathBuf);
        _48 = <PathBuf as Deref>::deref(move _49) -> [return: bb21, unwind: bb186];
    }

    bb21: {
        _47 = Path::display(_48) -> [return: bb22, unwind: bb186];
    }

    bb22: {
        _46 = &_47;
        _45 = core::fmt::rt::Argument::<'_>::new_display::<std::path::Display<'_>>(_46) -> [return: bb23, unwind: bb186];
    }

    bb23: {
        _51 = &_21;
        _50 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_51) -> [return: bb24, unwind: bb186];
    }

    bb24: {
        _44 = [move _45, move _50];
        _43 = &_44;
        _42 = _43 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> [return: bb25, unwind: bb186];
    }

    bb25: {
        _39 = std::fmt::format(move _40) -> [return: bb26, unwind: bb186];
    }

    bb26: {
        _38 = move _39;
        _37 = &_38;
        _36 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_37) -> [return: bb27, unwind: bb185];
    }

    bb27: {
        _35 = [move _36];
        _34 = &_35;
        _33 = _34 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _31 = Arguments::<'_>::new_v1(move _32, move _33) -> [return: bb28, unwind: bb185];
    }

    bb28: {
        _30 = std::fmt::format(move _31) -> [return: bb29, unwind: bb185];
    }

    bb29: {
        drop(_38) -> [return: bb30, unwind: bb184];
    }

    bb30: {
        _29 = move _30;
        _28 = &_29;
        _27 = std::string::String::as_bytes(move _28) -> [return: bb31, unwind: bb183];
    }

    bb31: {
        _25 = <StderrLock<'_> as std::io::Write>::write_all(move _26, _27) -> [return: bb32, unwind: bb183];
    }

    bb32: {
        drop(_29) -> [return: bb33, unwind: bb182];
    }

    bb33: {
        _53 = &_25;
        _52 = Result::<(), std::io::Error>::is_err(move _53) -> [return: bb34, unwind: bb182];
    }

    bb34: {
        switchInt(move _52) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _54 = std::process::exit(const 0_i32) -> bb182;
    }

    bb36: {
        drop(_25) -> [return: bb37, unwind: bb186];
    }

    bb37: {
        drop(_23) -> [return: bb38, unwind: bb187];
    }

    bb38: {
        _55 = std::option::Option::<Vec<Meta>>::None;
        _0 = Result::<std::option::Option<Vec<Meta>>, std::io::Error>::Ok(move _55);
        drop(_21) -> [return: bb162, unwind continue];
    }

    bb39: {
        _225 = const _;
        _58 = &((*_3).4: flags::display::Display);
        _57 = <flags::display::Display as PartialEq>::eq(_225, move _58) -> [return: bb40, unwind: bb181];
    }

    bb40: {
        switchInt(move _57) -> [0: bb62, otherwise: bb41];
    }

    bb41: {
        _60 = &((*_3).8: flags::layout::Layout);
        _224 = const _;
        _59 = <layout::Layout as PartialEq>::ne(move _60, _224) -> [return: bb42, unwind: bb181];
    }

    bb42: {
        switchInt(move _59) -> [0: bb62, otherwise: bb43];
    }

    bb43: {
        _62 = <Meta as Clone>::clone(_1) -> [return: bb44, unwind: bb227];
    }

    bb44: {
        _236 = const true;
        _237 = const true;
        _238 = const true;
        _61 = move _62;
        _64 = const ".";
        _63 = <str as ToOwned>::to_owned(_64) -> [return: bb45, unwind: bb227];
    }

    bb45: {
        drop(((_61.0: meta::name::Name).0: std::string::String)) -> [return: bb46, unwind: bb47];
    }

    bb46: {
        _238 = const true;
        ((_61.0: meta::name::Name).0: std::string::String) = move _63;
        _72 = &((*_1).1: std::path::PathBuf);
        _71 = <PathBuf as Deref>::deref(move _72) -> [return: bb48, unwind: bb227];
    }

    bb47 (cleanup): {
        _238 = const true;
        ((_61.0: meta::name::Name).0: std::string::String) = move _63;
        goto -> bb227;
    }

    bb48: {
        _73 = Component::<'_>::ParentDir;
        _70 = Path::join::<Component<'_>>(_71, move _73) -> [return: bb49, unwind: bb227];
    }

    bb49: {
        _69 = &_70;
        _68 = <PathBuf as Deref>::deref(_69) -> [return: bb50, unwind: bb180];
    }

    bb50: {
        _74 = (((*_3).3: flags::dereference::Dereference).0: bool);
        _67 = Meta::from_path(_68, move _74) -> [return: bb51, unwind: bb180];
    }

    bb51: {
        _66 = <Result<Meta, std::io::Error> as Try>::branch(move _67) -> [return: bb52, unwind: bb180];
    }

    bb52: {
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb53, 1: bb54, otherwise: bb17];
    }

    bb53: {
        _77 = move ((_66 as Continue).0: meta::Meta);
        _233 = const true;
        _234 = const true;
        _235 = const true;
        _65 = move _77;
        drop(_70) -> [return: bb56, unwind: bb213];
    }

    bb54: {
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<std::option::Option<Vec<Meta>>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _76) -> [return: bb55, unwind: bb180];
    }

    bb55: {
        drop(_70) -> [return: bb158, unwind: bb227];
    }

    bb56: {
        _79 = const "..";
        _78 = <str as ToOwned>::to_owned(_79) -> [return: bb57, unwind: bb213];
    }

    bb57: {
        drop(((_65.0: meta::name::Name).0: std::string::String)) -> [return: bb58, unwind: bb59];
    }

    bb58: {
        _235 = const true;
        ((_65.0: meta::name::Name).0: std::string::String) = move _78;
        _81 = &mut _56;
        _236 = const false;
        _237 = const false;
        _238 = const false;
        _82 = move _61;
        _80 = Vec::<Meta>::push(move _81, move _82) -> [return: bb60, unwind: bb213];
    }

    bb59 (cleanup): {
        _235 = const true;
        ((_65.0: meta::name::Name).0: std::string::String) = move _78;
        goto -> bb213;
    }

    bb60: {
        _84 = &mut _56;
        _233 = const false;
        _234 = const false;
        _235 = const false;
        _85 = move _65;
        _83 = Vec::<Meta>::push(move _84, move _85) -> [return: bb61, unwind: bb213];
    }

    bb61: {
        _233 = const false;
        _234 = const false;
        _235 = const false;
        _236 = const false;
        _237 = const false;
        _238 = const false;
        goto -> bb62;
    }

    bb62: {
        _230 = const false;
        _87 = move _15;
        _86 = <ReadDir as IntoIterator>::into_iter(move _87) -> [return: bb63, unwind: bb181];
    }

    bb63: {
        _88 = move _86;
        goto -> bb64;
    }

    bb64: {
        _90 = &mut _88;
        _89 = <ReadDir as Iterator>::next(_90) -> [return: bb65, unwind: bb179];
    }

    bb65: {
        _91 = discriminant(_89);
        switchInt(move _91) -> [0: bb67, 1: bb66, otherwise: bb17];
    }

    bb66: {
        _92 = move ((_89 as Some).0: std::result::Result<std::fs::DirEntry, std::io::Error>);
        _94 = <Result<DirEntry, std::io::Error> as Try>::branch(move _92) -> [return: bb68, unwind: bb179];
    }

    bb67: {
        drop(_88) -> [return: bb153, unwind: bb181];
    }

    bb68: {
        _95 = discriminant(_94);
        switchInt(move _95) -> [0: bb69, 1: bb70, otherwise: bb17];
    }

    bb69: {
        _97 = move ((_94 as Continue).0: std::fs::DirEntry);
        _93 = move _97;
        _99 = &_93;
        _98 = DirEntry::path(move _99) -> [return: bb71, unwind: bb178];
    }

    bb70: {
        _96 = move ((_94 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<std::option::Option<Vec<Meta>>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _96) -> [return: bb230, unwind: bb179];
    }

    bb71: {
        _105 = &_98;
        _104 = <PathBuf as Deref>::deref(move _105) -> [return: bb72, unwind: bb177];
    }

    bb72: {
        _103 = Path::file_name(_104) -> [return: bb73, unwind: bb177];
    }

    bb73: {
        _102 = std::option::Option::<&OsStr>::ok_or_else::<std::io::Error, {closure@src/meta/mod.rs:104:29: 104:31}>(move _103, const ZeroSized: {closure@src/meta/mod.rs:104:29: 104:31}) -> [return: bb74, unwind: bb177];
    }

    bb74: {
        _101 = <Result<&OsStr, std::io::Error> as Try>::branch(move _102) -> [return: bb75, unwind: bb177];
    }

    bb75: {
        _106 = discriminant(_101);
        switchInt(move _106) -> [0: bb76, 1: bb77, otherwise: bb17];
    }

    bb76: {
        _108 = ((_101 as Continue).0: &std::ffi::OsStr);
        _100 = _108;
        _110 = &(((*_3).7: flags::ignore_globs::IgnoreGlobs).0: globset::GlobSet);
        _111 = &_100;
        _109 = GlobSet::is_match::<&&OsStr>(move _110, move _111) -> [return: bb78, unwind: bb177];
    }

    bb77: {
        _107 = move ((_101 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<std::option::Option<Vec<Meta>>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _107) -> [return: bb231, unwind: bb177];
    }

    bb78: {
        switchInt(move _109) -> [0: bb79, otherwise: bb151];
    }

    bb79: {
        _112 = discriminant(((*_3).4: flags::display::Display));
        switchInt(move _112) -> [3: bb80, otherwise: bb86];
    }

    bb80: {
        _117 = _100;
        _116 = OsStr::to_string_lossy(move _117) -> [return: bb81, unwind: bb177];
    }

    bb81: {
        _115 = &_116;
        _114 = <Cow<'_, str> as Deref>::deref(move _115) -> [return: bb82, unwind: bb176];
    }

    bb82: {
        _113 = core::str::<impl str>::starts_with::<'_, char>(_114, const '.') -> [return: bb83, unwind: bb176];
    }

    bb83: {
        switchInt(move _113) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        drop(_116) -> [return: bb151, unwind: bb177];
    }

    bb85: {
        drop(_116) -> [return: bb86, unwind: bb177];
    }

    bb86: {
        _121 = &_98;
        _120 = <PathBuf as Deref>::deref(_121) -> [return: bb87, unwind: bb177];
    }

    bb87: {
        _122 = (((*_3).3: flags::dereference::Dereference).0: bool);
        _119 = Meta::from_path(_120, move _122) -> [return: bb88, unwind: bb177];
    }

    bb88: {
        _123 = discriminant(_119);
        switchInt(move _123) -> [0: bb90, 1: bb89, otherwise: bb17];
    }

    bb89: {
        _125 = move ((_119 as Err).0: std::io::Error);
        _126 = stderr() -> [return: bb91, unwind: bb175];
    }

    bb90: {
        _124 = move ((_119 as Ok).0: meta::Meta);
        _231 = const true;
        _232 = const true;
        _118 = move _124;
        _160 = &((*_3).8: flags::layout::Layout);
        _223 = const _;
        _159 = <layout::Layout as PartialEq>::eq(move _160, _223) -> [return: bb111, unwind: bb199];
    }

    bb91: {
        _128 = &_126;
        _127 = Stderr::lock(move _128) -> [return: bb92, unwind: bb175];
    }

    bb92: {
        _130 = &mut _127;
        _220 = const _;
        _136 = _220 as &[&str] (PointerCoercion(Unsize));
        _219 = const _;
        _145 = _219 as &[&str] (PointerCoercion(Unsize));
        _153 = &_98;
        _152 = <PathBuf as Deref>::deref(move _153) -> [return: bb93, unwind: bb174];
    }

    bb93: {
        _151 = Path::display(_152) -> [return: bb94, unwind: bb174];
    }

    bb94: {
        _150 = &_151;
        _149 = core::fmt::rt::Argument::<'_>::new_display::<std::path::Display<'_>>(_150) -> [return: bb95, unwind: bb174];
    }

    bb95: {
        _155 = &_125;
        _154 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_155) -> [return: bb96, unwind: bb174];
    }

    bb96: {
        _148 = [move _149, move _154];
        _147 = &_148;
        _146 = _147 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _144 = Arguments::<'_>::new_v1(move _145, move _146) -> [return: bb97, unwind: bb174];
    }

    bb97: {
        _143 = std::fmt::format(move _144) -> [return: bb98, unwind: bb174];
    }

    bb98: {
        _142 = move _143;
        _141 = &_142;
        _140 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_141) -> [return: bb99, unwind: bb173];
    }

    bb99: {
        _139 = [move _140];
        _138 = &_139;
        _137 = _138 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _135 = Arguments::<'_>::new_v1(move _136, move _137) -> [return: bb100, unwind: bb173];
    }

    bb100: {
        _134 = std::fmt::format(move _135) -> [return: bb101, unwind: bb173];
    }

    bb101: {
        drop(_142) -> [return: bb102, unwind: bb172];
    }

    bb102: {
        _133 = move _134;
        _132 = &_133;
        _131 = std::string::String::as_bytes(move _132) -> [return: bb103, unwind: bb171];
    }

    bb103: {
        _129 = <StderrLock<'_> as std::io::Write>::write_all(move _130, _131) -> [return: bb104, unwind: bb171];
    }

    bb104: {
        drop(_133) -> [return: bb105, unwind: bb170];
    }

    bb105: {
        _157 = &_129;
        _156 = Result::<(), std::io::Error>::is_err(move _157) -> [return: bb106, unwind: bb170];
    }

    bb106: {
        switchInt(move _156) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _158 = std::process::exit(const 0_i32) -> bb170;
    }

    bb108: {
        drop(_129) -> [return: bb109, unwind: bb174];
    }

    bb109: {
        drop(_127) -> [return: bb110, unwind: bb175];
    }

    bb110: {
        drop(_125) -> [return: bb150, unwind: bb177];
    }

    bb111: {
        switchInt(move _159) -> [0: bb120, otherwise: bb112];
    }

    bb112: {
        _161 = discriminant(((*_3).4: flags::display::Display));
        switchInt(move _161) -> [2: bb113, otherwise: bb120];
    }

    bb113: {
        _167 = &_93;
        _166 = DirEntry::file_type(move _167) -> [return: bb114, unwind: bb199];
    }

    bb114: {
        _165 = <Result<std::fs::FileType, std::io::Error> as Try>::branch(move _166) -> [return: bb115, unwind: bb199];
    }

    bb115: {
        _168 = discriminant(_165);
        switchInt(move _168) -> [0: bb116, 1: bb117, otherwise: bb17];
    }

    bb116: {
        _170 = ((_165 as Continue).0: std::fs::FileType);
        _164 = _170;
        _163 = &_164;
        _162 = std::fs::FileType::is_dir(move _163) -> [return: bb119, unwind: bb199];
    }

    bb117: {
        _169 = move ((_165 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<std::option::Option<Vec<Meta>>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _169) -> [return: bb118, unwind: bb199];
    }

    bb118: {
        drop(_118) -> [return: bb154, unwind: bb177];
    }

    bb119: {
        switchInt(move _162) -> [0: bb149, otherwise: bb120];
    }

    bb120: {
        _172 = &_118;
        _174 = CheckedSub(_2, const 1_usize);
        assert(!move (_174.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 1_usize) -> [success: bb121, unwind: bb199];
    }

    bb121: {
        _173 = move (_174.0: usize);
        _175 = &_3;
        _229 = deref_copy (*_175);
        _171 = Meta::recurse_into(move _172, move _173, _229) -> [return: bb122, unwind: bb199];
    }

    bb122: {
        _176 = discriminant(_171);
        switchInt(move _176) -> [0: bb124, 1: bb123, otherwise: bb17];
    }

    bb123: {
        _178 = move ((_171 as Err).0: std::io::Error);
        _179 = stderr() -> [return: bb127, unwind: bb169];
    }

    bb124: {
        _177 = move ((_171 as Ok).0: std::option::Option<std::vec::Vec<meta::Meta>>);
        drop((_118.11: std::option::Option<std::vec::Vec<meta::Meta>>)) -> [return: bb125, unwind: bb126];
    }

    bb125: {
        _232 = const true;
        (_118.11: std::option::Option<std::vec::Vec<meta::Meta>>) = move _177;
        _213 = &mut _56;
        _231 = const false;
        _232 = const false;
        _214 = move _118;
        _212 = Vec::<Meta>::push(move _213, move _214) -> [return: bb147, unwind: bb199];
    }

    bb126 (cleanup): {
        _232 = const true;
        (_118.11: std::option::Option<std::vec::Vec<meta::Meta>>) = move _177;
        goto -> bb199;
    }

    bb127: {
        _181 = &_179;
        _180 = Stderr::lock(move _181) -> [return: bb128, unwind: bb169];
    }

    bb128: {
        _183 = &mut _180;
        _222 = const _;
        _189 = _222 as &[&str] (PointerCoercion(Unsize));
        _221 = const _;
        _198 = _221 as &[&str] (PointerCoercion(Unsize));
        _206 = &_98;
        _205 = <PathBuf as Deref>::deref(move _206) -> [return: bb129, unwind: bb168];
    }

    bb129: {
        _204 = Path::display(_205) -> [return: bb130, unwind: bb168];
    }

    bb130: {
        _203 = &_204;
        _202 = core::fmt::rt::Argument::<'_>::new_display::<std::path::Display<'_>>(_203) -> [return: bb131, unwind: bb168];
    }

    bb131: {
        _208 = &_178;
        _207 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_208) -> [return: bb132, unwind: bb168];
    }

    bb132: {
        _201 = [move _202, move _207];
        _200 = &_201;
        _199 = _200 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _197 = Arguments::<'_>::new_v1(move _198, move _199) -> [return: bb133, unwind: bb168];
    }

    bb133: {
        _196 = std::fmt::format(move _197) -> [return: bb134, unwind: bb168];
    }

    bb134: {
        _195 = move _196;
        _194 = &_195;
        _193 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_194) -> [return: bb135, unwind: bb167];
    }

    bb135: {
        _192 = [move _193];
        _191 = &_192;
        _190 = _191 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _188 = Arguments::<'_>::new_v1(move _189, move _190) -> [return: bb136, unwind: bb167];
    }

    bb136: {
        _187 = std::fmt::format(move _188) -> [return: bb137, unwind: bb167];
    }

    bb137: {
        drop(_195) -> [return: bb138, unwind: bb166];
    }

    bb138: {
        _186 = move _187;
        _185 = &_186;
        _184 = std::string::String::as_bytes(move _185) -> [return: bb139, unwind: bb165];
    }

    bb139: {
        _182 = <StderrLock<'_> as std::io::Write>::write_all(move _183, _184) -> [return: bb140, unwind: bb165];
    }

    bb140: {
        drop(_186) -> [return: bb141, unwind: bb164];
    }

    bb141: {
        _210 = &_182;
        _209 = Result::<(), std::io::Error>::is_err(move _210) -> [return: bb142, unwind: bb164];
    }

    bb142: {
        switchInt(move _209) -> [0: bb144, otherwise: bb143];
    }

    bb143: {
        _211 = std::process::exit(const 0_i32) -> bb164;
    }

    bb144: {
        drop(_182) -> [return: bb145, unwind: bb168];
    }

    bb145: {
        drop(_180) -> [return: bb146, unwind: bb169];
    }

    bb146: {
        drop(_178) -> [return: bb149, unwind: bb199];
    }

    bb147: {
        _231 = const false;
        _232 = const false;
        drop(_98) -> [return: bb148, unwind: bb178];
    }

    bb148: {
        drop(_93) -> [return: bb64, unwind: bb179];
    }

    bb149: {
        drop(_118) -> [return: bb150, unwind: bb177];
    }

    bb150: {
        _231 = const false;
        _232 = const false;
        goto -> bb151;
    }

    bb151: {
        drop(_98) -> [return: bb152, unwind: bb178];
    }

    bb152: {
        drop(_93) -> [return: bb64, unwind: bb179];
    }

    bb153: {
        _216 = move _56;
        _215 = std::option::Option::<Vec<Meta>>::Some(move _216);
        _0 = Result::<std::option::Option<Vec<Meta>>, std::io::Error>::Ok(move _215);
        _230 = const false;
        goto -> bb163;
    }

    bb154: {
        _231 = const false;
        _232 = const false;
        goto -> bb155;
    }

    bb155: {
        drop(_98) -> [return: bb156, unwind: bb178];
    }

    bb156: {
        drop(_93) -> [return: bb157, unwind: bb179];
    }

    bb157: {
        drop(_88) -> [return: bb160, unwind: bb181];
    }

    bb158: {
        _233 = const false;
        _234 = const false;
        _235 = const false;
        drop(_61) -> [return: bb159, unwind: bb181];
    }

    bb159: {
        _236 = const false;
        _237 = const false;
        _238 = const false;
        goto -> bb160;
    }

    bb160: {
        drop(_56) -> [return: bb161, unwind: bb229];
    }

    bb161: {
        switchInt(_230) -> [0: bb162, otherwise: bb189];
    }

    bb162: {
        _230 = const false;
        goto -> bb163;
    }

    bb163: {
        return;
    }

    bb164 (cleanup): {
        drop(_182) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        drop(_186) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        drop(_187) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        drop(_195) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        drop(_180) -> [return: bb169, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        drop(_178) -> [return: bb199, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_129) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        drop(_133) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_134) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        drop(_142) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        drop(_127) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_125) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_116) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_98) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_93) -> [return: bb179, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        drop(_88) -> [return: bb181, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        drop(_70) -> [return: bb227, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        drop(_56) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        drop(_25) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        drop(_29) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        drop(_30) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_38) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_23) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_21) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        resume;
    }

    bb189: {
        drop(_15) -> [return: bb162, unwind continue];
    }

    bb190 (cleanup): {
        switchInt(_232) -> [0: bb177, otherwise: bb191];
    }

    bb191 (cleanup): {
        drop((_118.11: std::option::Option<std::vec::Vec<meta::Meta>>)) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        drop((_118.7: meta::symlink::SymLink)) -> [return: bb190, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        switchInt(_231) -> [0: bb190, otherwise: bb192];
    }

    bb194 (cleanup): {
        drop((_118.4: meta::owner::Owner)) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        switchInt(_231) -> [0: bb193, otherwise: bb194];
    }

    bb196 (cleanup): {
        drop((_118.1: std::path::PathBuf)) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb197 (cleanup): {
        switchInt(_231) -> [0: bb195, otherwise: bb196];
    }

    bb198 (cleanup): {
        drop((_118.0: meta::name::Name)) -> [return: bb197, unwind terminate(cleanup)];
    }

    bb199 (cleanup): {
        switchInt(_231) -> [0: bb197, otherwise: bb198];
    }

    bb200 (cleanup): {
        drop((_65.11: std::option::Option<std::vec::Vec<meta::Meta>>)) -> [return: bb227, unwind terminate(cleanup)];
    }

    bb201 (cleanup): {
        switchInt(_233) -> [0: bb227, otherwise: bb200];
    }

    bb202 (cleanup): {
        drop((_65.7: meta::symlink::SymLink)) -> [return: bb201, unwind terminate(cleanup)];
    }

    bb203 (cleanup): {
        switchInt(_233) -> [0: bb201, otherwise: bb202];
    }

    bb204 (cleanup): {
        drop((_65.4: meta::owner::Owner)) -> [return: bb203, unwind terminate(cleanup)];
    }

    bb205 (cleanup): {
        switchInt(_233) -> [0: bb203, otherwise: bb204];
    }

    bb206 (cleanup): {
        drop((_65.1: std::path::PathBuf)) -> [return: bb205, unwind terminate(cleanup)];
    }

    bb207 (cleanup): {
        switchInt(_233) -> [0: bb205, otherwise: bb206];
    }

    bb208 (cleanup): {
        drop(((_65.0: meta::name::Name).2: std::option::Option<std::string::String>)) -> [return: bb207, unwind terminate(cleanup)];
    }

    bb209 (cleanup): {
        switchInt(_234) -> [0: bb207, otherwise: bb208];
    }

    bb210 (cleanup): {
        drop(((_65.0: meta::name::Name).1: std::path::PathBuf)) -> [return: bb209, unwind terminate(cleanup)];
    }

    bb211 (cleanup): {
        switchInt(_234) -> [0: bb209, otherwise: bb210];
    }

    bb212 (cleanup): {
        drop(((_65.0: meta::name::Name).0: std::string::String)) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        switchInt(_235) -> [0: bb211, otherwise: bb212];
    }

    bb214 (cleanup): {
        drop((_61.11: std::option::Option<std::vec::Vec<meta::Meta>>)) -> [return: bb181, unwind terminate(cleanup)];
    }

    bb215 (cleanup): {
        switchInt(_236) -> [0: bb181, otherwise: bb214];
    }

    bb216 (cleanup): {
        drop((_61.7: meta::symlink::SymLink)) -> [return: bb215, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        switchInt(_236) -> [0: bb215, otherwise: bb216];
    }

    bb218 (cleanup): {
        drop((_61.4: meta::owner::Owner)) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        switchInt(_236) -> [0: bb217, otherwise: bb218];
    }

    bb220 (cleanup): {
        drop((_61.1: std::path::PathBuf)) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        switchInt(_236) -> [0: bb219, otherwise: bb220];
    }

    bb222 (cleanup): {
        drop(((_61.0: meta::name::Name).2: std::option::Option<std::string::String>)) -> [return: bb221, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        switchInt(_237) -> [0: bb221, otherwise: bb222];
    }

    bb224 (cleanup): {
        drop(((_61.0: meta::name::Name).1: std::path::PathBuf)) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        switchInt(_237) -> [0: bb223, otherwise: bb224];
    }

    bb226 (cleanup): {
        drop(((_61.0: meta::name::Name).0: std::string::String)) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb227 (cleanup): {
        switchInt(_238) -> [0: bb225, otherwise: bb226];
    }

    bb228 (cleanup): {
        drop(_15) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb229 (cleanup): {
        switchInt(_230) -> [0: bb188, otherwise: bb228];
    }

    bb230: {
        goto -> bb157;
    }

    bb231: {
        goto -> bb155;
    }
}

promoted[0] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ": ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[1] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ": ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[3] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ": ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[5] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &layout::Layout = {
    let mut _0: &flags::layout::Layout;
    let mut _1: flags::layout::Layout;

    bb0: {
        _1 = layout::Layout::Tree;
        _0 = &_1;
        return;
    }
}

promoted[7] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &layout::Layout = {
    let mut _0: &flags::layout::Layout;
    let mut _1: flags::layout::Layout;

    bb0: {
        _1 = layout::Layout::Tree;
        _0 = &_1;
        return;
    }
}

promoted[8] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &flags::display::Display = {
    let mut _0: &flags::display::Display;
    let mut _1: flags::display::Display;

    bb0: {
        _1 = flags::display::Display::All;
        _0 = &_1;
        return;
    }
}

promoted[9] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &layout::Layout = {
    let mut _0: &flags::layout::Layout;
    let mut _1: flags::layout::Layout;

    bb0: {
        _1 = layout::Layout::OneLine;
        _0 = &_1;
        return;
    }
}

promoted[10] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &layout::Layout = {
    let mut _0: &flags::layout::Layout;
    let mut _1: flags::layout::Layout;

    bb0: {
        _1 = layout::Layout::Tree;
        _0 = &_1;
        return;
    }
}

promoted[11] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into: &flags::display::Display = {
    let mut _0: &flags::display::Display;
    let mut _1: flags::display::Display;

    bb0: {
        _1 = flags::display::Display::DirectoryOnly;
        _0 = &_1;
        return;
    }
}

fn meta::<impl at src/meta/mod.rs:50:1: 50:10>::recurse_into::{closure#0}(_1: {closure@src/meta/mod.rs:104:29: 104:31}) -> std::io::Error {
    let mut _0: std::io::Error;
    let mut _2: std::io::ErrorKind;

    bb0: {
        _2 = InvalidInput;
        _0 = std::io::Error::new::<&str>(move _2, const "invalid file name") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn meta::<impl at src/meta/mod.rs:50:1: 50:10>::calculate_total_size(_1: &mut Meta) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: isize;
    let mut _3: &mut std::option::Option<std::vec::Vec<meta::Meta>>;
    let mut _4: isize;
    let mut _7: &meta::size::Size;
    let mut _8: &mut std::slice::IterMut<'_, meta::Meta>;
    let mut _9: &mut std::slice::IterMut<'_, meta::Meta>;
    let mut _10: std::slice::IterMut<'_, meta::Meta>;
    let mut _11: &mut [meta::Meta];
    let mut _13: std::option::Option<&mut meta::Meta>;
    let mut _14: &mut &mut std::slice::IterMut<'_, meta::Meta>;
    let mut _15: isize;
    let _17: ();
    let mut _18: u64;
    let mut _19: &meta::size::Size;
    let mut _20: (u64, bool);
    let mut _21: meta::size::Size;
    let mut _22: u64;
    let mut _23: meta::size::Size;
    let mut _24: u64;
    let _25: &std::path::PathBuf;
    scope 1 {
        scope 2 {
            debug metas => _5;
            let _5: &mut std::vec::Vec<meta::Meta>;
            let mut _6: u64;
            scope 3 {
                debug size_accumulated => _6;
                let mut _12: &mut std::slice::IterMut<'_, meta::Meta>;
                scope 4 {
                    debug iter => _12;
                    let _16: &mut meta::Meta;
                    scope 5 {
                        debug x => _16;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = discriminant(((*_1).5: meta::filetype::FileType));
        switchInt(move _2) -> [2: bb1, otherwise: bb19];
    }

    bb1: {
        _3 = &mut ((*_1).11: std::option::Option<std::vec::Vec<meta::Meta>>);
        _4 = discriminant((*_3));
        switchInt(move _4) -> [1: bb2, otherwise: bb16];
    }

    bb2: {
        _5 = &mut (((*_3) as Some).0: std::vec::Vec<meta::Meta>);
        _7 = &((*_1).6: meta::size::Size);
        _6 = Size::get_bytes(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = <Vec<Meta> as DerefMut>::deref_mut(_5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = core::slice::<impl [Meta]>::iter_mut(_11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = &mut _10;
        _8 = <&mut std::slice::IterMut<'_, Meta> as IntoIterator>::into_iter(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _12 = move _8;
        goto -> bb7;
    }

    bb7: {
        _14 = &mut _12;
        _13 = <&mut std::slice::IterMut<'_, Meta> as Iterator>::next(_14) -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        _16 = move ((_13 as Some).0: &mut meta::Meta);
        _17 = Meta::calculate_total_size(_16) -> [return: bb12, unwind continue];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _22 = _6;
        _21 = Size::new(move _22) -> [return: bb15, unwind continue];
    }

    bb12: {
        _19 = &((*_16).6: meta::size::Size);
        _18 = Size::get_bytes(move _19) -> [return: bb13, unwind continue];
    }

    bb13: {
        _20 = CheckedAdd(_6, _18);
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", _6, move _18) -> [success: bb14, unwind continue];
    }

    bb14: {
        _6 = move (_20.0: u64);
        goto -> bb7;
    }

    bb15: {
        ((*_1).6: meta::size::Size) = move _21;
        goto -> bb19;
    }

    bb16: {
        _25 = &((*_1).1: std::path::PathBuf);
        _24 = Meta::calculate_total_file_size(_25) -> [return: bb17, unwind continue];
    }

    bb17: {
        _23 = Size::new(move _24) -> [return: bb18, unwind continue];
    }

    bb18: {
        ((*_1).6: meta::size::Size) = move _23;
        goto -> bb19;
    }

    bb19: {
        return;
    }
}

fn meta::<impl at src/meta/mod.rs:50:1: 50:10>::calculate_total_file_size(_1: &PathBuf) -> u64 {
    debug path => _1;
    let mut _0: u64;
    let _2: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _3: bool;
    let mut _4: &std::result::Result<std::path::PathBuf, std::io::Error>;
    let _5: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _6: &&std::path::PathBuf;
    let _7: &std::path::Path;
    let mut _8: &std::path::PathBuf;
    let _9: &std::path::Path;
    let mut _10: &std::path::PathBuf;
    let mut _12: isize;
    let mut _17: &std::io::Stderr;
    let mut _19: &mut std::io::StderrLock<'_>;
    let _20: &[u8];
    let mut _21: &std::string::String;
    let _22: std::string::String;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let _30: &std::string::String;
    let _31: std::string::String;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let _36: &[core::fmt::rt::Argument<'_>; 2];
    let _37: [core::fmt::rt::Argument<'_>; 2];
    let mut _38: core::fmt::rt::Argument<'_>;
    let _39: &std::path::Display<'_>;
    let _40: std::path::Display<'_>;
    let _41: &std::path::Path;
    let mut _42: &std::path::PathBuf;
    let mut _43: core::fmt::rt::Argument<'_>;
    let _44: &std::io::Error;
    let mut _45: bool;
    let mut _46: &std::result::Result<(), std::io::Error>;
    let _47: !;
    let mut _49: &std::fs::Metadata;
    let mut _50: bool;
    let mut _51: &std::fs::FileType;
    let mut _52: &std::fs::Metadata;
    let mut _53: bool;
    let mut _54: &std::fs::FileType;
    let mut _56: &std::fs::Metadata;
    let mut _58: std::result::Result<std::fs::ReadDir, std::io::Error>;
    let _59: &std::path::Path;
    let mut _60: &std::path::PathBuf;
    let mut _61: isize;
    let mut _66: &std::io::Stderr;
    let mut _68: &mut std::io::StderrLock<'_>;
    let _69: &[u8];
    let mut _70: &std::string::String;
    let _71: std::string::String;
    let mut _73: std::fmt::Arguments<'_>;
    let mut _74: &[&str];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: [core::fmt::rt::Argument<'_>; 1];
    let mut _78: core::fmt::rt::Argument<'_>;
    let _79: &std::string::String;
    let _80: std::string::String;
    let mut _82: std::fmt::Arguments<'_>;
    let mut _83: &[&str];
    let mut _84: &[core::fmt::rt::Argument<'_>];
    let _85: &[core::fmt::rt::Argument<'_>; 2];
    let _86: [core::fmt::rt::Argument<'_>; 2];
    let mut _87: core::fmt::rt::Argument<'_>;
    let _88: &std::path::Display<'_>;
    let _89: std::path::Display<'_>;
    let _90: &std::path::Path;
    let mut _91: &std::path::PathBuf;
    let mut _92: core::fmt::rt::Argument<'_>;
    let _93: &std::io::Error;
    let mut _94: bool;
    let mut _95: &std::result::Result<(), std::io::Error>;
    let _96: !;
    let mut _97: std::fs::ReadDir;
    let mut _98: std::fs::ReadDir;
    let mut _100: std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>;
    let mut _101: &mut std::fs::ReadDir;
    let mut _102: isize;
    let mut _105: isize;
    let mut _107: &std::fs::DirEntry;
    let mut _111: &std::io::Stderr;
    let mut _113: &mut std::io::StderrLock<'_>;
    let _114: &[u8];
    let mut _115: &std::string::String;
    let _116: std::string::String;
    let mut _118: std::fmt::Arguments<'_>;
    let mut _119: &[&str];
    let mut _120: &[core::fmt::rt::Argument<'_>];
    let _121: &[core::fmt::rt::Argument<'_>; 1];
    let _122: [core::fmt::rt::Argument<'_>; 1];
    let mut _123: core::fmt::rt::Argument<'_>;
    let _124: &std::string::String;
    let _125: std::string::String;
    let mut _127: std::fmt::Arguments<'_>;
    let mut _128: &[&str];
    let mut _129: &[core::fmt::rt::Argument<'_>];
    let _130: &[core::fmt::rt::Argument<'_>; 2];
    let _131: [core::fmt::rt::Argument<'_>; 2];
    let mut _132: core::fmt::rt::Argument<'_>;
    let _133: &std::path::Display<'_>;
    let _134: std::path::Display<'_>;
    let _135: &std::path::Path;
    let mut _136: &std::path::PathBuf;
    let mut _137: core::fmt::rt::Argument<'_>;
    let _138: &std::io::Error;
    let mut _139: bool;
    let mut _140: &std::result::Result<(), std::io::Error>;
    let _141: !;
    let mut _142: u64;
    let _143: &std::path::PathBuf;
    let mut _144: (u64, bool);
    let mut _151: bool;
    scope 1 {
        debug metadata => _2;
        let _11: std::fs::Metadata;
        let _13: std::fs::Metadata;
        let _14: std::io::Error;
        scope 2 {
            debug metadata => _11;
            let _48: std::fs::FileType;
            scope 10 {
                debug file_type => _48;
                let mut _55: u64;
                scope 11 {
                    debug size => _55;
                    let _57: std::fs::ReadDir;
                    let _62: std::fs::ReadDir;
                    let _63: std::io::Error;
                    scope 12 {
                        debug entries => _57;
                        let mut _99: std::fs::ReadDir;
                        scope 20 {
                            debug iter => _99;
                            let _103: std::result::Result<std::fs::DirEntry, std::io::Error>;
                            scope 21 {
                                debug entry => _103;
                                let _104: std::path::PathBuf;
                                let _106: std::fs::DirEntry;
                                let _108: std::io::Error;
                                scope 22 {
                                    debug path => _104;
                                }
                                scope 23 {
                                    debug entry => _106;
                                }
                                scope 24 {
                                    debug err => _108;
                                    let _109: std::io::Stderr;
                                    scope 25 {
                                        debug stderr => _109;
                                        let mut _110: std::io::StderrLock<'_>;
                                        scope 26 {
                                            debug handle => _110;
                                            let _112: std::result::Result<(), std::io::Error>;
                                            let _117: std::string::String;
                                            let _126: std::string::String;
                                            let mut _149: &[&str; 3];
                                            let mut _150: &[&str; 2];
                                            scope 27 {
                                                debug res => _112;
                                            }
                                            scope 28 {
                                                debug res => _117;
                                            }
                                            scope 29 {
                                                debug res => _126;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 13 {
                        debug entries => _62;
                    }
                    scope 14 {
                        debug err => _63;
                        let _64: std::io::Stderr;
                        scope 15 {
                            debug stderr => _64;
                            let mut _65: std::io::StderrLock<'_>;
                            scope 16 {
                                debug handle => _65;
                                let _67: std::result::Result<(), std::io::Error>;
                                let _72: std::string::String;
                                let _81: std::string::String;
                                let mut _147: &[&str; 3];
                                let mut _148: &[&str; 2];
                                scope 17 {
                                    debug res => _67;
                                }
                                scope 18 {
                                    debug res => _72;
                                }
                                scope 19 {
                                    debug res => _81;
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 3 {
            debug meta => _13;
        }
        scope 4 {
            debug err => _14;
            let _15: std::io::Stderr;
            scope 5 {
                debug stderr => _15;
                let mut _16: std::io::StderrLock<'_>;
                scope 6 {
                    debug handle => _16;
                    let _18: std::result::Result<(), std::io::Error>;
                    let _23: std::string::String;
                    let _32: std::string::String;
                    let mut _145: &[&str; 3];
                    let mut _146: &[&str; 2];
                    scope 7 {
                        debug res => _18;
                    }
                    scope 8 {
                        debug res => _23;
                    }
                    scope 9 {
                        debug res => _32;
                    }
                }
            }
        }
    }

    bb0: {
        _151 = const false;
        _6 = &_1;
        _5 = read_link::<&&PathBuf>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _3 = Result::<PathBuf, std::io::Error>::is_ok(move _4) -> [return: bb2, unwind: bb120];
    }

    bb2: {
        switchInt(move _3) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = _1;
        _7 = <PathBuf as Deref>::deref(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _2 = Path::symlink_metadata(_7) -> [return: bb9, unwind continue];
    }

    bb6: {
        drop(_5) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = _1;
        _9 = <PathBuf as Deref>::deref(move _10) -> [return: bb8, unwind continue];
    }

    bb8: {
        _2 = Path::metadata(_9) -> [return: bb9, unwind continue];
    }

    bb9: {
        _12 = discriminant(_2);
        switchInt(move _12) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _14 = move ((_2 as Err).0: std::io::Error);
        _15 = stderr() -> [return: bb13, unwind: bb119];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _13 = move ((_2 as Ok).0: std::fs::Metadata);
        _11 = move _13;
        _49 = &_11;
        _48 = Metadata::file_type(move _49) -> [return: bb33, unwind continue];
    }

    bb13: {
        _17 = &_15;
        _16 = Stderr::lock(move _17) -> [return: bb14, unwind: bb119];
    }

    bb14: {
        _19 = &mut _16;
        _146 = const _;
        _25 = _146 as &[&str] (PointerCoercion(Unsize));
        _145 = const _;
        _34 = _145 as &[&str] (PointerCoercion(Unsize));
        _42 = _1;
        _41 = <PathBuf as Deref>::deref(move _42) -> [return: bb15, unwind: bb118];
    }

    bb15: {
        _40 = Path::display(_41) -> [return: bb16, unwind: bb118];
    }

    bb16: {
        _39 = &_40;
        _38 = core::fmt::rt::Argument::<'_>::new_display::<std::path::Display<'_>>(_39) -> [return: bb17, unwind: bb118];
    }

    bb17: {
        _44 = &_14;
        _43 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_44) -> [return: bb18, unwind: bb118];
    }

    bb18: {
        _37 = [move _38, move _43];
        _36 = &_37;
        _35 = _36 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _33 = Arguments::<'_>::new_v1(move _34, move _35) -> [return: bb19, unwind: bb118];
    }

    bb19: {
        _32 = std::fmt::format(move _33) -> [return: bb20, unwind: bb118];
    }

    bb20: {
        _31 = move _32;
        _30 = &_31;
        _29 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_30) -> [return: bb21, unwind: bb117];
    }

    bb21: {
        _28 = [move _29];
        _27 = &_28;
        _26 = _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _26) -> [return: bb22, unwind: bb117];
    }

    bb22: {
        _23 = std::fmt::format(move _24) -> [return: bb23, unwind: bb117];
    }

    bb23: {
        drop(_31) -> [return: bb24, unwind: bb116];
    }

    bb24: {
        _22 = move _23;
        _21 = &_22;
        _20 = std::string::String::as_bytes(move _21) -> [return: bb25, unwind: bb115];
    }

    bb25: {
        _18 = <StderrLock<'_> as std::io::Write>::write_all(move _19, _20) -> [return: bb26, unwind: bb115];
    }

    bb26: {
        drop(_22) -> [return: bb27, unwind: bb114];
    }

    bb27: {
        _46 = &_18;
        _45 = Result::<(), std::io::Error>::is_err(move _46) -> [return: bb28, unwind: bb114];
    }

    bb28: {
        switchInt(move _45) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _47 = std::process::exit(const 0_i32) -> bb114;
    }

    bb30: {
        drop(_18) -> [return: bb31, unwind: bb118];
    }

    bb31: {
        drop(_16) -> [return: bb32, unwind: bb119];
    }

    bb32: {
        _0 = const 0_u64;
        drop(_14) -> [return: bb98, unwind continue];
    }

    bb33: {
        _51 = &_48;
        _50 = std::fs::FileType::is_file(move _51) -> [return: bb34, unwind continue];
    }

    bb34: {
        switchInt(move _50) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _52 = &_11;
        _0 = Metadata::len(move _52) -> [return: bb98, unwind continue];
    }

    bb36: {
        _54 = &_48;
        _53 = std::fs::FileType::is_dir(move _54) -> [return: bb37, unwind continue];
    }

    bb37: {
        switchInt(move _53) -> [0: bb96, otherwise: bb38];
    }

    bb38: {
        _56 = &_11;
        _55 = Metadata::len(move _56) -> [return: bb39, unwind continue];
    }

    bb39: {
        _60 = _1;
        _59 = <PathBuf as Deref>::deref(move _60) -> [return: bb40, unwind continue];
    }

    bb40: {
        _58 = Path::read_dir(_59) -> [return: bb41, unwind continue];
    }

    bb41: {
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb43, 1: bb42, otherwise: bb11];
    }

    bb42: {
        _63 = move ((_58 as Err).0: std::io::Error);
        _64 = stderr() -> [return: bb44, unwind: bb113];
    }

    bb43: {
        _62 = move ((_58 as Ok).0: std::fs::ReadDir);
        _151 = const true;
        _57 = move _62;
        _151 = const false;
        _98 = move _57;
        _97 = <ReadDir as IntoIterator>::into_iter(move _98) -> [return: bb64, unwind: bb123];
    }

    bb44: {
        _66 = &_64;
        _65 = Stderr::lock(move _66) -> [return: bb45, unwind: bb113];
    }

    bb45: {
        _68 = &mut _65;
        _148 = const _;
        _74 = _148 as &[&str] (PointerCoercion(Unsize));
        _147 = const _;
        _83 = _147 as &[&str] (PointerCoercion(Unsize));
        _91 = _1;
        _90 = <PathBuf as Deref>::deref(move _91) -> [return: bb46, unwind: bb112];
    }

    bb46: {
        _89 = Path::display(_90) -> [return: bb47, unwind: bb112];
    }

    bb47: {
        _88 = &_89;
        _87 = core::fmt::rt::Argument::<'_>::new_display::<std::path::Display<'_>>(_88) -> [return: bb48, unwind: bb112];
    }

    bb48: {
        _93 = &_63;
        _92 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_93) -> [return: bb49, unwind: bb112];
    }

    bb49: {
        _86 = [move _87, move _92];
        _85 = &_86;
        _84 = _85 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _82 = Arguments::<'_>::new_v1(move _83, move _84) -> [return: bb50, unwind: bb112];
    }

    bb50: {
        _81 = std::fmt::format(move _82) -> [return: bb51, unwind: bb112];
    }

    bb51: {
        _80 = move _81;
        _79 = &_80;
        _78 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_79) -> [return: bb52, unwind: bb111];
    }

    bb52: {
        _77 = [move _78];
        _76 = &_77;
        _75 = _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _73 = Arguments::<'_>::new_v1(move _74, move _75) -> [return: bb53, unwind: bb111];
    }

    bb53: {
        _72 = std::fmt::format(move _73) -> [return: bb54, unwind: bb111];
    }

    bb54: {
        drop(_80) -> [return: bb55, unwind: bb110];
    }

    bb55: {
        _71 = move _72;
        _70 = &_71;
        _69 = std::string::String::as_bytes(move _70) -> [return: bb56, unwind: bb109];
    }

    bb56: {
        _67 = <StderrLock<'_> as std::io::Write>::write_all(move _68, _69) -> [return: bb57, unwind: bb109];
    }

    bb57: {
        drop(_71) -> [return: bb58, unwind: bb108];
    }

    bb58: {
        _95 = &_67;
        _94 = Result::<(), std::io::Error>::is_err(move _95) -> [return: bb59, unwind: bb108];
    }

    bb59: {
        switchInt(move _94) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _96 = std::process::exit(const 0_i32) -> bb108;
    }

    bb61: {
        drop(_67) -> [return: bb62, unwind: bb112];
    }

    bb62: {
        drop(_65) -> [return: bb63, unwind: bb113];
    }

    bb63: {
        _0 = _55;
        drop(_63) -> [return: bb97, unwind continue];
    }

    bb64: {
        _99 = move _97;
        goto -> bb65;
    }

    bb65: {
        _101 = &mut _99;
        _100 = <ReadDir as Iterator>::next(_101) -> [return: bb66, unwind: bb107];
    }

    bb66: {
        _102 = discriminant(_100);
        switchInt(move _102) -> [0: bb68, 1: bb67, otherwise: bb11];
    }

    bb67: {
        _103 = move ((_100 as Some).0: std::result::Result<std::fs::DirEntry, std::io::Error>);
        _105 = discriminant(_103);
        switchInt(move _105) -> [0: bb70, 1: bb69, otherwise: bb11];
    }

    bb68: {
        drop(_99) -> [return: bb95, unwind: bb123];
    }

    bb69: {
        _108 = move ((_103 as Err).0: std::io::Error);
        _109 = stderr() -> [return: bb73, unwind: bb105];
    }

    bb70: {
        _106 = move ((_103 as Ok).0: std::fs::DirEntry);
        _107 = &_106;
        _104 = DirEntry::path(move _107) -> [return: bb71, unwind: bb106];
    }

    bb71: {
        drop(_106) -> [return: bb72, unwind: bb107];
    }

    bb72: {
        _143 = &_104;
        _142 = Meta::calculate_total_file_size(_143) -> [return: bb93, unwind: bb99];
    }

    bb73: {
        _111 = &_109;
        _110 = Stderr::lock(move _111) -> [return: bb74, unwind: bb105];
    }

    bb74: {
        _113 = &mut _110;
        _150 = const _;
        _119 = _150 as &[&str] (PointerCoercion(Unsize));
        _149 = const _;
        _128 = _149 as &[&str] (PointerCoercion(Unsize));
        _136 = _1;
        _135 = <PathBuf as Deref>::deref(move _136) -> [return: bb75, unwind: bb104];
    }

    bb75: {
        _134 = Path::display(_135) -> [return: bb76, unwind: bb104];
    }

    bb76: {
        _133 = &_134;
        _132 = core::fmt::rt::Argument::<'_>::new_display::<std::path::Display<'_>>(_133) -> [return: bb77, unwind: bb104];
    }

    bb77: {
        _138 = &_108;
        _137 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_138) -> [return: bb78, unwind: bb104];
    }

    bb78: {
        _131 = [move _132, move _137];
        _130 = &_131;
        _129 = _130 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _127 = Arguments::<'_>::new_v1(move _128, move _129) -> [return: bb79, unwind: bb104];
    }

    bb79: {
        _126 = std::fmt::format(move _127) -> [return: bb80, unwind: bb104];
    }

    bb80: {
        _125 = move _126;
        _124 = &_125;
        _123 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_124) -> [return: bb81, unwind: bb103];
    }

    bb81: {
        _122 = [move _123];
        _121 = &_122;
        _120 = _121 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _118 = Arguments::<'_>::new_v1(move _119, move _120) -> [return: bb82, unwind: bb103];
    }

    bb82: {
        _117 = std::fmt::format(move _118) -> [return: bb83, unwind: bb103];
    }

    bb83: {
        drop(_125) -> [return: bb84, unwind: bb102];
    }

    bb84: {
        _116 = move _117;
        _115 = &_116;
        _114 = std::string::String::as_bytes(move _115) -> [return: bb85, unwind: bb101];
    }

    bb85: {
        _112 = <StderrLock<'_> as std::io::Write>::write_all(move _113, _114) -> [return: bb86, unwind: bb101];
    }

    bb86: {
        drop(_116) -> [return: bb87, unwind: bb100];
    }

    bb87: {
        _140 = &_112;
        _139 = Result::<(), std::io::Error>::is_err(move _140) -> [return: bb88, unwind: bb100];
    }

    bb88: {
        switchInt(move _139) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _141 = std::process::exit(const 0_i32) -> bb100;
    }

    bb90: {
        drop(_112) -> [return: bb91, unwind: bb104];
    }

    bb91: {
        drop(_110) -> [return: bb92, unwind: bb105];
    }

    bb92: {
        drop(_108) -> [return: bb65, unwind: bb107];
    }

    bb93: {
        _144 = CheckedAdd(_55, _142);
        assert(!move (_144.1: bool), "attempt to compute `{} + {}`, which would overflow", _55, move _142) -> [success: bb94, unwind: bb99];
    }

    bb94: {
        _55 = move (_144.0: u64);
        drop(_104) -> [return: bb65, unwind: bb107];
    }

    bb95: {
        _0 = _55;
        _151 = const false;
        goto -> bb98;
    }

    bb96: {
        _0 = const 0_u64;
        goto -> bb98;
    }

    bb97: {
        _151 = const false;
        goto -> bb98;
    }

    bb98: {
        return;
    }

    bb99 (cleanup): {
        drop(_104) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_112) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_116) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_117) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_125) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_110) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_108) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_106) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_99) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_67) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_71) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        drop(_72) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_80) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_65) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_63) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_18) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_22) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_23) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        drop(_31) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop(_16) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        drop(_14) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_5) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        resume;
    }

    bb122 (cleanup): {
        drop(_57) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        switchInt(_151) -> [0: bb121, otherwise: bb122];
    }
}

promoted[0] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::calculate_total_file_size: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ": ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[1] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::calculate_total_file_size: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::calculate_total_file_size: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ": ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[3] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::calculate_total_file_size: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::calculate_total_file_size: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ": ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[5] in meta::<impl at src/meta/mod.rs:50:1: 50:10>::calculate_total_file_size: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "lsd: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

fn meta::<impl at src/meta/mod.rs:50:1: 50:10>::from_path(_1: &Path, _2: bool) -> Result<Meta, std::io::Error> {
    debug path => _1;
    debug dereference => _2;
    let mut _0: std::result::Result<meta::Meta, std::io::Error>;
    let _3: std::fs::Metadata;
    let _4: std::option::Option<std::fs::Metadata>;
    let mut _5: (std::fs::Metadata, std::option::Option<std::fs::Metadata>);
    let mut _6: bool;
    let mut _7: &std::result::Result<std::path::PathBuf, std::io::Error>;
    let _8: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _9: &std::path::Path;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::Metadata>;
    let mut _11: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _12: &std::path::Path;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _15: std::fs::Metadata;
    let mut _16: std::option::Option<std::fs::Metadata>;
    let mut _17: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _18: &std::path::Path;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::Metadata>;
    let mut _20: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _21: &std::path::Path;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _24: std::fs::Metadata;
    let mut _25: std::option::Option<std::fs::Metadata>;
    let mut _27: &std::fs::Metadata;
    let mut _29: &std::fs::Metadata;
    let _31: &std::fs::Metadata;
    let mut _32: std::option::Option<&std::fs::Metadata>;
    let mut _33: &std::option::Option<std::fs::Metadata>;
    let _34: &meta::permissions::Permissions;
    let _36: &&std::path::Path;
    let mut _38: &std::fs::Metadata;
    let mut _40: &std::fs::Metadata;
    let mut _41: meta::Meta;
    let mut _42: std::path::PathBuf;
    let mut _43: &std::path::Path;
    let mut _44: meta::symlink::SymLink;
    let mut _45: &std::path::Path;
    let mut _46: meta::size::Size;
    let mut _47: &std::fs::Metadata;
    let mut _48: meta::date::Date;
    let mut _49: &std::fs::Metadata;
    let mut _50: meta::indicator::Indicator;
    let mut _51: meta::owner::Owner;
    let mut _52: meta::permissions::Permissions;
    let mut _53: meta::name::Name;
    let mut _54: std::option::Option<std::vec::Vec<meta::Meta>>;
    let mut _55: &std::path::Path;
    scope 1 {
        debug metadata => _3;
        debug symlink_meta => _4;
        let _26: meta::owner::Owner;
        scope 10 {
            debug owner => _26;
            let _28: meta::permissions::Permissions;
            scope 11 {
                debug permissions => _28;
                let _30: meta::filetype::FileType;
                scope 12 {
                    debug file_type => _30;
                    let _35: meta::name::Name;
                    scope 13 {
                        debug name => _35;
                        let _37: meta::inode::INode;
                        scope 14 {
                            debug inode => _37;
                            let _39: meta::links::Links;
                            scope 15 {
                                debug links => _39;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        _9 = _1;
        _8 = read_link::<&Path>(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_8;
        _6 = Result::<PathBuf, std::io::Error>::is_ok(move _7) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        switchInt(move _6) -> [0: bb13, otherwise: bb3];
    }

    bb3: {
        drop(_8) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(_2) -> [0: bb5, otherwise: bb14];
    }

    bb5: {
        _12 = _1;
        _11 = Path::symlink_metadata(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _10 = <Result<Metadata, std::io::Error> as Try>::branch(move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _15 = move ((_10 as Continue).0: std::fs::Metadata);
        _18 = _1;
        _17 = Path::metadata(move _18) -> [return: bb11, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _14 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Meta, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _14) -> [return: bb32, unwind continue];
    }

    bb11: {
        _16 = Result::<Metadata, std::io::Error>::ok(move _17) -> [return: bb12, unwind continue];
    }

    bb12: {
        _5 = (move _15, move _16);
        goto -> bb19;
    }

    bb13: {
        drop(_8) -> [return: bb14, unwind continue];
    }

    bb14: {
        _21 = _1;
        _20 = Path::metadata(move _21) -> [return: bb15, unwind continue];
    }

    bb15: {
        _19 = <Result<Metadata, std::io::Error> as Try>::branch(move _20) -> [return: bb16, unwind continue];
    }

    bb16: {
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb17, 1: bb18, otherwise: bb9];
    }

    bb17: {
        _24 = move ((_19 as Continue).0: std::fs::Metadata);
        _25 = std::option::Option::<Metadata>::None;
        _5 = (move _24, move _25);
        goto -> bb19;
    }

    bb18: {
        _23 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Meta, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb32, unwind continue];
    }

    bb19: {
        _3 = move (_5.0: std::fs::Metadata);
        _4 = move (_5.1: std::option::Option<std::fs::Metadata>);
        _27 = &_3;
        _26 = <Owner as From<&Metadata>>::from(move _27) -> [return: bb20, unwind continue];
    }

    bb20: {
        _29 = &_3;
        _28 = <permissions::Permissions as From<&Metadata>>::from(move _29) -> [return: bb21, unwind: bb36];
    }

    bb21: {
        _31 = &_3;
        _33 = &_4;
        _32 = std::option::Option::<Metadata>::as_ref(move _33) -> [return: bb22, unwind: bb36];
    }

    bb22: {
        _34 = &_28;
        _30 = filetype::FileType::new(_31, move _32, _34) -> [return: bb23, unwind: bb36];
    }

    bb23: {
        _36 = &_1;
        _55 = deref_copy (*_36);
        _35 = Name::new(_55, _30) -> [return: bb24, unwind: bb36];
    }

    bb24: {
        _38 = &_3;
        _37 = <INode as From<&Metadata>>::from(move _38) -> [return: bb25, unwind: bb35];
    }

    bb25: {
        _40 = &_3;
        _39 = <Links as From<&Metadata>>::from(move _40) -> [return: bb26, unwind: bb35];
    }

    bb26: {
        _43 = _1;
        _42 = Path::to_path_buf(move _43) -> [return: bb27, unwind: bb35];
    }

    bb27: {
        _45 = _1;
        _44 = <SymLink as From<&Path>>::from(move _45) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        _47 = &_3;
        _46 = <Size as From<&Metadata>>::from(move _47) -> [return: bb29, unwind: bb33];
    }

    bb29: {
        _49 = &_3;
        _48 = <meta::date::Date as From<&Metadata>>::from(move _49) -> [return: bb30, unwind: bb33];
    }

    bb30: {
        _50 = <indicator::Indicator as From<filetype::FileType>>::from(_30) -> [return: bb31, unwind: bb33];
    }

    bb31: {
        _51 = move _26;
        _52 = _28;
        _53 = move _35;
        _54 = std::option::Option::<Vec<Meta>>::None;
        _41 = Meta { name: move _53, path: move _42, permissions: move _52, date: move _48, owner: move _51, file_type: _30, size: move _46, symlink: move _44, indicator: move _50, inode: _37, links: _39, content: move _54 };
        _0 = Result::<Meta, std::io::Error>::Ok(move _41);
        goto -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_44) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_42) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_35) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_26) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_8) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        resume;
    }
}

fn assemble_sorters(_1: &Flags) -> Vec<(SortOrder, for<'a, 'b> fn(&'a Meta, &'b Meta) -> std::cmp::Ordering)> {
    debug flags => _1;
    let mut _0: std::vec::Vec<(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _2: std::vec::Vec<(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _3: isize;
    let _4: ();
    let mut _5: &mut std::vec::Vec<(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _6: (flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering);
    let mut _7: flags::sorting::SortOrder;
    let mut _8: for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering;
    let _9: ();
    let mut _10: &mut std::vec::Vec<(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _11: (flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering);
    let mut _12: flags::sorting::SortOrder;
    let mut _13: for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering;
    let mut _15: isize;
    let _16: ();
    let mut _17: &mut std::vec::Vec<(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _18: (flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering);
    let mut _19: flags::sorting::SortOrder;
    let mut _20: for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering;
    scope 1 {
        debug sorters => _2;
        let _14: for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering;
        scope 2 {
            debug other_sort => _14;
        }
    }

    bb0: {
        _2 = Vec::<(SortOrder, for<'a, 'b> fn(&'a Meta, &'b Meta) -> std::cmp::Ordering)>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = discriminant((((*_1).12: flags::sorting::Sorting).2: flags::sorting::DirGrouping));
        switchInt(move _3) -> [0: bb5, 1: bb3, 2: bb4, otherwise: bb2];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = &mut _2;
        _7 = SortOrder::Default;
        _8 = sort::with_dirs_first as for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering (PointerCoercion(ReifyFnPointer));
        _6 = (move _7, move _8);
        _4 = Vec::<(SortOrder, for<'a, 'b> fn(&'a Meta, &'b Meta) -> std::cmp::Ordering)>::push(move _5, move _6) -> [return: bb15, unwind: bb13];
    }

    bb4: {
        _10 = &mut _2;
        _12 = SortOrder::Reverse;
        _13 = sort::with_dirs_first as for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering (PointerCoercion(ReifyFnPointer));
        _11 = (move _12, move _13);
        _9 = Vec::<(SortOrder, for<'a, 'b> fn(&'a Meta, &'b Meta) -> std::cmp::Ordering)>::push(move _10, move _11) -> [return: bb16, unwind: bb13];
    }

    bb5: {
        _15 = discriminant((((*_1).12: flags::sorting::Sorting).0: flags::sorting::SortColumn));
        switchInt(move _15) -> [0: bb6, 1: bb7, 2: bb9, 3: bb8, 4: bb10, otherwise: bb2];
    }

    bb6: {
        _14 = sort::by_extension as for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering (PointerCoercion(ReifyFnPointer));
        goto -> bb11;
    }

    bb7: {
        _14 = sort::by_name as for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering (PointerCoercion(ReifyFnPointer));
        goto -> bb11;
    }

    bb8: {
        _14 = sort::by_size as for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering (PointerCoercion(ReifyFnPointer));
        goto -> bb11;
    }

    bb9: {
        _14 = sort::by_date as for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering (PointerCoercion(ReifyFnPointer));
        goto -> bb11;
    }

    bb10: {
        _14 = sort::by_version as for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering (PointerCoercion(ReifyFnPointer));
        goto -> bb11;
    }

    bb11: {
        _17 = &mut _2;
        _19 = (((*_1).12: flags::sorting::Sorting).1: flags::sorting::SortOrder);
        _20 = _14;
        _18 = (move _19, move _20);
        _16 = Vec::<(SortOrder, for<'a, 'b> fn(&'a Meta, &'b Meta) -> std::cmp::Ordering)>::push(move _17, move _18) -> [return: bb12, unwind: bb13];
    }

    bb12: {
        _0 = move _2;
        return;
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        goto -> bb5;
    }

    bb16: {
        goto -> bb5;
    }
}

fn by_meta(_1: &[(SortOrder, for<'a, 'b> fn(&'a Meta, &'b Meta) -> std::cmp::Ordering)], _2: &Meta, _3: &Meta) -> std::cmp::Ordering {
    debug sorters => _1;
    debug a => _2;
    debug b => _3;
    let mut _0: std::cmp::Ordering;
    let mut _4: std::slice::Iter<'_, (flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _5: std::slice::Iter<'_, (flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _6: std::slice::Iter<'_, (flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _7: std::option::Option<&(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _8: &mut std::slice::Iter<'_, (flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering)>;
    let mut _9: isize;
    let mut _12: std::cmp::Ordering;
    let mut _13: for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering;
    let mut _14: i8;
    let mut _15: isize;
    let mut _16: &(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering);
    let mut _17: &(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering);
    scope 1 {
        debug iter => _6;
        let _10: &flags::sorting::SortOrder;
        let _11: &for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering;
        scope 2 {
            debug direction => _10;
            debug sorter => _11;
            scope 3 {
                debug ordering => _12;
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [(SortOrder, for<'a, 'b> fn(&'a Meta, &'b Meta) -> std::cmp::Ordering)]>::iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <std::slice::Iter<'_, (SortOrder, for<'a, 'b> fn(&'a Meta, &'b Meta) -> std::cmp::Ordering)> as IntoIterator>::into_iter(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = move _4;
        goto -> bb3;
    }

    bb3: {
        _8 = &mut _6;
        _7 = <std::slice::Iter<'_, (SortOrder, for<'a, 'b> fn(&'a Meta, &'b Meta) -> std::cmp::Ordering)> as Iterator>::next(_8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _16 = deref_copy ((_7 as Some).0: &(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering));
        _10 = &((*_16).0: flags::sorting::SortOrder);
        _17 = deref_copy ((_7 as Some).0: &(flags::sorting::SortOrder, for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering));
        _11 = &((*_17).1: for<'a, 'b> fn(&'a meta::Meta, &'b meta::Meta) -> std::cmp::Ordering);
        _13 = (*_11);
        _12 = move _13(_2, _3) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _0 = Equal;
        goto -> bb12;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb3, otherwise: bb9];
    }

    bb9: {
        _15 = discriminant((*_10));
        switchInt(move _15) -> [0: bb10, 1: bb11, otherwise: bb6];
    }

    bb10: {
        _0 = _12;
        goto -> bb12;
    }

    bb11: {
        _0 = std::cmp::Ordering::reverse(_12) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }
}

fn with_dirs_first(_1: &Meta, _2: &Meta) -> std::cmp::Ordering {
    debug a => _1;
    debug b => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: &bool;
    let _4: bool;
    let mut _5: meta::filetype::FileType;
    let _6: &bool;
    let _7: bool;
    let mut _8: meta::filetype::FileType;

    bb0: {
        _5 = ((*_2).5: meta::filetype::FileType);
        _4 = filetype::FileType::is_dirlike(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _8 = ((*_1).5: meta::filetype::FileType);
        _7 = filetype::FileType::is_dirlike(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _0 = <bool as Ord>::cmp(move _3, _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn by_size(_1: &Meta, _2: &Meta) -> std::cmp::Ordering {
    debug a => _1;
    debug b => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: &u64;
    let _4: u64;
    let mut _5: &meta::size::Size;
    let _6: &u64;
    let _7: u64;
    let mut _8: &meta::size::Size;

    bb0: {
        _5 = &((*_2).6: meta::size::Size);
        _4 = Size::get_bytes(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _8 = &((*_1).6: meta::size::Size);
        _7 = Size::get_bytes(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _0 = <u64 as Ord>::cmp(move _3, _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn by_name(_1: &Meta, _2: &Meta) -> std::cmp::Ordering {
    debug a => _1;
    debug b => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: &meta::name::Name;
    let _4: &meta::name::Name;

    bb0: {
        _3 = &((*_1).0: meta::name::Name);
        _4 = &((*_2).0: meta::name::Name);
        _0 = <Name as Ord>::cmp(move _3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn by_date(_1: &Meta, _2: &Meta) -> std::cmp::Ordering {
    debug a => _1;
    debug b => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: std::cmp::Ordering;
    let mut _4: &meta::date::Date;
    let _5: &meta::date::Date;
    let mut _6: std::cmp::Ordering;
    let mut _7: &meta::name::Name;
    let _8: &meta::name::Name;

    bb0: {
        _4 = &((*_2).3: meta::date::Date);
        _5 = &((*_1).3: meta::date::Date);
        _3 = <meta::date::Date as Ord>::cmp(move _4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &((*_1).0: meta::name::Name);
        _8 = &((*_2).0: meta::name::Name);
        _6 = <Name as Ord>::cmp(move _7, _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::cmp::Ordering::then(move _3, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn by_version(_1: &Meta, _2: &Meta) -> std::cmp::Ordering {
    debug a => _1;
    debug b => _2;
    let mut _0: std::cmp::Ordering;
    let _3: &str;
    let _4: &std::string::String;
    let _5: &str;
    let _6: &std::string::String;

    bb0: {
        _4 = &(((*_1).0: meta::name::Name).0: std::string::String);
        _3 = <std::string::String as Deref>::deref(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &(((*_2).0: meta::name::Name).0: std::string::String);
        _5 = <std::string::String as Deref>::deref(_6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = compare(_3, _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn by_extension(_1: &Meta, _2: &Meta) -> std::cmp::Ordering {
    debug a => _1;
    debug b => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: &std::option::Option<&str>;
    let _4: std::option::Option<&str>;
    let mut _5: &meta::name::Name;
    let _6: &std::option::Option<&str>;
    let _7: std::option::Option<&str>;
    let mut _8: &meta::name::Name;

    bb0: {
        _5 = &((*_1).0: meta::name::Name);
        _4 = Name::extension(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _8 = &((*_2).0: meta::name::Name);
        _7 = Name::extension(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _0 = <std::option::Option<&str> as Ord>::cmp(move _3, _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: clap::ArgMatches<'_>;
    let mut _2: clap::App<'_, '_>;
    let mut _3: std::env::ArgsOs;
    let mut _5: std::iter::Map<clap::Values<'_>, fn(&str) -> std::path::PathBuf {<std::path::PathBuf as std::convert::From<&str>>::from}>;
    let mut _6: clap::Values<'_>;
    let mut _7: std::option::Option<clap::Values<'_>>;
    let mut _8: &clap::ArgMatches<'_>;
    let _9: &str;
    let mut _11: bool;
    let mut _12: &clap::ArgMatches<'_>;
    let mut _14: std::result::Result<flags::Flags, clap::Error>;
    let _15: &clap::ArgMatches<'_>;
    let _16: &config_file::Config;
    let _18: ();
    let mut _19: std::vec::Vec<std::path::PathBuf>;
    let mut _20: bool;
    let mut _21: bool;
    scope 1 {
        debug matches => _1;
        let _4: std::vec::Vec<std::path::PathBuf>;
        scope 2 {
            debug inputs => _4;
            let _10: config_file::Config;
            scope 3 {
                debug config => _10;
                let _13: flags::Flags;
                scope 4 {
                    debug flags => _13;
                    let _17: core::Core;
                    scope 5 {
                        debug core => _17;
                    }
                }
            }
        }
    }

    bb0: {
        _21 = const false;
        _20 = const false;
        _21 = const true;
        _2 = build() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = wild::args_os() -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _21 = const false;
        _1 = App::<'_, '_>::get_matches_from::<ArgsOs, OsString>(move _2, move _3) -> [return: bb3, unwind: bb24];
    }

    bb3: {
        _21 = const false;
        _8 = &_1;
        _7 = ArgMatches::<'_>::values_of::<&str>(move _8, const "FILE") -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _9 = const "failed to retrieve cli value";
        _6 = std::option::Option::<clap::Values<'_>>::expect(move _7, _9) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _5 = <clap::Values<'_> as Iterator>::map::<PathBuf, fn(&str) -> PathBuf {<PathBuf as From<&str>>::from}>(move _6, <PathBuf as From<&str>>::from) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _4 = <std::iter::Map<clap::Values<'_>, fn(&str) -> PathBuf {<PathBuf as From<&str>>::from}> as Iterator>::collect::<Vec<PathBuf>>(move _5) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _20 = const true;
        _12 = &_1;
        _11 = ArgMatches::<'_>::is_present::<&str>(move _12, const "ignore-config") -> [return: bb8, unwind: bb22];
    }

    bb8: {
        switchInt(move _11) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _10 = Config::with_none() -> [return: bb25, unwind: bb22];
    }

    bb10: {
        _10 = <Config as Default>::default() -> [return: bb26, unwind: bb22];
    }

    bb11: {
        _15 = &_1;
        _16 = &_10;
        _14 = Flags::configure_from(_15, _16) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        _13 = Result::<Flags, clap::Error>::unwrap_or_else::<{closure@src/main.rs:110:73: 110:78}>(move _14, const ZeroSized: {closure@src/main.rs:110:73: 110:78}) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _17 = Core::new(move _13) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        _20 = const false;
        _19 = move _4;
        _18 = Core::run(move _17, move _19) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_10) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        _20 = const false;
        drop(_1) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_10) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_1) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }

    bb21 (cleanup): {
        drop(_4) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_20) -> [0: bb19, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_2) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_21) -> [0: bb20, otherwise: bb23];
    }

    bb25: {
        goto -> bb11;
    }

    bb26: {
        goto -> bb11;
    }
}

fn main::{closure#0}(_1: {closure@src/main.rs:110:73: 110:78}, _2: clap::Error) -> Flags {
    debug err => _2;
    let mut _0: flags::Flags;
    let mut _3: !;
    let mut _4: &clap::Error;

    bb0: {
        _4 = &_2;
        _3 = clap::Error::exit(move _4) -> bb1;
    }

    bb1 (cleanup): {
        drop(_2) -> [return: bb2, unwind terminate(cleanup)];
    }

    bb2 (cleanup): {
        resume;
    }
}

fn Blocks(_1: Vec<Block>) -> Blocks {
    let mut _0: flags::blocks::Blocks;

    bb0: {
        _0 = Blocks(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Blocks(_1: Vec<Block>) -> Blocks {
    let mut _0: flags::blocks::Blocks;

    bb0: {
        _0 = Blocks(move _1);
        return;
    }
}

fn DateFlag::Formatted(_1: std::string::String) -> DateFlag {
    let mut _0: flags::date::DateFlag;

    bb0: {
        _0 = DateFlag::Formatted(move _1);
        return;
    }
}

// MIR FOR CTFE
fn DateFlag::Formatted(_1: std::string::String) -> DateFlag {
    let mut _0: flags::date::DateFlag;

    bb0: {
        _0 = DateFlag::Formatted(move _1);
        return;
    }
}

fn Dereference(_1: bool) -> Dereference {
    let mut _0: flags::dereference::Dereference;

    bb0: {
        _0 = Dereference(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Dereference(_1: bool) -> Dereference {
    let mut _0: flags::dereference::Dereference;

    bb0: {
        _0 = Dereference(move _1);
        return;
    }
}

fn IconSeparator(_1: std::string::String) -> IconSeparator {
    let mut _0: flags::icons::IconSeparator;

    bb0: {
        _0 = IconSeparator(move _1);
        return;
    }
}

// MIR FOR CTFE
fn IconSeparator(_1: std::string::String) -> IconSeparator {
    let mut _0: flags::icons::IconSeparator;

    bb0: {
        _0 = IconSeparator(move _1);
        return;
    }
}

fn IgnoreGlobs(_1: GlobSet) -> IgnoreGlobs {
    let mut _0: flags::ignore_globs::IgnoreGlobs;

    bb0: {
        _0 = IgnoreGlobs(move _1);
        return;
    }
}

// MIR FOR CTFE
fn IgnoreGlobs(_1: GlobSet) -> IgnoreGlobs {
    let mut _0: flags::ignore_globs::IgnoreGlobs;

    bb0: {
        _0 = IgnoreGlobs(move _1);
        return;
    }
}

fn Indicators(_1: bool) -> Indicators {
    let mut _0: flags::indicators::Indicators;

    bb0: {
        _0 = Indicators(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Indicators(_1: bool) -> Indicators {
    let mut _0: flags::indicators::Indicators;

    bb0: {
        _0 = Indicators(move _1);
        return;
    }
}

fn SymlinkArrow(_1: std::string::String) -> SymlinkArrow {
    let mut _0: flags::symlink_arrow::SymlinkArrow;

    bb0: {
        _0 = SymlinkArrow(move _1);
        return;
    }
}

// MIR FOR CTFE
fn SymlinkArrow(_1: std::string::String) -> SymlinkArrow {
    let mut _0: flags::symlink_arrow::SymlinkArrow;

    bb0: {
        _0 = SymlinkArrow(move _1);
        return;
    }
}

fn NoSymlink(_1: bool) -> NoSymlink {
    let mut _0: flags::symlinks::NoSymlink;

    bb0: {
        _0 = NoSymlink(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NoSymlink(_1: bool) -> NoSymlink {
    let mut _0: flags::symlinks::NoSymlink;

    bb0: {
        _0 = NoSymlink(move _1);
        return;
    }
}

fn TotalSize(_1: bool) -> TotalSize {
    let mut _0: flags::total_size::TotalSize;

    bb0: {
        _0 = TotalSize(move _1);
        return;
    }
}

// MIR FOR CTFE
fn TotalSize(_1: bool) -> TotalSize {
    let mut _0: flags::total_size::TotalSize;

    bb0: {
        _0 = TotalSize(move _1);
        return;
    }
}

fn meta::date::Date(_1: DateTime<Local>) -> meta::date::Date {
    let mut _0: meta::date::Date;

    bb0: {
        _0 = meta::date::Date(move _1);
        return;
    }
}

// MIR FOR CTFE
fn meta::date::Date(_1: DateTime<Local>) -> meta::date::Date {
    let mut _0: meta::date::Date;

    bb0: {
        _0 = meta::date::Date(move _1);
        return;
    }
}

fn indicator::Indicator(_1: &str) -> indicator::Indicator {
    let mut _0: meta::indicator::Indicator;

    bb0: {
        _0 = indicator::Indicator(move _1);
        return;
    }
}

// MIR FOR CTFE
fn indicator::Indicator(_1: &str) -> indicator::Indicator {
    let mut _0: meta::indicator::Indicator;

    bb0: {
        _0 = indicator::Indicator(move _1);
        return;
    }
}
