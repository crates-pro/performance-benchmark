// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn grammar::<impl at src/grammar.rs:43:10: 43:15>::fmt(_1: &grammar::Block, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/grammar.rs:43:10: 43:15
    debug f => _2;                       // in scope 0 at src/grammar.rs:43:10: 43:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/grammar.rs:43:10: 43:15
    let _3: &std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    let mut _5: std::fmt::DebugTuple;    // in scope 0 at src/grammar.rs:43:10: 43:15
    let mut _6: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:43:10: 43:15
    let mut _7: &str;                    // in scope 0 at src/grammar.rs:43:10: 43:15
    let _8: &str;                        // in scope 0 at src/grammar.rs:43:10: 43:15
    let mut _9: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:43:10: 43:15
    let mut _10: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:43:10: 43:15
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:46:18: 46:36
    let mut _12: &&std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    let _13: &&std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    let _14: &std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    let mut _15: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:43:10: 43:15
    scope 1 {
        debug __self_0_0 => _3;          // in scope 1 at src/grammar.rs:46:18: 46:36
        let _4: &mut std::fmt::DebugTuple; // in scope 1 at src/grammar.rs:43:10: 43:15
        scope 2 {
            debug debug_trait_builder => _4; // in scope 2 at src/grammar.rs:43:10: 43:15
            scope 3 {
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:46:18: 46:36
        _3 = &((*_1).0: std::vec::Vec<grammar::Statement>); // scope 0 at src/grammar.rs:46:18: 46:36
        StorageLive(_4);                 // scope 1 at src/grammar.rs:43:10: 43:15
        StorageLive(_5);                 // scope 1 at src/grammar.rs:43:10: 43:15
        StorageLive(_6);                 // scope 1 at src/grammar.rs:43:10: 43:15
        _6 = &mut (*_2);                 // scope 1 at src/grammar.rs:43:10: 43:15
        StorageLive(_7);                 // scope 1 at src/grammar.rs:43:10: 43:15
        StorageLive(_8);                 // scope 1 at src/grammar.rs:43:10: 43:15
        _8 = const "Block";              // scope 1 at src/grammar.rs:43:10: 43:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [66, 108, 111, 99, 107], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:43:10: 43:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 108, 111, 99, 107], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _7 = _8;                         // scope 1 at src/grammar.rs:43:10: 43:15
        _5 = Formatter::debug_tuple(move _6, move _7) -> bb1; // scope 1 at src/grammar.rs:43:10: 43:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:43:10: 43:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_7);                 // scope 1 at src/grammar.rs:43:14: 43:15
        StorageDead(_6);                 // scope 1 at src/grammar.rs:43:14: 43:15
        _4 = &mut _5;                    // scope 1 at src/grammar.rs:43:10: 43:15
        StorageDead(_8);                 // scope 1 at src/grammar.rs:43:14: 43:15
        StorageLive(_9);                 // scope 2 at src/grammar.rs:43:10: 43:15
        StorageLive(_10);                // scope 2 at src/grammar.rs:43:10: 43:15
        _10 = &mut (*_4);                // scope 2 at src/grammar.rs:43:10: 43:15
        StorageLive(_11);                // scope 2 at src/grammar.rs:46:18: 46:36
        StorageLive(_12);                // scope 2 at src/grammar.rs:46:18: 46:36
        StorageLive(_13);                // scope 2 at src/grammar.rs:46:18: 46:36
        StorageLive(_14);                // scope 2 at src/grammar.rs:46:18: 46:36
        _14 = _3;                        // scope 2 at src/grammar.rs:46:18: 46:36
        _13 = &_14;                      // scope 2 at src/grammar.rs:46:18: 46:36
        _12 = _13;                       // scope 2 at src/grammar.rs:46:18: 46:36
        _11 = move _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at src/grammar.rs:46:18: 46:36
        StorageDead(_12);                // scope 2 at src/grammar.rs:46:35: 46:36
        _9 = DebugTuple::field(move _10, move _11) -> bb2; // scope 2 at src/grammar.rs:43:10: 43:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:43:10: 43:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_11);                // scope 2 at src/grammar.rs:43:14: 43:15
        StorageDead(_10);                // scope 2 at src/grammar.rs:43:14: 43:15
        StorageDead(_14);                // scope 2 at src/grammar.rs:43:14: 43:15
        StorageDead(_13);                // scope 2 at src/grammar.rs:43:14: 43:15
        StorageDead(_9);                 // scope 2 at src/grammar.rs:43:14: 43:15
        StorageLive(_15);                // scope 3 at src/grammar.rs:43:10: 43:15
        _15 = &mut (*_4);                // scope 3 at src/grammar.rs:43:10: 43:15
        _0 = DebugTuple::finish(move _15) -> bb3; // scope 3 at src/grammar.rs:43:10: 43:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:43:10: 43:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_15);                // scope 3 at src/grammar.rs:43:14: 43:15
        StorageDead(_5);                 // scope 1 at src/grammar.rs:43:14: 43:15
        StorageDead(_4);                 // scope 1 at src/grammar.rs:43:14: 43:15
        StorageDead(_3);                 // scope 0 at src/grammar.rs:43:14: 43:15
        return;                          // scope 0 at src/grammar.rs:43:15: 43:15
    }
}

fn grammar_lexer::<impl at src/grammar_lexer.rs:3:10: 3:15>::fmt(_1: &grammar_lexer::Token, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    debug f => _2;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _3: (&grammar_lexer::Token,); // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _4: &grammar_lexer::Token;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _5: isize;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _6: &mut std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _7: std::fmt::DebugTuple;    // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _8: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _9: &str;                    // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _10: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _11: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _12: &std::string::String;       // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let mut _14: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _15: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _16: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _17: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _18: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _19: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _20: &dyn std::fmt::Debug;   // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let mut _21: &&std::string::String;  // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let _22: &&std::string::String;      // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let _23: &std::string::String;       // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let mut _24: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _25: &i32;                       // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let mut _27: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _28: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _29: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _30: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _31: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _32: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _33: &dyn std::fmt::Debug;   // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let mut _34: &&i32;                  // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let _35: &&i32;                      // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let _36: &i32;                       // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let mut _37: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _38: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _39: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _40: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _41: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _42: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _43: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _44: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _45: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _46: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _47: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _48: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _49: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _50: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _51: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _52: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _53: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _54: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _55: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _56: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _57: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _58: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _59: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _60: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _61: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _62: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _63: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _64: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _65: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _66: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _67: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _68: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _69: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _70: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _71: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _72: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _73: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _74: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _75: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _76: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _77: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _78: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _79: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _80: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _81: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _82: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _83: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _84: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _85: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _86: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _87: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _88: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _89: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _90: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _91: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _92: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _93: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _94: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _95: &str;                   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _96: &str;                       // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _97: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _98: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _99: std::fmt::DebugTuple;   // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _100: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _101: &str;                  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _102: &str;                      // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _103: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _104: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _105: std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _106: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _107: &str;                  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _108: &str;                      // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _109: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _110: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _111: std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _112: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _113: &str;                  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _114: &str;                      // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _115: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _116: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _117: std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _118: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _119: &str;                  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _120: &str;                      // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _121: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _122: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _123: std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _124: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _125: &str;                  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _126: &str;                      // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _127: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _128: &grammar::Comparator;      // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    let mut _130: std::fmt::DebugTuple;  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _131: &mut std::fmt::Formatter; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _132: &str;                  // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let _133: &str;                      // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _134: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _135: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    let mut _136: &dyn std::fmt::Debug;  // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    let mut _137: &&grammar::Comparator; // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    let _138: &&grammar::Comparator;     // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    let _139: &grammar::Comparator;      // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    let mut _140: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar_lexer.rs:3:10: 3:15
    scope 1 {
        debug debug_trait_builder => _6; // in scope 1 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 2 {
        debug __self_0 => _12;           // in scope 2 at src/grammar_lexer.rs:9:9: 9:15
        let _13: &mut std::fmt::DebugTuple; // in scope 2 at src/grammar_lexer.rs:3:10: 3:15
        scope 3 {
            debug debug_trait_builder => _13; // in scope 3 at src/grammar_lexer.rs:3:10: 3:15
            scope 4 {
            }
        }
    }
    scope 5 {
        debug __self_0 => _25;           // in scope 5 at src/grammar_lexer.rs:10:10: 10:13
        let _26: &mut std::fmt::DebugTuple; // in scope 5 at src/grammar_lexer.rs:3:10: 3:15
        scope 6 {
            debug debug_trait_builder => _26; // in scope 6 at src/grammar_lexer.rs:3:10: 3:15
            scope 7 {
            }
        }
    }
    scope 8 {
        debug debug_trait_builder => _38; // in scope 8 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 9 {
        debug debug_trait_builder => _44; // in scope 9 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 10 {
        debug debug_trait_builder => _50; // in scope 10 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 11 {
        debug debug_trait_builder => _56; // in scope 11 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 12 {
        debug debug_trait_builder => _62; // in scope 12 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 13 {
        debug debug_trait_builder => _68; // in scope 13 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 14 {
        debug debug_trait_builder => _74; // in scope 14 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 15 {
        debug debug_trait_builder => _80; // in scope 15 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 16 {
        debug debug_trait_builder => _86; // in scope 16 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 17 {
        debug debug_trait_builder => _92; // in scope 17 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 18 {
        debug debug_trait_builder => _98; // in scope 18 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 19 {
        debug debug_trait_builder => _104; // in scope 19 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 20 {
        debug debug_trait_builder => _110; // in scope 20 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 21 {
        debug debug_trait_builder => _116; // in scope 21 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 22 {
        debug debug_trait_builder => _122; // in scope 22 at src/grammar_lexer.rs:3:10: 3:15
    }
    scope 23 {
        debug __self_0 => _128;          // in scope 23 at src/grammar_lexer.rs:26:7: 26:17
        let _129: &mut std::fmt::DebugTuple; // in scope 23 at src/grammar_lexer.rs:3:10: 3:15
        scope 24 {
            debug debug_trait_builder => _129; // in scope 24 at src/grammar_lexer.rs:3:10: 3:15
            scope 25 {
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_4);                 // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _4 = _1;                         // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        (_3.0: &grammar_lexer::Token) = move _4; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_4);                 // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _5 = discriminant((*(_3.0: &grammar_lexer::Token))); // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        switchInt(move _5) -> [0_isize: bb3, 1_isize: bb6, 2_isize: bb10, 3_isize: bb14, 4_isize: bb17, 5_isize: bb20, 6_isize: bb23, 7_isize: bb26, 8_isize: bb29, 9_isize: bb32, 10_isize: bb35, 11_isize: bb38, 12_isize: bb41, 13_isize: bb44, 14_isize: bb47, 15_isize: bb50, 16_isize: bb53, 17_isize: bb56, 18_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
    }

    bb1: {
        StorageLive(_128);               // scope 0 at src/grammar_lexer.rs:26:7: 26:17
        _128 = &(((*(_3.0: &grammar_lexer::Token)) as Cmp).0: grammar::Comparator); // scope 0 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_129);               // scope 23 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_130);               // scope 23 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_131);               // scope 23 at src/grammar_lexer.rs:3:10: 3:15
        _131 = &mut (*_2);               // scope 23 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_132);               // scope 23 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_133);               // scope 23 at src/grammar_lexer.rs:3:10: 3:15
        _133 = const "Cmp";              // scope 23 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 109, 112], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 109, 112], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 }) }
        _132 = _133;                     // scope 23 at src/grammar_lexer.rs:3:10: 3:15
        _130 = Formatter::debug_tuple(move _131, move _132) -> bb59; // scope 23 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(38)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar_lexer.rs:3:10: 3:15
    }

    bb3: {
        StorageLive(_6);                 // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_7);                 // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_8);                 // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _8 = &mut (*_2);                 // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_9);                 // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_10);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _10 = const "Equals";            // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [69, 113, 117, 97, 108, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69, 113, 117, 97, 108, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _9 = _10;                        // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _7 = Formatter::debug_tuple(move _8, move _9) -> bb4; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_9);                 // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_8);                 // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _6 = &mut _7;                    // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_10);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_11);                // scope 1 at src/grammar_lexer.rs:3:10: 3:15
        _11 = &mut (*_6);                // scope 1 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _11) -> bb5; // scope 1 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_11);                // scope 1 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_7);                 // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_6);                 // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb6: {
        StorageLive(_12);                // scope 0 at src/grammar_lexer.rs:9:9: 9:15
        _12 = &(((*(_3.0: &grammar_lexer::Token)) as Ident).0: std::string::String); // scope 0 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_13);                // scope 2 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_14);                // scope 2 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_15);                // scope 2 at src/grammar_lexer.rs:3:10: 3:15
        _15 = &mut (*_2);                // scope 2 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_16);                // scope 2 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_17);                // scope 2 at src/grammar_lexer.rs:3:10: 3:15
        _17 = const "Ident";             // scope 2 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [73, 100, 101, 110, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [73, 100, 101, 110, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _16 = _17;                       // scope 2 at src/grammar_lexer.rs:3:10: 3:15
        _14 = Formatter::debug_tuple(move _15, move _16) -> bb7; // scope 2 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_16);                // scope 2 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_15);                // scope 2 at src/grammar_lexer.rs:3:14: 3:15
        _13 = &mut _14;                  // scope 2 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_17);                // scope 2 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_18);                // scope 3 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_19);                // scope 3 at src/grammar_lexer.rs:3:10: 3:15
        _19 = &mut (*_13);               // scope 3 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_20);                // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_21);                // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_22);                // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_23);                // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        _23 = _12;                       // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        _22 = &_23;                      // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        _21 = _22;                       // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        _20 = move _21 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        StorageDead(_21);                // scope 3 at src/grammar_lexer.rs:9:14: 9:15
        _18 = DebugTuple::field(move _19, move _20) -> bb8; // scope 3 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_20);                // scope 3 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_19);                // scope 3 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_23);                // scope 3 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_22);                // scope 3 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_18);                // scope 3 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_24);                // scope 4 at src/grammar_lexer.rs:3:10: 3:15
        _24 = &mut (*_13);               // scope 4 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _24) -> bb9; // scope 4 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_24);                // scope 4 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_14);                // scope 2 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_13);                // scope 2 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_12);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb10: {
        StorageLive(_25);                // scope 0 at src/grammar_lexer.rs:10:10: 10:13
        _25 = &(((*(_3.0: &grammar_lexer::Token)) as Number).0: i32); // scope 0 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_26);                // scope 5 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_27);                // scope 5 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_28);                // scope 5 at src/grammar_lexer.rs:3:10: 3:15
        _28 = &mut (*_2);                // scope 5 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_29);                // scope 5 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_30);                // scope 5 at src/grammar_lexer.rs:3:10: 3:15
        _30 = const "Number";            // scope 5 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [78, 117, 109, 98, 101, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [78, 117, 109, 98, 101, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _29 = _30;                       // scope 5 at src/grammar_lexer.rs:3:10: 3:15
        _27 = Formatter::debug_tuple(move _28, move _29) -> bb11; // scope 5 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_29);                // scope 5 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_28);                // scope 5 at src/grammar_lexer.rs:3:14: 3:15
        _26 = &mut _27;                  // scope 5 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_30);                // scope 5 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_31);                // scope 6 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_32);                // scope 6 at src/grammar_lexer.rs:3:10: 3:15
        _32 = &mut (*_26);               // scope 6 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_33);                // scope 6 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_34);                // scope 6 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_35);                // scope 6 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_36);                // scope 6 at src/grammar_lexer.rs:10:10: 10:13
        _36 = _25;                       // scope 6 at src/grammar_lexer.rs:10:10: 10:13
        _35 = &_36;                      // scope 6 at src/grammar_lexer.rs:10:10: 10:13
        _34 = _35;                       // scope 6 at src/grammar_lexer.rs:10:10: 10:13
        _33 = move _34 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 6 at src/grammar_lexer.rs:10:10: 10:13
        StorageDead(_34);                // scope 6 at src/grammar_lexer.rs:10:12: 10:13
        _31 = DebugTuple::field(move _32, move _33) -> bb12; // scope 6 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_33);                // scope 6 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_32);                // scope 6 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_36);                // scope 6 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_35);                // scope 6 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_31);                // scope 6 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_37);                // scope 7 at src/grammar_lexer.rs:3:10: 3:15
        _37 = &mut (*_26);               // scope 7 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _37) -> bb13; // scope 7 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_37);                // scope 7 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_27);                // scope 5 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_26);                // scope 5 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_25);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb14: {
        StorageLive(_38);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_39);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_40);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _40 = &mut (*_2);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_41);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_42);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _42 = const "PlusSign";          // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [80, 108, 117, 115, 83, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [80, 108, 117, 115, 83, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
        _41 = _42;                       // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _39 = Formatter::debug_tuple(move _40, move _41) -> bb15; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_41);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_40);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _38 = &mut _39;                  // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_42);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_43);                // scope 8 at src/grammar_lexer.rs:3:10: 3:15
        _43 = &mut (*_38);               // scope 8 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _43) -> bb16; // scope 8 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_43);                // scope 8 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_39);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_38);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb17: {
        StorageLive(_44);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_45);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_46);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _46 = &mut (*_2);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_47);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_48);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _48 = const "MinusSign";         // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 105, 110, 117, 115, 83, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 105, 110, 117, 115, 83, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _47 = _48;                       // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _45 = Formatter::debug_tuple(move _46, move _47) -> bb18; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_47);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_46);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _44 = &mut _45;                  // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_48);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_49);                // scope 9 at src/grammar_lexer.rs:3:10: 3:15
        _49 = &mut (*_44);               // scope 9 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _49) -> bb19; // scope 9 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_49);                // scope 9 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_45);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_44);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb20: {
        StorageLive(_50);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_51);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_52);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _52 = &mut (*_2);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_53);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_54);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _54 = const "MultSign";          // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 117, 108, 116, 83, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 117, 108, 116, 83, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
        _53 = _54;                       // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _51 = Formatter::debug_tuple(move _52, move _53) -> bb21; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        StorageDead(_53);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_52);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _50 = &mut _51;                  // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_54);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_55);                // scope 10 at src/grammar_lexer.rs:3:10: 3:15
        _55 = &mut (*_50);               // scope 10 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _55) -> bb22; // scope 10 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_55);                // scope 10 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_51);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_50);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb23: {
        StorageLive(_56);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_57);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_58);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _58 = &mut (*_2);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_59);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_60);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _60 = const "DivideSign";        // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [68, 105, 118, 105, 100, 101, 83, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68, 105, 118, 105, 100, 101, 83, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
        _59 = _60;                       // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _57 = Formatter::debug_tuple(move _58, move _59) -> bb24; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        StorageDead(_59);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_58);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _56 = &mut _57;                  // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_60);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_61);                // scope 11 at src/grammar_lexer.rs:3:10: 3:15
        _61 = &mut (*_56);               // scope 11 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _61) -> bb25; // scope 11 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        StorageDead(_61);                // scope 11 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_57);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_56);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb26: {
        StorageLive(_62);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_63);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_64);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _64 = &mut (*_2);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_65);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_66);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _66 = const "ModuloSign";        // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 111, 100, 117, 108, 111, 83, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 111, 100, 117, 108, 111, 83, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
        _65 = _66;                       // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _63 = Formatter::debug_tuple(move _64, move _65) -> bb27; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb27: {
        StorageDead(_65);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_64);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _62 = &mut _63;                  // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_66);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_67);                // scope 12 at src/grammar_lexer.rs:3:10: 3:15
        _67 = &mut (*_62);               // scope 12 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _67) -> bb28; // scope 12 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        StorageDead(_67);                // scope 12 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_63);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_62);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb29: {
        StorageLive(_68);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_69);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_70);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _70 = &mut (*_2);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_71);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_72);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _72 = const "OutputCmd";         // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [79, 117, 116, 112, 117, 116, 67, 109, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [79, 117, 116, 112, 117, 116, 67, 109, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _71 = _72;                       // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _69 = Formatter::debug_tuple(move _70, move _71) -> bb30; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb30: {
        StorageDead(_71);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_70);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _68 = &mut _69;                  // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_72);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_73);                // scope 13 at src/grammar_lexer.rs:3:10: 3:15
        _73 = &mut (*_68);               // scope 13 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _73) -> bb31; // scope 13 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb31: {
        StorageDead(_73);                // scope 13 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_69);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_68);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb32: {
        StorageLive(_74);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_75);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_76);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _76 = &mut (*_2);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_77);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_78);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _78 = const "NewLine";           // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [78, 101, 119, 76, 105, 110, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [78, 101, 119, 76, 105, 110, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _77 = _78;                       // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _75 = Formatter::debug_tuple(move _76, move _77) -> bb33; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb33: {
        StorageDead(_77);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_76);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _74 = &mut _75;                  // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_78);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_79);                // scope 14 at src/grammar_lexer.rs:3:10: 3:15
        _79 = &mut (*_74);               // scope 14 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _79) -> bb34; // scope 14 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        StorageDead(_79);                // scope 14 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_75);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_74);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb35: {
        StorageLive(_80);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_81);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_82);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _82 = &mut (*_2);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_83);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_84);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _84 = const "OpenParen";         // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [79, 112, 101, 110, 80, 97, 114, 101, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [79, 112, 101, 110, 80, 97, 114, 101, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _83 = _84;                       // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _81 = Formatter::debug_tuple(move _82, move _83) -> bb36; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb36: {
        StorageDead(_83);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_82);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _80 = &mut _81;                  // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_84);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_85);                // scope 15 at src/grammar_lexer.rs:3:10: 3:15
        _85 = &mut (*_80);               // scope 15 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _85) -> bb37; // scope 15 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb37: {
        StorageDead(_85);                // scope 15 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_81);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_80);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb38: {
        StorageLive(_86);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_87);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_88);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _88 = &mut (*_2);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_89);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_90);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _90 = const "CloseParen";        // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 108, 111, 115, 101, 80, 97, 114, 101, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 108, 111, 115, 101, 80, 97, 114, 101, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
        _89 = _90;                       // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _87 = Formatter::debug_tuple(move _88, move _89) -> bb39; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb39: {
        StorageDead(_89);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_88);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _86 = &mut _87;                  // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_90);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_91);                // scope 16 at src/grammar_lexer.rs:3:10: 3:15
        _91 = &mut (*_86);               // scope 16 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _91) -> bb40; // scope 16 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(25)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb40: {
        StorageDead(_91);                // scope 16 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_87);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_86);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb41: {
        StorageLive(_92);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_93);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_94);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _94 = &mut (*_2);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_95);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_96);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _96 = const "OpenBrace";         // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [79, 112, 101, 110, 66, 114, 97, 99, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [79, 112, 101, 110, 66, 114, 97, 99, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _95 = _96;                       // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _93 = Formatter::debug_tuple(move _94, move _95) -> bb42; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(26)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb42: {
        StorageDead(_95);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_94);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _92 = &mut _93;                  // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_96);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_97);                // scope 17 at src/grammar_lexer.rs:3:10: 3:15
        _97 = &mut (*_92);               // scope 17 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _97) -> bb43; // scope 17 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(27)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb43: {
        StorageDead(_97);                // scope 17 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_93);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_92);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb44: {
        StorageLive(_98);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_99);                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_100);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _100 = &mut (*_2);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_101);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_102);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _102 = const "CloseBrace";       // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 108, 111, 115, 101, 66, 114, 97, 99, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 108, 111, 115, 101, 66, 114, 97, 99, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
        _101 = _102;                     // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _99 = Formatter::debug_tuple(move _100, move _101) -> bb45; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(28)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb45: {
        StorageDead(_101);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_100);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _98 = &mut _99;                  // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_102);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_103);               // scope 18 at src/grammar_lexer.rs:3:10: 3:15
        _103 = &mut (*_98);              // scope 18 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _103) -> bb46; // scope 18 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(29)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb46: {
        StorageDead(_103);               // scope 18 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_99);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_98);                // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb47: {
        StorageLive(_104);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_105);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_106);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _106 = &mut (*_2);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_107);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_108);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _108 = const "IfKeyword";        // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [73, 102, 75, 101, 121, 119, 111, 114, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [73, 102, 75, 101, 121, 119, 111, 114, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _107 = _108;                     // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _105 = Formatter::debug_tuple(move _106, move _107) -> bb48; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(30)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb48: {
        StorageDead(_107);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_106);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _104 = &mut _105;                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_108);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_109);               // scope 19 at src/grammar_lexer.rs:3:10: 3:15
        _109 = &mut (*_104);             // scope 19 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _109) -> bb49; // scope 19 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(31)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb49: {
        StorageDead(_109);               // scope 19 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_105);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_104);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb50: {
        StorageLive(_110);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_111);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_112);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _112 = &mut (*_2);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_113);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_114);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _114 = const "ElseKeyword";      // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [69, 108, 115, 101, 75, 101, 121, 119, 111, 114, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69, 108, 115, 101, 75, 101, 121, 119, 111, 114, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        _113 = _114;                     // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _111 = Formatter::debug_tuple(move _112, move _113) -> bb51; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(32)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb51: {
        StorageDead(_113);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_112);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _110 = &mut _111;                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_114);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_115);               // scope 20 at src/grammar_lexer.rs:3:10: 3:15
        _115 = &mut (*_110);             // scope 20 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _115) -> bb52; // scope 20 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(33)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb52: {
        StorageDead(_115);               // scope 20 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_111);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_110);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb53: {
        StorageLive(_116);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_117);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_118);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _118 = &mut (*_2);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_119);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_120);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _120 = const "WhileKeyword";     // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [87, 104, 105, 108, 101, 75, 101, 121, 119, 111, 114, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [87, 104, 105, 108, 101, 75, 101, 121, 119, 111, 114, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
        _119 = _120;                     // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _117 = Formatter::debug_tuple(move _118, move _119) -> bb54; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(34)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb54: {
        StorageDead(_119);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_118);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _116 = &mut _117;                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_120);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_121);               // scope 21 at src/grammar_lexer.rs:3:10: 3:15
        _121 = &mut (*_116);             // scope 21 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _121) -> bb55; // scope 21 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(35)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb55: {
        StorageDead(_121);               // scope 21 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_117);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_116);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb56: {
        StorageLive(_122);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_123);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_124);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _124 = &mut (*_2);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_125);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_126);               // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _126 = const "LoopKeyword";      // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [76, 111, 111, 112, 75, 101, 121, 119, 111, 114, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [76, 111, 111, 112, 75, 101, 121, 119, 111, 114, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        _125 = _126;                     // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        _123 = Formatter::debug_tuple(move _124, move _125) -> bb57; // scope 0 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(36)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb57: {
        StorageDead(_125);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_124);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        _122 = &mut _123;                // scope 0 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_126);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_127);               // scope 22 at src/grammar_lexer.rs:3:10: 3:15
        _127 = &mut (*_122);             // scope 22 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _127) -> bb58; // scope 22 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(37)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb58: {
        StorageDead(_127);               // scope 22 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_123);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_122);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb59: {
        StorageDead(_132);               // scope 23 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_131);               // scope 23 at src/grammar_lexer.rs:3:14: 3:15
        _129 = &mut _130;                // scope 23 at src/grammar_lexer.rs:3:10: 3:15
        StorageDead(_133);               // scope 23 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_134);               // scope 24 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_135);               // scope 24 at src/grammar_lexer.rs:3:10: 3:15
        _135 = &mut (*_129);             // scope 24 at src/grammar_lexer.rs:3:10: 3:15
        StorageLive(_136);               // scope 24 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_137);               // scope 24 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_138);               // scope 24 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_139);               // scope 24 at src/grammar_lexer.rs:26:7: 26:17
        _139 = _128;                     // scope 24 at src/grammar_lexer.rs:26:7: 26:17
        _138 = &_139;                    // scope 24 at src/grammar_lexer.rs:26:7: 26:17
        _137 = _138;                     // scope 24 at src/grammar_lexer.rs:26:7: 26:17
        _136 = move _137 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 24 at src/grammar_lexer.rs:26:7: 26:17
        StorageDead(_137);               // scope 24 at src/grammar_lexer.rs:26:16: 26:17
        _134 = DebugTuple::field(move _135, move _136) -> bb60; // scope 24 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(39)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb60: {
        StorageDead(_136);               // scope 24 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_135);               // scope 24 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_139);               // scope 24 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_138);               // scope 24 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_134);               // scope 24 at src/grammar_lexer.rs:3:14: 3:15
        StorageLive(_140);               // scope 25 at src/grammar_lexer.rs:3:10: 3:15
        _140 = &mut (*_129);             // scope 25 at src/grammar_lexer.rs:3:10: 3:15
        _0 = DebugTuple::finish(move _140) -> bb61; // scope 25 at src/grammar_lexer.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:3:10: 3:15
                                         // + user_ty: UserType(40)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb61: {
        StorageDead(_140);               // scope 25 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_130);               // scope 23 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_129);               // scope 23 at src/grammar_lexer.rs:3:14: 3:15
        StorageDead(_128);               // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        goto -> bb62;                    // scope 0 at src/grammar_lexer.rs:3:14: 3:15
    }

    bb62: {
        StorageDead(_3);                 // scope 0 at src/grammar_lexer.rs:3:14: 3:15
        return;                          // scope 0 at src/grammar_lexer.rs:3:15: 3:15
    }
}

fn grammar::<impl at src/grammar.rs:3:10: 3:15>::clone(_1: &grammar::AddOp) -> grammar::AddOp {
    debug self => _1;                    // in scope 0 at src/grammar.rs:3:10: 3:15
    let mut _0: grammar::AddOp;          // return place in scope 0 at src/grammar.rs:3:10: 3:15
    let mut _2: (&grammar::AddOp,);      // in scope 0 at src/grammar.rs:3:10: 3:15
    let mut _3: &grammar::AddOp;         // in scope 0 at src/grammar.rs:3:10: 3:15
    let mut _4: isize;                   // in scope 0 at src/grammar.rs:3:10: 3:15

    bb0: {
        StorageLive(_2);                 // scope 0 at src/grammar.rs:3:10: 3:15
        StorageLive(_3);                 // scope 0 at src/grammar.rs:3:10: 3:15
        _3 = _1;                         // scope 0 at src/grammar.rs:3:10: 3:15
        (_2.0: &grammar::AddOp) = move _3; // scope 0 at src/grammar.rs:3:10: 3:15
        StorageDead(_3);                 // scope 0 at src/grammar.rs:3:14: 3:15
        _4 = discriminant((*(_2.0: &grammar::AddOp))); // scope 0 at src/grammar.rs:3:10: 3:15
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb4, 2_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar.rs:3:10: 3:15
    }

    bb1: {
        discriminant(_0) = 2;            // scope 0 at src/grammar.rs:3:10: 3:15
        goto -> bb5;                     // scope 0 at src/grammar.rs:3:10: 3:15
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar.rs:3:10: 3:15
    }

    bb3: {
        discriminant(_0) = 0;            // scope 0 at src/grammar.rs:3:10: 3:15
        goto -> bb5;                     // scope 0 at src/grammar.rs:3:10: 3:15
    }

    bb4: {
        discriminant(_0) = 1;            // scope 0 at src/grammar.rs:3:10: 3:15
        goto -> bb5;                     // scope 0 at src/grammar.rs:3:10: 3:15
    }

    bb5: {
        StorageDead(_2);                 // scope 0 at src/grammar.rs:3:14: 3:15
        return;                          // scope 0 at src/grammar.rs:3:15: 3:15
    }
}

fn program::{closure#6}(_1: &[closure@src/parser.rs:138:67: 138:82]) -> Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>>; // return place in scope 0 at src/parser.rs:138:70: 138:70
    let mut _2: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>>; // in scope 0 at src/parser.rs:138:70: 138:82

    bb0: {
        StorageLive(_2);                 // scope 0 at src/parser.rs:138:70: 138:82
        _2 = expression() -> bb1;        // scope 0 at src/parser.rs:138:70: 138:82
                                         // mir::Constant
                                         // + span: src/parser.rs:138:70: 138:80
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = move _2 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:138:70: 138:82
        StorageDead(_2);                 // scope 0 at src/parser.rs:138:81: 138:82
        return;                          // scope 0 at src/parser.rs:138:82: 138:82
    }
}

fn grammar::<impl at src/grammar.rs:61:10: 61:12>::assert_receiver_is_total_eq(_1: &grammar::Comparator) -> () {
    debug self => _1;                    // in scope 0 at src/grammar.rs:61:10: 61:12
    let mut _0: ();                      // return place in scope 0 at src/grammar.rs:61:10: 61:12

    bb0: {
        return;                          // scope 0 at src/grammar.rs:61:12: 61:12
    }
}

fn if_stmt::{closure#1}(_1: &[closure@src/parser.rs:100:40: 100:58], _2: grammar::Statement) -> grammar::Block {
    debug i => _2;                       // in scope 0 at src/parser.rs:100:41: 100:42
    let mut _0: grammar::Block;          // return place in scope 0 at src/parser.rs:100:44: 100:44
    let mut _3: std::vec::Vec<grammar::Statement>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:66
    let mut _4: std::boxed::Box<[grammar::Statement]>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
    let mut _5: std::boxed::Box<[grammar::Statement; 1]>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
    let mut _6: std::boxed::Box<[grammar::Statement; 1]>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
    let mut _7: grammar::Statement;      // in scope 0 at src/parser.rs:100:55: 100:56

    bb0: {
        StorageLive(_3);                 // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:66
        StorageLive(_4);                 // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageLive(_5);                 // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageLive(_6);                 // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        _6 = Box([grammar::Statement; 1]); // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageLive(_7);                 // scope 0 at src/parser.rs:100:55: 100:56
        _7 = move _2;                    // scope 0 at src/parser.rs:100:55: 100:56
        (*_6) = [move _7];               // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:56: 49:65
        StorageDead(_7);                 // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        _5 = move _6;                    // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        _4 = move _5 as std::boxed::Box<[grammar::Statement]> (Pointer(Unsize)); // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageDead(_6);                 // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_5);                 // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        _3 = slice::<impl [grammar::Statement]>::into_vec::<std::alloc::Global>(move _4) -> bb1; // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:66
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::boxed::Box<[grammar::Statement]>) -> std::vec::Vec<grammar::Statement> {std::slice::<impl [grammar::Statement]>::into_vec::<std::alloc::Global>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:65: 49:66
        (_0.0: std::vec::Vec<grammar::Statement>) = move _3; // scope 0 at src/parser.rs:100:44: 100:58
        StorageDead(_3);                 // scope 0 at src/parser.rs:100:57: 100:58
        return;                          // scope 0 at src/parser.rs:100:58: 100:58
    }
}

fn grammar::<impl at src/grammar.rs:28:10: 28:19>::eq(_1: &grammar::MultTerm, _2: &grammar::MultTerm) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:28:10: 28:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:28:10: 28:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:28:10: 28:19
    let _3: &grammar::MultOp;            // in scope 0 at src/grammar.rs:29:21: 29:31
    let _4: &grammar::Expr;              // in scope 0 at src/grammar.rs:29:33: 29:41
    let mut _7: bool;                    // in scope 0 at src/grammar.rs:29:21: 29:31
    let mut _8: &grammar::MultOp;        // in scope 0 at src/grammar.rs:29:21: 29:31
    let mut _9: &grammar::MultOp;        // in scope 0 at src/grammar.rs:29:21: 29:31
    let mut _10: bool;                   // in scope 0 at src/grammar.rs:29:33: 29:41
    let mut _11: &grammar::Expr;         // in scope 0 at src/grammar.rs:29:33: 29:41
    let mut _12: &grammar::Expr;         // in scope 0 at src/grammar.rs:29:33: 29:41
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at src/grammar.rs:29:21: 29:31
        debug __self_1_1 => _4;          // in scope 1 at src/grammar.rs:29:33: 29:41
        let _5: &grammar::MultOp;        // in scope 1 at src/grammar.rs:29:21: 29:31
        let _6: &grammar::Expr;          // in scope 1 at src/grammar.rs:29:33: 29:41
        scope 2 {
            debug __self_0_0 => _5;      // in scope 2 at src/grammar.rs:29:21: 29:31
            debug __self_0_1 => _6;      // in scope 2 at src/grammar.rs:29:33: 29:41
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:29:21: 29:31
        _3 = &((*_2).0: grammar::MultOp); // scope 0 at src/grammar.rs:29:21: 29:31
        StorageLive(_4);                 // scope 0 at src/grammar.rs:29:33: 29:41
        _4 = &((*_2).1: grammar::Expr);  // scope 0 at src/grammar.rs:29:33: 29:41
        StorageLive(_5);                 // scope 1 at src/grammar.rs:29:21: 29:31
        _5 = &((*_1).0: grammar::MultOp); // scope 1 at src/grammar.rs:29:21: 29:31
        StorageLive(_6);                 // scope 1 at src/grammar.rs:29:33: 29:41
        _6 = &((*_1).1: grammar::Expr);  // scope 1 at src/grammar.rs:29:33: 29:41
        StorageLive(_7);                 // scope 2 at src/grammar.rs:29:21: 29:31
        StorageLive(_8);                 // scope 2 at src/grammar.rs:29:21: 29:31
        _8 = _5;                         // scope 2 at src/grammar.rs:29:21: 29:31
        StorageLive(_9);                 // scope 2 at src/grammar.rs:29:21: 29:31
        _9 = _3;                         // scope 2 at src/grammar.rs:29:21: 29:31
        _7 = <grammar::MultOp as PartialEq>::eq(move _8, move _9) -> bb4; // scope 2 at src/grammar.rs:29:21: 29:31
                                         // mir::Constant
                                         // + span: src/grammar.rs:29:21: 29:31
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::MultOp, &'s grammar::MultOp) -> bool {<grammar::MultOp as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = const false;                // scope 2 at src/grammar.rs:29:33: 29:41
        goto -> bb3;                     // scope 2 at src/grammar.rs:29:33: 29:41
    }

    bb2: {
        StorageLive(_10);                // scope 2 at src/grammar.rs:29:33: 29:41
        StorageLive(_11);                // scope 2 at src/grammar.rs:29:33: 29:41
        _11 = _6;                        // scope 2 at src/grammar.rs:29:33: 29:41
        StorageLive(_12);                // scope 2 at src/grammar.rs:29:33: 29:41
        _12 = _4;                        // scope 2 at src/grammar.rs:29:33: 29:41
        _10 = <grammar::Expr as PartialEq>::eq(move _11, move _12) -> bb5; // scope 2 at src/grammar.rs:29:33: 29:41
                                         // mir::Constant
                                         // + span: src/grammar.rs:29:33: 29:41
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_10);                // scope 2 at src/grammar.rs:29:40: 29:41
        StorageDead(_7);                 // scope 2 at src/grammar.rs:29:40: 29:41
        StorageDead(_6);                 // scope 1 at src/grammar.rs:28:18: 28:19
        StorageDead(_5);                 // scope 1 at src/grammar.rs:28:18: 28:19
        StorageDead(_4);                 // scope 0 at src/grammar.rs:28:18: 28:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:28:18: 28:19
        return;                          // scope 0 at src/grammar.rs:28:19: 28:19
    }

    bb4: {
        StorageDead(_9);                 // scope 2 at src/grammar.rs:29:30: 29:31
        StorageDead(_8);                 // scope 2 at src/grammar.rs:29:30: 29:31
        switchInt(move _7) -> [false: bb1, otherwise: bb2]; // scope 2 at src/grammar.rs:29:33: 29:41
    }

    bb5: {
        StorageDead(_12);                // scope 2 at src/grammar.rs:29:40: 29:41
        StorageDead(_11);                // scope 2 at src/grammar.rs:29:40: 29:41
        _0 = move _10;                   // scope 2 at src/grammar.rs:29:33: 29:41
        goto -> bb3;                     // scope 2 at src/grammar.rs:29:33: 29:41
    }
}

fn program::{closure#3}::{closure#0}(_1: &[closure@src/parser.rs:79:37: 82:10], _2: grammar_lexer::Token) -> Option<grammar::Comparator> {
    debug token => _2;                   // in scope 0 at src/parser.rs:79:38: 79:43
    let mut _0: std::option::Option<grammar::Comparator>; // return place in scope 0 at src/parser.rs:79:45: 79:45
    let mut _3: isize;                   // in scope 0 at src/parser.rs:80:13: 80:28
    let _4: grammar::Comparator;         // in scope 0 at src/parser.rs:80:24: 80:27
    let mut _5: grammar::Comparator;     // in scope 0 at src/parser.rs:80:37: 80:40
    let mut _6: isize;                   // in scope 0 at src/parser.rs:82:9: 82:10
    scope 1 {
        debug cmp => _4;                 // in scope 1 at src/parser.rs:80:24: 80:27
    }

    bb0: {
        _3 = discriminant(_2);           // scope 0 at src/parser.rs:79:51: 79:56
        switchInt(move _3) -> [18_isize: bb2, otherwise: bb1]; // scope 0 at src/parser.rs:79:45: 79:56
    }

    bb1: {
        discriminant(_0) = 0;            // scope 0 at src/parser.rs:81:18: 81:22
        goto -> bb5;                     // scope 0 at src/parser.rs:81:18: 81:22
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at src/parser.rs:80:24: 80:27
        _4 = move ((_2 as Cmp).0: grammar::Comparator); // scope 0 at src/parser.rs:80:24: 80:27
        StorageLive(_5);                 // scope 1 at src/parser.rs:80:37: 80:40
        _5 = move _4;                    // scope 1 at src/parser.rs:80:37: 80:40
        ((_0 as Some).0: grammar::Comparator) = move _5; // scope 1 at src/parser.rs:80:32: 80:41
        discriminant(_0) = 1;            // scope 1 at src/parser.rs:80:32: 80:41
        StorageDead(_5);                 // scope 1 at src/parser.rs:80:40: 80:41
        StorageDead(_4);                 // scope 0 at src/parser.rs:80:40: 80:41
        goto -> bb5;                     // scope 0 at src/parser.rs:80:40: 80:41
    }

    bb3: {
        return;                          // scope 0 at src/parser.rs:82:10: 82:10
    }

    bb4: {
        drop(_2) -> bb3;                 // scope 0 at src/parser.rs:82:9: 82:10
    }

    bb5: {
        _6 = discriminant(_2);           // scope 0 at src/parser.rs:82:9: 82:10
        switchInt(move _6) -> [18_isize: bb3, otherwise: bb4]; // scope 0 at src/parser.rs:82:9: 82:10
    }
}

fn expression::{closure#4}(_1: &[closure@src/parser.rs:34:75: 45:14], _2: (grammar::Expr, Vec<(grammar::MultOp, grammar::Expr)>)) -> grammar::Expr {
    let mut _0: grammar::Expr;           // return place in scope 0 at src/parser.rs:34:90: 34:90
    let _3: grammar::Expr;               // in scope 0 at src/parser.rs:34:77: 34:82
    let _4: std::vec::Vec<(grammar::MultOp, grammar::Expr)>; // in scope 0 at src/parser.rs:34:84: 34:87
    let _6: ();                          // in scope 0 at src/parser.rs:36:17: 36:57
    let mut _7: &mut std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/parser.rs:36:17: 36:20
    let mut _8: grammar::MultTerm;       // in scope 0 at src/parser.rs:36:26: 36:56
    let mut _9: grammar::Expr;           // in scope 0 at src/parser.rs:36:50: 36:55
    let mut _10: std::slice::Iter<(grammar::MultOp, grammar::Expr)>; // in scope 0 at src/parser.rs:37:45: 37:55
    let mut _11: std::slice::Iter<(grammar::MultOp, grammar::Expr)>; // in scope 0 at src/parser.rs:37:45: 37:55
    let mut _12: &[(grammar::MultOp, grammar::Expr)]; // in scope 0 at src/parser.rs:37:45: 37:48
    let _13: &[(grammar::MultOp, grammar::Expr)]; // in scope 0 at src/parser.rs:37:45: 37:55
    let mut _14: &std::vec::Vec<(grammar::MultOp, grammar::Expr)>; // in scope 0 at src/parser.rs:37:45: 37:48
    let mut _17: std::option::Option<&(grammar::MultOp, grammar::Expr)>; // in scope 0 at src/parser.rs:37:45: 37:55
    let mut _18: &mut std::slice::Iter<(grammar::MultOp, grammar::Expr)>; // in scope 0 at src/parser.rs:37:45: 37:55
    let mut _19: &mut std::slice::Iter<(grammar::MultOp, grammar::Expr)>; // in scope 0 at src/parser.rs:37:45: 37:55
    let mut _20: isize;                  // in scope 0 at src/parser.rs:37:21: 37:41
    let mut _22: &(grammar::MultOp, grammar::Expr); // in scope 0 at src/parser.rs:37:21: 37:41
    let _25: ();                         // in scope 0 at src/parser.rs:38:21: 38:66
    let mut _26: &mut std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/parser.rs:38:21: 38:24
    let mut _27: grammar::MultTerm;      // in scope 0 at src/parser.rs:38:30: 38:65
    let mut _28: grammar::MultOp;        // in scope 0 at src/parser.rs:38:39: 38:49
    let mut _29: &grammar::MultOp;       // in scope 0 at src/parser.rs:38:39: 38:41
    let mut _30: grammar::Expr;          // in scope 0 at src/parser.rs:38:51: 38:64
    let mut _31: &grammar::Expr;         // in scope 0 at src/parser.rs:38:51: 38:56
    let mut _32: usize;                  // in scope 0 at src/parser.rs:40:20: 40:29
    let mut _33: &std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/parser.rs:40:20: 40:23
    let mut _34: &grammar::Expr;         // in scope 0 at src/parser.rs:41:21: 41:29
    let _35: &grammar::MultTerm;         // in scope 0 at src/parser.rs:41:21: 41:27
    let mut _36: &std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/parser.rs:41:21: 41:24
    let mut _37: std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/parser.rs:43:35: 43:38
    let mut _38: bool;                   // in scope 0 at src/parser.rs:45:13: 45:14
    let mut _39: bool;                   // in scope 0 at src/parser.rs:45:13: 45:14
    scope 1 {
        debug first => _3;               // in scope 1 at src/parser.rs:34:77: 34:82
        debug seq => _4;                 // in scope 1 at src/parser.rs:34:84: 34:87
        let mut _5: std::vec::Vec<grammar::MultTerm>; // in scope 1 at src/parser.rs:35:21: 35:28
        scope 2 {
            debug ops => _5;             // in scope 2 at src/parser.rs:35:21: 35:28
            let mut _15: std::slice::Iter<(grammar::MultOp, grammar::Expr)>; // in scope 2 at src/parser.rs:37:45: 37:55
            scope 3 {
                debug iter => _15;       // in scope 3 at src/parser.rs:37:45: 37:55
                let mut _16: &(grammar::MultOp, grammar::Expr); // in scope 3 at src/parser.rs:37:45: 37:55
                scope 4 {
                    debug __next => _16; // in scope 4 at src/parser.rs:37:45: 37:55
                    let _21: &(grammar::MultOp, grammar::Expr); // in scope 4 at src/parser.rs:37:21: 37:41
                    let _23: &grammar::MultOp; // in scope 4 at src/parser.rs:37:23: 37:29
                    let _24: &grammar::Expr; // in scope 4 at src/parser.rs:37:31: 37:40
                    scope 5 {
                        debug val => _21; // in scope 5 at src/parser.rs:37:21: 37:41
                    }
                    scope 6 {
                        debug op => _23; // in scope 6 at src/parser.rs:37:23: 37:29
                        debug value => _24; // in scope 6 at src/parser.rs:37:31: 37:40
                    }
                }
            }
        }
    }

    bb0: {
        _38 = const false;               // scope 0 at src/parser.rs:34:77: 34:82
        _39 = const false;               // scope 0 at src/parser.rs:34:77: 34:82
        StorageLive(_3);                 // scope 0 at src/parser.rs:34:77: 34:82
        _39 = const true;                // scope 0 at src/parser.rs:34:77: 34:82
        _3 = move (_2.0: grammar::Expr); // scope 0 at src/parser.rs:34:77: 34:82
        StorageLive(_4);                 // scope 0 at src/parser.rs:34:84: 34:87
        _4 = move (_2.1: std::vec::Vec<(grammar::MultOp, grammar::Expr)>); // scope 0 at src/parser.rs:34:84: 34:87
        StorageLive(_5);                 // scope 1 at src/parser.rs:35:21: 35:28
        _5 = Vec::<grammar::MultTerm>::new() -> [return: bb1, unwind: bb23]; // scope 1 at src/parser.rs:35:31: 35:41
                                         // mir::Constant
                                         // + span: src/parser.rs:35:31: 35:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> std::vec::Vec<grammar::MultTerm> {std::vec::Vec::<grammar::MultTerm>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _38 = const true;                // scope 2 at src/parser.rs:36:17: 36:57
        StorageLive(_6);                 // scope 2 at src/parser.rs:36:17: 36:57
        StorageLive(_7);                 // scope 2 at src/parser.rs:36:17: 36:20
        _7 = &mut _5;                    // scope 2 at src/parser.rs:36:17: 36:20
        StorageLive(_8);                 // scope 2 at src/parser.rs:36:26: 36:56
        StorageLive(_9);                 // scope 2 at src/parser.rs:36:50: 36:55
        _39 = const false;               // scope 2 at src/parser.rs:36:50: 36:55
        _9 = move _3;                    // scope 2 at src/parser.rs:36:50: 36:55
        (_8.0: grammar::MultOp) = const grammar::MultOp::Start; // scope 2 at src/parser.rs:36:26: 36:56
                                         // ty::Const
                                         // + ty: grammar::MultOp
                                         // + val: Value(Scalar(0x03))
                                         // mir::Constant
                                         // + span: src/parser.rs:36:26: 36:56
                                         // + literal: Const { ty: grammar::MultOp, val: Value(Scalar(0x03)) }
        (_8.1: grammar::Expr) = move _9; // scope 2 at src/parser.rs:36:26: 36:56
        StorageDead(_9);                 // scope 2 at src/parser.rs:36:55: 36:56
        _6 = Vec::<grammar::MultTerm>::push(move _7, move _8) -> [return: bb2, unwind: bb22]; // scope 2 at src/parser.rs:36:17: 36:57
                                         // mir::Constant
                                         // + span: src/parser.rs:36:21: 36:25
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<grammar::MultTerm>, grammar::MultTerm) {std::vec::Vec::<grammar::MultTerm>::push}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_8);                 // scope 2 at src/parser.rs:36:56: 36:57
        StorageDead(_7);                 // scope 2 at src/parser.rs:36:56: 36:57
        StorageDead(_6);                 // scope 2 at src/parser.rs:36:57: 36:58
        StorageLive(_10);                // scope 2 at src/parser.rs:37:45: 37:55
        StorageLive(_11);                // scope 2 at src/parser.rs:37:45: 37:55
        StorageLive(_12);                // scope 2 at src/parser.rs:37:45: 37:48
        StorageLive(_13);                // scope 2 at src/parser.rs:37:45: 37:55
        StorageLive(_14);                // scope 2 at src/parser.rs:37:45: 37:48
        _14 = &_4;                       // scope 2 at src/parser.rs:37:45: 37:48
        _13 = <Vec<(grammar::MultOp, grammar::Expr)> as Deref>::deref(move _14) -> [return: bb3, unwind: bb22]; // scope 2 at src/parser.rs:37:45: 37:55
                                         // mir::Constant
                                         // + span: src/parser.rs:37:45: 37:55
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<(grammar::MultOp, grammar::Expr)>) -> &'r <std::vec::Vec<(grammar::MultOp, grammar::Expr)> as std::ops::Deref>::Target {<std::vec::Vec<(grammar::MultOp, grammar::Expr)> as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _12 = _13;                       // scope 2 at src/parser.rs:37:45: 37:48
        StorageDead(_14);                // scope 2 at src/parser.rs:37:47: 37:48
        _11 = core::slice::<impl [(grammar::MultOp, grammar::Expr)]>::iter(move _12) -> [return: bb4, unwind: bb22]; // scope 2 at src/parser.rs:37:45: 37:55
                                         // mir::Constant
                                         // + span: src/parser.rs:37:49: 37:53
                                         // + literal: Const { ty: for<'r> fn(&'r [(grammar::MultOp, grammar::Expr)]) -> std::slice::Iter<'r, (grammar::MultOp, grammar::Expr)> {core::slice::<impl [(grammar::MultOp, grammar::Expr)]>::iter}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_12);                // scope 2 at src/parser.rs:37:54: 37:55
        _10 = <std::slice::Iter<(grammar::MultOp, grammar::Expr)> as IntoIterator>::into_iter(move _11) -> [return: bb5, unwind: bb22]; // scope 2 at src/parser.rs:37:45: 37:55
                                         // mir::Constant
                                         // + span: src/parser.rs:37:45: 37:55
                                         // + literal: Const { ty: fn(std::slice::Iter<(grammar::MultOp, grammar::Expr)>) -> <std::slice::Iter<(grammar::MultOp, grammar::Expr)> as std::iter::IntoIterator>::IntoIter {<std::slice::Iter<(grammar::MultOp, grammar::Expr)> as std::iter::IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_11);                // scope 2 at src/parser.rs:37:54: 37:55
        StorageLive(_15);                // scope 2 at src/parser.rs:37:45: 37:55
        _15 = move _10;                  // scope 2 at src/parser.rs:37:45: 37:55
        goto -> bb6;                     // scope 3 at src/parser.rs:37:17: 39:18
    }

    bb6: {
        StorageLive(_16);                // scope 3 at src/parser.rs:37:45: 37:55
        StorageLive(_17);                // scope 4 at src/parser.rs:37:45: 37:55
        StorageLive(_18);                // scope 4 at src/parser.rs:37:45: 37:55
        StorageLive(_19);                // scope 4 at src/parser.rs:37:45: 37:55
        _19 = &mut _15;                  // scope 4 at src/parser.rs:37:45: 37:55
        _18 = &mut (*_19);               // scope 4 at src/parser.rs:37:45: 37:55
        _17 = <std::slice::Iter<(grammar::MultOp, grammar::Expr)> as Iterator>::next(move _18) -> [return: bb7, unwind: bb22]; // scope 4 at src/parser.rs:37:45: 37:55
                                         // mir::Constant
                                         // + span: src/parser.rs:37:45: 37:55
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<(grammar::MultOp, grammar::Expr)>) -> std::option::Option<<std::slice::Iter<(grammar::MultOp, grammar::Expr)> as std::iter::Iterator>::Item> {<std::slice::Iter<(grammar::MultOp, grammar::Expr)> as std::iter::Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_18);                // scope 4 at src/parser.rs:37:54: 37:55
        _20 = discriminant(_17);         // scope 4 at src/parser.rs:37:45: 37:55
        switchInt(move _20) -> [0_isize: bb8, 1_isize: bb10, otherwise: bb9]; // scope 4 at src/parser.rs:37:45: 37:55
    }

    bb8: {
        StorageDead(_19);                // scope 4 at src/parser.rs:37:54: 37:55
        StorageDead(_17);                // scope 4 at src/parser.rs:37:54: 37:55
        StorageDead(_16);                // scope 3 at src/parser.rs:39:17: 39:18
        StorageDead(_15);                // scope 2 at src/parser.rs:39:17: 39:18
        StorageDead(_13);                // scope 2 at src/parser.rs:37:54: 37:55
        StorageDead(_10);                // scope 2 at src/parser.rs:37:54: 37:55
        StorageLive(_32);                // scope 2 at src/parser.rs:40:20: 40:29
        StorageLive(_33);                // scope 2 at src/parser.rs:40:20: 40:23
        _33 = &_5;                       // scope 2 at src/parser.rs:40:20: 40:23
        _32 = Vec::<grammar::MultTerm>::len(move _33) -> [return: bb14, unwind: bb22]; // scope 2 at src/parser.rs:40:20: 40:29
                                         // mir::Constant
                                         // + span: src/parser.rs:40:24: 40:27
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<grammar::MultTerm>) -> usize {std::vec::Vec::<grammar::MultTerm>::len}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        unreachable;                     // scope 4 at src/parser.rs:37:45: 37:55
    }

    bb10: {
        StorageLive(_21);                // scope 4 at src/parser.rs:37:21: 37:41
        _21 = ((_17 as Some).0: &(grammar::MultOp, grammar::Expr)); // scope 4 at src/parser.rs:37:21: 37:41
        StorageLive(_22);                // scope 5 at src/parser.rs:37:21: 37:41
        _22 = _21;                       // scope 5 at src/parser.rs:37:21: 37:41
        _16 = move _22;                  // scope 5 at src/parser.rs:37:21: 37:41
        StorageDead(_22);                // scope 5 at src/parser.rs:37:40: 37:41
        StorageDead(_21);                // scope 4 at src/parser.rs:37:40: 37:41
        StorageDead(_19);                // scope 4 at src/parser.rs:37:54: 37:55
        StorageDead(_17);                // scope 4 at src/parser.rs:37:54: 37:55
        StorageLive(_23);                // scope 4 at src/parser.rs:37:23: 37:29
        _23 = &((*_16).0: grammar::MultOp); // scope 4 at src/parser.rs:37:23: 37:29
        StorageLive(_24);                // scope 4 at src/parser.rs:37:31: 37:40
        _24 = &((*_16).1: grammar::Expr); // scope 4 at src/parser.rs:37:31: 37:40
        StorageLive(_25);                // scope 6 at src/parser.rs:38:21: 38:66
        StorageLive(_26);                // scope 6 at src/parser.rs:38:21: 38:24
        _26 = &mut _5;                   // scope 6 at src/parser.rs:38:21: 38:24
        StorageLive(_27);                // scope 6 at src/parser.rs:38:30: 38:65
        StorageLive(_28);                // scope 6 at src/parser.rs:38:39: 38:49
        StorageLive(_29);                // scope 6 at src/parser.rs:38:39: 38:41
        _29 = _23;                       // scope 6 at src/parser.rs:38:39: 38:41
        _28 = <grammar::MultOp as Clone>::clone(move _29) -> [return: bb11, unwind: bb22]; // scope 6 at src/parser.rs:38:39: 38:49
                                         // mir::Constant
                                         // + span: src/parser.rs:38:42: 38:47
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::MultOp) -> grammar::MultOp {<grammar::MultOp as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_29);                // scope 6 at src/parser.rs:38:48: 38:49
        StorageLive(_30);                // scope 6 at src/parser.rs:38:51: 38:64
        StorageLive(_31);                // scope 6 at src/parser.rs:38:51: 38:56
        _31 = _24;                       // scope 6 at src/parser.rs:38:51: 38:56
        _30 = <grammar::Expr as Clone>::clone(move _31) -> [return: bb12, unwind: bb22]; // scope 6 at src/parser.rs:38:51: 38:64
                                         // mir::Constant
                                         // + span: src/parser.rs:38:57: 38:62
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_31);                // scope 6 at src/parser.rs:38:63: 38:64
        (_27.0: grammar::MultOp) = move _28; // scope 6 at src/parser.rs:38:30: 38:65
        (_27.1: grammar::Expr) = move _30; // scope 6 at src/parser.rs:38:30: 38:65
        StorageDead(_30);                // scope 6 at src/parser.rs:38:64: 38:65
        StorageDead(_28);                // scope 6 at src/parser.rs:38:64: 38:65
        _25 = Vec::<grammar::MultTerm>::push(move _26, move _27) -> [return: bb13, unwind: bb22]; // scope 6 at src/parser.rs:38:21: 38:66
                                         // mir::Constant
                                         // + span: src/parser.rs:38:25: 38:29
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<grammar::MultTerm>, grammar::MultTerm) {std::vec::Vec::<grammar::MultTerm>::push}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_27);                // scope 6 at src/parser.rs:38:65: 38:66
        StorageDead(_26);                // scope 6 at src/parser.rs:38:65: 38:66
        StorageDead(_25);                // scope 6 at src/parser.rs:38:66: 38:67
        StorageDead(_24);                // scope 4 at src/parser.rs:39:17: 39:18
        StorageDead(_23);                // scope 4 at src/parser.rs:39:17: 39:18
        StorageDead(_16);                // scope 3 at src/parser.rs:39:17: 39:18
        goto -> bb6;                     // scope 3 at src/parser.rs:37:17: 39:18
    }

    bb14: {
        StorageDead(_33);                // scope 2 at src/parser.rs:40:28: 40:29
        switchInt(move _32) -> [1_usize: bb15, otherwise: bb18]; // scope 2 at src/parser.rs:40:20: 40:34
    }

    bb15: {
        StorageDead(_32);                // scope 2 at src/parser.rs:40:20: 40:34
        StorageLive(_34);                // scope 2 at src/parser.rs:41:21: 41:29
        StorageLive(_35);                // scope 2 at src/parser.rs:41:21: 41:27
        StorageLive(_36);                // scope 2 at src/parser.rs:41:21: 41:24
        _36 = &_5;                       // scope 2 at src/parser.rs:41:21: 41:24
        _35 = <Vec<grammar::MultTerm> as Index<usize>>::index(move _36, const 0_usize) -> [return: bb16, unwind: bb22]; // scope 2 at src/parser.rs:41:21: 41:27
                                         // mir::Constant
                                         // + span: src/parser.rs:41:21: 41:27
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<grammar::MultTerm>, usize) -> &'r <std::vec::Vec<grammar::MultTerm> as std::ops::Index<usize>>::Output {<std::vec::Vec<grammar::MultTerm> as std::ops::Index<usize>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_36);                // scope 2 at src/parser.rs:41:26: 41:27
        _34 = &((*_35).1: grammar::Expr); // scope 2 at src/parser.rs:41:21: 41:29
        _0 = <grammar::Expr as Clone>::clone(move _34) -> [return: bb17, unwind: bb22]; // scope 2 at src/parser.rs:41:21: 41:37
                                         // mir::Constant
                                         // + span: src/parser.rs:41:30: 41:35
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_34);                // scope 2 at src/parser.rs:41:36: 41:37
        StorageDead(_35);                // scope 2 at src/parser.rs:42:17: 42:18
        goto -> bb19;                    // scope 2 at src/parser.rs:40:17: 44:18
    }

    bb18: {
        StorageDead(_32);                // scope 2 at src/parser.rs:40:20: 40:34
        StorageLive(_37);                // scope 2 at src/parser.rs:43:35: 43:38
        _38 = const false;               // scope 2 at src/parser.rs:43:35: 43:38
        _37 = move _5;                   // scope 2 at src/parser.rs:43:35: 43:38
        ((_0 as MultDiv).0: std::vec::Vec<grammar::MultTerm>) = move _37; // scope 2 at src/parser.rs:43:21: 43:39
        discriminant(_0) = 3;            // scope 2 at src/parser.rs:43:21: 43:39
        StorageDead(_37);                // scope 2 at src/parser.rs:43:38: 43:39
        goto -> bb19;                    // scope 2 at src/parser.rs:40:17: 44:18
    }

    bb19: {
        switchInt(_38) -> [false: bb20, otherwise: bb25]; // scope 1 at src/parser.rs:45:13: 45:14
    }

    bb20: {
        _38 = const false;               // scope 1 at src/parser.rs:45:13: 45:14
        StorageDead(_5);                 // scope 1 at src/parser.rs:45:13: 45:14
        drop(_4) -> [return: bb21, unwind: bb27]; // scope 0 at src/parser.rs:45:13: 45:14
    }

    bb21: {
        StorageDead(_4);                 // scope 0 at src/parser.rs:45:13: 45:14
        _39 = const false;               // scope 0 at src/parser.rs:45:13: 45:14
        StorageDead(_3);                 // scope 0 at src/parser.rs:45:13: 45:14
        return;                          // scope 0 at src/parser.rs:45:14: 45:14
    }

    bb22 (cleanup): {
        drop(_5) -> bb23;                // scope 1 at src/parser.rs:45:13: 45:14
    }

    bb23 (cleanup): {
        drop(_4) -> bb27;                // scope 0 at src/parser.rs:45:13: 45:14
    }

    bb24 (cleanup): {
        resume;                          // scope 0 at src/parser.rs:34:75: 45:14
    }

    bb25: {
        drop(_5) -> [return: bb20, unwind: bb23]; // scope 1 at src/parser.rs:45:13: 45:14
    }

    bb26 (cleanup): {
        drop(_3) -> bb24;                // scope 0 at src/parser.rs:45:13: 45:14
    }

    bb27 (cleanup): {
        switchInt(_39) -> [false: bb24, otherwise: bb26]; // scope 0 at src/parser.rs:45:13: 45:14
    }
}

fn grammar::<impl at src/grammar.rs:23:10: 23:19>::eq(_1: &grammar::AddTerm, _2: &grammar::AddTerm) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:23:10: 23:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:23:10: 23:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:23:10: 23:19
    let _3: &grammar::AddOp;             // in scope 0 at src/grammar.rs:24:20: 24:29
    let _4: &grammar::Expr;              // in scope 0 at src/grammar.rs:24:31: 24:39
    let mut _7: bool;                    // in scope 0 at src/grammar.rs:24:20: 24:29
    let mut _8: &grammar::AddOp;         // in scope 0 at src/grammar.rs:24:20: 24:29
    let mut _9: &grammar::AddOp;         // in scope 0 at src/grammar.rs:24:20: 24:29
    let mut _10: bool;                   // in scope 0 at src/grammar.rs:24:31: 24:39
    let mut _11: &grammar::Expr;         // in scope 0 at src/grammar.rs:24:31: 24:39
    let mut _12: &grammar::Expr;         // in scope 0 at src/grammar.rs:24:31: 24:39
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at src/grammar.rs:24:20: 24:29
        debug __self_1_1 => _4;          // in scope 1 at src/grammar.rs:24:31: 24:39
        let _5: &grammar::AddOp;         // in scope 1 at src/grammar.rs:24:20: 24:29
        let _6: &grammar::Expr;          // in scope 1 at src/grammar.rs:24:31: 24:39
        scope 2 {
            debug __self_0_0 => _5;      // in scope 2 at src/grammar.rs:24:20: 24:29
            debug __self_0_1 => _6;      // in scope 2 at src/grammar.rs:24:31: 24:39
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:24:20: 24:29
        _3 = &((*_2).0: grammar::AddOp); // scope 0 at src/grammar.rs:24:20: 24:29
        StorageLive(_4);                 // scope 0 at src/grammar.rs:24:31: 24:39
        _4 = &((*_2).1: grammar::Expr);  // scope 0 at src/grammar.rs:24:31: 24:39
        StorageLive(_5);                 // scope 1 at src/grammar.rs:24:20: 24:29
        _5 = &((*_1).0: grammar::AddOp); // scope 1 at src/grammar.rs:24:20: 24:29
        StorageLive(_6);                 // scope 1 at src/grammar.rs:24:31: 24:39
        _6 = &((*_1).1: grammar::Expr);  // scope 1 at src/grammar.rs:24:31: 24:39
        StorageLive(_7);                 // scope 2 at src/grammar.rs:24:20: 24:29
        StorageLive(_8);                 // scope 2 at src/grammar.rs:24:20: 24:29
        _8 = _5;                         // scope 2 at src/grammar.rs:24:20: 24:29
        StorageLive(_9);                 // scope 2 at src/grammar.rs:24:20: 24:29
        _9 = _3;                         // scope 2 at src/grammar.rs:24:20: 24:29
        _7 = <grammar::AddOp as PartialEq>::eq(move _8, move _9) -> bb4; // scope 2 at src/grammar.rs:24:20: 24:29
                                         // mir::Constant
                                         // + span: src/grammar.rs:24:20: 24:29
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::AddOp, &'s grammar::AddOp) -> bool {<grammar::AddOp as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = const false;                // scope 2 at src/grammar.rs:24:31: 24:39
        goto -> bb3;                     // scope 2 at src/grammar.rs:24:31: 24:39
    }

    bb2: {
        StorageLive(_10);                // scope 2 at src/grammar.rs:24:31: 24:39
        StorageLive(_11);                // scope 2 at src/grammar.rs:24:31: 24:39
        _11 = _6;                        // scope 2 at src/grammar.rs:24:31: 24:39
        StorageLive(_12);                // scope 2 at src/grammar.rs:24:31: 24:39
        _12 = _4;                        // scope 2 at src/grammar.rs:24:31: 24:39
        _10 = <grammar::Expr as PartialEq>::eq(move _11, move _12) -> bb5; // scope 2 at src/grammar.rs:24:31: 24:39
                                         // mir::Constant
                                         // + span: src/grammar.rs:24:31: 24:39
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_10);                // scope 2 at src/grammar.rs:24:38: 24:39
        StorageDead(_7);                 // scope 2 at src/grammar.rs:24:38: 24:39
        StorageDead(_6);                 // scope 1 at src/grammar.rs:23:18: 23:19
        StorageDead(_5);                 // scope 1 at src/grammar.rs:23:18: 23:19
        StorageDead(_4);                 // scope 0 at src/grammar.rs:23:18: 23:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:23:18: 23:19
        return;                          // scope 0 at src/grammar.rs:23:19: 23:19
    }

    bb4: {
        StorageDead(_9);                 // scope 2 at src/grammar.rs:24:28: 24:29
        StorageDead(_8);                 // scope 2 at src/grammar.rs:24:28: 24:29
        switchInt(move _7) -> [false: bb1, otherwise: bb2]; // scope 2 at src/grammar.rs:24:31: 24:39
    }

    bb5: {
        StorageDead(_12);                // scope 2 at src/grammar.rs:24:38: 24:39
        StorageDead(_11);                // scope 2 at src/grammar.rs:24:38: 24:39
        _0 = move _10;                   // scope 2 at src/grammar.rs:24:31: 24:39
        goto -> bb3;                     // scope 2 at src/grammar.rs:24:31: 24:39
    }
}

fn expression() -> Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>>; // return place in scope 0 at src/parser.rs:9:24: 9:54
    let mut _1: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>>; // in scope 0 at src/parser.rs:65:9: 65:23
    let _2: peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>; // in scope 0 at src/parser.rs:10:13: 10:24
    let mut _3: [closure@src/parser.rs:10:35: 14:10]; // in scope 0 at src/parser.rs:10:35: 14:10
    let mut _6: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>; // in scope 0 at src/parser.rs:18:22: 18:34
    let _7: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>; // in scope 0 at src/parser.rs:18:22: 18:34
    let mut _8: &[closure@src/parser.rs:16:26: 16:116]; // in scope 0 at src/parser.rs:18:22: 18:32
    let mut _9: ();                      // in scope 0 at src/parser.rs:18:22: 18:34
    let mut _10: peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>; // in scope 0 at src/parser.rs:18:38: 18:49
    let mut _12: [closure@src/parser.rs:20:30: 25:10]; // in scope 0 at src/parser.rs:20:30: 25:10
    let mut _14: [closure@src/parser.rs:27:29: 31:10]; // in scope 0 at src/parser.rs:27:29: 31:10
    let mut _17: &peruse::parsers::ChainedParser<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>>; // in scope 0 at src/parser.rs:34:21: 34:70
    let _18: peruse::parsers::ChainedParser<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>>; // in scope 0 at src/parser.rs:34:21: 34:70
    let mut _19: &peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>; // in scope 0 at src/parser.rs:34:21: 34:35
    let _20: peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>; // in scope 0 at src/parser.rs:34:21: 34:35
    let mut _21: &peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>; // in scope 0 at src/parser.rs:34:21: 34:27
    let mut _22: peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>; // in scope 0 at src/parser.rs:34:41: 34:69
    let mut _23: &peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>; // in scope 0 at src/parser.rs:34:41: 34:60
    let _24: peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>; // in scope 0 at src/parser.rs:34:41: 34:60
    let mut _25: &peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>; // in scope 0 at src/parser.rs:34:41: 34:47
    let mut _26: peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>; // in scope 0 at src/parser.rs:34:53: 34:59
    let mut _27: [closure@src/parser.rs:34:75: 45:14]; // in scope 0 at src/parser.rs:34:75: 45:14
    let mut _28: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>>, grammar::Expr>; // in scope 0 at src/parser.rs:46:19: 46:20
    let mut _31: &peruse::parsers::ChainedParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>>; // in scope 0 at src/parser.rs:50:21: 50:65
    let _32: peruse::parsers::ChainedParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>>; // in scope 0 at src/parser.rs:50:21: 50:65
    let mut _33: &peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>; // in scope 0 at src/parser.rs:50:21: 50:33
    let _34: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>; // in scope 0 at src/parser.rs:50:21: 50:33
    let mut _35: &peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>; // in scope 0 at src/parser.rs:50:21: 50:25
    let mut _36: peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>; // in scope 0 at src/parser.rs:50:39: 50:64
    let mut _37: &peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>; // in scope 0 at src/parser.rs:50:39: 50:55
    let _38: peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>; // in scope 0 at src/parser.rs:50:39: 50:55
    let mut _39: &peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>; // in scope 0 at src/parser.rs:50:39: 50:44
    let mut _40: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>; // in scope 0 at src/parser.rs:50:50: 50:54
    let mut _41: [closure@src/parser.rs:50:70: 61:14]; // in scope 0 at src/parser.rs:50:70: 61:14
    let mut _42: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>>, grammar::Expr>; // in scope 0 at src/parser.rs:62:19: 62:20
    let mut _43: std::boxed::Box<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>; // in scope 0 at src/parser.rs:65:9: 65:23
    let mut _44: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>; // in scope 0 at src/parser.rs:65:18: 65:22
    let mut _45: bool;                   // in scope 0 at src/parser.rs:63:9: 63:10
    let mut _46: bool;                   // in scope 0 at src/parser.rs:66:5: 66:6
    let mut _47: bool;                   // in scope 0 at src/parser.rs:47:9: 47:10
    let mut _48: bool;                   // in scope 0 at src/parser.rs:66:5: 66:6
    let mut _49: bool;                   // in scope 0 at src/parser.rs:66:5: 66:6
    scope 1 {
        debug simple_term => _2;         // in scope 1 at src/parser.rs:10:13: 10:24
        let _4: [closure@src/parser.rs:16:26: 16:116]; // in scope 1 at src/parser.rs:16:13: 16:23
        scope 2 {
            debug paren_expr => _4;      // in scope 2 at src/parser.rs:16:13: 16:23
            let _5: peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>; // in scope 2 at src/parser.rs:18:13: 18:19
            scope 3 {
                debug factor => _5;      // in scope 3 at src/parser.rs:18:13: 18:19
                let _11: peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>; // in scope 3 at src/parser.rs:20:13: 20:19
                scope 4 {
                    debug multop => _11; // in scope 4 at src/parser.rs:20:13: 20:19
                    let _13: peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>; // in scope 4 at src/parser.rs:27:13: 27:18
                    scope 5 {
                        debug addop => _13; // in scope 5 at src/parser.rs:27:13: 27:18
                        let _15: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>; // in scope 5 at src/parser.rs:33:13: 33:17
                        let _16: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>>, grammar::Expr>; // in scope 5 at src/parser.rs:34:17: 34:18
                        scope 6 {
                            debug mult => _15; // in scope 6 at src/parser.rs:33:13: 33:17
                            let _29: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>; // in scope 6 at src/parser.rs:49:13: 49:17
                            let _30: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>>, grammar::Expr>; // in scope 6 at src/parser.rs:50:17: 50:18
                            scope 8 {
                                debug plus => _29; // in scope 8 at src/parser.rs:49:13: 49:17
                            }
                            scope 9 {
                                debug p => _30; // in scope 9 at src/parser.rs:50:17: 50:18
                            }
                        }
                        scope 7 {
                            debug p => _16; // in scope 7 at src/parser.rs:34:17: 34:18
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _47 = const false;               // scope 0 at src/parser.rs:65:9: 65:23
        _48 = const false;               // scope 0 at src/parser.rs:65:9: 65:23
        _49 = const false;               // scope 0 at src/parser.rs:65:9: 65:23
        _46 = const false;               // scope 0 at src/parser.rs:65:9: 65:23
        _45 = const false;               // scope 0 at src/parser.rs:65:9: 65:23
        StorageLive(_1);                 // scope 0 at src/parser.rs:65:9: 65:23
        StorageLive(_2);                 // scope 0 at src/parser.rs:10:13: 10:24
        StorageLive(_3);                 // scope 0 at src/parser.rs:10:35: 14:10
        _49 = const true;                // scope 0 at src/parser.rs:10:27: 14:11
        _2 = peruse::slice_parsers::matcher::<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>(move _3) -> bb1; // scope 0 at src/parser.rs:10:27: 14:11
                                         // mir::Constant
                                         // + span: src/parser.rs:10:27: 10:34
                                         // + literal: Const { ty: fn([closure@src/parser.rs:10:35: 14:10]) -> peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]> {peruse::slice_parsers::matcher::<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at src/parser.rs:14:10: 14:11
        StorageLive(_4);                 // scope 1 at src/parser.rs:16:13: 16:23
        StorageLive(_5);                 // scope 2 at src/parser.rs:18:13: 18:19
        StorageLive(_6);                 // scope 2 at src/parser.rs:18:22: 18:34
        StorageLive(_7);                 // scope 2 at src/parser.rs:18:22: 18:34
        StorageLive(_8);                 // scope 2 at src/parser.rs:18:22: 18:32
        _8 = &_4;                        // scope 2 at src/parser.rs:18:22: 18:32
        StorageLive(_9);                 // scope 2 at src/parser.rs:18:22: 18:34
        _7 = <[closure@src/parser.rs:16:26: 16:116] as Fn<()>>::call(move _8, move _9) -> [return: bb2, unwind: bb51]; // scope 2 at src/parser.rs:18:22: 18:34
                                         // mir::Constant
                                         // + span: src/parser.rs:18:22: 18:32
                                         // + literal: Const { ty: for<'r> extern "rust-call" fn(&'r [closure@src/parser.rs:16:26: 16:116], ()) -> <[closure@src/parser.rs:16:26: 16:116] as std::ops::FnOnce<()>>::Output {<[closure@src/parser.rs:16:26: 16:116] as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _6 = &_7;                        // scope 2 at src/parser.rs:18:22: 18:34
        StorageDead(_9);                 // scope 2 at src/parser.rs:18:33: 18:34
        StorageDead(_8);                 // scope 2 at src/parser.rs:18:33: 18:34
        StorageLive(_10);                // scope 2 at src/parser.rs:18:38: 18:49
        _49 = const false;               // scope 2 at src/parser.rs:18:38: 18:49
        _10 = move _2;                   // scope 2 at src/parser.rs:18:38: 18:49
        _5 = <MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr> as peruse::parsers::ParserCombinator>::or::<MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>(move _6, move _10) -> [return: bb3, unwind: bb40]; // scope 2 at src/parser.rs:18:22: 18:50
                                         // mir::Constant
                                         // + span: src/parser.rs:18:35: 18:37
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>) -> peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr> as peruse::parsers::ParserCombinator>::or::<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _48 = const true;                // scope 2 at src/parser.rs:18:49: 18:50
        StorageDead(_10);                // scope 2 at src/parser.rs:18:49: 18:50
        StorageDead(_6);                 // scope 2 at src/parser.rs:18:49: 18:50
        drop(_7) -> [return: bb4, unwind: bb49]; // scope 2 at src/parser.rs:18:50: 18:51
    }

    bb4: {
        StorageDead(_7);                 // scope 2 at src/parser.rs:18:50: 18:51
        StorageLive(_11);                // scope 3 at src/parser.rs:20:13: 20:19
        StorageLive(_12);                // scope 3 at src/parser.rs:20:30: 25:10
        _11 = peruse::slice_parsers::matcher::<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>(move _12) -> [return: bb5, unwind: bb49]; // scope 3 at src/parser.rs:20:22: 25:11
                                         // mir::Constant
                                         // + span: src/parser.rs:20:22: 20:29
                                         // + literal: Const { ty: fn([closure@src/parser.rs:20:30: 25:10]) -> peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]> {peruse::slice_parsers::matcher::<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_12);                // scope 3 at src/parser.rs:25:10: 25:11
        StorageLive(_13);                // scope 4 at src/parser.rs:27:13: 27:18
        StorageLive(_14);                // scope 4 at src/parser.rs:27:29: 31:10
        _13 = peruse::slice_parsers::matcher::<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>(move _14) -> [return: bb6, unwind: bb39]; // scope 4 at src/parser.rs:27:21: 31:11
                                         // mir::Constant
                                         // + span: src/parser.rs:27:21: 27:28
                                         // + literal: Const { ty: fn([closure@src/parser.rs:27:29: 31:10]) -> peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]> {peruse::slice_parsers::matcher::<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_14);                // scope 4 at src/parser.rs:31:10: 31:11
        StorageLive(_15);                // scope 5 at src/parser.rs:33:13: 33:17
        StorageLive(_16);                // scope 5 at src/parser.rs:34:17: 34:18
        StorageLive(_17);                // scope 5 at src/parser.rs:34:21: 34:70
        StorageLive(_18);                // scope 5 at src/parser.rs:34:21: 34:70
        StorageLive(_19);                // scope 5 at src/parser.rs:34:21: 34:35
        StorageLive(_20);                // scope 5 at src/parser.rs:34:21: 34:35
        StorageLive(_21);                // scope 5 at src/parser.rs:34:21: 34:27
        _21 = &_5;                       // scope 5 at src/parser.rs:34:21: 34:27
        _20 = <OrParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>> as Clone>::clone(move _21) -> [return: bb7, unwind: bb38]; // scope 5 at src/parser.rs:34:21: 34:35
                                         // mir::Constant
                                         // + span: src/parser.rs:34:28: 34:33
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>) -> peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>> {<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>> as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _19 = &_20;                      // scope 5 at src/parser.rs:34:21: 34:35
        StorageDead(_21);                // scope 5 at src/parser.rs:34:34: 34:35
        StorageLive(_22);                // scope 5 at src/parser.rs:34:41: 34:69
        StorageLive(_23);                // scope 5 at src/parser.rs:34:41: 34:60
        StorageLive(_24);                // scope 5 at src/parser.rs:34:41: 34:60
        StorageLive(_25);                // scope 5 at src/parser.rs:34:41: 34:47
        _25 = &_11;                      // scope 5 at src/parser.rs:34:41: 34:47
        StorageLive(_26);                // scope 5 at src/parser.rs:34:53: 34:59
        _48 = const false;               // scope 5 at src/parser.rs:34:53: 34:59
        _26 = move _5;                   // scope 5 at src/parser.rs:34:53: 34:59
        _24 = <MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]> as peruse::parsers::ParserCombinator>::then::<OrParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>(move _25, move _26) -> [return: bb8, unwind: bb37]; // scope 5 at src/parser.rs:34:41: 34:60
                                         // mir::Constant
                                         // + span: src/parser.rs:34:48: 34:52
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>) -> peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>> {<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]> as peruse::parsers::ParserCombinator>::then::<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _23 = &_24;                      // scope 5 at src/parser.rs:34:41: 34:60
        StorageDead(_26);                // scope 5 at src/parser.rs:34:59: 34:60
        StorageDead(_25);                // scope 5 at src/parser.rs:34:59: 34:60
        _22 = <ChainedParser<MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, OrParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>> as peruse::parsers::ParserCombinator>::repeat(move _23) -> [return: bb9, unwind: bb36]; // scope 5 at src/parser.rs:34:41: 34:69
                                         // mir::Constant
                                         // + span: src/parser.rs:34:61: 34:67
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>) -> peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>> {<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>> as peruse::parsers::ParserCombinator>::repeat}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_23);                // scope 5 at src/parser.rs:34:68: 34:69
        _18 = <OrParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>> as peruse::parsers::ParserCombinator>::then::<RepeatParser<ChainedParser<MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, OrParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>>(move _19, move _22) -> [return: bb10, unwind: bb36]; // scope 5 at src/parser.rs:34:21: 34:70
                                         // mir::Constant
                                         // + span: src/parser.rs:34:36: 34:40
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>) -> peruse::parsers::ChainedParser<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>> {<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>> as peruse::parsers::ParserCombinator>::then::<peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>>}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _17 = &_18;                      // scope 5 at src/parser.rs:34:21: 34:70
        StorageDead(_22);                // scope 5 at src/parser.rs:34:69: 34:70
        StorageDead(_19);                // scope 5 at src/parser.rs:34:69: 34:70
        StorageLive(_27);                // scope 5 at src/parser.rs:34:75: 45:14
        _16 = <ChainedParser<OrParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, RepeatParser<ChainedParser<MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, OrParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>> as peruse::parsers::ParserCombinator>::map::<grammar::Expr, [closure@src/parser.rs:34:75: 45:14]>(move _17, move _27) -> [return: bb11, unwind: bb35]; // scope 5 at src/parser.rs:34:21: 45:15
                                         // mir::Constant
                                         // + span: src/parser.rs:34:71: 34:74
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>>, [closure@src/parser.rs:34:75: 45:14]) -> peruse::parsers::MapParser<<peruse::parsers::ChainedParser<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>>, grammar::Expr> {<peruse::parsers::ChainedParser<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>> as peruse::parsers::ParserCombinator>::map::<grammar::Expr, [closure@src/parser.rs:34:75: 45:14]>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _47 = const true;                // scope 5 at src/parser.rs:45:14: 45:15
        StorageDead(_27);                // scope 5 at src/parser.rs:45:14: 45:15
        StorageDead(_17);                // scope 5 at src/parser.rs:45:14: 45:15
        drop(_18) -> [return: bb12, unwind: bb33]; // scope 5 at src/parser.rs:45:15: 45:16
    }

    bb12: {
        drop(_24) -> [return: bb13, unwind: bb34]; // scope 5 at src/parser.rs:45:15: 45:16
    }

    bb13: {
        StorageDead(_24);                // scope 5 at src/parser.rs:45:15: 45:16
        drop(_20) -> [return: bb14, unwind: bb47]; // scope 5 at src/parser.rs:45:15: 45:16
    }

    bb14: {
        StorageDead(_20);                // scope 5 at src/parser.rs:45:15: 45:16
        StorageDead(_18);                // scope 5 at src/parser.rs:45:15: 45:16
        StorageLive(_28);                // scope 7 at src/parser.rs:46:19: 46:20
        _47 = const false;               // scope 7 at src/parser.rs:46:19: 46:20
        _28 = move _16;                  // scope 7 at src/parser.rs:46:19: 46:20
        _15 = peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Expr, MapParser<[grammar_lexer::Token], ChainedParser<OrParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, RepeatParser<ChainedParser<MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, OrParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>>, grammar::Expr>>(move _28) -> [return: bb15, unwind: bb47]; // scope 7 at src/parser.rs:46:13: 46:21
                                         // mir::Constant
                                         // + span: src/parser.rs:46:13: 46:18
                                         // + literal: Const { ty: fn(peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>>, grammar::Expr>) -> peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr> {peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Expr, peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::MultOp, [closure@src/parser.rs:20:30: 25:10]>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Expr, [closure@src/parser.rs:10:35: 14:10]>>>>>, grammar::Expr>>}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _46 = const true;                // scope 7 at src/parser.rs:46:20: 46:21
        StorageDead(_28);                // scope 7 at src/parser.rs:46:20: 46:21
        _47 = const false;               // scope 5 at src/parser.rs:47:9: 47:10
        StorageDead(_16);                // scope 5 at src/parser.rs:47:9: 47:10
        StorageLive(_29);                // scope 6 at src/parser.rs:49:13: 49:17
        StorageLive(_30);                // scope 6 at src/parser.rs:50:17: 50:18
        StorageLive(_31);                // scope 6 at src/parser.rs:50:21: 50:65
        StorageLive(_32);                // scope 6 at src/parser.rs:50:21: 50:65
        StorageLive(_33);                // scope 6 at src/parser.rs:50:21: 50:33
        StorageLive(_34);                // scope 6 at src/parser.rs:50:21: 50:33
        StorageLive(_35);                // scope 6 at src/parser.rs:50:21: 50:25
        _35 = &_15;                      // scope 6 at src/parser.rs:50:21: 50:25
        _34 = <BoxedParser<[grammar_lexer::Token], grammar::Expr> as Clone>::clone(move _35) -> [return: bb16, unwind: bb45]; // scope 6 at src/parser.rs:50:21: 50:33
                                         // mir::Constant
                                         // + span: src/parser.rs:50:26: 50:31
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>) -> peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr> {<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr> as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _33 = &_34;                      // scope 6 at src/parser.rs:50:21: 50:33
        StorageDead(_35);                // scope 6 at src/parser.rs:50:32: 50:33
        StorageLive(_36);                // scope 6 at src/parser.rs:50:39: 50:64
        StorageLive(_37);                // scope 6 at src/parser.rs:50:39: 50:55
        StorageLive(_38);                // scope 6 at src/parser.rs:50:39: 50:55
        StorageLive(_39);                // scope 6 at src/parser.rs:50:39: 50:44
        _39 = &_13;                      // scope 6 at src/parser.rs:50:39: 50:44
        StorageLive(_40);                // scope 6 at src/parser.rs:50:50: 50:54
        _46 = const false;               // scope 6 at src/parser.rs:50:50: 50:54
        _40 = move _15;                  // scope 6 at src/parser.rs:50:50: 50:54
        _38 = <MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]> as peruse::parsers::ParserCombinator>::then::<BoxedParser<[grammar_lexer::Token], grammar::Expr>>(move _39, move _40) -> [return: bb17, unwind: bb32]; // scope 6 at src/parser.rs:50:39: 50:55
                                         // mir::Constant
                                         // + span: src/parser.rs:50:45: 50:49
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>) -> peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>> {<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]> as peruse::parsers::ParserCombinator>::then::<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        _37 = &_38;                      // scope 6 at src/parser.rs:50:39: 50:55
        StorageDead(_40);                // scope 6 at src/parser.rs:50:54: 50:55
        StorageDead(_39);                // scope 6 at src/parser.rs:50:54: 50:55
        _36 = <ChainedParser<MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, BoxedParser<[grammar_lexer::Token], grammar::Expr>> as peruse::parsers::ParserCombinator>::repeat(move _37) -> [return: bb18, unwind: bb31]; // scope 6 at src/parser.rs:50:39: 50:64
                                         // mir::Constant
                                         // + span: src/parser.rs:50:56: 50:62
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>) -> peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>> {<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>> as peruse::parsers::ParserCombinator>::repeat}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_37);                // scope 6 at src/parser.rs:50:63: 50:64
        _32 = <BoxedParser<[grammar_lexer::Token], grammar::Expr> as peruse::parsers::ParserCombinator>::then::<RepeatParser<ChainedParser<MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, BoxedParser<[grammar_lexer::Token], grammar::Expr>>>>(move _33, move _36) -> [return: bb19, unwind: bb31]; // scope 6 at src/parser.rs:50:21: 50:65
                                         // mir::Constant
                                         // + span: src/parser.rs:50:34: 50:38
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>) -> peruse::parsers::ChainedParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>> {<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr> as peruse::parsers::ParserCombinator>::then::<peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>>}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        _31 = &_32;                      // scope 6 at src/parser.rs:50:21: 50:65
        StorageDead(_36);                // scope 6 at src/parser.rs:50:64: 50:65
        StorageDead(_33);                // scope 6 at src/parser.rs:50:64: 50:65
        StorageLive(_41);                // scope 6 at src/parser.rs:50:70: 61:14
        _30 = <ChainedParser<BoxedParser<[grammar_lexer::Token], grammar::Expr>, RepeatParser<ChainedParser<MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, BoxedParser<[grammar_lexer::Token], grammar::Expr>>>> as peruse::parsers::ParserCombinator>::map::<grammar::Expr, [closure@src/parser.rs:50:70: 61:14]>(move _31, move _41) -> [return: bb20, unwind: bb30]; // scope 6 at src/parser.rs:50:21: 61:15
                                         // mir::Constant
                                         // + span: src/parser.rs:50:66: 50:69
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>>, [closure@src/parser.rs:50:70: 61:14]) -> peruse::parsers::MapParser<<peruse::parsers::ChainedParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>>, grammar::Expr> {<peruse::parsers::ChainedParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>> as peruse::parsers::ParserCombinator>::map::<grammar::Expr, [closure@src/parser.rs:50:70: 61:14]>}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _45 = const true;                // scope 6 at src/parser.rs:61:14: 61:15
        StorageDead(_41);                // scope 6 at src/parser.rs:61:14: 61:15
        StorageDead(_31);                // scope 6 at src/parser.rs:61:14: 61:15
        drop(_32) -> [return: bb21, unwind: bb28]; // scope 6 at src/parser.rs:61:15: 61:16
    }

    bb21: {
        drop(_38) -> [return: bb22, unwind: bb29]; // scope 6 at src/parser.rs:61:15: 61:16
    }

    bb22: {
        StorageDead(_38);                // scope 6 at src/parser.rs:61:15: 61:16
        drop(_34) -> [return: bb23, unwind: bb43]; // scope 6 at src/parser.rs:61:15: 61:16
    }

    bb23: {
        StorageDead(_34);                // scope 6 at src/parser.rs:61:15: 61:16
        StorageDead(_32);                // scope 6 at src/parser.rs:61:15: 61:16
        StorageLive(_42);                // scope 9 at src/parser.rs:62:19: 62:20
        _45 = const false;               // scope 9 at src/parser.rs:62:19: 62:20
        _42 = move _30;                  // scope 9 at src/parser.rs:62:19: 62:20
        _29 = peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Expr, MapParser<[grammar_lexer::Token], ChainedParser<BoxedParser<[grammar_lexer::Token], grammar::Expr>, RepeatParser<ChainedParser<MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, BoxedParser<[grammar_lexer::Token], grammar::Expr>>>>, grammar::Expr>>(move _42) -> [return: bb24, unwind: bb43]; // scope 9 at src/parser.rs:62:13: 62:21
                                         // mir::Constant
                                         // + span: src/parser.rs:62:13: 62:18
                                         // + literal: Const { ty: fn(peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>>, grammar::Expr>) -> peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr> {peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Expr, peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>, peruse::parsers::RepeatParser<peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::AddOp, [closure@src/parser.rs:27:29: 31:10]>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>>>, grammar::Expr>>}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        StorageDead(_42);                // scope 9 at src/parser.rs:62:20: 62:21
        _45 = const false;               // scope 6 at src/parser.rs:63:9: 63:10
        StorageDead(_30);                // scope 6 at src/parser.rs:63:9: 63:10
        StorageLive(_43);                // scope 8 at src/parser.rs:65:9: 65:23
        StorageLive(_44);                // scope 8 at src/parser.rs:65:18: 65:22
        _44 = move _29;                  // scope 8 at src/parser.rs:65:18: 65:22
        _43 = Box::<BoxedParser<[grammar_lexer::Token], grammar::Expr>>::new(move _44) -> [return: bb25, unwind: bb45]; // scope 8 at src/parser.rs:65:9: 65:23
                                         // mir::Constant
                                         // + span: src/parser.rs:65:9: 65:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>) -> std::boxed::Box<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>> {std::boxed::Box::<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Expr>>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        _1 = move _43 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 8 at src/parser.rs:65:9: 65:23
        StorageDead(_44);                // scope 8 at src/parser.rs:65:22: 65:23
        StorageDead(_43);                // scope 8 at src/parser.rs:65:22: 65:23
        StorageDead(_29);                // scope 6 at src/parser.rs:66:5: 66:6
        _46 = const false;               // scope 5 at src/parser.rs:66:5: 66:6
        StorageDead(_15);                // scope 5 at src/parser.rs:66:5: 66:6
        drop(_13) -> [return: bb26, unwind: bb39]; // scope 4 at src/parser.rs:66:5: 66:6
    }

    bb26: {
        StorageDead(_13);                // scope 4 at src/parser.rs:66:5: 66:6
        drop(_11) -> [return: bb27, unwind: bb49]; // scope 3 at src/parser.rs:66:5: 66:6
    }

    bb27: {
        StorageDead(_11);                // scope 3 at src/parser.rs:66:5: 66:6
        _48 = const false;               // scope 2 at src/parser.rs:66:5: 66:6
        StorageDead(_5);                 // scope 2 at src/parser.rs:66:5: 66:6
        StorageDead(_4);                 // scope 1 at src/parser.rs:66:5: 66:6
        _49 = const false;               // scope 0 at src/parser.rs:66:5: 66:6
        StorageDead(_2);                 // scope 0 at src/parser.rs:66:5: 66:6
        _0 = move _1 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:65:9: 65:23
        StorageDead(_1);                 // scope 0 at src/parser.rs:66:5: 66:6
        return;                          // scope 0 at src/parser.rs:66:6: 66:6
    }

    bb28 (cleanup): {
        drop(_38) -> bb29;               // scope 6 at src/parser.rs:61:15: 61:16
    }

    bb29 (cleanup): {
        drop(_34) -> bb43;               // scope 6 at src/parser.rs:61:15: 61:16
    }

    bb30 (cleanup): {
        drop(_32) -> bb31;               // scope 6 at src/parser.rs:61:15: 61:16
    }

    bb31 (cleanup): {
        drop(_38) -> bb32;               // scope 6 at src/parser.rs:61:15: 61:16
    }

    bb32 (cleanup): {
        drop(_34) -> bb45;               // scope 6 at src/parser.rs:61:15: 61:16
    }

    bb33 (cleanup): {
        drop(_24) -> bb34;               // scope 5 at src/parser.rs:45:15: 45:16
    }

    bb34 (cleanup): {
        drop(_20) -> bb47;               // scope 5 at src/parser.rs:45:15: 45:16
    }

    bb35 (cleanup): {
        drop(_18) -> bb36;               // scope 5 at src/parser.rs:45:15: 45:16
    }

    bb36 (cleanup): {
        drop(_24) -> bb37;               // scope 5 at src/parser.rs:45:15: 45:16
    }

    bb37 (cleanup): {
        drop(_20) -> bb38;               // scope 5 at src/parser.rs:45:15: 45:16
    }

    bb38 (cleanup): {
        drop(_13) -> bb39;               // scope 4 at src/parser.rs:66:5: 66:6
    }

    bb39 (cleanup): {
        drop(_11) -> bb49;               // scope 3 at src/parser.rs:66:5: 66:6
    }

    bb40 (cleanup): {
        drop(_7) -> bb51;                // scope 2 at src/parser.rs:18:50: 18:51
    }

    bb41 (cleanup): {
        resume;                          // scope 0 at src/parser.rs:9:5: 66:6
    }

    bb42 (cleanup): {
        drop(_30) -> bb45;               // scope 6 at src/parser.rs:63:9: 63:10
    }

    bb43 (cleanup): {
        switchInt(_45) -> [false: bb45, otherwise: bb42]; // scope 6 at src/parser.rs:63:9: 63:10
    }

    bb44 (cleanup): {
        drop(_15) -> bb38;               // scope 5 at src/parser.rs:66:5: 66:6
    }

    bb45 (cleanup): {
        switchInt(_46) -> [false: bb38, otherwise: bb44]; // scope 5 at src/parser.rs:66:5: 66:6
    }

    bb46 (cleanup): {
        drop(_16) -> bb38;               // scope 5 at src/parser.rs:47:9: 47:10
    }

    bb47 (cleanup): {
        switchInt(_47) -> [false: bb38, otherwise: bb46]; // scope 5 at src/parser.rs:47:9: 47:10
    }

    bb48 (cleanup): {
        drop(_5) -> bb51;                // scope 2 at src/parser.rs:66:5: 66:6
    }

    bb49 (cleanup): {
        switchInt(_48) -> [false: bb51, otherwise: bb48]; // scope 2 at src/parser.rs:66:5: 66:6
    }

    bb50 (cleanup): {
        drop(_2) -> bb41;                // scope 0 at src/parser.rs:66:5: 66:6
    }

    bb51 (cleanup): {
        switchInt(_49) -> [false: bb41, otherwise: bb50]; // scope 0 at src/parser.rs:66:5: 66:6
    }
}

fn grammar::<impl at src/grammar.rs:49:10: 49:15>::clone(_1: &grammar::Statement) -> grammar::Statement {
    debug self => _1;                    // in scope 0 at src/grammar.rs:49:10: 49:15
    let mut _0: grammar::Statement;      // return place in scope 0 at src/grammar.rs:49:10: 49:15
    let mut _2: (&grammar::Statement,);  // in scope 0 at src/grammar.rs:49:10: 49:15
    let mut _3: &grammar::Statement;     // in scope 0 at src/grammar.rs:49:10: 49:15
    let mut _4: isize;                   // in scope 0 at src/grammar.rs:49:10: 49:15
    let _5: &std::string::String;        // in scope 0 at src/grammar.rs:52:10: 52:16
    let _6: &grammar::Expr;              // in scope 0 at src/grammar.rs:52:18: 52:22
    let mut _7: std::string::String;     // in scope 0 at src/grammar.rs:52:10: 52:16
    let mut _8: &std::string::String;    // in scope 0 at src/grammar.rs:52:10: 52:16
    let _9: &std::string::String;        // in scope 0 at src/grammar.rs:52:10: 52:16
    let mut _10: grammar::Expr;          // in scope 0 at src/grammar.rs:52:18: 52:22
    let mut _11: &grammar::Expr;         // in scope 0 at src/grammar.rs:52:18: 52:22
    let _12: &grammar::Expr;             // in scope 0 at src/grammar.rs:52:18: 52:22
    let _13: &grammar::Expr;             // in scope 0 at src/grammar.rs:53:10: 53:14
    let mut _14: grammar::Expr;          // in scope 0 at src/grammar.rs:53:10: 53:14
    let mut _15: &grammar::Expr;         // in scope 0 at src/grammar.rs:53:10: 53:14
    let _16: &grammar::Expr;             // in scope 0 at src/grammar.rs:53:10: 53:14
    let _17: &grammar::Expr;             // in scope 0 at src/grammar.rs:54:6: 54:10
    let _18: &grammar::Comparator;       // in scope 0 at src/grammar.rs:54:12: 54:22
    let _19: &grammar::Expr;             // in scope 0 at src/grammar.rs:54:24: 54:28
    let _20: &grammar::Block;            // in scope 0 at src/grammar.rs:54:30: 54:35
    let _21: &std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let mut _22: grammar::Expr;          // in scope 0 at src/grammar.rs:54:6: 54:10
    let mut _23: &grammar::Expr;         // in scope 0 at src/grammar.rs:54:6: 54:10
    let _24: &grammar::Expr;             // in scope 0 at src/grammar.rs:54:6: 54:10
    let mut _25: grammar::Comparator;    // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _26: &grammar::Comparator;   // in scope 0 at src/grammar.rs:54:12: 54:22
    let _27: &grammar::Comparator;       // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _28: grammar::Expr;          // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _29: &grammar::Expr;         // in scope 0 at src/grammar.rs:54:24: 54:28
    let _30: &grammar::Expr;             // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _31: grammar::Block;         // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _32: &grammar::Block;        // in scope 0 at src/grammar.rs:54:30: 54:35
    let _33: &grammar::Block;            // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _34: std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let mut _35: &std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let _36: &std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let _37: &grammar::Expr;             // in scope 0 at src/grammar.rs:55:9: 55:13
    let _38: &grammar::Comparator;       // in scope 0 at src/grammar.rs:55:15: 55:25
    let _39: &grammar::Expr;             // in scope 0 at src/grammar.rs:55:27: 55:31
    let _40: &grammar::Block;            // in scope 0 at src/grammar.rs:55:33: 55:38
    let mut _41: grammar::Expr;          // in scope 0 at src/grammar.rs:55:9: 55:13
    let mut _42: &grammar::Expr;         // in scope 0 at src/grammar.rs:55:9: 55:13
    let _43: &grammar::Expr;             // in scope 0 at src/grammar.rs:55:9: 55:13
    let mut _44: grammar::Comparator;    // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _45: &grammar::Comparator;   // in scope 0 at src/grammar.rs:55:15: 55:25
    let _46: &grammar::Comparator;       // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _47: grammar::Expr;          // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _48: &grammar::Expr;         // in scope 0 at src/grammar.rs:55:27: 55:31
    let _49: &grammar::Expr;             // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _50: grammar::Block;         // in scope 0 at src/grammar.rs:55:33: 55:38
    let mut _51: &grammar::Block;        // in scope 0 at src/grammar.rs:55:33: 55:38
    let _52: &grammar::Block;            // in scope 0 at src/grammar.rs:55:33: 55:38
    let _53: &grammar::Expr;             // in scope 0 at src/grammar.rs:56:8: 56:12
    let _54: &grammar::Block;            // in scope 0 at src/grammar.rs:56:14: 56:19
    let mut _55: grammar::Expr;          // in scope 0 at src/grammar.rs:56:8: 56:12
    let mut _56: &grammar::Expr;         // in scope 0 at src/grammar.rs:56:8: 56:12
    let _57: &grammar::Expr;             // in scope 0 at src/grammar.rs:56:8: 56:12
    let mut _58: grammar::Block;         // in scope 0 at src/grammar.rs:56:14: 56:19
    let mut _59: &grammar::Block;        // in scope 0 at src/grammar.rs:56:14: 56:19
    let _60: &grammar::Block;            // in scope 0 at src/grammar.rs:56:14: 56:19
    scope 1 {
        debug __self_0 => _5;            // in scope 1 at src/grammar.rs:52:10: 52:16
        debug __self_1 => _6;            // in scope 1 at src/grammar.rs:52:18: 52:22
    }
    scope 2 {
        debug __self_0 => _13;           // in scope 2 at src/grammar.rs:53:10: 53:14
    }
    scope 3 {
        debug __self_0 => _17;           // in scope 3 at src/grammar.rs:54:6: 54:10
        debug __self_1 => _18;           // in scope 3 at src/grammar.rs:54:12: 54:22
        debug __self_2 => _19;           // in scope 3 at src/grammar.rs:54:24: 54:28
        debug __self_3 => _20;           // in scope 3 at src/grammar.rs:54:30: 54:35
        debug __self_4 => _21;           // in scope 3 at src/grammar.rs:54:37: 54:50
    }
    scope 4 {
        debug __self_0 => _37;           // in scope 4 at src/grammar.rs:55:9: 55:13
        debug __self_1 => _38;           // in scope 4 at src/grammar.rs:55:15: 55:25
        debug __self_2 => _39;           // in scope 4 at src/grammar.rs:55:27: 55:31
        debug __self_3 => _40;           // in scope 4 at src/grammar.rs:55:33: 55:38
    }
    scope 5 {
        debug __self_0 => _53;           // in scope 5 at src/grammar.rs:56:8: 56:12
        debug __self_1 => _54;           // in scope 5 at src/grammar.rs:56:14: 56:19
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at src/grammar.rs:49:10: 49:15
        StorageLive(_3);                 // scope 0 at src/grammar.rs:49:10: 49:15
        _3 = _1;                         // scope 0 at src/grammar.rs:49:10: 49:15
        (_2.0: &grammar::Statement) = move _3; // scope 0 at src/grammar.rs:49:10: 49:15
        StorageDead(_3);                 // scope 0 at src/grammar.rs:49:14: 49:15
        _4 = discriminant((*(_2.0: &grammar::Statement))); // scope 0 at src/grammar.rs:49:10: 49:15
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb6, 2_isize: bb8, 3_isize: bb14, 4_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar.rs:49:10: 49:15
    }

    bb1: {
        StorageLive(_53);                // scope 0 at src/grammar.rs:56:8: 56:12
        _53 = &(((*(_2.0: &grammar::Statement)) as Loop).0: grammar::Expr); // scope 0 at src/grammar.rs:56:8: 56:12
        StorageLive(_54);                // scope 0 at src/grammar.rs:56:14: 56:19
        _54 = &(((*(_2.0: &grammar::Statement)) as Loop).1: grammar::Block); // scope 0 at src/grammar.rs:56:14: 56:19
        StorageLive(_55);                // scope 5 at src/grammar.rs:56:8: 56:12
        StorageLive(_56);                // scope 5 at src/grammar.rs:56:8: 56:12
        StorageLive(_57);                // scope 5 at src/grammar.rs:56:8: 56:12
        _57 = _53;                       // scope 5 at src/grammar.rs:56:8: 56:12
        _56 = _57;                       // scope 5 at src/grammar.rs:56:8: 56:12
        _55 = <grammar::Expr as Clone>::clone(move _56) -> bb19; // scope 5 at src/grammar.rs:56:8: 56:12
                                         // mir::Constant
                                         // + span: src/grammar.rs:56:8: 56:12
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar.rs:49:10: 49:15
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at src/grammar.rs:52:10: 52:16
        _5 = &(((*(_2.0: &grammar::Statement)) as Assign).0: std::string::String); // scope 0 at src/grammar.rs:52:10: 52:16
        StorageLive(_6);                 // scope 0 at src/grammar.rs:52:18: 52:22
        _6 = &(((*(_2.0: &grammar::Statement)) as Assign).1: grammar::Expr); // scope 0 at src/grammar.rs:52:18: 52:22
        StorageLive(_7);                 // scope 1 at src/grammar.rs:52:10: 52:16
        StorageLive(_8);                 // scope 1 at src/grammar.rs:52:10: 52:16
        StorageLive(_9);                 // scope 1 at src/grammar.rs:52:10: 52:16
        _9 = _5;                         // scope 1 at src/grammar.rs:52:10: 52:16
        _8 = _9;                         // scope 1 at src/grammar.rs:52:10: 52:16
        _7 = <String as Clone>::clone(move _8) -> bb4; // scope 1 at src/grammar.rs:52:10: 52:16
                                         // mir::Constant
                                         // + span: src/grammar.rs:52:10: 52:16
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> std::string::String {<std::string::String as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_8);                 // scope 1 at src/grammar.rs:52:15: 52:16
        StorageLive(_10);                // scope 1 at src/grammar.rs:52:18: 52:22
        StorageLive(_11);                // scope 1 at src/grammar.rs:52:18: 52:22
        StorageLive(_12);                // scope 1 at src/grammar.rs:52:18: 52:22
        _12 = _6;                        // scope 1 at src/grammar.rs:52:18: 52:22
        _11 = _12;                       // scope 1 at src/grammar.rs:52:18: 52:22
        _10 = <grammar::Expr as Clone>::clone(move _11) -> [return: bb5, unwind: bb28]; // scope 1 at src/grammar.rs:52:18: 52:22
                                         // mir::Constant
                                         // + span: src/grammar.rs:52:18: 52:22
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_11);                // scope 1 at src/grammar.rs:52:21: 52:22
        ((_0 as Assign).0: std::string::String) = move _7; // scope 1 at src/grammar.rs:49:10: 49:15
        ((_0 as Assign).1: grammar::Expr) = move _10; // scope 1 at src/grammar.rs:49:10: 49:15
        discriminant(_0) = 0;            // scope 1 at src/grammar.rs:49:10: 49:15
        StorageDead(_12);                // scope 1 at src/grammar.rs:49:14: 49:15
        StorageDead(_10);                // scope 1 at src/grammar.rs:49:14: 49:15
        StorageDead(_9);                 // scope 1 at src/grammar.rs:49:14: 49:15
        StorageDead(_7);                 // scope 1 at src/grammar.rs:49:14: 49:15
        StorageDead(_6);                 // scope 0 at src/grammar.rs:49:14: 49:15
        StorageDead(_5);                 // scope 0 at src/grammar.rs:49:14: 49:15
        goto -> bb21;                    // scope 0 at src/grammar.rs:49:14: 49:15
    }

    bb6: {
        StorageLive(_13);                // scope 0 at src/grammar.rs:53:10: 53:14
        _13 = &(((*(_2.0: &grammar::Statement)) as Output).0: grammar::Expr); // scope 0 at src/grammar.rs:53:10: 53:14
        StorageLive(_14);                // scope 2 at src/grammar.rs:53:10: 53:14
        StorageLive(_15);                // scope 2 at src/grammar.rs:53:10: 53:14
        StorageLive(_16);                // scope 2 at src/grammar.rs:53:10: 53:14
        _16 = _13;                       // scope 2 at src/grammar.rs:53:10: 53:14
        _15 = _16;                       // scope 2 at src/grammar.rs:53:10: 53:14
        _14 = <grammar::Expr as Clone>::clone(move _15) -> bb7; // scope 2 at src/grammar.rs:53:10: 53:14
                                         // mir::Constant
                                         // + span: src/grammar.rs:53:10: 53:14
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_15);                // scope 2 at src/grammar.rs:53:13: 53:14
        ((_0 as Output).0: grammar::Expr) = move _14; // scope 2 at src/grammar.rs:49:10: 49:15
        discriminant(_0) = 1;            // scope 2 at src/grammar.rs:49:10: 49:15
        StorageDead(_16);                // scope 2 at src/grammar.rs:49:14: 49:15
        StorageDead(_14);                // scope 2 at src/grammar.rs:49:14: 49:15
        StorageDead(_13);                // scope 0 at src/grammar.rs:49:14: 49:15
        goto -> bb21;                    // scope 0 at src/grammar.rs:49:14: 49:15
    }

    bb8: {
        StorageLive(_17);                // scope 0 at src/grammar.rs:54:6: 54:10
        _17 = &(((*(_2.0: &grammar::Statement)) as If).0: grammar::Expr); // scope 0 at src/grammar.rs:54:6: 54:10
        StorageLive(_18);                // scope 0 at src/grammar.rs:54:12: 54:22
        _18 = &(((*(_2.0: &grammar::Statement)) as If).1: grammar::Comparator); // scope 0 at src/grammar.rs:54:12: 54:22
        StorageLive(_19);                // scope 0 at src/grammar.rs:54:24: 54:28
        _19 = &(((*(_2.0: &grammar::Statement)) as If).2: grammar::Expr); // scope 0 at src/grammar.rs:54:24: 54:28
        StorageLive(_20);                // scope 0 at src/grammar.rs:54:30: 54:35
        _20 = &(((*(_2.0: &grammar::Statement)) as If).3: grammar::Block); // scope 0 at src/grammar.rs:54:30: 54:35
        StorageLive(_21);                // scope 0 at src/grammar.rs:54:37: 54:50
        _21 = &(((*(_2.0: &grammar::Statement)) as If).4: std::option::Option<grammar::Block>); // scope 0 at src/grammar.rs:54:37: 54:50
        StorageLive(_22);                // scope 3 at src/grammar.rs:54:6: 54:10
        StorageLive(_23);                // scope 3 at src/grammar.rs:54:6: 54:10
        StorageLive(_24);                // scope 3 at src/grammar.rs:54:6: 54:10
        _24 = _17;                       // scope 3 at src/grammar.rs:54:6: 54:10
        _23 = _24;                       // scope 3 at src/grammar.rs:54:6: 54:10
        _22 = <grammar::Expr as Clone>::clone(move _23) -> bb9; // scope 3 at src/grammar.rs:54:6: 54:10
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:6: 54:10
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_23);                // scope 3 at src/grammar.rs:54:9: 54:10
        StorageLive(_25);                // scope 3 at src/grammar.rs:54:12: 54:22
        StorageLive(_26);                // scope 3 at src/grammar.rs:54:12: 54:22
        StorageLive(_27);                // scope 3 at src/grammar.rs:54:12: 54:22
        _27 = _18;                       // scope 3 at src/grammar.rs:54:12: 54:22
        _26 = _27;                       // scope 3 at src/grammar.rs:54:12: 54:22
        _25 = <grammar::Comparator as Clone>::clone(move _26) -> [return: bb10, unwind: bb27]; // scope 3 at src/grammar.rs:54:12: 54:22
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:12: 54:22
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Comparator) -> grammar::Comparator {<grammar::Comparator as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_26);                // scope 3 at src/grammar.rs:54:21: 54:22
        StorageLive(_28);                // scope 3 at src/grammar.rs:54:24: 54:28
        StorageLive(_29);                // scope 3 at src/grammar.rs:54:24: 54:28
        StorageLive(_30);                // scope 3 at src/grammar.rs:54:24: 54:28
        _30 = _19;                       // scope 3 at src/grammar.rs:54:24: 54:28
        _29 = _30;                       // scope 3 at src/grammar.rs:54:24: 54:28
        _28 = <grammar::Expr as Clone>::clone(move _29) -> [return: bb11, unwind: bb27]; // scope 3 at src/grammar.rs:54:24: 54:28
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:24: 54:28
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_29);                // scope 3 at src/grammar.rs:54:27: 54:28
        StorageLive(_31);                // scope 3 at src/grammar.rs:54:30: 54:35
        StorageLive(_32);                // scope 3 at src/grammar.rs:54:30: 54:35
        StorageLive(_33);                // scope 3 at src/grammar.rs:54:30: 54:35
        _33 = _20;                       // scope 3 at src/grammar.rs:54:30: 54:35
        _32 = _33;                       // scope 3 at src/grammar.rs:54:30: 54:35
        _31 = <grammar::Block as Clone>::clone(move _32) -> [return: bb12, unwind: bb26]; // scope 3 at src/grammar.rs:54:30: 54:35
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:30: 54:35
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Block) -> grammar::Block {<grammar::Block as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_32);                // scope 3 at src/grammar.rs:54:34: 54:35
        StorageLive(_34);                // scope 3 at src/grammar.rs:54:37: 54:50
        StorageLive(_35);                // scope 3 at src/grammar.rs:54:37: 54:50
        StorageLive(_36);                // scope 3 at src/grammar.rs:54:37: 54:50
        _36 = _21;                       // scope 3 at src/grammar.rs:54:37: 54:50
        _35 = _36;                       // scope 3 at src/grammar.rs:54:37: 54:50
        _34 = <Option<grammar::Block> as Clone>::clone(move _35) -> [return: bb13, unwind: bb25]; // scope 3 at src/grammar.rs:54:37: 54:50
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:37: 54:50
                                         // + literal: Const { ty: for<'r> fn(&'r std::option::Option<grammar::Block>) -> std::option::Option<grammar::Block> {<std::option::Option<grammar::Block> as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_35);                // scope 3 at src/grammar.rs:54:49: 54:50
        ((_0 as If).0: grammar::Expr) = move _22; // scope 3 at src/grammar.rs:49:10: 49:15
        ((_0 as If).1: grammar::Comparator) = move _25; // scope 3 at src/grammar.rs:49:10: 49:15
        ((_0 as If).2: grammar::Expr) = move _28; // scope 3 at src/grammar.rs:49:10: 49:15
        ((_0 as If).3: grammar::Block) = move _31; // scope 3 at src/grammar.rs:49:10: 49:15
        ((_0 as If).4: std::option::Option<grammar::Block>) = move _34; // scope 3 at src/grammar.rs:49:10: 49:15
        discriminant(_0) = 2;            // scope 3 at src/grammar.rs:49:10: 49:15
        StorageDead(_36);                // scope 3 at src/grammar.rs:49:14: 49:15
        StorageDead(_34);                // scope 3 at src/grammar.rs:49:14: 49:15
        StorageDead(_33);                // scope 3 at src/grammar.rs:49:14: 49:15
        StorageDead(_31);                // scope 3 at src/grammar.rs:49:14: 49:15
        StorageDead(_30);                // scope 3 at src/grammar.rs:49:14: 49:15
        StorageDead(_28);                // scope 3 at src/grammar.rs:49:14: 49:15
        StorageDead(_27);                // scope 3 at src/grammar.rs:49:14: 49:15
        StorageDead(_25);                // scope 3 at src/grammar.rs:49:14: 49:15
        StorageDead(_24);                // scope 3 at src/grammar.rs:49:14: 49:15
        StorageDead(_22);                // scope 3 at src/grammar.rs:49:14: 49:15
        StorageDead(_21);                // scope 0 at src/grammar.rs:49:14: 49:15
        StorageDead(_20);                // scope 0 at src/grammar.rs:49:14: 49:15
        StorageDead(_19);                // scope 0 at src/grammar.rs:49:14: 49:15
        StorageDead(_18);                // scope 0 at src/grammar.rs:49:14: 49:15
        StorageDead(_17);                // scope 0 at src/grammar.rs:49:14: 49:15
        goto -> bb21;                    // scope 0 at src/grammar.rs:49:14: 49:15
    }

    bb14: {
        StorageLive(_37);                // scope 0 at src/grammar.rs:55:9: 55:13
        _37 = &(((*(_2.0: &grammar::Statement)) as While).0: grammar::Expr); // scope 0 at src/grammar.rs:55:9: 55:13
        StorageLive(_38);                // scope 0 at src/grammar.rs:55:15: 55:25
        _38 = &(((*(_2.0: &grammar::Statement)) as While).1: grammar::Comparator); // scope 0 at src/grammar.rs:55:15: 55:25
        StorageLive(_39);                // scope 0 at src/grammar.rs:55:27: 55:31
        _39 = &(((*(_2.0: &grammar::Statement)) as While).2: grammar::Expr); // scope 0 at src/grammar.rs:55:27: 55:31
        StorageLive(_40);                // scope 0 at src/grammar.rs:55:33: 55:38
        _40 = &(((*(_2.0: &grammar::Statement)) as While).3: grammar::Block); // scope 0 at src/grammar.rs:55:33: 55:38
        StorageLive(_41);                // scope 4 at src/grammar.rs:55:9: 55:13
        StorageLive(_42);                // scope 4 at src/grammar.rs:55:9: 55:13
        StorageLive(_43);                // scope 4 at src/grammar.rs:55:9: 55:13
        _43 = _37;                       // scope 4 at src/grammar.rs:55:9: 55:13
        _42 = _43;                       // scope 4 at src/grammar.rs:55:9: 55:13
        _41 = <grammar::Expr as Clone>::clone(move _42) -> bb15; // scope 4 at src/grammar.rs:55:9: 55:13
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:9: 55:13
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_42);                // scope 4 at src/grammar.rs:55:12: 55:13
        StorageLive(_44);                // scope 4 at src/grammar.rs:55:15: 55:25
        StorageLive(_45);                // scope 4 at src/grammar.rs:55:15: 55:25
        StorageLive(_46);                // scope 4 at src/grammar.rs:55:15: 55:25
        _46 = _38;                       // scope 4 at src/grammar.rs:55:15: 55:25
        _45 = _46;                       // scope 4 at src/grammar.rs:55:15: 55:25
        _44 = <grammar::Comparator as Clone>::clone(move _45) -> [return: bb16, unwind: bb24]; // scope 4 at src/grammar.rs:55:15: 55:25
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:15: 55:25
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Comparator) -> grammar::Comparator {<grammar::Comparator as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_45);                // scope 4 at src/grammar.rs:55:24: 55:25
        StorageLive(_47);                // scope 4 at src/grammar.rs:55:27: 55:31
        StorageLive(_48);                // scope 4 at src/grammar.rs:55:27: 55:31
        StorageLive(_49);                // scope 4 at src/grammar.rs:55:27: 55:31
        _49 = _39;                       // scope 4 at src/grammar.rs:55:27: 55:31
        _48 = _49;                       // scope 4 at src/grammar.rs:55:27: 55:31
        _47 = <grammar::Expr as Clone>::clone(move _48) -> [return: bb17, unwind: bb24]; // scope 4 at src/grammar.rs:55:27: 55:31
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:27: 55:31
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_48);                // scope 4 at src/grammar.rs:55:30: 55:31
        StorageLive(_50);                // scope 4 at src/grammar.rs:55:33: 55:38
        StorageLive(_51);                // scope 4 at src/grammar.rs:55:33: 55:38
        StorageLive(_52);                // scope 4 at src/grammar.rs:55:33: 55:38
        _52 = _40;                       // scope 4 at src/grammar.rs:55:33: 55:38
        _51 = _52;                       // scope 4 at src/grammar.rs:55:33: 55:38
        _50 = <grammar::Block as Clone>::clone(move _51) -> [return: bb18, unwind: bb23]; // scope 4 at src/grammar.rs:55:33: 55:38
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:33: 55:38
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Block) -> grammar::Block {<grammar::Block as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_51);                // scope 4 at src/grammar.rs:55:37: 55:38
        ((_0 as While).0: grammar::Expr) = move _41; // scope 4 at src/grammar.rs:49:10: 49:15
        ((_0 as While).1: grammar::Comparator) = move _44; // scope 4 at src/grammar.rs:49:10: 49:15
        ((_0 as While).2: grammar::Expr) = move _47; // scope 4 at src/grammar.rs:49:10: 49:15
        ((_0 as While).3: grammar::Block) = move _50; // scope 4 at src/grammar.rs:49:10: 49:15
        discriminant(_0) = 3;            // scope 4 at src/grammar.rs:49:10: 49:15
        StorageDead(_52);                // scope 4 at src/grammar.rs:49:14: 49:15
        StorageDead(_50);                // scope 4 at src/grammar.rs:49:14: 49:15
        StorageDead(_49);                // scope 4 at src/grammar.rs:49:14: 49:15
        StorageDead(_47);                // scope 4 at src/grammar.rs:49:14: 49:15
        StorageDead(_46);                // scope 4 at src/grammar.rs:49:14: 49:15
        StorageDead(_44);                // scope 4 at src/grammar.rs:49:14: 49:15
        StorageDead(_43);                // scope 4 at src/grammar.rs:49:14: 49:15
        StorageDead(_41);                // scope 4 at src/grammar.rs:49:14: 49:15
        StorageDead(_40);                // scope 0 at src/grammar.rs:49:14: 49:15
        StorageDead(_39);                // scope 0 at src/grammar.rs:49:14: 49:15
        StorageDead(_38);                // scope 0 at src/grammar.rs:49:14: 49:15
        StorageDead(_37);                // scope 0 at src/grammar.rs:49:14: 49:15
        goto -> bb21;                    // scope 0 at src/grammar.rs:49:14: 49:15
    }

    bb19: {
        StorageDead(_56);                // scope 5 at src/grammar.rs:56:11: 56:12
        StorageLive(_58);                // scope 5 at src/grammar.rs:56:14: 56:19
        StorageLive(_59);                // scope 5 at src/grammar.rs:56:14: 56:19
        StorageLive(_60);                // scope 5 at src/grammar.rs:56:14: 56:19
        _60 = _54;                       // scope 5 at src/grammar.rs:56:14: 56:19
        _59 = _60;                       // scope 5 at src/grammar.rs:56:14: 56:19
        _58 = <grammar::Block as Clone>::clone(move _59) -> [return: bb20, unwind: bb22]; // scope 5 at src/grammar.rs:56:14: 56:19
                                         // mir::Constant
                                         // + span: src/grammar.rs:56:14: 56:19
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Block) -> grammar::Block {<grammar::Block as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        StorageDead(_59);                // scope 5 at src/grammar.rs:56:18: 56:19
        ((_0 as Loop).0: grammar::Expr) = move _55; // scope 5 at src/grammar.rs:49:10: 49:15
        ((_0 as Loop).1: grammar::Block) = move _58; // scope 5 at src/grammar.rs:49:10: 49:15
        discriminant(_0) = 4;            // scope 5 at src/grammar.rs:49:10: 49:15
        StorageDead(_60);                // scope 5 at src/grammar.rs:49:14: 49:15
        StorageDead(_58);                // scope 5 at src/grammar.rs:49:14: 49:15
        StorageDead(_57);                // scope 5 at src/grammar.rs:49:14: 49:15
        StorageDead(_55);                // scope 5 at src/grammar.rs:49:14: 49:15
        StorageDead(_54);                // scope 0 at src/grammar.rs:49:14: 49:15
        StorageDead(_53);                // scope 0 at src/grammar.rs:49:14: 49:15
        goto -> bb21;                    // scope 0 at src/grammar.rs:49:14: 49:15
    }

    bb21: {
        StorageDead(_2);                 // scope 0 at src/grammar.rs:49:14: 49:15
        return;                          // scope 0 at src/grammar.rs:49:15: 49:15
    }

    bb22 (cleanup): {
        drop(_55) -> bb29;               // scope 5 at src/grammar.rs:49:14: 49:15
    }

    bb23 (cleanup): {
        drop(_47) -> bb24;               // scope 4 at src/grammar.rs:49:14: 49:15
    }

    bb24 (cleanup): {
        drop(_41) -> bb29;               // scope 4 at src/grammar.rs:49:14: 49:15
    }

    bb25 (cleanup): {
        drop(_31) -> bb26;               // scope 3 at src/grammar.rs:49:14: 49:15
    }

    bb26 (cleanup): {
        drop(_28) -> bb27;               // scope 3 at src/grammar.rs:49:14: 49:15
    }

    bb27 (cleanup): {
        drop(_22) -> bb29;               // scope 3 at src/grammar.rs:49:14: 49:15
    }

    bb28 (cleanup): {
        drop(_7) -> bb29;                // scope 1 at src/grammar.rs:49:14: 49:15
    }

    bb29 (cleanup): {
        resume;                          // scope 0 at src/grammar.rs:49:10: 49:15
    }
}

fn grammar_lexer::<impl at src/grammar_lexer.rs:5:10: 5:19>::ne(_1: &grammar_lexer::Token, _2: &grammar_lexer::Token) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    debug other => _2;                   // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let _3: isize;                       // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _4: &grammar_lexer::Token;   // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let _5: &grammar_lexer::Token;       // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _7: &grammar_lexer::Token;   // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let _8: &grammar_lexer::Token;       // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _9: bool;                    // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _10: bool;                   // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _11: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _12: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _13: (&grammar_lexer::Token, &grammar_lexer::Token); // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _14: &grammar_lexer::Token;  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _15: &grammar_lexer::Token;  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _16: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _17: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _18: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _19: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _22: &std::string::String;   // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let mut _23: &std::string::String;   // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let mut _26: i32;                    // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let mut _27: i32;                    // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let mut _30: &grammar::Comparator;   // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    let mut _31: &grammar::Comparator;   // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at src/grammar_lexer.rs:5:10: 5:19
        let _6: isize;                   // in scope 1 at src/grammar_lexer.rs:5:10: 5:19
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at src/grammar_lexer.rs:5:10: 5:19
            let _20: &std::string::String; // in scope 2 at src/grammar_lexer.rs:9:9: 9:15
            let _21: &std::string::String; // in scope 2 at src/grammar_lexer.rs:9:9: 9:15
            let _24: &i32;               // in scope 2 at src/grammar_lexer.rs:10:10: 10:13
            let _25: &i32;               // in scope 2 at src/grammar_lexer.rs:10:10: 10:13
            let _28: &grammar::Comparator; // in scope 2 at src/grammar_lexer.rs:26:7: 26:17
            let _29: &grammar::Comparator; // in scope 2 at src/grammar_lexer.rs:26:7: 26:17
            scope 3 {
                debug __self_0 => _20;   // in scope 3 at src/grammar_lexer.rs:9:9: 9:15
                debug __arg_1_0 => _21;  // in scope 3 at src/grammar_lexer.rs:9:9: 9:15
            }
            scope 4 {
                debug __self_0 => _24;   // in scope 4 at src/grammar_lexer.rs:10:10: 10:13
                debug __arg_1_0 => _25;  // in scope 4 at src/grammar_lexer.rs:10:10: 10:13
            }
            scope 5 {
                debug __self_0 => _28;   // in scope 5 at src/grammar_lexer.rs:26:7: 26:17
                debug __arg_1_0 => _29;  // in scope 5 at src/grammar_lexer.rs:26:7: 26:17
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_4);                 // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_5);                 // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        _5 = _1;                         // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        _4 = _5;                         // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        _3 = discriminant((*_4));        // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        StorageDead(_4);                 // scope 0 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_5);                 // scope 0 at src/grammar_lexer.rs:5:18: 5:19
        StorageLive(_6);                 // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_7);                 // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_8);                 // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        _8 = _2;                         // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        _7 = _8;                         // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        _6 = discriminant((*_7));        // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        StorageDead(_7);                 // scope 1 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_8);                 // scope 1 at src/grammar_lexer.rs:5:18: 5:19
        StorageLive(_9);                 // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_10);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_11);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        _11 = _3;                        // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_12);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        _12 = _6;                        // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        _10 = Eq(move _11, move _12);    // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageDead(_12);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_11);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        _9 = move _10;                   // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageDead(_10);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        switchInt(move _9) -> [false: bb12, otherwise: bb1]; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb1: {
        StorageLive(_13);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_14);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        _14 = _1;                        // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_15);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        _15 = _2;                        // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        (_13.0: &grammar_lexer::Token) = move _14; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        (_13.1: &grammar_lexer::Token) = move _15; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageDead(_15);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_14);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        _19 = discriminant((*(_13.0: &grammar_lexer::Token))); // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        switchInt(move _19) -> [1_isize: bb3, 2_isize: bb4, 18_isize: bb5, otherwise: bb2]; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb2: {
        _0 = const false;                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        goto -> bb11;                    // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb3: {
        _16 = discriminant((*(_13.1: &grammar_lexer::Token))); // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        switchInt(move _16) -> [1_isize: bb6, otherwise: bb2]; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb4: {
        _17 = discriminant((*(_13.1: &grammar_lexer::Token))); // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        switchInt(move _17) -> [2_isize: bb8, otherwise: bb2]; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb5: {
        _18 = discriminant((*(_13.1: &grammar_lexer::Token))); // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        switchInt(move _18) -> [18_isize: bb9, otherwise: bb2]; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb6: {
        StorageLive(_20);                // scope 2 at src/grammar_lexer.rs:9:9: 9:15
        _20 = &(((*(_13.0: &grammar_lexer::Token)) as Ident).0: std::string::String); // scope 2 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_21);                // scope 2 at src/grammar_lexer.rs:9:9: 9:15
        _21 = &(((*(_13.1: &grammar_lexer::Token)) as Ident).0: std::string::String); // scope 2 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_22);                // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        _22 = _20;                       // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_23);                // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        _23 = _21;                       // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        _0 = <String as PartialEq>::ne(move _22, move _23) -> bb7; // scope 3 at src/grammar_lexer.rs:9:9: 9:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:9:9: 9:15
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::string::String, &'s std::string::String) -> bool {<std::string::String as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_23);                // scope 3 at src/grammar_lexer.rs:9:14: 9:15
        StorageDead(_22);                // scope 3 at src/grammar_lexer.rs:9:14: 9:15
        StorageDead(_21);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_20);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        goto -> bb11;                    // scope 2 at src/grammar_lexer.rs:5:18: 5:19
    }

    bb8: {
        StorageLive(_24);                // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        _24 = &(((*(_13.0: &grammar_lexer::Token)) as Number).0: i32); // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_25);                // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        _25 = &(((*(_13.1: &grammar_lexer::Token)) as Number).0: i32); // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_26);                // scope 4 at src/grammar_lexer.rs:10:10: 10:13
        _26 = (*_24);                    // scope 4 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_27);                // scope 4 at src/grammar_lexer.rs:10:10: 10:13
        _27 = (*_25);                    // scope 4 at src/grammar_lexer.rs:10:10: 10:13
        _0 = Ne(move _26, move _27);     // scope 4 at src/grammar_lexer.rs:10:10: 10:13
        StorageDead(_27);                // scope 4 at src/grammar_lexer.rs:10:12: 10:13
        StorageDead(_26);                // scope 4 at src/grammar_lexer.rs:10:12: 10:13
        StorageDead(_25);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_24);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        goto -> bb11;                    // scope 2 at src/grammar_lexer.rs:5:18: 5:19
    }

    bb9: {
        StorageLive(_28);                // scope 2 at src/grammar_lexer.rs:26:7: 26:17
        _28 = &(((*(_13.0: &grammar_lexer::Token)) as Cmp).0: grammar::Comparator); // scope 2 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_29);                // scope 2 at src/grammar_lexer.rs:26:7: 26:17
        _29 = &(((*(_13.1: &grammar_lexer::Token)) as Cmp).0: grammar::Comparator); // scope 2 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_30);                // scope 5 at src/grammar_lexer.rs:26:7: 26:17
        _30 = _28;                       // scope 5 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_31);                // scope 5 at src/grammar_lexer.rs:26:7: 26:17
        _31 = _29;                       // scope 5 at src/grammar_lexer.rs:26:7: 26:17
        _0 = <grammar::Comparator as PartialEq>::ne(move _30, move _31) -> bb10; // scope 5 at src/grammar_lexer.rs:26:7: 26:17
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:26:7: 26:17
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Comparator, &'s grammar::Comparator) -> bool {<grammar::Comparator as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_31);                // scope 5 at src/grammar_lexer.rs:26:16: 26:17
        StorageDead(_30);                // scope 5 at src/grammar_lexer.rs:26:16: 26:17
        StorageDead(_29);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_28);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        goto -> bb11;                    // scope 2 at src/grammar_lexer.rs:5:18: 5:19
    }

    bb11: {
        StorageDead(_13);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        goto -> bb13;                    // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb12: {
        _0 = const true;                 // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        goto -> bb13;                    // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb13: {
        StorageDead(_9);                 // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_6);                 // scope 1 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_3);                 // scope 0 at src/grammar_lexer.rs:5:18: 5:19
        return;                          // scope 0 at src/grammar_lexer.rs:5:19: 5:19
    }
}

fn program::{closure#7}(_1: &[closure@src/parser.rs:138:89: 138:113], _2: grammar::Expr) -> grammar::Statement {
    debug e => _2;                       // in scope 0 at src/parser.rs:138:90: 138:91
    let mut _0: grammar::Statement;      // return place in scope 0 at src/parser.rs:138:93: 138:93
    let mut _3: grammar::Expr;           // in scope 0 at src/parser.rs:138:111: 138:112

    bb0: {
        StorageLive(_3);                 // scope 0 at src/parser.rs:138:111: 138:112
        _3 = move _2;                    // scope 0 at src/parser.rs:138:111: 138:112
        ((_0 as Output).0: grammar::Expr) = move _3; // scope 0 at src/parser.rs:138:93: 138:113
        discriminant(_0) = 1;            // scope 0 at src/parser.rs:138:93: 138:113
        StorageDead(_3);                 // scope 0 at src/parser.rs:138:112: 138:113
        return;                          // scope 0 at src/parser.rs:138:113: 138:113
    }
}

fn if_stmt::{closure#2}(_1: &[closure@src/parser.rs:101:37: 101:52]) -> Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>>; // return place in scope 0 at src/parser.rs:101:40: 101:40
    let mut _2: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>>; // in scope 0 at src/parser.rs:101:40: 101:52

    bb0: {
        StorageLive(_2);                 // scope 0 at src/parser.rs:101:40: 101:52
        _2 = code_block() -> bb1;        // scope 0 at src/parser.rs:101:40: 101:52
                                         // mir::Constant
                                         // + span: src/parser.rs:101:40: 101:50
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program::code_block}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = move _2 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:101:40: 101:52
        StorageDead(_2);                 // scope 0 at src/parser.rs:101:51: 101:52
        return;                          // scope 0 at src/parser.rs:101:52: 101:52
    }
}

fn grammar::<impl at src/grammar.rs:28:10: 28:19>::ne(_1: &grammar::MultTerm, _2: &grammar::MultTerm) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:28:10: 28:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:28:10: 28:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:28:10: 28:19
    let _3: &grammar::MultOp;            // in scope 0 at src/grammar.rs:29:21: 29:31
    let _4: &grammar::Expr;              // in scope 0 at src/grammar.rs:29:33: 29:41
    let mut _7: bool;                    // in scope 0 at src/grammar.rs:29:21: 29:31
    let mut _8: &grammar::MultOp;        // in scope 0 at src/grammar.rs:29:21: 29:31
    let mut _9: &grammar::MultOp;        // in scope 0 at src/grammar.rs:29:21: 29:31
    let mut _10: bool;                   // in scope 0 at src/grammar.rs:29:33: 29:41
    let mut _11: &grammar::Expr;         // in scope 0 at src/grammar.rs:29:33: 29:41
    let mut _12: &grammar::Expr;         // in scope 0 at src/grammar.rs:29:33: 29:41
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at src/grammar.rs:29:21: 29:31
        debug __self_1_1 => _4;          // in scope 1 at src/grammar.rs:29:33: 29:41
        let _5: &grammar::MultOp;        // in scope 1 at src/grammar.rs:29:21: 29:31
        let _6: &grammar::Expr;          // in scope 1 at src/grammar.rs:29:33: 29:41
        scope 2 {
            debug __self_0_0 => _5;      // in scope 2 at src/grammar.rs:29:21: 29:31
            debug __self_0_1 => _6;      // in scope 2 at src/grammar.rs:29:33: 29:41
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:29:21: 29:31
        _3 = &((*_2).0: grammar::MultOp); // scope 0 at src/grammar.rs:29:21: 29:31
        StorageLive(_4);                 // scope 0 at src/grammar.rs:29:33: 29:41
        _4 = &((*_2).1: grammar::Expr);  // scope 0 at src/grammar.rs:29:33: 29:41
        StorageLive(_5);                 // scope 1 at src/grammar.rs:29:21: 29:31
        _5 = &((*_1).0: grammar::MultOp); // scope 1 at src/grammar.rs:29:21: 29:31
        StorageLive(_6);                 // scope 1 at src/grammar.rs:29:33: 29:41
        _6 = &((*_1).1: grammar::Expr);  // scope 1 at src/grammar.rs:29:33: 29:41
        StorageLive(_7);                 // scope 2 at src/grammar.rs:29:21: 29:31
        StorageLive(_8);                 // scope 2 at src/grammar.rs:29:21: 29:31
        _8 = _5;                         // scope 2 at src/grammar.rs:29:21: 29:31
        StorageLive(_9);                 // scope 2 at src/grammar.rs:29:21: 29:31
        _9 = _3;                         // scope 2 at src/grammar.rs:29:21: 29:31
        _7 = <grammar::MultOp as PartialEq>::ne(move _8, move _9) -> bb4; // scope 2 at src/grammar.rs:29:21: 29:31
                                         // mir::Constant
                                         // + span: src/grammar.rs:29:21: 29:31
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::MultOp, &'s grammar::MultOp) -> bool {<grammar::MultOp as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = const true;                 // scope 2 at src/grammar.rs:29:33: 29:41
        goto -> bb3;                     // scope 2 at src/grammar.rs:29:33: 29:41
    }

    bb2: {
        StorageLive(_10);                // scope 2 at src/grammar.rs:29:33: 29:41
        StorageLive(_11);                // scope 2 at src/grammar.rs:29:33: 29:41
        _11 = _6;                        // scope 2 at src/grammar.rs:29:33: 29:41
        StorageLive(_12);                // scope 2 at src/grammar.rs:29:33: 29:41
        _12 = _4;                        // scope 2 at src/grammar.rs:29:33: 29:41
        _10 = <grammar::Expr as PartialEq>::ne(move _11, move _12) -> bb5; // scope 2 at src/grammar.rs:29:33: 29:41
                                         // mir::Constant
                                         // + span: src/grammar.rs:29:33: 29:41
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_10);                // scope 2 at src/grammar.rs:29:40: 29:41
        StorageDead(_7);                 // scope 2 at src/grammar.rs:29:40: 29:41
        StorageDead(_6);                 // scope 1 at src/grammar.rs:28:18: 28:19
        StorageDead(_5);                 // scope 1 at src/grammar.rs:28:18: 28:19
        StorageDead(_4);                 // scope 0 at src/grammar.rs:28:18: 28:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:28:18: 28:19
        return;                          // scope 0 at src/grammar.rs:28:19: 28:19
    }

    bb4: {
        StorageDead(_9);                 // scope 2 at src/grammar.rs:29:30: 29:31
        StorageDead(_8);                 // scope 2 at src/grammar.rs:29:30: 29:31
        switchInt(move _7) -> [false: bb2, otherwise: bb1]; // scope 2 at src/grammar.rs:29:33: 29:41
    }

    bb5: {
        StorageDead(_12);                // scope 2 at src/grammar.rs:29:40: 29:41
        StorageDead(_11);                // scope 2 at src/grammar.rs:29:40: 29:41
        _0 = move _10;                   // scope 2 at src/grammar.rs:29:33: 29:41
        goto -> bb3;                     // scope 2 at src/grammar.rs:29:33: 29:41
    }
}

fn code_block() -> Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>>; // return place in scope 0 at src/parser.rs:84:28: 84:59
    let mut _1: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>>; // in scope 0 at src/parser.rs:85:13: 87:45
    let mut _2: std::boxed::Box<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Block>>; // in scope 0 at src/parser.rs:85:13: 87:45
    let mut _3: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Block>; // in scope 0 at src/parser.rs:85:22: 87:44
    let mut _4: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block>; // in scope 0 at src/parser.rs:85:22: 86:45
    let _5: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block>; // in scope 0 at src/parser.rs:85:22: 86:45
    let mut _6: &peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:85:22: 85:43
    let _7: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:85:22: 85:43
    let mut _8: grammar_lexer::Token;    // in scope 0 at src/parser.rs:85:26: 85:42
    let mut _9: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>; // in scope 0 at src/parser.rs:86:21: 86:44
    let mut _10: [closure@src/parser.rs:86:31: 86:43]; // in scope 0 at src/parser.rs:86:31: 86:43
    let mut _11: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:87:21: 87:43
    let mut _12: grammar_lexer::Token;   // in scope 0 at src/parser.rs:87:25: 87:42

    bb0: {
        StorageLive(_1);                 // scope 0 at src/parser.rs:85:13: 87:45
        StorageLive(_2);                 // scope 0 at src/parser.rs:85:13: 87:45
        StorageLive(_3);                 // scope 0 at src/parser.rs:85:22: 87:44
        StorageLive(_4);                 // scope 0 at src/parser.rs:85:22: 86:45
        StorageLive(_5);                 // scope 0 at src/parser.rs:85:22: 86:45
        StorageLive(_6);                 // scope 0 at src/parser.rs:85:22: 85:43
        StorageLive(_7);                 // scope 0 at src/parser.rs:85:22: 85:43
        StorageLive(_8);                 // scope 0 at src/parser.rs:85:26: 85:42
        discriminant(_8) = 12;           // scope 0 at src/parser.rs:85:26: 85:42
        _7 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _8) -> bb1; // scope 0 at src/parser.rs:85:22: 85:43
                                         // mir::Constant
                                         // + span: src/parser.rs:85:22: 85:25
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = &_7;                        // scope 0 at src/parser.rs:85:22: 85:43
        StorageDead(_8);                 // scope 0 at src/parser.rs:85:42: 85:43
        StorageLive(_9);                 // scope 0 at src/parser.rs:86:21: 86:44
        StorageLive(_10);                // scope 0 at src/parser.rs:86:31: 86:43
        _9 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>(move _10) -> [return: bb2, unwind: bb10]; // scope 0 at src/parser.rs:86:21: 86:44
                                         // mir::Constant
                                         // + span: src/parser.rs:86:21: 86:30
                                         // + literal: Const { ty: fn([closure@src/parser.rs:86:31: 86:43]) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_10);                // scope 0 at src/parser.rs:86:43: 86:44
        _5 = <LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>(move _6, move _9) -> [return: bb3, unwind: bb10]; // scope 0 at src/parser.rs:85:22: 86:45
                                         // mir::Constant
                                         // + span: src/parser.rs:86:14: 86:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>) -> peruse::parsers::MapParser<<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, <peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]> as peruse::parsers::Parser>::O> {<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _4 = &_5;                        // scope 0 at src/parser.rs:85:22: 86:45
        StorageDead(_9);                 // scope 0 at src/parser.rs:86:44: 86:45
        StorageDead(_6);                 // scope 0 at src/parser.rs:86:44: 86:45
        StorageLive(_11);                // scope 0 at src/parser.rs:87:21: 87:43
        StorageLive(_12);                // scope 0 at src/parser.rs:87:25: 87:42
        discriminant(_12) = 13;          // scope 0 at src/parser.rs:87:25: 87:42
        _11 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _12) -> [return: bb4, unwind: bb9]; // scope 0 at src/parser.rs:87:21: 87:43
                                         // mir::Constant
                                         // + span: src/parser.rs:87:21: 87:24
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_12);                // scope 0 at src/parser.rs:87:42: 87:43
        _3 = <MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block> as peruse::parsers::ParserCombinator>::then_l::<LiteralParser<grammar_lexer::Token>>(move _4, move _11) -> [return: bb5, unwind: bb9]; // scope 0 at src/parser.rs:85:22: 87:44
                                         // mir::Constant
                                         // + span: src/parser.rs:87:14: 87:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>) -> peruse::parsers::MapParser<<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, <peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block> as peruse::parsers::Parser>::O> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block> as peruse::parsers::ParserCombinator>::then_l::<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_11);                // scope 0 at src/parser.rs:87:43: 87:44
        StorageDead(_4);                 // scope 0 at src/parser.rs:87:43: 87:44
        _2 = Box::<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block>, LiteralParser<grammar_lexer::Token>>, grammar::Block>>::new(move _3) -> [return: bb6, unwind: bb9]; // scope 0 at src/parser.rs:85:13: 87:45
                                         // mir::Constant
                                         // + span: src/parser.rs:85:13: 85:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Block>) -> std::boxed::Box<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Block>> {std::boxed::Box::<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:86:31: 86:43]>>, grammar::Block>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Block>>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _1 = move _2 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:85:13: 87:45
        StorageDead(_3);                 // scope 0 at src/parser.rs:87:44: 87:45
        StorageDead(_2);                 // scope 0 at src/parser.rs:87:44: 87:45
        _0 = move _1 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:85:13: 87:45
        drop(_5) -> [return: bb7, unwind: bb10]; // scope 0 at src/parser.rs:88:9: 88:10
    }

    bb7: {
        drop(_7) -> bb8;                 // scope 0 at src/parser.rs:88:9: 88:10
    }

    bb8: {
        StorageDead(_7);                 // scope 0 at src/parser.rs:88:9: 88:10
        StorageDead(_5);                 // scope 0 at src/parser.rs:88:9: 88:10
        StorageDead(_1);                 // scope 0 at src/parser.rs:88:9: 88:10
        return;                          // scope 0 at src/parser.rs:88:10: 88:10
    }

    bb9 (cleanup): {
        drop(_5) -> bb10;                // scope 0 at src/parser.rs:88:9: 88:10
    }

    bb10 (cleanup): {
        drop(_7) -> bb11;                // scope 0 at src/parser.rs:88:9: 88:10
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at src/parser.rs:84:9: 88:10
    }
}

fn grammar::<impl at src/grammar.rs:59:10: 59:15>::fmt(_1: &grammar::Comparator, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/grammar.rs:59:10: 59:15
    debug f => _2;                       // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _3: (&grammar::Comparator,); // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _4: &grammar::Comparator;    // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _5: isize;                   // in scope 0 at src/grammar.rs:59:10: 59:15
    let _6: &mut std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _7: std::fmt::DebugTuple;    // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _8: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _9: &str;                    // in scope 0 at src/grammar.rs:59:10: 59:15
    let _10: &str;                       // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _11: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:59:10: 59:15
    let _12: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _13: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _14: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _15: &str;                   // in scope 0 at src/grammar.rs:59:10: 59:15
    let _16: &str;                       // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _17: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:59:10: 59:15
    let _18: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _19: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _20: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _21: &str;                   // in scope 0 at src/grammar.rs:59:10: 59:15
    let _22: &str;                       // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _23: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:59:10: 59:15
    let _24: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _25: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _26: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _27: &str;                   // in scope 0 at src/grammar.rs:59:10: 59:15
    let _28: &str;                       // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _29: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:59:10: 59:15
    let _30: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _31: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _32: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _33: &str;                   // in scope 0 at src/grammar.rs:59:10: 59:15
    let _34: &str;                       // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _35: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:59:10: 59:15
    let _36: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _37: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _38: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _39: &str;                   // in scope 0 at src/grammar.rs:59:10: 59:15
    let _40: &str;                       // in scope 0 at src/grammar.rs:59:10: 59:15
    let mut _41: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:59:10: 59:15
    scope 1 {
        debug debug_trait_builder => _6; // in scope 1 at src/grammar.rs:59:10: 59:15
    }
    scope 2 {
        debug debug_trait_builder => _12; // in scope 2 at src/grammar.rs:59:10: 59:15
    }
    scope 3 {
        debug debug_trait_builder => _18; // in scope 3 at src/grammar.rs:59:10: 59:15
    }
    scope 4 {
        debug debug_trait_builder => _24; // in scope 4 at src/grammar.rs:59:10: 59:15
    }
    scope 5 {
        debug debug_trait_builder => _30; // in scope 5 at src/grammar.rs:59:10: 59:15
    }
    scope 6 {
        debug debug_trait_builder => _36; // in scope 6 at src/grammar.rs:59:10: 59:15
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_4);                 // scope 0 at src/grammar.rs:59:10: 59:15
        _4 = _1;                         // scope 0 at src/grammar.rs:59:10: 59:15
        (_3.0: &grammar::Comparator) = move _4; // scope 0 at src/grammar.rs:59:10: 59:15
        StorageDead(_4);                 // scope 0 at src/grammar.rs:59:14: 59:15
        _5 = discriminant((*(_3.0: &grammar::Comparator))); // scope 0 at src/grammar.rs:59:10: 59:15
        switchInt(move _5) -> [0_isize: bb3, 1_isize: bb6, 2_isize: bb9, 3_isize: bb12, 4_isize: bb15, 5_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar.rs:59:10: 59:15
    }

    bb1: {
        StorageLive(_36);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_37);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_38);                // scope 0 at src/grammar.rs:59:10: 59:15
        _38 = &mut (*_2);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_39);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_40);                // scope 0 at src/grammar.rs:59:10: 59:15
        _40 = const "CLeq";              // scope 0 at src/grammar.rs:59:10: 59:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 76, 101, 113], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 76, 101, 113], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
        _39 = _40;                       // scope 0 at src/grammar.rs:59:10: 59:15
        _37 = Formatter::debug_tuple(move _38, move _39) -> bb18; // scope 0 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar.rs:59:10: 59:15
    }

    bb3: {
        StorageLive(_6);                 // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_7);                 // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_8);                 // scope 0 at src/grammar.rs:59:10: 59:15
        _8 = &mut (*_2);                 // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_9);                 // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_10);                // scope 0 at src/grammar.rs:59:10: 59:15
        _10 = const "CEq";               // scope 0 at src/grammar.rs:59:10: 59:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 69, 113], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 69, 113], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 }) }
        _9 = _10;                        // scope 0 at src/grammar.rs:59:10: 59:15
        _7 = Formatter::debug_tuple(move _8, move _9) -> bb4; // scope 0 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_9);                 // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_8);                 // scope 0 at src/grammar.rs:59:14: 59:15
        _6 = &mut _7;                    // scope 0 at src/grammar.rs:59:10: 59:15
        StorageDead(_10);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageLive(_11);                // scope 1 at src/grammar.rs:59:10: 59:15
        _11 = &mut (*_6);                // scope 1 at src/grammar.rs:59:10: 59:15
        _0 = DebugTuple::finish(move _11) -> bb5; // scope 1 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_11);                // scope 1 at src/grammar.rs:59:14: 59:15
        StorageDead(_7);                 // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_6);                 // scope 0 at src/grammar.rs:59:14: 59:15
        goto -> bb20;                    // scope 0 at src/grammar.rs:59:14: 59:15
    }

    bb6: {
        StorageLive(_12);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_13);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_14);                // scope 0 at src/grammar.rs:59:10: 59:15
        _14 = &mut (*_2);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_15);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_16);                // scope 0 at src/grammar.rs:59:10: 59:15
        _16 = const "CGt";               // scope 0 at src/grammar.rs:59:10: 59:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 71, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 71, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 }) }
        _15 = _16;                       // scope 0 at src/grammar.rs:59:10: 59:15
        _13 = Formatter::debug_tuple(move _14, move _15) -> bb7; // scope 0 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_15);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_14);                // scope 0 at src/grammar.rs:59:14: 59:15
        _12 = &mut _13;                  // scope 0 at src/grammar.rs:59:10: 59:15
        StorageDead(_16);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageLive(_17);                // scope 2 at src/grammar.rs:59:10: 59:15
        _17 = &mut (*_12);               // scope 2 at src/grammar.rs:59:10: 59:15
        _0 = DebugTuple::finish(move _17) -> bb8; // scope 2 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_17);                // scope 2 at src/grammar.rs:59:14: 59:15
        StorageDead(_13);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_12);                // scope 0 at src/grammar.rs:59:14: 59:15
        goto -> bb20;                    // scope 0 at src/grammar.rs:59:14: 59:15
    }

    bb9: {
        StorageLive(_18);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_19);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_20);                // scope 0 at src/grammar.rs:59:10: 59:15
        _20 = &mut (*_2);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_21);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_22);                // scope 0 at src/grammar.rs:59:10: 59:15
        _22 = const "CLt";               // scope 0 at src/grammar.rs:59:10: 59:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 76, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 76, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 }) }
        _21 = _22;                       // scope 0 at src/grammar.rs:59:10: 59:15
        _19 = Formatter::debug_tuple(move _20, move _21) -> bb10; // scope 0 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_21);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_20);                // scope 0 at src/grammar.rs:59:14: 59:15
        _18 = &mut _19;                  // scope 0 at src/grammar.rs:59:10: 59:15
        StorageDead(_22);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageLive(_23);                // scope 3 at src/grammar.rs:59:10: 59:15
        _23 = &mut (*_18);               // scope 3 at src/grammar.rs:59:10: 59:15
        _0 = DebugTuple::finish(move _23) -> bb11; // scope 3 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_23);                // scope 3 at src/grammar.rs:59:14: 59:15
        StorageDead(_19);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_18);                // scope 0 at src/grammar.rs:59:14: 59:15
        goto -> bb20;                    // scope 0 at src/grammar.rs:59:14: 59:15
    }

    bb12: {
        StorageLive(_24);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_25);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_26);                // scope 0 at src/grammar.rs:59:10: 59:15
        _26 = &mut (*_2);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_27);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_28);                // scope 0 at src/grammar.rs:59:10: 59:15
        _28 = const "CNeq";              // scope 0 at src/grammar.rs:59:10: 59:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 78, 101, 113], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 78, 101, 113], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
        _27 = _28;                       // scope 0 at src/grammar.rs:59:10: 59:15
        _25 = Formatter::debug_tuple(move _26, move _27) -> bb13; // scope 0 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_27);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_26);                // scope 0 at src/grammar.rs:59:14: 59:15
        _24 = &mut _25;                  // scope 0 at src/grammar.rs:59:10: 59:15
        StorageDead(_28);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageLive(_29);                // scope 4 at src/grammar.rs:59:10: 59:15
        _29 = &mut (*_24);               // scope 4 at src/grammar.rs:59:10: 59:15
        _0 = DebugTuple::finish(move _29) -> bb14; // scope 4 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_29);                // scope 4 at src/grammar.rs:59:14: 59:15
        StorageDead(_25);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_24);                // scope 0 at src/grammar.rs:59:14: 59:15
        goto -> bb20;                    // scope 0 at src/grammar.rs:59:14: 59:15
    }

    bb15: {
        StorageLive(_30);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_31);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_32);                // scope 0 at src/grammar.rs:59:10: 59:15
        _32 = &mut (*_2);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_33);                // scope 0 at src/grammar.rs:59:10: 59:15
        StorageLive(_34);                // scope 0 at src/grammar.rs:59:10: 59:15
        _34 = const "CGeq";              // scope 0 at src/grammar.rs:59:10: 59:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 71, 101, 113], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 71, 101, 113], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
        _33 = _34;                       // scope 0 at src/grammar.rs:59:10: 59:15
        _31 = Formatter::debug_tuple(move _32, move _33) -> bb16; // scope 0 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_33);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_32);                // scope 0 at src/grammar.rs:59:14: 59:15
        _30 = &mut _31;                  // scope 0 at src/grammar.rs:59:10: 59:15
        StorageDead(_34);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageLive(_35);                // scope 5 at src/grammar.rs:59:10: 59:15
        _35 = &mut (*_30);               // scope 5 at src/grammar.rs:59:10: 59:15
        _0 = DebugTuple::finish(move _35) -> bb17; // scope 5 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_35);                // scope 5 at src/grammar.rs:59:14: 59:15
        StorageDead(_31);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_30);                // scope 0 at src/grammar.rs:59:14: 59:15
        goto -> bb20;                    // scope 0 at src/grammar.rs:59:14: 59:15
    }

    bb18: {
        StorageDead(_39);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_38);                // scope 0 at src/grammar.rs:59:14: 59:15
        _36 = &mut _37;                  // scope 0 at src/grammar.rs:59:10: 59:15
        StorageDead(_40);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageLive(_41);                // scope 6 at src/grammar.rs:59:10: 59:15
        _41 = &mut (*_36);               // scope 6 at src/grammar.rs:59:10: 59:15
        _0 = DebugTuple::finish(move _41) -> bb19; // scope 6 at src/grammar.rs:59:10: 59:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:59:10: 59:15
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_41);                // scope 6 at src/grammar.rs:59:14: 59:15
        StorageDead(_37);                // scope 0 at src/grammar.rs:59:14: 59:15
        StorageDead(_36);                // scope 0 at src/grammar.rs:59:14: 59:15
        goto -> bb20;                    // scope 0 at src/grammar.rs:59:14: 59:15
    }

    bb20: {
        StorageDead(_3);                 // scope 0 at src/grammar.rs:59:14: 59:15
        return;                          // scope 0 at src/grammar.rs:59:15: 59:15
    }
}

fn expression::{closure#5}(_1: &[closure@src/parser.rs:50:70: 61:14], _2: (grammar::Expr, Vec<(grammar::AddOp, grammar::Expr)>)) -> grammar::Expr {
    let mut _0: grammar::Expr;           // return place in scope 0 at src/parser.rs:50:85: 50:85
    let _3: grammar::Expr;               // in scope 0 at src/parser.rs:50:72: 50:77
    let _4: std::vec::Vec<(grammar::AddOp, grammar::Expr)>; // in scope 0 at src/parser.rs:50:79: 50:82
    let _6: ();                          // in scope 0 at src/parser.rs:52:21: 52:59
    let mut _7: &mut std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/parser.rs:52:21: 52:24
    let mut _8: grammar::AddTerm;        // in scope 0 at src/parser.rs:52:30: 52:58
    let mut _9: grammar::Expr;           // in scope 0 at src/parser.rs:52:52: 52:57
    let mut _10: std::slice::Iter<(grammar::AddOp, grammar::Expr)>; // in scope 0 at src/parser.rs:53:49: 53:59
    let mut _11: std::slice::Iter<(grammar::AddOp, grammar::Expr)>; // in scope 0 at src/parser.rs:53:49: 53:59
    let mut _12: &[(grammar::AddOp, grammar::Expr)]; // in scope 0 at src/parser.rs:53:49: 53:52
    let _13: &[(grammar::AddOp, grammar::Expr)]; // in scope 0 at src/parser.rs:53:49: 53:59
    let mut _14: &std::vec::Vec<(grammar::AddOp, grammar::Expr)>; // in scope 0 at src/parser.rs:53:49: 53:52
    let mut _17: std::option::Option<&(grammar::AddOp, grammar::Expr)>; // in scope 0 at src/parser.rs:53:49: 53:59
    let mut _18: &mut std::slice::Iter<(grammar::AddOp, grammar::Expr)>; // in scope 0 at src/parser.rs:53:49: 53:59
    let mut _19: &mut std::slice::Iter<(grammar::AddOp, grammar::Expr)>; // in scope 0 at src/parser.rs:53:49: 53:59
    let mut _20: isize;                  // in scope 0 at src/parser.rs:53:25: 53:45
    let mut _22: &(grammar::AddOp, grammar::Expr); // in scope 0 at src/parser.rs:53:25: 53:45
    let _25: ();                         // in scope 0 at src/parser.rs:54:25: 54:69
    let mut _26: &mut std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/parser.rs:54:25: 54:28
    let mut _27: grammar::AddTerm;       // in scope 0 at src/parser.rs:54:34: 54:68
    let mut _28: grammar::AddOp;         // in scope 0 at src/parser.rs:54:42: 54:52
    let mut _29: &grammar::AddOp;        // in scope 0 at src/parser.rs:54:42: 54:44
    let mut _30: grammar::Expr;          // in scope 0 at src/parser.rs:54:54: 54:67
    let mut _31: &grammar::Expr;         // in scope 0 at src/parser.rs:54:54: 54:59
    let mut _32: usize;                  // in scope 0 at src/parser.rs:56:24: 56:33
    let mut _33: &std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/parser.rs:56:24: 56:27
    let mut _34: &grammar::Expr;         // in scope 0 at src/parser.rs:57:25: 57:33
    let _35: &grammar::AddTerm;          // in scope 0 at src/parser.rs:57:25: 57:31
    let mut _36: &std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/parser.rs:57:25: 57:28
    let mut _37: std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/parser.rs:59:38: 59:41
    let mut _38: bool;                   // in scope 0 at src/parser.rs:61:13: 61:14
    let mut _39: bool;                   // in scope 0 at src/parser.rs:61:13: 61:14
    scope 1 {
        debug first => _3;               // in scope 1 at src/parser.rs:50:72: 50:77
        debug seq => _4;                 // in scope 1 at src/parser.rs:50:79: 50:82
        let mut _5: std::vec::Vec<grammar::AddTerm>; // in scope 1 at src/parser.rs:51:21: 51:28
        scope 2 {
            debug ops => _5;             // in scope 2 at src/parser.rs:51:21: 51:28
            let mut _15: std::slice::Iter<(grammar::AddOp, grammar::Expr)>; // in scope 2 at src/parser.rs:53:49: 53:59
            scope 3 {
                debug iter => _15;       // in scope 3 at src/parser.rs:53:49: 53:59
                let mut _16: &(grammar::AddOp, grammar::Expr); // in scope 3 at src/parser.rs:53:49: 53:59
                scope 4 {
                    debug __next => _16; // in scope 4 at src/parser.rs:53:49: 53:59
                    let _21: &(grammar::AddOp, grammar::Expr); // in scope 4 at src/parser.rs:53:25: 53:45
                    let _23: &grammar::AddOp; // in scope 4 at src/parser.rs:53:27: 53:33
                    let _24: &grammar::Expr; // in scope 4 at src/parser.rs:53:35: 53:44
                    scope 5 {
                        debug val => _21; // in scope 5 at src/parser.rs:53:25: 53:45
                    }
                    scope 6 {
                        debug op => _23; // in scope 6 at src/parser.rs:53:27: 53:33
                        debug value => _24; // in scope 6 at src/parser.rs:53:35: 53:44
                    }
                }
            }
        }
    }

    bb0: {
        _38 = const false;               // scope 0 at src/parser.rs:50:72: 50:77
        _39 = const false;               // scope 0 at src/parser.rs:50:72: 50:77
        StorageLive(_3);                 // scope 0 at src/parser.rs:50:72: 50:77
        _39 = const true;                // scope 0 at src/parser.rs:50:72: 50:77
        _3 = move (_2.0: grammar::Expr); // scope 0 at src/parser.rs:50:72: 50:77
        StorageLive(_4);                 // scope 0 at src/parser.rs:50:79: 50:82
        _4 = move (_2.1: std::vec::Vec<(grammar::AddOp, grammar::Expr)>); // scope 0 at src/parser.rs:50:79: 50:82
        StorageLive(_5);                 // scope 1 at src/parser.rs:51:21: 51:28
        _5 = Vec::<grammar::AddTerm>::new() -> [return: bb1, unwind: bb23]; // scope 1 at src/parser.rs:51:31: 51:41
                                         // mir::Constant
                                         // + span: src/parser.rs:51:31: 51:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> std::vec::Vec<grammar::AddTerm> {std::vec::Vec::<grammar::AddTerm>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _38 = const true;                // scope 2 at src/parser.rs:52:21: 52:59
        StorageLive(_6);                 // scope 2 at src/parser.rs:52:21: 52:59
        StorageLive(_7);                 // scope 2 at src/parser.rs:52:21: 52:24
        _7 = &mut _5;                    // scope 2 at src/parser.rs:52:21: 52:24
        StorageLive(_8);                 // scope 2 at src/parser.rs:52:30: 52:58
        StorageLive(_9);                 // scope 2 at src/parser.rs:52:52: 52:57
        _39 = const false;               // scope 2 at src/parser.rs:52:52: 52:57
        _9 = move _3;                    // scope 2 at src/parser.rs:52:52: 52:57
        (_8.0: grammar::AddOp) = const grammar::AddOp::Start; // scope 2 at src/parser.rs:52:30: 52:58
                                         // ty::Const
                                         // + ty: grammar::AddOp
                                         // + val: Value(Scalar(0x02))
                                         // mir::Constant
                                         // + span: src/parser.rs:52:30: 52:58
                                         // + literal: Const { ty: grammar::AddOp, val: Value(Scalar(0x02)) }
        (_8.1: grammar::Expr) = move _9; // scope 2 at src/parser.rs:52:30: 52:58
        StorageDead(_9);                 // scope 2 at src/parser.rs:52:57: 52:58
        _6 = Vec::<grammar::AddTerm>::push(move _7, move _8) -> [return: bb2, unwind: bb22]; // scope 2 at src/parser.rs:52:21: 52:59
                                         // mir::Constant
                                         // + span: src/parser.rs:52:25: 52:29
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<grammar::AddTerm>, grammar::AddTerm) {std::vec::Vec::<grammar::AddTerm>::push}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_8);                 // scope 2 at src/parser.rs:52:58: 52:59
        StorageDead(_7);                 // scope 2 at src/parser.rs:52:58: 52:59
        StorageDead(_6);                 // scope 2 at src/parser.rs:52:59: 52:60
        StorageLive(_10);                // scope 2 at src/parser.rs:53:49: 53:59
        StorageLive(_11);                // scope 2 at src/parser.rs:53:49: 53:59
        StorageLive(_12);                // scope 2 at src/parser.rs:53:49: 53:52
        StorageLive(_13);                // scope 2 at src/parser.rs:53:49: 53:59
        StorageLive(_14);                // scope 2 at src/parser.rs:53:49: 53:52
        _14 = &_4;                       // scope 2 at src/parser.rs:53:49: 53:52
        _13 = <Vec<(grammar::AddOp, grammar::Expr)> as Deref>::deref(move _14) -> [return: bb3, unwind: bb22]; // scope 2 at src/parser.rs:53:49: 53:59
                                         // mir::Constant
                                         // + span: src/parser.rs:53:49: 53:59
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<(grammar::AddOp, grammar::Expr)>) -> &'r <std::vec::Vec<(grammar::AddOp, grammar::Expr)> as std::ops::Deref>::Target {<std::vec::Vec<(grammar::AddOp, grammar::Expr)> as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _12 = _13;                       // scope 2 at src/parser.rs:53:49: 53:52
        StorageDead(_14);                // scope 2 at src/parser.rs:53:51: 53:52
        _11 = core::slice::<impl [(grammar::AddOp, grammar::Expr)]>::iter(move _12) -> [return: bb4, unwind: bb22]; // scope 2 at src/parser.rs:53:49: 53:59
                                         // mir::Constant
                                         // + span: src/parser.rs:53:53: 53:57
                                         // + literal: Const { ty: for<'r> fn(&'r [(grammar::AddOp, grammar::Expr)]) -> std::slice::Iter<'r, (grammar::AddOp, grammar::Expr)> {core::slice::<impl [(grammar::AddOp, grammar::Expr)]>::iter}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_12);                // scope 2 at src/parser.rs:53:58: 53:59
        _10 = <std::slice::Iter<(grammar::AddOp, grammar::Expr)> as IntoIterator>::into_iter(move _11) -> [return: bb5, unwind: bb22]; // scope 2 at src/parser.rs:53:49: 53:59
                                         // mir::Constant
                                         // + span: src/parser.rs:53:49: 53:59
                                         // + literal: Const { ty: fn(std::slice::Iter<(grammar::AddOp, grammar::Expr)>) -> <std::slice::Iter<(grammar::AddOp, grammar::Expr)> as std::iter::IntoIterator>::IntoIter {<std::slice::Iter<(grammar::AddOp, grammar::Expr)> as std::iter::IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_11);                // scope 2 at src/parser.rs:53:58: 53:59
        StorageLive(_15);                // scope 2 at src/parser.rs:53:49: 53:59
        _15 = move _10;                  // scope 2 at src/parser.rs:53:49: 53:59
        goto -> bb6;                     // scope 3 at src/parser.rs:53:21: 55:22
    }

    bb6: {
        StorageLive(_16);                // scope 3 at src/parser.rs:53:49: 53:59
        StorageLive(_17);                // scope 4 at src/parser.rs:53:49: 53:59
        StorageLive(_18);                // scope 4 at src/parser.rs:53:49: 53:59
        StorageLive(_19);                // scope 4 at src/parser.rs:53:49: 53:59
        _19 = &mut _15;                  // scope 4 at src/parser.rs:53:49: 53:59
        _18 = &mut (*_19);               // scope 4 at src/parser.rs:53:49: 53:59
        _17 = <std::slice::Iter<(grammar::AddOp, grammar::Expr)> as Iterator>::next(move _18) -> [return: bb7, unwind: bb22]; // scope 4 at src/parser.rs:53:49: 53:59
                                         // mir::Constant
                                         // + span: src/parser.rs:53:49: 53:59
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<(grammar::AddOp, grammar::Expr)>) -> std::option::Option<<std::slice::Iter<(grammar::AddOp, grammar::Expr)> as std::iter::Iterator>::Item> {<std::slice::Iter<(grammar::AddOp, grammar::Expr)> as std::iter::Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_18);                // scope 4 at src/parser.rs:53:58: 53:59
        _20 = discriminant(_17);         // scope 4 at src/parser.rs:53:49: 53:59
        switchInt(move _20) -> [0_isize: bb8, 1_isize: bb10, otherwise: bb9]; // scope 4 at src/parser.rs:53:49: 53:59
    }

    bb8: {
        StorageDead(_19);                // scope 4 at src/parser.rs:53:58: 53:59
        StorageDead(_17);                // scope 4 at src/parser.rs:53:58: 53:59
        StorageDead(_16);                // scope 3 at src/parser.rs:55:21: 55:22
        StorageDead(_15);                // scope 2 at src/parser.rs:55:21: 55:22
        StorageDead(_13);                // scope 2 at src/parser.rs:53:58: 53:59
        StorageDead(_10);                // scope 2 at src/parser.rs:53:58: 53:59
        StorageLive(_32);                // scope 2 at src/parser.rs:56:24: 56:33
        StorageLive(_33);                // scope 2 at src/parser.rs:56:24: 56:27
        _33 = &_5;                       // scope 2 at src/parser.rs:56:24: 56:27
        _32 = Vec::<grammar::AddTerm>::len(move _33) -> [return: bb14, unwind: bb22]; // scope 2 at src/parser.rs:56:24: 56:33
                                         // mir::Constant
                                         // + span: src/parser.rs:56:28: 56:31
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<grammar::AddTerm>) -> usize {std::vec::Vec::<grammar::AddTerm>::len}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        unreachable;                     // scope 4 at src/parser.rs:53:49: 53:59
    }

    bb10: {
        StorageLive(_21);                // scope 4 at src/parser.rs:53:25: 53:45
        _21 = ((_17 as Some).0: &(grammar::AddOp, grammar::Expr)); // scope 4 at src/parser.rs:53:25: 53:45
        StorageLive(_22);                // scope 5 at src/parser.rs:53:25: 53:45
        _22 = _21;                       // scope 5 at src/parser.rs:53:25: 53:45
        _16 = move _22;                  // scope 5 at src/parser.rs:53:25: 53:45
        StorageDead(_22);                // scope 5 at src/parser.rs:53:44: 53:45
        StorageDead(_21);                // scope 4 at src/parser.rs:53:44: 53:45
        StorageDead(_19);                // scope 4 at src/parser.rs:53:58: 53:59
        StorageDead(_17);                // scope 4 at src/parser.rs:53:58: 53:59
        StorageLive(_23);                // scope 4 at src/parser.rs:53:27: 53:33
        _23 = &((*_16).0: grammar::AddOp); // scope 4 at src/parser.rs:53:27: 53:33
        StorageLive(_24);                // scope 4 at src/parser.rs:53:35: 53:44
        _24 = &((*_16).1: grammar::Expr); // scope 4 at src/parser.rs:53:35: 53:44
        StorageLive(_25);                // scope 6 at src/parser.rs:54:25: 54:69
        StorageLive(_26);                // scope 6 at src/parser.rs:54:25: 54:28
        _26 = &mut _5;                   // scope 6 at src/parser.rs:54:25: 54:28
        StorageLive(_27);                // scope 6 at src/parser.rs:54:34: 54:68
        StorageLive(_28);                // scope 6 at src/parser.rs:54:42: 54:52
        StorageLive(_29);                // scope 6 at src/parser.rs:54:42: 54:44
        _29 = _23;                       // scope 6 at src/parser.rs:54:42: 54:44
        _28 = <grammar::AddOp as Clone>::clone(move _29) -> [return: bb11, unwind: bb22]; // scope 6 at src/parser.rs:54:42: 54:52
                                         // mir::Constant
                                         // + span: src/parser.rs:54:45: 54:50
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::AddOp) -> grammar::AddOp {<grammar::AddOp as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_29);                // scope 6 at src/parser.rs:54:51: 54:52
        StorageLive(_30);                // scope 6 at src/parser.rs:54:54: 54:67
        StorageLive(_31);                // scope 6 at src/parser.rs:54:54: 54:59
        _31 = _24;                       // scope 6 at src/parser.rs:54:54: 54:59
        _30 = <grammar::Expr as Clone>::clone(move _31) -> [return: bb12, unwind: bb22]; // scope 6 at src/parser.rs:54:54: 54:67
                                         // mir::Constant
                                         // + span: src/parser.rs:54:60: 54:65
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_31);                // scope 6 at src/parser.rs:54:66: 54:67
        (_27.0: grammar::AddOp) = move _28; // scope 6 at src/parser.rs:54:34: 54:68
        (_27.1: grammar::Expr) = move _30; // scope 6 at src/parser.rs:54:34: 54:68
        StorageDead(_30);                // scope 6 at src/parser.rs:54:67: 54:68
        StorageDead(_28);                // scope 6 at src/parser.rs:54:67: 54:68
        _25 = Vec::<grammar::AddTerm>::push(move _26, move _27) -> [return: bb13, unwind: bb22]; // scope 6 at src/parser.rs:54:25: 54:69
                                         // mir::Constant
                                         // + span: src/parser.rs:54:29: 54:33
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<grammar::AddTerm>, grammar::AddTerm) {std::vec::Vec::<grammar::AddTerm>::push}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_27);                // scope 6 at src/parser.rs:54:68: 54:69
        StorageDead(_26);                // scope 6 at src/parser.rs:54:68: 54:69
        StorageDead(_25);                // scope 6 at src/parser.rs:54:69: 54:70
        StorageDead(_24);                // scope 4 at src/parser.rs:55:21: 55:22
        StorageDead(_23);                // scope 4 at src/parser.rs:55:21: 55:22
        StorageDead(_16);                // scope 3 at src/parser.rs:55:21: 55:22
        goto -> bb6;                     // scope 3 at src/parser.rs:53:21: 55:22
    }

    bb14: {
        StorageDead(_33);                // scope 2 at src/parser.rs:56:32: 56:33
        switchInt(move _32) -> [1_usize: bb15, otherwise: bb18]; // scope 2 at src/parser.rs:56:24: 56:38
    }

    bb15: {
        StorageDead(_32);                // scope 2 at src/parser.rs:56:24: 56:38
        StorageLive(_34);                // scope 2 at src/parser.rs:57:25: 57:33
        StorageLive(_35);                // scope 2 at src/parser.rs:57:25: 57:31
        StorageLive(_36);                // scope 2 at src/parser.rs:57:25: 57:28
        _36 = &_5;                       // scope 2 at src/parser.rs:57:25: 57:28
        _35 = <Vec<grammar::AddTerm> as Index<usize>>::index(move _36, const 0_usize) -> [return: bb16, unwind: bb22]; // scope 2 at src/parser.rs:57:25: 57:31
                                         // mir::Constant
                                         // + span: src/parser.rs:57:25: 57:31
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<grammar::AddTerm>, usize) -> &'r <std::vec::Vec<grammar::AddTerm> as std::ops::Index<usize>>::Output {<std::vec::Vec<grammar::AddTerm> as std::ops::Index<usize>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_36);                // scope 2 at src/parser.rs:57:30: 57:31
        _34 = &((*_35).1: grammar::Expr); // scope 2 at src/parser.rs:57:25: 57:33
        _0 = <grammar::Expr as Clone>::clone(move _34) -> [return: bb17, unwind: bb22]; // scope 2 at src/parser.rs:57:25: 57:41
                                         // mir::Constant
                                         // + span: src/parser.rs:57:34: 57:39
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_34);                // scope 2 at src/parser.rs:57:40: 57:41
        StorageDead(_35);                // scope 2 at src/parser.rs:58:21: 58:22
        goto -> bb19;                    // scope 2 at src/parser.rs:56:21: 60:22
    }

    bb18: {
        StorageDead(_32);                // scope 2 at src/parser.rs:56:24: 56:38
        StorageLive(_37);                // scope 2 at src/parser.rs:59:38: 59:41
        _38 = const false;               // scope 2 at src/parser.rs:59:38: 59:41
        _37 = move _5;                   // scope 2 at src/parser.rs:59:38: 59:41
        ((_0 as AddSub).0: std::vec::Vec<grammar::AddTerm>) = move _37; // scope 2 at src/parser.rs:59:25: 59:42
        discriminant(_0) = 2;            // scope 2 at src/parser.rs:59:25: 59:42
        StorageDead(_37);                // scope 2 at src/parser.rs:59:41: 59:42
        goto -> bb19;                    // scope 2 at src/parser.rs:56:21: 60:22
    }

    bb19: {
        switchInt(_38) -> [false: bb20, otherwise: bb25]; // scope 1 at src/parser.rs:61:13: 61:14
    }

    bb20: {
        _38 = const false;               // scope 1 at src/parser.rs:61:13: 61:14
        StorageDead(_5);                 // scope 1 at src/parser.rs:61:13: 61:14
        drop(_4) -> [return: bb21, unwind: bb27]; // scope 0 at src/parser.rs:61:13: 61:14
    }

    bb21: {
        StorageDead(_4);                 // scope 0 at src/parser.rs:61:13: 61:14
        _39 = const false;               // scope 0 at src/parser.rs:61:13: 61:14
        StorageDead(_3);                 // scope 0 at src/parser.rs:61:13: 61:14
        return;                          // scope 0 at src/parser.rs:61:14: 61:14
    }

    bb22 (cleanup): {
        drop(_5) -> bb23;                // scope 1 at src/parser.rs:61:13: 61:14
    }

    bb23 (cleanup): {
        drop(_4) -> bb27;                // scope 0 at src/parser.rs:61:13: 61:14
    }

    bb24 (cleanup): {
        resume;                          // scope 0 at src/parser.rs:50:70: 61:14
    }

    bb25: {
        drop(_5) -> [return: bb20, unwind: bb23]; // scope 1 at src/parser.rs:61:13: 61:14
    }

    bb26 (cleanup): {
        drop(_3) -> bb24;                // scope 0 at src/parser.rs:61:13: 61:14
    }

    bb27 (cleanup): {
        switchInt(_39) -> [false: bb24, otherwise: bb26]; // scope 0 at src/parser.rs:61:13: 61:14
    }
}

fn grammar::<impl at src/grammar.rs:23:10: 23:19>::ne(_1: &grammar::AddTerm, _2: &grammar::AddTerm) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:23:10: 23:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:23:10: 23:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:23:10: 23:19
    let _3: &grammar::AddOp;             // in scope 0 at src/grammar.rs:24:20: 24:29
    let _4: &grammar::Expr;              // in scope 0 at src/grammar.rs:24:31: 24:39
    let mut _7: bool;                    // in scope 0 at src/grammar.rs:24:20: 24:29
    let mut _8: &grammar::AddOp;         // in scope 0 at src/grammar.rs:24:20: 24:29
    let mut _9: &grammar::AddOp;         // in scope 0 at src/grammar.rs:24:20: 24:29
    let mut _10: bool;                   // in scope 0 at src/grammar.rs:24:31: 24:39
    let mut _11: &grammar::Expr;         // in scope 0 at src/grammar.rs:24:31: 24:39
    let mut _12: &grammar::Expr;         // in scope 0 at src/grammar.rs:24:31: 24:39
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at src/grammar.rs:24:20: 24:29
        debug __self_1_1 => _4;          // in scope 1 at src/grammar.rs:24:31: 24:39
        let _5: &grammar::AddOp;         // in scope 1 at src/grammar.rs:24:20: 24:29
        let _6: &grammar::Expr;          // in scope 1 at src/grammar.rs:24:31: 24:39
        scope 2 {
            debug __self_0_0 => _5;      // in scope 2 at src/grammar.rs:24:20: 24:29
            debug __self_0_1 => _6;      // in scope 2 at src/grammar.rs:24:31: 24:39
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:24:20: 24:29
        _3 = &((*_2).0: grammar::AddOp); // scope 0 at src/grammar.rs:24:20: 24:29
        StorageLive(_4);                 // scope 0 at src/grammar.rs:24:31: 24:39
        _4 = &((*_2).1: grammar::Expr);  // scope 0 at src/grammar.rs:24:31: 24:39
        StorageLive(_5);                 // scope 1 at src/grammar.rs:24:20: 24:29
        _5 = &((*_1).0: grammar::AddOp); // scope 1 at src/grammar.rs:24:20: 24:29
        StorageLive(_6);                 // scope 1 at src/grammar.rs:24:31: 24:39
        _6 = &((*_1).1: grammar::Expr);  // scope 1 at src/grammar.rs:24:31: 24:39
        StorageLive(_7);                 // scope 2 at src/grammar.rs:24:20: 24:29
        StorageLive(_8);                 // scope 2 at src/grammar.rs:24:20: 24:29
        _8 = _5;                         // scope 2 at src/grammar.rs:24:20: 24:29
        StorageLive(_9);                 // scope 2 at src/grammar.rs:24:20: 24:29
        _9 = _3;                         // scope 2 at src/grammar.rs:24:20: 24:29
        _7 = <grammar::AddOp as PartialEq>::ne(move _8, move _9) -> bb4; // scope 2 at src/grammar.rs:24:20: 24:29
                                         // mir::Constant
                                         // + span: src/grammar.rs:24:20: 24:29
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::AddOp, &'s grammar::AddOp) -> bool {<grammar::AddOp as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = const true;                 // scope 2 at src/grammar.rs:24:31: 24:39
        goto -> bb3;                     // scope 2 at src/grammar.rs:24:31: 24:39
    }

    bb2: {
        StorageLive(_10);                // scope 2 at src/grammar.rs:24:31: 24:39
        StorageLive(_11);                // scope 2 at src/grammar.rs:24:31: 24:39
        _11 = _6;                        // scope 2 at src/grammar.rs:24:31: 24:39
        StorageLive(_12);                // scope 2 at src/grammar.rs:24:31: 24:39
        _12 = _4;                        // scope 2 at src/grammar.rs:24:31: 24:39
        _10 = <grammar::Expr as PartialEq>::ne(move _11, move _12) -> bb5; // scope 2 at src/grammar.rs:24:31: 24:39
                                         // mir::Constant
                                         // + span: src/grammar.rs:24:31: 24:39
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_10);                // scope 2 at src/grammar.rs:24:38: 24:39
        StorageDead(_7);                 // scope 2 at src/grammar.rs:24:38: 24:39
        StorageDead(_6);                 // scope 1 at src/grammar.rs:23:18: 23:19
        StorageDead(_5);                 // scope 1 at src/grammar.rs:23:18: 23:19
        StorageDead(_4);                 // scope 0 at src/grammar.rs:23:18: 23:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:23:18: 23:19
        return;                          // scope 0 at src/grammar.rs:23:19: 23:19
    }

    bb4: {
        StorageDead(_9);                 // scope 2 at src/grammar.rs:24:28: 24:29
        StorageDead(_8);                 // scope 2 at src/grammar.rs:24:28: 24:29
        switchInt(move _7) -> [false: bb2, otherwise: bb1]; // scope 2 at src/grammar.rs:24:31: 24:39
    }

    bb5: {
        StorageDead(_12);                // scope 2 at src/grammar.rs:24:38: 24:39
        StorageDead(_11);                // scope 2 at src/grammar.rs:24:38: 24:39
        _0 = move _10;                   // scope 2 at src/grammar.rs:24:31: 24:39
        goto -> bb3;                     // scope 2 at src/grammar.rs:24:31: 24:39
    }
}

fn expression::{closure#0}(_1: &[closure@src/parser.rs:10:35: 14:10], _2: grammar_lexer::Token) -> Option<grammar::Expr> {
    debug token => _2;                   // in scope 0 at src/parser.rs:10:36: 10:41
    let mut _0: std::option::Option<grammar::Expr>; // return place in scope 0 at src/parser.rs:10:43: 10:43
    let mut _3: isize;                   // in scope 0 at src/parser.rs:11:13: 11:31
    let _4: std::string::String;         // in scope 0 at src/parser.rs:11:26: 11:30
    let mut _5: grammar::Expr;           // in scope 0 at src/parser.rs:11:40: 11:60
    let mut _6: std::string::String;     // in scope 0 at src/parser.rs:11:55: 11:59
    let _7: i32;                         // in scope 0 at src/parser.rs:12:27: 12:28
    let mut _8: grammar::Expr;           // in scope 0 at src/parser.rs:12:40: 12:52
    let mut _9: i32;                     // in scope 0 at src/parser.rs:12:50: 12:51
    let mut _10: bool;                   // in scope 0 at src/parser.rs:14:9: 14:10
    let mut _11: isize;                  // in scope 0 at src/parser.rs:14:9: 14:10
    scope 1 {
        debug name => _4;                // in scope 1 at src/parser.rs:11:26: 11:30
    }
    scope 2 {
        debug i => _7;                   // in scope 2 at src/parser.rs:12:27: 12:28
    }

    bb0: {
        _10 = const false;               // scope 0 at src/parser.rs:10:49: 10:54
        _10 = const true;                // scope 0 at src/parser.rs:10:49: 10:54
        _3 = discriminant(_2);           // scope 0 at src/parser.rs:10:49: 10:54
        switchInt(move _3) -> [1_isize: bb2, 2_isize: bb3, otherwise: bb1]; // scope 0 at src/parser.rs:10:43: 10:54
    }

    bb1: {
        discriminant(_0) = 0;            // scope 0 at src/parser.rs:13:18: 13:22
        goto -> bb7;                     // scope 0 at src/parser.rs:13:18: 13:22
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at src/parser.rs:11:26: 11:30
        _10 = const false;               // scope 0 at src/parser.rs:11:26: 11:30
        _4 = move ((_2 as Ident).0: std::string::String); // scope 0 at src/parser.rs:11:26: 11:30
        StorageLive(_5);                 // scope 1 at src/parser.rs:11:40: 11:60
        StorageLive(_6);                 // scope 1 at src/parser.rs:11:55: 11:59
        _6 = move _4;                    // scope 1 at src/parser.rs:11:55: 11:59
        ((_5 as Variable).0: std::string::String) = move _6; // scope 1 at src/parser.rs:11:40: 11:60
        discriminant(_5) = 0;            // scope 1 at src/parser.rs:11:40: 11:60
        StorageDead(_6);                 // scope 1 at src/parser.rs:11:59: 11:60
        ((_0 as Some).0: grammar::Expr) = move _5; // scope 1 at src/parser.rs:11:35: 11:61
        discriminant(_0) = 1;            // scope 1 at src/parser.rs:11:35: 11:61
        StorageDead(_5);                 // scope 1 at src/parser.rs:11:60: 11:61
        StorageDead(_4);                 // scope 0 at src/parser.rs:11:60: 11:61
        goto -> bb7;                     // scope 0 at src/parser.rs:11:60: 11:61
    }

    bb3: {
        StorageLive(_7);                 // scope 0 at src/parser.rs:12:27: 12:28
        _7 = ((_2 as Number).0: i32);    // scope 0 at src/parser.rs:12:27: 12:28
        StorageLive(_8);                 // scope 2 at src/parser.rs:12:40: 12:52
        StorageLive(_9);                 // scope 2 at src/parser.rs:12:50: 12:51
        _9 = _7;                         // scope 2 at src/parser.rs:12:50: 12:51
        ((_8 as Num).0: i32) = move _9;  // scope 2 at src/parser.rs:12:40: 12:52
        discriminant(_8) = 1;            // scope 2 at src/parser.rs:12:40: 12:52
        StorageDead(_9);                 // scope 2 at src/parser.rs:12:51: 12:52
        ((_0 as Some).0: grammar::Expr) = move _8; // scope 2 at src/parser.rs:12:35: 12:53
        discriminant(_0) = 1;            // scope 2 at src/parser.rs:12:35: 12:53
        StorageDead(_8);                 // scope 2 at src/parser.rs:12:52: 12:53
        StorageDead(_7);                 // scope 0 at src/parser.rs:12:52: 12:53
        goto -> bb7;                     // scope 0 at src/parser.rs:12:52: 12:53
    }

    bb4: {
        return;                          // scope 0 at src/parser.rs:14:10: 14:10
    }

    bb5: {
        switchInt(_10) -> [false: bb4, otherwise: bb6]; // scope 0 at src/parser.rs:14:9: 14:10
    }

    bb6: {
        drop(((_2 as Ident).0: std::string::String)) -> bb4; // scope 0 at src/parser.rs:14:9: 14:10
    }

    bb7: {
        _11 = discriminant(_2);          // scope 0 at src/parser.rs:14:9: 14:10
        switchInt(move _11) -> [1_isize: bb5, otherwise: bb4]; // scope 0 at src/parser.rs:14:9: 14:10
    }
}

fn grammar::AddTerm(_1: grammar::AddOp, _2: grammar::Expr) -> grammar::AddTerm {
    let mut _0: grammar::AddTerm;        // return place in scope 0 at src/grammar.rs:24:1: 24:41

    bb0: {
        (_0.0: grammar::AddOp) = move _1; // scope 0 at src/grammar.rs:24:1: 24:41
        (_0.1: grammar::Expr) = move _2; // scope 0 at src/grammar.rs:24:1: 24:41
        return;                          // scope 0 at src/grammar.rs:24:1: 24:41
    }
}

// MIR FOR CTFE
fn grammar::AddTerm(_1: grammar::AddOp, _2: grammar::Expr) -> grammar::AddTerm {
    let mut _0: grammar::AddTerm;        // return place in scope 0 at src/grammar.rs:24:1: 24:41

    bb0: {
        (_0.0: grammar::AddOp) = move _1; // scope 0 at src/grammar.rs:24:1: 24:41
        (_0.1: grammar::Expr) = move _2; // scope 0 at src/grammar.rs:24:1: 24:41
        return;                          // scope 0 at src/grammar.rs:24:1: 24:41
    }
}

fn grammar::MultTerm(_1: grammar::MultOp, _2: grammar::Expr) -> grammar::MultTerm {
    let mut _0: grammar::MultTerm;       // return place in scope 0 at src/grammar.rs:29:1: 29:43

    bb0: {
        (_0.0: grammar::MultOp) = move _1; // scope 0 at src/grammar.rs:29:1: 29:43
        (_0.1: grammar::Expr) = move _2; // scope 0 at src/grammar.rs:29:1: 29:43
        return;                          // scope 0 at src/grammar.rs:29:1: 29:43
    }
}

// MIR FOR CTFE
fn grammar::MultTerm(_1: grammar::MultOp, _2: grammar::Expr) -> grammar::MultTerm {
    let mut _0: grammar::MultTerm;       // return place in scope 0 at src/grammar.rs:29:1: 29:43

    bb0: {
        (_0.0: grammar::MultOp) = move _1; // scope 0 at src/grammar.rs:29:1: 29:43
        (_0.1: grammar::Expr) = move _2; // scope 0 at src/grammar.rs:29:1: 29:43
        return;                          // scope 0 at src/grammar.rs:29:1: 29:43
    }
}

fn grammar::<impl at src/grammar.rs:13:10: 13:19>::eq(_1: &grammar::MultOp, _2: &grammar::MultOp) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:13:10: 13:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:13:10: 13:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:13:10: 13:19
    let _3: isize;                       // in scope 0 at src/grammar.rs:13:10: 13:19
    let mut _4: &grammar::MultOp;        // in scope 0 at src/grammar.rs:13:10: 13:19
    let _5: &grammar::MultOp;            // in scope 0 at src/grammar.rs:13:10: 13:19
    let mut _7: &grammar::MultOp;        // in scope 0 at src/grammar.rs:13:10: 13:19
    let _8: &grammar::MultOp;            // in scope 0 at src/grammar.rs:13:10: 13:19
    let mut _9: bool;                    // in scope 0 at src/grammar.rs:13:10: 13:19
    let mut _10: bool;                   // in scope 0 at src/grammar.rs:13:10: 13:19
    let mut _11: isize;                  // in scope 0 at src/grammar.rs:13:10: 13:19
    let mut _12: isize;                  // in scope 0 at src/grammar.rs:13:10: 13:19
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at src/grammar.rs:13:10: 13:19
        let _6: isize;                   // in scope 1 at src/grammar.rs:13:10: 13:19
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at src/grammar.rs:13:10: 13:19
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:13:10: 13:19
        StorageLive(_4);                 // scope 0 at src/grammar.rs:13:10: 13:19
        StorageLive(_5);                 // scope 0 at src/grammar.rs:13:10: 13:19
        _5 = _1;                         // scope 0 at src/grammar.rs:13:10: 13:19
        _4 = _5;                         // scope 0 at src/grammar.rs:13:10: 13:19
        _3 = discriminant((*_4));        // scope 0 at src/grammar.rs:13:10: 13:19
        StorageDead(_4);                 // scope 0 at src/grammar.rs:13:18: 13:19
        StorageDead(_5);                 // scope 0 at src/grammar.rs:13:18: 13:19
        StorageLive(_6);                 // scope 1 at src/grammar.rs:13:10: 13:19
        StorageLive(_7);                 // scope 1 at src/grammar.rs:13:10: 13:19
        StorageLive(_8);                 // scope 1 at src/grammar.rs:13:10: 13:19
        _8 = _2;                         // scope 1 at src/grammar.rs:13:10: 13:19
        _7 = _8;                         // scope 1 at src/grammar.rs:13:10: 13:19
        _6 = discriminant((*_7));        // scope 1 at src/grammar.rs:13:10: 13:19
        StorageDead(_7);                 // scope 1 at src/grammar.rs:13:18: 13:19
        StorageDead(_8);                 // scope 1 at src/grammar.rs:13:18: 13:19
        StorageLive(_9);                 // scope 2 at src/grammar.rs:13:10: 13:19
        StorageLive(_10);                // scope 2 at src/grammar.rs:13:10: 13:19
        StorageLive(_11);                // scope 2 at src/grammar.rs:13:10: 13:19
        _11 = _3;                        // scope 2 at src/grammar.rs:13:10: 13:19
        StorageLive(_12);                // scope 2 at src/grammar.rs:13:10: 13:19
        _12 = _6;                        // scope 2 at src/grammar.rs:13:10: 13:19
        _10 = Eq(move _11, move _12);    // scope 2 at src/grammar.rs:13:10: 13:19
        StorageDead(_12);                // scope 2 at src/grammar.rs:13:18: 13:19
        StorageDead(_11);                // scope 2 at src/grammar.rs:13:18: 13:19
        _9 = move _10;                   // scope 2 at src/grammar.rs:13:10: 13:19
        StorageDead(_10);                // scope 2 at src/grammar.rs:13:18: 13:19
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 2 at src/grammar.rs:13:10: 13:19
    }

    bb1: {
        _0 = const true;                 // scope 2 at src/grammar.rs:13:10: 13:19
        goto -> bb3;                     // scope 2 at src/grammar.rs:13:10: 13:19
    }

    bb2: {
        _0 = const false;                // scope 2 at src/grammar.rs:13:10: 13:19
        goto -> bb3;                     // scope 2 at src/grammar.rs:13:10: 13:19
    }

    bb3: {
        StorageDead(_9);                 // scope 2 at src/grammar.rs:13:18: 13:19
        StorageDead(_6);                 // scope 1 at src/grammar.rs:13:18: 13:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:13:18: 13:19
        return;                          // scope 0 at src/grammar.rs:13:19: 13:19
    }
}

fn grammar::Statement::Output(_1: grammar::Expr) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/grammar.rs:53:3: 53:15

    bb0: {
        ((_0 as Output).0: grammar::Expr) = move _1; // scope 0 at src/grammar.rs:53:3: 53:15
        discriminant(_0) = 1;            // scope 0 at src/grammar.rs:53:3: 53:15
        return;                          // scope 0 at src/grammar.rs:53:3: 53:15
    }
}

// MIR FOR CTFE
fn grammar::Statement::Output(_1: grammar::Expr) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/grammar.rs:53:3: 53:15

    bb0: {
        ((_0 as Output).0: grammar::Expr) = move _1; // scope 0 at src/grammar.rs:53:3: 53:15
        discriminant(_0) = 1;            // scope 0 at src/grammar.rs:53:3: 53:15
        return;                          // scope 0 at src/grammar.rs:53:3: 53:15
    }
}

fn grammar::<impl at src/grammar.rs:45:10: 45:19>::eq(_1: &grammar::Block, _2: &grammar::Block) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:45:10: 45:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:45:10: 45:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:45:10: 45:19
    let _3: &std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    let mut _5: &std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    let mut _6: &std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at src/grammar.rs:46:18: 46:36
        let _4: &std::vec::Vec<grammar::Statement>; // in scope 1 at src/grammar.rs:46:18: 46:36
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at src/grammar.rs:46:18: 46:36
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:46:18: 46:36
        _3 = &((*_2).0: std::vec::Vec<grammar::Statement>); // scope 0 at src/grammar.rs:46:18: 46:36
        StorageLive(_4);                 // scope 1 at src/grammar.rs:46:18: 46:36
        _4 = &((*_1).0: std::vec::Vec<grammar::Statement>); // scope 1 at src/grammar.rs:46:18: 46:36
        StorageLive(_5);                 // scope 2 at src/grammar.rs:46:18: 46:36
        _5 = _4;                         // scope 2 at src/grammar.rs:46:18: 46:36
        StorageLive(_6);                 // scope 2 at src/grammar.rs:46:18: 46:36
        _6 = _3;                         // scope 2 at src/grammar.rs:46:18: 46:36
        _0 = <Vec<grammar::Statement> as PartialEq>::eq(move _5, move _6) -> bb1; // scope 2 at src/grammar.rs:46:18: 46:36
                                         // mir::Constant
                                         // + span: src/grammar.rs:46:18: 46:36
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::vec::Vec<grammar::Statement>, &'s std::vec::Vec<grammar::Statement>) -> bool {<std::vec::Vec<grammar::Statement> as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_6);                 // scope 2 at src/grammar.rs:46:35: 46:36
        StorageDead(_5);                 // scope 2 at src/grammar.rs:46:35: 46:36
        StorageDead(_4);                 // scope 1 at src/grammar.rs:45:18: 45:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:45:18: 45:19
        return;                          // scope 0 at src/grammar.rs:45:19: 45:19
    }
}

fn grammar::<impl at src/grammar.rs:12:10: 12:15>::clone(_1: &grammar::MultOp) -> grammar::MultOp {
    debug self => _1;                    // in scope 0 at src/grammar.rs:12:10: 12:15
    let mut _0: grammar::MultOp;         // return place in scope 0 at src/grammar.rs:12:10: 12:15
    let mut _2: (&grammar::MultOp,);     // in scope 0 at src/grammar.rs:12:10: 12:15
    let mut _3: &grammar::MultOp;        // in scope 0 at src/grammar.rs:12:10: 12:15
    let mut _4: isize;                   // in scope 0 at src/grammar.rs:12:10: 12:15

    bb0: {
        StorageLive(_2);                 // scope 0 at src/grammar.rs:12:10: 12:15
        StorageLive(_3);                 // scope 0 at src/grammar.rs:12:10: 12:15
        _3 = _1;                         // scope 0 at src/grammar.rs:12:10: 12:15
        (_2.0: &grammar::MultOp) = move _3; // scope 0 at src/grammar.rs:12:10: 12:15
        StorageDead(_3);                 // scope 0 at src/grammar.rs:12:14: 12:15
        _4 = discriminant((*(_2.0: &grammar::MultOp))); // scope 0 at src/grammar.rs:12:10: 12:15
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb4, 2_isize: bb5, 3_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar.rs:12:10: 12:15
    }

    bb1: {
        discriminant(_0) = 3;            // scope 0 at src/grammar.rs:12:10: 12:15
        goto -> bb6;                     // scope 0 at src/grammar.rs:12:10: 12:15
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar.rs:12:10: 12:15
    }

    bb3: {
        discriminant(_0) = 0;            // scope 0 at src/grammar.rs:12:10: 12:15
        goto -> bb6;                     // scope 0 at src/grammar.rs:12:10: 12:15
    }

    bb4: {
        discriminant(_0) = 1;            // scope 0 at src/grammar.rs:12:10: 12:15
        goto -> bb6;                     // scope 0 at src/grammar.rs:12:10: 12:15
    }

    bb5: {
        discriminant(_0) = 2;            // scope 0 at src/grammar.rs:12:10: 12:15
        goto -> bb6;                     // scope 0 at src/grammar.rs:12:10: 12:15
    }

    bb6: {
        StorageDead(_2);                 // scope 0 at src/grammar.rs:12:14: 12:15
        return;                          // scope 0 at src/grammar.rs:12:15: 12:15
    }
}

fn grammar::<impl at src/grammar.rs:44:10: 44:15>::clone(_1: &grammar::Block) -> grammar::Block {
    debug self => _1;                    // in scope 0 at src/grammar.rs:44:10: 44:15
    let mut _0: grammar::Block;          // return place in scope 0 at src/grammar.rs:44:10: 44:15
    let _2: &std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    let mut _3: std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    let mut _4: &std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    let _5: &std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at src/grammar.rs:46:18: 46:36
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at src/grammar.rs:46:18: 46:36
        _2 = &((*_1).0: std::vec::Vec<grammar::Statement>); // scope 0 at src/grammar.rs:46:18: 46:36
        StorageLive(_3);                 // scope 1 at src/grammar.rs:46:18: 46:36
        StorageLive(_4);                 // scope 1 at src/grammar.rs:46:18: 46:36
        StorageLive(_5);                 // scope 1 at src/grammar.rs:46:18: 46:36
        _5 = _2;                         // scope 1 at src/grammar.rs:46:18: 46:36
        _4 = _5;                         // scope 1 at src/grammar.rs:46:18: 46:36
        _3 = <Vec<grammar::Statement> as Clone>::clone(move _4) -> bb1; // scope 1 at src/grammar.rs:46:18: 46:36
                                         // mir::Constant
                                         // + span: src/grammar.rs:46:18: 46:36
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<grammar::Statement>) -> std::vec::Vec<grammar::Statement> {<std::vec::Vec<grammar::Statement> as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 1 at src/grammar.rs:46:35: 46:36
        (_0.0: std::vec::Vec<grammar::Statement>) = move _3; // scope 1 at src/grammar.rs:44:10: 44:15
        StorageDead(_5);                 // scope 1 at src/grammar.rs:44:14: 44:15
        StorageDead(_3);                 // scope 1 at src/grammar.rs:44:14: 44:15
        StorageDead(_2);                 // scope 0 at src/grammar.rs:44:14: 44:15
        return;                          // scope 0 at src/grammar.rs:44:15: 44:15
    }
}

fn grammar_lexer::<impl at src/grammar_lexer.rs:6:10: 6:15>::clone(_1: &grammar_lexer::Token) -> grammar_lexer::Token {
    debug self => _1;                    // in scope 0 at src/grammar_lexer.rs:6:10: 6:15
    let mut _0: grammar_lexer::Token;    // return place in scope 0 at src/grammar_lexer.rs:6:10: 6:15
    let mut _2: (&grammar_lexer::Token,); // in scope 0 at src/grammar_lexer.rs:6:10: 6:15
    let mut _3: &grammar_lexer::Token;   // in scope 0 at src/grammar_lexer.rs:6:10: 6:15
    let mut _4: isize;                   // in scope 0 at src/grammar_lexer.rs:6:10: 6:15
    let _5: &std::string::String;        // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let mut _6: std::string::String;     // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let mut _7: &std::string::String;    // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let _8: &std::string::String;        // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let _9: &i32;                        // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let mut _10: i32;                    // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let mut _11: &i32;                   // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let _12: &i32;                       // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let _13: &grammar::Comparator;       // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    let mut _14: grammar::Comparator;    // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    let mut _15: &grammar::Comparator;   // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    let _16: &grammar::Comparator;       // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    scope 1 {
        debug __self_0 => _5;            // in scope 1 at src/grammar_lexer.rs:9:9: 9:15
    }
    scope 2 {
        debug __self_0 => _9;            // in scope 2 at src/grammar_lexer.rs:10:10: 10:13
    }
    scope 3 {
        debug __self_0 => _13;           // in scope 3 at src/grammar_lexer.rs:26:7: 26:17
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        StorageLive(_3);                 // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        _3 = _1;                         // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        (_2.0: &grammar_lexer::Token) = move _3; // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        StorageDead(_3);                 // scope 0 at src/grammar_lexer.rs:6:14: 6:15
        _4 = discriminant((*(_2.0: &grammar_lexer::Token))); // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb4, 2_isize: bb6, 3_isize: bb8, 4_isize: bb9, 5_isize: bb10, 6_isize: bb11, 7_isize: bb12, 8_isize: bb13, 9_isize: bb14, 10_isize: bb15, 11_isize: bb16, 12_isize: bb17, 13_isize: bb18, 14_isize: bb19, 15_isize: bb20, 16_isize: bb21, 17_isize: bb22, 18_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb1: {
        StorageLive(_13);                // scope 0 at src/grammar_lexer.rs:26:7: 26:17
        _13 = &(((*(_2.0: &grammar_lexer::Token)) as Cmp).0: grammar::Comparator); // scope 0 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_14);                // scope 3 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_15);                // scope 3 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_16);                // scope 3 at src/grammar_lexer.rs:26:7: 26:17
        _16 = _13;                       // scope 3 at src/grammar_lexer.rs:26:7: 26:17
        _15 = _16;                       // scope 3 at src/grammar_lexer.rs:26:7: 26:17
        _14 = <grammar::Comparator as Clone>::clone(move _15) -> bb23; // scope 3 at src/grammar_lexer.rs:26:7: 26:17
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:26:7: 26:17
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Comparator) -> grammar::Comparator {<grammar::Comparator as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb3: {
        discriminant(_0) = 0;            // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb4: {
        StorageLive(_5);                 // scope 0 at src/grammar_lexer.rs:9:9: 9:15
        _5 = &(((*(_2.0: &grammar_lexer::Token)) as Ident).0: std::string::String); // scope 0 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_6);                 // scope 1 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_7);                 // scope 1 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_8);                 // scope 1 at src/grammar_lexer.rs:9:9: 9:15
        _8 = _5;                         // scope 1 at src/grammar_lexer.rs:9:9: 9:15
        _7 = _8;                         // scope 1 at src/grammar_lexer.rs:9:9: 9:15
        _6 = <String as Clone>::clone(move _7) -> bb5; // scope 1 at src/grammar_lexer.rs:9:9: 9:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:9:9: 9:15
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> std::string::String {<std::string::String as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_7);                 // scope 1 at src/grammar_lexer.rs:9:14: 9:15
        ((_0 as Ident).0: std::string::String) = move _6; // scope 1 at src/grammar_lexer.rs:6:10: 6:15
        discriminant(_0) = 1;            // scope 1 at src/grammar_lexer.rs:6:10: 6:15
        StorageDead(_8);                 // scope 1 at src/grammar_lexer.rs:6:14: 6:15
        StorageDead(_6);                 // scope 1 at src/grammar_lexer.rs:6:14: 6:15
        StorageDead(_5);                 // scope 0 at src/grammar_lexer.rs:6:14: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:14: 6:15
    }

    bb6: {
        StorageLive(_9);                 // scope 0 at src/grammar_lexer.rs:10:10: 10:13
        _9 = &(((*(_2.0: &grammar_lexer::Token)) as Number).0: i32); // scope 0 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_10);                // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_11);                // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_12);                // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        _12 = _9;                        // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        _11 = _12;                       // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        _10 = <i32 as Clone>::clone(move _11) -> bb7; // scope 2 at src/grammar_lexer.rs:10:10: 10:13
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:10:10: 10:13
                                         // + literal: Const { ty: for<'r> fn(&'r i32) -> i32 {<i32 as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_11);                // scope 2 at src/grammar_lexer.rs:10:12: 10:13
        ((_0 as Number).0: i32) = move _10; // scope 2 at src/grammar_lexer.rs:6:10: 6:15
        discriminant(_0) = 2;            // scope 2 at src/grammar_lexer.rs:6:10: 6:15
        StorageDead(_12);                // scope 2 at src/grammar_lexer.rs:6:14: 6:15
        StorageDead(_10);                // scope 2 at src/grammar_lexer.rs:6:14: 6:15
        StorageDead(_9);                 // scope 0 at src/grammar_lexer.rs:6:14: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:14: 6:15
    }

    bb8: {
        discriminant(_0) = 3;            // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb9: {
        discriminant(_0) = 4;            // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb10: {
        discriminant(_0) = 5;            // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb11: {
        discriminant(_0) = 6;            // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb12: {
        discriminant(_0) = 7;            // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb13: {
        discriminant(_0) = 8;            // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb14: {
        discriminant(_0) = 9;            // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb15: {
        discriminant(_0) = 10;           // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb16: {
        discriminant(_0) = 11;           // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb17: {
        discriminant(_0) = 12;           // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb18: {
        discriminant(_0) = 13;           // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb19: {
        discriminant(_0) = 14;           // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb20: {
        discriminant(_0) = 15;           // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb21: {
        discriminant(_0) = 16;           // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb22: {
        discriminant(_0) = 17;           // scope 0 at src/grammar_lexer.rs:6:10: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:10: 6:15
    }

    bb23: {
        StorageDead(_15);                // scope 3 at src/grammar_lexer.rs:26:16: 26:17
        ((_0 as Cmp).0: grammar::Comparator) = move _14; // scope 3 at src/grammar_lexer.rs:6:10: 6:15
        discriminant(_0) = 18;           // scope 3 at src/grammar_lexer.rs:6:10: 6:15
        StorageDead(_16);                // scope 3 at src/grammar_lexer.rs:6:14: 6:15
        StorageDead(_14);                // scope 3 at src/grammar_lexer.rs:6:14: 6:15
        StorageDead(_13);                // scope 0 at src/grammar_lexer.rs:6:14: 6:15
        goto -> bb24;                    // scope 0 at src/grammar_lexer.rs:6:14: 6:15
    }

    bb24: {
        StorageDead(_2);                 // scope 0 at src/grammar_lexer.rs:6:14: 6:15
        return;                          // scope 0 at src/grammar_lexer.rs:6:15: 6:15
    }
}

fn program::{closure#8}(_1: &[closure@src/parser.rs:142:33: 142:45], _2: Vec<grammar::Statement>) -> grammar::Block {
    debug v => _2;                       // in scope 0 at src/parser.rs:142:34: 142:35
    let mut _0: grammar::Block;          // return place in scope 0 at src/parser.rs:142:37: 142:37
    let mut _3: std::vec::Vec<grammar::Statement>; // in scope 0 at src/parser.rs:142:43: 142:44

    bb0: {
        StorageLive(_3);                 // scope 0 at src/parser.rs:142:43: 142:44
        _3 = move _2;                    // scope 0 at src/parser.rs:142:43: 142:44
        (_0.0: std::vec::Vec<grammar::Statement>) = move _3; // scope 0 at src/parser.rs:142:37: 142:45
        StorageDead(_3);                 // scope 0 at src/parser.rs:142:44: 142:45
        return;                          // scope 0 at src/parser.rs:142:45: 142:45
    }
}

fn grammar::Expr::Variable(_1: String) -> grammar::Expr {
    let mut _0: grammar::Expr;           // return place in scope 0 at src/grammar.rs:35:3: 35:19

    bb0: {
        ((_0 as Variable).0: std::string::String) = move _1; // scope 0 at src/grammar.rs:35:3: 35:19
        discriminant(_0) = 0;            // scope 0 at src/grammar.rs:35:3: 35:19
        return;                          // scope 0 at src/grammar.rs:35:3: 35:19
    }
}

// MIR FOR CTFE
fn grammar::Expr::Variable(_1: String) -> grammar::Expr {
    let mut _0: grammar::Expr;           // return place in scope 0 at src/grammar.rs:35:3: 35:19

    bb0: {
        ((_0 as Variable).0: std::string::String) = move _1; // scope 0 at src/grammar.rs:35:3: 35:19
        discriminant(_0) = 0;            // scope 0 at src/grammar.rs:35:3: 35:19
        return;                          // scope 0 at src/grammar.rs:35:3: 35:19
    }
}

fn if_stmt::{closure#3}(_1: &[closure@src/parser.rs:105:31: 105:46]) -> Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>>; // return place in scope 0 at src/parser.rs:105:34: 105:34
    let mut _2: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>>; // in scope 0 at src/parser.rs:105:34: 105:46

    bb0: {
        StorageLive(_2);                 // scope 0 at src/parser.rs:105:34: 105:46
        _2 = expression() -> bb1;        // scope 0 at src/parser.rs:105:34: 105:46
                                         // mir::Constant
                                         // + span: src/parser.rs:105:34: 105:44
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = move _2 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:105:34: 105:46
        StorageDead(_2);                 // scope 0 at src/parser.rs:105:45: 105:46
        return;                          // scope 0 at src/parser.rs:105:46: 105:46
    }
}

fn grammar::Expr::AddSub(_1: Vec<grammar::AddTerm>) -> grammar::Expr {
    let mut _0: grammar::Expr;           // return place in scope 0 at src/grammar.rs:37:3: 37:23

    bb0: {
        ((_0 as AddSub).0: std::vec::Vec<grammar::AddTerm>) = move _1; // scope 0 at src/grammar.rs:37:3: 37:23
        discriminant(_0) = 2;            // scope 0 at src/grammar.rs:37:3: 37:23
        return;                          // scope 0 at src/grammar.rs:37:3: 37:23
    }
}

// MIR FOR CTFE
fn grammar::Expr::AddSub(_1: Vec<grammar::AddTerm>) -> grammar::Expr {
    let mut _0: grammar::Expr;           // return place in scope 0 at src/grammar.rs:37:3: 37:23

    bb0: {
        ((_0 as AddSub).0: std::vec::Vec<grammar::AddTerm>) = move _1; // scope 0 at src/grammar.rs:37:3: 37:23
        discriminant(_0) = 2;            // scope 0 at src/grammar.rs:37:3: 37:23
        return;                          // scope 0 at src/grammar.rs:37:3: 37:23
    }
}

fn code_block::{closure#0}(_1: &[closure@src/parser.rs:86:31: 86:43]) -> Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>>; // return place in scope 0 at src/parser.rs:86:34: 86:34
    let mut _2: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>>; // in scope 0 at src/parser.rs:86:34: 86:43

    bb0: {
        StorageLive(_2);                 // scope 0 at src/parser.rs:86:34: 86:43
        _2 = program() -> bb1;           // scope 0 at src/parser.rs:86:34: 86:43
                                         // mir::Constant
                                         // + span: src/parser.rs:86:34: 86:41
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = move _2 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:86:34: 86:43
        StorageDead(_2);                 // scope 0 at src/parser.rs:86:42: 86:43
        return;                          // scope 0 at src/parser.rs:86:43: 86:43
    }
}

fn program::{closure#0}(_1: &[closure@src/parser.rs:69:30: 72:10], _2: grammar_lexer::Token) -> Option<String> {
    debug token => _2;                   // in scope 0 at src/parser.rs:69:31: 69:36
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at src/parser.rs:69:38: 69:38
    let mut _3: isize;                   // in scope 0 at src/parser.rs:70:13: 70:31
    let _4: std::string::String;         // in scope 0 at src/parser.rs:70:26: 70:30
    let mut _5: std::string::String;     // in scope 0 at src/parser.rs:70:40: 70:44
    let mut _6: bool;                    // in scope 0 at src/parser.rs:72:9: 72:10
    let mut _7: isize;                   // in scope 0 at src/parser.rs:72:9: 72:10
    scope 1 {
        debug name => _4;                // in scope 1 at src/parser.rs:70:26: 70:30
    }

    bb0: {
        _6 = const false;                // scope 0 at src/parser.rs:69:44: 69:49
        _6 = const true;                 // scope 0 at src/parser.rs:69:44: 69:49
        _3 = discriminant(_2);           // scope 0 at src/parser.rs:69:44: 69:49
        switchInt(move _3) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at src/parser.rs:69:38: 69:49
    }

    bb1: {
        discriminant(_0) = 0;            // scope 0 at src/parser.rs:71:18: 71:22
        goto -> bb6;                     // scope 0 at src/parser.rs:71:18: 71:22
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at src/parser.rs:70:26: 70:30
        _6 = const false;                // scope 0 at src/parser.rs:70:26: 70:30
        _4 = move ((_2 as Ident).0: std::string::String); // scope 0 at src/parser.rs:70:26: 70:30
        StorageLive(_5);                 // scope 1 at src/parser.rs:70:40: 70:44
        _5 = move _4;                    // scope 1 at src/parser.rs:70:40: 70:44
        ((_0 as Some).0: std::string::String) = move _5; // scope 1 at src/parser.rs:70:35: 70:45
        discriminant(_0) = 1;            // scope 1 at src/parser.rs:70:35: 70:45
        StorageDead(_5);                 // scope 1 at src/parser.rs:70:44: 70:45
        StorageDead(_4);                 // scope 0 at src/parser.rs:70:44: 70:45
        goto -> bb6;                     // scope 0 at src/parser.rs:72:9: 72:10
    }

    bb3: {
        return;                          // scope 0 at src/parser.rs:72:10: 72:10
    }

    bb4: {
        switchInt(_6) -> [false: bb3, otherwise: bb5]; // scope 0 at src/parser.rs:72:9: 72:10
    }

    bb5: {
        drop(((_2 as Ident).0: std::string::String)) -> bb3; // scope 0 at src/parser.rs:72:9: 72:10
    }

    bb6: {
        _7 = discriminant(_2);           // scope 0 at src/parser.rs:72:9: 72:10
        switchInt(move _7) -> [1_isize: bb4, otherwise: bb3]; // scope 0 at src/parser.rs:72:9: 72:10
    }
}

fn expression::{closure#1}(_1: &[closure@src/parser.rs:16:26: 16:116]) -> MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr> {
    let mut _0: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>; // return place in scope 0 at src/parser.rs:16:29: 16:29
    let mut _2: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>; // in scope 0 at src/parser.rs:16:29: 16:85
    let _3: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>; // in scope 0 at src/parser.rs:16:29: 16:85
    let mut _4: &peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:16:29: 16:50
    let _5: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:16:29: 16:50
    let mut _6: grammar_lexer::Token;    // in scope 0 at src/parser.rs:16:33: 16:49
    let mut _7: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>; // in scope 0 at src/parser.rs:16:58: 16:84
    let mut _8: [closure@src/parser.rs:16:68: 16:83]; // in scope 0 at src/parser.rs:16:68: 16:83
    let mut _9: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:16:93: 16:115
    let mut _10: grammar_lexer::Token;   // in scope 0 at src/parser.rs:16:97: 16:114

    bb0: {
        StorageLive(_2);                 // scope 0 at src/parser.rs:16:29: 16:85
        StorageLive(_3);                 // scope 0 at src/parser.rs:16:29: 16:85
        StorageLive(_4);                 // scope 0 at src/parser.rs:16:29: 16:50
        StorageLive(_5);                 // scope 0 at src/parser.rs:16:29: 16:50
        StorageLive(_6);                 // scope 0 at src/parser.rs:16:33: 16:49
        discriminant(_6) = 10;           // scope 0 at src/parser.rs:16:33: 16:49
        _5 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _6) -> bb1; // scope 0 at src/parser.rs:16:29: 16:50
                                         // mir::Constant
                                         // + span: src/parser.rs:16:29: 16:32
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at src/parser.rs:16:29: 16:50
        StorageDead(_6);                 // scope 0 at src/parser.rs:16:49: 16:50
        StorageLive(_7);                 // scope 0 at src/parser.rs:16:58: 16:84
        StorageLive(_8);                 // scope 0 at src/parser.rs:16:68: 16:83
        _7 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>(move _8) -> [return: bb2, unwind: bb9]; // scope 0 at src/parser.rs:16:58: 16:84
                                         // mir::Constant
                                         // + span: src/parser.rs:16:58: 16:67
                                         // + literal: Const { ty: fn([closure@src/parser.rs:16:68: 16:83]) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_8);                 // scope 0 at src/parser.rs:16:83: 16:84
        _3 = <LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>(move _4, move _7) -> [return: bb3, unwind: bb9]; // scope 0 at src/parser.rs:16:29: 16:85
                                         // mir::Constant
                                         // + span: src/parser.rs:16:51: 16:57
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>) -> peruse::parsers::MapParser<<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, <peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]> as peruse::parsers::Parser>::O> {<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _2 = &_3;                        // scope 0 at src/parser.rs:16:29: 16:85
        StorageDead(_7);                 // scope 0 at src/parser.rs:16:84: 16:85
        StorageDead(_4);                 // scope 0 at src/parser.rs:16:84: 16:85
        StorageLive(_9);                 // scope 0 at src/parser.rs:16:93: 16:115
        StorageLive(_10);                // scope 0 at src/parser.rs:16:97: 16:114
        discriminant(_10) = 11;          // scope 0 at src/parser.rs:16:97: 16:114
        _9 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _10) -> [return: bb4, unwind: bb8]; // scope 0 at src/parser.rs:16:93: 16:115
                                         // mir::Constant
                                         // + span: src/parser.rs:16:93: 16:96
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 0 at src/parser.rs:16:114: 16:115
        _0 = <MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr> as peruse::parsers::ParserCombinator>::then_l::<LiteralParser<grammar_lexer::Token>>(move _2, move _9) -> [return: bb5, unwind: bb8]; // scope 0 at src/parser.rs:16:29: 16:116
                                         // mir::Constant
                                         // + span: src/parser.rs:16:86: 16:92
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>) -> peruse::parsers::MapParser<<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, <peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr> as peruse::parsers::Parser>::O> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:16:68: 16:83]>>, grammar::Expr> as peruse::parsers::ParserCombinator>::then_l::<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_9);                 // scope 0 at src/parser.rs:16:115: 16:116
        drop(_3) -> [return: bb6, unwind: bb9]; // scope 0 at src/parser.rs:16:115: 16:116
    }

    bb6: {
        drop(_5) -> bb7;                 // scope 0 at src/parser.rs:16:115: 16:116
    }

    bb7: {
        StorageDead(_5);                 // scope 0 at src/parser.rs:16:115: 16:116
        StorageDead(_3);                 // scope 0 at src/parser.rs:16:115: 16:116
        StorageDead(_2);                 // scope 0 at src/parser.rs:16:115: 16:116
        return;                          // scope 0 at src/parser.rs:16:116: 16:116
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at src/parser.rs:16:115: 16:116
    }

    bb9 (cleanup): {
        drop(_5) -> bb10;                // scope 0 at src/parser.rs:16:115: 16:116
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at src/parser.rs:16:26: 16:116
    }
}

fn grammar_lexer::Token::Number(_1: i32) -> grammar_lexer::Token {
    let mut _0: grammar_lexer::Token;    // return place in scope 0 at src/grammar_lexer.rs:10:3: 10:14

    bb0: {
        ((_0 as Number).0: i32) = move _1; // scope 0 at src/grammar_lexer.rs:10:3: 10:14
        discriminant(_0) = 2;            // scope 0 at src/grammar_lexer.rs:10:3: 10:14
        return;                          // scope 0 at src/grammar_lexer.rs:10:3: 10:14
    }
}

// MIR FOR CTFE
fn grammar_lexer::Token::Number(_1: i32) -> grammar_lexer::Token {
    let mut _0: grammar_lexer::Token;    // return place in scope 0 at src/grammar_lexer.rs:10:3: 10:14

    bb0: {
        ((_0 as Number).0: i32) = move _1; // scope 0 at src/grammar_lexer.rs:10:3: 10:14
        discriminant(_0) = 2;            // scope 0 at src/grammar_lexer.rs:10:3: 10:14
        return;                          // scope 0 at src/grammar_lexer.rs:10:3: 10:14
    }
}

fn token() -> Box<dyn peruse::parsers::Parser<O = Vec<grammar_lexer::Token>, I = str>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = std::vec::Vec<grammar_lexer::Token>, I = str>>; // return place in scope 0 at src/lexer.rs:11:19: 11:51
    let mut _1: std::boxed::Box<dyn peruse::parsers::Parser<O = std::vec::Vec<grammar_lexer::Token>, I = str>>; // in scope 0 at src/lexer.rs:47:3: 47:20
    let _2: peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>; // in scope 0 at src/lexer.rs:17:7: 17:12
    let mut _3: &str;                    // in scope 0 at src/lexer.rs:17:23: 17:52
    let _4: &str;                        // in scope 0 at src/lexer.rs:17:23: 17:52
    let mut _5: [closure@src/lexer.rs:17:54: 17:121]; // in scope 0 at src/lexer.rs:17:54: 17:121
    let mut _7: &str;                    // in scope 0 at src/lexer.rs:19:24: 19:45
    let _8: &str;                        // in scope 0 at src/lexer.rs:19:24: 19:45
    let mut _9: [closure@src/lexer.rs:19:47: 19:116]; // in scope 0 at src/lexer.rs:19:47: 19:116
    let mut _11: std::vec::Vec<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:66
    let mut _12: std::boxed::Box<[peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>]>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
    let mut _13: std::boxed::Box<[peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; 22]>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
    let mut _14: std::boxed::Box<[peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; 22]>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
    let mut _15: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:22:5: 22:40
    let mut _16: &str;                   // in scope 0 at src/lexer.rs:22:8: 22:13
    let _17: &str;                       // in scope 0 at src/lexer.rs:22:8: 22:13
    let mut _18: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:22:23: 22:39
    let mut _19: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:23:5: 23:40
    let mut _20: &str;                   // in scope 0 at src/lexer.rs:23:8: 23:12
    let _21: &str;                       // in scope 0 at src/lexer.rs:23:8: 23:12
    let mut _22: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:23:23: 23:39
    let mut _23: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:24:5: 24:42
    let mut _24: &str;                   // in scope 0 at src/lexer.rs:24:8: 24:14
    let _25: &str;                       // in scope 0 at src/lexer.rs:24:8: 24:14
    let mut _26: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:24:23: 24:41
    let mut _27: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:25:5: 25:43
    let mut _28: &str;                   // in scope 0 at src/lexer.rs:25:8: 25:15
    let _29: &str;                       // in scope 0 at src/lexer.rs:25:8: 25:15
    let mut _30: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:25:23: 25:42
    let mut _31: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:26:5: 26:41
    let mut _32: &str;                   // in scope 0 at src/lexer.rs:26:8: 26:14
    let _33: &str;                       // in scope 0 at src/lexer.rs:26:8: 26:14
    let mut _34: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:26:22: 26:40
    let mut _35: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:27:5: 27:38
    let mut _36: &str;                   // in scope 0 at src/lexer.rs:27:8: 27:19
    let _37: &str;                       // in scope 0 at src/lexer.rs:27:8: 27:19
    let mut _38: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:27:23: 27:37
    let mut _39: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:28:5: 28:40
    let mut _40: &str;                   // in scope 0 at src/lexer.rs:28:8: 28:16
    let _41: &str;                       // in scope 0 at src/lexer.rs:28:8: 28:16
    let mut _42: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:28:23: 28:39
    let mut _43: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:29:5: 29:41
    let mut _44: &str;                   // in scope 0 at src/lexer.rs:29:8: 29:13
    let _45: &str;                       // in scope 0 at src/lexer.rs:29:8: 29:13
    let mut _46: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:29:23: 29:40
    let mut _47: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:30:5: 30:41
    let mut _48: &str;                   // in scope 0 at src/lexer.rs:30:8: 30:13
    let _49: &str;                       // in scope 0 at src/lexer.rs:30:8: 30:13
    let mut _50: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:30:23: 30:40
    let mut _51: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:31:5: 31:51
    let mut _52: &str;                   // in scope 0 at src/lexer.rs:31:8: 31:12
    let _53: &str;                       // in scope 0 at src/lexer.rs:31:8: 31:12
    let mut _54: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:31:23: 31:50
    let mut _55: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:32:5: 32:52
    let mut _56: &str;                   // in scope 0 at src/lexer.rs:32:8: 32:12
    let _57: &str;                       // in scope 0 at src/lexer.rs:32:8: 32:12
    let mut _58: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:32:23: 32:51
    let mut _59: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:33:5: 33:52
    let mut _60: &str;                   // in scope 0 at src/lexer.rs:33:8: 33:12
    let _61: &str;                       // in scope 0 at src/lexer.rs:33:8: 33:12
    let mut _62: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:33:23: 33:51
    let mut _63: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:34:5: 34:40
    let mut _64: &str;                   // in scope 0 at src/lexer.rs:34:8: 34:16
    let _65: &str;                       // in scope 0 at src/lexer.rs:34:8: 34:16
    let mut _66: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:34:23: 34:39
    let mut _67: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:35:5: 35:52
    let mut _68: &str;                   // in scope 0 at src/lexer.rs:35:8: 35:12
    let _69: &str;                       // in scope 0 at src/lexer.rs:35:8: 35:12
    let mut _70: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:35:23: 35:51
    let mut _71: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:36:5: 36:51
    let mut _72: &str;                   // in scope 0 at src/lexer.rs:36:8: 36:11
    let _73: &str;                       // in scope 0 at src/lexer.rs:36:8: 36:11
    let mut _74: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:36:23: 36:50
    let mut _75: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:37:5: 37:51
    let mut _76: &str;                   // in scope 0 at src/lexer.rs:37:8: 37:11
    let _77: &str;                       // in scope 0 at src/lexer.rs:37:8: 37:11
    let mut _78: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:37:23: 37:50
    let mut _79: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:38:5: 38:39
    let mut _80: &str;                   // in scope 0 at src/lexer.rs:38:8: 38:13
    let _81: &str;                       // in scope 0 at src/lexer.rs:38:8: 38:13
    let mut _82: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:38:23: 38:38
    let mut _83: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:39:5: 39:40
    let mut _84: &str;                   // in scope 0 at src/lexer.rs:39:8: 39:11
    let _85: &str;                       // in scope 0 at src/lexer.rs:39:8: 39:11
    let mut _86: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:39:23: 39:39
    let mut _87: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:40:5: 40:37
    let mut _88: &str;                   // in scope 0 at src/lexer.rs:40:8: 40:11
    let _89: &str;                       // in scope 0 at src/lexer.rs:40:8: 40:11
    let mut _90: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:40:23: 40:36
    let mut _91: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:41:5: 41:39
    let mut _92: &str;                   // in scope 0 at src/lexer.rs:41:8: 41:13
    let _93: &str;                       // in scope 0 at src/lexer.rs:41:8: 41:13
    let mut _94: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:41:23: 41:38
    let mut _95: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:42:5: 42:41
    let mut _96: &str;                   // in scope 0 at src/lexer.rs:42:8: 42:11
    let _97: &str;                       // in scope 0 at src/lexer.rs:42:8: 42:11
    let mut _98: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:42:23: 42:40
    let mut _99: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // in scope 0 at src/lexer.rs:43:5: 43:42
    let mut _100: &str;                  // in scope 0 at src/lexer.rs:43:8: 43:12
    let _101: &str;                      // in scope 0 at src/lexer.rs:43:8: 43:12
    let mut _102: grammar_lexer::Token;  // in scope 0 at src/lexer.rs:43:24: 43:41
    let mut _104: &peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>; // in scope 0 at src/lexer.rs:46:17: 46:42
    let _105: peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>; // in scope 0 at src/lexer.rs:46:17: 46:42
    let mut _106: &peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>; // in scope 0 at src/lexer.rs:46:17: 46:32
    let _107: peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>; // in scope 0 at src/lexer.rs:46:17: 46:32
    let mut _108: &peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>; // in scope 0 at src/lexer.rs:46:17: 46:21
    let mut _109: peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>; // in scope 0 at src/lexer.rs:46:25: 46:31
    let mut _110: peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>; // in scope 0 at src/lexer.rs:46:36: 46:41
    let mut _111: std::boxed::Box<peruse::parsers::RepeatParser<peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>>>; // in scope 0 at src/lexer.rs:47:3: 47:20
    let mut _112: peruse::parsers::RepeatParser<peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>>; // in scope 0 at src/lexer.rs:47:12: 47:19
    let mut _113: bool;                  // in scope 0 at src/lexer.rs:49:1: 49:2
    let mut _114: bool;                  // in scope 0 at src/lexer.rs:49:1: 49:2
    let mut _115: bool;                  // in scope 0 at src/lexer.rs:49:1: 49:2
    let mut _116: ();                    // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    scope 1 {
        debug ident => _2;               // in scope 1 at src/lexer.rs:17:7: 17:12
        let _6: peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>; // in scope 1 at src/lexer.rs:19:7: 19:13
        scope 2 {
            debug number => _6;          // in scope 2 at src/lexer.rs:19:7: 19:13
            let _10: peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>; // in scope 2 at src/lexer.rs:21:7: 21:11
            scope 3 {
                debug lits => _10;       // in scope 3 at src/lexer.rs:21:7: 21:11
                let _103: peruse::parsers::RepeatParser<peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>>; // in scope 3 at src/lexer.rs:46:7: 46:14
                scope 4 {
                    debug options => _103; // in scope 4 at src/lexer.rs:46:7: 46:14
                }
            }
        }
    }

    bb0: {
        _113 = const false;              // scope 0 at src/lexer.rs:47:3: 47:20
        _114 = const false;              // scope 0 at src/lexer.rs:47:3: 47:20
        _115 = const false;              // scope 0 at src/lexer.rs:47:3: 47:20
        StorageLive(_1);                 // scope 0 at src/lexer.rs:47:3: 47:20
        StorageLive(_2);                 // scope 0 at src/lexer.rs:17:7: 17:12
        StorageLive(_3);                 // scope 0 at src/lexer.rs:17:23: 17:52
        StorageLive(_4);                 // scope 0 at src/lexer.rs:17:23: 17:52
        _4 = const "^[ \\t]*([a-zA-Z]\\w*)[ \\t]*"; // scope 0 at src/lexer.rs:17:23: 17:52
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [94, 91, 32, 92, 116, 93, 42, 40, 91, 97, 45, 122, 65, 45, 90, 93, 92, 119, 42, 41, 91, 32, 92, 116, 93, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [67108863], len: Size { raw: 26 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 26 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:17:23: 17:52
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [94, 91, 32, 92, 116, 93, 42, 40, 91, 97, 45, 122, 65, 45, 90, 93, 92, 119, 42, 41, 91, 32, 92, 116, 93, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [67108863], len: Size { raw: 26 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 26 }) }
        _3 = _4;                         // scope 0 at src/lexer.rs:17:23: 17:52
        StorageLive(_5);                 // scope 0 at src/lexer.rs:17:54: 17:121
        _115 = const true;               // scope 0 at src/lexer.rs:17:15: 17:122
        _2 = peruse::string_parsers::capture::<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>(move _3, move _5) -> bb1; // scope 0 at src/lexer.rs:17:15: 17:122
                                         // mir::Constant
                                         // + span: src/lexer.rs:17:15: 17:22
                                         // + literal: Const { ty: for<'r> fn(&'r str, [closure@src/lexer.rs:17:54: 17:121]) -> peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]> {peruse::string_parsers::capture::<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_5);                 // scope 0 at src/lexer.rs:17:121: 17:122
        StorageDead(_3);                 // scope 0 at src/lexer.rs:17:121: 17:122
        StorageDead(_4);                 // scope 0 at src/lexer.rs:17:122: 17:123
        StorageLive(_6);                 // scope 1 at src/lexer.rs:19:7: 19:13
        StorageLive(_7);                 // scope 1 at src/lexer.rs:19:24: 19:45
        StorageLive(_8);                 // scope 1 at src/lexer.rs:19:24: 19:45
        _8 = const "^[ \\t]*(\\d+)[ \\t]*"; // scope 1 at src/lexer.rs:19:24: 19:45
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [94, 91, 32, 92, 116, 93, 42, 40, 92, 100, 43, 41, 91, 32, 92, 116, 93, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [262143], len: Size { raw: 18 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 18 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:19:24: 19:45
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [94, 91, 32, 92, 116, 93, 42, 40, 92, 100, 43, 41, 91, 32, 92, 116, 93, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [262143], len: Size { raw: 18 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 18 }) }
        _7 = _8;                         // scope 1 at src/lexer.rs:19:24: 19:45
        StorageLive(_9);                 // scope 1 at src/lexer.rs:19:47: 19:116
        _6 = peruse::string_parsers::capture::<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>(move _7, move _9) -> [return: bb2, unwind: bb66]; // scope 1 at src/lexer.rs:19:16: 19:117
                                         // mir::Constant
                                         // + span: src/lexer.rs:19:16: 19:23
                                         // + literal: Const { ty: for<'r> fn(&'r str, [closure@src/lexer.rs:19:47: 19:116]) -> peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]> {peruse::string_parsers::capture::<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _114 = const true;               // scope 1 at src/lexer.rs:19:116: 19:117
        StorageDead(_9);                 // scope 1 at src/lexer.rs:19:116: 19:117
        StorageDead(_7);                 // scope 1 at src/lexer.rs:19:116: 19:117
        StorageDead(_8);                 // scope 1 at src/lexer.rs:19:117: 19:118
        StorageLive(_10);                // scope 2 at src/lexer.rs:21:7: 21:11
        StorageLive(_11);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:66
        StorageLive(_12);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageLive(_13);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageLive(_14);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        _14 = Box([peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; 22]); // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageLive(_15);                // scope 2 at src/lexer.rs:22:5: 22:40
        StorageLive(_16);                // scope 2 at src/lexer.rs:22:8: 22:13
        StorageLive(_17);                // scope 2 at src/lexer.rs:22:8: 22:13
        _17 = const "out";               // scope 2 at src/lexer.rs:22:8: 22:13
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [111, 117, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:22:8: 22:13
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [111, 117, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 }) }
        _16 = _17;                       // scope 2 at src/lexer.rs:22:8: 22:13
        StorageLive(_18);                // scope 2 at src/lexer.rs:22:23: 22:39
        discriminant(_18) = 8;           // scope 2 at src/lexer.rs:22:23: 22:39
        _15 = token::lt(move _16, move _18) -> [return: bb3, unwind: bb62]; // scope 2 at src/lexer.rs:22:5: 22:40
                                         // mir::Constant
                                         // + span: src/lexer.rs:22:5: 22:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_18);                // scope 2 at src/lexer.rs:22:39: 22:40
        StorageDead(_16);                // scope 2 at src/lexer.rs:22:39: 22:40
        StorageLive(_19);                // scope 2 at src/lexer.rs:23:5: 23:40
        StorageLive(_20);                // scope 2 at src/lexer.rs:23:8: 23:12
        StorageLive(_21);                // scope 2 at src/lexer.rs:23:8: 23:12
        _21 = const "if";                // scope 2 at src/lexer.rs:23:8: 23:12
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [105, 102], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:23:8: 23:12
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 102], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _20 = _21;                       // scope 2 at src/lexer.rs:23:8: 23:12
        StorageLive(_22);                // scope 2 at src/lexer.rs:23:23: 23:39
        discriminant(_22) = 14;          // scope 2 at src/lexer.rs:23:23: 23:39
        _19 = token::lt(move _20, move _22) -> [return: bb4, unwind: bb58]; // scope 2 at src/lexer.rs:23:5: 23:40
                                         // mir::Constant
                                         // + span: src/lexer.rs:23:5: 23:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_22);                // scope 2 at src/lexer.rs:23:39: 23:40
        StorageDead(_20);                // scope 2 at src/lexer.rs:23:39: 23:40
        StorageLive(_23);                // scope 2 at src/lexer.rs:24:5: 24:42
        StorageLive(_24);                // scope 2 at src/lexer.rs:24:8: 24:14
        StorageLive(_25);                // scope 2 at src/lexer.rs:24:8: 24:14
        _25 = const "else";              // scope 2 at src/lexer.rs:24:8: 24:14
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [101, 108, 115, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:24:8: 24:14
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 108, 115, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
        _24 = _25;                       // scope 2 at src/lexer.rs:24:8: 24:14
        StorageLive(_26);                // scope 2 at src/lexer.rs:24:23: 24:41
        discriminant(_26) = 15;          // scope 2 at src/lexer.rs:24:23: 24:41
        _23 = token::lt(move _24, move _26) -> [return: bb5, unwind: bb57]; // scope 2 at src/lexer.rs:24:5: 24:42
                                         // mir::Constant
                                         // + span: src/lexer.rs:24:5: 24:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_26);                // scope 2 at src/lexer.rs:24:41: 24:42
        StorageDead(_24);                // scope 2 at src/lexer.rs:24:41: 24:42
        StorageLive(_27);                // scope 2 at src/lexer.rs:25:5: 25:43
        StorageLive(_28);                // scope 2 at src/lexer.rs:25:8: 25:15
        StorageLive(_29);                // scope 2 at src/lexer.rs:25:8: 25:15
        _29 = const "while";             // scope 2 at src/lexer.rs:25:8: 25:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [119, 104, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:25:8: 25:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [119, 104, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _28 = _29;                       // scope 2 at src/lexer.rs:25:8: 25:15
        StorageLive(_30);                // scope 2 at src/lexer.rs:25:23: 25:42
        discriminant(_30) = 16;          // scope 2 at src/lexer.rs:25:23: 25:42
        _27 = token::lt(move _28, move _30) -> [return: bb6, unwind: bb56]; // scope 2 at src/lexer.rs:25:5: 25:43
                                         // mir::Constant
                                         // + span: src/lexer.rs:25:5: 25:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_30);                // scope 2 at src/lexer.rs:25:42: 25:43
        StorageDead(_28);                // scope 2 at src/lexer.rs:25:42: 25:43
        StorageLive(_31);                // scope 2 at src/lexer.rs:26:5: 26:41
        StorageLive(_32);                // scope 2 at src/lexer.rs:26:8: 26:14
        StorageLive(_33);                // scope 2 at src/lexer.rs:26:8: 26:14
        _33 = const "loop";              // scope 2 at src/lexer.rs:26:8: 26:14
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 111, 111, 112], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:26:8: 26:14
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 111, 111, 112], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
        _32 = _33;                       // scope 2 at src/lexer.rs:26:8: 26:14
        StorageLive(_34);                // scope 2 at src/lexer.rs:26:22: 26:40
        discriminant(_34) = 17;          // scope 2 at src/lexer.rs:26:22: 26:40
        _31 = token::lt(move _32, move _34) -> [return: bb7, unwind: bb55]; // scope 2 at src/lexer.rs:26:5: 26:41
                                         // mir::Constant
                                         // + span: src/lexer.rs:26:5: 26:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_34);                // scope 2 at src/lexer.rs:26:40: 26:41
        StorageDead(_32);                // scope 2 at src/lexer.rs:26:40: 26:41
        StorageLive(_35);                // scope 2 at src/lexer.rs:27:5: 27:38
        StorageLive(_36);                // scope 2 at src/lexer.rs:27:8: 27:19
        StorageLive(_37);                // scope 2 at src/lexer.rs:27:8: 27:19
        _37 = const "\\r?\\n\\s*";       // scope 2 at src/lexer.rs:27:8: 27:19
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [92, 114, 63, 92, 110, 92, 115, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:27:8: 27:19
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [92, 114, 63, 92, 110, 92, 115, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
        _36 = _37;                       // scope 2 at src/lexer.rs:27:8: 27:19
        StorageLive(_38);                // scope 2 at src/lexer.rs:27:23: 27:37
        discriminant(_38) = 9;           // scope 2 at src/lexer.rs:27:23: 27:37
        _35 = token::lt(move _36, move _38) -> [return: bb8, unwind: bb54]; // scope 2 at src/lexer.rs:27:5: 27:38
                                         // mir::Constant
                                         // + span: src/lexer.rs:27:5: 27:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_38);                // scope 2 at src/lexer.rs:27:37: 27:38
        StorageDead(_36);                // scope 2 at src/lexer.rs:27:37: 27:38
        StorageLive(_39);                // scope 2 at src/lexer.rs:28:5: 28:40
        StorageLive(_40);                // scope 2 at src/lexer.rs:28:8: 28:16
        StorageLive(_41);                // scope 2 at src/lexer.rs:28:8: 28:16
        _41 = const "\\(\\s*";           // scope 2 at src/lexer.rs:28:8: 28:16
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [92, 40, 92, 115, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:28:8: 28:16
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [92, 40, 92, 115, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _40 = _41;                       // scope 2 at src/lexer.rs:28:8: 28:16
        StorageLive(_42);                // scope 2 at src/lexer.rs:28:23: 28:39
        discriminant(_42) = 10;          // scope 2 at src/lexer.rs:28:23: 28:39
        _39 = token::lt(move _40, move _42) -> [return: bb9, unwind: bb53]; // scope 2 at src/lexer.rs:28:5: 28:40
                                         // mir::Constant
                                         // + span: src/lexer.rs:28:5: 28:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_42);                // scope 2 at src/lexer.rs:28:39: 28:40
        StorageDead(_40);                // scope 2 at src/lexer.rs:28:39: 28:40
        StorageLive(_43);                // scope 2 at src/lexer.rs:29:5: 29:41
        StorageLive(_44);                // scope 2 at src/lexer.rs:29:8: 29:13
        StorageLive(_45);                // scope 2 at src/lexer.rs:29:8: 29:13
        _45 = const "\\)";               // scope 2 at src/lexer.rs:29:8: 29:13
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [92, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:29:8: 29:13
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [92, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _44 = _45;                       // scope 2 at src/lexer.rs:29:8: 29:13
        StorageLive(_46);                // scope 2 at src/lexer.rs:29:23: 29:40
        discriminant(_46) = 11;          // scope 2 at src/lexer.rs:29:23: 29:40
        _43 = token::lt(move _44, move _46) -> [return: bb10, unwind: bb52]; // scope 2 at src/lexer.rs:29:5: 29:41
                                         // mir::Constant
                                         // + span: src/lexer.rs:29:5: 29:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_46);                // scope 2 at src/lexer.rs:29:40: 29:41
        StorageDead(_44);                // scope 2 at src/lexer.rs:29:40: 29:41
        StorageLive(_47);                // scope 2 at src/lexer.rs:30:5: 30:41
        StorageLive(_48);                // scope 2 at src/lexer.rs:30:8: 30:13
        StorageLive(_49);                // scope 2 at src/lexer.rs:30:8: 30:13
        _49 = const "\\}";               // scope 2 at src/lexer.rs:30:8: 30:13
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [92, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:30:8: 30:13
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [92, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _48 = _49;                       // scope 2 at src/lexer.rs:30:8: 30:13
        StorageLive(_50);                // scope 2 at src/lexer.rs:30:23: 30:40
        discriminant(_50) = 13;          // scope 2 at src/lexer.rs:30:23: 30:40
        _47 = token::lt(move _48, move _50) -> [return: bb11, unwind: bb51]; // scope 2 at src/lexer.rs:30:5: 30:41
                                         // mir::Constant
                                         // + span: src/lexer.rs:30:5: 30:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_50);                // scope 2 at src/lexer.rs:30:40: 30:41
        StorageDead(_48);                // scope 2 at src/lexer.rs:30:40: 30:41
        StorageLive(_51);                // scope 2 at src/lexer.rs:31:5: 31:51
        StorageLive(_52);                // scope 2 at src/lexer.rs:31:8: 31:12
        StorageLive(_53);                // scope 2 at src/lexer.rs:31:8: 31:12
        _53 = const "==";                // scope 2 at src/lexer.rs:31:8: 31:12
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [61, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:31:8: 31:12
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [61, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _52 = _53;                       // scope 2 at src/lexer.rs:31:8: 31:12
        StorageLive(_54);                // scope 2 at src/lexer.rs:31:23: 31:50
        ((_54 as Cmp).0: grammar::Comparator) = const grammar::Comparator::CEq; // scope 2 at src/lexer.rs:31:23: 31:50
                                         // ty::Const
                                         // + ty: grammar::Comparator
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: src/lexer.rs:31:23: 31:50
                                         // + literal: Const { ty: grammar::Comparator, val: Value(Scalar(0x00)) }
        discriminant(_54) = 18;          // scope 2 at src/lexer.rs:31:23: 31:50
        _51 = token::lt(move _52, move _54) -> [return: bb12, unwind: bb50]; // scope 2 at src/lexer.rs:31:5: 31:51
                                         // mir::Constant
                                         // + span: src/lexer.rs:31:5: 31:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_54);                // scope 2 at src/lexer.rs:31:50: 31:51
        StorageDead(_52);                // scope 2 at src/lexer.rs:31:50: 31:51
        StorageLive(_55);                // scope 2 at src/lexer.rs:32:5: 32:52
        StorageLive(_56);                // scope 2 at src/lexer.rs:32:8: 32:12
        StorageLive(_57);                // scope 2 at src/lexer.rs:32:8: 32:12
        _57 = const "!=";                // scope 2 at src/lexer.rs:32:8: 32:12
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [33, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:32:8: 32:12
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [33, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _56 = _57;                       // scope 2 at src/lexer.rs:32:8: 32:12
        StorageLive(_58);                // scope 2 at src/lexer.rs:32:23: 32:51
        ((_58 as Cmp).0: grammar::Comparator) = const grammar::Comparator::CNeq; // scope 2 at src/lexer.rs:32:23: 32:51
                                         // ty::Const
                                         // + ty: grammar::Comparator
                                         // + val: Value(Scalar(0x03))
                                         // mir::Constant
                                         // + span: src/lexer.rs:32:23: 32:51
                                         // + literal: Const { ty: grammar::Comparator, val: Value(Scalar(0x03)) }
        discriminant(_58) = 18;          // scope 2 at src/lexer.rs:32:23: 32:51
        _55 = token::lt(move _56, move _58) -> [return: bb13, unwind: bb49]; // scope 2 at src/lexer.rs:32:5: 32:52
                                         // mir::Constant
                                         // + span: src/lexer.rs:32:5: 32:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_58);                // scope 2 at src/lexer.rs:32:51: 32:52
        StorageDead(_56);                // scope 2 at src/lexer.rs:32:51: 32:52
        StorageLive(_59);                // scope 2 at src/lexer.rs:33:5: 33:52
        StorageLive(_60);                // scope 2 at src/lexer.rs:33:8: 33:12
        StorageLive(_61);                // scope 2 at src/lexer.rs:33:8: 33:12
        _61 = const ">=";                // scope 2 at src/lexer.rs:33:8: 33:12
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [62, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:33:8: 33:12
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [62, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _60 = _61;                       // scope 2 at src/lexer.rs:33:8: 33:12
        StorageLive(_62);                // scope 2 at src/lexer.rs:33:23: 33:51
        ((_62 as Cmp).0: grammar::Comparator) = const grammar::Comparator::CGeq; // scope 2 at src/lexer.rs:33:23: 33:51
                                         // ty::Const
                                         // + ty: grammar::Comparator
                                         // + val: Value(Scalar(0x04))
                                         // mir::Constant
                                         // + span: src/lexer.rs:33:23: 33:51
                                         // + literal: Const { ty: grammar::Comparator, val: Value(Scalar(0x04)) }
        discriminant(_62) = 18;          // scope 2 at src/lexer.rs:33:23: 33:51
        _59 = token::lt(move _60, move _62) -> [return: bb14, unwind: bb48]; // scope 2 at src/lexer.rs:33:5: 33:52
                                         // mir::Constant
                                         // + span: src/lexer.rs:33:5: 33:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_62);                // scope 2 at src/lexer.rs:33:51: 33:52
        StorageDead(_60);                // scope 2 at src/lexer.rs:33:51: 33:52
        StorageLive(_63);                // scope 2 at src/lexer.rs:34:5: 34:40
        StorageLive(_64);                // scope 2 at src/lexer.rs:34:8: 34:16
        StorageLive(_65);                // scope 2 at src/lexer.rs:34:8: 34:16
        _65 = const "\\{\\s*";           // scope 2 at src/lexer.rs:34:8: 34:16
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [92, 123, 92, 115, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:34:8: 34:16
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [92, 123, 92, 115, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _64 = _65;                       // scope 2 at src/lexer.rs:34:8: 34:16
        StorageLive(_66);                // scope 2 at src/lexer.rs:34:23: 34:39
        discriminant(_66) = 12;          // scope 2 at src/lexer.rs:34:23: 34:39
        _63 = token::lt(move _64, move _66) -> [return: bb15, unwind: bb47]; // scope 2 at src/lexer.rs:34:5: 34:40
                                         // mir::Constant
                                         // + span: src/lexer.rs:34:5: 34:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_66);                // scope 2 at src/lexer.rs:34:39: 34:40
        StorageDead(_64);                // scope 2 at src/lexer.rs:34:39: 34:40
        StorageLive(_67);                // scope 2 at src/lexer.rs:35:5: 35:52
        StorageLive(_68);                // scope 2 at src/lexer.rs:35:8: 35:12
        StorageLive(_69);                // scope 2 at src/lexer.rs:35:8: 35:12
        _69 = const "<=";                // scope 2 at src/lexer.rs:35:8: 35:12
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [60, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:35:8: 35:12
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [60, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _68 = _69;                       // scope 2 at src/lexer.rs:35:8: 35:12
        StorageLive(_70);                // scope 2 at src/lexer.rs:35:23: 35:51
        ((_70 as Cmp).0: grammar::Comparator) = const grammar::Comparator::CLeq; // scope 2 at src/lexer.rs:35:23: 35:51
                                         // ty::Const
                                         // + ty: grammar::Comparator
                                         // + val: Value(Scalar(0x05))
                                         // mir::Constant
                                         // + span: src/lexer.rs:35:23: 35:51
                                         // + literal: Const { ty: grammar::Comparator, val: Value(Scalar(0x05)) }
        discriminant(_70) = 18;          // scope 2 at src/lexer.rs:35:23: 35:51
        _67 = token::lt(move _68, move _70) -> [return: bb16, unwind: bb46]; // scope 2 at src/lexer.rs:35:5: 35:52
                                         // mir::Constant
                                         // + span: src/lexer.rs:35:5: 35:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_70);                // scope 2 at src/lexer.rs:35:51: 35:52
        StorageDead(_68);                // scope 2 at src/lexer.rs:35:51: 35:52
        StorageLive(_71);                // scope 2 at src/lexer.rs:36:5: 36:51
        StorageLive(_72);                // scope 2 at src/lexer.rs:36:8: 36:11
        StorageLive(_73);                // scope 2 at src/lexer.rs:36:8: 36:11
        _73 = const ">";                 // scope 2 at src/lexer.rs:36:8: 36:11
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [62], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:36:8: 36:11
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [62], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _72 = _73;                       // scope 2 at src/lexer.rs:36:8: 36:11
        StorageLive(_74);                // scope 2 at src/lexer.rs:36:23: 36:50
        ((_74 as Cmp).0: grammar::Comparator) = const grammar::Comparator::CGt; // scope 2 at src/lexer.rs:36:23: 36:50
                                         // ty::Const
                                         // + ty: grammar::Comparator
                                         // + val: Value(Scalar(0x01))
                                         // mir::Constant
                                         // + span: src/lexer.rs:36:23: 36:50
                                         // + literal: Const { ty: grammar::Comparator, val: Value(Scalar(0x01)) }
        discriminant(_74) = 18;          // scope 2 at src/lexer.rs:36:23: 36:50
        _71 = token::lt(move _72, move _74) -> [return: bb17, unwind: bb45]; // scope 2 at src/lexer.rs:36:5: 36:51
                                         // mir::Constant
                                         // + span: src/lexer.rs:36:5: 36:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_74);                // scope 2 at src/lexer.rs:36:50: 36:51
        StorageDead(_72);                // scope 2 at src/lexer.rs:36:50: 36:51
        StorageLive(_75);                // scope 2 at src/lexer.rs:37:5: 37:51
        StorageLive(_76);                // scope 2 at src/lexer.rs:37:8: 37:11
        StorageLive(_77);                // scope 2 at src/lexer.rs:37:8: 37:11
        _77 = const "<";                 // scope 2 at src/lexer.rs:37:8: 37:11
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [60], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:37:8: 37:11
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [60], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _76 = _77;                       // scope 2 at src/lexer.rs:37:8: 37:11
        StorageLive(_78);                // scope 2 at src/lexer.rs:37:23: 37:50
        ((_78 as Cmp).0: grammar::Comparator) = const grammar::Comparator::CLt; // scope 2 at src/lexer.rs:37:23: 37:50
                                         // ty::Const
                                         // + ty: grammar::Comparator
                                         // + val: Value(Scalar(0x02))
                                         // mir::Constant
                                         // + span: src/lexer.rs:37:23: 37:50
                                         // + literal: Const { ty: grammar::Comparator, val: Value(Scalar(0x02)) }
        discriminant(_78) = 18;          // scope 2 at src/lexer.rs:37:23: 37:50
        _75 = token::lt(move _76, move _78) -> [return: bb18, unwind: bb44]; // scope 2 at src/lexer.rs:37:5: 37:51
                                         // mir::Constant
                                         // + span: src/lexer.rs:37:5: 37:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_78);                // scope 2 at src/lexer.rs:37:50: 37:51
        StorageDead(_76);                // scope 2 at src/lexer.rs:37:50: 37:51
        StorageLive(_79);                // scope 2 at src/lexer.rs:38:5: 38:39
        StorageLive(_80);                // scope 2 at src/lexer.rs:38:8: 38:13
        StorageLive(_81);                // scope 2 at src/lexer.rs:38:8: 38:13
        _81 = const "\\+";               // scope 2 at src/lexer.rs:38:8: 38:13
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [92, 43], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:38:8: 38:13
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [92, 43], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _80 = _81;                       // scope 2 at src/lexer.rs:38:8: 38:13
        StorageLive(_82);                // scope 2 at src/lexer.rs:38:23: 38:38
        discriminant(_82) = 3;           // scope 2 at src/lexer.rs:38:23: 38:38
        _79 = token::lt(move _80, move _82) -> [return: bb19, unwind: bb43]; // scope 2 at src/lexer.rs:38:5: 38:39
                                         // mir::Constant
                                         // + span: src/lexer.rs:38:5: 38:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_82);                // scope 2 at src/lexer.rs:38:38: 38:39
        StorageDead(_80);                // scope 2 at src/lexer.rs:38:38: 38:39
        StorageLive(_83);                // scope 2 at src/lexer.rs:39:5: 39:40
        StorageLive(_84);                // scope 2 at src/lexer.rs:39:8: 39:11
        StorageLive(_85);                // scope 2 at src/lexer.rs:39:8: 39:11
        _85 = const "-";                 // scope 2 at src/lexer.rs:39:8: 39:11
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [45], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:39:8: 39:11
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [45], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _84 = _85;                       // scope 2 at src/lexer.rs:39:8: 39:11
        StorageLive(_86);                // scope 2 at src/lexer.rs:39:23: 39:39
        discriminant(_86) = 4;           // scope 2 at src/lexer.rs:39:23: 39:39
        _83 = token::lt(move _84, move _86) -> [return: bb20, unwind: bb42]; // scope 2 at src/lexer.rs:39:5: 39:40
                                         // mir::Constant
                                         // + span: src/lexer.rs:39:5: 39:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        StorageDead(_86);                // scope 2 at src/lexer.rs:39:39: 39:40
        StorageDead(_84);                // scope 2 at src/lexer.rs:39:39: 39:40
        StorageLive(_87);                // scope 2 at src/lexer.rs:40:5: 40:37
        StorageLive(_88);                // scope 2 at src/lexer.rs:40:8: 40:11
        StorageLive(_89);                // scope 2 at src/lexer.rs:40:8: 40:11
        _89 = const "=";                 // scope 2 at src/lexer.rs:40:8: 40:11
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:40:8: 40:11
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _88 = _89;                       // scope 2 at src/lexer.rs:40:8: 40:11
        StorageLive(_90);                // scope 2 at src/lexer.rs:40:23: 40:36
        discriminant(_90) = 0;           // scope 2 at src/lexer.rs:40:23: 40:36
        _87 = token::lt(move _88, move _90) -> [return: bb21, unwind: bb41]; // scope 2 at src/lexer.rs:40:5: 40:37
                                         // mir::Constant
                                         // + span: src/lexer.rs:40:5: 40:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        StorageDead(_90);                // scope 2 at src/lexer.rs:40:36: 40:37
        StorageDead(_88);                // scope 2 at src/lexer.rs:40:36: 40:37
        StorageLive(_91);                // scope 2 at src/lexer.rs:41:5: 41:39
        StorageLive(_92);                // scope 2 at src/lexer.rs:41:8: 41:13
        StorageLive(_93);                // scope 2 at src/lexer.rs:41:8: 41:13
        _93 = const "\\*";               // scope 2 at src/lexer.rs:41:8: 41:13
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [92, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:41:8: 41:13
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [92, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _92 = _93;                       // scope 2 at src/lexer.rs:41:8: 41:13
        StorageLive(_94);                // scope 2 at src/lexer.rs:41:23: 41:38
        discriminant(_94) = 5;           // scope 2 at src/lexer.rs:41:23: 41:38
        _91 = token::lt(move _92, move _94) -> [return: bb22, unwind: bb40]; // scope 2 at src/lexer.rs:41:5: 41:39
                                         // mir::Constant
                                         // + span: src/lexer.rs:41:5: 41:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_94);                // scope 2 at src/lexer.rs:41:38: 41:39
        StorageDead(_92);                // scope 2 at src/lexer.rs:41:38: 41:39
        StorageLive(_95);                // scope 2 at src/lexer.rs:42:5: 42:41
        StorageLive(_96);                // scope 2 at src/lexer.rs:42:8: 42:11
        StorageLive(_97);                // scope 2 at src/lexer.rs:42:8: 42:11
        _97 = const "/";                 // scope 2 at src/lexer.rs:42:8: 42:11
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [47], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:42:8: 42:11
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [47], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _96 = _97;                       // scope 2 at src/lexer.rs:42:8: 42:11
        StorageLive(_98);                // scope 2 at src/lexer.rs:42:23: 42:40
        discriminant(_98) = 6;           // scope 2 at src/lexer.rs:42:23: 42:40
        _95 = token::lt(move _96, move _98) -> [return: bb23, unwind: bb39]; // scope 2 at src/lexer.rs:42:5: 42:41
                                         // mir::Constant
                                         // + span: src/lexer.rs:42:5: 42:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        StorageDead(_98);                // scope 2 at src/lexer.rs:42:40: 42:41
        StorageDead(_96);                // scope 2 at src/lexer.rs:42:40: 42:41
        StorageLive(_99);                // scope 2 at src/lexer.rs:43:5: 43:42
        StorageLive(_100);               // scope 2 at src/lexer.rs:43:8: 43:12
        StorageLive(_101);               // scope 2 at src/lexer.rs:43:8: 43:12
        _101 = const "%";                // scope 2 at src/lexer.rs:43:8: 43:12
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [37], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:43:8: 43:12
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [37], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _100 = _101;                     // scope 2 at src/lexer.rs:43:8: 43:12
        StorageLive(_102);               // scope 2 at src/lexer.rs:43:24: 43:41
        discriminant(_102) = 7;          // scope 2 at src/lexer.rs:43:24: 43:41
        _99 = token::lt(move _100, move _102) -> [return: bb24, unwind: bb38]; // scope 2 at src/lexer.rs:43:5: 43:42
                                         // mir::Constant
                                         // + span: src/lexer.rs:43:5: 43:7
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {lexer::token::lt}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        StorageDead(_102);               // scope 2 at src/lexer.rs:43:41: 43:42
        StorageDead(_100);               // scope 2 at src/lexer.rs:43:41: 43:42
        (*_14) = [move _15, move _19, move _23, move _27, move _31, move _35, move _39, move _43, move _47, move _51, move _55, move _59, move _63, move _67, move _71, move _75, move _79, move _83, move _87, move _91, move _95, move _99]; // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:56: 49:65
        StorageDead(_99);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_95);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_91);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_87);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_83);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_79);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_75);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_71);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_67);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_63);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_59);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_55);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_51);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_47);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_43);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_39);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_35);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_31);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_27);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_23);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_19);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_15);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        _13 = move _14;                  // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        _12 = move _13 as std::boxed::Box<[peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>]> (Pointer(Unsize)); // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageDead(_14);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_13);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        _11 = slice::<impl [peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>]>::into_vec::<std::alloc::Global>(move _12) -> [return: bb25, unwind: bb64]; // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:66
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::boxed::Box<[peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>]>) -> std::vec::Vec<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>> {std::slice::<impl [peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>]>::into_vec::<std::alloc::Global>}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        StorageDead(_12);                // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:65: 49:66
        _10 = peruse::parsers::one_of::<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>(move _11) -> [return: bb26, unwind: bb64]; // scope 2 at src/lexer.rs:21:14: 44:5
                                         // mir::Constant
                                         // + span: src/lexer.rs:21:14: 21:20
                                         // + literal: Const { ty: fn(std::vec::Vec<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>) -> peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>> {peruse::parsers::one_of::<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        StorageDead(_11);                // scope 2 at src/lexer.rs:44:4: 44:5
        StorageDead(_101);               // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_97);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_93);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_89);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_85);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_81);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_77);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_73);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_69);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_65);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_61);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_57);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_53);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_49);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_45);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_41);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_37);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_33);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_29);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_25);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_21);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageDead(_17);                // scope 2 at src/lexer.rs:44:5: 44:6
        StorageLive(_103);               // scope 3 at src/lexer.rs:46:7: 46:14
        StorageLive(_104);               // scope 3 at src/lexer.rs:46:17: 46:42
        StorageLive(_105);               // scope 3 at src/lexer.rs:46:17: 46:42
        StorageLive(_106);               // scope 3 at src/lexer.rs:46:17: 46:32
        StorageLive(_107);               // scope 3 at src/lexer.rs:46:17: 46:32
        StorageLive(_108);               // scope 3 at src/lexer.rs:46:17: 46:21
        _108 = &_10;                     // scope 3 at src/lexer.rs:46:17: 46:21
        StorageLive(_109);               // scope 3 at src/lexer.rs:46:25: 46:31
        _114 = const false;              // scope 3 at src/lexer.rs:46:25: 46:31
        _109 = move _6;                  // scope 3 at src/lexer.rs:46:25: 46:31
        _107 = <OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>> as peruse::parsers::ParserCombinator>::or::<RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>(move _108, move _109) -> [return: bb27, unwind: bb37]; // scope 3 at src/lexer.rs:46:17: 46:32
                                         // mir::Constant
                                         // + span: src/lexer.rs:46:22: 46:24
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>) -> peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>> {<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>> as peruse::parsers::ParserCombinator>::or::<peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb27: {
        _106 = &_107;                    // scope 3 at src/lexer.rs:46:17: 46:32
        StorageDead(_109);               // scope 3 at src/lexer.rs:46:31: 46:32
        StorageDead(_108);               // scope 3 at src/lexer.rs:46:31: 46:32
        StorageLive(_110);               // scope 3 at src/lexer.rs:46:36: 46:41
        _115 = const false;              // scope 3 at src/lexer.rs:46:36: 46:41
        _110 = move _2;                  // scope 3 at src/lexer.rs:46:36: 46:41
        _105 = <OrParser<OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>> as peruse::parsers::ParserCombinator>::or::<RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>(move _106, move _110) -> [return: bb28, unwind: bb36]; // scope 3 at src/lexer.rs:46:17: 46:42
                                         // mir::Constant
                                         // + span: src/lexer.rs:46:33: 46:35
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>) -> peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>> {<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>> as peruse::parsers::ParserCombinator>::or::<peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        _104 = &_105;                    // scope 3 at src/lexer.rs:46:17: 46:42
        StorageDead(_110);               // scope 3 at src/lexer.rs:46:41: 46:42
        StorageDead(_106);               // scope 3 at src/lexer.rs:46:41: 46:42
        _103 = <OrParser<OrParser<OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>> as peruse::parsers::ParserCombinator>::repeat(move _104) -> [return: bb29, unwind: bb35]; // scope 3 at src/lexer.rs:46:17: 46:51
                                         // mir::Constant
                                         // + span: src/lexer.rs:46:43: 46:49
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>) -> peruse::parsers::RepeatParser<peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>> {<peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>> as peruse::parsers::ParserCombinator>::repeat}, val: Value(Scalar(<ZST>)) }
    }

    bb29: {
        _113 = const true;               // scope 3 at src/lexer.rs:46:50: 46:51
        StorageDead(_104);               // scope 3 at src/lexer.rs:46:50: 46:51
        drop(_105) -> [return: bb30, unwind: bb34]; // scope 3 at src/lexer.rs:46:51: 46:52
    }

    bb30: {
        drop(_107) -> [return: bb31, unwind: bb61]; // scope 3 at src/lexer.rs:46:51: 46:52
    }

    bb31: {
        StorageDead(_107);               // scope 3 at src/lexer.rs:46:51: 46:52
        StorageDead(_105);               // scope 3 at src/lexer.rs:46:51: 46:52
        StorageLive(_111);               // scope 4 at src/lexer.rs:47:3: 47:20
        StorageLive(_112);               // scope 4 at src/lexer.rs:47:12: 47:19
        _113 = const false;              // scope 4 at src/lexer.rs:47:12: 47:19
        _112 = move _103;                // scope 4 at src/lexer.rs:47:12: 47:19
        _111 = Box::<RepeatParser<OrParser<OrParser<OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>>>::new(move _112) -> [return: bb32, unwind: bb61]; // scope 4 at src/lexer.rs:47:3: 47:20
                                         // mir::Constant
                                         // + span: src/lexer.rs:47:3: 47:11
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(peruse::parsers::RepeatParser<peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>>) -> std::boxed::Box<peruse::parsers::RepeatParser<peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>>> {std::boxed::Box::<peruse::parsers::RepeatParser<peruse::parsers::OrParser<peruse::parsers::OrParser<peruse::parsers::OneOfParser<peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:19:47: 19:116]>>, peruse::string_parsers::RegexCapturesParser<grammar_lexer::Token, [closure@src/lexer.rs:17:54: 17:121]>>>>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb32: {
        _1 = move _111 as std::boxed::Box<dyn peruse::parsers::Parser<O = std::vec::Vec<grammar_lexer::Token>, I = str>> (Pointer(Unsize)); // scope 4 at src/lexer.rs:47:3: 47:20
        StorageDead(_112);               // scope 4 at src/lexer.rs:47:19: 47:20
        StorageDead(_111);               // scope 4 at src/lexer.rs:47:19: 47:20
        _113 = const false;              // scope 3 at src/lexer.rs:49:1: 49:2
        StorageDead(_103);               // scope 3 at src/lexer.rs:49:1: 49:2
        drop(_10) -> [return: bb33, unwind: bb64]; // scope 2 at src/lexer.rs:49:1: 49:2
    }

    bb33: {
        StorageDead(_10);                // scope 2 at src/lexer.rs:49:1: 49:2
        _114 = const false;              // scope 1 at src/lexer.rs:49:1: 49:2
        StorageDead(_6);                 // scope 1 at src/lexer.rs:49:1: 49:2
        _115 = const false;              // scope 0 at src/lexer.rs:49:1: 49:2
        StorageDead(_2);                 // scope 0 at src/lexer.rs:49:1: 49:2
        _0 = move _1 as std::boxed::Box<dyn peruse::parsers::Parser<O = std::vec::Vec<grammar_lexer::Token>, I = str>> (Pointer(Unsize)); // scope 0 at src/lexer.rs:47:3: 47:20
        StorageDead(_1);                 // scope 0 at src/lexer.rs:49:1: 49:2
        return;                          // scope 0 at src/lexer.rs:49:2: 49:2
    }

    bb34 (cleanup): {
        drop(_107) -> bb61;              // scope 3 at src/lexer.rs:46:51: 46:52
    }

    bb35 (cleanup): {
        drop(_105) -> bb36;              // scope 3 at src/lexer.rs:46:51: 46:52
    }

    bb36 (cleanup): {
        drop(_107) -> bb37;              // scope 3 at src/lexer.rs:46:51: 46:52
    }

    bb37 (cleanup): {
        drop(_10) -> bb64;               // scope 2 at src/lexer.rs:49:1: 49:2
    }

    bb38 (cleanup): {
        drop(_95) -> bb39;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb39 (cleanup): {
        drop(_91) -> bb40;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb40 (cleanup): {
        drop(_87) -> bb41;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb41 (cleanup): {
        drop(_83) -> bb42;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb42 (cleanup): {
        drop(_79) -> bb43;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb43 (cleanup): {
        drop(_75) -> bb44;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb44 (cleanup): {
        drop(_71) -> bb45;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb45 (cleanup): {
        drop(_67) -> bb46;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb46 (cleanup): {
        drop(_63) -> bb47;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb47 (cleanup): {
        drop(_59) -> bb48;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb48 (cleanup): {
        drop(_55) -> bb49;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb49 (cleanup): {
        drop(_51) -> bb50;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb50 (cleanup): {
        drop(_47) -> bb51;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb51 (cleanup): {
        drop(_43) -> bb52;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb52 (cleanup): {
        drop(_39) -> bb53;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb53 (cleanup): {
        drop(_35) -> bb54;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb54 (cleanup): {
        drop(_31) -> bb55;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb55 (cleanup): {
        drop(_27) -> bb56;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb56 (cleanup): {
        drop(_23) -> bb57;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb57 (cleanup): {
        drop(_19) -> bb58;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb58 (cleanup): {
        drop(_15) -> bb62;               // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb59 (cleanup): {
        resume;                          // scope 0 at src/lexer.rs:11:1: 49:2
    }

    bb60 (cleanup): {
        drop(_103) -> bb37;              // scope 3 at src/lexer.rs:49:1: 49:2
    }

    bb61 (cleanup): {
        switchInt(_113) -> [false: bb37, otherwise: bb60]; // scope 3 at src/lexer.rs:49:1: 49:2
    }

    bb62 (cleanup): {
        _116 = alloc::alloc::box_free::<[peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; 22], std::alloc::Global>(move (_14.0: std::ptr::Unique<[peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; 22]>), move (_14.1: std::alloc::Global)) -> bb64; // scope 2 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
                                         // + literal: Const { ty: unsafe fn(std::ptr::Unique<[peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; 22]>, std::alloc::Global) {alloc::alloc::box_free::<[peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; 22], std::alloc::Global>}, val: Value(Scalar(<ZST>)) }
    }

    bb63 (cleanup): {
        drop(_6) -> bb66;                // scope 1 at src/lexer.rs:49:1: 49:2
    }

    bb64 (cleanup): {
        switchInt(_114) -> [false: bb66, otherwise: bb63]; // scope 1 at src/lexer.rs:49:1: 49:2
    }

    bb65 (cleanup): {
        drop(_2) -> bb59;                // scope 0 at src/lexer.rs:49:1: 49:2
    }

    bb66 (cleanup): {
        switchInt(_115) -> [false: bb59, otherwise: bb65]; // scope 0 at src/lexer.rs:49:1: 49:2
    }
}

fn grammar::<impl at src/grammar.rs:45:10: 45:19>::ne(_1: &grammar::Block, _2: &grammar::Block) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:45:10: 45:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:45:10: 45:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:45:10: 45:19
    let _3: &std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    let mut _5: &std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    let mut _6: &std::vec::Vec<grammar::Statement>; // in scope 0 at src/grammar.rs:46:18: 46:36
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at src/grammar.rs:46:18: 46:36
        let _4: &std::vec::Vec<grammar::Statement>; // in scope 1 at src/grammar.rs:46:18: 46:36
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at src/grammar.rs:46:18: 46:36
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:46:18: 46:36
        _3 = &((*_2).0: std::vec::Vec<grammar::Statement>); // scope 0 at src/grammar.rs:46:18: 46:36
        StorageLive(_4);                 // scope 1 at src/grammar.rs:46:18: 46:36
        _4 = &((*_1).0: std::vec::Vec<grammar::Statement>); // scope 1 at src/grammar.rs:46:18: 46:36
        StorageLive(_5);                 // scope 2 at src/grammar.rs:46:18: 46:36
        _5 = _4;                         // scope 2 at src/grammar.rs:46:18: 46:36
        StorageLive(_6);                 // scope 2 at src/grammar.rs:46:18: 46:36
        _6 = _3;                         // scope 2 at src/grammar.rs:46:18: 46:36
        _0 = <Vec<grammar::Statement> as PartialEq>::ne(move _5, move _6) -> bb1; // scope 2 at src/grammar.rs:46:18: 46:36
                                         // mir::Constant
                                         // + span: src/grammar.rs:46:18: 46:36
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::vec::Vec<grammar::Statement>, &'s std::vec::Vec<grammar::Statement>) -> bool {<std::vec::Vec<grammar::Statement> as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_6);                 // scope 2 at src/grammar.rs:46:35: 46:36
        StorageDead(_5);                 // scope 2 at src/grammar.rs:46:35: 46:36
        StorageDead(_4);                 // scope 1 at src/grammar.rs:45:18: 45:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:45:18: 45:19
        return;                          // scope 0 at src/grammar.rs:45:19: 45:19
    }
}

fn grammar_lexer::<impl at src/grammar_lexer.rs:4:10: 4:12>::assert_receiver_is_total_eq(_1: &grammar_lexer::Token) -> () {
    debug self => _1;                    // in scope 0 at src/grammar_lexer.rs:4:10: 4:12
    let mut _0: ();                      // return place in scope 0 at src/grammar_lexer.rs:4:10: 4:12
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at src/grammar_lexer.rs:4:12: 4:12
    }
}

fn grammar::<impl at src/grammar.rs:33:10: 33:19>::eq(_1: &grammar::Expr, _2: &grammar::Expr) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:33:10: 33:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:33:10: 33:19
    let _3: isize;                       // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _4: &grammar::Expr;          // in scope 0 at src/grammar.rs:33:10: 33:19
    let _5: &grammar::Expr;              // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _7: &grammar::Expr;          // in scope 0 at src/grammar.rs:33:10: 33:19
    let _8: &grammar::Expr;              // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _9: bool;                    // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _10: bool;                   // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _11: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _12: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _13: (&grammar::Expr, &grammar::Expr); // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _14: &grammar::Expr;         // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _15: &grammar::Expr;         // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _16: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _17: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _18: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _19: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _20: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _23: &std::string::String;   // in scope 0 at src/grammar.rs:35:12: 35:18
    let mut _24: &std::string::String;   // in scope 0 at src/grammar.rs:35:12: 35:18
    let mut _27: i32;                    // in scope 0 at src/grammar.rs:36:7: 36:10
    let mut _28: i32;                    // in scope 0 at src/grammar.rs:36:7: 36:10
    let mut _31: &std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let mut _32: &std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let mut _35: &std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    let mut _36: &std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at src/grammar.rs:33:10: 33:19
        let _6: isize;                   // in scope 1 at src/grammar.rs:33:10: 33:19
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at src/grammar.rs:33:10: 33:19
            let _21: &std::string::String; // in scope 2 at src/grammar.rs:35:12: 35:18
            let _22: &std::string::String; // in scope 2 at src/grammar.rs:35:12: 35:18
            let _25: &i32;               // in scope 2 at src/grammar.rs:36:7: 36:10
            let _26: &i32;               // in scope 2 at src/grammar.rs:36:7: 36:10
            let _29: &std::vec::Vec<grammar::AddTerm>; // in scope 2 at src/grammar.rs:37:10: 37:22
            let _30: &std::vec::Vec<grammar::AddTerm>; // in scope 2 at src/grammar.rs:37:10: 37:22
            let _33: &std::vec::Vec<grammar::MultTerm>; // in scope 2 at src/grammar.rs:38:11: 38:24
            let _34: &std::vec::Vec<grammar::MultTerm>; // in scope 2 at src/grammar.rs:38:11: 38:24
            scope 3 {
                debug __self_0 => _21;   // in scope 3 at src/grammar.rs:35:12: 35:18
                debug __arg_1_0 => _22;  // in scope 3 at src/grammar.rs:35:12: 35:18
            }
            scope 4 {
                debug __self_0 => _25;   // in scope 4 at src/grammar.rs:36:7: 36:10
                debug __arg_1_0 => _26;  // in scope 4 at src/grammar.rs:36:7: 36:10
            }
            scope 5 {
                debug __self_0 => _29;   // in scope 5 at src/grammar.rs:37:10: 37:22
                debug __arg_1_0 => _30;  // in scope 5 at src/grammar.rs:37:10: 37:22
            }
            scope 6 {
                debug __self_0 => _33;   // in scope 6 at src/grammar.rs:38:11: 38:24
                debug __arg_1_0 => _34;  // in scope 6 at src/grammar.rs:38:11: 38:24
            }
            scope 7 {
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:33:10: 33:19
        StorageLive(_4);                 // scope 0 at src/grammar.rs:33:10: 33:19
        StorageLive(_5);                 // scope 0 at src/grammar.rs:33:10: 33:19
        _5 = _1;                         // scope 0 at src/grammar.rs:33:10: 33:19
        _4 = _5;                         // scope 0 at src/grammar.rs:33:10: 33:19
        _3 = discriminant((*_4));        // scope 0 at src/grammar.rs:33:10: 33:19
        StorageDead(_4);                 // scope 0 at src/grammar.rs:33:18: 33:19
        StorageDead(_5);                 // scope 0 at src/grammar.rs:33:18: 33:19
        StorageLive(_6);                 // scope 1 at src/grammar.rs:33:10: 33:19
        StorageLive(_7);                 // scope 1 at src/grammar.rs:33:10: 33:19
        StorageLive(_8);                 // scope 1 at src/grammar.rs:33:10: 33:19
        _8 = _2;                         // scope 1 at src/grammar.rs:33:10: 33:19
        _7 = _8;                         // scope 1 at src/grammar.rs:33:10: 33:19
        _6 = discriminant((*_7));        // scope 1 at src/grammar.rs:33:10: 33:19
        StorageDead(_7);                 // scope 1 at src/grammar.rs:33:18: 33:19
        StorageDead(_8);                 // scope 1 at src/grammar.rs:33:18: 33:19
        StorageLive(_9);                 // scope 2 at src/grammar.rs:33:10: 33:19
        StorageLive(_10);                // scope 2 at src/grammar.rs:33:10: 33:19
        StorageLive(_11);                // scope 2 at src/grammar.rs:33:10: 33:19
        _11 = _3;                        // scope 2 at src/grammar.rs:33:10: 33:19
        StorageLive(_12);                // scope 2 at src/grammar.rs:33:10: 33:19
        _12 = _6;                        // scope 2 at src/grammar.rs:33:10: 33:19
        _10 = Eq(move _11, move _12);    // scope 2 at src/grammar.rs:33:10: 33:19
        StorageDead(_12);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_11);                // scope 2 at src/grammar.rs:33:18: 33:19
        _9 = move _10;                   // scope 2 at src/grammar.rs:33:10: 33:19
        StorageDead(_10);                // scope 2 at src/grammar.rs:33:18: 33:19
        switchInt(move _9) -> [false: bb15, otherwise: bb1]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb1: {
        StorageLive(_13);                // scope 2 at src/grammar.rs:33:10: 33:19
        StorageLive(_14);                // scope 2 at src/grammar.rs:33:10: 33:19
        _14 = _1;                        // scope 2 at src/grammar.rs:33:10: 33:19
        StorageLive(_15);                // scope 2 at src/grammar.rs:33:10: 33:19
        _15 = _2;                        // scope 2 at src/grammar.rs:33:10: 33:19
        (_13.0: &grammar::Expr) = move _14; // scope 2 at src/grammar.rs:33:10: 33:19
        (_13.1: &grammar::Expr) = move _15; // scope 2 at src/grammar.rs:33:10: 33:19
        StorageDead(_15);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_14);                // scope 2 at src/grammar.rs:33:18: 33:19
        _20 = discriminant((*(_13.0: &grammar::Expr))); // scope 2 at src/grammar.rs:33:10: 33:19
        switchInt(move _20) -> [0_isize: bb2, 1_isize: bb4, 2_isize: bb5, 3_isize: bb6, otherwise: bb3]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb2: {
        _16 = discriminant((*(_13.1: &grammar::Expr))); // scope 2 at src/grammar.rs:33:10: 33:19
        switchInt(move _16) -> [0_isize: bb7, otherwise: bb3]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb3: {
        unreachable;                     // scope 7 at src/grammar.rs:33:10: 33:19
    }

    bb4: {
        _17 = discriminant((*(_13.1: &grammar::Expr))); // scope 2 at src/grammar.rs:33:10: 33:19
        switchInt(move _17) -> [1_isize: bb9, otherwise: bb3]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb5: {
        _18 = discriminant((*(_13.1: &grammar::Expr))); // scope 2 at src/grammar.rs:33:10: 33:19
        switchInt(move _18) -> [2_isize: bb10, otherwise: bb3]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb6: {
        _19 = discriminant((*(_13.1: &grammar::Expr))); // scope 2 at src/grammar.rs:33:10: 33:19
        switchInt(move _19) -> [3_isize: bb12, otherwise: bb3]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb7: {
        StorageLive(_21);                // scope 2 at src/grammar.rs:35:12: 35:18
        _21 = &(((*(_13.0: &grammar::Expr)) as Variable).0: std::string::String); // scope 2 at src/grammar.rs:35:12: 35:18
        StorageLive(_22);                // scope 2 at src/grammar.rs:35:12: 35:18
        _22 = &(((*(_13.1: &grammar::Expr)) as Variable).0: std::string::String); // scope 2 at src/grammar.rs:35:12: 35:18
        StorageLive(_23);                // scope 3 at src/grammar.rs:35:12: 35:18
        _23 = _21;                       // scope 3 at src/grammar.rs:35:12: 35:18
        StorageLive(_24);                // scope 3 at src/grammar.rs:35:12: 35:18
        _24 = _22;                       // scope 3 at src/grammar.rs:35:12: 35:18
        _0 = <String as PartialEq>::eq(move _23, move _24) -> bb8; // scope 3 at src/grammar.rs:35:12: 35:18
                                         // mir::Constant
                                         // + span: src/grammar.rs:35:12: 35:18
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::string::String, &'s std::string::String) -> bool {<std::string::String as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_24);                // scope 3 at src/grammar.rs:35:17: 35:18
        StorageDead(_23);                // scope 3 at src/grammar.rs:35:17: 35:18
        StorageDead(_22);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_21);                // scope 2 at src/grammar.rs:33:18: 33:19
        goto -> bb14;                    // scope 2 at src/grammar.rs:33:18: 33:19
    }

    bb9: {
        StorageLive(_25);                // scope 2 at src/grammar.rs:36:7: 36:10
        _25 = &(((*(_13.0: &grammar::Expr)) as Num).0: i32); // scope 2 at src/grammar.rs:36:7: 36:10
        StorageLive(_26);                // scope 2 at src/grammar.rs:36:7: 36:10
        _26 = &(((*(_13.1: &grammar::Expr)) as Num).0: i32); // scope 2 at src/grammar.rs:36:7: 36:10
        StorageLive(_27);                // scope 4 at src/grammar.rs:36:7: 36:10
        _27 = (*_25);                    // scope 4 at src/grammar.rs:36:7: 36:10
        StorageLive(_28);                // scope 4 at src/grammar.rs:36:7: 36:10
        _28 = (*_26);                    // scope 4 at src/grammar.rs:36:7: 36:10
        _0 = Eq(move _27, move _28);     // scope 4 at src/grammar.rs:36:7: 36:10
        StorageDead(_28);                // scope 4 at src/grammar.rs:36:9: 36:10
        StorageDead(_27);                // scope 4 at src/grammar.rs:36:9: 36:10
        StorageDead(_26);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_25);                // scope 2 at src/grammar.rs:33:18: 33:19
        goto -> bb14;                    // scope 2 at src/grammar.rs:33:18: 33:19
    }

    bb10: {
        StorageLive(_29);                // scope 2 at src/grammar.rs:37:10: 37:22
        _29 = &(((*(_13.0: &grammar::Expr)) as AddSub).0: std::vec::Vec<grammar::AddTerm>); // scope 2 at src/grammar.rs:37:10: 37:22
        StorageLive(_30);                // scope 2 at src/grammar.rs:37:10: 37:22
        _30 = &(((*(_13.1: &grammar::Expr)) as AddSub).0: std::vec::Vec<grammar::AddTerm>); // scope 2 at src/grammar.rs:37:10: 37:22
        StorageLive(_31);                // scope 5 at src/grammar.rs:37:10: 37:22
        _31 = _29;                       // scope 5 at src/grammar.rs:37:10: 37:22
        StorageLive(_32);                // scope 5 at src/grammar.rs:37:10: 37:22
        _32 = _30;                       // scope 5 at src/grammar.rs:37:10: 37:22
        _0 = <Vec<grammar::AddTerm> as PartialEq>::eq(move _31, move _32) -> bb11; // scope 5 at src/grammar.rs:37:10: 37:22
                                         // mir::Constant
                                         // + span: src/grammar.rs:37:10: 37:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::vec::Vec<grammar::AddTerm>, &'s std::vec::Vec<grammar::AddTerm>) -> bool {<std::vec::Vec<grammar::AddTerm> as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_32);                // scope 5 at src/grammar.rs:37:21: 37:22
        StorageDead(_31);                // scope 5 at src/grammar.rs:37:21: 37:22
        StorageDead(_30);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_29);                // scope 2 at src/grammar.rs:33:18: 33:19
        goto -> bb14;                    // scope 2 at src/grammar.rs:33:18: 33:19
    }

    bb12: {
        StorageLive(_33);                // scope 2 at src/grammar.rs:38:11: 38:24
        _33 = &(((*(_13.0: &grammar::Expr)) as MultDiv).0: std::vec::Vec<grammar::MultTerm>); // scope 2 at src/grammar.rs:38:11: 38:24
        StorageLive(_34);                // scope 2 at src/grammar.rs:38:11: 38:24
        _34 = &(((*(_13.1: &grammar::Expr)) as MultDiv).0: std::vec::Vec<grammar::MultTerm>); // scope 2 at src/grammar.rs:38:11: 38:24
        StorageLive(_35);                // scope 6 at src/grammar.rs:38:11: 38:24
        _35 = _33;                       // scope 6 at src/grammar.rs:38:11: 38:24
        StorageLive(_36);                // scope 6 at src/grammar.rs:38:11: 38:24
        _36 = _34;                       // scope 6 at src/grammar.rs:38:11: 38:24
        _0 = <Vec<grammar::MultTerm> as PartialEq>::eq(move _35, move _36) -> bb13; // scope 6 at src/grammar.rs:38:11: 38:24
                                         // mir::Constant
                                         // + span: src/grammar.rs:38:11: 38:24
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::vec::Vec<grammar::MultTerm>, &'s std::vec::Vec<grammar::MultTerm>) -> bool {<std::vec::Vec<grammar::MultTerm> as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_36);                // scope 6 at src/grammar.rs:38:23: 38:24
        StorageDead(_35);                // scope 6 at src/grammar.rs:38:23: 38:24
        StorageDead(_34);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_33);                // scope 2 at src/grammar.rs:33:18: 33:19
        goto -> bb14;                    // scope 2 at src/grammar.rs:33:18: 33:19
    }

    bb14: {
        StorageDead(_13);                // scope 2 at src/grammar.rs:33:18: 33:19
        goto -> bb16;                    // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb15: {
        _0 = const false;                // scope 2 at src/grammar.rs:33:10: 33:19
        goto -> bb16;                    // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb16: {
        StorageDead(_9);                 // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_6);                 // scope 1 at src/grammar.rs:33:18: 33:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:33:18: 33:19
        return;                          // scope 0 at src/grammar.rs:33:19: 33:19
    }
}

fn program::{closure#9}(_1: &[closure@src/parser.rs:140:74: 140:86]) -> Box<dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]>>; // return place in scope 0 at src/parser.rs:140:77: 140:77
    let mut _2: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]>>; // in scope 0 at src/parser.rs:140:77: 140:86

    bb0: {
        StorageLive(_2);                 // scope 0 at src/parser.rs:140:77: 140:86
        _2 = if_stmt() -> bb1;           // scope 0 at src/parser.rs:140:77: 140:86
                                         // mir::Constant
                                         // + span: src/parser.rs:140:77: 140:84
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = move _2 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:140:77: 140:86
        StorageDead(_2);                 // scope 0 at src/parser.rs:140:85: 140:86
        return;                          // scope 0 at src/parser.rs:140:86: 140:86
    }
}

fn if_stmt::{closure#4}(_1: &[closure@src/parser.rs:112:18: 112:96], _2: ((((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block), Option<grammar::Block>)) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/parser.rs:112:55: 112:55
    let _3: grammar::Expr;               // in scope 0 at src/parser.rs:112:23: 112:24
    let _4: grammar::Comparator;         // in scope 0 at src/parser.rs:112:26: 112:29
    let _5: grammar::Expr;               // in scope 0 at src/parser.rs:112:32: 112:33
    let _6: grammar::Block;              // in scope 0 at src/parser.rs:112:36: 112:41
    let _7: std::option::Option<grammar::Block>; // in scope 0 at src/parser.rs:112:44: 112:52
    let mut _8: grammar::Expr;           // in scope 0 at src/parser.rs:112:69: 112:70
    let mut _9: grammar::Comparator;     // in scope 0 at src/parser.rs:112:72: 112:75
    let mut _10: grammar::Expr;          // in scope 0 at src/parser.rs:112:77: 112:78
    let mut _11: grammar::Block;         // in scope 0 at src/parser.rs:112:80: 112:85
    let mut _12: std::option::Option<grammar::Block>; // in scope 0 at src/parser.rs:112:87: 112:95
    scope 1 {
        debug l => _3;                   // in scope 1 at src/parser.rs:112:23: 112:24
        debug cmp => _4;                 // in scope 1 at src/parser.rs:112:26: 112:29
        debug r => _5;                   // in scope 1 at src/parser.rs:112:32: 112:33
        debug block => _6;               // in scope 1 at src/parser.rs:112:36: 112:41
        debug else_opt => _7;            // in scope 1 at src/parser.rs:112:44: 112:52
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/parser.rs:112:23: 112:24
        _3 = move ((((_2.0: (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)).0: ((grammar::Expr, grammar::Comparator), grammar::Expr)).0: (grammar::Expr, grammar::Comparator)).0: grammar::Expr); // scope 0 at src/parser.rs:112:23: 112:24
        StorageLive(_4);                 // scope 0 at src/parser.rs:112:26: 112:29
        _4 = move ((((_2.0: (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)).0: ((grammar::Expr, grammar::Comparator), grammar::Expr)).0: (grammar::Expr, grammar::Comparator)).1: grammar::Comparator); // scope 0 at src/parser.rs:112:26: 112:29
        StorageLive(_5);                 // scope 0 at src/parser.rs:112:32: 112:33
        _5 = move (((_2.0: (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)).0: ((grammar::Expr, grammar::Comparator), grammar::Expr)).1: grammar::Expr); // scope 0 at src/parser.rs:112:32: 112:33
        StorageLive(_6);                 // scope 0 at src/parser.rs:112:36: 112:41
        _6 = move ((_2.0: (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)).1: grammar::Block); // scope 0 at src/parser.rs:112:36: 112:41
        StorageLive(_7);                 // scope 0 at src/parser.rs:112:44: 112:52
        _7 = move (_2.1: std::option::Option<grammar::Block>); // scope 0 at src/parser.rs:112:44: 112:52
        StorageLive(_8);                 // scope 1 at src/parser.rs:112:69: 112:70
        _8 = move _3;                    // scope 1 at src/parser.rs:112:69: 112:70
        StorageLive(_9);                 // scope 1 at src/parser.rs:112:72: 112:75
        _9 = move _4;                    // scope 1 at src/parser.rs:112:72: 112:75
        StorageLive(_10);                // scope 1 at src/parser.rs:112:77: 112:78
        _10 = move _5;                   // scope 1 at src/parser.rs:112:77: 112:78
        StorageLive(_11);                // scope 1 at src/parser.rs:112:80: 112:85
        _11 = move _6;                   // scope 1 at src/parser.rs:112:80: 112:85
        StorageLive(_12);                // scope 1 at src/parser.rs:112:87: 112:95
        _12 = move _7;                   // scope 1 at src/parser.rs:112:87: 112:95
        ((_0 as If).0: grammar::Expr) = move _8; // scope 1 at src/parser.rs:112:55: 112:96
        ((_0 as If).1: grammar::Comparator) = move _9; // scope 1 at src/parser.rs:112:55: 112:96
        ((_0 as If).2: grammar::Expr) = move _10; // scope 1 at src/parser.rs:112:55: 112:96
        ((_0 as If).3: grammar::Block) = move _11; // scope 1 at src/parser.rs:112:55: 112:96
        ((_0 as If).4: std::option::Option<grammar::Block>) = move _12; // scope 1 at src/parser.rs:112:55: 112:96
        discriminant(_0) = 2;            // scope 1 at src/parser.rs:112:55: 112:96
        StorageDead(_12);                // scope 1 at src/parser.rs:112:95: 112:96
        StorageDead(_11);                // scope 1 at src/parser.rs:112:95: 112:96
        StorageDead(_10);                // scope 1 at src/parser.rs:112:95: 112:96
        StorageDead(_9);                 // scope 1 at src/parser.rs:112:95: 112:96
        StorageDead(_8);                 // scope 1 at src/parser.rs:112:95: 112:96
        StorageDead(_7);                 // scope 0 at src/parser.rs:112:95: 112:96
        StorageDead(_6);                 // scope 0 at src/parser.rs:112:95: 112:96
        StorageDead(_5);                 // scope 0 at src/parser.rs:112:95: 112:96
        StorageDead(_4);                 // scope 0 at src/parser.rs:112:95: 112:96
        StorageDead(_3);                 // scope 0 at src/parser.rs:112:95: 112:96
        return;                          // scope 0 at src/parser.rs:112:96: 112:96
    }
}

fn grammar::<impl at src/grammar.rs:31:10: 31:15>::fmt(_1: &grammar::Expr, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/grammar.rs:31:10: 31:15
    debug f => _2;                       // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _3: (&grammar::Expr,);       // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _4: &grammar::Expr;          // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _5: isize;                   // in scope 0 at src/grammar.rs:31:10: 31:15
    let _6: &std::string::String;        // in scope 0 at src/grammar.rs:35:12: 35:18
    let mut _8: std::fmt::DebugTuple;    // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _9: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _10: &str;                   // in scope 0 at src/grammar.rs:31:10: 31:15
    let _11: &str;                       // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _12: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _13: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:35:12: 35:18
    let mut _15: &&std::string::String;  // in scope 0 at src/grammar.rs:35:12: 35:18
    let _16: &&std::string::String;      // in scope 0 at src/grammar.rs:35:12: 35:18
    let _17: &std::string::String;       // in scope 0 at src/grammar.rs:35:12: 35:18
    let mut _18: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    let _19: &i32;                       // in scope 0 at src/grammar.rs:36:7: 36:10
    let mut _21: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _22: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _23: &str;                   // in scope 0 at src/grammar.rs:31:10: 31:15
    let _24: &str;                       // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _25: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _26: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _27: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:36:7: 36:10
    let mut _28: &&i32;                  // in scope 0 at src/grammar.rs:36:7: 36:10
    let _29: &&i32;                      // in scope 0 at src/grammar.rs:36:7: 36:10
    let _30: &i32;                       // in scope 0 at src/grammar.rs:36:7: 36:10
    let mut _31: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    let _32: &std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let mut _34: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _35: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _36: &str;                   // in scope 0 at src/grammar.rs:31:10: 31:15
    let _37: &str;                       // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _38: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _39: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _40: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:37:10: 37:22
    let mut _41: &&std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let _42: &&std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let _43: &std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let mut _44: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    let _45: &std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    let mut _47: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _48: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _49: &str;                   // in scope 0 at src/grammar.rs:31:10: 31:15
    let _50: &str;                       // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _51: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _52: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    let mut _53: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:38:11: 38:24
    let mut _54: &&std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    let _55: &&std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    let _56: &std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    let mut _57: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:31:10: 31:15
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at src/grammar.rs:35:12: 35:18
        let _7: &mut std::fmt::DebugTuple; // in scope 1 at src/grammar.rs:31:10: 31:15
        scope 2 {
            debug debug_trait_builder => _7; // in scope 2 at src/grammar.rs:31:10: 31:15
            scope 3 {
            }
        }
    }
    scope 4 {
        debug __self_0 => _19;           // in scope 4 at src/grammar.rs:36:7: 36:10
        let _20: &mut std::fmt::DebugTuple; // in scope 4 at src/grammar.rs:31:10: 31:15
        scope 5 {
            debug debug_trait_builder => _20; // in scope 5 at src/grammar.rs:31:10: 31:15
            scope 6 {
            }
        }
    }
    scope 7 {
        debug __self_0 => _32;           // in scope 7 at src/grammar.rs:37:10: 37:22
        let _33: &mut std::fmt::DebugTuple; // in scope 7 at src/grammar.rs:31:10: 31:15
        scope 8 {
            debug debug_trait_builder => _33; // in scope 8 at src/grammar.rs:31:10: 31:15
            scope 9 {
            }
        }
    }
    scope 10 {
        debug __self_0 => _45;           // in scope 10 at src/grammar.rs:38:11: 38:24
        let _46: &mut std::fmt::DebugTuple; // in scope 10 at src/grammar.rs:31:10: 31:15
        scope 11 {
            debug debug_trait_builder => _46; // in scope 11 at src/grammar.rs:31:10: 31:15
            scope 12 {
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:31:10: 31:15
        StorageLive(_4);                 // scope 0 at src/grammar.rs:31:10: 31:15
        _4 = _1;                         // scope 0 at src/grammar.rs:31:10: 31:15
        (_3.0: &grammar::Expr) = move _4; // scope 0 at src/grammar.rs:31:10: 31:15
        StorageDead(_4);                 // scope 0 at src/grammar.rs:31:14: 31:15
        _5 = discriminant((*(_3.0: &grammar::Expr))); // scope 0 at src/grammar.rs:31:10: 31:15
        switchInt(move _5) -> [0_isize: bb3, 1_isize: bb7, 2_isize: bb11, 3_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar.rs:31:10: 31:15
    }

    bb1: {
        StorageLive(_45);                // scope 0 at src/grammar.rs:38:11: 38:24
        _45 = &(((*(_3.0: &grammar::Expr)) as MultDiv).0: std::vec::Vec<grammar::MultTerm>); // scope 0 at src/grammar.rs:38:11: 38:24
        StorageLive(_46);                // scope 10 at src/grammar.rs:31:10: 31:15
        StorageLive(_47);                // scope 10 at src/grammar.rs:31:10: 31:15
        StorageLive(_48);                // scope 10 at src/grammar.rs:31:10: 31:15
        _48 = &mut (*_2);                // scope 10 at src/grammar.rs:31:10: 31:15
        StorageLive(_49);                // scope 10 at src/grammar.rs:31:10: 31:15
        StorageLive(_50);                // scope 10 at src/grammar.rs:31:10: 31:15
        _50 = const "MultDiv";           // scope 10 at src/grammar.rs:31:10: 31:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 117, 108, 116, 68, 105, 118], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 117, 108, 116, 68, 105, 118], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _49 = _50;                       // scope 10 at src/grammar.rs:31:10: 31:15
        _47 = Formatter::debug_tuple(move _48, move _49) -> bb15; // scope 10 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar.rs:31:10: 31:15
    }

    bb3: {
        StorageLive(_6);                 // scope 0 at src/grammar.rs:35:12: 35:18
        _6 = &(((*(_3.0: &grammar::Expr)) as Variable).0: std::string::String); // scope 0 at src/grammar.rs:35:12: 35:18
        StorageLive(_7);                 // scope 1 at src/grammar.rs:31:10: 31:15
        StorageLive(_8);                 // scope 1 at src/grammar.rs:31:10: 31:15
        StorageLive(_9);                 // scope 1 at src/grammar.rs:31:10: 31:15
        _9 = &mut (*_2);                 // scope 1 at src/grammar.rs:31:10: 31:15
        StorageLive(_10);                // scope 1 at src/grammar.rs:31:10: 31:15
        StorageLive(_11);                // scope 1 at src/grammar.rs:31:10: 31:15
        _11 = const "Variable";          // scope 1 at src/grammar.rs:31:10: 31:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [86, 97, 114, 105, 97, 98, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [86, 97, 114, 105, 97, 98, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
        _10 = _11;                       // scope 1 at src/grammar.rs:31:10: 31:15
        _8 = Formatter::debug_tuple(move _9, move _10) -> bb4; // scope 1 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_10);                // scope 1 at src/grammar.rs:31:14: 31:15
        StorageDead(_9);                 // scope 1 at src/grammar.rs:31:14: 31:15
        _7 = &mut _8;                    // scope 1 at src/grammar.rs:31:10: 31:15
        StorageDead(_11);                // scope 1 at src/grammar.rs:31:14: 31:15
        StorageLive(_12);                // scope 2 at src/grammar.rs:31:10: 31:15
        StorageLive(_13);                // scope 2 at src/grammar.rs:31:10: 31:15
        _13 = &mut (*_7);                // scope 2 at src/grammar.rs:31:10: 31:15
        StorageLive(_14);                // scope 2 at src/grammar.rs:35:12: 35:18
        StorageLive(_15);                // scope 2 at src/grammar.rs:35:12: 35:18
        StorageLive(_16);                // scope 2 at src/grammar.rs:35:12: 35:18
        StorageLive(_17);                // scope 2 at src/grammar.rs:35:12: 35:18
        _17 = _6;                        // scope 2 at src/grammar.rs:35:12: 35:18
        _16 = &_17;                      // scope 2 at src/grammar.rs:35:12: 35:18
        _15 = _16;                       // scope 2 at src/grammar.rs:35:12: 35:18
        _14 = move _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at src/grammar.rs:35:12: 35:18
        StorageDead(_15);                // scope 2 at src/grammar.rs:35:17: 35:18
        _12 = DebugTuple::field(move _13, move _14) -> bb5; // scope 2 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_14);                // scope 2 at src/grammar.rs:31:14: 31:15
        StorageDead(_13);                // scope 2 at src/grammar.rs:31:14: 31:15
        StorageDead(_17);                // scope 2 at src/grammar.rs:31:14: 31:15
        StorageDead(_16);                // scope 2 at src/grammar.rs:31:14: 31:15
        StorageDead(_12);                // scope 2 at src/grammar.rs:31:14: 31:15
        StorageLive(_18);                // scope 3 at src/grammar.rs:31:10: 31:15
        _18 = &mut (*_7);                // scope 3 at src/grammar.rs:31:10: 31:15
        _0 = DebugTuple::finish(move _18) -> bb6; // scope 3 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_18);                // scope 3 at src/grammar.rs:31:14: 31:15
        StorageDead(_8);                 // scope 1 at src/grammar.rs:31:14: 31:15
        StorageDead(_7);                 // scope 1 at src/grammar.rs:31:14: 31:15
        StorageDead(_6);                 // scope 0 at src/grammar.rs:31:14: 31:15
        goto -> bb18;                    // scope 0 at src/grammar.rs:31:14: 31:15
    }

    bb7: {
        StorageLive(_19);                // scope 0 at src/grammar.rs:36:7: 36:10
        _19 = &(((*(_3.0: &grammar::Expr)) as Num).0: i32); // scope 0 at src/grammar.rs:36:7: 36:10
        StorageLive(_20);                // scope 4 at src/grammar.rs:31:10: 31:15
        StorageLive(_21);                // scope 4 at src/grammar.rs:31:10: 31:15
        StorageLive(_22);                // scope 4 at src/grammar.rs:31:10: 31:15
        _22 = &mut (*_2);                // scope 4 at src/grammar.rs:31:10: 31:15
        StorageLive(_23);                // scope 4 at src/grammar.rs:31:10: 31:15
        StorageLive(_24);                // scope 4 at src/grammar.rs:31:10: 31:15
        _24 = const "Num";               // scope 4 at src/grammar.rs:31:10: 31:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [78, 117, 109], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [78, 117, 109], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 }) }
        _23 = _24;                       // scope 4 at src/grammar.rs:31:10: 31:15
        _21 = Formatter::debug_tuple(move _22, move _23) -> bb8; // scope 4 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_23);                // scope 4 at src/grammar.rs:31:14: 31:15
        StorageDead(_22);                // scope 4 at src/grammar.rs:31:14: 31:15
        _20 = &mut _21;                  // scope 4 at src/grammar.rs:31:10: 31:15
        StorageDead(_24);                // scope 4 at src/grammar.rs:31:14: 31:15
        StorageLive(_25);                // scope 5 at src/grammar.rs:31:10: 31:15
        StorageLive(_26);                // scope 5 at src/grammar.rs:31:10: 31:15
        _26 = &mut (*_20);               // scope 5 at src/grammar.rs:31:10: 31:15
        StorageLive(_27);                // scope 5 at src/grammar.rs:36:7: 36:10
        StorageLive(_28);                // scope 5 at src/grammar.rs:36:7: 36:10
        StorageLive(_29);                // scope 5 at src/grammar.rs:36:7: 36:10
        StorageLive(_30);                // scope 5 at src/grammar.rs:36:7: 36:10
        _30 = _19;                       // scope 5 at src/grammar.rs:36:7: 36:10
        _29 = &_30;                      // scope 5 at src/grammar.rs:36:7: 36:10
        _28 = _29;                       // scope 5 at src/grammar.rs:36:7: 36:10
        _27 = move _28 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 5 at src/grammar.rs:36:7: 36:10
        StorageDead(_28);                // scope 5 at src/grammar.rs:36:9: 36:10
        _25 = DebugTuple::field(move _26, move _27) -> bb9; // scope 5 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_27);                // scope 5 at src/grammar.rs:31:14: 31:15
        StorageDead(_26);                // scope 5 at src/grammar.rs:31:14: 31:15
        StorageDead(_30);                // scope 5 at src/grammar.rs:31:14: 31:15
        StorageDead(_29);                // scope 5 at src/grammar.rs:31:14: 31:15
        StorageDead(_25);                // scope 5 at src/grammar.rs:31:14: 31:15
        StorageLive(_31);                // scope 6 at src/grammar.rs:31:10: 31:15
        _31 = &mut (*_20);               // scope 6 at src/grammar.rs:31:10: 31:15
        _0 = DebugTuple::finish(move _31) -> bb10; // scope 6 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_31);                // scope 6 at src/grammar.rs:31:14: 31:15
        StorageDead(_21);                // scope 4 at src/grammar.rs:31:14: 31:15
        StorageDead(_20);                // scope 4 at src/grammar.rs:31:14: 31:15
        StorageDead(_19);                // scope 0 at src/grammar.rs:31:14: 31:15
        goto -> bb18;                    // scope 0 at src/grammar.rs:31:14: 31:15
    }

    bb11: {
        StorageLive(_32);                // scope 0 at src/grammar.rs:37:10: 37:22
        _32 = &(((*(_3.0: &grammar::Expr)) as AddSub).0: std::vec::Vec<grammar::AddTerm>); // scope 0 at src/grammar.rs:37:10: 37:22
        StorageLive(_33);                // scope 7 at src/grammar.rs:31:10: 31:15
        StorageLive(_34);                // scope 7 at src/grammar.rs:31:10: 31:15
        StorageLive(_35);                // scope 7 at src/grammar.rs:31:10: 31:15
        _35 = &mut (*_2);                // scope 7 at src/grammar.rs:31:10: 31:15
        StorageLive(_36);                // scope 7 at src/grammar.rs:31:10: 31:15
        StorageLive(_37);                // scope 7 at src/grammar.rs:31:10: 31:15
        _37 = const "AddSub";            // scope 7 at src/grammar.rs:31:10: 31:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [65, 100, 100, 83, 117, 98], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 100, 100, 83, 117, 98], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _36 = _37;                       // scope 7 at src/grammar.rs:31:10: 31:15
        _34 = Formatter::debug_tuple(move _35, move _36) -> bb12; // scope 7 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_36);                // scope 7 at src/grammar.rs:31:14: 31:15
        StorageDead(_35);                // scope 7 at src/grammar.rs:31:14: 31:15
        _33 = &mut _34;                  // scope 7 at src/grammar.rs:31:10: 31:15
        StorageDead(_37);                // scope 7 at src/grammar.rs:31:14: 31:15
        StorageLive(_38);                // scope 8 at src/grammar.rs:31:10: 31:15
        StorageLive(_39);                // scope 8 at src/grammar.rs:31:10: 31:15
        _39 = &mut (*_33);               // scope 8 at src/grammar.rs:31:10: 31:15
        StorageLive(_40);                // scope 8 at src/grammar.rs:37:10: 37:22
        StorageLive(_41);                // scope 8 at src/grammar.rs:37:10: 37:22
        StorageLive(_42);                // scope 8 at src/grammar.rs:37:10: 37:22
        StorageLive(_43);                // scope 8 at src/grammar.rs:37:10: 37:22
        _43 = _32;                       // scope 8 at src/grammar.rs:37:10: 37:22
        _42 = &_43;                      // scope 8 at src/grammar.rs:37:10: 37:22
        _41 = _42;                       // scope 8 at src/grammar.rs:37:10: 37:22
        _40 = move _41 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 8 at src/grammar.rs:37:10: 37:22
        StorageDead(_41);                // scope 8 at src/grammar.rs:37:21: 37:22
        _38 = DebugTuple::field(move _39, move _40) -> bb13; // scope 8 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_40);                // scope 8 at src/grammar.rs:31:14: 31:15
        StorageDead(_39);                // scope 8 at src/grammar.rs:31:14: 31:15
        StorageDead(_43);                // scope 8 at src/grammar.rs:31:14: 31:15
        StorageDead(_42);                // scope 8 at src/grammar.rs:31:14: 31:15
        StorageDead(_38);                // scope 8 at src/grammar.rs:31:14: 31:15
        StorageLive(_44);                // scope 9 at src/grammar.rs:31:10: 31:15
        _44 = &mut (*_33);               // scope 9 at src/grammar.rs:31:10: 31:15
        _0 = DebugTuple::finish(move _44) -> bb14; // scope 9 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_44);                // scope 9 at src/grammar.rs:31:14: 31:15
        StorageDead(_34);                // scope 7 at src/grammar.rs:31:14: 31:15
        StorageDead(_33);                // scope 7 at src/grammar.rs:31:14: 31:15
        StorageDead(_32);                // scope 0 at src/grammar.rs:31:14: 31:15
        goto -> bb18;                    // scope 0 at src/grammar.rs:31:14: 31:15
    }

    bb15: {
        StorageDead(_49);                // scope 10 at src/grammar.rs:31:14: 31:15
        StorageDead(_48);                // scope 10 at src/grammar.rs:31:14: 31:15
        _46 = &mut _47;                  // scope 10 at src/grammar.rs:31:10: 31:15
        StorageDead(_50);                // scope 10 at src/grammar.rs:31:14: 31:15
        StorageLive(_51);                // scope 11 at src/grammar.rs:31:10: 31:15
        StorageLive(_52);                // scope 11 at src/grammar.rs:31:10: 31:15
        _52 = &mut (*_46);               // scope 11 at src/grammar.rs:31:10: 31:15
        StorageLive(_53);                // scope 11 at src/grammar.rs:38:11: 38:24
        StorageLive(_54);                // scope 11 at src/grammar.rs:38:11: 38:24
        StorageLive(_55);                // scope 11 at src/grammar.rs:38:11: 38:24
        StorageLive(_56);                // scope 11 at src/grammar.rs:38:11: 38:24
        _56 = _45;                       // scope 11 at src/grammar.rs:38:11: 38:24
        _55 = &_56;                      // scope 11 at src/grammar.rs:38:11: 38:24
        _54 = _55;                       // scope 11 at src/grammar.rs:38:11: 38:24
        _53 = move _54 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 11 at src/grammar.rs:38:11: 38:24
        StorageDead(_54);                // scope 11 at src/grammar.rs:38:23: 38:24
        _51 = DebugTuple::field(move _52, move _53) -> bb16; // scope 11 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_53);                // scope 11 at src/grammar.rs:31:14: 31:15
        StorageDead(_52);                // scope 11 at src/grammar.rs:31:14: 31:15
        StorageDead(_56);                // scope 11 at src/grammar.rs:31:14: 31:15
        StorageDead(_55);                // scope 11 at src/grammar.rs:31:14: 31:15
        StorageDead(_51);                // scope 11 at src/grammar.rs:31:14: 31:15
        StorageLive(_57);                // scope 12 at src/grammar.rs:31:10: 31:15
        _57 = &mut (*_46);               // scope 12 at src/grammar.rs:31:10: 31:15
        _0 = DebugTuple::finish(move _57) -> bb17; // scope 12 at src/grammar.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:31:10: 31:15
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_57);                // scope 12 at src/grammar.rs:31:14: 31:15
        StorageDead(_47);                // scope 10 at src/grammar.rs:31:14: 31:15
        StorageDead(_46);                // scope 10 at src/grammar.rs:31:14: 31:15
        StorageDead(_45);                // scope 0 at src/grammar.rs:31:14: 31:15
        goto -> bb18;                    // scope 0 at src/grammar.rs:31:14: 31:15
    }

    bb18: {
        StorageDead(_3);                 // scope 0 at src/grammar.rs:31:14: 31:15
        return;                          // scope 0 at src/grammar.rs:31:15: 31:15
    }
}

fn if_stmt() -> Box<dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]>>; // return place in scope 0 at src/parser.rs:90:25: 90:60
    let mut _1: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]>>; // in scope 0 at src/parser.rs:114:13: 114:24
    let _2: [closure@src/parser.rs:92:30: 95:15]; // in scope 0 at src/parser.rs:92:17: 92:27
    let mut _4: &peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:98:30: 98:53
    let _5: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:98:30: 98:53
    let mut _6: grammar_lexer::Token;    // in scope 0 at src/parser.rs:98:34: 98:52
    let mut _7: peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>; // in scope 0 at src/parser.rs:100:17: 101:55
    let mut _8: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>; // in scope 0 at src/parser.rs:100:17: 100:59
    let _9: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>; // in scope 0 at src/parser.rs:100:17: 100:59
    let mut _10: &peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>; // in scope 0 at src/parser.rs:100:17: 100:35
    let _11: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>; // in scope 0 at src/parser.rs:100:17: 100:35
    let mut _12: [closure@src/parser.rs:100:40: 100:58]; // in scope 0 at src/parser.rs:100:40: 100:58
    let mut _13: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>; // in scope 0 at src/parser.rs:101:21: 101:54
    let mut _14: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:101:37: 101:52]>; // in scope 0 at src/parser.rs:101:27: 101:53
    let mut _15: [closure@src/parser.rs:101:37: 101:52]; // in scope 0 at src/parser.rs:101:37: 101:52
    let mut _17: &peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>; // in scope 0 at src/parser.rs:104:21: 111:35
    let _18: peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>; // in scope 0 at src/parser.rs:104:21: 111:35
    let mut _19: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>; // in scope 0 at src/parser.rs:104:21: 110:44
    let _20: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>; // in scope 0 at src/parser.rs:104:21: 110:44
    let mut _21: &peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>; // in scope 0 at src/parser.rs:104:21: 109:38
    let _22: peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>; // in scope 0 at src/parser.rs:104:21: 109:38
    let mut _23: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>; // in scope 0 at src/parser.rs:104:21: 108:43
    let _24: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>; // in scope 0 at src/parser.rs:104:21: 108:43
    let mut _25: &peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>; // in scope 0 at src/parser.rs:104:21: 107:41
    let _26: peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>; // in scope 0 at src/parser.rs:104:21: 107:41
    let mut _27: &peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>; // in scope 0 at src/parser.rs:104:21: 106:32
    let _28: peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>; // in scope 0 at src/parser.rs:104:21: 106:32
    let mut _29: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>; // in scope 0 at src/parser.rs:104:21: 105:48
    let _30: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>; // in scope 0 at src/parser.rs:104:21: 105:48
    let mut _31: &peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:104:21: 104:42
    let _32: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:104:21: 104:42
    let mut _33: grammar_lexer::Token;   // in scope 0 at src/parser.rs:104:25: 104:41
    let mut _34: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>; // in scope 0 at src/parser.rs:105:21: 105:47
    let mut _35: [closure@src/parser.rs:105:31: 105:46]; // in scope 0 at src/parser.rs:105:31: 105:46
    let mut _36: peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>; // in scope 0 at src/parser.rs:106:19: 106:31
    let mut _37: &[closure@src/parser.rs:92:30: 95:15]; // in scope 0 at src/parser.rs:106:19: 106:29
    let mut _38: ();                     // in scope 0 at src/parser.rs:106:19: 106:31
    let mut _39: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>; // in scope 0 at src/parser.rs:107:19: 107:40
    let mut _40: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:108:21: 108:42
    let mut _41: grammar_lexer::Token;   // in scope 0 at src/parser.rs:108:25: 108:41
    let mut _42: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>; // in scope 0 at src/parser.rs:109:19: 109:37
    let mut _43: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:110:21: 110:43
    let mut _44: grammar_lexer::Token;   // in scope 0 at src/parser.rs:110:25: 110:42
    let mut _45: peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>; // in scope 0 at src/parser.rs:111:19: 111:34
    let mut _46: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>; // in scope 0 at src/parser.rs:111:23: 111:33
    let mut _47: [closure@src/parser.rs:112:18: 112:96]; // in scope 0 at src/parser.rs:112:18: 112:96
    let mut _48: std::boxed::Box<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>, grammar::Statement>>; // in scope 0 at src/parser.rs:114:13: 114:24
    let mut _49: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>, grammar::Statement>; // in scope 0 at src/parser.rs:114:22: 114:23
    let mut _50: bool;                   // in scope 0 at src/parser.rs:115:9: 115:10
    let mut _51: bool;                   // in scope 0 at src/parser.rs:115:9: 115:10
    scope 1 {
        debug comparator => _2;          // in scope 1 at src/parser.rs:92:17: 92:27
        let _3: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>; // in scope 1 at src/parser.rs:98:17: 98:27
        scope 2 {
            debug else_block => _3;      // in scope 2 at src/parser.rs:98:17: 98:27
            let _16: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>, grammar::Statement>; // in scope 2 at src/parser.rs:104:17: 104:18
            scope 3 {
                debug p => _16;          // in scope 3 at src/parser.rs:104:17: 104:18
            }
        }
    }

    bb0: {
        _50 = const false;               // scope 0 at src/parser.rs:114:13: 114:24
        _51 = const false;               // scope 0 at src/parser.rs:114:13: 114:24
        StorageLive(_1);                 // scope 0 at src/parser.rs:114:13: 114:24
        StorageLive(_2);                 // scope 0 at src/parser.rs:92:17: 92:27
        StorageLive(_3);                 // scope 1 at src/parser.rs:98:17: 98:27
        StorageLive(_4);                 // scope 1 at src/parser.rs:98:30: 98:53
        StorageLive(_5);                 // scope 1 at src/parser.rs:98:30: 98:53
        StorageLive(_6);                 // scope 1 at src/parser.rs:98:34: 98:52
        discriminant(_6) = 15;           // scope 1 at src/parser.rs:98:34: 98:52
        _5 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _6) -> bb1; // scope 1 at src/parser.rs:98:30: 98:53
                                         // mir::Constant
                                         // + span: src/parser.rs:98:30: 98:33
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = &_5;                        // scope 1 at src/parser.rs:98:30: 98:53
        StorageDead(_6);                 // scope 1 at src/parser.rs:98:52: 98:53
        StorageLive(_7);                 // scope 1 at src/parser.rs:100:17: 101:55
        StorageLive(_8);                 // scope 1 at src/parser.rs:100:17: 100:59
        StorageLive(_9);                 // scope 1 at src/parser.rs:100:17: 100:59
        StorageLive(_10);                // scope 1 at src/parser.rs:100:17: 100:35
        StorageLive(_11);                // scope 1 at src/parser.rs:100:17: 100:35
        _11 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Statement, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {if_stmt}>(if_stmt) -> [return: bb2, unwind: bb55]; // scope 1 at src/parser.rs:100:17: 100:35
                                         // mir::Constant
                                         // + span: src/parser.rs:100:17: 100:26
                                         // + literal: Const { ty: fn(fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: src/parser.rs:100:27: 100:34
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _10 = &_11;                      // scope 1 at src/parser.rs:100:17: 100:35
        StorageLive(_12);                // scope 1 at src/parser.rs:100:40: 100:58
        _9 = <RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {if_stmt}> as peruse::parsers::ParserCombinator>::map::<grammar::Block, [closure@src/parser.rs:100:40: 100:58]>(move _10, move _12) -> [return: bb3, unwind: bb54]; // scope 1 at src/parser.rs:100:17: 100:59
                                         // mir::Constant
                                         // + span: src/parser.rs:100:36: 100:39
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, [closure@src/parser.rs:100:40: 100:58]) -> peruse::parsers::MapParser<<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}> as peruse::parsers::Parser>::I, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block> {<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}> as peruse::parsers::ParserCombinator>::map::<grammar::Block, [closure@src/parser.rs:100:40: 100:58]>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _8 = &_9;                        // scope 1 at src/parser.rs:100:17: 100:59
        StorageDead(_12);                // scope 1 at src/parser.rs:100:58: 100:59
        StorageDead(_10);                // scope 1 at src/parser.rs:100:58: 100:59
        StorageLive(_13);                // scope 1 at src/parser.rs:101:21: 101:54
        StorageLive(_14);                // scope 1 at src/parser.rs:101:27: 101:53
        StorageLive(_15);                // scope 1 at src/parser.rs:101:37: 101:52
        _14 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:101:37: 101:52]>(move _15) -> [return: bb4, unwind: bb53]; // scope 1 at src/parser.rs:101:27: 101:53
                                         // mir::Constant
                                         // + span: src/parser.rs:101:27: 101:36
                                         // + literal: Const { ty: fn([closure@src/parser.rs:101:37: 101:52]) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:101:37: 101:52]> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:101:37: 101:52]>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_15);                // scope 1 at src/parser.rs:101:52: 101:53
        _13 = peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Block, RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:101:37: 101:52]>>(move _14) -> [return: bb5, unwind: bb53]; // scope 1 at src/parser.rs:101:21: 101:54
                                         // mir::Constant
                                         // + span: src/parser.rs:101:21: 101:26
                                         // + literal: Const { ty: fn(peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:101:37: 101:52]>) -> peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block> {peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Block, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, [closure@src/parser.rs:101:37: 101:52]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_14);                // scope 1 at src/parser.rs:101:53: 101:54
        _7 = <MapParser<[grammar_lexer::Token], RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {if_stmt}>, grammar::Block> as peruse::parsers::ParserCombinator>::or::<BoxedParser<[grammar_lexer::Token], grammar::Block>>(move _8, move _13) -> [return: bb6, unwind: bb53]; // scope 1 at src/parser.rs:100:17: 101:55
                                         // mir::Constant
                                         // + span: src/parser.rs:101:18: 101:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>) -> peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block> as peruse::parsers::ParserCombinator>::or::<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_13);                // scope 1 at src/parser.rs:101:54: 101:55
        StorageDead(_8);                 // scope 1 at src/parser.rs:101:54: 101:55
        _3 = <LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<OrParser<MapParser<[grammar_lexer::Token], RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {if_stmt}>, grammar::Block>, BoxedParser<[grammar_lexer::Token], grammar::Block>>>(move _4, move _7) -> [return: bb7, unwind: bb53]; // scope 1 at src/parser.rs:98:30: 102:14
                                         // mir::Constant
                                         // + span: src/parser.rs:99:14: 99:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>) -> peruse::parsers::MapParser<<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, <peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>> as peruse::parsers::Parser>::O> {<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _51 = const true;                // scope 1 at src/parser.rs:102:13: 102:14
        StorageDead(_7);                 // scope 1 at src/parser.rs:102:13: 102:14
        StorageDead(_4);                 // scope 1 at src/parser.rs:102:13: 102:14
        drop(_9) -> [return: bb8, unwind: bb51]; // scope 1 at src/parser.rs:102:14: 102:15
    }

    bb8: {
        drop(_11) -> [return: bb9, unwind: bb52]; // scope 1 at src/parser.rs:102:14: 102:15
    }

    bb9: {
        StorageDead(_11);                // scope 1 at src/parser.rs:102:14: 102:15
        StorageDead(_9);                 // scope 1 at src/parser.rs:102:14: 102:15
        drop(_5) -> [return: bb10, unwind: bb60]; // scope 1 at src/parser.rs:102:14: 102:15
    }

    bb10: {
        StorageDead(_5);                 // scope 1 at src/parser.rs:102:14: 102:15
        StorageLive(_16);                // scope 2 at src/parser.rs:104:17: 104:18
        StorageLive(_17);                // scope 2 at src/parser.rs:104:21: 111:35
        StorageLive(_18);                // scope 2 at src/parser.rs:104:21: 111:35
        StorageLive(_19);                // scope 2 at src/parser.rs:104:21: 110:44
        StorageLive(_20);                // scope 2 at src/parser.rs:104:21: 110:44
        StorageLive(_21);                // scope 2 at src/parser.rs:104:21: 109:38
        StorageLive(_22);                // scope 2 at src/parser.rs:104:21: 109:38
        StorageLive(_23);                // scope 2 at src/parser.rs:104:21: 108:43
        StorageLive(_24);                // scope 2 at src/parser.rs:104:21: 108:43
        StorageLive(_25);                // scope 2 at src/parser.rs:104:21: 107:41
        StorageLive(_26);                // scope 2 at src/parser.rs:104:21: 107:41
        StorageLive(_27);                // scope 2 at src/parser.rs:104:21: 106:32
        StorageLive(_28);                // scope 2 at src/parser.rs:104:21: 106:32
        StorageLive(_29);                // scope 2 at src/parser.rs:104:21: 105:48
        StorageLive(_30);                // scope 2 at src/parser.rs:104:21: 105:48
        StorageLive(_31);                // scope 2 at src/parser.rs:104:21: 104:42
        StorageLive(_32);                // scope 2 at src/parser.rs:104:21: 104:42
        StorageLive(_33);                // scope 2 at src/parser.rs:104:25: 104:41
        discriminant(_33) = 14;          // scope 2 at src/parser.rs:104:25: 104:41
        _32 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _33) -> [return: bb11, unwind: bb60]; // scope 2 at src/parser.rs:104:21: 104:42
                                         // mir::Constant
                                         // + span: src/parser.rs:104:21: 104:24
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _31 = &_32;                      // scope 2 at src/parser.rs:104:21: 104:42
        StorageDead(_33);                // scope 2 at src/parser.rs:104:41: 104:42
        StorageLive(_34);                // scope 2 at src/parser.rs:105:21: 105:47
        StorageLive(_35);                // scope 2 at src/parser.rs:105:31: 105:46
        _34 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>(move _35) -> [return: bb12, unwind: bb50]; // scope 2 at src/parser.rs:105:21: 105:47
                                         // mir::Constant
                                         // + span: src/parser.rs:105:21: 105:30
                                         // + literal: Const { ty: fn([closure@src/parser.rs:105:31: 105:46]) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_35);                // scope 2 at src/parser.rs:105:46: 105:47
        _30 = <LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>(move _31, move _34) -> [return: bb13, unwind: bb50]; // scope 2 at src/parser.rs:104:21: 105:48
                                         // mir::Constant
                                         // + span: src/parser.rs:105:14: 105:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>) -> peruse::parsers::MapParser<<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, <peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]> as peruse::parsers::Parser>::O> {<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _29 = &_30;                      // scope 2 at src/parser.rs:104:21: 105:48
        StorageDead(_34);                // scope 2 at src/parser.rs:105:47: 105:48
        StorageDead(_31);                // scope 2 at src/parser.rs:105:47: 105:48
        StorageLive(_36);                // scope 2 at src/parser.rs:106:19: 106:31
        StorageLive(_37);                // scope 2 at src/parser.rs:106:19: 106:29
        _37 = &_2;                       // scope 2 at src/parser.rs:106:19: 106:29
        StorageLive(_38);                // scope 2 at src/parser.rs:106:19: 106:31
        _36 = <[closure@src/parser.rs:92:30: 95:15] as Fn<()>>::call(move _37, move _38) -> [return: bb14, unwind: bb49]; // scope 2 at src/parser.rs:106:19: 106:31
                                         // mir::Constant
                                         // + span: src/parser.rs:106:19: 106:29
                                         // + literal: Const { ty: for<'r> extern "rust-call" fn(&'r [closure@src/parser.rs:92:30: 95:15], ()) -> <[closure@src/parser.rs:92:30: 95:15] as std::ops::FnOnce<()>>::Output {<[closure@src/parser.rs:92:30: 95:15] as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_38);                // scope 2 at src/parser.rs:106:30: 106:31
        StorageDead(_37);                // scope 2 at src/parser.rs:106:30: 106:31
        _28 = <MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr> as peruse::parsers::ParserCombinator>::then::<MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>(move _29, move _36) -> [return: bb15, unwind: bb49]; // scope 2 at src/parser.rs:104:21: 106:32
                                         // mir::Constant
                                         // + span: src/parser.rs:106:14: 106:18
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>) -> peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr> as peruse::parsers::ParserCombinator>::then::<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _27 = &_28;                      // scope 2 at src/parser.rs:104:21: 106:32
        StorageDead(_36);                // scope 2 at src/parser.rs:106:31: 106:32
        StorageDead(_29);                // scope 2 at src/parser.rs:106:31: 106:32
        StorageLive(_39);                // scope 2 at src/parser.rs:107:19: 107:40
        _39 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>(expression) -> [return: bb16, unwind: bb48]; // scope 2 at src/parser.rs:107:19: 107:40
                                         // mir::Constant
                                         // + span: src/parser.rs:107:19: 107:28
                                         // + literal: Const { ty: fn(fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: src/parser.rs:107:29: 107:39
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _26 = <ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>> as peruse::parsers::ParserCombinator>::then::<RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>(move _27, move _39) -> [return: bb17, unwind: bb48]; // scope 2 at src/parser.rs:104:21: 107:41
                                         // mir::Constant
                                         // + span: src/parser.rs:107:14: 107:18
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>) -> peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>> {<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>> as peruse::parsers::ParserCombinator>::then::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        _25 = &_26;                      // scope 2 at src/parser.rs:104:21: 107:41
        StorageDead(_39);                // scope 2 at src/parser.rs:107:40: 107:41
        StorageDead(_27);                // scope 2 at src/parser.rs:107:40: 107:41
        StorageLive(_40);                // scope 2 at src/parser.rs:108:21: 108:42
        StorageLive(_41);                // scope 2 at src/parser.rs:108:25: 108:41
        discriminant(_41) = 12;          // scope 2 at src/parser.rs:108:25: 108:41
        _40 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _41) -> [return: bb18, unwind: bb47]; // scope 2 at src/parser.rs:108:21: 108:42
                                         // mir::Constant
                                         // + span: src/parser.rs:108:21: 108:24
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_41);                // scope 2 at src/parser.rs:108:41: 108:42
        _24 = <ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>> as peruse::parsers::ParserCombinator>::then_l::<LiteralParser<grammar_lexer::Token>>(move _25, move _40) -> [return: bb19, unwind: bb47]; // scope 2 at src/parser.rs:104:21: 108:43
                                         // mir::Constant
                                         // + span: src/parser.rs:108:14: 108:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>) -> peruse::parsers::MapParser<<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, <peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>> as peruse::parsers::Parser>::O> {<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>> as peruse::parsers::ParserCombinator>::then_l::<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        _23 = &_24;                      // scope 2 at src/parser.rs:104:21: 108:43
        StorageDead(_40);                // scope 2 at src/parser.rs:108:42: 108:43
        StorageDead(_25);                // scope 2 at src/parser.rs:108:42: 108:43
        StorageLive(_42);                // scope 2 at src/parser.rs:109:19: 109:37
        _42 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>(program) -> [return: bb20, unwind: bb46]; // scope 2 at src/parser.rs:109:19: 109:37
                                         // mir::Constant
                                         // + span: src/parser.rs:109:19: 109:28
                                         // + literal: Const { ty: fn(fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: src/parser.rs:109:29: 109:36
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _22 = <MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)> as peruse::parsers::ParserCombinator>::then::<RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>>(move _23, move _42) -> [return: bb21, unwind: bb46]; // scope 2 at src/parser.rs:104:21: 109:38
                                         // mir::Constant
                                         // + span: src/parser.rs:109:14: 109:18
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>) -> peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)> as peruse::parsers::ParserCombinator>::then::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _21 = &_22;                      // scope 2 at src/parser.rs:104:21: 109:38
        StorageDead(_42);                // scope 2 at src/parser.rs:109:37: 109:38
        StorageDead(_23);                // scope 2 at src/parser.rs:109:37: 109:38
        StorageLive(_43);                // scope 2 at src/parser.rs:110:21: 110:43
        StorageLive(_44);                // scope 2 at src/parser.rs:110:25: 110:42
        discriminant(_44) = 13;          // scope 2 at src/parser.rs:110:25: 110:42
        _43 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _44) -> [return: bb22, unwind: bb45]; // scope 2 at src/parser.rs:110:21: 110:43
                                         // mir::Constant
                                         // + span: src/parser.rs:110:21: 110:24
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_44);                // scope 2 at src/parser.rs:110:42: 110:43
        _20 = <ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>> as peruse::parsers::ParserCombinator>::then_l::<LiteralParser<grammar_lexer::Token>>(move _21, move _43) -> [return: bb23, unwind: bb45]; // scope 2 at src/parser.rs:104:21: 110:44
                                         // mir::Constant
                                         // + span: src/parser.rs:110:14: 110:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>) -> peruse::parsers::MapParser<<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, <peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> as peruse::parsers::Parser>::O> {<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> as peruse::parsers::ParserCombinator>::then_l::<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        _19 = &_20;                      // scope 2 at src/parser.rs:104:21: 110:44
        StorageDead(_43);                // scope 2 at src/parser.rs:110:43: 110:44
        StorageDead(_21);                // scope 2 at src/parser.rs:110:43: 110:44
        StorageLive(_45);                // scope 2 at src/parser.rs:111:19: 111:34
        StorageLive(_46);                // scope 2 at src/parser.rs:111:23: 111:33
        _51 = const false;               // scope 2 at src/parser.rs:111:23: 111:33
        _46 = move _3;                   // scope 2 at src/parser.rs:111:23: 111:33
        _45 = peruse::parsers::opt::<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, OrParser<MapParser<[grammar_lexer::Token], RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {if_stmt}>, grammar::Block>, BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>(move _46) -> [return: bb24, unwind: bb44]; // scope 2 at src/parser.rs:111:19: 111:34
                                         // mir::Constant
                                         // + span: src/parser.rs:111:19: 111:22
                                         // + literal: Const { ty: fn(peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>) -> peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>> {peruse::parsers::opt::<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        StorageDead(_46);                // scope 2 at src/parser.rs:111:33: 111:34
        _18 = <MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>>, LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)> as peruse::parsers::ParserCombinator>::then::<OptionParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, OrParser<MapParser<[grammar_lexer::Token], RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {if_stmt}>, grammar::Block>, BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>(move _19, move _45) -> [return: bb25, unwind: bb44]; // scope 2 at src/parser.rs:104:21: 111:35
                                         // mir::Constant
                                         // + span: src/parser.rs:111:14: 111:18
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>) -> peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)> as peruse::parsers::ParserCombinator>::then::<peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        _17 = &_18;                      // scope 2 at src/parser.rs:104:21: 111:35
        StorageDead(_45);                // scope 2 at src/parser.rs:111:34: 111:35
        StorageDead(_19);                // scope 2 at src/parser.rs:111:34: 111:35
        StorageLive(_47);                // scope 2 at src/parser.rs:112:18: 112:96
        _16 = <ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>>, LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, OptionParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, OrParser<MapParser<[grammar_lexer::Token], RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {if_stmt}>, grammar::Block>, BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>> as peruse::parsers::ParserCombinator>::map::<grammar::Statement, [closure@src/parser.rs:112:18: 112:96]>(move _17, move _47) -> [return: bb26, unwind: bb43]; // scope 2 at src/parser.rs:104:21: 112:97
                                         // mir::Constant
                                         // + span: src/parser.rs:112:14: 112:17
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>, [closure@src/parser.rs:112:18: 112:96]) -> peruse::parsers::MapParser<<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>, grammar::Statement> {<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>> as peruse::parsers::ParserCombinator>::map::<grammar::Statement, [closure@src/parser.rs:112:18: 112:96]>}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        _50 = const true;                // scope 2 at src/parser.rs:112:96: 112:97
        StorageDead(_47);                // scope 2 at src/parser.rs:112:96: 112:97
        StorageDead(_17);                // scope 2 at src/parser.rs:112:96: 112:97
        drop(_18) -> [return: bb27, unwind: bb36]; // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb27: {
        drop(_20) -> [return: bb28, unwind: bb37]; // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb28: {
        drop(_22) -> [return: bb29, unwind: bb38]; // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb29: {
        drop(_24) -> [return: bb30, unwind: bb39]; // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb30: {
        drop(_26) -> [return: bb31, unwind: bb40]; // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb31: {
        drop(_28) -> [return: bb32, unwind: bb41]; // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb32: {
        drop(_30) -> [return: bb33, unwind: bb42]; // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb33: {
        drop(_32) -> [return: bb34, unwind: bb58]; // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb34: {
        StorageDead(_32);                // scope 2 at src/parser.rs:112:97: 112:98
        StorageDead(_30);                // scope 2 at src/parser.rs:112:97: 112:98
        StorageDead(_28);                // scope 2 at src/parser.rs:112:97: 112:98
        StorageDead(_26);                // scope 2 at src/parser.rs:112:97: 112:98
        StorageDead(_24);                // scope 2 at src/parser.rs:112:97: 112:98
        StorageDead(_22);                // scope 2 at src/parser.rs:112:97: 112:98
        StorageDead(_20);                // scope 2 at src/parser.rs:112:97: 112:98
        StorageDead(_18);                // scope 2 at src/parser.rs:112:97: 112:98
        StorageLive(_48);                // scope 3 at src/parser.rs:114:13: 114:24
        StorageLive(_49);                // scope 3 at src/parser.rs:114:22: 114:23
        _50 = const false;               // scope 3 at src/parser.rs:114:22: 114:23
        _49 = move _16;                  // scope 3 at src/parser.rs:114:22: 114:23
        _48 = Box::<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>>, LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, OptionParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, OrParser<MapParser<[grammar_lexer::Token], RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {if_stmt}>, grammar::Block>, BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>, grammar::Statement>>::new(move _49) -> [return: bb35, unwind: bb58]; // scope 3 at src/parser.rs:114:13: 114:24
                                         // mir::Constant
                                         // + span: src/parser.rs:114:13: 114:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>, grammar::Statement>) -> std::boxed::Box<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>, grammar::Statement>> {std::boxed::Box::<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:105:31: 105:46]>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, peruse::parsers::OptionParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::OrParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]> + 'static)> {parser::program::if_stmt}>, grammar::Block>, peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Block>>>, grammar::Block>>>, grammar::Statement>>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb35: {
        _1 = move _48 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 3 at src/parser.rs:114:13: 114:24
        StorageDead(_49);                // scope 3 at src/parser.rs:114:23: 114:24
        StorageDead(_48);                // scope 3 at src/parser.rs:114:23: 114:24
        _50 = const false;               // scope 2 at src/parser.rs:115:9: 115:10
        StorageDead(_16);                // scope 2 at src/parser.rs:115:9: 115:10
        _51 = const false;               // scope 1 at src/parser.rs:115:9: 115:10
        StorageDead(_3);                 // scope 1 at src/parser.rs:115:9: 115:10
        StorageDead(_2);                 // scope 0 at src/parser.rs:115:9: 115:10
        _0 = move _1 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Statement, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:114:13: 114:24
        StorageDead(_1);                 // scope 0 at src/parser.rs:115:9: 115:10
        return;                          // scope 0 at src/parser.rs:115:10: 115:10
    }

    bb36 (cleanup): {
        drop(_20) -> bb37;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb37 (cleanup): {
        drop(_22) -> bb38;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb38 (cleanup): {
        drop(_24) -> bb39;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb39 (cleanup): {
        drop(_26) -> bb40;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb40 (cleanup): {
        drop(_28) -> bb41;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb41 (cleanup): {
        drop(_30) -> bb42;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb42 (cleanup): {
        drop(_32) -> bb58;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb43 (cleanup): {
        drop(_18) -> bb44;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb44 (cleanup): {
        drop(_20) -> bb45;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb45 (cleanup): {
        drop(_22) -> bb46;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb46 (cleanup): {
        drop(_24) -> bb47;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb47 (cleanup): {
        drop(_26) -> bb48;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb48 (cleanup): {
        drop(_28) -> bb49;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb49 (cleanup): {
        drop(_30) -> bb50;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb50 (cleanup): {
        drop(_32) -> bb60;               // scope 2 at src/parser.rs:112:97: 112:98
    }

    bb51 (cleanup): {
        drop(_11) -> bb52;               // scope 1 at src/parser.rs:102:14: 102:15
    }

    bb52 (cleanup): {
        drop(_5) -> bb60;                // scope 1 at src/parser.rs:102:14: 102:15
    }

    bb53 (cleanup): {
        drop(_9) -> bb54;                // scope 1 at src/parser.rs:102:14: 102:15
    }

    bb54 (cleanup): {
        drop(_11) -> bb55;               // scope 1 at src/parser.rs:102:14: 102:15
    }

    bb55 (cleanup): {
        drop(_5) -> bb56;                // scope 1 at src/parser.rs:102:14: 102:15
    }

    bb56 (cleanup): {
        resume;                          // scope 0 at src/parser.rs:90:9: 115:10
    }

    bb57 (cleanup): {
        drop(_16) -> bb60;               // scope 2 at src/parser.rs:115:9: 115:10
    }

    bb58 (cleanup): {
        switchInt(_50) -> [false: bb60, otherwise: bb57]; // scope 2 at src/parser.rs:115:9: 115:10
    }

    bb59 (cleanup): {
        drop(_3) -> bb56;                // scope 1 at src/parser.rs:115:9: 115:10
    }

    bb60 (cleanup): {
        switchInt(_51) -> [false: bb56, otherwise: bb59]; // scope 1 at src/parser.rs:115:9: 115:10
    }
}

fn grammar::<impl at src/grammar.rs:60:10: 60:15>::clone(_1: &grammar::Comparator) -> grammar::Comparator {
    debug self => _1;                    // in scope 0 at src/grammar.rs:60:10: 60:15
    let mut _0: grammar::Comparator;     // return place in scope 0 at src/grammar.rs:60:10: 60:15
    let mut _2: (&grammar::Comparator,); // in scope 0 at src/grammar.rs:60:10: 60:15
    let mut _3: &grammar::Comparator;    // in scope 0 at src/grammar.rs:60:10: 60:15
    let mut _4: isize;                   // in scope 0 at src/grammar.rs:60:10: 60:15

    bb0: {
        StorageLive(_2);                 // scope 0 at src/grammar.rs:60:10: 60:15
        StorageLive(_3);                 // scope 0 at src/grammar.rs:60:10: 60:15
        _3 = _1;                         // scope 0 at src/grammar.rs:60:10: 60:15
        (_2.0: &grammar::Comparator) = move _3; // scope 0 at src/grammar.rs:60:10: 60:15
        StorageDead(_3);                 // scope 0 at src/grammar.rs:60:14: 60:15
        _4 = discriminant((*(_2.0: &grammar::Comparator))); // scope 0 at src/grammar.rs:60:10: 60:15
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb4, 2_isize: bb5, 3_isize: bb6, 4_isize: bb7, 5_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar.rs:60:10: 60:15
    }

    bb1: {
        discriminant(_0) = 5;            // scope 0 at src/grammar.rs:60:10: 60:15
        goto -> bb8;                     // scope 0 at src/grammar.rs:60:10: 60:15
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar.rs:60:10: 60:15
    }

    bb3: {
        discriminant(_0) = 0;            // scope 0 at src/grammar.rs:60:10: 60:15
        goto -> bb8;                     // scope 0 at src/grammar.rs:60:10: 60:15
    }

    bb4: {
        discriminant(_0) = 1;            // scope 0 at src/grammar.rs:60:10: 60:15
        goto -> bb8;                     // scope 0 at src/grammar.rs:60:10: 60:15
    }

    bb5: {
        discriminant(_0) = 2;            // scope 0 at src/grammar.rs:60:10: 60:15
        goto -> bb8;                     // scope 0 at src/grammar.rs:60:10: 60:15
    }

    bb6: {
        discriminant(_0) = 3;            // scope 0 at src/grammar.rs:60:10: 60:15
        goto -> bb8;                     // scope 0 at src/grammar.rs:60:10: 60:15
    }

    bb7: {
        discriminant(_0) = 4;            // scope 0 at src/grammar.rs:60:10: 60:15
        goto -> bb8;                     // scope 0 at src/grammar.rs:60:10: 60:15
    }

    bb8: {
        StorageDead(_2);                 // scope 0 at src/grammar.rs:60:14: 60:15
        return;                          // scope 0 at src/grammar.rs:60:15: 60:15
    }
}

fn program::{closure#1}(_1: &[closure@src/parser.rs:75:29: 75:44]) -> Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>>; // return place in scope 0 at src/parser.rs:75:32: 75:32
    let mut _2: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>>; // in scope 0 at src/parser.rs:75:32: 75:44

    bb0: {
        StorageLive(_2);                 // scope 0 at src/parser.rs:75:32: 75:44
        _2 = expression() -> bb1;        // scope 0 at src/parser.rs:75:32: 75:44
                                         // mir::Constant
                                         // + span: src/parser.rs:75:32: 75:42
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = move _2 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:75:32: 75:44
        StorageDead(_2);                 // scope 0 at src/parser.rs:75:43: 75:44
        return;                          // scope 0 at src/parser.rs:75:44: 75:44
    }
}

fn grammar::<impl at src/grammar.rs:26:10: 26:15>::clone(_1: &grammar::MultTerm) -> grammar::MultTerm {
    debug self => _1;                    // in scope 0 at src/grammar.rs:26:10: 26:15
    let mut _0: grammar::MultTerm;       // return place in scope 0 at src/grammar.rs:26:10: 26:15
    let _2: &grammar::MultOp;            // in scope 0 at src/grammar.rs:29:21: 29:31
    let _3: &grammar::Expr;              // in scope 0 at src/grammar.rs:29:33: 29:41
    let mut _4: grammar::MultOp;         // in scope 0 at src/grammar.rs:29:21: 29:31
    let mut _5: &grammar::MultOp;        // in scope 0 at src/grammar.rs:29:21: 29:31
    let _6: &grammar::MultOp;            // in scope 0 at src/grammar.rs:29:21: 29:31
    let mut _7: grammar::Expr;           // in scope 0 at src/grammar.rs:29:33: 29:41
    let mut _8: &grammar::Expr;          // in scope 0 at src/grammar.rs:29:33: 29:41
    let _9: &grammar::Expr;              // in scope 0 at src/grammar.rs:29:33: 29:41
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at src/grammar.rs:29:21: 29:31
        debug __self_0_1 => _3;          // in scope 1 at src/grammar.rs:29:33: 29:41
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at src/grammar.rs:29:21: 29:31
        _2 = &((*_1).0: grammar::MultOp); // scope 0 at src/grammar.rs:29:21: 29:31
        StorageLive(_3);                 // scope 0 at src/grammar.rs:29:33: 29:41
        _3 = &((*_1).1: grammar::Expr);  // scope 0 at src/grammar.rs:29:33: 29:41
        StorageLive(_4);                 // scope 1 at src/grammar.rs:29:21: 29:31
        StorageLive(_5);                 // scope 1 at src/grammar.rs:29:21: 29:31
        StorageLive(_6);                 // scope 1 at src/grammar.rs:29:21: 29:31
        _6 = _2;                         // scope 1 at src/grammar.rs:29:21: 29:31
        _5 = _6;                         // scope 1 at src/grammar.rs:29:21: 29:31
        _4 = <grammar::MultOp as Clone>::clone(move _5) -> bb1; // scope 1 at src/grammar.rs:29:21: 29:31
                                         // mir::Constant
                                         // + span: src/grammar.rs:29:21: 29:31
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::MultOp) -> grammar::MultOp {<grammar::MultOp as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_5);                 // scope 1 at src/grammar.rs:29:30: 29:31
        StorageLive(_7);                 // scope 1 at src/grammar.rs:29:33: 29:41
        StorageLive(_8);                 // scope 1 at src/grammar.rs:29:33: 29:41
        StorageLive(_9);                 // scope 1 at src/grammar.rs:29:33: 29:41
        _9 = _3;                         // scope 1 at src/grammar.rs:29:33: 29:41
        _8 = _9;                         // scope 1 at src/grammar.rs:29:33: 29:41
        _7 = <grammar::Expr as Clone>::clone(move _8) -> bb2; // scope 1 at src/grammar.rs:29:33: 29:41
                                         // mir::Constant
                                         // + span: src/grammar.rs:29:33: 29:41
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_8);                 // scope 1 at src/grammar.rs:29:40: 29:41
        (_0.0: grammar::MultOp) = move _4; // scope 1 at src/grammar.rs:26:10: 26:15
        (_0.1: grammar::Expr) = move _7; // scope 1 at src/grammar.rs:26:10: 26:15
        StorageDead(_9);                 // scope 1 at src/grammar.rs:26:14: 26:15
        StorageDead(_7);                 // scope 1 at src/grammar.rs:26:14: 26:15
        StorageDead(_6);                 // scope 1 at src/grammar.rs:26:14: 26:15
        StorageDead(_4);                 // scope 1 at src/grammar.rs:26:14: 26:15
        StorageDead(_3);                 // scope 0 at src/grammar.rs:26:14: 26:15
        StorageDead(_2);                 // scope 0 at src/grammar.rs:26:14: 26:15
        return;                          // scope 0 at src/grammar.rs:26:15: 26:15
    }
}

fn expression::{closure#1}::{closure#0}(_1: &[closure@src/parser.rs:16:68: 16:83]) -> Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>>; // return place in scope 0 at src/parser.rs:16:71: 16:71
    let mut _2: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>>; // in scope 0 at src/parser.rs:16:71: 16:83

    bb0: {
        StorageLive(_2);                 // scope 0 at src/parser.rs:16:71: 16:83
        _2 = expression() -> bb1;        // scope 0 at src/parser.rs:16:71: 16:83
                                         // mir::Constant
                                         // + span: src/parser.rs:16:71: 16:81
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = move _2 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:16:71: 16:83
        StorageDead(_2);                 // scope 0 at src/parser.rs:16:82: 16:83
        return;                          // scope 0 at src/parser.rs:16:83: 16:83
    }
}

fn grammar::<impl at src/grammar.rs:21:10: 21:15>::clone(_1: &grammar::AddTerm) -> grammar::AddTerm {
    debug self => _1;                    // in scope 0 at src/grammar.rs:21:10: 21:15
    let mut _0: grammar::AddTerm;        // return place in scope 0 at src/grammar.rs:21:10: 21:15
    let _2: &grammar::AddOp;             // in scope 0 at src/grammar.rs:24:20: 24:29
    let _3: &grammar::Expr;              // in scope 0 at src/grammar.rs:24:31: 24:39
    let mut _4: grammar::AddOp;          // in scope 0 at src/grammar.rs:24:20: 24:29
    let mut _5: &grammar::AddOp;         // in scope 0 at src/grammar.rs:24:20: 24:29
    let _6: &grammar::AddOp;             // in scope 0 at src/grammar.rs:24:20: 24:29
    let mut _7: grammar::Expr;           // in scope 0 at src/grammar.rs:24:31: 24:39
    let mut _8: &grammar::Expr;          // in scope 0 at src/grammar.rs:24:31: 24:39
    let _9: &grammar::Expr;              // in scope 0 at src/grammar.rs:24:31: 24:39
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at src/grammar.rs:24:20: 24:29
        debug __self_0_1 => _3;          // in scope 1 at src/grammar.rs:24:31: 24:39
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at src/grammar.rs:24:20: 24:29
        _2 = &((*_1).0: grammar::AddOp); // scope 0 at src/grammar.rs:24:20: 24:29
        StorageLive(_3);                 // scope 0 at src/grammar.rs:24:31: 24:39
        _3 = &((*_1).1: grammar::Expr);  // scope 0 at src/grammar.rs:24:31: 24:39
        StorageLive(_4);                 // scope 1 at src/grammar.rs:24:20: 24:29
        StorageLive(_5);                 // scope 1 at src/grammar.rs:24:20: 24:29
        StorageLive(_6);                 // scope 1 at src/grammar.rs:24:20: 24:29
        _6 = _2;                         // scope 1 at src/grammar.rs:24:20: 24:29
        _5 = _6;                         // scope 1 at src/grammar.rs:24:20: 24:29
        _4 = <grammar::AddOp as Clone>::clone(move _5) -> bb1; // scope 1 at src/grammar.rs:24:20: 24:29
                                         // mir::Constant
                                         // + span: src/grammar.rs:24:20: 24:29
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::AddOp) -> grammar::AddOp {<grammar::AddOp as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_5);                 // scope 1 at src/grammar.rs:24:28: 24:29
        StorageLive(_7);                 // scope 1 at src/grammar.rs:24:31: 24:39
        StorageLive(_8);                 // scope 1 at src/grammar.rs:24:31: 24:39
        StorageLive(_9);                 // scope 1 at src/grammar.rs:24:31: 24:39
        _9 = _3;                         // scope 1 at src/grammar.rs:24:31: 24:39
        _8 = _9;                         // scope 1 at src/grammar.rs:24:31: 24:39
        _7 = <grammar::Expr as Clone>::clone(move _8) -> bb2; // scope 1 at src/grammar.rs:24:31: 24:39
                                         // mir::Constant
                                         // + span: src/grammar.rs:24:31: 24:39
                                         // + literal: Const { ty: for<'r> fn(&'r grammar::Expr) -> grammar::Expr {<grammar::Expr as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_8);                 // scope 1 at src/grammar.rs:24:38: 24:39
        (_0.0: grammar::AddOp) = move _4; // scope 1 at src/grammar.rs:21:10: 21:15
        (_0.1: grammar::Expr) = move _7; // scope 1 at src/grammar.rs:21:10: 21:15
        StorageDead(_9);                 // scope 1 at src/grammar.rs:21:14: 21:15
        StorageDead(_7);                 // scope 1 at src/grammar.rs:21:14: 21:15
        StorageDead(_6);                 // scope 1 at src/grammar.rs:21:14: 21:15
        StorageDead(_4);                 // scope 1 at src/grammar.rs:21:14: 21:15
        StorageDead(_3);                 // scope 0 at src/grammar.rs:21:14: 21:15
        StorageDead(_2);                 // scope 0 at src/grammar.rs:21:14: 21:15
        return;                          // scope 0 at src/grammar.rs:21:15: 21:15
    }
}

fn token::lt(_1: &str, _2: grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {
    debug s => _1;                       // in scope 0 at src/lexer.rs:13:9: 13:10
    debug t => _2;                       // in scope 0 at src/lexer.rs:13:18: 13:19
    let mut _0: peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token>; // return place in scope 0 at src/lexer.rs:13:31: 13:56
    let mut _3: &str;                    // in scope 0 at src/lexer.rs:14:13: 14:57
    let _4: &str;                        // in scope 0 at src/lexer.rs:14:13: 14:57
    let mut _5: &std::string::String;    // in scope 0 at src/lexer.rs:14:13: 14:57
    let _6: &std::string::String;        // in scope 0 at src/lexer.rs:14:13: 14:57
    let _7: std::string::String;         // in scope 0 at src/lexer.rs:14:14: 14:57
    let mut _8: std::string::String;     // in scope 0 at src/lexer.rs:14:15: 14:52
    let mut _9: std::result::Result<std::string::String, std::convert::Infallible>; // in scope 0 at src/lexer.rs:14:15: 14:43
    let mut _10: &str;                   // in scope 0 at src/lexer.rs:14:32: 14:42
    let _11: &str;                       // in scope 0 at src/lexer.rs:14:32: 14:42
    let mut _12: &str;                   // in scope 0 at src/lexer.rs:14:55: 14:56
    let mut _13: grammar_lexer::Token;   // in scope 0 at src/lexer.rs:14:59: 14:60
    let mut _14: bool;                   // in scope 0 at src/lexer.rs:15:3: 15:4

    bb0: {
        _14 = const false;               // scope 0 at src/lexer.rs:14:13: 14:57
        _14 = const true;                // scope 0 at src/lexer.rs:14:13: 14:57
        StorageLive(_3);                 // scope 0 at src/lexer.rs:14:13: 14:57
        StorageLive(_4);                 // scope 0 at src/lexer.rs:14:13: 14:57
        StorageLive(_5);                 // scope 0 at src/lexer.rs:14:13: 14:57
        StorageLive(_6);                 // scope 0 at src/lexer.rs:14:13: 14:57
        StorageLive(_7);                 // scope 0 at src/lexer.rs:14:14: 14:57
        StorageLive(_8);                 // scope 0 at src/lexer.rs:14:15: 14:52
        StorageLive(_9);                 // scope 0 at src/lexer.rs:14:15: 14:43
        StorageLive(_10);                // scope 0 at src/lexer.rs:14:32: 14:42
        StorageLive(_11);                // scope 0 at src/lexer.rs:14:32: 14:42
        _11 = const "^[ \\t]*";          // scope 0 at src/lexer.rs:14:32: 14:42
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [94, 91, 32, 92, 116, 93, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/lexer.rs:14:32: 14:42
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [94, 91, 32, 92, 116, 93, 42], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _10 = _11;                       // scope 0 at src/lexer.rs:14:32: 14:42
        _9 = <String as FromStr>::from_str(move _10) -> [return: bb1, unwind: bb10]; // scope 0 at src/lexer.rs:14:15: 14:43
                                         // mir::Constant
                                         // + span: src/lexer.rs:14:15: 14:31
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::result::Result<std::string::String, <std::string::String as std::str::FromStr>::Err> {<std::string::String as std::str::FromStr>::from_str}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_10);                // scope 0 at src/lexer.rs:14:42: 14:43
        _8 = Result::<String, Infallible>::unwrap(move _9) -> [return: bb2, unwind: bb10]; // scope 0 at src/lexer.rs:14:15: 14:52
                                         // mir::Constant
                                         // + span: src/lexer.rs:14:44: 14:50
                                         // + literal: Const { ty: fn(std::result::Result<std::string::String, std::convert::Infallible>) -> std::string::String {std::result::Result::<std::string::String, std::convert::Infallible>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_9);                 // scope 0 at src/lexer.rs:14:51: 14:52
        StorageLive(_12);                // scope 0 at src/lexer.rs:14:55: 14:56
        _12 = _1;                        // scope 0 at src/lexer.rs:14:55: 14:56
        _7 = <String as Add<&str>>::add(move _8, move _12) -> [return: bb3, unwind: bb10]; // scope 0 at src/lexer.rs:14:14: 14:57
                                         // mir::Constant
                                         // + span: src/lexer.rs:14:14: 14:57
                                         // + literal: Const { ty: fn(std::string::String, &str) -> <std::string::String as std::ops::Add<&str>>::Output {<std::string::String as std::ops::Add<&str>>::add}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_12);                // scope 0 at src/lexer.rs:14:56: 14:57
        StorageDead(_8);                 // scope 0 at src/lexer.rs:14:56: 14:57
        _6 = &_7;                        // scope 0 at src/lexer.rs:14:13: 14:57
        _5 = _6;                         // scope 0 at src/lexer.rs:14:13: 14:57
        _4 = <String as Deref>::deref(move _5) -> [return: bb4, unwind: bb7]; // scope 0 at src/lexer.rs:14:13: 14:57
                                         // mir::Constant
                                         // + span: src/lexer.rs:14:13: 14:57
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> &'r <std::string::String as std::ops::Deref>::Target {<std::string::String as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _3 = _4;                         // scope 0 at src/lexer.rs:14:13: 14:57
        StorageDead(_5);                 // scope 0 at src/lexer.rs:14:56: 14:57
        StorageLive(_13);                // scope 0 at src/lexer.rs:14:59: 14:60
        _14 = const false;               // scope 0 at src/lexer.rs:14:59: 14:60
        _13 = move _2;                   // scope 0 at src/lexer.rs:14:59: 14:60
        _0 = peruse::string_parsers::str_lit::<grammar_lexer::Token>(move _3, move _13) -> [return: bb5, unwind: bb7]; // scope 0 at src/lexer.rs:14:5: 14:61
                                         // mir::Constant
                                         // + span: src/lexer.rs:14:5: 14:12
                                         // + literal: Const { ty: for<'r> fn(&'r str, grammar_lexer::Token) -> peruse::string_parsers::RegexLiteralParser<grammar_lexer::Token> {peruse::string_parsers::str_lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_13);                // scope 0 at src/lexer.rs:14:60: 14:61
        StorageDead(_3);                 // scope 0 at src/lexer.rs:14:60: 14:61
        drop(_7) -> [return: bb6, unwind: bb10]; // scope 0 at src/lexer.rs:15:3: 15:4
    }

    bb6: {
        StorageDead(_11);                // scope 0 at src/lexer.rs:15:3: 15:4
        StorageDead(_7);                 // scope 0 at src/lexer.rs:15:3: 15:4
        StorageDead(_6);                 // scope 0 at src/lexer.rs:15:3: 15:4
        StorageDead(_4);                 // scope 0 at src/lexer.rs:15:3: 15:4
        return;                          // scope 0 at src/lexer.rs:15:4: 15:4
    }

    bb7 (cleanup): {
        drop(_7) -> bb10;                // scope 0 at src/lexer.rs:15:3: 15:4
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at src/lexer.rs:13:3: 15:4
    }

    bb9 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at src/lexer.rs:15:3: 15:4
    }

    bb10 (cleanup): {
        switchInt(_14) -> [false: bb8, otherwise: bb9]; // scope 0 at src/lexer.rs:15:3: 15:4
    }
}

fn grammar::Statement::Assign(_1: String, _2: grammar::Expr) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/grammar.rs:52:3: 52:23

    bb0: {
        ((_0 as Assign).0: std::string::String) = move _1; // scope 0 at src/grammar.rs:52:3: 52:23
        ((_0 as Assign).1: grammar::Expr) = move _2; // scope 0 at src/grammar.rs:52:3: 52:23
        discriminant(_0) = 0;            // scope 0 at src/grammar.rs:52:3: 52:23
        return;                          // scope 0 at src/grammar.rs:52:3: 52:23
    }
}

// MIR FOR CTFE
fn grammar::Statement::Assign(_1: String, _2: grammar::Expr) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/grammar.rs:52:3: 52:23

    bb0: {
        ((_0 as Assign).0: std::string::String) = move _1; // scope 0 at src/grammar.rs:52:3: 52:23
        ((_0 as Assign).1: grammar::Expr) = move _2; // scope 0 at src/grammar.rs:52:3: 52:23
        discriminant(_0) = 0;            // scope 0 at src/grammar.rs:52:3: 52:23
        return;                          // scope 0 at src/grammar.rs:52:3: 52:23
    }
}

fn grammar::Block(_1: Vec<grammar::Statement>) -> grammar::Block {
    let mut _0: grammar::Block;          // return place in scope 0 at src/grammar.rs:46:1: 46:38

    bb0: {
        (_0.0: std::vec::Vec<grammar::Statement>) = move _1; // scope 0 at src/grammar.rs:46:1: 46:38
        return;                          // scope 0 at src/grammar.rs:46:1: 46:38
    }
}

// MIR FOR CTFE
fn grammar::Block(_1: Vec<grammar::Statement>) -> grammar::Block {
    let mut _0: grammar::Block;          // return place in scope 0 at src/grammar.rs:46:1: 46:38

    bb0: {
        (_0.0: std::vec::Vec<grammar::Statement>) = move _1; // scope 0 at src/grammar.rs:46:1: 46:38
        return;                          // scope 0 at src/grammar.rs:46:1: 46:38
    }
}

fn grammar::<impl at src/grammar.rs:4:10: 4:19>::eq(_1: &grammar::AddOp, _2: &grammar::AddOp) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:4:10: 4:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:4:10: 4:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:4:10: 4:19
    let _3: isize;                       // in scope 0 at src/grammar.rs:4:10: 4:19
    let mut _4: &grammar::AddOp;         // in scope 0 at src/grammar.rs:4:10: 4:19
    let _5: &grammar::AddOp;             // in scope 0 at src/grammar.rs:4:10: 4:19
    let mut _7: &grammar::AddOp;         // in scope 0 at src/grammar.rs:4:10: 4:19
    let _8: &grammar::AddOp;             // in scope 0 at src/grammar.rs:4:10: 4:19
    let mut _9: bool;                    // in scope 0 at src/grammar.rs:4:10: 4:19
    let mut _10: bool;                   // in scope 0 at src/grammar.rs:4:10: 4:19
    let mut _11: isize;                  // in scope 0 at src/grammar.rs:4:10: 4:19
    let mut _12: isize;                  // in scope 0 at src/grammar.rs:4:10: 4:19
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at src/grammar.rs:4:10: 4:19
        let _6: isize;                   // in scope 1 at src/grammar.rs:4:10: 4:19
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at src/grammar.rs:4:10: 4:19
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:4:10: 4:19
        StorageLive(_4);                 // scope 0 at src/grammar.rs:4:10: 4:19
        StorageLive(_5);                 // scope 0 at src/grammar.rs:4:10: 4:19
        _5 = _1;                         // scope 0 at src/grammar.rs:4:10: 4:19
        _4 = _5;                         // scope 0 at src/grammar.rs:4:10: 4:19
        _3 = discriminant((*_4));        // scope 0 at src/grammar.rs:4:10: 4:19
        StorageDead(_4);                 // scope 0 at src/grammar.rs:4:18: 4:19
        StorageDead(_5);                 // scope 0 at src/grammar.rs:4:18: 4:19
        StorageLive(_6);                 // scope 1 at src/grammar.rs:4:10: 4:19
        StorageLive(_7);                 // scope 1 at src/grammar.rs:4:10: 4:19
        StorageLive(_8);                 // scope 1 at src/grammar.rs:4:10: 4:19
        _8 = _2;                         // scope 1 at src/grammar.rs:4:10: 4:19
        _7 = _8;                         // scope 1 at src/grammar.rs:4:10: 4:19
        _6 = discriminant((*_7));        // scope 1 at src/grammar.rs:4:10: 4:19
        StorageDead(_7);                 // scope 1 at src/grammar.rs:4:18: 4:19
        StorageDead(_8);                 // scope 1 at src/grammar.rs:4:18: 4:19
        StorageLive(_9);                 // scope 2 at src/grammar.rs:4:10: 4:19
        StorageLive(_10);                // scope 2 at src/grammar.rs:4:10: 4:19
        StorageLive(_11);                // scope 2 at src/grammar.rs:4:10: 4:19
        _11 = _3;                        // scope 2 at src/grammar.rs:4:10: 4:19
        StorageLive(_12);                // scope 2 at src/grammar.rs:4:10: 4:19
        _12 = _6;                        // scope 2 at src/grammar.rs:4:10: 4:19
        _10 = Eq(move _11, move _12);    // scope 2 at src/grammar.rs:4:10: 4:19
        StorageDead(_12);                // scope 2 at src/grammar.rs:4:18: 4:19
        StorageDead(_11);                // scope 2 at src/grammar.rs:4:18: 4:19
        _9 = move _10;                   // scope 2 at src/grammar.rs:4:10: 4:19
        StorageDead(_10);                // scope 2 at src/grammar.rs:4:18: 4:19
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 2 at src/grammar.rs:4:10: 4:19
    }

    bb1: {
        _0 = const true;                 // scope 2 at src/grammar.rs:4:10: 4:19
        goto -> bb3;                     // scope 2 at src/grammar.rs:4:10: 4:19
    }

    bb2: {
        _0 = const false;                // scope 2 at src/grammar.rs:4:10: 4:19
        goto -> bb3;                     // scope 2 at src/grammar.rs:4:10: 4:19
    }

    bb3: {
        StorageDead(_9);                 // scope 2 at src/grammar.rs:4:18: 4:19
        StorageDead(_6);                 // scope 1 at src/grammar.rs:4:18: 4:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:4:18: 4:19
        return;                          // scope 0 at src/grammar.rs:4:19: 4:19
    }
}

fn grammar::<impl at src/grammar.rs:33:10: 33:19>::ne(_1: &grammar::Expr, _2: &grammar::Expr) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:33:10: 33:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:33:10: 33:19
    let _3: isize;                       // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _4: &grammar::Expr;          // in scope 0 at src/grammar.rs:33:10: 33:19
    let _5: &grammar::Expr;              // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _7: &grammar::Expr;          // in scope 0 at src/grammar.rs:33:10: 33:19
    let _8: &grammar::Expr;              // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _9: bool;                    // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _10: bool;                   // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _11: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _12: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _13: (&grammar::Expr, &grammar::Expr); // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _14: &grammar::Expr;         // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _15: &grammar::Expr;         // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _16: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _17: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _18: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _19: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _20: isize;                  // in scope 0 at src/grammar.rs:33:10: 33:19
    let mut _23: &std::string::String;   // in scope 0 at src/grammar.rs:35:12: 35:18
    let mut _24: &std::string::String;   // in scope 0 at src/grammar.rs:35:12: 35:18
    let mut _27: i32;                    // in scope 0 at src/grammar.rs:36:7: 36:10
    let mut _28: i32;                    // in scope 0 at src/grammar.rs:36:7: 36:10
    let mut _31: &std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let mut _32: &std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let mut _35: &std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    let mut _36: &std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at src/grammar.rs:33:10: 33:19
        let _6: isize;                   // in scope 1 at src/grammar.rs:33:10: 33:19
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at src/grammar.rs:33:10: 33:19
            let _21: &std::string::String; // in scope 2 at src/grammar.rs:35:12: 35:18
            let _22: &std::string::String; // in scope 2 at src/grammar.rs:35:12: 35:18
            let _25: &i32;               // in scope 2 at src/grammar.rs:36:7: 36:10
            let _26: &i32;               // in scope 2 at src/grammar.rs:36:7: 36:10
            let _29: &std::vec::Vec<grammar::AddTerm>; // in scope 2 at src/grammar.rs:37:10: 37:22
            let _30: &std::vec::Vec<grammar::AddTerm>; // in scope 2 at src/grammar.rs:37:10: 37:22
            let _33: &std::vec::Vec<grammar::MultTerm>; // in scope 2 at src/grammar.rs:38:11: 38:24
            let _34: &std::vec::Vec<grammar::MultTerm>; // in scope 2 at src/grammar.rs:38:11: 38:24
            scope 3 {
                debug __self_0 => _21;   // in scope 3 at src/grammar.rs:35:12: 35:18
                debug __arg_1_0 => _22;  // in scope 3 at src/grammar.rs:35:12: 35:18
            }
            scope 4 {
                debug __self_0 => _25;   // in scope 4 at src/grammar.rs:36:7: 36:10
                debug __arg_1_0 => _26;  // in scope 4 at src/grammar.rs:36:7: 36:10
            }
            scope 5 {
                debug __self_0 => _29;   // in scope 5 at src/grammar.rs:37:10: 37:22
                debug __arg_1_0 => _30;  // in scope 5 at src/grammar.rs:37:10: 37:22
            }
            scope 6 {
                debug __self_0 => _33;   // in scope 6 at src/grammar.rs:38:11: 38:24
                debug __arg_1_0 => _34;  // in scope 6 at src/grammar.rs:38:11: 38:24
            }
            scope 7 {
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:33:10: 33:19
        StorageLive(_4);                 // scope 0 at src/grammar.rs:33:10: 33:19
        StorageLive(_5);                 // scope 0 at src/grammar.rs:33:10: 33:19
        _5 = _1;                         // scope 0 at src/grammar.rs:33:10: 33:19
        _4 = _5;                         // scope 0 at src/grammar.rs:33:10: 33:19
        _3 = discriminant((*_4));        // scope 0 at src/grammar.rs:33:10: 33:19
        StorageDead(_4);                 // scope 0 at src/grammar.rs:33:18: 33:19
        StorageDead(_5);                 // scope 0 at src/grammar.rs:33:18: 33:19
        StorageLive(_6);                 // scope 1 at src/grammar.rs:33:10: 33:19
        StorageLive(_7);                 // scope 1 at src/grammar.rs:33:10: 33:19
        StorageLive(_8);                 // scope 1 at src/grammar.rs:33:10: 33:19
        _8 = _2;                         // scope 1 at src/grammar.rs:33:10: 33:19
        _7 = _8;                         // scope 1 at src/grammar.rs:33:10: 33:19
        _6 = discriminant((*_7));        // scope 1 at src/grammar.rs:33:10: 33:19
        StorageDead(_7);                 // scope 1 at src/grammar.rs:33:18: 33:19
        StorageDead(_8);                 // scope 1 at src/grammar.rs:33:18: 33:19
        StorageLive(_9);                 // scope 2 at src/grammar.rs:33:10: 33:19
        StorageLive(_10);                // scope 2 at src/grammar.rs:33:10: 33:19
        StorageLive(_11);                // scope 2 at src/grammar.rs:33:10: 33:19
        _11 = _3;                        // scope 2 at src/grammar.rs:33:10: 33:19
        StorageLive(_12);                // scope 2 at src/grammar.rs:33:10: 33:19
        _12 = _6;                        // scope 2 at src/grammar.rs:33:10: 33:19
        _10 = Eq(move _11, move _12);    // scope 2 at src/grammar.rs:33:10: 33:19
        StorageDead(_12);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_11);                // scope 2 at src/grammar.rs:33:18: 33:19
        _9 = move _10;                   // scope 2 at src/grammar.rs:33:10: 33:19
        StorageDead(_10);                // scope 2 at src/grammar.rs:33:18: 33:19
        switchInt(move _9) -> [false: bb15, otherwise: bb1]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb1: {
        StorageLive(_13);                // scope 2 at src/grammar.rs:33:10: 33:19
        StorageLive(_14);                // scope 2 at src/grammar.rs:33:10: 33:19
        _14 = _1;                        // scope 2 at src/grammar.rs:33:10: 33:19
        StorageLive(_15);                // scope 2 at src/grammar.rs:33:10: 33:19
        _15 = _2;                        // scope 2 at src/grammar.rs:33:10: 33:19
        (_13.0: &grammar::Expr) = move _14; // scope 2 at src/grammar.rs:33:10: 33:19
        (_13.1: &grammar::Expr) = move _15; // scope 2 at src/grammar.rs:33:10: 33:19
        StorageDead(_15);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_14);                // scope 2 at src/grammar.rs:33:18: 33:19
        _20 = discriminant((*(_13.0: &grammar::Expr))); // scope 2 at src/grammar.rs:33:10: 33:19
        switchInt(move _20) -> [0_isize: bb2, 1_isize: bb4, 2_isize: bb5, 3_isize: bb6, otherwise: bb3]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb2: {
        _16 = discriminant((*(_13.1: &grammar::Expr))); // scope 2 at src/grammar.rs:33:10: 33:19
        switchInt(move _16) -> [0_isize: bb7, otherwise: bb3]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb3: {
        unreachable;                     // scope 7 at src/grammar.rs:33:10: 33:19
    }

    bb4: {
        _17 = discriminant((*(_13.1: &grammar::Expr))); // scope 2 at src/grammar.rs:33:10: 33:19
        switchInt(move _17) -> [1_isize: bb9, otherwise: bb3]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb5: {
        _18 = discriminant((*(_13.1: &grammar::Expr))); // scope 2 at src/grammar.rs:33:10: 33:19
        switchInt(move _18) -> [2_isize: bb10, otherwise: bb3]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb6: {
        _19 = discriminant((*(_13.1: &grammar::Expr))); // scope 2 at src/grammar.rs:33:10: 33:19
        switchInt(move _19) -> [3_isize: bb12, otherwise: bb3]; // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb7: {
        StorageLive(_21);                // scope 2 at src/grammar.rs:35:12: 35:18
        _21 = &(((*(_13.0: &grammar::Expr)) as Variable).0: std::string::String); // scope 2 at src/grammar.rs:35:12: 35:18
        StorageLive(_22);                // scope 2 at src/grammar.rs:35:12: 35:18
        _22 = &(((*(_13.1: &grammar::Expr)) as Variable).0: std::string::String); // scope 2 at src/grammar.rs:35:12: 35:18
        StorageLive(_23);                // scope 3 at src/grammar.rs:35:12: 35:18
        _23 = _21;                       // scope 3 at src/grammar.rs:35:12: 35:18
        StorageLive(_24);                // scope 3 at src/grammar.rs:35:12: 35:18
        _24 = _22;                       // scope 3 at src/grammar.rs:35:12: 35:18
        _0 = <String as PartialEq>::ne(move _23, move _24) -> bb8; // scope 3 at src/grammar.rs:35:12: 35:18
                                         // mir::Constant
                                         // + span: src/grammar.rs:35:12: 35:18
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::string::String, &'s std::string::String) -> bool {<std::string::String as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_24);                // scope 3 at src/grammar.rs:35:17: 35:18
        StorageDead(_23);                // scope 3 at src/grammar.rs:35:17: 35:18
        StorageDead(_22);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_21);                // scope 2 at src/grammar.rs:33:18: 33:19
        goto -> bb14;                    // scope 2 at src/grammar.rs:33:18: 33:19
    }

    bb9: {
        StorageLive(_25);                // scope 2 at src/grammar.rs:36:7: 36:10
        _25 = &(((*(_13.0: &grammar::Expr)) as Num).0: i32); // scope 2 at src/grammar.rs:36:7: 36:10
        StorageLive(_26);                // scope 2 at src/grammar.rs:36:7: 36:10
        _26 = &(((*(_13.1: &grammar::Expr)) as Num).0: i32); // scope 2 at src/grammar.rs:36:7: 36:10
        StorageLive(_27);                // scope 4 at src/grammar.rs:36:7: 36:10
        _27 = (*_25);                    // scope 4 at src/grammar.rs:36:7: 36:10
        StorageLive(_28);                // scope 4 at src/grammar.rs:36:7: 36:10
        _28 = (*_26);                    // scope 4 at src/grammar.rs:36:7: 36:10
        _0 = Ne(move _27, move _28);     // scope 4 at src/grammar.rs:36:7: 36:10
        StorageDead(_28);                // scope 4 at src/grammar.rs:36:9: 36:10
        StorageDead(_27);                // scope 4 at src/grammar.rs:36:9: 36:10
        StorageDead(_26);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_25);                // scope 2 at src/grammar.rs:33:18: 33:19
        goto -> bb14;                    // scope 2 at src/grammar.rs:33:18: 33:19
    }

    bb10: {
        StorageLive(_29);                // scope 2 at src/grammar.rs:37:10: 37:22
        _29 = &(((*(_13.0: &grammar::Expr)) as AddSub).0: std::vec::Vec<grammar::AddTerm>); // scope 2 at src/grammar.rs:37:10: 37:22
        StorageLive(_30);                // scope 2 at src/grammar.rs:37:10: 37:22
        _30 = &(((*(_13.1: &grammar::Expr)) as AddSub).0: std::vec::Vec<grammar::AddTerm>); // scope 2 at src/grammar.rs:37:10: 37:22
        StorageLive(_31);                // scope 5 at src/grammar.rs:37:10: 37:22
        _31 = _29;                       // scope 5 at src/grammar.rs:37:10: 37:22
        StorageLive(_32);                // scope 5 at src/grammar.rs:37:10: 37:22
        _32 = _30;                       // scope 5 at src/grammar.rs:37:10: 37:22
        _0 = <Vec<grammar::AddTerm> as PartialEq>::ne(move _31, move _32) -> bb11; // scope 5 at src/grammar.rs:37:10: 37:22
                                         // mir::Constant
                                         // + span: src/grammar.rs:37:10: 37:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::vec::Vec<grammar::AddTerm>, &'s std::vec::Vec<grammar::AddTerm>) -> bool {<std::vec::Vec<grammar::AddTerm> as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_32);                // scope 5 at src/grammar.rs:37:21: 37:22
        StorageDead(_31);                // scope 5 at src/grammar.rs:37:21: 37:22
        StorageDead(_30);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_29);                // scope 2 at src/grammar.rs:33:18: 33:19
        goto -> bb14;                    // scope 2 at src/grammar.rs:33:18: 33:19
    }

    bb12: {
        StorageLive(_33);                // scope 2 at src/grammar.rs:38:11: 38:24
        _33 = &(((*(_13.0: &grammar::Expr)) as MultDiv).0: std::vec::Vec<grammar::MultTerm>); // scope 2 at src/grammar.rs:38:11: 38:24
        StorageLive(_34);                // scope 2 at src/grammar.rs:38:11: 38:24
        _34 = &(((*(_13.1: &grammar::Expr)) as MultDiv).0: std::vec::Vec<grammar::MultTerm>); // scope 2 at src/grammar.rs:38:11: 38:24
        StorageLive(_35);                // scope 6 at src/grammar.rs:38:11: 38:24
        _35 = _33;                       // scope 6 at src/grammar.rs:38:11: 38:24
        StorageLive(_36);                // scope 6 at src/grammar.rs:38:11: 38:24
        _36 = _34;                       // scope 6 at src/grammar.rs:38:11: 38:24
        _0 = <Vec<grammar::MultTerm> as PartialEq>::ne(move _35, move _36) -> bb13; // scope 6 at src/grammar.rs:38:11: 38:24
                                         // mir::Constant
                                         // + span: src/grammar.rs:38:11: 38:24
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::vec::Vec<grammar::MultTerm>, &'s std::vec::Vec<grammar::MultTerm>) -> bool {<std::vec::Vec<grammar::MultTerm> as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_36);                // scope 6 at src/grammar.rs:38:23: 38:24
        StorageDead(_35);                // scope 6 at src/grammar.rs:38:23: 38:24
        StorageDead(_34);                // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_33);                // scope 2 at src/grammar.rs:33:18: 33:19
        goto -> bb14;                    // scope 2 at src/grammar.rs:33:18: 33:19
    }

    bb14: {
        StorageDead(_13);                // scope 2 at src/grammar.rs:33:18: 33:19
        goto -> bb16;                    // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb15: {
        _0 = const true;                 // scope 2 at src/grammar.rs:33:10: 33:19
        goto -> bb16;                    // scope 2 at src/grammar.rs:33:10: 33:19
    }

    bb16: {
        StorageDead(_9);                 // scope 2 at src/grammar.rs:33:18: 33:19
        StorageDead(_6);                 // scope 1 at src/grammar.rs:33:18: 33:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:33:18: 33:19
        return;                          // scope 0 at src/grammar.rs:33:19: 33:19
    }
}

fn grammar::<impl at src/grammar.rs:62:10: 62:19>::eq(_1: &grammar::Comparator, _2: &grammar::Comparator) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:62:10: 62:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:62:10: 62:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:62:10: 62:19
    let _3: isize;                       // in scope 0 at src/grammar.rs:62:10: 62:19
    let mut _4: &grammar::Comparator;    // in scope 0 at src/grammar.rs:62:10: 62:19
    let _5: &grammar::Comparator;        // in scope 0 at src/grammar.rs:62:10: 62:19
    let mut _7: &grammar::Comparator;    // in scope 0 at src/grammar.rs:62:10: 62:19
    let _8: &grammar::Comparator;        // in scope 0 at src/grammar.rs:62:10: 62:19
    let mut _9: bool;                    // in scope 0 at src/grammar.rs:62:10: 62:19
    let mut _10: bool;                   // in scope 0 at src/grammar.rs:62:10: 62:19
    let mut _11: isize;                  // in scope 0 at src/grammar.rs:62:10: 62:19
    let mut _12: isize;                  // in scope 0 at src/grammar.rs:62:10: 62:19
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at src/grammar.rs:62:10: 62:19
        let _6: isize;                   // in scope 1 at src/grammar.rs:62:10: 62:19
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at src/grammar.rs:62:10: 62:19
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:62:10: 62:19
        StorageLive(_4);                 // scope 0 at src/grammar.rs:62:10: 62:19
        StorageLive(_5);                 // scope 0 at src/grammar.rs:62:10: 62:19
        _5 = _1;                         // scope 0 at src/grammar.rs:62:10: 62:19
        _4 = _5;                         // scope 0 at src/grammar.rs:62:10: 62:19
        _3 = discriminant((*_4));        // scope 0 at src/grammar.rs:62:10: 62:19
        StorageDead(_4);                 // scope 0 at src/grammar.rs:62:18: 62:19
        StorageDead(_5);                 // scope 0 at src/grammar.rs:62:18: 62:19
        StorageLive(_6);                 // scope 1 at src/grammar.rs:62:10: 62:19
        StorageLive(_7);                 // scope 1 at src/grammar.rs:62:10: 62:19
        StorageLive(_8);                 // scope 1 at src/grammar.rs:62:10: 62:19
        _8 = _2;                         // scope 1 at src/grammar.rs:62:10: 62:19
        _7 = _8;                         // scope 1 at src/grammar.rs:62:10: 62:19
        _6 = discriminant((*_7));        // scope 1 at src/grammar.rs:62:10: 62:19
        StorageDead(_7);                 // scope 1 at src/grammar.rs:62:18: 62:19
        StorageDead(_8);                 // scope 1 at src/grammar.rs:62:18: 62:19
        StorageLive(_9);                 // scope 2 at src/grammar.rs:62:10: 62:19
        StorageLive(_10);                // scope 2 at src/grammar.rs:62:10: 62:19
        StorageLive(_11);                // scope 2 at src/grammar.rs:62:10: 62:19
        _11 = _3;                        // scope 2 at src/grammar.rs:62:10: 62:19
        StorageLive(_12);                // scope 2 at src/grammar.rs:62:10: 62:19
        _12 = _6;                        // scope 2 at src/grammar.rs:62:10: 62:19
        _10 = Eq(move _11, move _12);    // scope 2 at src/grammar.rs:62:10: 62:19
        StorageDead(_12);                // scope 2 at src/grammar.rs:62:18: 62:19
        StorageDead(_11);                // scope 2 at src/grammar.rs:62:18: 62:19
        _9 = move _10;                   // scope 2 at src/grammar.rs:62:10: 62:19
        StorageDead(_10);                // scope 2 at src/grammar.rs:62:18: 62:19
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 2 at src/grammar.rs:62:10: 62:19
    }

    bb1: {
        _0 = const true;                 // scope 2 at src/grammar.rs:62:10: 62:19
        goto -> bb3;                     // scope 2 at src/grammar.rs:62:10: 62:19
    }

    bb2: {
        _0 = const false;                // scope 2 at src/grammar.rs:62:10: 62:19
        goto -> bb3;                     // scope 2 at src/grammar.rs:62:10: 62:19
    }

    bb3: {
        StorageDead(_9);                 // scope 2 at src/grammar.rs:62:18: 62:19
        StorageDead(_6);                 // scope 1 at src/grammar.rs:62:18: 62:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:62:18: 62:19
        return;                          // scope 0 at src/grammar.rs:62:19: 62:19
    }
}

fn grammar::<impl at src/grammar.rs:2:10: 2:15>::fmt(_1: &grammar::AddOp, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/grammar.rs:2:10: 2:15
    debug f => _2;                       // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _3: (&grammar::AddOp,);      // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _4: &grammar::AddOp;         // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _5: isize;                   // in scope 0 at src/grammar.rs:2:10: 2:15
    let _6: &mut std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _7: std::fmt::DebugTuple;    // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _8: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _9: &str;                    // in scope 0 at src/grammar.rs:2:10: 2:15
    let _10: &str;                       // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _11: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:2:10: 2:15
    let _12: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _13: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _14: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _15: &str;                   // in scope 0 at src/grammar.rs:2:10: 2:15
    let _16: &str;                       // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _17: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:2:10: 2:15
    let _18: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _19: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _20: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _21: &str;                   // in scope 0 at src/grammar.rs:2:10: 2:15
    let _22: &str;                       // in scope 0 at src/grammar.rs:2:10: 2:15
    let mut _23: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:2:10: 2:15
    scope 1 {
        debug debug_trait_builder => _6; // in scope 1 at src/grammar.rs:2:10: 2:15
    }
    scope 2 {
        debug debug_trait_builder => _12; // in scope 2 at src/grammar.rs:2:10: 2:15
    }
    scope 3 {
        debug debug_trait_builder => _18; // in scope 3 at src/grammar.rs:2:10: 2:15
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_4);                 // scope 0 at src/grammar.rs:2:10: 2:15
        _4 = _1;                         // scope 0 at src/grammar.rs:2:10: 2:15
        (_3.0: &grammar::AddOp) = move _4; // scope 0 at src/grammar.rs:2:10: 2:15
        StorageDead(_4);                 // scope 0 at src/grammar.rs:2:14: 2:15
        _5 = discriminant((*(_3.0: &grammar::AddOp))); // scope 0 at src/grammar.rs:2:10: 2:15
        switchInt(move _5) -> [0_isize: bb3, 1_isize: bb6, 2_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar.rs:2:10: 2:15
    }

    bb1: {
        StorageLive(_18);                // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_19);                // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_20);                // scope 0 at src/grammar.rs:2:10: 2:15
        _20 = &mut (*_2);                // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_21);                // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_22);                // scope 0 at src/grammar.rs:2:10: 2:15
        _22 = const "Start";             // scope 0 at src/grammar.rs:2:10: 2:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 116, 97, 114, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:2:10: 2:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 116, 97, 114, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _21 = _22;                       // scope 0 at src/grammar.rs:2:10: 2:15
        _19 = Formatter::debug_tuple(move _20, move _21) -> bb9; // scope 0 at src/grammar.rs:2:10: 2:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:2:10: 2:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar.rs:2:10: 2:15
    }

    bb3: {
        StorageLive(_6);                 // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_7);                 // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_8);                 // scope 0 at src/grammar.rs:2:10: 2:15
        _8 = &mut (*_2);                 // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_9);                 // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_10);                // scope 0 at src/grammar.rs:2:10: 2:15
        _10 = const "Add";               // scope 0 at src/grammar.rs:2:10: 2:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [65, 100, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:2:10: 2:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 100, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [7], len: Size { raw: 3 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 3 }) }
        _9 = _10;                        // scope 0 at src/grammar.rs:2:10: 2:15
        _7 = Formatter::debug_tuple(move _8, move _9) -> bb4; // scope 0 at src/grammar.rs:2:10: 2:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:2:10: 2:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_9);                 // scope 0 at src/grammar.rs:2:14: 2:15
        StorageDead(_8);                 // scope 0 at src/grammar.rs:2:14: 2:15
        _6 = &mut _7;                    // scope 0 at src/grammar.rs:2:10: 2:15
        StorageDead(_10);                // scope 0 at src/grammar.rs:2:14: 2:15
        StorageLive(_11);                // scope 1 at src/grammar.rs:2:10: 2:15
        _11 = &mut (*_6);                // scope 1 at src/grammar.rs:2:10: 2:15
        _0 = DebugTuple::finish(move _11) -> bb5; // scope 1 at src/grammar.rs:2:10: 2:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:2:10: 2:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_11);                // scope 1 at src/grammar.rs:2:14: 2:15
        StorageDead(_7);                 // scope 0 at src/grammar.rs:2:14: 2:15
        StorageDead(_6);                 // scope 0 at src/grammar.rs:2:14: 2:15
        goto -> bb11;                    // scope 0 at src/grammar.rs:2:14: 2:15
    }

    bb6: {
        StorageLive(_12);                // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_13);                // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_14);                // scope 0 at src/grammar.rs:2:10: 2:15
        _14 = &mut (*_2);                // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_15);                // scope 0 at src/grammar.rs:2:10: 2:15
        StorageLive(_16);                // scope 0 at src/grammar.rs:2:10: 2:15
        _16 = const "Subtract";          // scope 0 at src/grammar.rs:2:10: 2:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 117, 98, 116, 114, 97, 99, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:2:10: 2:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 117, 98, 116, 114, 97, 99, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
        _15 = _16;                       // scope 0 at src/grammar.rs:2:10: 2:15
        _13 = Formatter::debug_tuple(move _14, move _15) -> bb7; // scope 0 at src/grammar.rs:2:10: 2:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:2:10: 2:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_15);                // scope 0 at src/grammar.rs:2:14: 2:15
        StorageDead(_14);                // scope 0 at src/grammar.rs:2:14: 2:15
        _12 = &mut _13;                  // scope 0 at src/grammar.rs:2:10: 2:15
        StorageDead(_16);                // scope 0 at src/grammar.rs:2:14: 2:15
        StorageLive(_17);                // scope 2 at src/grammar.rs:2:10: 2:15
        _17 = &mut (*_12);               // scope 2 at src/grammar.rs:2:10: 2:15
        _0 = DebugTuple::finish(move _17) -> bb8; // scope 2 at src/grammar.rs:2:10: 2:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:2:10: 2:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_17);                // scope 2 at src/grammar.rs:2:14: 2:15
        StorageDead(_13);                // scope 0 at src/grammar.rs:2:14: 2:15
        StorageDead(_12);                // scope 0 at src/grammar.rs:2:14: 2:15
        goto -> bb11;                    // scope 0 at src/grammar.rs:2:14: 2:15
    }

    bb9: {
        StorageDead(_21);                // scope 0 at src/grammar.rs:2:14: 2:15
        StorageDead(_20);                // scope 0 at src/grammar.rs:2:14: 2:15
        _18 = &mut _19;                  // scope 0 at src/grammar.rs:2:10: 2:15
        StorageDead(_22);                // scope 0 at src/grammar.rs:2:14: 2:15
        StorageLive(_23);                // scope 3 at src/grammar.rs:2:10: 2:15
        _23 = &mut (*_18);               // scope 3 at src/grammar.rs:2:10: 2:15
        _0 = DebugTuple::finish(move _23) -> bb10; // scope 3 at src/grammar.rs:2:10: 2:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:2:10: 2:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_23);                // scope 3 at src/grammar.rs:2:14: 2:15
        StorageDead(_19);                // scope 0 at src/grammar.rs:2:14: 2:15
        StorageDead(_18);                // scope 0 at src/grammar.rs:2:14: 2:15
        goto -> bb11;                    // scope 0 at src/grammar.rs:2:14: 2:15
    }

    bb11: {
        StorageDead(_3);                 // scope 0 at src/grammar.rs:2:14: 2:15
        return;                          // scope 0 at src/grammar.rs:2:15: 2:15
    }
}

fn program::{closure#4}(_1: &[closure@src/parser.rs:125:18: 125:77], _2: (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/parser.rs:125:43: 125:43
    let _3: grammar::Expr;               // in scope 0 at src/parser.rs:125:22: 125:23
    let _4: grammar::Comparator;         // in scope 0 at src/parser.rs:125:25: 125:28
    let _5: grammar::Expr;               // in scope 0 at src/parser.rs:125:31: 125:32
    let _6: grammar::Block;              // in scope 0 at src/parser.rs:125:35: 125:40
    let mut _7: grammar::Expr;           // in scope 0 at src/parser.rs:125:60: 125:61
    let mut _8: grammar::Comparator;     // in scope 0 at src/parser.rs:125:63: 125:66
    let mut _9: grammar::Expr;           // in scope 0 at src/parser.rs:125:68: 125:69
    let mut _10: grammar::Block;         // in scope 0 at src/parser.rs:125:71: 125:76
    scope 1 {
        debug l => _3;                   // in scope 1 at src/parser.rs:125:22: 125:23
        debug cmp => _4;                 // in scope 1 at src/parser.rs:125:25: 125:28
        debug r => _5;                   // in scope 1 at src/parser.rs:125:31: 125:32
        debug block => _6;               // in scope 1 at src/parser.rs:125:35: 125:40
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/parser.rs:125:22: 125:23
        _3 = move (((_2.0: ((grammar::Expr, grammar::Comparator), grammar::Expr)).0: (grammar::Expr, grammar::Comparator)).0: grammar::Expr); // scope 0 at src/parser.rs:125:22: 125:23
        StorageLive(_4);                 // scope 0 at src/parser.rs:125:25: 125:28
        _4 = move (((_2.0: ((grammar::Expr, grammar::Comparator), grammar::Expr)).0: (grammar::Expr, grammar::Comparator)).1: grammar::Comparator); // scope 0 at src/parser.rs:125:25: 125:28
        StorageLive(_5);                 // scope 0 at src/parser.rs:125:31: 125:32
        _5 = move ((_2.0: ((grammar::Expr, grammar::Comparator), grammar::Expr)).1: grammar::Expr); // scope 0 at src/parser.rs:125:31: 125:32
        StorageLive(_6);                 // scope 0 at src/parser.rs:125:35: 125:40
        _6 = move (_2.1: grammar::Block); // scope 0 at src/parser.rs:125:35: 125:40
        StorageLive(_7);                 // scope 1 at src/parser.rs:125:60: 125:61
        _7 = move _3;                    // scope 1 at src/parser.rs:125:60: 125:61
        StorageLive(_8);                 // scope 1 at src/parser.rs:125:63: 125:66
        _8 = move _4;                    // scope 1 at src/parser.rs:125:63: 125:66
        StorageLive(_9);                 // scope 1 at src/parser.rs:125:68: 125:69
        _9 = move _5;                    // scope 1 at src/parser.rs:125:68: 125:69
        StorageLive(_10);                // scope 1 at src/parser.rs:125:71: 125:76
        _10 = move _6;                   // scope 1 at src/parser.rs:125:71: 125:76
        ((_0 as While).0: grammar::Expr) = move _7; // scope 1 at src/parser.rs:125:43: 125:77
        ((_0 as While).1: grammar::Comparator) = move _8; // scope 1 at src/parser.rs:125:43: 125:77
        ((_0 as While).2: grammar::Expr) = move _9; // scope 1 at src/parser.rs:125:43: 125:77
        ((_0 as While).3: grammar::Block) = move _10; // scope 1 at src/parser.rs:125:43: 125:77
        discriminant(_0) = 3;            // scope 1 at src/parser.rs:125:43: 125:77
        StorageDead(_10);                // scope 1 at src/parser.rs:125:76: 125:77
        StorageDead(_9);                 // scope 1 at src/parser.rs:125:76: 125:77
        StorageDead(_8);                 // scope 1 at src/parser.rs:125:76: 125:77
        StorageDead(_7);                 // scope 1 at src/parser.rs:125:76: 125:77
        StorageDead(_6);                 // scope 0 at src/parser.rs:125:76: 125:77
        StorageDead(_5);                 // scope 0 at src/parser.rs:125:76: 125:77
        StorageDead(_4);                 // scope 0 at src/parser.rs:125:76: 125:77
        StorageDead(_3);                 // scope 0 at src/parser.rs:125:76: 125:77
        return;                          // scope 0 at src/parser.rs:125:77: 125:77
    }
}

fn if_stmt::{closure#0}(_1: &[closure@src/parser.rs:92:30: 95:15]) -> MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]> {
    let mut _0: peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>; // return place in scope 0 at src/parser.rs:92:33: 92:33
    let mut _2: [closure@src/parser.rs:92:41: 95:14]; // in scope 0 at src/parser.rs:92:41: 95:14

    bb0: {
        StorageLive(_2);                 // scope 0 at src/parser.rs:92:41: 95:14
        _0 = peruse::slice_parsers::matcher::<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>(move _2) -> bb1; // scope 0 at src/parser.rs:92:33: 95:15
                                         // mir::Constant
                                         // + span: src/parser.rs:92:33: 92:40
                                         // + literal: Const { ty: fn([closure@src/parser.rs:92:41: 95:14]) -> peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]> {peruse::slice_parsers::matcher::<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:92:41: 95:14]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at src/parser.rs:95:14: 95:15
        return;                          // scope 0 at src/parser.rs:95:15: 95:15
    }
}

fn grammar::<impl at src/grammar.rs:50:10: 50:19>::eq(_1: &grammar::Statement, _2: &grammar::Statement) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:50:10: 50:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:50:10: 50:19
    let _3: isize;                       // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _4: &grammar::Statement;     // in scope 0 at src/grammar.rs:50:10: 50:19
    let _5: &grammar::Statement;         // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _7: &grammar::Statement;     // in scope 0 at src/grammar.rs:50:10: 50:19
    let _8: &grammar::Statement;         // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _9: bool;                    // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _10: bool;                   // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _11: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _12: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _13: (&grammar::Statement, &grammar::Statement); // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _14: &grammar::Statement;    // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _15: &grammar::Statement;    // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _16: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _17: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _18: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _19: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _20: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _21: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _26: bool;                   // in scope 0 at src/grammar.rs:52:10: 52:16
    let mut _27: &std::string::String;   // in scope 0 at src/grammar.rs:52:10: 52:16
    let mut _28: &std::string::String;   // in scope 0 at src/grammar.rs:52:10: 52:16
    let mut _29: bool;                   // in scope 0 at src/grammar.rs:52:18: 52:22
    let mut _30: &grammar::Expr;         // in scope 0 at src/grammar.rs:52:18: 52:22
    let mut _31: &grammar::Expr;         // in scope 0 at src/grammar.rs:52:18: 52:22
    let mut _34: &grammar::Expr;         // in scope 0 at src/grammar.rs:53:10: 53:14
    let mut _35: &grammar::Expr;         // in scope 0 at src/grammar.rs:53:10: 53:14
    let mut _46: bool;                   // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _47: bool;                   // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _48: bool;                   // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _49: bool;                   // in scope 0 at src/grammar.rs:54:6: 54:10
    let mut _50: &grammar::Expr;         // in scope 0 at src/grammar.rs:54:6: 54:10
    let mut _51: &grammar::Expr;         // in scope 0 at src/grammar.rs:54:6: 54:10
    let mut _52: bool;                   // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _53: &grammar::Comparator;   // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _54: &grammar::Comparator;   // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _55: bool;                   // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _56: &grammar::Expr;         // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _57: &grammar::Expr;         // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _58: bool;                   // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _59: &grammar::Block;        // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _60: &grammar::Block;        // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _61: bool;                   // in scope 0 at src/grammar.rs:54:37: 54:50
    let mut _62: &std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let mut _63: &std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let mut _72: bool;                   // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _73: bool;                   // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _74: bool;                   // in scope 0 at src/grammar.rs:55:9: 55:13
    let mut _75: &grammar::Expr;         // in scope 0 at src/grammar.rs:55:9: 55:13
    let mut _76: &grammar::Expr;         // in scope 0 at src/grammar.rs:55:9: 55:13
    let mut _77: bool;                   // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _78: &grammar::Comparator;   // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _79: &grammar::Comparator;   // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _80: bool;                   // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _81: &grammar::Expr;         // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _82: &grammar::Expr;         // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _83: bool;                   // in scope 0 at src/grammar.rs:55:33: 55:38
    let mut _84: &grammar::Block;        // in scope 0 at src/grammar.rs:55:33: 55:38
    let mut _85: &grammar::Block;        // in scope 0 at src/grammar.rs:55:33: 55:38
    let mut _90: bool;                   // in scope 0 at src/grammar.rs:56:8: 56:12
    let mut _91: &grammar::Expr;         // in scope 0 at src/grammar.rs:56:8: 56:12
    let mut _92: &grammar::Expr;         // in scope 0 at src/grammar.rs:56:8: 56:12
    let mut _93: bool;                   // in scope 0 at src/grammar.rs:56:14: 56:19
    let mut _94: &grammar::Block;        // in scope 0 at src/grammar.rs:56:14: 56:19
    let mut _95: &grammar::Block;        // in scope 0 at src/grammar.rs:56:14: 56:19
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at src/grammar.rs:50:10: 50:19
        let _6: isize;                   // in scope 1 at src/grammar.rs:50:10: 50:19
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at src/grammar.rs:50:10: 50:19
            let _22: &std::string::String; // in scope 2 at src/grammar.rs:52:10: 52:16
            let _23: &grammar::Expr;     // in scope 2 at src/grammar.rs:52:18: 52:22
            let _24: &std::string::String; // in scope 2 at src/grammar.rs:52:10: 52:16
            let _25: &grammar::Expr;     // in scope 2 at src/grammar.rs:52:18: 52:22
            let _32: &grammar::Expr;     // in scope 2 at src/grammar.rs:53:10: 53:14
            let _33: &grammar::Expr;     // in scope 2 at src/grammar.rs:53:10: 53:14
            let _36: &grammar::Expr;     // in scope 2 at src/grammar.rs:54:6: 54:10
            let _37: &grammar::Comparator; // in scope 2 at src/grammar.rs:54:12: 54:22
            let _38: &grammar::Expr;     // in scope 2 at src/grammar.rs:54:24: 54:28
            let _39: &grammar::Block;    // in scope 2 at src/grammar.rs:54:30: 54:35
            let _40: &std::option::Option<grammar::Block>; // in scope 2 at src/grammar.rs:54:37: 54:50
            let _41: &grammar::Expr;     // in scope 2 at src/grammar.rs:54:6: 54:10
            let _42: &grammar::Comparator; // in scope 2 at src/grammar.rs:54:12: 54:22
            let _43: &grammar::Expr;     // in scope 2 at src/grammar.rs:54:24: 54:28
            let _44: &grammar::Block;    // in scope 2 at src/grammar.rs:54:30: 54:35
            let _45: &std::option::Option<grammar::Block>; // in scope 2 at src/grammar.rs:54:37: 54:50
            let _64: &grammar::Expr;     // in scope 2 at src/grammar.rs:55:9: 55:13
            let _65: &grammar::Comparator; // in scope 2 at src/grammar.rs:55:15: 55:25
            let _66: &grammar::Expr;     // in scope 2 at src/grammar.rs:55:27: 55:31
            let _67: &grammar::Block;    // in scope 2 at src/grammar.rs:55:33: 55:38
            let _68: &grammar::Expr;     // in scope 2 at src/grammar.rs:55:9: 55:13
            let _69: &grammar::Comparator; // in scope 2 at src/grammar.rs:55:15: 55:25
            let _70: &grammar::Expr;     // in scope 2 at src/grammar.rs:55:27: 55:31
            let _71: &grammar::Block;    // in scope 2 at src/grammar.rs:55:33: 55:38
            let _86: &grammar::Expr;     // in scope 2 at src/grammar.rs:56:8: 56:12
            let _87: &grammar::Block;    // in scope 2 at src/grammar.rs:56:14: 56:19
            let _88: &grammar::Expr;     // in scope 2 at src/grammar.rs:56:8: 56:12
            let _89: &grammar::Block;    // in scope 2 at src/grammar.rs:56:14: 56:19
            scope 3 {
                debug __self_0 => _22;   // in scope 3 at src/grammar.rs:52:10: 52:16
                debug __self_1 => _23;   // in scope 3 at src/grammar.rs:52:18: 52:22
                debug __arg_1_0 => _24;  // in scope 3 at src/grammar.rs:52:10: 52:16
                debug __arg_1_1 => _25;  // in scope 3 at src/grammar.rs:52:18: 52:22
            }
            scope 4 {
                debug __self_0 => _32;   // in scope 4 at src/grammar.rs:53:10: 53:14
                debug __arg_1_0 => _33;  // in scope 4 at src/grammar.rs:53:10: 53:14
            }
            scope 5 {
                debug __self_0 => _36;   // in scope 5 at src/grammar.rs:54:6: 54:10
                debug __self_1 => _37;   // in scope 5 at src/grammar.rs:54:12: 54:22
                debug __self_2 => _38;   // in scope 5 at src/grammar.rs:54:24: 54:28
                debug __self_3 => _39;   // in scope 5 at src/grammar.rs:54:30: 54:35
                debug __self_4 => _40;   // in scope 5 at src/grammar.rs:54:37: 54:50
                debug __arg_1_0 => _41;  // in scope 5 at src/grammar.rs:54:6: 54:10
                debug __arg_1_1 => _42;  // in scope 5 at src/grammar.rs:54:12: 54:22
                debug __arg_1_2 => _43;  // in scope 5 at src/grammar.rs:54:24: 54:28
                debug __arg_1_3 => _44;  // in scope 5 at src/grammar.rs:54:30: 54:35
                debug __arg_1_4 => _45;  // in scope 5 at src/grammar.rs:54:37: 54:50
            }
            scope 6 {
                debug __self_0 => _64;   // in scope 6 at src/grammar.rs:55:9: 55:13
                debug __self_1 => _65;   // in scope 6 at src/grammar.rs:55:15: 55:25
                debug __self_2 => _66;   // in scope 6 at src/grammar.rs:55:27: 55:31
                debug __self_3 => _67;   // in scope 6 at src/grammar.rs:55:33: 55:38
                debug __arg_1_0 => _68;  // in scope 6 at src/grammar.rs:55:9: 55:13
                debug __arg_1_1 => _69;  // in scope 6 at src/grammar.rs:55:15: 55:25
                debug __arg_1_2 => _70;  // in scope 6 at src/grammar.rs:55:27: 55:31
                debug __arg_1_3 => _71;  // in scope 6 at src/grammar.rs:55:33: 55:38
            }
            scope 7 {
                debug __self_0 => _86;   // in scope 7 at src/grammar.rs:56:8: 56:12
                debug __self_1 => _87;   // in scope 7 at src/grammar.rs:56:14: 56:19
                debug __arg_1_0 => _88;  // in scope 7 at src/grammar.rs:56:8: 56:12
                debug __arg_1_1 => _89;  // in scope 7 at src/grammar.rs:56:14: 56:19
            }
            scope 8 {
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:50:10: 50:19
        StorageLive(_4);                 // scope 0 at src/grammar.rs:50:10: 50:19
        StorageLive(_5);                 // scope 0 at src/grammar.rs:50:10: 50:19
        _5 = _1;                         // scope 0 at src/grammar.rs:50:10: 50:19
        _4 = _5;                         // scope 0 at src/grammar.rs:50:10: 50:19
        _3 = discriminant((*_4));        // scope 0 at src/grammar.rs:50:10: 50:19
        StorageDead(_4);                 // scope 0 at src/grammar.rs:50:18: 50:19
        StorageDead(_5);                 // scope 0 at src/grammar.rs:50:18: 50:19
        StorageLive(_6);                 // scope 1 at src/grammar.rs:50:10: 50:19
        StorageLive(_7);                 // scope 1 at src/grammar.rs:50:10: 50:19
        StorageLive(_8);                 // scope 1 at src/grammar.rs:50:10: 50:19
        _8 = _2;                         // scope 1 at src/grammar.rs:50:10: 50:19
        _7 = _8;                         // scope 1 at src/grammar.rs:50:10: 50:19
        _6 = discriminant((*_7));        // scope 1 at src/grammar.rs:50:10: 50:19
        StorageDead(_7);                 // scope 1 at src/grammar.rs:50:18: 50:19
        StorageDead(_8);                 // scope 1 at src/grammar.rs:50:18: 50:19
        StorageLive(_9);                 // scope 2 at src/grammar.rs:50:10: 50:19
        StorageLive(_10);                // scope 2 at src/grammar.rs:50:10: 50:19
        StorageLive(_11);                // scope 2 at src/grammar.rs:50:10: 50:19
        _11 = _3;                        // scope 2 at src/grammar.rs:50:10: 50:19
        StorageLive(_12);                // scope 2 at src/grammar.rs:50:10: 50:19
        _12 = _6;                        // scope 2 at src/grammar.rs:50:10: 50:19
        _10 = Eq(move _11, move _12);    // scope 2 at src/grammar.rs:50:10: 50:19
        StorageDead(_12);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_11);                // scope 2 at src/grammar.rs:50:18: 50:19
        _9 = move _10;                   // scope 2 at src/grammar.rs:50:10: 50:19
        StorageDead(_10);                // scope 2 at src/grammar.rs:50:18: 50:19
        switchInt(move _9) -> [false: bb55, otherwise: bb1]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb1: {
        StorageLive(_13);                // scope 2 at src/grammar.rs:50:10: 50:19
        StorageLive(_14);                // scope 2 at src/grammar.rs:50:10: 50:19
        _14 = _1;                        // scope 2 at src/grammar.rs:50:10: 50:19
        StorageLive(_15);                // scope 2 at src/grammar.rs:50:10: 50:19
        _15 = _2;                        // scope 2 at src/grammar.rs:50:10: 50:19
        (_13.0: &grammar::Statement) = move _14; // scope 2 at src/grammar.rs:50:10: 50:19
        (_13.1: &grammar::Statement) = move _15; // scope 2 at src/grammar.rs:50:10: 50:19
        StorageDead(_15);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_14);                // scope 2 at src/grammar.rs:50:18: 50:19
        _21 = discriminant((*(_13.0: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _21) -> [0_isize: bb2, 1_isize: bb4, 2_isize: bb5, 3_isize: bb6, 4_isize: bb7, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb2: {
        _16 = discriminant((*(_13.1: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _16) -> [0_isize: bb8, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb3: {
        unreachable;                     // scope 8 at src/grammar.rs:50:10: 50:19
    }

    bb4: {
        _17 = discriminant((*(_13.1: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _17) -> [1_isize: bb14, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb5: {
        _18 = discriminant((*(_13.1: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _18) -> [2_isize: bb16, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb6: {
        _19 = discriminant((*(_13.1: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _19) -> [3_isize: bb34, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb7: {
        _20 = discriminant((*(_13.1: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _20) -> [4_isize: bb48, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb8: {
        StorageLive(_22);                // scope 2 at src/grammar.rs:52:10: 52:16
        _22 = &(((*(_13.0: &grammar::Statement)) as Assign).0: std::string::String); // scope 2 at src/grammar.rs:52:10: 52:16
        StorageLive(_23);                // scope 2 at src/grammar.rs:52:18: 52:22
        _23 = &(((*(_13.0: &grammar::Statement)) as Assign).1: grammar::Expr); // scope 2 at src/grammar.rs:52:18: 52:22
        StorageLive(_24);                // scope 2 at src/grammar.rs:52:10: 52:16
        _24 = &(((*(_13.1: &grammar::Statement)) as Assign).0: std::string::String); // scope 2 at src/grammar.rs:52:10: 52:16
        StorageLive(_25);                // scope 2 at src/grammar.rs:52:18: 52:22
        _25 = &(((*(_13.1: &grammar::Statement)) as Assign).1: grammar::Expr); // scope 2 at src/grammar.rs:52:18: 52:22
        StorageLive(_26);                // scope 3 at src/grammar.rs:52:10: 52:16
        StorageLive(_27);                // scope 3 at src/grammar.rs:52:10: 52:16
        _27 = _22;                       // scope 3 at src/grammar.rs:52:10: 52:16
        StorageLive(_28);                // scope 3 at src/grammar.rs:52:10: 52:16
        _28 = _24;                       // scope 3 at src/grammar.rs:52:10: 52:16
        _26 = <String as PartialEq>::eq(move _27, move _28) -> bb12; // scope 3 at src/grammar.rs:52:10: 52:16
                                         // mir::Constant
                                         // + span: src/grammar.rs:52:10: 52:16
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::string::String, &'s std::string::String) -> bool {<std::string::String as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _0 = const false;                // scope 3 at src/grammar.rs:52:18: 52:22
        goto -> bb11;                    // scope 3 at src/grammar.rs:52:18: 52:22
    }

    bb10: {
        StorageLive(_29);                // scope 3 at src/grammar.rs:52:18: 52:22
        StorageLive(_30);                // scope 3 at src/grammar.rs:52:18: 52:22
        _30 = _23;                       // scope 3 at src/grammar.rs:52:18: 52:22
        StorageLive(_31);                // scope 3 at src/grammar.rs:52:18: 52:22
        _31 = _25;                       // scope 3 at src/grammar.rs:52:18: 52:22
        _29 = <grammar::Expr as PartialEq>::eq(move _30, move _31) -> bb13; // scope 3 at src/grammar.rs:52:18: 52:22
                                         // mir::Constant
                                         // + span: src/grammar.rs:52:18: 52:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_29);                // scope 3 at src/grammar.rs:52:21: 52:22
        StorageDead(_26);                // scope 3 at src/grammar.rs:52:21: 52:22
        StorageDead(_25);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_24);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_23);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_22);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb54;                    // scope 2 at src/grammar.rs:50:18: 50:19
    }

    bb12: {
        StorageDead(_28);                // scope 3 at src/grammar.rs:52:15: 52:16
        StorageDead(_27);                // scope 3 at src/grammar.rs:52:15: 52:16
        switchInt(move _26) -> [false: bb9, otherwise: bb10]; // scope 3 at src/grammar.rs:52:18: 52:22
    }

    bb13: {
        StorageDead(_31);                // scope 3 at src/grammar.rs:52:21: 52:22
        StorageDead(_30);                // scope 3 at src/grammar.rs:52:21: 52:22
        _0 = move _29;                   // scope 3 at src/grammar.rs:52:18: 52:22
        goto -> bb11;                    // scope 3 at src/grammar.rs:52:18: 52:22
    }

    bb14: {
        StorageLive(_32);                // scope 2 at src/grammar.rs:53:10: 53:14
        _32 = &(((*(_13.0: &grammar::Statement)) as Output).0: grammar::Expr); // scope 2 at src/grammar.rs:53:10: 53:14
        StorageLive(_33);                // scope 2 at src/grammar.rs:53:10: 53:14
        _33 = &(((*(_13.1: &grammar::Statement)) as Output).0: grammar::Expr); // scope 2 at src/grammar.rs:53:10: 53:14
        StorageLive(_34);                // scope 4 at src/grammar.rs:53:10: 53:14
        _34 = _32;                       // scope 4 at src/grammar.rs:53:10: 53:14
        StorageLive(_35);                // scope 4 at src/grammar.rs:53:10: 53:14
        _35 = _33;                       // scope 4 at src/grammar.rs:53:10: 53:14
        _0 = <grammar::Expr as PartialEq>::eq(move _34, move _35) -> bb15; // scope 4 at src/grammar.rs:53:10: 53:14
                                         // mir::Constant
                                         // + span: src/grammar.rs:53:10: 53:14
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_35);                // scope 4 at src/grammar.rs:53:13: 53:14
        StorageDead(_34);                // scope 4 at src/grammar.rs:53:13: 53:14
        StorageDead(_33);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_32);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb54;                    // scope 2 at src/grammar.rs:50:18: 50:19
    }

    bb16: {
        StorageLive(_36);                // scope 2 at src/grammar.rs:54:6: 54:10
        _36 = &(((*(_13.0: &grammar::Statement)) as If).0: grammar::Expr); // scope 2 at src/grammar.rs:54:6: 54:10
        StorageLive(_37);                // scope 2 at src/grammar.rs:54:12: 54:22
        _37 = &(((*(_13.0: &grammar::Statement)) as If).1: grammar::Comparator); // scope 2 at src/grammar.rs:54:12: 54:22
        StorageLive(_38);                // scope 2 at src/grammar.rs:54:24: 54:28
        _38 = &(((*(_13.0: &grammar::Statement)) as If).2: grammar::Expr); // scope 2 at src/grammar.rs:54:24: 54:28
        StorageLive(_39);                // scope 2 at src/grammar.rs:54:30: 54:35
        _39 = &(((*(_13.0: &grammar::Statement)) as If).3: grammar::Block); // scope 2 at src/grammar.rs:54:30: 54:35
        StorageLive(_40);                // scope 2 at src/grammar.rs:54:37: 54:50
        _40 = &(((*(_13.0: &grammar::Statement)) as If).4: std::option::Option<grammar::Block>); // scope 2 at src/grammar.rs:54:37: 54:50
        StorageLive(_41);                // scope 2 at src/grammar.rs:54:6: 54:10
        _41 = &(((*(_13.1: &grammar::Statement)) as If).0: grammar::Expr); // scope 2 at src/grammar.rs:54:6: 54:10
        StorageLive(_42);                // scope 2 at src/grammar.rs:54:12: 54:22
        _42 = &(((*(_13.1: &grammar::Statement)) as If).1: grammar::Comparator); // scope 2 at src/grammar.rs:54:12: 54:22
        StorageLive(_43);                // scope 2 at src/grammar.rs:54:24: 54:28
        _43 = &(((*(_13.1: &grammar::Statement)) as If).2: grammar::Expr); // scope 2 at src/grammar.rs:54:24: 54:28
        StorageLive(_44);                // scope 2 at src/grammar.rs:54:30: 54:35
        _44 = &(((*(_13.1: &grammar::Statement)) as If).3: grammar::Block); // scope 2 at src/grammar.rs:54:30: 54:35
        StorageLive(_45);                // scope 2 at src/grammar.rs:54:37: 54:50
        _45 = &(((*(_13.1: &grammar::Statement)) as If).4: std::option::Option<grammar::Block>); // scope 2 at src/grammar.rs:54:37: 54:50
        StorageLive(_46);                // scope 5 at src/grammar.rs:54:30: 54:35
        StorageLive(_47);                // scope 5 at src/grammar.rs:54:24: 54:28
        StorageLive(_48);                // scope 5 at src/grammar.rs:54:12: 54:22
        StorageLive(_49);                // scope 5 at src/grammar.rs:54:6: 54:10
        StorageLive(_50);                // scope 5 at src/grammar.rs:54:6: 54:10
        _50 = _36;                       // scope 5 at src/grammar.rs:54:6: 54:10
        StorageLive(_51);                // scope 5 at src/grammar.rs:54:6: 54:10
        _51 = _41;                       // scope 5 at src/grammar.rs:54:6: 54:10
        _49 = <grammar::Expr as PartialEq>::eq(move _50, move _51) -> bb29; // scope 5 at src/grammar.rs:54:6: 54:10
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:6: 54:10
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        _0 = const false;                // scope 5 at src/grammar.rs:54:37: 54:50
        goto -> bb19;                    // scope 5 at src/grammar.rs:54:37: 54:50
    }

    bb18: {
        StorageLive(_61);                // scope 5 at src/grammar.rs:54:37: 54:50
        StorageLive(_62);                // scope 5 at src/grammar.rs:54:37: 54:50
        _62 = _40;                       // scope 5 at src/grammar.rs:54:37: 54:50
        StorageLive(_63);                // scope 5 at src/grammar.rs:54:37: 54:50
        _63 = _45;                       // scope 5 at src/grammar.rs:54:37: 54:50
        _61 = <Option<grammar::Block> as PartialEq>::eq(move _62, move _63) -> bb33; // scope 5 at src/grammar.rs:54:37: 54:50
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:37: 54:50
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::option::Option<grammar::Block>, &'s std::option::Option<grammar::Block>) -> bool {<std::option::Option<grammar::Block> as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_61);                // scope 5 at src/grammar.rs:54:49: 54:50
        StorageDead(_46);                // scope 5 at src/grammar.rs:54:49: 54:50
        StorageDead(_45);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_44);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_43);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_42);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_41);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_40);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_39);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_38);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_37);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_36);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb54;                    // scope 2 at src/grammar.rs:50:18: 50:19
    }

    bb20: {
        _46 = const false;               // scope 5 at src/grammar.rs:54:30: 54:35
        goto -> bb22;                    // scope 5 at src/grammar.rs:54:30: 54:35
    }

    bb21: {
        StorageLive(_58);                // scope 5 at src/grammar.rs:54:30: 54:35
        StorageLive(_59);                // scope 5 at src/grammar.rs:54:30: 54:35
        _59 = _39;                       // scope 5 at src/grammar.rs:54:30: 54:35
        StorageLive(_60);                // scope 5 at src/grammar.rs:54:30: 54:35
        _60 = _44;                       // scope 5 at src/grammar.rs:54:30: 54:35
        _58 = <grammar::Block as PartialEq>::eq(move _59, move _60) -> bb32; // scope 5 at src/grammar.rs:54:30: 54:35
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:30: 54:35
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Block, &'s grammar::Block) -> bool {<grammar::Block as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_58);                // scope 5 at src/grammar.rs:54:34: 54:35
        StorageDead(_47);                // scope 5 at src/grammar.rs:54:34: 54:35
        switchInt(move _46) -> [false: bb17, otherwise: bb18]; // scope 5 at src/grammar.rs:54:37: 54:50
    }

    bb23: {
        _47 = const false;               // scope 5 at src/grammar.rs:54:24: 54:28
        goto -> bb25;                    // scope 5 at src/grammar.rs:54:24: 54:28
    }

    bb24: {
        StorageLive(_55);                // scope 5 at src/grammar.rs:54:24: 54:28
        StorageLive(_56);                // scope 5 at src/grammar.rs:54:24: 54:28
        _56 = _38;                       // scope 5 at src/grammar.rs:54:24: 54:28
        StorageLive(_57);                // scope 5 at src/grammar.rs:54:24: 54:28
        _57 = _43;                       // scope 5 at src/grammar.rs:54:24: 54:28
        _55 = <grammar::Expr as PartialEq>::eq(move _56, move _57) -> bb31; // scope 5 at src/grammar.rs:54:24: 54:28
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:24: 54:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        StorageDead(_55);                // scope 5 at src/grammar.rs:54:27: 54:28
        StorageDead(_48);                // scope 5 at src/grammar.rs:54:27: 54:28
        switchInt(move _47) -> [false: bb20, otherwise: bb21]; // scope 5 at src/grammar.rs:54:30: 54:35
    }

    bb26: {
        _48 = const false;               // scope 5 at src/grammar.rs:54:12: 54:22
        goto -> bb28;                    // scope 5 at src/grammar.rs:54:12: 54:22
    }

    bb27: {
        StorageLive(_52);                // scope 5 at src/grammar.rs:54:12: 54:22
        StorageLive(_53);                // scope 5 at src/grammar.rs:54:12: 54:22
        _53 = _37;                       // scope 5 at src/grammar.rs:54:12: 54:22
        StorageLive(_54);                // scope 5 at src/grammar.rs:54:12: 54:22
        _54 = _42;                       // scope 5 at src/grammar.rs:54:12: 54:22
        _52 = <grammar::Comparator as PartialEq>::eq(move _53, move _54) -> bb30; // scope 5 at src/grammar.rs:54:12: 54:22
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:12: 54:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Comparator, &'s grammar::Comparator) -> bool {<grammar::Comparator as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        StorageDead(_52);                // scope 5 at src/grammar.rs:54:21: 54:22
        StorageDead(_49);                // scope 5 at src/grammar.rs:54:21: 54:22
        switchInt(move _48) -> [false: bb23, otherwise: bb24]; // scope 5 at src/grammar.rs:54:24: 54:28
    }

    bb29: {
        StorageDead(_51);                // scope 5 at src/grammar.rs:54:9: 54:10
        StorageDead(_50);                // scope 5 at src/grammar.rs:54:9: 54:10
        switchInt(move _49) -> [false: bb26, otherwise: bb27]; // scope 5 at src/grammar.rs:54:12: 54:22
    }

    bb30: {
        StorageDead(_54);                // scope 5 at src/grammar.rs:54:21: 54:22
        StorageDead(_53);                // scope 5 at src/grammar.rs:54:21: 54:22
        _48 = move _52;                  // scope 5 at src/grammar.rs:54:12: 54:22
        goto -> bb28;                    // scope 5 at src/grammar.rs:54:12: 54:22
    }

    bb31: {
        StorageDead(_57);                // scope 5 at src/grammar.rs:54:27: 54:28
        StorageDead(_56);                // scope 5 at src/grammar.rs:54:27: 54:28
        _47 = move _55;                  // scope 5 at src/grammar.rs:54:24: 54:28
        goto -> bb25;                    // scope 5 at src/grammar.rs:54:24: 54:28
    }

    bb32: {
        StorageDead(_60);                // scope 5 at src/grammar.rs:54:34: 54:35
        StorageDead(_59);                // scope 5 at src/grammar.rs:54:34: 54:35
        _46 = move _58;                  // scope 5 at src/grammar.rs:54:30: 54:35
        goto -> bb22;                    // scope 5 at src/grammar.rs:54:30: 54:35
    }

    bb33: {
        StorageDead(_63);                // scope 5 at src/grammar.rs:54:49: 54:50
        StorageDead(_62);                // scope 5 at src/grammar.rs:54:49: 54:50
        _0 = move _61;                   // scope 5 at src/grammar.rs:54:37: 54:50
        goto -> bb19;                    // scope 5 at src/grammar.rs:54:37: 54:50
    }

    bb34: {
        StorageLive(_64);                // scope 2 at src/grammar.rs:55:9: 55:13
        _64 = &(((*(_13.0: &grammar::Statement)) as While).0: grammar::Expr); // scope 2 at src/grammar.rs:55:9: 55:13
        StorageLive(_65);                // scope 2 at src/grammar.rs:55:15: 55:25
        _65 = &(((*(_13.0: &grammar::Statement)) as While).1: grammar::Comparator); // scope 2 at src/grammar.rs:55:15: 55:25
        StorageLive(_66);                // scope 2 at src/grammar.rs:55:27: 55:31
        _66 = &(((*(_13.0: &grammar::Statement)) as While).2: grammar::Expr); // scope 2 at src/grammar.rs:55:27: 55:31
        StorageLive(_67);                // scope 2 at src/grammar.rs:55:33: 55:38
        _67 = &(((*(_13.0: &grammar::Statement)) as While).3: grammar::Block); // scope 2 at src/grammar.rs:55:33: 55:38
        StorageLive(_68);                // scope 2 at src/grammar.rs:55:9: 55:13
        _68 = &(((*(_13.1: &grammar::Statement)) as While).0: grammar::Expr); // scope 2 at src/grammar.rs:55:9: 55:13
        StorageLive(_69);                // scope 2 at src/grammar.rs:55:15: 55:25
        _69 = &(((*(_13.1: &grammar::Statement)) as While).1: grammar::Comparator); // scope 2 at src/grammar.rs:55:15: 55:25
        StorageLive(_70);                // scope 2 at src/grammar.rs:55:27: 55:31
        _70 = &(((*(_13.1: &grammar::Statement)) as While).2: grammar::Expr); // scope 2 at src/grammar.rs:55:27: 55:31
        StorageLive(_71);                // scope 2 at src/grammar.rs:55:33: 55:38
        _71 = &(((*(_13.1: &grammar::Statement)) as While).3: grammar::Block); // scope 2 at src/grammar.rs:55:33: 55:38
        StorageLive(_72);                // scope 6 at src/grammar.rs:55:27: 55:31
        StorageLive(_73);                // scope 6 at src/grammar.rs:55:15: 55:25
        StorageLive(_74);                // scope 6 at src/grammar.rs:55:9: 55:13
        StorageLive(_75);                // scope 6 at src/grammar.rs:55:9: 55:13
        _75 = _64;                       // scope 6 at src/grammar.rs:55:9: 55:13
        StorageLive(_76);                // scope 6 at src/grammar.rs:55:9: 55:13
        _76 = _68;                       // scope 6 at src/grammar.rs:55:9: 55:13
        _74 = <grammar::Expr as PartialEq>::eq(move _75, move _76) -> bb44; // scope 6 at src/grammar.rs:55:9: 55:13
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:9: 55:13
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb35: {
        _0 = const false;                // scope 6 at src/grammar.rs:55:33: 55:38
        goto -> bb37;                    // scope 6 at src/grammar.rs:55:33: 55:38
    }

    bb36: {
        StorageLive(_83);                // scope 6 at src/grammar.rs:55:33: 55:38
        StorageLive(_84);                // scope 6 at src/grammar.rs:55:33: 55:38
        _84 = _67;                       // scope 6 at src/grammar.rs:55:33: 55:38
        StorageLive(_85);                // scope 6 at src/grammar.rs:55:33: 55:38
        _85 = _71;                       // scope 6 at src/grammar.rs:55:33: 55:38
        _83 = <grammar::Block as PartialEq>::eq(move _84, move _85) -> bb47; // scope 6 at src/grammar.rs:55:33: 55:38
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:33: 55:38
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Block, &'s grammar::Block) -> bool {<grammar::Block as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb37: {
        StorageDead(_83);                // scope 6 at src/grammar.rs:55:37: 55:38
        StorageDead(_72);                // scope 6 at src/grammar.rs:55:37: 55:38
        StorageDead(_71);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_70);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_69);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_68);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_67);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_66);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_65);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_64);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb54;                    // scope 2 at src/grammar.rs:50:18: 50:19
    }

    bb38: {
        _72 = const false;               // scope 6 at src/grammar.rs:55:27: 55:31
        goto -> bb40;                    // scope 6 at src/grammar.rs:55:27: 55:31
    }

    bb39: {
        StorageLive(_80);                // scope 6 at src/grammar.rs:55:27: 55:31
        StorageLive(_81);                // scope 6 at src/grammar.rs:55:27: 55:31
        _81 = _66;                       // scope 6 at src/grammar.rs:55:27: 55:31
        StorageLive(_82);                // scope 6 at src/grammar.rs:55:27: 55:31
        _82 = _70;                       // scope 6 at src/grammar.rs:55:27: 55:31
        _80 = <grammar::Expr as PartialEq>::eq(move _81, move _82) -> bb46; // scope 6 at src/grammar.rs:55:27: 55:31
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:27: 55:31
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb40: {
        StorageDead(_80);                // scope 6 at src/grammar.rs:55:30: 55:31
        StorageDead(_73);                // scope 6 at src/grammar.rs:55:30: 55:31
        switchInt(move _72) -> [false: bb35, otherwise: bb36]; // scope 6 at src/grammar.rs:55:33: 55:38
    }

    bb41: {
        _73 = const false;               // scope 6 at src/grammar.rs:55:15: 55:25
        goto -> bb43;                    // scope 6 at src/grammar.rs:55:15: 55:25
    }

    bb42: {
        StorageLive(_77);                // scope 6 at src/grammar.rs:55:15: 55:25
        StorageLive(_78);                // scope 6 at src/grammar.rs:55:15: 55:25
        _78 = _65;                       // scope 6 at src/grammar.rs:55:15: 55:25
        StorageLive(_79);                // scope 6 at src/grammar.rs:55:15: 55:25
        _79 = _69;                       // scope 6 at src/grammar.rs:55:15: 55:25
        _77 = <grammar::Comparator as PartialEq>::eq(move _78, move _79) -> bb45; // scope 6 at src/grammar.rs:55:15: 55:25
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:15: 55:25
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Comparator, &'s grammar::Comparator) -> bool {<grammar::Comparator as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb43: {
        StorageDead(_77);                // scope 6 at src/grammar.rs:55:24: 55:25
        StorageDead(_74);                // scope 6 at src/grammar.rs:55:24: 55:25
        switchInt(move _73) -> [false: bb38, otherwise: bb39]; // scope 6 at src/grammar.rs:55:27: 55:31
    }

    bb44: {
        StorageDead(_76);                // scope 6 at src/grammar.rs:55:12: 55:13
        StorageDead(_75);                // scope 6 at src/grammar.rs:55:12: 55:13
        switchInt(move _74) -> [false: bb41, otherwise: bb42]; // scope 6 at src/grammar.rs:55:15: 55:25
    }

    bb45: {
        StorageDead(_79);                // scope 6 at src/grammar.rs:55:24: 55:25
        StorageDead(_78);                // scope 6 at src/grammar.rs:55:24: 55:25
        _73 = move _77;                  // scope 6 at src/grammar.rs:55:15: 55:25
        goto -> bb43;                    // scope 6 at src/grammar.rs:55:15: 55:25
    }

    bb46: {
        StorageDead(_82);                // scope 6 at src/grammar.rs:55:30: 55:31
        StorageDead(_81);                // scope 6 at src/grammar.rs:55:30: 55:31
        _72 = move _80;                  // scope 6 at src/grammar.rs:55:27: 55:31
        goto -> bb40;                    // scope 6 at src/grammar.rs:55:27: 55:31
    }

    bb47: {
        StorageDead(_85);                // scope 6 at src/grammar.rs:55:37: 55:38
        StorageDead(_84);                // scope 6 at src/grammar.rs:55:37: 55:38
        _0 = move _83;                   // scope 6 at src/grammar.rs:55:33: 55:38
        goto -> bb37;                    // scope 6 at src/grammar.rs:55:33: 55:38
    }

    bb48: {
        StorageLive(_86);                // scope 2 at src/grammar.rs:56:8: 56:12
        _86 = &(((*(_13.0: &grammar::Statement)) as Loop).0: grammar::Expr); // scope 2 at src/grammar.rs:56:8: 56:12
        StorageLive(_87);                // scope 2 at src/grammar.rs:56:14: 56:19
        _87 = &(((*(_13.0: &grammar::Statement)) as Loop).1: grammar::Block); // scope 2 at src/grammar.rs:56:14: 56:19
        StorageLive(_88);                // scope 2 at src/grammar.rs:56:8: 56:12
        _88 = &(((*(_13.1: &grammar::Statement)) as Loop).0: grammar::Expr); // scope 2 at src/grammar.rs:56:8: 56:12
        StorageLive(_89);                // scope 2 at src/grammar.rs:56:14: 56:19
        _89 = &(((*(_13.1: &grammar::Statement)) as Loop).1: grammar::Block); // scope 2 at src/grammar.rs:56:14: 56:19
        StorageLive(_90);                // scope 7 at src/grammar.rs:56:8: 56:12
        StorageLive(_91);                // scope 7 at src/grammar.rs:56:8: 56:12
        _91 = _86;                       // scope 7 at src/grammar.rs:56:8: 56:12
        StorageLive(_92);                // scope 7 at src/grammar.rs:56:8: 56:12
        _92 = _88;                       // scope 7 at src/grammar.rs:56:8: 56:12
        _90 = <grammar::Expr as PartialEq>::eq(move _91, move _92) -> bb52; // scope 7 at src/grammar.rs:56:8: 56:12
                                         // mir::Constant
                                         // + span: src/grammar.rs:56:8: 56:12
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb49: {
        _0 = const false;                // scope 7 at src/grammar.rs:56:14: 56:19
        goto -> bb51;                    // scope 7 at src/grammar.rs:56:14: 56:19
    }

    bb50: {
        StorageLive(_93);                // scope 7 at src/grammar.rs:56:14: 56:19
        StorageLive(_94);                // scope 7 at src/grammar.rs:56:14: 56:19
        _94 = _87;                       // scope 7 at src/grammar.rs:56:14: 56:19
        StorageLive(_95);                // scope 7 at src/grammar.rs:56:14: 56:19
        _95 = _89;                       // scope 7 at src/grammar.rs:56:14: 56:19
        _93 = <grammar::Block as PartialEq>::eq(move _94, move _95) -> bb53; // scope 7 at src/grammar.rs:56:14: 56:19
                                         // mir::Constant
                                         // + span: src/grammar.rs:56:14: 56:19
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Block, &'s grammar::Block) -> bool {<grammar::Block as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb51: {
        StorageDead(_93);                // scope 7 at src/grammar.rs:56:18: 56:19
        StorageDead(_90);                // scope 7 at src/grammar.rs:56:18: 56:19
        StorageDead(_89);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_88);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_87);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_86);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb54;                    // scope 2 at src/grammar.rs:50:18: 50:19
    }

    bb52: {
        StorageDead(_92);                // scope 7 at src/grammar.rs:56:11: 56:12
        StorageDead(_91);                // scope 7 at src/grammar.rs:56:11: 56:12
        switchInt(move _90) -> [false: bb49, otherwise: bb50]; // scope 7 at src/grammar.rs:56:14: 56:19
    }

    bb53: {
        StorageDead(_95);                // scope 7 at src/grammar.rs:56:18: 56:19
        StorageDead(_94);                // scope 7 at src/grammar.rs:56:18: 56:19
        _0 = move _93;                   // scope 7 at src/grammar.rs:56:14: 56:19
        goto -> bb51;                    // scope 7 at src/grammar.rs:56:14: 56:19
    }

    bb54: {
        StorageDead(_13);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb56;                    // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb55: {
        _0 = const false;                // scope 2 at src/grammar.rs:50:10: 50:19
        goto -> bb56;                    // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb56: {
        StorageDead(_9);                 // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_6);                 // scope 1 at src/grammar.rs:50:18: 50:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:50:18: 50:19
        return;                          // scope 0 at src/grammar.rs:50:19: 50:19
    }
}

fn program::{closure#2}(_1: &[closure@src/parser.rs:76:18: 76:66], _2: (String, grammar::Expr)) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/parser.rs:76:35: 76:35
    let _3: std::string::String;         // in scope 0 at src/parser.rs:76:20: 76:26
    let _4: grammar::Expr;               // in scope 0 at src/parser.rs:76:28: 76:32
    let mut _5: std::string::String;     // in scope 0 at src/parser.rs:76:53: 76:59
    let mut _6: grammar::Expr;           // in scope 0 at src/parser.rs:76:61: 76:65
    scope 1 {
        debug target => _3;              // in scope 1 at src/parser.rs:76:20: 76:26
        debug expr => _4;                // in scope 1 at src/parser.rs:76:28: 76:32
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/parser.rs:76:20: 76:26
        _3 = move (_2.0: std::string::String); // scope 0 at src/parser.rs:76:20: 76:26
        StorageLive(_4);                 // scope 0 at src/parser.rs:76:28: 76:32
        _4 = move (_2.1: grammar::Expr); // scope 0 at src/parser.rs:76:28: 76:32
        StorageLive(_5);                 // scope 1 at src/parser.rs:76:53: 76:59
        _5 = move _3;                    // scope 1 at src/parser.rs:76:53: 76:59
        StorageLive(_6);                 // scope 1 at src/parser.rs:76:61: 76:65
        _6 = move _4;                    // scope 1 at src/parser.rs:76:61: 76:65
        ((_0 as Assign).0: std::string::String) = move _5; // scope 1 at src/parser.rs:76:35: 76:66
        ((_0 as Assign).1: grammar::Expr) = move _6; // scope 1 at src/parser.rs:76:35: 76:66
        discriminant(_0) = 0;            // scope 1 at src/parser.rs:76:35: 76:66
        StorageDead(_6);                 // scope 1 at src/parser.rs:76:65: 76:66
        StorageDead(_5);                 // scope 1 at src/parser.rs:76:65: 76:66
        StorageDead(_4);                 // scope 0 at src/parser.rs:76:65: 76:66
        StorageDead(_3);                 // scope 0 at src/parser.rs:76:65: 76:66
        return;                          // scope 0 at src/parser.rs:76:66: 76:66
    }
}

fn expression::{closure#2}(_1: &[closure@src/parser.rs:20:30: 25:10], _2: grammar_lexer::Token) -> Option<grammar::MultOp> {
    debug token => _2;                   // in scope 0 at src/parser.rs:20:31: 20:36
    let mut _0: std::option::Option<grammar::MultOp>; // return place in scope 0 at src/parser.rs:20:38: 20:38
    let mut _3: isize;                   // in scope 0 at src/parser.rs:21:13: 21:28

    bb0: {
        _3 = discriminant(_2);           // scope 0 at src/parser.rs:20:44: 20:49
        switchInt(move _3) -> [5_isize: bb2, 6_isize: bb3, 7_isize: bb4, otherwise: bb1]; // scope 0 at src/parser.rs:20:38: 20:49
    }

    bb1: {
        discriminant(_0) = 0;            // scope 0 at src/parser.rs:24:18: 24:22
        goto -> bb5;                     // scope 0 at src/parser.rs:24:18: 24:22
    }

    bb2: {
        ((_0 as Some).0: grammar::MultOp) = const grammar::MultOp::Multiply; // scope 0 at src/parser.rs:21:36: 21:58
                                         // ty::Const
                                         // + ty: grammar::MultOp
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: src/parser.rs:21:36: 21:58
                                         // + literal: Const { ty: grammar::MultOp, val: Value(Scalar(0x00)) }
        discriminant(_0) = 1;            // scope 0 at src/parser.rs:21:36: 21:58
        goto -> bb5;                     // scope 0 at src/parser.rs:21:57: 21:58
    }

    bb3: {
        ((_0 as Some).0: grammar::MultOp) = const grammar::MultOp::Divide; // scope 0 at src/parser.rs:22:36: 22:56
                                         // ty::Const
                                         // + ty: grammar::MultOp
                                         // + val: Value(Scalar(0x01))
                                         // mir::Constant
                                         // + span: src/parser.rs:22:36: 22:56
                                         // + literal: Const { ty: grammar::MultOp, val: Value(Scalar(0x01)) }
        discriminant(_0) = 1;            // scope 0 at src/parser.rs:22:36: 22:56
        goto -> bb5;                     // scope 0 at src/parser.rs:22:55: 22:56
    }

    bb4: {
        ((_0 as Some).0: grammar::MultOp) = const grammar::MultOp::Modulo; // scope 0 at src/parser.rs:23:36: 23:56
                                         // ty::Const
                                         // + ty: grammar::MultOp
                                         // + val: Value(Scalar(0x02))
                                         // mir::Constant
                                         // + span: src/parser.rs:23:36: 23:56
                                         // + literal: Const { ty: grammar::MultOp, val: Value(Scalar(0x02)) }
        discriminant(_0) = 1;            // scope 0 at src/parser.rs:23:36: 23:56
        goto -> bb5;                     // scope 0 at src/parser.rs:23:55: 23:56
    }

    bb5: {
        drop(_2) -> bb6;                 // scope 0 at src/parser.rs:25:9: 25:10
    }

    bb6: {
        return;                          // scope 0 at src/parser.rs:25:10: 25:10
    }
}

fn grammar::Statement::If(_1: grammar::Expr, _2: grammar::Comparator, _3: grammar::Expr, _4: grammar::Block, _5: Option<grammar::Block>) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/grammar.rs:54:3: 54:51

    bb0: {
        ((_0 as If).0: grammar::Expr) = move _1; // scope 0 at src/grammar.rs:54:3: 54:51
        ((_0 as If).1: grammar::Comparator) = move _2; // scope 0 at src/grammar.rs:54:3: 54:51
        ((_0 as If).2: grammar::Expr) = move _3; // scope 0 at src/grammar.rs:54:3: 54:51
        ((_0 as If).3: grammar::Block) = move _4; // scope 0 at src/grammar.rs:54:3: 54:51
        ((_0 as If).4: std::option::Option<grammar::Block>) = move _5; // scope 0 at src/grammar.rs:54:3: 54:51
        discriminant(_0) = 2;            // scope 0 at src/grammar.rs:54:3: 54:51
        return;                          // scope 0 at src/grammar.rs:54:3: 54:51
    }
}

// MIR FOR CTFE
fn grammar::Statement::If(_1: grammar::Expr, _2: grammar::Comparator, _3: grammar::Expr, _4: grammar::Block, _5: Option<grammar::Block>) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/grammar.rs:54:3: 54:51

    bb0: {
        ((_0 as If).0: grammar::Expr) = move _1; // scope 0 at src/grammar.rs:54:3: 54:51
        ((_0 as If).1: grammar::Comparator) = move _2; // scope 0 at src/grammar.rs:54:3: 54:51
        ((_0 as If).2: grammar::Expr) = move _3; // scope 0 at src/grammar.rs:54:3: 54:51
        ((_0 as If).3: grammar::Block) = move _4; // scope 0 at src/grammar.rs:54:3: 54:51
        ((_0 as If).4: std::option::Option<grammar::Block>) = move _5; // scope 0 at src/grammar.rs:54:3: 54:51
        discriminant(_0) = 2;            // scope 0 at src/grammar.rs:54:3: 54:51
        return;                          // scope 0 at src/grammar.rs:54:3: 54:51
    }
}

fn token::{closure#0}(_1: &[closure@src/lexer.rs:17:54: 17:121], _2: regex::re_unicode::Captures) -> grammar_lexer::Token {
    debug caps => _2;                    // in scope 0 at src/lexer.rs:17:55: 17:59
    let mut _0: grammar_lexer::Token;    // return place in scope 0 at src/lexer.rs:17:61: 17:61
    let mut _3: std::string::String;     // in scope 0 at src/lexer.rs:17:74: 17:120
    let mut _4: std::result::Result<std::string::String, std::convert::Infallible>; // in scope 0 at src/lexer.rs:17:74: 17:111
    let mut _5: &str;                    // in scope 0 at src/lexer.rs:17:91: 17:110
    let _6: &str;                        // in scope 0 at src/lexer.rs:17:91: 17:110
    let mut _7: std::option::Option<&str>; // in scope 0 at src/lexer.rs:17:91: 17:101
    let mut _8: &regex::re_unicode::Captures; // in scope 0 at src/lexer.rs:17:91: 17:95

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lexer.rs:17:74: 17:120
        StorageLive(_4);                 // scope 0 at src/lexer.rs:17:74: 17:111
        StorageLive(_5);                 // scope 0 at src/lexer.rs:17:91: 17:110
        StorageLive(_6);                 // scope 0 at src/lexer.rs:17:91: 17:110
        StorageLive(_7);                 // scope 0 at src/lexer.rs:17:91: 17:101
        StorageLive(_8);                 // scope 0 at src/lexer.rs:17:91: 17:95
        _8 = &_2;                        // scope 0 at src/lexer.rs:17:91: 17:95
        _7 = regex::re_unicode::Captures::at(move _8, const 1_usize) -> [return: bb1, unwind: bb6]; // scope 0 at src/lexer.rs:17:91: 17:101
                                         // mir::Constant
                                         // + span: src/lexer.rs:17:96: 17:98
                                         // + literal: Const { ty: for<'r> fn(&'r regex::re_unicode::Captures, usize) -> std::option::Option<&str> {regex::re_unicode::Captures::at}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_8);                 // scope 0 at src/lexer.rs:17:100: 17:101
        _6 = Option::<&str>::unwrap(move _7) -> [return: bb2, unwind: bb6]; // scope 0 at src/lexer.rs:17:91: 17:110
                                         // mir::Constant
                                         // + span: src/lexer.rs:17:102: 17:108
                                         // + literal: Const { ty: fn(std::option::Option<&str>) -> &str {std::option::Option::<&str>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = _6;                         // scope 0 at src/lexer.rs:17:91: 17:110
        StorageDead(_7);                 // scope 0 at src/lexer.rs:17:109: 17:110
        _4 = <String as FromStr>::from_str(move _5) -> [return: bb3, unwind: bb6]; // scope 0 at src/lexer.rs:17:74: 17:111
                                         // mir::Constant
                                         // + span: src/lexer.rs:17:74: 17:90
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::result::Result<std::string::String, <std::string::String as std::str::FromStr>::Err> {<std::string::String as std::str::FromStr>::from_str}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_5);                 // scope 0 at src/lexer.rs:17:110: 17:111
        _3 = Result::<String, Infallible>::unwrap(move _4) -> [return: bb4, unwind: bb6]; // scope 0 at src/lexer.rs:17:74: 17:120
                                         // mir::Constant
                                         // + span: src/lexer.rs:17:112: 17:118
                                         // + literal: Const { ty: fn(std::result::Result<std::string::String, std::convert::Infallible>) -> std::string::String {std::result::Result::<std::string::String, std::convert::Infallible>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_4);                 // scope 0 at src/lexer.rs:17:119: 17:120
        ((_0 as Ident).0: std::string::String) = move _3; // scope 0 at src/lexer.rs:17:61: 17:121
        discriminant(_0) = 1;            // scope 0 at src/lexer.rs:17:61: 17:121
        StorageDead(_6);                 // scope 0 at src/lexer.rs:17:120: 17:121
        StorageDead(_3);                 // scope 0 at src/lexer.rs:17:120: 17:121
        drop(_2) -> bb5;                 // scope 0 at src/lexer.rs:17:120: 17:121
    }

    bb5: {
        return;                          // scope 0 at src/lexer.rs:17:121: 17:121
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at src/lexer.rs:17:120: 17:121
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at src/lexer.rs:17:54: 17:121
    }
}

fn grammar::<impl at src/grammar.rs:48:10: 48:15>::fmt(_1: &grammar::Statement, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/grammar.rs:48:10: 48:15
    debug f => _2;                       // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _3: (&grammar::Statement,);  // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _4: &grammar::Statement;     // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _5: isize;                   // in scope 0 at src/grammar.rs:48:10: 48:15
    let _6: &std::string::String;        // in scope 0 at src/grammar.rs:52:10: 52:16
    let _7: &grammar::Expr;              // in scope 0 at src/grammar.rs:52:18: 52:22
    let mut _9: std::fmt::DebugTuple;    // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _10: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _11: &str;                   // in scope 0 at src/grammar.rs:48:10: 48:15
    let _12: &str;                       // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _13: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _14: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:52:10: 52:16
    let mut _16: &&std::string::String;  // in scope 0 at src/grammar.rs:52:10: 52:16
    let _17: &&std::string::String;      // in scope 0 at src/grammar.rs:52:10: 52:16
    let _18: &std::string::String;       // in scope 0 at src/grammar.rs:52:10: 52:16
    let mut _19: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _20: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _21: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:52:18: 52:22
    let mut _22: &&grammar::Expr;        // in scope 0 at src/grammar.rs:52:18: 52:22
    let _23: &&grammar::Expr;            // in scope 0 at src/grammar.rs:52:18: 52:22
    let _24: &grammar::Expr;             // in scope 0 at src/grammar.rs:52:18: 52:22
    let mut _25: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let _26: &grammar::Expr;             // in scope 0 at src/grammar.rs:53:10: 53:14
    let mut _28: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _29: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _30: &str;                   // in scope 0 at src/grammar.rs:48:10: 48:15
    let _31: &str;                       // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _32: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _33: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _34: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:53:10: 53:14
    let mut _35: &&grammar::Expr;        // in scope 0 at src/grammar.rs:53:10: 53:14
    let _36: &&grammar::Expr;            // in scope 0 at src/grammar.rs:53:10: 53:14
    let _37: &grammar::Expr;             // in scope 0 at src/grammar.rs:53:10: 53:14
    let mut _38: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let _39: &grammar::Expr;             // in scope 0 at src/grammar.rs:54:6: 54:10
    let _40: &grammar::Comparator;       // in scope 0 at src/grammar.rs:54:12: 54:22
    let _41: &grammar::Expr;             // in scope 0 at src/grammar.rs:54:24: 54:28
    let _42: &grammar::Block;            // in scope 0 at src/grammar.rs:54:30: 54:35
    let _43: &std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let mut _45: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _46: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _47: &str;                   // in scope 0 at src/grammar.rs:48:10: 48:15
    let _48: &str;                       // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _49: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _50: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _51: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:54:6: 54:10
    let mut _52: &&grammar::Expr;        // in scope 0 at src/grammar.rs:54:6: 54:10
    let _53: &&grammar::Expr;            // in scope 0 at src/grammar.rs:54:6: 54:10
    let _54: &grammar::Expr;             // in scope 0 at src/grammar.rs:54:6: 54:10
    let mut _55: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _56: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _57: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _58: &&grammar::Comparator;  // in scope 0 at src/grammar.rs:54:12: 54:22
    let _59: &&grammar::Comparator;      // in scope 0 at src/grammar.rs:54:12: 54:22
    let _60: &grammar::Comparator;       // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _61: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _62: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _63: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _64: &&grammar::Expr;        // in scope 0 at src/grammar.rs:54:24: 54:28
    let _65: &&grammar::Expr;            // in scope 0 at src/grammar.rs:54:24: 54:28
    let _66: &grammar::Expr;             // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _67: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _68: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _69: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _70: &&grammar::Block;       // in scope 0 at src/grammar.rs:54:30: 54:35
    let _71: &&grammar::Block;           // in scope 0 at src/grammar.rs:54:30: 54:35
    let _72: &grammar::Block;            // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _73: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _74: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _75: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:54:37: 54:50
    let mut _76: &&std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let _77: &&std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let _78: &std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let mut _79: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let _80: &grammar::Expr;             // in scope 0 at src/grammar.rs:55:9: 55:13
    let _81: &grammar::Comparator;       // in scope 0 at src/grammar.rs:55:15: 55:25
    let _82: &grammar::Expr;             // in scope 0 at src/grammar.rs:55:27: 55:31
    let _83: &grammar::Block;            // in scope 0 at src/grammar.rs:55:33: 55:38
    let mut _85: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _86: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _87: &str;                   // in scope 0 at src/grammar.rs:48:10: 48:15
    let _88: &str;                       // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _89: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _90: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _91: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:55:9: 55:13
    let mut _92: &&grammar::Expr;        // in scope 0 at src/grammar.rs:55:9: 55:13
    let _93: &&grammar::Expr;            // in scope 0 at src/grammar.rs:55:9: 55:13
    let _94: &grammar::Expr;             // in scope 0 at src/grammar.rs:55:9: 55:13
    let mut _95: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _96: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _97: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _98: &&grammar::Comparator;  // in scope 0 at src/grammar.rs:55:15: 55:25
    let _99: &&grammar::Comparator;      // in scope 0 at src/grammar.rs:55:15: 55:25
    let _100: &grammar::Comparator;      // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _101: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _102: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _103: &dyn std::fmt::Debug;  // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _104: &&grammar::Expr;       // in scope 0 at src/grammar.rs:55:27: 55:31
    let _105: &&grammar::Expr;           // in scope 0 at src/grammar.rs:55:27: 55:31
    let _106: &grammar::Expr;            // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _107: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _108: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _109: &dyn std::fmt::Debug;  // in scope 0 at src/grammar.rs:55:33: 55:38
    let mut _110: &&grammar::Block;      // in scope 0 at src/grammar.rs:55:33: 55:38
    let _111: &&grammar::Block;          // in scope 0 at src/grammar.rs:55:33: 55:38
    let _112: &grammar::Block;           // in scope 0 at src/grammar.rs:55:33: 55:38
    let mut _113: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let _114: &grammar::Expr;            // in scope 0 at src/grammar.rs:56:8: 56:12
    let _115: &grammar::Block;           // in scope 0 at src/grammar.rs:56:14: 56:19
    let mut _117: std::fmt::DebugTuple;  // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _118: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _119: &str;                  // in scope 0 at src/grammar.rs:48:10: 48:15
    let _120: &str;                      // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _121: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _122: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _123: &dyn std::fmt::Debug;  // in scope 0 at src/grammar.rs:56:8: 56:12
    let mut _124: &&grammar::Expr;       // in scope 0 at src/grammar.rs:56:8: 56:12
    let _125: &&grammar::Expr;           // in scope 0 at src/grammar.rs:56:8: 56:12
    let _126: &grammar::Expr;            // in scope 0 at src/grammar.rs:56:8: 56:12
    let mut _127: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _128: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    let mut _129: &dyn std::fmt::Debug;  // in scope 0 at src/grammar.rs:56:14: 56:19
    let mut _130: &&grammar::Block;      // in scope 0 at src/grammar.rs:56:14: 56:19
    let _131: &&grammar::Block;          // in scope 0 at src/grammar.rs:56:14: 56:19
    let _132: &grammar::Block;           // in scope 0 at src/grammar.rs:56:14: 56:19
    let mut _133: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:48:10: 48:15
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at src/grammar.rs:52:10: 52:16
        debug __self_1 => _7;            // in scope 1 at src/grammar.rs:52:18: 52:22
        let _8: &mut std::fmt::DebugTuple; // in scope 1 at src/grammar.rs:48:10: 48:15
        scope 2 {
            debug debug_trait_builder => _8; // in scope 2 at src/grammar.rs:48:10: 48:15
            scope 3 {
                scope 4 {
                }
            }
        }
    }
    scope 5 {
        debug __self_0 => _26;           // in scope 5 at src/grammar.rs:53:10: 53:14
        let _27: &mut std::fmt::DebugTuple; // in scope 5 at src/grammar.rs:48:10: 48:15
        scope 6 {
            debug debug_trait_builder => _27; // in scope 6 at src/grammar.rs:48:10: 48:15
            scope 7 {
            }
        }
    }
    scope 8 {
        debug __self_0 => _39;           // in scope 8 at src/grammar.rs:54:6: 54:10
        debug __self_1 => _40;           // in scope 8 at src/grammar.rs:54:12: 54:22
        debug __self_2 => _41;           // in scope 8 at src/grammar.rs:54:24: 54:28
        debug __self_3 => _42;           // in scope 8 at src/grammar.rs:54:30: 54:35
        debug __self_4 => _43;           // in scope 8 at src/grammar.rs:54:37: 54:50
        let _44: &mut std::fmt::DebugTuple; // in scope 8 at src/grammar.rs:48:10: 48:15
        scope 9 {
            debug debug_trait_builder => _44; // in scope 9 at src/grammar.rs:48:10: 48:15
            scope 10 {
                scope 11 {
                    scope 12 {
                        scope 13 {
                            scope 14 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 15 {
        debug __self_0 => _80;           // in scope 15 at src/grammar.rs:55:9: 55:13
        debug __self_1 => _81;           // in scope 15 at src/grammar.rs:55:15: 55:25
        debug __self_2 => _82;           // in scope 15 at src/grammar.rs:55:27: 55:31
        debug __self_3 => _83;           // in scope 15 at src/grammar.rs:55:33: 55:38
        let _84: &mut std::fmt::DebugTuple; // in scope 15 at src/grammar.rs:48:10: 48:15
        scope 16 {
            debug debug_trait_builder => _84; // in scope 16 at src/grammar.rs:48:10: 48:15
            scope 17 {
                scope 18 {
                    scope 19 {
                        scope 20 {
                        }
                    }
                }
            }
        }
    }
    scope 21 {
        debug __self_0 => _114;          // in scope 21 at src/grammar.rs:56:8: 56:12
        debug __self_1 => _115;          // in scope 21 at src/grammar.rs:56:14: 56:19
        let _116: &mut std::fmt::DebugTuple; // in scope 21 at src/grammar.rs:48:10: 48:15
        scope 22 {
            debug debug_trait_builder => _116; // in scope 22 at src/grammar.rs:48:10: 48:15
            scope 23 {
                scope 24 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:48:10: 48:15
        StorageLive(_4);                 // scope 0 at src/grammar.rs:48:10: 48:15
        _4 = _1;                         // scope 0 at src/grammar.rs:48:10: 48:15
        (_3.0: &grammar::Statement) = move _4; // scope 0 at src/grammar.rs:48:10: 48:15
        StorageDead(_4);                 // scope 0 at src/grammar.rs:48:14: 48:15
        _5 = discriminant((*(_3.0: &grammar::Statement))); // scope 0 at src/grammar.rs:48:10: 48:15
        switchInt(move _5) -> [0_isize: bb3, 1_isize: bb8, 2_isize: bb12, 3_isize: bb20, 4_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar.rs:48:10: 48:15
    }

    bb1: {
        StorageLive(_114);               // scope 0 at src/grammar.rs:56:8: 56:12
        _114 = &(((*(_3.0: &grammar::Statement)) as Loop).0: grammar::Expr); // scope 0 at src/grammar.rs:56:8: 56:12
        StorageLive(_115);               // scope 0 at src/grammar.rs:56:14: 56:19
        _115 = &(((*(_3.0: &grammar::Statement)) as Loop).1: grammar::Block); // scope 0 at src/grammar.rs:56:14: 56:19
        StorageLive(_116);               // scope 21 at src/grammar.rs:48:10: 48:15
        StorageLive(_117);               // scope 21 at src/grammar.rs:48:10: 48:15
        StorageLive(_118);               // scope 21 at src/grammar.rs:48:10: 48:15
        _118 = &mut (*_2);               // scope 21 at src/grammar.rs:48:10: 48:15
        StorageLive(_119);               // scope 21 at src/grammar.rs:48:10: 48:15
        StorageLive(_120);               // scope 21 at src/grammar.rs:48:10: 48:15
        _120 = const "Loop";             // scope 21 at src/grammar.rs:48:10: 48:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [76, 111, 111, 112], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [76, 111, 111, 112], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
        _119 = _120;                     // scope 21 at src/grammar.rs:48:10: 48:15
        _117 = Formatter::debug_tuple(move _118, move _119) -> bb27; // scope 21 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar.rs:48:10: 48:15
    }

    bb3: {
        StorageLive(_6);                 // scope 0 at src/grammar.rs:52:10: 52:16
        _6 = &(((*(_3.0: &grammar::Statement)) as Assign).0: std::string::String); // scope 0 at src/grammar.rs:52:10: 52:16
        StorageLive(_7);                 // scope 0 at src/grammar.rs:52:18: 52:22
        _7 = &(((*(_3.0: &grammar::Statement)) as Assign).1: grammar::Expr); // scope 0 at src/grammar.rs:52:18: 52:22
        StorageLive(_8);                 // scope 1 at src/grammar.rs:48:10: 48:15
        StorageLive(_9);                 // scope 1 at src/grammar.rs:48:10: 48:15
        StorageLive(_10);                // scope 1 at src/grammar.rs:48:10: 48:15
        _10 = &mut (*_2);                // scope 1 at src/grammar.rs:48:10: 48:15
        StorageLive(_11);                // scope 1 at src/grammar.rs:48:10: 48:15
        StorageLive(_12);                // scope 1 at src/grammar.rs:48:10: 48:15
        _12 = const "Assign";            // scope 1 at src/grammar.rs:48:10: 48:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [65, 115, 115, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 115, 115, 105, 103, 110], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _11 = _12;                       // scope 1 at src/grammar.rs:48:10: 48:15
        _9 = Formatter::debug_tuple(move _10, move _11) -> bb4; // scope 1 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_11);                // scope 1 at src/grammar.rs:48:14: 48:15
        StorageDead(_10);                // scope 1 at src/grammar.rs:48:14: 48:15
        _8 = &mut _9;                    // scope 1 at src/grammar.rs:48:10: 48:15
        StorageDead(_12);                // scope 1 at src/grammar.rs:48:14: 48:15
        StorageLive(_13);                // scope 2 at src/grammar.rs:48:10: 48:15
        StorageLive(_14);                // scope 2 at src/grammar.rs:48:10: 48:15
        _14 = &mut (*_8);                // scope 2 at src/grammar.rs:48:10: 48:15
        StorageLive(_15);                // scope 2 at src/grammar.rs:52:10: 52:16
        StorageLive(_16);                // scope 2 at src/grammar.rs:52:10: 52:16
        StorageLive(_17);                // scope 2 at src/grammar.rs:52:10: 52:16
        StorageLive(_18);                // scope 2 at src/grammar.rs:52:10: 52:16
        _18 = _6;                        // scope 2 at src/grammar.rs:52:10: 52:16
        _17 = &_18;                      // scope 2 at src/grammar.rs:52:10: 52:16
        _16 = _17;                       // scope 2 at src/grammar.rs:52:10: 52:16
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at src/grammar.rs:52:10: 52:16
        StorageDead(_16);                // scope 2 at src/grammar.rs:52:15: 52:16
        _13 = DebugTuple::field(move _14, move _15) -> bb5; // scope 2 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_15);                // scope 2 at src/grammar.rs:48:14: 48:15
        StorageDead(_14);                // scope 2 at src/grammar.rs:48:14: 48:15
        StorageDead(_18);                // scope 2 at src/grammar.rs:48:14: 48:15
        StorageDead(_17);                // scope 2 at src/grammar.rs:48:14: 48:15
        StorageDead(_13);                // scope 2 at src/grammar.rs:48:14: 48:15
        StorageLive(_19);                // scope 3 at src/grammar.rs:48:10: 48:15
        StorageLive(_20);                // scope 3 at src/grammar.rs:48:10: 48:15
        _20 = &mut (*_8);                // scope 3 at src/grammar.rs:48:10: 48:15
        StorageLive(_21);                // scope 3 at src/grammar.rs:52:18: 52:22
        StorageLive(_22);                // scope 3 at src/grammar.rs:52:18: 52:22
        StorageLive(_23);                // scope 3 at src/grammar.rs:52:18: 52:22
        StorageLive(_24);                // scope 3 at src/grammar.rs:52:18: 52:22
        _24 = _7;                        // scope 3 at src/grammar.rs:52:18: 52:22
        _23 = &_24;                      // scope 3 at src/grammar.rs:52:18: 52:22
        _22 = _23;                       // scope 3 at src/grammar.rs:52:18: 52:22
        _21 = move _22 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at src/grammar.rs:52:18: 52:22
        StorageDead(_22);                // scope 3 at src/grammar.rs:52:21: 52:22
        _19 = DebugTuple::field(move _20, move _21) -> bb6; // scope 3 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_21);                // scope 3 at src/grammar.rs:48:14: 48:15
        StorageDead(_20);                // scope 3 at src/grammar.rs:48:14: 48:15
        StorageDead(_24);                // scope 3 at src/grammar.rs:48:14: 48:15
        StorageDead(_23);                // scope 3 at src/grammar.rs:48:14: 48:15
        StorageDead(_19);                // scope 3 at src/grammar.rs:48:14: 48:15
        StorageLive(_25);                // scope 4 at src/grammar.rs:48:10: 48:15
        _25 = &mut (*_8);                // scope 4 at src/grammar.rs:48:10: 48:15
        _0 = DebugTuple::finish(move _25) -> bb7; // scope 4 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_25);                // scope 4 at src/grammar.rs:48:14: 48:15
        StorageDead(_9);                 // scope 1 at src/grammar.rs:48:14: 48:15
        StorageDead(_8);                 // scope 1 at src/grammar.rs:48:14: 48:15
        StorageDead(_7);                 // scope 0 at src/grammar.rs:48:14: 48:15
        StorageDead(_6);                 // scope 0 at src/grammar.rs:48:14: 48:15
        goto -> bb31;                    // scope 0 at src/grammar.rs:48:14: 48:15
    }

    bb8: {
        StorageLive(_26);                // scope 0 at src/grammar.rs:53:10: 53:14
        _26 = &(((*(_3.0: &grammar::Statement)) as Output).0: grammar::Expr); // scope 0 at src/grammar.rs:53:10: 53:14
        StorageLive(_27);                // scope 5 at src/grammar.rs:48:10: 48:15
        StorageLive(_28);                // scope 5 at src/grammar.rs:48:10: 48:15
        StorageLive(_29);                // scope 5 at src/grammar.rs:48:10: 48:15
        _29 = &mut (*_2);                // scope 5 at src/grammar.rs:48:10: 48:15
        StorageLive(_30);                // scope 5 at src/grammar.rs:48:10: 48:15
        StorageLive(_31);                // scope 5 at src/grammar.rs:48:10: 48:15
        _31 = const "Output";            // scope 5 at src/grammar.rs:48:10: 48:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [79, 117, 116, 112, 117, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [79, 117, 116, 112, 117, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _30 = _31;                       // scope 5 at src/grammar.rs:48:10: 48:15
        _28 = Formatter::debug_tuple(move _29, move _30) -> bb9; // scope 5 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_30);                // scope 5 at src/grammar.rs:48:14: 48:15
        StorageDead(_29);                // scope 5 at src/grammar.rs:48:14: 48:15
        _27 = &mut _28;                  // scope 5 at src/grammar.rs:48:10: 48:15
        StorageDead(_31);                // scope 5 at src/grammar.rs:48:14: 48:15
        StorageLive(_32);                // scope 6 at src/grammar.rs:48:10: 48:15
        StorageLive(_33);                // scope 6 at src/grammar.rs:48:10: 48:15
        _33 = &mut (*_27);               // scope 6 at src/grammar.rs:48:10: 48:15
        StorageLive(_34);                // scope 6 at src/grammar.rs:53:10: 53:14
        StorageLive(_35);                // scope 6 at src/grammar.rs:53:10: 53:14
        StorageLive(_36);                // scope 6 at src/grammar.rs:53:10: 53:14
        StorageLive(_37);                // scope 6 at src/grammar.rs:53:10: 53:14
        _37 = _26;                       // scope 6 at src/grammar.rs:53:10: 53:14
        _36 = &_37;                      // scope 6 at src/grammar.rs:53:10: 53:14
        _35 = _36;                       // scope 6 at src/grammar.rs:53:10: 53:14
        _34 = move _35 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 6 at src/grammar.rs:53:10: 53:14
        StorageDead(_35);                // scope 6 at src/grammar.rs:53:13: 53:14
        _32 = DebugTuple::field(move _33, move _34) -> bb10; // scope 6 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_34);                // scope 6 at src/grammar.rs:48:14: 48:15
        StorageDead(_33);                // scope 6 at src/grammar.rs:48:14: 48:15
        StorageDead(_37);                // scope 6 at src/grammar.rs:48:14: 48:15
        StorageDead(_36);                // scope 6 at src/grammar.rs:48:14: 48:15
        StorageDead(_32);                // scope 6 at src/grammar.rs:48:14: 48:15
        StorageLive(_38);                // scope 7 at src/grammar.rs:48:10: 48:15
        _38 = &mut (*_27);               // scope 7 at src/grammar.rs:48:10: 48:15
        _0 = DebugTuple::finish(move _38) -> bb11; // scope 7 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_38);                // scope 7 at src/grammar.rs:48:14: 48:15
        StorageDead(_28);                // scope 5 at src/grammar.rs:48:14: 48:15
        StorageDead(_27);                // scope 5 at src/grammar.rs:48:14: 48:15
        StorageDead(_26);                // scope 0 at src/grammar.rs:48:14: 48:15
        goto -> bb31;                    // scope 0 at src/grammar.rs:48:14: 48:15
    }

    bb12: {
        StorageLive(_39);                // scope 0 at src/grammar.rs:54:6: 54:10
        _39 = &(((*(_3.0: &grammar::Statement)) as If).0: grammar::Expr); // scope 0 at src/grammar.rs:54:6: 54:10
        StorageLive(_40);                // scope 0 at src/grammar.rs:54:12: 54:22
        _40 = &(((*(_3.0: &grammar::Statement)) as If).1: grammar::Comparator); // scope 0 at src/grammar.rs:54:12: 54:22
        StorageLive(_41);                // scope 0 at src/grammar.rs:54:24: 54:28
        _41 = &(((*(_3.0: &grammar::Statement)) as If).2: grammar::Expr); // scope 0 at src/grammar.rs:54:24: 54:28
        StorageLive(_42);                // scope 0 at src/grammar.rs:54:30: 54:35
        _42 = &(((*(_3.0: &grammar::Statement)) as If).3: grammar::Block); // scope 0 at src/grammar.rs:54:30: 54:35
        StorageLive(_43);                // scope 0 at src/grammar.rs:54:37: 54:50
        _43 = &(((*(_3.0: &grammar::Statement)) as If).4: std::option::Option<grammar::Block>); // scope 0 at src/grammar.rs:54:37: 54:50
        StorageLive(_44);                // scope 8 at src/grammar.rs:48:10: 48:15
        StorageLive(_45);                // scope 8 at src/grammar.rs:48:10: 48:15
        StorageLive(_46);                // scope 8 at src/grammar.rs:48:10: 48:15
        _46 = &mut (*_2);                // scope 8 at src/grammar.rs:48:10: 48:15
        StorageLive(_47);                // scope 8 at src/grammar.rs:48:10: 48:15
        StorageLive(_48);                // scope 8 at src/grammar.rs:48:10: 48:15
        _48 = const "If";                // scope 8 at src/grammar.rs:48:10: 48:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [73, 102], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [73, 102], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _47 = _48;                       // scope 8 at src/grammar.rs:48:10: 48:15
        _45 = Formatter::debug_tuple(move _46, move _47) -> bb13; // scope 8 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_47);                // scope 8 at src/grammar.rs:48:14: 48:15
        StorageDead(_46);                // scope 8 at src/grammar.rs:48:14: 48:15
        _44 = &mut _45;                  // scope 8 at src/grammar.rs:48:10: 48:15
        StorageDead(_48);                // scope 8 at src/grammar.rs:48:14: 48:15
        StorageLive(_49);                // scope 9 at src/grammar.rs:48:10: 48:15
        StorageLive(_50);                // scope 9 at src/grammar.rs:48:10: 48:15
        _50 = &mut (*_44);               // scope 9 at src/grammar.rs:48:10: 48:15
        StorageLive(_51);                // scope 9 at src/grammar.rs:54:6: 54:10
        StorageLive(_52);                // scope 9 at src/grammar.rs:54:6: 54:10
        StorageLive(_53);                // scope 9 at src/grammar.rs:54:6: 54:10
        StorageLive(_54);                // scope 9 at src/grammar.rs:54:6: 54:10
        _54 = _39;                       // scope 9 at src/grammar.rs:54:6: 54:10
        _53 = &_54;                      // scope 9 at src/grammar.rs:54:6: 54:10
        _52 = _53;                       // scope 9 at src/grammar.rs:54:6: 54:10
        _51 = move _52 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 9 at src/grammar.rs:54:6: 54:10
        StorageDead(_52);                // scope 9 at src/grammar.rs:54:9: 54:10
        _49 = DebugTuple::field(move _50, move _51) -> bb14; // scope 9 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_51);                // scope 9 at src/grammar.rs:48:14: 48:15
        StorageDead(_50);                // scope 9 at src/grammar.rs:48:14: 48:15
        StorageDead(_54);                // scope 9 at src/grammar.rs:48:14: 48:15
        StorageDead(_53);                // scope 9 at src/grammar.rs:48:14: 48:15
        StorageDead(_49);                // scope 9 at src/grammar.rs:48:14: 48:15
        StorageLive(_55);                // scope 10 at src/grammar.rs:48:10: 48:15
        StorageLive(_56);                // scope 10 at src/grammar.rs:48:10: 48:15
        _56 = &mut (*_44);               // scope 10 at src/grammar.rs:48:10: 48:15
        StorageLive(_57);                // scope 10 at src/grammar.rs:54:12: 54:22
        StorageLive(_58);                // scope 10 at src/grammar.rs:54:12: 54:22
        StorageLive(_59);                // scope 10 at src/grammar.rs:54:12: 54:22
        StorageLive(_60);                // scope 10 at src/grammar.rs:54:12: 54:22
        _60 = _40;                       // scope 10 at src/grammar.rs:54:12: 54:22
        _59 = &_60;                      // scope 10 at src/grammar.rs:54:12: 54:22
        _58 = _59;                       // scope 10 at src/grammar.rs:54:12: 54:22
        _57 = move _58 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 10 at src/grammar.rs:54:12: 54:22
        StorageDead(_58);                // scope 10 at src/grammar.rs:54:21: 54:22
        _55 = DebugTuple::field(move _56, move _57) -> bb15; // scope 10 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_57);                // scope 10 at src/grammar.rs:48:14: 48:15
        StorageDead(_56);                // scope 10 at src/grammar.rs:48:14: 48:15
        StorageDead(_60);                // scope 10 at src/grammar.rs:48:14: 48:15
        StorageDead(_59);                // scope 10 at src/grammar.rs:48:14: 48:15
        StorageDead(_55);                // scope 10 at src/grammar.rs:48:14: 48:15
        StorageLive(_61);                // scope 11 at src/grammar.rs:48:10: 48:15
        StorageLive(_62);                // scope 11 at src/grammar.rs:48:10: 48:15
        _62 = &mut (*_44);               // scope 11 at src/grammar.rs:48:10: 48:15
        StorageLive(_63);                // scope 11 at src/grammar.rs:54:24: 54:28
        StorageLive(_64);                // scope 11 at src/grammar.rs:54:24: 54:28
        StorageLive(_65);                // scope 11 at src/grammar.rs:54:24: 54:28
        StorageLive(_66);                // scope 11 at src/grammar.rs:54:24: 54:28
        _66 = _41;                       // scope 11 at src/grammar.rs:54:24: 54:28
        _65 = &_66;                      // scope 11 at src/grammar.rs:54:24: 54:28
        _64 = _65;                       // scope 11 at src/grammar.rs:54:24: 54:28
        _63 = move _64 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 11 at src/grammar.rs:54:24: 54:28
        StorageDead(_64);                // scope 11 at src/grammar.rs:54:27: 54:28
        _61 = DebugTuple::field(move _62, move _63) -> bb16; // scope 11 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_63);                // scope 11 at src/grammar.rs:48:14: 48:15
        StorageDead(_62);                // scope 11 at src/grammar.rs:48:14: 48:15
        StorageDead(_66);                // scope 11 at src/grammar.rs:48:14: 48:15
        StorageDead(_65);                // scope 11 at src/grammar.rs:48:14: 48:15
        StorageDead(_61);                // scope 11 at src/grammar.rs:48:14: 48:15
        StorageLive(_67);                // scope 12 at src/grammar.rs:48:10: 48:15
        StorageLive(_68);                // scope 12 at src/grammar.rs:48:10: 48:15
        _68 = &mut (*_44);               // scope 12 at src/grammar.rs:48:10: 48:15
        StorageLive(_69);                // scope 12 at src/grammar.rs:54:30: 54:35
        StorageLive(_70);                // scope 12 at src/grammar.rs:54:30: 54:35
        StorageLive(_71);                // scope 12 at src/grammar.rs:54:30: 54:35
        StorageLive(_72);                // scope 12 at src/grammar.rs:54:30: 54:35
        _72 = _42;                       // scope 12 at src/grammar.rs:54:30: 54:35
        _71 = &_72;                      // scope 12 at src/grammar.rs:54:30: 54:35
        _70 = _71;                       // scope 12 at src/grammar.rs:54:30: 54:35
        _69 = move _70 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 12 at src/grammar.rs:54:30: 54:35
        StorageDead(_70);                // scope 12 at src/grammar.rs:54:34: 54:35
        _67 = DebugTuple::field(move _68, move _69) -> bb17; // scope 12 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_69);                // scope 12 at src/grammar.rs:48:14: 48:15
        StorageDead(_68);                // scope 12 at src/grammar.rs:48:14: 48:15
        StorageDead(_72);                // scope 12 at src/grammar.rs:48:14: 48:15
        StorageDead(_71);                // scope 12 at src/grammar.rs:48:14: 48:15
        StorageDead(_67);                // scope 12 at src/grammar.rs:48:14: 48:15
        StorageLive(_73);                // scope 13 at src/grammar.rs:48:10: 48:15
        StorageLive(_74);                // scope 13 at src/grammar.rs:48:10: 48:15
        _74 = &mut (*_44);               // scope 13 at src/grammar.rs:48:10: 48:15
        StorageLive(_75);                // scope 13 at src/grammar.rs:54:37: 54:50
        StorageLive(_76);                // scope 13 at src/grammar.rs:54:37: 54:50
        StorageLive(_77);                // scope 13 at src/grammar.rs:54:37: 54:50
        StorageLive(_78);                // scope 13 at src/grammar.rs:54:37: 54:50
        _78 = _43;                       // scope 13 at src/grammar.rs:54:37: 54:50
        _77 = &_78;                      // scope 13 at src/grammar.rs:54:37: 54:50
        _76 = _77;                       // scope 13 at src/grammar.rs:54:37: 54:50
        _75 = move _76 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 13 at src/grammar.rs:54:37: 54:50
        StorageDead(_76);                // scope 13 at src/grammar.rs:54:49: 54:50
        _73 = DebugTuple::field(move _74, move _75) -> bb18; // scope 13 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_75);                // scope 13 at src/grammar.rs:48:14: 48:15
        StorageDead(_74);                // scope 13 at src/grammar.rs:48:14: 48:15
        StorageDead(_78);                // scope 13 at src/grammar.rs:48:14: 48:15
        StorageDead(_77);                // scope 13 at src/grammar.rs:48:14: 48:15
        StorageDead(_73);                // scope 13 at src/grammar.rs:48:14: 48:15
        StorageLive(_79);                // scope 14 at src/grammar.rs:48:10: 48:15
        _79 = &mut (*_44);               // scope 14 at src/grammar.rs:48:10: 48:15
        _0 = DebugTuple::finish(move _79) -> bb19; // scope 14 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_79);                // scope 14 at src/grammar.rs:48:14: 48:15
        StorageDead(_45);                // scope 8 at src/grammar.rs:48:14: 48:15
        StorageDead(_44);                // scope 8 at src/grammar.rs:48:14: 48:15
        StorageDead(_43);                // scope 0 at src/grammar.rs:48:14: 48:15
        StorageDead(_42);                // scope 0 at src/grammar.rs:48:14: 48:15
        StorageDead(_41);                // scope 0 at src/grammar.rs:48:14: 48:15
        StorageDead(_40);                // scope 0 at src/grammar.rs:48:14: 48:15
        StorageDead(_39);                // scope 0 at src/grammar.rs:48:14: 48:15
        goto -> bb31;                    // scope 0 at src/grammar.rs:48:14: 48:15
    }

    bb20: {
        StorageLive(_80);                // scope 0 at src/grammar.rs:55:9: 55:13
        _80 = &(((*(_3.0: &grammar::Statement)) as While).0: grammar::Expr); // scope 0 at src/grammar.rs:55:9: 55:13
        StorageLive(_81);                // scope 0 at src/grammar.rs:55:15: 55:25
        _81 = &(((*(_3.0: &grammar::Statement)) as While).1: grammar::Comparator); // scope 0 at src/grammar.rs:55:15: 55:25
        StorageLive(_82);                // scope 0 at src/grammar.rs:55:27: 55:31
        _82 = &(((*(_3.0: &grammar::Statement)) as While).2: grammar::Expr); // scope 0 at src/grammar.rs:55:27: 55:31
        StorageLive(_83);                // scope 0 at src/grammar.rs:55:33: 55:38
        _83 = &(((*(_3.0: &grammar::Statement)) as While).3: grammar::Block); // scope 0 at src/grammar.rs:55:33: 55:38
        StorageLive(_84);                // scope 15 at src/grammar.rs:48:10: 48:15
        StorageLive(_85);                // scope 15 at src/grammar.rs:48:10: 48:15
        StorageLive(_86);                // scope 15 at src/grammar.rs:48:10: 48:15
        _86 = &mut (*_2);                // scope 15 at src/grammar.rs:48:10: 48:15
        StorageLive(_87);                // scope 15 at src/grammar.rs:48:10: 48:15
        StorageLive(_88);                // scope 15 at src/grammar.rs:48:10: 48:15
        _88 = const "While";             // scope 15 at src/grammar.rs:48:10: 48:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [87, 104, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [87, 104, 105, 108, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _87 = _88;                       // scope 15 at src/grammar.rs:48:10: 48:15
        _85 = Formatter::debug_tuple(move _86, move _87) -> bb21; // scope 15 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        StorageDead(_87);                // scope 15 at src/grammar.rs:48:14: 48:15
        StorageDead(_86);                // scope 15 at src/grammar.rs:48:14: 48:15
        _84 = &mut _85;                  // scope 15 at src/grammar.rs:48:10: 48:15
        StorageDead(_88);                // scope 15 at src/grammar.rs:48:14: 48:15
        StorageLive(_89);                // scope 16 at src/grammar.rs:48:10: 48:15
        StorageLive(_90);                // scope 16 at src/grammar.rs:48:10: 48:15
        _90 = &mut (*_84);               // scope 16 at src/grammar.rs:48:10: 48:15
        StorageLive(_91);                // scope 16 at src/grammar.rs:55:9: 55:13
        StorageLive(_92);                // scope 16 at src/grammar.rs:55:9: 55:13
        StorageLive(_93);                // scope 16 at src/grammar.rs:55:9: 55:13
        StorageLive(_94);                // scope 16 at src/grammar.rs:55:9: 55:13
        _94 = _80;                       // scope 16 at src/grammar.rs:55:9: 55:13
        _93 = &_94;                      // scope 16 at src/grammar.rs:55:9: 55:13
        _92 = _93;                       // scope 16 at src/grammar.rs:55:9: 55:13
        _91 = move _92 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 16 at src/grammar.rs:55:9: 55:13
        StorageDead(_92);                // scope 16 at src/grammar.rs:55:12: 55:13
        _89 = DebugTuple::field(move _90, move _91) -> bb22; // scope 16 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_91);                // scope 16 at src/grammar.rs:48:14: 48:15
        StorageDead(_90);                // scope 16 at src/grammar.rs:48:14: 48:15
        StorageDead(_94);                // scope 16 at src/grammar.rs:48:14: 48:15
        StorageDead(_93);                // scope 16 at src/grammar.rs:48:14: 48:15
        StorageDead(_89);                // scope 16 at src/grammar.rs:48:14: 48:15
        StorageLive(_95);                // scope 17 at src/grammar.rs:48:10: 48:15
        StorageLive(_96);                // scope 17 at src/grammar.rs:48:10: 48:15
        _96 = &mut (*_84);               // scope 17 at src/grammar.rs:48:10: 48:15
        StorageLive(_97);                // scope 17 at src/grammar.rs:55:15: 55:25
        StorageLive(_98);                // scope 17 at src/grammar.rs:55:15: 55:25
        StorageLive(_99);                // scope 17 at src/grammar.rs:55:15: 55:25
        StorageLive(_100);               // scope 17 at src/grammar.rs:55:15: 55:25
        _100 = _81;                      // scope 17 at src/grammar.rs:55:15: 55:25
        _99 = &_100;                     // scope 17 at src/grammar.rs:55:15: 55:25
        _98 = _99;                       // scope 17 at src/grammar.rs:55:15: 55:25
        _97 = move _98 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 17 at src/grammar.rs:55:15: 55:25
        StorageDead(_98);                // scope 17 at src/grammar.rs:55:24: 55:25
        _95 = DebugTuple::field(move _96, move _97) -> bb23; // scope 17 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        StorageDead(_97);                // scope 17 at src/grammar.rs:48:14: 48:15
        StorageDead(_96);                // scope 17 at src/grammar.rs:48:14: 48:15
        StorageDead(_100);               // scope 17 at src/grammar.rs:48:14: 48:15
        StorageDead(_99);                // scope 17 at src/grammar.rs:48:14: 48:15
        StorageDead(_95);                // scope 17 at src/grammar.rs:48:14: 48:15
        StorageLive(_101);               // scope 18 at src/grammar.rs:48:10: 48:15
        StorageLive(_102);               // scope 18 at src/grammar.rs:48:10: 48:15
        _102 = &mut (*_84);              // scope 18 at src/grammar.rs:48:10: 48:15
        StorageLive(_103);               // scope 18 at src/grammar.rs:55:27: 55:31
        StorageLive(_104);               // scope 18 at src/grammar.rs:55:27: 55:31
        StorageLive(_105);               // scope 18 at src/grammar.rs:55:27: 55:31
        StorageLive(_106);               // scope 18 at src/grammar.rs:55:27: 55:31
        _106 = _82;                      // scope 18 at src/grammar.rs:55:27: 55:31
        _105 = &_106;                    // scope 18 at src/grammar.rs:55:27: 55:31
        _104 = _105;                     // scope 18 at src/grammar.rs:55:27: 55:31
        _103 = move _104 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 18 at src/grammar.rs:55:27: 55:31
        StorageDead(_104);               // scope 18 at src/grammar.rs:55:30: 55:31
        _101 = DebugTuple::field(move _102, move _103) -> bb24; // scope 18 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        StorageDead(_103);               // scope 18 at src/grammar.rs:48:14: 48:15
        StorageDead(_102);               // scope 18 at src/grammar.rs:48:14: 48:15
        StorageDead(_106);               // scope 18 at src/grammar.rs:48:14: 48:15
        StorageDead(_105);               // scope 18 at src/grammar.rs:48:14: 48:15
        StorageDead(_101);               // scope 18 at src/grammar.rs:48:14: 48:15
        StorageLive(_107);               // scope 19 at src/grammar.rs:48:10: 48:15
        StorageLive(_108);               // scope 19 at src/grammar.rs:48:10: 48:15
        _108 = &mut (*_84);              // scope 19 at src/grammar.rs:48:10: 48:15
        StorageLive(_109);               // scope 19 at src/grammar.rs:55:33: 55:38
        StorageLive(_110);               // scope 19 at src/grammar.rs:55:33: 55:38
        StorageLive(_111);               // scope 19 at src/grammar.rs:55:33: 55:38
        StorageLive(_112);               // scope 19 at src/grammar.rs:55:33: 55:38
        _112 = _83;                      // scope 19 at src/grammar.rs:55:33: 55:38
        _111 = &_112;                    // scope 19 at src/grammar.rs:55:33: 55:38
        _110 = _111;                     // scope 19 at src/grammar.rs:55:33: 55:38
        _109 = move _110 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 19 at src/grammar.rs:55:33: 55:38
        StorageDead(_110);               // scope 19 at src/grammar.rs:55:37: 55:38
        _107 = DebugTuple::field(move _108, move _109) -> bb25; // scope 19 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        StorageDead(_109);               // scope 19 at src/grammar.rs:48:14: 48:15
        StorageDead(_108);               // scope 19 at src/grammar.rs:48:14: 48:15
        StorageDead(_112);               // scope 19 at src/grammar.rs:48:14: 48:15
        StorageDead(_111);               // scope 19 at src/grammar.rs:48:14: 48:15
        StorageDead(_107);               // scope 19 at src/grammar.rs:48:14: 48:15
        StorageLive(_113);               // scope 20 at src/grammar.rs:48:10: 48:15
        _113 = &mut (*_84);              // scope 20 at src/grammar.rs:48:10: 48:15
        _0 = DebugTuple::finish(move _113) -> bb26; // scope 20 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        StorageDead(_113);               // scope 20 at src/grammar.rs:48:14: 48:15
        StorageDead(_85);                // scope 15 at src/grammar.rs:48:14: 48:15
        StorageDead(_84);                // scope 15 at src/grammar.rs:48:14: 48:15
        StorageDead(_83);                // scope 0 at src/grammar.rs:48:14: 48:15
        StorageDead(_82);                // scope 0 at src/grammar.rs:48:14: 48:15
        StorageDead(_81);                // scope 0 at src/grammar.rs:48:14: 48:15
        StorageDead(_80);                // scope 0 at src/grammar.rs:48:14: 48:15
        goto -> bb31;                    // scope 0 at src/grammar.rs:48:14: 48:15
    }

    bb27: {
        StorageDead(_119);               // scope 21 at src/grammar.rs:48:14: 48:15
        StorageDead(_118);               // scope 21 at src/grammar.rs:48:14: 48:15
        _116 = &mut _117;                // scope 21 at src/grammar.rs:48:10: 48:15
        StorageDead(_120);               // scope 21 at src/grammar.rs:48:14: 48:15
        StorageLive(_121);               // scope 22 at src/grammar.rs:48:10: 48:15
        StorageLive(_122);               // scope 22 at src/grammar.rs:48:10: 48:15
        _122 = &mut (*_116);             // scope 22 at src/grammar.rs:48:10: 48:15
        StorageLive(_123);               // scope 22 at src/grammar.rs:56:8: 56:12
        StorageLive(_124);               // scope 22 at src/grammar.rs:56:8: 56:12
        StorageLive(_125);               // scope 22 at src/grammar.rs:56:8: 56:12
        StorageLive(_126);               // scope 22 at src/grammar.rs:56:8: 56:12
        _126 = _114;                     // scope 22 at src/grammar.rs:56:8: 56:12
        _125 = &_126;                    // scope 22 at src/grammar.rs:56:8: 56:12
        _124 = _125;                     // scope 22 at src/grammar.rs:56:8: 56:12
        _123 = move _124 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 22 at src/grammar.rs:56:8: 56:12
        StorageDead(_124);               // scope 22 at src/grammar.rs:56:11: 56:12
        _121 = DebugTuple::field(move _122, move _123) -> bb28; // scope 22 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        StorageDead(_123);               // scope 22 at src/grammar.rs:48:14: 48:15
        StorageDead(_122);               // scope 22 at src/grammar.rs:48:14: 48:15
        StorageDead(_126);               // scope 22 at src/grammar.rs:48:14: 48:15
        StorageDead(_125);               // scope 22 at src/grammar.rs:48:14: 48:15
        StorageDead(_121);               // scope 22 at src/grammar.rs:48:14: 48:15
        StorageLive(_127);               // scope 23 at src/grammar.rs:48:10: 48:15
        StorageLive(_128);               // scope 23 at src/grammar.rs:48:10: 48:15
        _128 = &mut (*_116);             // scope 23 at src/grammar.rs:48:10: 48:15
        StorageLive(_129);               // scope 23 at src/grammar.rs:56:14: 56:19
        StorageLive(_130);               // scope 23 at src/grammar.rs:56:14: 56:19
        StorageLive(_131);               // scope 23 at src/grammar.rs:56:14: 56:19
        StorageLive(_132);               // scope 23 at src/grammar.rs:56:14: 56:19
        _132 = _115;                     // scope 23 at src/grammar.rs:56:14: 56:19
        _131 = &_132;                    // scope 23 at src/grammar.rs:56:14: 56:19
        _130 = _131;                     // scope 23 at src/grammar.rs:56:14: 56:19
        _129 = move _130 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 23 at src/grammar.rs:56:14: 56:19
        StorageDead(_130);               // scope 23 at src/grammar.rs:56:18: 56:19
        _127 = DebugTuple::field(move _128, move _129) -> bb29; // scope 23 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb29: {
        StorageDead(_129);               // scope 23 at src/grammar.rs:48:14: 48:15
        StorageDead(_128);               // scope 23 at src/grammar.rs:48:14: 48:15
        StorageDead(_132);               // scope 23 at src/grammar.rs:48:14: 48:15
        StorageDead(_131);               // scope 23 at src/grammar.rs:48:14: 48:15
        StorageDead(_127);               // scope 23 at src/grammar.rs:48:14: 48:15
        StorageLive(_133);               // scope 24 at src/grammar.rs:48:10: 48:15
        _133 = &mut (*_116);             // scope 24 at src/grammar.rs:48:10: 48:15
        _0 = DebugTuple::finish(move _133) -> bb30; // scope 24 at src/grammar.rs:48:10: 48:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:48:10: 48:15
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb30: {
        StorageDead(_133);               // scope 24 at src/grammar.rs:48:14: 48:15
        StorageDead(_117);               // scope 21 at src/grammar.rs:48:14: 48:15
        StorageDead(_116);               // scope 21 at src/grammar.rs:48:14: 48:15
        StorageDead(_115);               // scope 0 at src/grammar.rs:48:14: 48:15
        StorageDead(_114);               // scope 0 at src/grammar.rs:48:14: 48:15
        goto -> bb31;                    // scope 0 at src/grammar.rs:48:14: 48:15
    }

    bb31: {
        StorageDead(_3);                 // scope 0 at src/grammar.rs:48:14: 48:15
        return;                          // scope 0 at src/grammar.rs:48:15: 48:15
    }
}

fn grammar::Expr::MultDiv(_1: Vec<grammar::MultTerm>) -> grammar::Expr {
    let mut _0: grammar::Expr;           // return place in scope 0 at src/grammar.rs:38:3: 38:25

    bb0: {
        ((_0 as MultDiv).0: std::vec::Vec<grammar::MultTerm>) = move _1; // scope 0 at src/grammar.rs:38:3: 38:25
        discriminant(_0) = 3;            // scope 0 at src/grammar.rs:38:3: 38:25
        return;                          // scope 0 at src/grammar.rs:38:3: 38:25
    }
}

// MIR FOR CTFE
fn grammar::Expr::MultDiv(_1: Vec<grammar::MultTerm>) -> grammar::Expr {
    let mut _0: grammar::Expr;           // return place in scope 0 at src/grammar.rs:38:3: 38:25

    bb0: {
        ((_0 as MultDiv).0: std::vec::Vec<grammar::MultTerm>) = move _1; // scope 0 at src/grammar.rs:38:3: 38:25
        discriminant(_0) = 3;            // scope 0 at src/grammar.rs:38:3: 38:25
        return;                          // scope 0 at src/grammar.rs:38:3: 38:25
    }
}

fn grammar::Expr::Num(_1: i32) -> grammar::Expr {
    let mut _0: grammar::Expr;           // return place in scope 0 at src/grammar.rs:36:3: 36:11

    bb0: {
        ((_0 as Num).0: i32) = move _1;  // scope 0 at src/grammar.rs:36:3: 36:11
        discriminant(_0) = 1;            // scope 0 at src/grammar.rs:36:3: 36:11
        return;                          // scope 0 at src/grammar.rs:36:3: 36:11
    }
}

// MIR FOR CTFE
fn grammar::Expr::Num(_1: i32) -> grammar::Expr {
    let mut _0: grammar::Expr;           // return place in scope 0 at src/grammar.rs:36:3: 36:11

    bb0: {
        ((_0 as Num).0: i32) = move _1;  // scope 0 at src/grammar.rs:36:3: 36:11
        discriminant(_0) = 1;            // scope 0 at src/grammar.rs:36:3: 36:11
        return;                          // scope 0 at src/grammar.rs:36:3: 36:11
    }
}

fn program::{closure#5}(_1: &[closure@src/parser.rs:135:18: 135:56], _2: (grammar::Expr, grammar::Block)) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/parser.rs:135:31: 135:31
    let _3: grammar::Expr;               // in scope 0 at src/parser.rs:135:20: 135:21
    let _4: grammar::Block;              // in scope 0 at src/parser.rs:135:23: 135:28
    let mut _5: grammar::Expr;           // in scope 0 at src/parser.rs:135:47: 135:48
    let mut _6: grammar::Block;          // in scope 0 at src/parser.rs:135:50: 135:55
    scope 1 {
        debug l => _3;                   // in scope 1 at src/parser.rs:135:20: 135:21
        debug block => _4;               // in scope 1 at src/parser.rs:135:23: 135:28
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/parser.rs:135:20: 135:21
        _3 = move (_2.0: grammar::Expr); // scope 0 at src/parser.rs:135:20: 135:21
        StorageLive(_4);                 // scope 0 at src/parser.rs:135:23: 135:28
        _4 = move (_2.1: grammar::Block); // scope 0 at src/parser.rs:135:23: 135:28
        StorageLive(_5);                 // scope 1 at src/parser.rs:135:47: 135:48
        _5 = move _3;                    // scope 1 at src/parser.rs:135:47: 135:48
        StorageLive(_6);                 // scope 1 at src/parser.rs:135:50: 135:55
        _6 = move _4;                    // scope 1 at src/parser.rs:135:50: 135:55
        ((_0 as Loop).0: grammar::Expr) = move _5; // scope 1 at src/parser.rs:135:31: 135:56
        ((_0 as Loop).1: grammar::Block) = move _6; // scope 1 at src/parser.rs:135:31: 135:56
        discriminant(_0) = 4;            // scope 1 at src/parser.rs:135:31: 135:56
        StorageDead(_6);                 // scope 1 at src/parser.rs:135:55: 135:56
        StorageDead(_5);                 // scope 1 at src/parser.rs:135:55: 135:56
        StorageDead(_4);                 // scope 0 at src/parser.rs:135:55: 135:56
        StorageDead(_3);                 // scope 0 at src/parser.rs:135:55: 135:56
        return;                          // scope 0 at src/parser.rs:135:56: 135:56
    }
}

fn grammar::<impl at src/grammar.rs:32:10: 32:15>::clone(_1: &grammar::Expr) -> grammar::Expr {
    debug self => _1;                    // in scope 0 at src/grammar.rs:32:10: 32:15
    let mut _0: grammar::Expr;           // return place in scope 0 at src/grammar.rs:32:10: 32:15
    let mut _2: (&grammar::Expr,);       // in scope 0 at src/grammar.rs:32:10: 32:15
    let mut _3: &grammar::Expr;          // in scope 0 at src/grammar.rs:32:10: 32:15
    let mut _4: isize;                   // in scope 0 at src/grammar.rs:32:10: 32:15
    let _5: &std::string::String;        // in scope 0 at src/grammar.rs:35:12: 35:18
    let mut _6: std::string::String;     // in scope 0 at src/grammar.rs:35:12: 35:18
    let mut _7: &std::string::String;    // in scope 0 at src/grammar.rs:35:12: 35:18
    let _8: &std::string::String;        // in scope 0 at src/grammar.rs:35:12: 35:18
    let _9: &i32;                        // in scope 0 at src/grammar.rs:36:7: 36:10
    let mut _10: i32;                    // in scope 0 at src/grammar.rs:36:7: 36:10
    let mut _11: &i32;                   // in scope 0 at src/grammar.rs:36:7: 36:10
    let _12: &i32;                       // in scope 0 at src/grammar.rs:36:7: 36:10
    let _13: &std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let mut _14: std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let mut _15: &std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let _16: &std::vec::Vec<grammar::AddTerm>; // in scope 0 at src/grammar.rs:37:10: 37:22
    let _17: &std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    let mut _18: std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    let mut _19: &std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    let _20: &std::vec::Vec<grammar::MultTerm>; // in scope 0 at src/grammar.rs:38:11: 38:24
    scope 1 {
        debug __self_0 => _5;            // in scope 1 at src/grammar.rs:35:12: 35:18
    }
    scope 2 {
        debug __self_0 => _9;            // in scope 2 at src/grammar.rs:36:7: 36:10
    }
    scope 3 {
        debug __self_0 => _13;           // in scope 3 at src/grammar.rs:37:10: 37:22
    }
    scope 4 {
        debug __self_0 => _17;           // in scope 4 at src/grammar.rs:38:11: 38:24
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at src/grammar.rs:32:10: 32:15
        StorageLive(_3);                 // scope 0 at src/grammar.rs:32:10: 32:15
        _3 = _1;                         // scope 0 at src/grammar.rs:32:10: 32:15
        (_2.0: &grammar::Expr) = move _3; // scope 0 at src/grammar.rs:32:10: 32:15
        StorageDead(_3);                 // scope 0 at src/grammar.rs:32:14: 32:15
        _4 = discriminant((*(_2.0: &grammar::Expr))); // scope 0 at src/grammar.rs:32:10: 32:15
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb5, 2_isize: bb7, 3_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar.rs:32:10: 32:15
    }

    bb1: {
        StorageLive(_17);                // scope 0 at src/grammar.rs:38:11: 38:24
        _17 = &(((*(_2.0: &grammar::Expr)) as MultDiv).0: std::vec::Vec<grammar::MultTerm>); // scope 0 at src/grammar.rs:38:11: 38:24
        StorageLive(_18);                // scope 4 at src/grammar.rs:38:11: 38:24
        StorageLive(_19);                // scope 4 at src/grammar.rs:38:11: 38:24
        StorageLive(_20);                // scope 4 at src/grammar.rs:38:11: 38:24
        _20 = _17;                       // scope 4 at src/grammar.rs:38:11: 38:24
        _19 = _20;                       // scope 4 at src/grammar.rs:38:11: 38:24
        _18 = <Vec<grammar::MultTerm> as Clone>::clone(move _19) -> bb9; // scope 4 at src/grammar.rs:38:11: 38:24
                                         // mir::Constant
                                         // + span: src/grammar.rs:38:11: 38:24
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<grammar::MultTerm>) -> std::vec::Vec<grammar::MultTerm> {<std::vec::Vec<grammar::MultTerm> as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar.rs:32:10: 32:15
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at src/grammar.rs:35:12: 35:18
        _5 = &(((*(_2.0: &grammar::Expr)) as Variable).0: std::string::String); // scope 0 at src/grammar.rs:35:12: 35:18
        StorageLive(_6);                 // scope 1 at src/grammar.rs:35:12: 35:18
        StorageLive(_7);                 // scope 1 at src/grammar.rs:35:12: 35:18
        StorageLive(_8);                 // scope 1 at src/grammar.rs:35:12: 35:18
        _8 = _5;                         // scope 1 at src/grammar.rs:35:12: 35:18
        _7 = _8;                         // scope 1 at src/grammar.rs:35:12: 35:18
        _6 = <String as Clone>::clone(move _7) -> bb4; // scope 1 at src/grammar.rs:35:12: 35:18
                                         // mir::Constant
                                         // + span: src/grammar.rs:35:12: 35:18
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> std::string::String {<std::string::String as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_7);                 // scope 1 at src/grammar.rs:35:17: 35:18
        ((_0 as Variable).0: std::string::String) = move _6; // scope 1 at src/grammar.rs:32:10: 32:15
        discriminant(_0) = 0;            // scope 1 at src/grammar.rs:32:10: 32:15
        StorageDead(_8);                 // scope 1 at src/grammar.rs:32:14: 32:15
        StorageDead(_6);                 // scope 1 at src/grammar.rs:32:14: 32:15
        StorageDead(_5);                 // scope 0 at src/grammar.rs:32:14: 32:15
        goto -> bb10;                    // scope 0 at src/grammar.rs:32:14: 32:15
    }

    bb5: {
        StorageLive(_9);                 // scope 0 at src/grammar.rs:36:7: 36:10
        _9 = &(((*(_2.0: &grammar::Expr)) as Num).0: i32); // scope 0 at src/grammar.rs:36:7: 36:10
        StorageLive(_10);                // scope 2 at src/grammar.rs:36:7: 36:10
        StorageLive(_11);                // scope 2 at src/grammar.rs:36:7: 36:10
        StorageLive(_12);                // scope 2 at src/grammar.rs:36:7: 36:10
        _12 = _9;                        // scope 2 at src/grammar.rs:36:7: 36:10
        _11 = _12;                       // scope 2 at src/grammar.rs:36:7: 36:10
        _10 = <i32 as Clone>::clone(move _11) -> bb6; // scope 2 at src/grammar.rs:36:7: 36:10
                                         // mir::Constant
                                         // + span: src/grammar.rs:36:7: 36:10
                                         // + literal: Const { ty: for<'r> fn(&'r i32) -> i32 {<i32 as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_11);                // scope 2 at src/grammar.rs:36:9: 36:10
        ((_0 as Num).0: i32) = move _10; // scope 2 at src/grammar.rs:32:10: 32:15
        discriminant(_0) = 1;            // scope 2 at src/grammar.rs:32:10: 32:15
        StorageDead(_12);                // scope 2 at src/grammar.rs:32:14: 32:15
        StorageDead(_10);                // scope 2 at src/grammar.rs:32:14: 32:15
        StorageDead(_9);                 // scope 0 at src/grammar.rs:32:14: 32:15
        goto -> bb10;                    // scope 0 at src/grammar.rs:32:14: 32:15
    }

    bb7: {
        StorageLive(_13);                // scope 0 at src/grammar.rs:37:10: 37:22
        _13 = &(((*(_2.0: &grammar::Expr)) as AddSub).0: std::vec::Vec<grammar::AddTerm>); // scope 0 at src/grammar.rs:37:10: 37:22
        StorageLive(_14);                // scope 3 at src/grammar.rs:37:10: 37:22
        StorageLive(_15);                // scope 3 at src/grammar.rs:37:10: 37:22
        StorageLive(_16);                // scope 3 at src/grammar.rs:37:10: 37:22
        _16 = _13;                       // scope 3 at src/grammar.rs:37:10: 37:22
        _15 = _16;                       // scope 3 at src/grammar.rs:37:10: 37:22
        _14 = <Vec<grammar::AddTerm> as Clone>::clone(move _15) -> bb8; // scope 3 at src/grammar.rs:37:10: 37:22
                                         // mir::Constant
                                         // + span: src/grammar.rs:37:10: 37:22
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<grammar::AddTerm>) -> std::vec::Vec<grammar::AddTerm> {<std::vec::Vec<grammar::AddTerm> as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_15);                // scope 3 at src/grammar.rs:37:21: 37:22
        ((_0 as AddSub).0: std::vec::Vec<grammar::AddTerm>) = move _14; // scope 3 at src/grammar.rs:32:10: 32:15
        discriminant(_0) = 2;            // scope 3 at src/grammar.rs:32:10: 32:15
        StorageDead(_16);                // scope 3 at src/grammar.rs:32:14: 32:15
        StorageDead(_14);                // scope 3 at src/grammar.rs:32:14: 32:15
        StorageDead(_13);                // scope 0 at src/grammar.rs:32:14: 32:15
        goto -> bb10;                    // scope 0 at src/grammar.rs:32:14: 32:15
    }

    bb9: {
        StorageDead(_19);                // scope 4 at src/grammar.rs:38:23: 38:24
        ((_0 as MultDiv).0: std::vec::Vec<grammar::MultTerm>) = move _18; // scope 4 at src/grammar.rs:32:10: 32:15
        discriminant(_0) = 3;            // scope 4 at src/grammar.rs:32:10: 32:15
        StorageDead(_20);                // scope 4 at src/grammar.rs:32:14: 32:15
        StorageDead(_18);                // scope 4 at src/grammar.rs:32:14: 32:15
        StorageDead(_17);                // scope 0 at src/grammar.rs:32:14: 32:15
        goto -> bb10;                    // scope 0 at src/grammar.rs:32:14: 32:15
    }

    bb10: {
        StorageDead(_2);                 // scope 0 at src/grammar.rs:32:14: 32:15
        return;                          // scope 0 at src/grammar.rs:32:15: 32:15
    }
}

fn if_stmt::{closure#0}::{closure#0}(_1: &[closure@src/parser.rs:92:41: 95:14], _2: grammar_lexer::Token) -> Option<grammar::Comparator> {
    debug token => _2;                   // in scope 0 at src/parser.rs:92:42: 92:47
    let mut _0: std::option::Option<grammar::Comparator>; // return place in scope 0 at src/parser.rs:92:49: 92:49
    let mut _3: isize;                   // in scope 0 at src/parser.rs:93:17: 93:32
    let _4: grammar::Comparator;         // in scope 0 at src/parser.rs:93:28: 93:31
    let mut _5: grammar::Comparator;     // in scope 0 at src/parser.rs:93:41: 93:44
    let mut _6: isize;                   // in scope 0 at src/parser.rs:95:13: 95:14
    scope 1 {
        debug cmp => _4;                 // in scope 1 at src/parser.rs:93:28: 93:31
    }

    bb0: {
        _3 = discriminant(_2);           // scope 0 at src/parser.rs:92:55: 92:60
        switchInt(move _3) -> [18_isize: bb2, otherwise: bb1]; // scope 0 at src/parser.rs:92:49: 92:60
    }

    bb1: {
        discriminant(_0) = 0;            // scope 0 at src/parser.rs:94:22: 94:26
        goto -> bb5;                     // scope 0 at src/parser.rs:94:22: 94:26
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at src/parser.rs:93:28: 93:31
        _4 = move ((_2 as Cmp).0: grammar::Comparator); // scope 0 at src/parser.rs:93:28: 93:31
        StorageLive(_5);                 // scope 1 at src/parser.rs:93:41: 93:44
        _5 = move _4;                    // scope 1 at src/parser.rs:93:41: 93:44
        ((_0 as Some).0: grammar::Comparator) = move _5; // scope 1 at src/parser.rs:93:36: 93:45
        discriminant(_0) = 1;            // scope 1 at src/parser.rs:93:36: 93:45
        StorageDead(_5);                 // scope 1 at src/parser.rs:93:44: 93:45
        StorageDead(_4);                 // scope 0 at src/parser.rs:93:44: 93:45
        goto -> bb5;                     // scope 0 at src/parser.rs:93:44: 93:45
    }

    bb3: {
        return;                          // scope 0 at src/parser.rs:95:14: 95:14
    }

    bb4: {
        drop(_2) -> bb3;                 // scope 0 at src/parser.rs:95:13: 95:14
    }

    bb5: {
        _6 = discriminant(_2);           // scope 0 at src/parser.rs:95:13: 95:14
        switchInt(move _6) -> [18_isize: bb3, otherwise: bb4]; // scope 0 at src/parser.rs:95:13: 95:14
    }
}

fn grammar::<impl at src/grammar.rs:50:10: 50:19>::ne(_1: &grammar::Statement, _2: &grammar::Statement) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar.rs:50:10: 50:19
    debug other => _2;                   // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar.rs:50:10: 50:19
    let _3: isize;                       // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _4: &grammar::Statement;     // in scope 0 at src/grammar.rs:50:10: 50:19
    let _5: &grammar::Statement;         // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _7: &grammar::Statement;     // in scope 0 at src/grammar.rs:50:10: 50:19
    let _8: &grammar::Statement;         // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _9: bool;                    // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _10: bool;                   // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _11: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _12: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _13: (&grammar::Statement, &grammar::Statement); // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _14: &grammar::Statement;    // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _15: &grammar::Statement;    // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _16: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _17: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _18: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _19: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _20: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _21: isize;                  // in scope 0 at src/grammar.rs:50:10: 50:19
    let mut _26: bool;                   // in scope 0 at src/grammar.rs:52:10: 52:16
    let mut _27: &std::string::String;   // in scope 0 at src/grammar.rs:52:10: 52:16
    let mut _28: &std::string::String;   // in scope 0 at src/grammar.rs:52:10: 52:16
    let mut _29: bool;                   // in scope 0 at src/grammar.rs:52:18: 52:22
    let mut _30: &grammar::Expr;         // in scope 0 at src/grammar.rs:52:18: 52:22
    let mut _31: &grammar::Expr;         // in scope 0 at src/grammar.rs:52:18: 52:22
    let mut _34: &grammar::Expr;         // in scope 0 at src/grammar.rs:53:10: 53:14
    let mut _35: &grammar::Expr;         // in scope 0 at src/grammar.rs:53:10: 53:14
    let mut _46: bool;                   // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _47: bool;                   // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _48: bool;                   // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _49: bool;                   // in scope 0 at src/grammar.rs:54:6: 54:10
    let mut _50: &grammar::Expr;         // in scope 0 at src/grammar.rs:54:6: 54:10
    let mut _51: &grammar::Expr;         // in scope 0 at src/grammar.rs:54:6: 54:10
    let mut _52: bool;                   // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _53: &grammar::Comparator;   // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _54: &grammar::Comparator;   // in scope 0 at src/grammar.rs:54:12: 54:22
    let mut _55: bool;                   // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _56: &grammar::Expr;         // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _57: &grammar::Expr;         // in scope 0 at src/grammar.rs:54:24: 54:28
    let mut _58: bool;                   // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _59: &grammar::Block;        // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _60: &grammar::Block;        // in scope 0 at src/grammar.rs:54:30: 54:35
    let mut _61: bool;                   // in scope 0 at src/grammar.rs:54:37: 54:50
    let mut _62: &std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let mut _63: &std::option::Option<grammar::Block>; // in scope 0 at src/grammar.rs:54:37: 54:50
    let mut _72: bool;                   // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _73: bool;                   // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _74: bool;                   // in scope 0 at src/grammar.rs:55:9: 55:13
    let mut _75: &grammar::Expr;         // in scope 0 at src/grammar.rs:55:9: 55:13
    let mut _76: &grammar::Expr;         // in scope 0 at src/grammar.rs:55:9: 55:13
    let mut _77: bool;                   // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _78: &grammar::Comparator;   // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _79: &grammar::Comparator;   // in scope 0 at src/grammar.rs:55:15: 55:25
    let mut _80: bool;                   // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _81: &grammar::Expr;         // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _82: &grammar::Expr;         // in scope 0 at src/grammar.rs:55:27: 55:31
    let mut _83: bool;                   // in scope 0 at src/grammar.rs:55:33: 55:38
    let mut _84: &grammar::Block;        // in scope 0 at src/grammar.rs:55:33: 55:38
    let mut _85: &grammar::Block;        // in scope 0 at src/grammar.rs:55:33: 55:38
    let mut _90: bool;                   // in scope 0 at src/grammar.rs:56:8: 56:12
    let mut _91: &grammar::Expr;         // in scope 0 at src/grammar.rs:56:8: 56:12
    let mut _92: &grammar::Expr;         // in scope 0 at src/grammar.rs:56:8: 56:12
    let mut _93: bool;                   // in scope 0 at src/grammar.rs:56:14: 56:19
    let mut _94: &grammar::Block;        // in scope 0 at src/grammar.rs:56:14: 56:19
    let mut _95: &grammar::Block;        // in scope 0 at src/grammar.rs:56:14: 56:19
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at src/grammar.rs:50:10: 50:19
        let _6: isize;                   // in scope 1 at src/grammar.rs:50:10: 50:19
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at src/grammar.rs:50:10: 50:19
            let _22: &std::string::String; // in scope 2 at src/grammar.rs:52:10: 52:16
            let _23: &grammar::Expr;     // in scope 2 at src/grammar.rs:52:18: 52:22
            let _24: &std::string::String; // in scope 2 at src/grammar.rs:52:10: 52:16
            let _25: &grammar::Expr;     // in scope 2 at src/grammar.rs:52:18: 52:22
            let _32: &grammar::Expr;     // in scope 2 at src/grammar.rs:53:10: 53:14
            let _33: &grammar::Expr;     // in scope 2 at src/grammar.rs:53:10: 53:14
            let _36: &grammar::Expr;     // in scope 2 at src/grammar.rs:54:6: 54:10
            let _37: &grammar::Comparator; // in scope 2 at src/grammar.rs:54:12: 54:22
            let _38: &grammar::Expr;     // in scope 2 at src/grammar.rs:54:24: 54:28
            let _39: &grammar::Block;    // in scope 2 at src/grammar.rs:54:30: 54:35
            let _40: &std::option::Option<grammar::Block>; // in scope 2 at src/grammar.rs:54:37: 54:50
            let _41: &grammar::Expr;     // in scope 2 at src/grammar.rs:54:6: 54:10
            let _42: &grammar::Comparator; // in scope 2 at src/grammar.rs:54:12: 54:22
            let _43: &grammar::Expr;     // in scope 2 at src/grammar.rs:54:24: 54:28
            let _44: &grammar::Block;    // in scope 2 at src/grammar.rs:54:30: 54:35
            let _45: &std::option::Option<grammar::Block>; // in scope 2 at src/grammar.rs:54:37: 54:50
            let _64: &grammar::Expr;     // in scope 2 at src/grammar.rs:55:9: 55:13
            let _65: &grammar::Comparator; // in scope 2 at src/grammar.rs:55:15: 55:25
            let _66: &grammar::Expr;     // in scope 2 at src/grammar.rs:55:27: 55:31
            let _67: &grammar::Block;    // in scope 2 at src/grammar.rs:55:33: 55:38
            let _68: &grammar::Expr;     // in scope 2 at src/grammar.rs:55:9: 55:13
            let _69: &grammar::Comparator; // in scope 2 at src/grammar.rs:55:15: 55:25
            let _70: &grammar::Expr;     // in scope 2 at src/grammar.rs:55:27: 55:31
            let _71: &grammar::Block;    // in scope 2 at src/grammar.rs:55:33: 55:38
            let _86: &grammar::Expr;     // in scope 2 at src/grammar.rs:56:8: 56:12
            let _87: &grammar::Block;    // in scope 2 at src/grammar.rs:56:14: 56:19
            let _88: &grammar::Expr;     // in scope 2 at src/grammar.rs:56:8: 56:12
            let _89: &grammar::Block;    // in scope 2 at src/grammar.rs:56:14: 56:19
            scope 3 {
                debug __self_0 => _22;   // in scope 3 at src/grammar.rs:52:10: 52:16
                debug __self_1 => _23;   // in scope 3 at src/grammar.rs:52:18: 52:22
                debug __arg_1_0 => _24;  // in scope 3 at src/grammar.rs:52:10: 52:16
                debug __arg_1_1 => _25;  // in scope 3 at src/grammar.rs:52:18: 52:22
            }
            scope 4 {
                debug __self_0 => _32;   // in scope 4 at src/grammar.rs:53:10: 53:14
                debug __arg_1_0 => _33;  // in scope 4 at src/grammar.rs:53:10: 53:14
            }
            scope 5 {
                debug __self_0 => _36;   // in scope 5 at src/grammar.rs:54:6: 54:10
                debug __self_1 => _37;   // in scope 5 at src/grammar.rs:54:12: 54:22
                debug __self_2 => _38;   // in scope 5 at src/grammar.rs:54:24: 54:28
                debug __self_3 => _39;   // in scope 5 at src/grammar.rs:54:30: 54:35
                debug __self_4 => _40;   // in scope 5 at src/grammar.rs:54:37: 54:50
                debug __arg_1_0 => _41;  // in scope 5 at src/grammar.rs:54:6: 54:10
                debug __arg_1_1 => _42;  // in scope 5 at src/grammar.rs:54:12: 54:22
                debug __arg_1_2 => _43;  // in scope 5 at src/grammar.rs:54:24: 54:28
                debug __arg_1_3 => _44;  // in scope 5 at src/grammar.rs:54:30: 54:35
                debug __arg_1_4 => _45;  // in scope 5 at src/grammar.rs:54:37: 54:50
            }
            scope 6 {
                debug __self_0 => _64;   // in scope 6 at src/grammar.rs:55:9: 55:13
                debug __self_1 => _65;   // in scope 6 at src/grammar.rs:55:15: 55:25
                debug __self_2 => _66;   // in scope 6 at src/grammar.rs:55:27: 55:31
                debug __self_3 => _67;   // in scope 6 at src/grammar.rs:55:33: 55:38
                debug __arg_1_0 => _68;  // in scope 6 at src/grammar.rs:55:9: 55:13
                debug __arg_1_1 => _69;  // in scope 6 at src/grammar.rs:55:15: 55:25
                debug __arg_1_2 => _70;  // in scope 6 at src/grammar.rs:55:27: 55:31
                debug __arg_1_3 => _71;  // in scope 6 at src/grammar.rs:55:33: 55:38
            }
            scope 7 {
                debug __self_0 => _86;   // in scope 7 at src/grammar.rs:56:8: 56:12
                debug __self_1 => _87;   // in scope 7 at src/grammar.rs:56:14: 56:19
                debug __arg_1_0 => _88;  // in scope 7 at src/grammar.rs:56:8: 56:12
                debug __arg_1_1 => _89;  // in scope 7 at src/grammar.rs:56:14: 56:19
            }
            scope 8 {
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:50:10: 50:19
        StorageLive(_4);                 // scope 0 at src/grammar.rs:50:10: 50:19
        StorageLive(_5);                 // scope 0 at src/grammar.rs:50:10: 50:19
        _5 = _1;                         // scope 0 at src/grammar.rs:50:10: 50:19
        _4 = _5;                         // scope 0 at src/grammar.rs:50:10: 50:19
        _3 = discriminant((*_4));        // scope 0 at src/grammar.rs:50:10: 50:19
        StorageDead(_4);                 // scope 0 at src/grammar.rs:50:18: 50:19
        StorageDead(_5);                 // scope 0 at src/grammar.rs:50:18: 50:19
        StorageLive(_6);                 // scope 1 at src/grammar.rs:50:10: 50:19
        StorageLive(_7);                 // scope 1 at src/grammar.rs:50:10: 50:19
        StorageLive(_8);                 // scope 1 at src/grammar.rs:50:10: 50:19
        _8 = _2;                         // scope 1 at src/grammar.rs:50:10: 50:19
        _7 = _8;                         // scope 1 at src/grammar.rs:50:10: 50:19
        _6 = discriminant((*_7));        // scope 1 at src/grammar.rs:50:10: 50:19
        StorageDead(_7);                 // scope 1 at src/grammar.rs:50:18: 50:19
        StorageDead(_8);                 // scope 1 at src/grammar.rs:50:18: 50:19
        StorageLive(_9);                 // scope 2 at src/grammar.rs:50:10: 50:19
        StorageLive(_10);                // scope 2 at src/grammar.rs:50:10: 50:19
        StorageLive(_11);                // scope 2 at src/grammar.rs:50:10: 50:19
        _11 = _3;                        // scope 2 at src/grammar.rs:50:10: 50:19
        StorageLive(_12);                // scope 2 at src/grammar.rs:50:10: 50:19
        _12 = _6;                        // scope 2 at src/grammar.rs:50:10: 50:19
        _10 = Eq(move _11, move _12);    // scope 2 at src/grammar.rs:50:10: 50:19
        StorageDead(_12);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_11);                // scope 2 at src/grammar.rs:50:18: 50:19
        _9 = move _10;                   // scope 2 at src/grammar.rs:50:10: 50:19
        StorageDead(_10);                // scope 2 at src/grammar.rs:50:18: 50:19
        switchInt(move _9) -> [false: bb55, otherwise: bb1]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb1: {
        StorageLive(_13);                // scope 2 at src/grammar.rs:50:10: 50:19
        StorageLive(_14);                // scope 2 at src/grammar.rs:50:10: 50:19
        _14 = _1;                        // scope 2 at src/grammar.rs:50:10: 50:19
        StorageLive(_15);                // scope 2 at src/grammar.rs:50:10: 50:19
        _15 = _2;                        // scope 2 at src/grammar.rs:50:10: 50:19
        (_13.0: &grammar::Statement) = move _14; // scope 2 at src/grammar.rs:50:10: 50:19
        (_13.1: &grammar::Statement) = move _15; // scope 2 at src/grammar.rs:50:10: 50:19
        StorageDead(_15);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_14);                // scope 2 at src/grammar.rs:50:18: 50:19
        _21 = discriminant((*(_13.0: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _21) -> [0_isize: bb2, 1_isize: bb4, 2_isize: bb5, 3_isize: bb6, 4_isize: bb7, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb2: {
        _16 = discriminant((*(_13.1: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _16) -> [0_isize: bb8, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb3: {
        unreachable;                     // scope 8 at src/grammar.rs:50:10: 50:19
    }

    bb4: {
        _17 = discriminant((*(_13.1: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _17) -> [1_isize: bb14, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb5: {
        _18 = discriminant((*(_13.1: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _18) -> [2_isize: bb16, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb6: {
        _19 = discriminant((*(_13.1: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _19) -> [3_isize: bb34, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb7: {
        _20 = discriminant((*(_13.1: &grammar::Statement))); // scope 2 at src/grammar.rs:50:10: 50:19
        switchInt(move _20) -> [4_isize: bb48, otherwise: bb3]; // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb8: {
        StorageLive(_22);                // scope 2 at src/grammar.rs:52:10: 52:16
        _22 = &(((*(_13.0: &grammar::Statement)) as Assign).0: std::string::String); // scope 2 at src/grammar.rs:52:10: 52:16
        StorageLive(_23);                // scope 2 at src/grammar.rs:52:18: 52:22
        _23 = &(((*(_13.0: &grammar::Statement)) as Assign).1: grammar::Expr); // scope 2 at src/grammar.rs:52:18: 52:22
        StorageLive(_24);                // scope 2 at src/grammar.rs:52:10: 52:16
        _24 = &(((*(_13.1: &grammar::Statement)) as Assign).0: std::string::String); // scope 2 at src/grammar.rs:52:10: 52:16
        StorageLive(_25);                // scope 2 at src/grammar.rs:52:18: 52:22
        _25 = &(((*(_13.1: &grammar::Statement)) as Assign).1: grammar::Expr); // scope 2 at src/grammar.rs:52:18: 52:22
        StorageLive(_26);                // scope 3 at src/grammar.rs:52:10: 52:16
        StorageLive(_27);                // scope 3 at src/grammar.rs:52:10: 52:16
        _27 = _22;                       // scope 3 at src/grammar.rs:52:10: 52:16
        StorageLive(_28);                // scope 3 at src/grammar.rs:52:10: 52:16
        _28 = _24;                       // scope 3 at src/grammar.rs:52:10: 52:16
        _26 = <String as PartialEq>::ne(move _27, move _28) -> bb12; // scope 3 at src/grammar.rs:52:10: 52:16
                                         // mir::Constant
                                         // + span: src/grammar.rs:52:10: 52:16
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::string::String, &'s std::string::String) -> bool {<std::string::String as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _0 = const true;                 // scope 3 at src/grammar.rs:52:18: 52:22
        goto -> bb11;                    // scope 3 at src/grammar.rs:52:18: 52:22
    }

    bb10: {
        StorageLive(_29);                // scope 3 at src/grammar.rs:52:18: 52:22
        StorageLive(_30);                // scope 3 at src/grammar.rs:52:18: 52:22
        _30 = _23;                       // scope 3 at src/grammar.rs:52:18: 52:22
        StorageLive(_31);                // scope 3 at src/grammar.rs:52:18: 52:22
        _31 = _25;                       // scope 3 at src/grammar.rs:52:18: 52:22
        _29 = <grammar::Expr as PartialEq>::ne(move _30, move _31) -> bb13; // scope 3 at src/grammar.rs:52:18: 52:22
                                         // mir::Constant
                                         // + span: src/grammar.rs:52:18: 52:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_29);                // scope 3 at src/grammar.rs:52:21: 52:22
        StorageDead(_26);                // scope 3 at src/grammar.rs:52:21: 52:22
        StorageDead(_25);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_24);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_23);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_22);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb54;                    // scope 2 at src/grammar.rs:50:18: 50:19
    }

    bb12: {
        StorageDead(_28);                // scope 3 at src/grammar.rs:52:15: 52:16
        StorageDead(_27);                // scope 3 at src/grammar.rs:52:15: 52:16
        switchInt(move _26) -> [false: bb10, otherwise: bb9]; // scope 3 at src/grammar.rs:52:18: 52:22
    }

    bb13: {
        StorageDead(_31);                // scope 3 at src/grammar.rs:52:21: 52:22
        StorageDead(_30);                // scope 3 at src/grammar.rs:52:21: 52:22
        _0 = move _29;                   // scope 3 at src/grammar.rs:52:18: 52:22
        goto -> bb11;                    // scope 3 at src/grammar.rs:52:18: 52:22
    }

    bb14: {
        StorageLive(_32);                // scope 2 at src/grammar.rs:53:10: 53:14
        _32 = &(((*(_13.0: &grammar::Statement)) as Output).0: grammar::Expr); // scope 2 at src/grammar.rs:53:10: 53:14
        StorageLive(_33);                // scope 2 at src/grammar.rs:53:10: 53:14
        _33 = &(((*(_13.1: &grammar::Statement)) as Output).0: grammar::Expr); // scope 2 at src/grammar.rs:53:10: 53:14
        StorageLive(_34);                // scope 4 at src/grammar.rs:53:10: 53:14
        _34 = _32;                       // scope 4 at src/grammar.rs:53:10: 53:14
        StorageLive(_35);                // scope 4 at src/grammar.rs:53:10: 53:14
        _35 = _33;                       // scope 4 at src/grammar.rs:53:10: 53:14
        _0 = <grammar::Expr as PartialEq>::ne(move _34, move _35) -> bb15; // scope 4 at src/grammar.rs:53:10: 53:14
                                         // mir::Constant
                                         // + span: src/grammar.rs:53:10: 53:14
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_35);                // scope 4 at src/grammar.rs:53:13: 53:14
        StorageDead(_34);                // scope 4 at src/grammar.rs:53:13: 53:14
        StorageDead(_33);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_32);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb54;                    // scope 2 at src/grammar.rs:50:18: 50:19
    }

    bb16: {
        StorageLive(_36);                // scope 2 at src/grammar.rs:54:6: 54:10
        _36 = &(((*(_13.0: &grammar::Statement)) as If).0: grammar::Expr); // scope 2 at src/grammar.rs:54:6: 54:10
        StorageLive(_37);                // scope 2 at src/grammar.rs:54:12: 54:22
        _37 = &(((*(_13.0: &grammar::Statement)) as If).1: grammar::Comparator); // scope 2 at src/grammar.rs:54:12: 54:22
        StorageLive(_38);                // scope 2 at src/grammar.rs:54:24: 54:28
        _38 = &(((*(_13.0: &grammar::Statement)) as If).2: grammar::Expr); // scope 2 at src/grammar.rs:54:24: 54:28
        StorageLive(_39);                // scope 2 at src/grammar.rs:54:30: 54:35
        _39 = &(((*(_13.0: &grammar::Statement)) as If).3: grammar::Block); // scope 2 at src/grammar.rs:54:30: 54:35
        StorageLive(_40);                // scope 2 at src/grammar.rs:54:37: 54:50
        _40 = &(((*(_13.0: &grammar::Statement)) as If).4: std::option::Option<grammar::Block>); // scope 2 at src/grammar.rs:54:37: 54:50
        StorageLive(_41);                // scope 2 at src/grammar.rs:54:6: 54:10
        _41 = &(((*(_13.1: &grammar::Statement)) as If).0: grammar::Expr); // scope 2 at src/grammar.rs:54:6: 54:10
        StorageLive(_42);                // scope 2 at src/grammar.rs:54:12: 54:22
        _42 = &(((*(_13.1: &grammar::Statement)) as If).1: grammar::Comparator); // scope 2 at src/grammar.rs:54:12: 54:22
        StorageLive(_43);                // scope 2 at src/grammar.rs:54:24: 54:28
        _43 = &(((*(_13.1: &grammar::Statement)) as If).2: grammar::Expr); // scope 2 at src/grammar.rs:54:24: 54:28
        StorageLive(_44);                // scope 2 at src/grammar.rs:54:30: 54:35
        _44 = &(((*(_13.1: &grammar::Statement)) as If).3: grammar::Block); // scope 2 at src/grammar.rs:54:30: 54:35
        StorageLive(_45);                // scope 2 at src/grammar.rs:54:37: 54:50
        _45 = &(((*(_13.1: &grammar::Statement)) as If).4: std::option::Option<grammar::Block>); // scope 2 at src/grammar.rs:54:37: 54:50
        StorageLive(_46);                // scope 5 at src/grammar.rs:54:30: 54:35
        StorageLive(_47);                // scope 5 at src/grammar.rs:54:24: 54:28
        StorageLive(_48);                // scope 5 at src/grammar.rs:54:12: 54:22
        StorageLive(_49);                // scope 5 at src/grammar.rs:54:6: 54:10
        StorageLive(_50);                // scope 5 at src/grammar.rs:54:6: 54:10
        _50 = _36;                       // scope 5 at src/grammar.rs:54:6: 54:10
        StorageLive(_51);                // scope 5 at src/grammar.rs:54:6: 54:10
        _51 = _41;                       // scope 5 at src/grammar.rs:54:6: 54:10
        _49 = <grammar::Expr as PartialEq>::ne(move _50, move _51) -> bb29; // scope 5 at src/grammar.rs:54:6: 54:10
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:6: 54:10
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        _0 = const true;                 // scope 5 at src/grammar.rs:54:37: 54:50
        goto -> bb19;                    // scope 5 at src/grammar.rs:54:37: 54:50
    }

    bb18: {
        StorageLive(_61);                // scope 5 at src/grammar.rs:54:37: 54:50
        StorageLive(_62);                // scope 5 at src/grammar.rs:54:37: 54:50
        _62 = _40;                       // scope 5 at src/grammar.rs:54:37: 54:50
        StorageLive(_63);                // scope 5 at src/grammar.rs:54:37: 54:50
        _63 = _45;                       // scope 5 at src/grammar.rs:54:37: 54:50
        _61 = <Option<grammar::Block> as PartialEq>::ne(move _62, move _63) -> bb33; // scope 5 at src/grammar.rs:54:37: 54:50
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:37: 54:50
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::option::Option<grammar::Block>, &'s std::option::Option<grammar::Block>) -> bool {<std::option::Option<grammar::Block> as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_61);                // scope 5 at src/grammar.rs:54:49: 54:50
        StorageDead(_46);                // scope 5 at src/grammar.rs:54:49: 54:50
        StorageDead(_45);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_44);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_43);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_42);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_41);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_40);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_39);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_38);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_37);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_36);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb54;                    // scope 2 at src/grammar.rs:50:18: 50:19
    }

    bb20: {
        _46 = const true;                // scope 5 at src/grammar.rs:54:30: 54:35
        goto -> bb22;                    // scope 5 at src/grammar.rs:54:30: 54:35
    }

    bb21: {
        StorageLive(_58);                // scope 5 at src/grammar.rs:54:30: 54:35
        StorageLive(_59);                // scope 5 at src/grammar.rs:54:30: 54:35
        _59 = _39;                       // scope 5 at src/grammar.rs:54:30: 54:35
        StorageLive(_60);                // scope 5 at src/grammar.rs:54:30: 54:35
        _60 = _44;                       // scope 5 at src/grammar.rs:54:30: 54:35
        _58 = <grammar::Block as PartialEq>::ne(move _59, move _60) -> bb32; // scope 5 at src/grammar.rs:54:30: 54:35
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:30: 54:35
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Block, &'s grammar::Block) -> bool {<grammar::Block as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_58);                // scope 5 at src/grammar.rs:54:34: 54:35
        StorageDead(_47);                // scope 5 at src/grammar.rs:54:34: 54:35
        switchInt(move _46) -> [false: bb18, otherwise: bb17]; // scope 5 at src/grammar.rs:54:37: 54:50
    }

    bb23: {
        _47 = const true;                // scope 5 at src/grammar.rs:54:24: 54:28
        goto -> bb25;                    // scope 5 at src/grammar.rs:54:24: 54:28
    }

    bb24: {
        StorageLive(_55);                // scope 5 at src/grammar.rs:54:24: 54:28
        StorageLive(_56);                // scope 5 at src/grammar.rs:54:24: 54:28
        _56 = _38;                       // scope 5 at src/grammar.rs:54:24: 54:28
        StorageLive(_57);                // scope 5 at src/grammar.rs:54:24: 54:28
        _57 = _43;                       // scope 5 at src/grammar.rs:54:24: 54:28
        _55 = <grammar::Expr as PartialEq>::ne(move _56, move _57) -> bb31; // scope 5 at src/grammar.rs:54:24: 54:28
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:24: 54:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        StorageDead(_55);                // scope 5 at src/grammar.rs:54:27: 54:28
        StorageDead(_48);                // scope 5 at src/grammar.rs:54:27: 54:28
        switchInt(move _47) -> [false: bb21, otherwise: bb20]; // scope 5 at src/grammar.rs:54:30: 54:35
    }

    bb26: {
        _48 = const true;                // scope 5 at src/grammar.rs:54:12: 54:22
        goto -> bb28;                    // scope 5 at src/grammar.rs:54:12: 54:22
    }

    bb27: {
        StorageLive(_52);                // scope 5 at src/grammar.rs:54:12: 54:22
        StorageLive(_53);                // scope 5 at src/grammar.rs:54:12: 54:22
        _53 = _37;                       // scope 5 at src/grammar.rs:54:12: 54:22
        StorageLive(_54);                // scope 5 at src/grammar.rs:54:12: 54:22
        _54 = _42;                       // scope 5 at src/grammar.rs:54:12: 54:22
        _52 = <grammar::Comparator as PartialEq>::ne(move _53, move _54) -> bb30; // scope 5 at src/grammar.rs:54:12: 54:22
                                         // mir::Constant
                                         // + span: src/grammar.rs:54:12: 54:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Comparator, &'s grammar::Comparator) -> bool {<grammar::Comparator as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        StorageDead(_52);                // scope 5 at src/grammar.rs:54:21: 54:22
        StorageDead(_49);                // scope 5 at src/grammar.rs:54:21: 54:22
        switchInt(move _48) -> [false: bb24, otherwise: bb23]; // scope 5 at src/grammar.rs:54:24: 54:28
    }

    bb29: {
        StorageDead(_51);                // scope 5 at src/grammar.rs:54:9: 54:10
        StorageDead(_50);                // scope 5 at src/grammar.rs:54:9: 54:10
        switchInt(move _49) -> [false: bb27, otherwise: bb26]; // scope 5 at src/grammar.rs:54:12: 54:22
    }

    bb30: {
        StorageDead(_54);                // scope 5 at src/grammar.rs:54:21: 54:22
        StorageDead(_53);                // scope 5 at src/grammar.rs:54:21: 54:22
        _48 = move _52;                  // scope 5 at src/grammar.rs:54:12: 54:22
        goto -> bb28;                    // scope 5 at src/grammar.rs:54:12: 54:22
    }

    bb31: {
        StorageDead(_57);                // scope 5 at src/grammar.rs:54:27: 54:28
        StorageDead(_56);                // scope 5 at src/grammar.rs:54:27: 54:28
        _47 = move _55;                  // scope 5 at src/grammar.rs:54:24: 54:28
        goto -> bb25;                    // scope 5 at src/grammar.rs:54:24: 54:28
    }

    bb32: {
        StorageDead(_60);                // scope 5 at src/grammar.rs:54:34: 54:35
        StorageDead(_59);                // scope 5 at src/grammar.rs:54:34: 54:35
        _46 = move _58;                  // scope 5 at src/grammar.rs:54:30: 54:35
        goto -> bb22;                    // scope 5 at src/grammar.rs:54:30: 54:35
    }

    bb33: {
        StorageDead(_63);                // scope 5 at src/grammar.rs:54:49: 54:50
        StorageDead(_62);                // scope 5 at src/grammar.rs:54:49: 54:50
        _0 = move _61;                   // scope 5 at src/grammar.rs:54:37: 54:50
        goto -> bb19;                    // scope 5 at src/grammar.rs:54:37: 54:50
    }

    bb34: {
        StorageLive(_64);                // scope 2 at src/grammar.rs:55:9: 55:13
        _64 = &(((*(_13.0: &grammar::Statement)) as While).0: grammar::Expr); // scope 2 at src/grammar.rs:55:9: 55:13
        StorageLive(_65);                // scope 2 at src/grammar.rs:55:15: 55:25
        _65 = &(((*(_13.0: &grammar::Statement)) as While).1: grammar::Comparator); // scope 2 at src/grammar.rs:55:15: 55:25
        StorageLive(_66);                // scope 2 at src/grammar.rs:55:27: 55:31
        _66 = &(((*(_13.0: &grammar::Statement)) as While).2: grammar::Expr); // scope 2 at src/grammar.rs:55:27: 55:31
        StorageLive(_67);                // scope 2 at src/grammar.rs:55:33: 55:38
        _67 = &(((*(_13.0: &grammar::Statement)) as While).3: grammar::Block); // scope 2 at src/grammar.rs:55:33: 55:38
        StorageLive(_68);                // scope 2 at src/grammar.rs:55:9: 55:13
        _68 = &(((*(_13.1: &grammar::Statement)) as While).0: grammar::Expr); // scope 2 at src/grammar.rs:55:9: 55:13
        StorageLive(_69);                // scope 2 at src/grammar.rs:55:15: 55:25
        _69 = &(((*(_13.1: &grammar::Statement)) as While).1: grammar::Comparator); // scope 2 at src/grammar.rs:55:15: 55:25
        StorageLive(_70);                // scope 2 at src/grammar.rs:55:27: 55:31
        _70 = &(((*(_13.1: &grammar::Statement)) as While).2: grammar::Expr); // scope 2 at src/grammar.rs:55:27: 55:31
        StorageLive(_71);                // scope 2 at src/grammar.rs:55:33: 55:38
        _71 = &(((*(_13.1: &grammar::Statement)) as While).3: grammar::Block); // scope 2 at src/grammar.rs:55:33: 55:38
        StorageLive(_72);                // scope 6 at src/grammar.rs:55:27: 55:31
        StorageLive(_73);                // scope 6 at src/grammar.rs:55:15: 55:25
        StorageLive(_74);                // scope 6 at src/grammar.rs:55:9: 55:13
        StorageLive(_75);                // scope 6 at src/grammar.rs:55:9: 55:13
        _75 = _64;                       // scope 6 at src/grammar.rs:55:9: 55:13
        StorageLive(_76);                // scope 6 at src/grammar.rs:55:9: 55:13
        _76 = _68;                       // scope 6 at src/grammar.rs:55:9: 55:13
        _74 = <grammar::Expr as PartialEq>::ne(move _75, move _76) -> bb44; // scope 6 at src/grammar.rs:55:9: 55:13
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:9: 55:13
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb35: {
        _0 = const true;                 // scope 6 at src/grammar.rs:55:33: 55:38
        goto -> bb37;                    // scope 6 at src/grammar.rs:55:33: 55:38
    }

    bb36: {
        StorageLive(_83);                // scope 6 at src/grammar.rs:55:33: 55:38
        StorageLive(_84);                // scope 6 at src/grammar.rs:55:33: 55:38
        _84 = _67;                       // scope 6 at src/grammar.rs:55:33: 55:38
        StorageLive(_85);                // scope 6 at src/grammar.rs:55:33: 55:38
        _85 = _71;                       // scope 6 at src/grammar.rs:55:33: 55:38
        _83 = <grammar::Block as PartialEq>::ne(move _84, move _85) -> bb47; // scope 6 at src/grammar.rs:55:33: 55:38
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:33: 55:38
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Block, &'s grammar::Block) -> bool {<grammar::Block as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb37: {
        StorageDead(_83);                // scope 6 at src/grammar.rs:55:37: 55:38
        StorageDead(_72);                // scope 6 at src/grammar.rs:55:37: 55:38
        StorageDead(_71);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_70);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_69);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_68);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_67);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_66);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_65);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_64);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb54;                    // scope 2 at src/grammar.rs:50:18: 50:19
    }

    bb38: {
        _72 = const true;                // scope 6 at src/grammar.rs:55:27: 55:31
        goto -> bb40;                    // scope 6 at src/grammar.rs:55:27: 55:31
    }

    bb39: {
        StorageLive(_80);                // scope 6 at src/grammar.rs:55:27: 55:31
        StorageLive(_81);                // scope 6 at src/grammar.rs:55:27: 55:31
        _81 = _66;                       // scope 6 at src/grammar.rs:55:27: 55:31
        StorageLive(_82);                // scope 6 at src/grammar.rs:55:27: 55:31
        _82 = _70;                       // scope 6 at src/grammar.rs:55:27: 55:31
        _80 = <grammar::Expr as PartialEq>::ne(move _81, move _82) -> bb46; // scope 6 at src/grammar.rs:55:27: 55:31
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:27: 55:31
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb40: {
        StorageDead(_80);                // scope 6 at src/grammar.rs:55:30: 55:31
        StorageDead(_73);                // scope 6 at src/grammar.rs:55:30: 55:31
        switchInt(move _72) -> [false: bb36, otherwise: bb35]; // scope 6 at src/grammar.rs:55:33: 55:38
    }

    bb41: {
        _73 = const true;                // scope 6 at src/grammar.rs:55:15: 55:25
        goto -> bb43;                    // scope 6 at src/grammar.rs:55:15: 55:25
    }

    bb42: {
        StorageLive(_77);                // scope 6 at src/grammar.rs:55:15: 55:25
        StorageLive(_78);                // scope 6 at src/grammar.rs:55:15: 55:25
        _78 = _65;                       // scope 6 at src/grammar.rs:55:15: 55:25
        StorageLive(_79);                // scope 6 at src/grammar.rs:55:15: 55:25
        _79 = _69;                       // scope 6 at src/grammar.rs:55:15: 55:25
        _77 = <grammar::Comparator as PartialEq>::ne(move _78, move _79) -> bb45; // scope 6 at src/grammar.rs:55:15: 55:25
                                         // mir::Constant
                                         // + span: src/grammar.rs:55:15: 55:25
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Comparator, &'s grammar::Comparator) -> bool {<grammar::Comparator as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb43: {
        StorageDead(_77);                // scope 6 at src/grammar.rs:55:24: 55:25
        StorageDead(_74);                // scope 6 at src/grammar.rs:55:24: 55:25
        switchInt(move _73) -> [false: bb39, otherwise: bb38]; // scope 6 at src/grammar.rs:55:27: 55:31
    }

    bb44: {
        StorageDead(_76);                // scope 6 at src/grammar.rs:55:12: 55:13
        StorageDead(_75);                // scope 6 at src/grammar.rs:55:12: 55:13
        switchInt(move _74) -> [false: bb42, otherwise: bb41]; // scope 6 at src/grammar.rs:55:15: 55:25
    }

    bb45: {
        StorageDead(_79);                // scope 6 at src/grammar.rs:55:24: 55:25
        StorageDead(_78);                // scope 6 at src/grammar.rs:55:24: 55:25
        _73 = move _77;                  // scope 6 at src/grammar.rs:55:15: 55:25
        goto -> bb43;                    // scope 6 at src/grammar.rs:55:15: 55:25
    }

    bb46: {
        StorageDead(_82);                // scope 6 at src/grammar.rs:55:30: 55:31
        StorageDead(_81);                // scope 6 at src/grammar.rs:55:30: 55:31
        _72 = move _80;                  // scope 6 at src/grammar.rs:55:27: 55:31
        goto -> bb40;                    // scope 6 at src/grammar.rs:55:27: 55:31
    }

    bb47: {
        StorageDead(_85);                // scope 6 at src/grammar.rs:55:37: 55:38
        StorageDead(_84);                // scope 6 at src/grammar.rs:55:37: 55:38
        _0 = move _83;                   // scope 6 at src/grammar.rs:55:33: 55:38
        goto -> bb37;                    // scope 6 at src/grammar.rs:55:33: 55:38
    }

    bb48: {
        StorageLive(_86);                // scope 2 at src/grammar.rs:56:8: 56:12
        _86 = &(((*(_13.0: &grammar::Statement)) as Loop).0: grammar::Expr); // scope 2 at src/grammar.rs:56:8: 56:12
        StorageLive(_87);                // scope 2 at src/grammar.rs:56:14: 56:19
        _87 = &(((*(_13.0: &grammar::Statement)) as Loop).1: grammar::Block); // scope 2 at src/grammar.rs:56:14: 56:19
        StorageLive(_88);                // scope 2 at src/grammar.rs:56:8: 56:12
        _88 = &(((*(_13.1: &grammar::Statement)) as Loop).0: grammar::Expr); // scope 2 at src/grammar.rs:56:8: 56:12
        StorageLive(_89);                // scope 2 at src/grammar.rs:56:14: 56:19
        _89 = &(((*(_13.1: &grammar::Statement)) as Loop).1: grammar::Block); // scope 2 at src/grammar.rs:56:14: 56:19
        StorageLive(_90);                // scope 7 at src/grammar.rs:56:8: 56:12
        StorageLive(_91);                // scope 7 at src/grammar.rs:56:8: 56:12
        _91 = _86;                       // scope 7 at src/grammar.rs:56:8: 56:12
        StorageLive(_92);                // scope 7 at src/grammar.rs:56:8: 56:12
        _92 = _88;                       // scope 7 at src/grammar.rs:56:8: 56:12
        _90 = <grammar::Expr as PartialEq>::ne(move _91, move _92) -> bb52; // scope 7 at src/grammar.rs:56:8: 56:12
                                         // mir::Constant
                                         // + span: src/grammar.rs:56:8: 56:12
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Expr, &'s grammar::Expr) -> bool {<grammar::Expr as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb49: {
        _0 = const true;                 // scope 7 at src/grammar.rs:56:14: 56:19
        goto -> bb51;                    // scope 7 at src/grammar.rs:56:14: 56:19
    }

    bb50: {
        StorageLive(_93);                // scope 7 at src/grammar.rs:56:14: 56:19
        StorageLive(_94);                // scope 7 at src/grammar.rs:56:14: 56:19
        _94 = _87;                       // scope 7 at src/grammar.rs:56:14: 56:19
        StorageLive(_95);                // scope 7 at src/grammar.rs:56:14: 56:19
        _95 = _89;                       // scope 7 at src/grammar.rs:56:14: 56:19
        _93 = <grammar::Block as PartialEq>::ne(move _94, move _95) -> bb53; // scope 7 at src/grammar.rs:56:14: 56:19
                                         // mir::Constant
                                         // + span: src/grammar.rs:56:14: 56:19
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Block, &'s grammar::Block) -> bool {<grammar::Block as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb51: {
        StorageDead(_93);                // scope 7 at src/grammar.rs:56:18: 56:19
        StorageDead(_90);                // scope 7 at src/grammar.rs:56:18: 56:19
        StorageDead(_89);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_88);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_87);                // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_86);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb54;                    // scope 2 at src/grammar.rs:50:18: 50:19
    }

    bb52: {
        StorageDead(_92);                // scope 7 at src/grammar.rs:56:11: 56:12
        StorageDead(_91);                // scope 7 at src/grammar.rs:56:11: 56:12
        switchInt(move _90) -> [false: bb50, otherwise: bb49]; // scope 7 at src/grammar.rs:56:14: 56:19
    }

    bb53: {
        StorageDead(_95);                // scope 7 at src/grammar.rs:56:18: 56:19
        StorageDead(_94);                // scope 7 at src/grammar.rs:56:18: 56:19
        _0 = move _93;                   // scope 7 at src/grammar.rs:56:14: 56:19
        goto -> bb51;                    // scope 7 at src/grammar.rs:56:14: 56:19
    }

    bb54: {
        StorageDead(_13);                // scope 2 at src/grammar.rs:50:18: 50:19
        goto -> bb56;                    // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb55: {
        _0 = const true;                 // scope 2 at src/grammar.rs:50:10: 50:19
        goto -> bb56;                    // scope 2 at src/grammar.rs:50:10: 50:19
    }

    bb56: {
        StorageDead(_9);                 // scope 2 at src/grammar.rs:50:18: 50:19
        StorageDead(_6);                 // scope 1 at src/grammar.rs:50:18: 50:19
        StorageDead(_3);                 // scope 0 at src/grammar.rs:50:18: 50:19
        return;                          // scope 0 at src/grammar.rs:50:19: 50:19
    }
}

fn program::{closure#3}(_1: &[closure@src/parser.rs:79:26: 82:11]) -> MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]> {
    let mut _0: peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>; // return place in scope 0 at src/parser.rs:79:29: 79:29
    let mut _2: [closure@src/parser.rs:79:37: 82:10]; // in scope 0 at src/parser.rs:79:37: 82:10

    bb0: {
        StorageLive(_2);                 // scope 0 at src/parser.rs:79:37: 82:10
        _0 = peruse::slice_parsers::matcher::<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>(move _2) -> bb1; // scope 0 at src/parser.rs:79:29: 82:11
                                         // mir::Constant
                                         // + span: src/parser.rs:79:29: 79:36
                                         // + literal: Const { ty: fn([closure@src/parser.rs:79:37: 82:10]) -> peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]> {peruse::slice_parsers::matcher::<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at src/parser.rs:82:10: 82:11
        return;                          // scope 0 at src/parser.rs:82:11: 82:11
    }
}

fn grammar::<impl at src/grammar.rs:27:10: 27:15>::fmt(_1: &grammar::MultTerm, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/grammar.rs:27:10: 27:15
    debug f => _2;                       // in scope 0 at src/grammar.rs:27:10: 27:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/grammar.rs:27:10: 27:15
    let _3: &grammar::MultOp;            // in scope 0 at src/grammar.rs:29:21: 29:31
    let _4: &grammar::Expr;              // in scope 0 at src/grammar.rs:29:33: 29:41
    let mut _6: std::fmt::DebugTuple;    // in scope 0 at src/grammar.rs:27:10: 27:15
    let mut _7: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:27:10: 27:15
    let mut _8: &str;                    // in scope 0 at src/grammar.rs:27:10: 27:15
    let _9: &str;                        // in scope 0 at src/grammar.rs:27:10: 27:15
    let mut _10: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:27:10: 27:15
    let mut _11: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:27:10: 27:15
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:29:21: 29:31
    let mut _13: &&grammar::MultOp;      // in scope 0 at src/grammar.rs:29:21: 29:31
    let _14: &&grammar::MultOp;          // in scope 0 at src/grammar.rs:29:21: 29:31
    let _15: &grammar::MultOp;           // in scope 0 at src/grammar.rs:29:21: 29:31
    let mut _16: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:27:10: 27:15
    let mut _17: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:27:10: 27:15
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:29:33: 29:41
    let mut _19: &&grammar::Expr;        // in scope 0 at src/grammar.rs:29:33: 29:41
    let _20: &&grammar::Expr;            // in scope 0 at src/grammar.rs:29:33: 29:41
    let _21: &grammar::Expr;             // in scope 0 at src/grammar.rs:29:33: 29:41
    let mut _22: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:27:10: 27:15
    scope 1 {
        debug __self_0_0 => _3;          // in scope 1 at src/grammar.rs:29:21: 29:31
        debug __self_0_1 => _4;          // in scope 1 at src/grammar.rs:29:33: 29:41
        let _5: &mut std::fmt::DebugTuple; // in scope 1 at src/grammar.rs:27:10: 27:15
        scope 2 {
            debug debug_trait_builder => _5; // in scope 2 at src/grammar.rs:27:10: 27:15
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:29:21: 29:31
        _3 = &((*_1).0: grammar::MultOp); // scope 0 at src/grammar.rs:29:21: 29:31
        StorageLive(_4);                 // scope 0 at src/grammar.rs:29:33: 29:41
        _4 = &((*_1).1: grammar::Expr);  // scope 0 at src/grammar.rs:29:33: 29:41
        StorageLive(_5);                 // scope 1 at src/grammar.rs:27:10: 27:15
        StorageLive(_6);                 // scope 1 at src/grammar.rs:27:10: 27:15
        StorageLive(_7);                 // scope 1 at src/grammar.rs:27:10: 27:15
        _7 = &mut (*_2);                 // scope 1 at src/grammar.rs:27:10: 27:15
        StorageLive(_8);                 // scope 1 at src/grammar.rs:27:10: 27:15
        StorageLive(_9);                 // scope 1 at src/grammar.rs:27:10: 27:15
        _9 = const "MultTerm";           // scope 1 at src/grammar.rs:27:10: 27:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 117, 108, 116, 84, 101, 114, 109], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:27:10: 27:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 117, 108, 116, 84, 101, 114, 109], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
        _8 = _9;                         // scope 1 at src/grammar.rs:27:10: 27:15
        _6 = Formatter::debug_tuple(move _7, move _8) -> bb1; // scope 1 at src/grammar.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:27:10: 27:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_8);                 // scope 1 at src/grammar.rs:27:14: 27:15
        StorageDead(_7);                 // scope 1 at src/grammar.rs:27:14: 27:15
        _5 = &mut _6;                    // scope 1 at src/grammar.rs:27:10: 27:15
        StorageDead(_9);                 // scope 1 at src/grammar.rs:27:14: 27:15
        StorageLive(_10);                // scope 2 at src/grammar.rs:27:10: 27:15
        StorageLive(_11);                // scope 2 at src/grammar.rs:27:10: 27:15
        _11 = &mut (*_5);                // scope 2 at src/grammar.rs:27:10: 27:15
        StorageLive(_12);                // scope 2 at src/grammar.rs:29:21: 29:31
        StorageLive(_13);                // scope 2 at src/grammar.rs:29:21: 29:31
        StorageLive(_14);                // scope 2 at src/grammar.rs:29:21: 29:31
        StorageLive(_15);                // scope 2 at src/grammar.rs:29:21: 29:31
        _15 = _3;                        // scope 2 at src/grammar.rs:29:21: 29:31
        _14 = &_15;                      // scope 2 at src/grammar.rs:29:21: 29:31
        _13 = _14;                       // scope 2 at src/grammar.rs:29:21: 29:31
        _12 = move _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at src/grammar.rs:29:21: 29:31
        StorageDead(_13);                // scope 2 at src/grammar.rs:29:30: 29:31
        _10 = DebugTuple::field(move _11, move _12) -> bb2; // scope 2 at src/grammar.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:27:10: 27:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_12);                // scope 2 at src/grammar.rs:27:14: 27:15
        StorageDead(_11);                // scope 2 at src/grammar.rs:27:14: 27:15
        StorageDead(_15);                // scope 2 at src/grammar.rs:27:14: 27:15
        StorageDead(_14);                // scope 2 at src/grammar.rs:27:14: 27:15
        StorageDead(_10);                // scope 2 at src/grammar.rs:27:14: 27:15
        StorageLive(_16);                // scope 3 at src/grammar.rs:27:10: 27:15
        StorageLive(_17);                // scope 3 at src/grammar.rs:27:10: 27:15
        _17 = &mut (*_5);                // scope 3 at src/grammar.rs:27:10: 27:15
        StorageLive(_18);                // scope 3 at src/grammar.rs:29:33: 29:41
        StorageLive(_19);                // scope 3 at src/grammar.rs:29:33: 29:41
        StorageLive(_20);                // scope 3 at src/grammar.rs:29:33: 29:41
        StorageLive(_21);                // scope 3 at src/grammar.rs:29:33: 29:41
        _21 = _4;                        // scope 3 at src/grammar.rs:29:33: 29:41
        _20 = &_21;                      // scope 3 at src/grammar.rs:29:33: 29:41
        _19 = _20;                       // scope 3 at src/grammar.rs:29:33: 29:41
        _18 = move _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at src/grammar.rs:29:33: 29:41
        StorageDead(_19);                // scope 3 at src/grammar.rs:29:40: 29:41
        _16 = DebugTuple::field(move _17, move _18) -> bb3; // scope 3 at src/grammar.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:27:10: 27:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_18);                // scope 3 at src/grammar.rs:27:14: 27:15
        StorageDead(_17);                // scope 3 at src/grammar.rs:27:14: 27:15
        StorageDead(_21);                // scope 3 at src/grammar.rs:27:14: 27:15
        StorageDead(_20);                // scope 3 at src/grammar.rs:27:14: 27:15
        StorageDead(_16);                // scope 3 at src/grammar.rs:27:14: 27:15
        StorageLive(_22);                // scope 4 at src/grammar.rs:27:10: 27:15
        _22 = &mut (*_5);                // scope 4 at src/grammar.rs:27:10: 27:15
        _0 = DebugTuple::finish(move _22) -> bb4; // scope 4 at src/grammar.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:27:10: 27:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_22);                // scope 4 at src/grammar.rs:27:14: 27:15
        StorageDead(_6);                 // scope 1 at src/grammar.rs:27:14: 27:15
        StorageDead(_5);                 // scope 1 at src/grammar.rs:27:14: 27:15
        StorageDead(_4);                 // scope 0 at src/grammar.rs:27:14: 27:15
        StorageDead(_3);                 // scope 0 at src/grammar.rs:27:14: 27:15
        return;                          // scope 0 at src/grammar.rs:27:15: 27:15
    }
}

fn expression::{closure#3}(_1: &[closure@src/parser.rs:27:29: 31:10], _2: grammar_lexer::Token) -> Option<grammar::AddOp> {
    debug token => _2;                   // in scope 0 at src/parser.rs:27:30: 27:35
    let mut _0: std::option::Option<grammar::AddOp>; // return place in scope 0 at src/parser.rs:27:37: 27:37
    let mut _3: isize;                   // in scope 0 at src/parser.rs:28:13: 28:28

    bb0: {
        _3 = discriminant(_2);           // scope 0 at src/parser.rs:27:43: 27:48
        switchInt(move _3) -> [3_isize: bb2, 4_isize: bb3, otherwise: bb1]; // scope 0 at src/parser.rs:27:37: 27:48
    }

    bb1: {
        discriminant(_0) = 0;            // scope 0 at src/parser.rs:30:18: 30:22
        goto -> bb4;                     // scope 0 at src/parser.rs:30:18: 30:22
    }

    bb2: {
        ((_0 as Some).0: grammar::AddOp) = const grammar::AddOp::Add; // scope 0 at src/parser.rs:28:36: 28:52
                                         // ty::Const
                                         // + ty: grammar::AddOp
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: src/parser.rs:28:36: 28:52
                                         // + literal: Const { ty: grammar::AddOp, val: Value(Scalar(0x00)) }
        discriminant(_0) = 1;            // scope 0 at src/parser.rs:28:36: 28:52
        goto -> bb4;                     // scope 0 at src/parser.rs:28:51: 28:52
    }

    bb3: {
        ((_0 as Some).0: grammar::AddOp) = const grammar::AddOp::Subtract; // scope 0 at src/parser.rs:29:36: 29:57
                                         // ty::Const
                                         // + ty: grammar::AddOp
                                         // + val: Value(Scalar(0x01))
                                         // mir::Constant
                                         // + span: src/parser.rs:29:36: 29:57
                                         // + literal: Const { ty: grammar::AddOp, val: Value(Scalar(0x01)) }
        discriminant(_0) = 1;            // scope 0 at src/parser.rs:29:36: 29:57
        goto -> bb4;                     // scope 0 at src/parser.rs:29:56: 29:57
    }

    bb4: {
        drop(_2) -> bb5;                 // scope 0 at src/parser.rs:31:9: 31:10
    }

    bb5: {
        return;                          // scope 0 at src/parser.rs:31:10: 31:10
    }
}

fn grammar::Statement::While(_1: grammar::Expr, _2: grammar::Comparator, _3: grammar::Expr, _4: grammar::Block) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/grammar.rs:55:3: 55:39

    bb0: {
        ((_0 as While).0: grammar::Expr) = move _1; // scope 0 at src/grammar.rs:55:3: 55:39
        ((_0 as While).1: grammar::Comparator) = move _2; // scope 0 at src/grammar.rs:55:3: 55:39
        ((_0 as While).2: grammar::Expr) = move _3; // scope 0 at src/grammar.rs:55:3: 55:39
        ((_0 as While).3: grammar::Block) = move _4; // scope 0 at src/grammar.rs:55:3: 55:39
        discriminant(_0) = 3;            // scope 0 at src/grammar.rs:55:3: 55:39
        return;                          // scope 0 at src/grammar.rs:55:3: 55:39
    }
}

// MIR FOR CTFE
fn grammar::Statement::While(_1: grammar::Expr, _2: grammar::Comparator, _3: grammar::Expr, _4: grammar::Block) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/grammar.rs:55:3: 55:39

    bb0: {
        ((_0 as While).0: grammar::Expr) = move _1; // scope 0 at src/grammar.rs:55:3: 55:39
        ((_0 as While).1: grammar::Comparator) = move _2; // scope 0 at src/grammar.rs:55:3: 55:39
        ((_0 as While).2: grammar::Expr) = move _3; // scope 0 at src/grammar.rs:55:3: 55:39
        ((_0 as While).3: grammar::Block) = move _4; // scope 0 at src/grammar.rs:55:3: 55:39
        discriminant(_0) = 3;            // scope 0 at src/grammar.rs:55:3: 55:39
        return;                          // scope 0 at src/grammar.rs:55:3: 55:39
    }
}

fn program() -> Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>> {
    let mut _0: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>>; // return place in scope 0 at src/parser.rs:7:21: 7:52
    let mut _1: std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>>; // in scope 0 at src/parser.rs:142:9: 142:47
    let _2: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; // in scope 0 at src/parser.rs:68:9: 68:19
    let _3: peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>; // in scope 0 at src/parser.rs:69:13: 69:19
    let mut _4: [closure@src/parser.rs:69:30: 72:10]; // in scope 0 at src/parser.rs:69:30: 72:10
    let mut _5: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>>, grammar::Statement>; // in scope 0 at src/parser.rs:73:15: 76:67
    let mut _6: &peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>>; // in scope 0 at src/parser.rs:73:15: 75:46
    let _7: peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>>; // in scope 0 at src/parser.rs:73:15: 75:46
    let mut _8: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>; // in scope 0 at src/parser.rs:73:15: 74:40
    let _9: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>; // in scope 0 at src/parser.rs:73:15: 74:40
    let mut _10: &peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>; // in scope 0 at src/parser.rs:73:15: 73:21
    let mut _11: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:74:21: 74:39
    let mut _12: grammar_lexer::Token;   // in scope 0 at src/parser.rs:74:25: 74:38
    let mut _13: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>; // in scope 0 at src/parser.rs:75:19: 75:45
    let mut _14: [closure@src/parser.rs:75:29: 75:44]; // in scope 0 at src/parser.rs:75:29: 75:44
    let mut _15: [closure@src/parser.rs:76:18: 76:66]; // in scope 0 at src/parser.rs:76:18: 76:66
    let mut _19: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>; // in scope 0 at src/parser.rs:118:21: 124:44
    let _20: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>; // in scope 0 at src/parser.rs:118:21: 124:44
    let mut _21: &peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>; // in scope 0 at src/parser.rs:118:21: 123:38
    let _22: peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>; // in scope 0 at src/parser.rs:118:21: 123:38
    let mut _23: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>; // in scope 0 at src/parser.rs:118:21: 122:43
    let _24: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>; // in scope 0 at src/parser.rs:118:21: 122:43
    let mut _25: &peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>; // in scope 0 at src/parser.rs:118:21: 121:41
    let _26: peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>; // in scope 0 at src/parser.rs:118:21: 121:41
    let mut _27: &peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>; // in scope 0 at src/parser.rs:118:21: 120:32
    let _28: peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>; // in scope 0 at src/parser.rs:118:21: 120:32
    let mut _29: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>; // in scope 0 at src/parser.rs:118:21: 119:43
    let _30: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>; // in scope 0 at src/parser.rs:118:21: 119:43
    let mut _31: &peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:118:21: 118:45
    let _32: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:118:21: 118:45
    let mut _33: grammar_lexer::Token;   // in scope 0 at src/parser.rs:118:25: 118:44
    let mut _34: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>; // in scope 0 at src/parser.rs:119:21: 119:42
    let mut _35: peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>; // in scope 0 at src/parser.rs:120:19: 120:31
    let mut _36: &[closure@src/parser.rs:79:26: 82:11]; // in scope 0 at src/parser.rs:120:19: 120:29
    let mut _37: ();                     // in scope 0 at src/parser.rs:120:19: 120:31
    let mut _38: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>; // in scope 0 at src/parser.rs:121:19: 121:40
    let mut _39: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:122:21: 122:42
    let mut _40: grammar_lexer::Token;   // in scope 0 at src/parser.rs:122:25: 122:41
    let mut _41: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>; // in scope 0 at src/parser.rs:123:19: 123:37
    let mut _42: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:124:21: 124:43
    let mut _43: grammar_lexer::Token;   // in scope 0 at src/parser.rs:124:25: 124:42
    let mut _44: [closure@src/parser.rs:125:18: 125:77]; // in scope 0 at src/parser.rs:125:18: 125:77
    let mut _45: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, grammar::Statement>; // in scope 0 at src/parser.rs:126:19: 126:20
    let mut _48: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)>; // in scope 0 at src/parser.rs:130:21: 134:44
    let _49: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)>; // in scope 0 at src/parser.rs:130:21: 134:44
    let mut _50: &peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>; // in scope 0 at src/parser.rs:130:21: 133:38
    let _51: peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>; // in scope 0 at src/parser.rs:130:21: 133:38
    let mut _52: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>; // in scope 0 at src/parser.rs:130:21: 132:43
    let _53: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>; // in scope 0 at src/parser.rs:130:21: 132:43
    let mut _54: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>; // in scope 0 at src/parser.rs:130:21: 131:43
    let _55: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>; // in scope 0 at src/parser.rs:130:21: 131:43
    let mut _56: &peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:130:21: 130:44
    let _57: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:130:21: 130:44
    let mut _58: grammar_lexer::Token;   // in scope 0 at src/parser.rs:130:25: 130:43
    let mut _59: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>; // in scope 0 at src/parser.rs:131:21: 131:42
    let mut _60: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:132:21: 132:42
    let mut _61: grammar_lexer::Token;   // in scope 0 at src/parser.rs:132:25: 132:41
    let mut _62: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>; // in scope 0 at src/parser.rs:133:19: 133:37
    let mut _63: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:134:21: 134:43
    let mut _64: grammar_lexer::Token;   // in scope 0 at src/parser.rs:134:25: 134:42
    let mut _65: [closure@src/parser.rs:135:18: 135:56]; // in scope 0 at src/parser.rs:135:18: 135:56
    let mut _66: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)>, grammar::Statement>; // in scope 0 at src/parser.rs:136:19: 136:20
    let mut _68: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, grammar::Expr>, grammar::Statement>; // in scope 0 at src/parser.rs:138:28: 138:114
    let mut _69: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, grammar::Expr>; // in scope 0 at src/parser.rs:138:28: 138:84
    let _70: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, grammar::Expr>; // in scope 0 at src/parser.rs:138:28: 138:84
    let mut _71: &peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:138:28: 138:49
    let _72: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:138:28: 138:49
    let mut _73: grammar_lexer::Token;   // in scope 0 at src/parser.rs:138:32: 138:48
    let mut _74: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>; // in scope 0 at src/parser.rs:138:57: 138:83
    let mut _75: [closure@src/parser.rs:138:67: 138:82]; // in scope 0 at src/parser.rs:138:67: 138:82
    let mut _76: [closure@src/parser.rs:138:89: 138:113]; // in scope 0 at src/parser.rs:138:89: 138:113
    let mut _78: &peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>; // in scope 0 at src/parser.rs:140:26: 140:141
    let _79: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>; // in scope 0 at src/parser.rs:140:26: 140:141
    let mut _80: &peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>; // in scope 0 at src/parser.rs:140:26: 140:113
    let _81: peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>; // in scope 0 at src/parser.rs:140:26: 140:113
    let mut _82: std::vec::Vec<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:66
    let mut _83: std::boxed::Box<[peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>]>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
    let mut _84: std::boxed::Box<[peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; 5]>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
    let mut _85: std::boxed::Box<[peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; 5]>; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
    let mut _86: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; // in scope 0 at src/parser.rs:140:38: 140:48
    let mut _87: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; // in scope 0 at src/parser.rs:140:50: 140:56
    let mut _88: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; // in scope 0 at src/parser.rs:140:58: 140:88
    let mut _89: peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, [closure@src/parser.rs:140:74: 140:86]>; // in scope 0 at src/parser.rs:140:64: 140:87
    let mut _90: [closure@src/parser.rs:140:74: 140:86]; // in scope 0 at src/parser.rs:140:74: 140:86
    let mut _91: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; // in scope 0 at src/parser.rs:140:90: 140:100
    let mut _92: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; // in scope 0 at src/parser.rs:140:102: 140:111
    let mut _93: peruse::slice_parsers::LiteralParser<grammar_lexer::Token>; // in scope 0 at src/parser.rs:140:121: 140:140
    let mut _94: grammar_lexer::Token;   // in scope 0 at src/parser.rs:140:125: 140:139
    let mut _95: std::boxed::Box<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>>, grammar::Block>>; // in scope 0 at src/parser.rs:142:9: 142:47
    let mut _96: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>>, grammar::Block>; // in scope 0 at src/parser.rs:142:18: 142:46
    let mut _97: &peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>>; // in scope 0 at src/parser.rs:142:18: 142:28
    let mut _98: [closure@src/parser.rs:142:33: 142:45]; // in scope 0 at src/parser.rs:142:33: 142:45
    let mut _99: bool;                   // in scope 0 at src/parser.rs:143:5: 143:6
    let mut _100: bool;                  // in scope 0 at src/parser.rs:143:5: 143:6
    let mut _101: bool;                  // in scope 0 at src/parser.rs:137:9: 137:10
    let mut _102: bool;                  // in scope 0 at src/parser.rs:143:5: 143:6
    let mut _103: bool;                  // in scope 0 at src/parser.rs:127:9: 127:10
    let mut _104: bool;                  // in scope 0 at src/parser.rs:143:5: 143:6
    let mut _105: ();                    // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    scope 1 {
        debug assignment => _2;          // in scope 1 at src/parser.rs:68:9: 68:19
        let _16: [closure@src/parser.rs:79:26: 82:11]; // in scope 1 at src/parser.rs:79:13: 79:23
        scope 3 {
            debug comparator => _16;     // in scope 3 at src/parser.rs:79:13: 79:23
            let _17: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; // in scope 3 at src/parser.rs:117:13: 117:23
            let _18: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, grammar::Statement>; // in scope 3 at src/parser.rs:118:17: 118:18
            scope 4 {
                debug while_stmt => _17; // in scope 4 at src/parser.rs:117:13: 117:23
                let _46: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; // in scope 4 at src/parser.rs:129:13: 129:22
                let _47: peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)>, grammar::Statement>; // in scope 4 at src/parser.rs:130:17: 130:18
                scope 6 {
                    debug loop_stmt => _46; // in scope 6 at src/parser.rs:129:13: 129:22
                    let _67: peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; // in scope 6 at src/parser.rs:138:13: 138:19
                    scope 8 {
                        debug output => _67; // in scope 8 at src/parser.rs:138:13: 138:19
                        let _77: peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>>; // in scope 8 at src/parser.rs:140:13: 140:23
                        scope 9 {
                            debug statements => _77; // in scope 9 at src/parser.rs:140:13: 140:23
                        }
                    }
                }
                scope 7 {
                    debug p => _47;      // in scope 7 at src/parser.rs:130:17: 130:18
                }
            }
            scope 5 {
                debug p => _18;          // in scope 5 at src/parser.rs:118:17: 118:18
            }
        }
    }
    scope 2 {
        debug target => _3;              // in scope 2 at src/parser.rs:69:13: 69:19
    }

    bb0: {
        _103 = const false;              // scope 0 at src/parser.rs:142:9: 142:47
        _101 = const false;              // scope 0 at src/parser.rs:142:9: 142:47
        _104 = const false;              // scope 0 at src/parser.rs:142:9: 142:47
        _102 = const false;              // scope 0 at src/parser.rs:142:9: 142:47
        _100 = const false;              // scope 0 at src/parser.rs:142:9: 142:47
        _99 = const false;               // scope 0 at src/parser.rs:142:9: 142:47
        StorageLive(_1);                 // scope 0 at src/parser.rs:142:9: 142:47
        StorageLive(_2);                 // scope 0 at src/parser.rs:68:9: 68:19
        StorageLive(_3);                 // scope 0 at src/parser.rs:69:13: 69:19
        StorageLive(_4);                 // scope 0 at src/parser.rs:69:30: 72:10
        _3 = peruse::slice_parsers::matcher::<grammar_lexer::Token, String, [closure@src/parser.rs:69:30: 72:10]>(move _4) -> bb1; // scope 0 at src/parser.rs:69:22: 72:11
                                         // mir::Constant
                                         // + span: src/parser.rs:69:22: 69:29
                                         // + literal: Const { ty: fn([closure@src/parser.rs:69:30: 72:10]) -> peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]> {peruse::slice_parsers::matcher::<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at src/parser.rs:72:10: 72:11
        StorageLive(_5);                 // scope 2 at src/parser.rs:73:15: 76:67
        StorageLive(_6);                 // scope 2 at src/parser.rs:73:15: 75:46
        StorageLive(_7);                 // scope 2 at src/parser.rs:73:15: 75:46
        StorageLive(_8);                 // scope 2 at src/parser.rs:73:15: 74:40
        StorageLive(_9);                 // scope 2 at src/parser.rs:73:15: 74:40
        StorageLive(_10);                // scope 2 at src/parser.rs:73:15: 73:21
        _10 = &_3;                       // scope 2 at src/parser.rs:73:15: 73:21
        StorageLive(_11);                // scope 2 at src/parser.rs:74:21: 74:39
        StorageLive(_12);                // scope 2 at src/parser.rs:74:25: 74:38
        discriminant(_12) = 0;           // scope 2 at src/parser.rs:74:25: 74:38
        _11 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _12) -> [return: bb2, unwind: bb104]; // scope 2 at src/parser.rs:74:21: 74:39
                                         // mir::Constant
                                         // + span: src/parser.rs:74:21: 74:24
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_12);                // scope 2 at src/parser.rs:74:38: 74:39
        _9 = <MatchParser<grammar_lexer::Token, String, [closure@src/parser.rs:69:30: 72:10]> as peruse::parsers::ParserCombinator>::then_l::<LiteralParser<grammar_lexer::Token>>(move _10, move _11) -> [return: bb3, unwind: bb104]; // scope 2 at src/parser.rs:73:15: 74:40
                                         // mir::Constant
                                         // + span: src/parser.rs:74:14: 74:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>) -> peruse::parsers::MapParser<<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, <peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]> as peruse::parsers::Parser>::O> {<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]> as peruse::parsers::ParserCombinator>::then_l::<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _8 = &_9;                        // scope 2 at src/parser.rs:73:15: 74:40
        StorageDead(_11);                // scope 2 at src/parser.rs:74:39: 74:40
        StorageDead(_10);                // scope 2 at src/parser.rs:74:39: 74:40
        StorageLive(_13);                // scope 2 at src/parser.rs:75:19: 75:45
        StorageLive(_14);                // scope 2 at src/parser.rs:75:29: 75:44
        _13 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>(move _14) -> [return: bb4, unwind: bb102]; // scope 2 at src/parser.rs:75:19: 75:45
                                         // mir::Constant
                                         // + span: src/parser.rs:75:19: 75:28
                                         // + literal: Const { ty: fn([closure@src/parser.rs:75:29: 75:44]) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_14);                // scope 2 at src/parser.rs:75:44: 75:45
        _7 = <MapParser<[grammar_lexer::Token], ChainedParser<MatchParser<grammar_lexer::Token, String, [closure@src/parser.rs:69:30: 72:10]>, LiteralParser<grammar_lexer::Token>>, String> as peruse::parsers::ParserCombinator>::then::<RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>>(move _8, move _13) -> [return: bb5, unwind: bb102]; // scope 2 at src/parser.rs:73:15: 75:46
                                         // mir::Constant
                                         // + span: src/parser.rs:75:14: 75:18
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>) -> peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String> as peruse::parsers::ParserCombinator>::then::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _6 = &_7;                        // scope 2 at src/parser.rs:73:15: 75:46
        StorageDead(_13);                // scope 2 at src/parser.rs:75:45: 75:46
        StorageDead(_8);                 // scope 2 at src/parser.rs:75:45: 75:46
        StorageLive(_15);                // scope 2 at src/parser.rs:76:18: 76:66
        _5 = <ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<MatchParser<grammar_lexer::Token, String, [closure@src/parser.rs:69:30: 72:10]>, LiteralParser<grammar_lexer::Token>>, String>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>> as peruse::parsers::ParserCombinator>::map::<grammar::Statement, [closure@src/parser.rs:76:18: 76:66]>(move _6, move _15) -> [return: bb6, unwind: bb100]; // scope 2 at src/parser.rs:73:15: 76:67
                                         // mir::Constant
                                         // + span: src/parser.rs:76:14: 76:17
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>>, [closure@src/parser.rs:76:18: 76:66]) -> peruse::parsers::MapParser<<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>>, grammar::Statement> {<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>> as peruse::parsers::ParserCombinator>::map::<grammar::Statement, [closure@src/parser.rs:76:18: 76:66]>}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_15);                // scope 2 at src/parser.rs:76:66: 76:67
        StorageDead(_6);                 // scope 2 at src/parser.rs:76:66: 76:67
        _2 = peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Statement, MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<MatchParser<grammar_lexer::Token, String, [closure@src/parser.rs:69:30: 72:10]>, LiteralParser<grammar_lexer::Token>>, String>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>>, grammar::Statement>>(move _5) -> [return: bb7, unwind: bb100]; // scope 2 at src/parser.rs:73:9: 76:68
                                         // mir::Constant
                                         // + span: src/parser.rs:73:9: 73:14
                                         // + literal: Const { ty: fn(peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>>, grammar::Statement>) -> peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement> {peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Statement, peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::MatchParser<grammar_lexer::Token, std::string::String, [closure@src/parser.rs:69:30: 72:10]>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, std::string::String>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:75:29: 75:44]>>, grammar::Statement>>}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _104 = const true;               // scope 2 at src/parser.rs:76:67: 76:68
        StorageDead(_5);                 // scope 2 at src/parser.rs:76:67: 76:68
        drop(_3) -> [return: bb8, unwind: bb101]; // scope 0 at src/parser.rs:77:9: 77:10
    }

    bb8: {
        StorageDead(_3);                 // scope 0 at src/parser.rs:77:9: 77:10
        drop(_7) -> [return: bb9, unwind: bb99]; // scope 0 at src/parser.rs:77:10: 77:11
    }

    bb9: {
        drop(_9) -> [return: bb10, unwind: bb118]; // scope 0 at src/parser.rs:77:10: 77:11
    }

    bb10: {
        StorageDead(_9);                 // scope 0 at src/parser.rs:77:10: 77:11
        StorageDead(_7);                 // scope 0 at src/parser.rs:77:10: 77:11
        StorageLive(_16);                // scope 1 at src/parser.rs:79:13: 79:23
        StorageLive(_17);                // scope 3 at src/parser.rs:117:13: 117:23
        StorageLive(_18);                // scope 3 at src/parser.rs:118:17: 118:18
        StorageLive(_19);                // scope 3 at src/parser.rs:118:21: 124:44
        StorageLive(_20);                // scope 3 at src/parser.rs:118:21: 124:44
        StorageLive(_21);                // scope 3 at src/parser.rs:118:21: 123:38
        StorageLive(_22);                // scope 3 at src/parser.rs:118:21: 123:38
        StorageLive(_23);                // scope 3 at src/parser.rs:118:21: 122:43
        StorageLive(_24);                // scope 3 at src/parser.rs:118:21: 122:43
        StorageLive(_25);                // scope 3 at src/parser.rs:118:21: 121:41
        StorageLive(_26);                // scope 3 at src/parser.rs:118:21: 121:41
        StorageLive(_27);                // scope 3 at src/parser.rs:118:21: 120:32
        StorageLive(_28);                // scope 3 at src/parser.rs:118:21: 120:32
        StorageLive(_29);                // scope 3 at src/parser.rs:118:21: 119:43
        StorageLive(_30);                // scope 3 at src/parser.rs:118:21: 119:43
        StorageLive(_31);                // scope 3 at src/parser.rs:118:21: 118:45
        StorageLive(_32);                // scope 3 at src/parser.rs:118:21: 118:45
        StorageLive(_33);                // scope 3 at src/parser.rs:118:25: 118:44
        discriminant(_33) = 16;          // scope 3 at src/parser.rs:118:25: 118:44
        _32 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _33) -> [return: bb11, unwind: bb118]; // scope 3 at src/parser.rs:118:21: 118:45
                                         // mir::Constant
                                         // + span: src/parser.rs:118:21: 118:24
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _31 = &_32;                      // scope 3 at src/parser.rs:118:21: 118:45
        StorageDead(_33);                // scope 3 at src/parser.rs:118:44: 118:45
        StorageLive(_34);                // scope 3 at src/parser.rs:119:21: 119:42
        _34 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>(expression) -> [return: bb12, unwind: bb98]; // scope 3 at src/parser.rs:119:21: 119:42
                                         // mir::Constant
                                         // + span: src/parser.rs:119:21: 119:30
                                         // + literal: Const { ty: fn(fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: src/parser.rs:119:31: 119:41
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _30 = <LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>(move _31, move _34) -> [return: bb13, unwind: bb98]; // scope 3 at src/parser.rs:118:21: 119:43
                                         // mir::Constant
                                         // + span: src/parser.rs:119:14: 119:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>) -> peruse::parsers::MapParser<<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, <peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}> as peruse::parsers::Parser>::O> {<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _29 = &_30;                      // scope 3 at src/parser.rs:118:21: 119:43
        StorageDead(_34);                // scope 3 at src/parser.rs:119:42: 119:43
        StorageDead(_31);                // scope 3 at src/parser.rs:119:42: 119:43
        StorageLive(_35);                // scope 3 at src/parser.rs:120:19: 120:31
        StorageLive(_36);                // scope 3 at src/parser.rs:120:19: 120:29
        _36 = &_16;                      // scope 3 at src/parser.rs:120:19: 120:29
        StorageLive(_37);                // scope 3 at src/parser.rs:120:19: 120:31
        _35 = <[closure@src/parser.rs:79:26: 82:11] as Fn<()>>::call(move _36, move _37) -> [return: bb14, unwind: bb97]; // scope 3 at src/parser.rs:120:19: 120:31
                                         // mir::Constant
                                         // + span: src/parser.rs:120:19: 120:29
                                         // + literal: Const { ty: for<'r> extern "rust-call" fn(&'r [closure@src/parser.rs:79:26: 82:11], ()) -> <[closure@src/parser.rs:79:26: 82:11] as std::ops::FnOnce<()>>::Output {<[closure@src/parser.rs:79:26: 82:11] as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_37);                // scope 3 at src/parser.rs:120:30: 120:31
        StorageDead(_36);                // scope 3 at src/parser.rs:120:30: 120:31
        _28 = <MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr> as peruse::parsers::ParserCombinator>::then::<MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>(move _29, move _35) -> [return: bb15, unwind: bb97]; // scope 3 at src/parser.rs:118:21: 120:32
                                         // mir::Constant
                                         // + span: src/parser.rs:120:14: 120:18
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>) -> peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr> as peruse::parsers::ParserCombinator>::then::<peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _27 = &_28;                      // scope 3 at src/parser.rs:118:21: 120:32
        StorageDead(_35);                // scope 3 at src/parser.rs:120:31: 120:32
        StorageDead(_29);                // scope 3 at src/parser.rs:120:31: 120:32
        StorageLive(_38);                // scope 3 at src/parser.rs:121:19: 121:40
        _38 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>(expression) -> [return: bb16, unwind: bb96]; // scope 3 at src/parser.rs:121:19: 121:40
                                         // mir::Constant
                                         // + span: src/parser.rs:121:19: 121:28
                                         // + literal: Const { ty: fn(fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: src/parser.rs:121:29: 121:39
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _26 = <ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>> as peruse::parsers::ParserCombinator>::then::<RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>(move _27, move _38) -> [return: bb17, unwind: bb96]; // scope 3 at src/parser.rs:118:21: 121:41
                                         // mir::Constant
                                         // + span: src/parser.rs:121:14: 121:18
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>) -> peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>> {<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>> as peruse::parsers::ParserCombinator>::then::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        _25 = &_26;                      // scope 3 at src/parser.rs:118:21: 121:41
        StorageDead(_38);                // scope 3 at src/parser.rs:121:40: 121:41
        StorageDead(_27);                // scope 3 at src/parser.rs:121:40: 121:41
        StorageLive(_39);                // scope 3 at src/parser.rs:122:21: 122:42
        StorageLive(_40);                // scope 3 at src/parser.rs:122:25: 122:41
        discriminant(_40) = 12;          // scope 3 at src/parser.rs:122:25: 122:41
        _39 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _40) -> [return: bb18, unwind: bb95]; // scope 3 at src/parser.rs:122:21: 122:42
                                         // mir::Constant
                                         // + span: src/parser.rs:122:21: 122:24
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_40);                // scope 3 at src/parser.rs:122:41: 122:42
        _24 = <ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>> as peruse::parsers::ParserCombinator>::then_l::<LiteralParser<grammar_lexer::Token>>(move _25, move _39) -> [return: bb19, unwind: bb95]; // scope 3 at src/parser.rs:118:21: 122:43
                                         // mir::Constant
                                         // + span: src/parser.rs:122:14: 122:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>) -> peruse::parsers::MapParser<<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, <peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>> as peruse::parsers::Parser>::O> {<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>> as peruse::parsers::ParserCombinator>::then_l::<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        _23 = &_24;                      // scope 3 at src/parser.rs:118:21: 122:43
        StorageDead(_39);                // scope 3 at src/parser.rs:122:42: 122:43
        StorageDead(_25);                // scope 3 at src/parser.rs:122:42: 122:43
        StorageLive(_41);                // scope 3 at src/parser.rs:123:19: 123:37
        _41 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>(program) -> [return: bb20, unwind: bb94]; // scope 3 at src/parser.rs:123:19: 123:37
                                         // mir::Constant
                                         // + span: src/parser.rs:123:19: 123:28
                                         // + literal: Const { ty: fn(fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: src/parser.rs:123:29: 123:36
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _22 = <MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)> as peruse::parsers::ParserCombinator>::then::<RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>>(move _23, move _41) -> [return: bb21, unwind: bb94]; // scope 3 at src/parser.rs:118:21: 123:38
                                         // mir::Constant
                                         // + span: src/parser.rs:123:14: 123:18
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>) -> peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)> as peruse::parsers::ParserCombinator>::then::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _21 = &_22;                      // scope 3 at src/parser.rs:118:21: 123:38
        StorageDead(_41);                // scope 3 at src/parser.rs:123:37: 123:38
        StorageDead(_23);                // scope 3 at src/parser.rs:123:37: 123:38
        StorageLive(_42);                // scope 3 at src/parser.rs:124:21: 124:43
        StorageLive(_43);                // scope 3 at src/parser.rs:124:25: 124:42
        discriminant(_43) = 13;          // scope 3 at src/parser.rs:124:25: 124:42
        _42 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _43) -> [return: bb22, unwind: bb93]; // scope 3 at src/parser.rs:124:21: 124:43
                                         // mir::Constant
                                         // + span: src/parser.rs:124:21: 124:24
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_43);                // scope 3 at src/parser.rs:124:42: 124:43
        _20 = <ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>> as peruse::parsers::ParserCombinator>::then_l::<LiteralParser<grammar_lexer::Token>>(move _21, move _42) -> [return: bb23, unwind: bb93]; // scope 3 at src/parser.rs:118:21: 124:44
                                         // mir::Constant
                                         // + span: src/parser.rs:124:14: 124:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>) -> peruse::parsers::MapParser<<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, <peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> as peruse::parsers::Parser>::O> {<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> as peruse::parsers::ParserCombinator>::then_l::<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        _19 = &_20;                      // scope 3 at src/parser.rs:118:21: 124:44
        StorageDead(_42);                // scope 3 at src/parser.rs:124:43: 124:44
        StorageDead(_21);                // scope 3 at src/parser.rs:124:43: 124:44
        StorageLive(_44);                // scope 3 at src/parser.rs:125:18: 125:77
        _18 = <MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>>, LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)> as peruse::parsers::ParserCombinator>::map::<grammar::Statement, [closure@src/parser.rs:125:18: 125:77]>(move _19, move _44) -> [return: bb24, unwind: bb92]; // scope 3 at src/parser.rs:118:21: 125:78
                                         // mir::Constant
                                         // + span: src/parser.rs:125:14: 125:17
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, [closure@src/parser.rs:125:18: 125:77]) -> peruse::parsers::MapParser<<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)> as peruse::parsers::Parser>::I, peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, grammar::Statement> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)> as peruse::parsers::ParserCombinator>::map::<grammar::Statement, [closure@src/parser.rs:125:18: 125:77]>}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        _103 = const true;               // scope 3 at src/parser.rs:125:77: 125:78
        StorageDead(_44);                // scope 3 at src/parser.rs:125:77: 125:78
        StorageDead(_19);                // scope 3 at src/parser.rs:125:77: 125:78
        drop(_20) -> [return: bb25, unwind: bb86]; // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb25: {
        drop(_22) -> [return: bb26, unwind: bb87]; // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb26: {
        drop(_24) -> [return: bb27, unwind: bb88]; // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb27: {
        drop(_26) -> [return: bb28, unwind: bb89]; // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb28: {
        drop(_28) -> [return: bb29, unwind: bb90]; // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb29: {
        drop(_30) -> [return: bb30, unwind: bb91]; // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb30: {
        drop(_32) -> [return: bb31, unwind: bb116]; // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb31: {
        StorageDead(_32);                // scope 3 at src/parser.rs:125:78: 125:79
        StorageDead(_30);                // scope 3 at src/parser.rs:125:78: 125:79
        StorageDead(_28);                // scope 3 at src/parser.rs:125:78: 125:79
        StorageDead(_26);                // scope 3 at src/parser.rs:125:78: 125:79
        StorageDead(_24);                // scope 3 at src/parser.rs:125:78: 125:79
        StorageDead(_22);                // scope 3 at src/parser.rs:125:78: 125:79
        StorageDead(_20);                // scope 3 at src/parser.rs:125:78: 125:79
        StorageLive(_45);                // scope 5 at src/parser.rs:126:19: 126:20
        _103 = const false;              // scope 5 at src/parser.rs:126:19: 126:20
        _45 = move _18;                  // scope 5 at src/parser.rs:126:19: 126:20
        _17 = peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Statement, MapParser<[grammar_lexer::Token], MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr>, MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>>, LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, grammar::Statement>>(move _45) -> [return: bb32, unwind: bb116]; // scope 5 at src/parser.rs:126:13: 126:21
                                         // mir::Constant
                                         // + span: src/parser.rs:126:13: 126:18
                                         // + literal: Const { ty: fn(peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, grammar::Statement>) -> peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement> {peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Statement, peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::MatchParser<grammar_lexer::Token, grammar::Comparator, [closure@src/parser.rs:79:37: 82:10]>>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, ((grammar::Expr, grammar::Comparator), grammar::Expr)>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (((grammar::Expr, grammar::Comparator), grammar::Expr), grammar::Block)>, grammar::Statement>>}, val: Value(Scalar(<ZST>)) }
    }

    bb32: {
        _102 = const true;               // scope 5 at src/parser.rs:126:20: 126:21
        StorageDead(_45);                // scope 5 at src/parser.rs:126:20: 126:21
        _103 = const false;              // scope 3 at src/parser.rs:127:9: 127:10
        StorageDead(_18);                // scope 3 at src/parser.rs:127:9: 127:10
        StorageLive(_46);                // scope 4 at src/parser.rs:129:13: 129:22
        StorageLive(_47);                // scope 4 at src/parser.rs:130:17: 130:18
        StorageLive(_48);                // scope 4 at src/parser.rs:130:21: 134:44
        StorageLive(_49);                // scope 4 at src/parser.rs:130:21: 134:44
        StorageLive(_50);                // scope 4 at src/parser.rs:130:21: 133:38
        StorageLive(_51);                // scope 4 at src/parser.rs:130:21: 133:38
        StorageLive(_52);                // scope 4 at src/parser.rs:130:21: 132:43
        StorageLive(_53);                // scope 4 at src/parser.rs:130:21: 132:43
        StorageLive(_54);                // scope 4 at src/parser.rs:130:21: 131:43
        StorageLive(_55);                // scope 4 at src/parser.rs:130:21: 131:43
        StorageLive(_56);                // scope 4 at src/parser.rs:130:21: 130:44
        StorageLive(_57);                // scope 4 at src/parser.rs:130:21: 130:44
        StorageLive(_58);                // scope 4 at src/parser.rs:130:25: 130:43
        discriminant(_58) = 17;          // scope 4 at src/parser.rs:130:25: 130:43
        _57 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _58) -> [return: bb33, unwind: bb114]; // scope 4 at src/parser.rs:130:21: 130:44
                                         // mir::Constant
                                         // + span: src/parser.rs:130:21: 130:24
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb33: {
        _56 = &_57;                      // scope 4 at src/parser.rs:130:21: 130:44
        StorageDead(_58);                // scope 4 at src/parser.rs:130:43: 130:44
        StorageLive(_59);                // scope 4 at src/parser.rs:131:21: 131:42
        _59 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>(expression) -> [return: bb34, unwind: bb85]; // scope 4 at src/parser.rs:131:21: 131:42
                                         // mir::Constant
                                         // + span: src/parser.rs:131:21: 131:30
                                         // + literal: Const { ty: fn(fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: src/parser.rs:131:31: 131:41
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        _55 = <LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>(move _56, move _59) -> [return: bb35, unwind: bb85]; // scope 4 at src/parser.rs:130:21: 131:43
                                         // mir::Constant
                                         // + span: src/parser.rs:131:14: 131:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>) -> peruse::parsers::MapParser<<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, <peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}> as peruse::parsers::Parser>::O> {<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>}, val: Value(Scalar(<ZST>)) }
    }

    bb35: {
        _54 = &_55;                      // scope 4 at src/parser.rs:130:21: 131:43
        StorageDead(_59);                // scope 4 at src/parser.rs:131:42: 131:43
        StorageDead(_56);                // scope 4 at src/parser.rs:131:42: 131:43
        StorageLive(_60);                // scope 4 at src/parser.rs:132:21: 132:42
        StorageLive(_61);                // scope 4 at src/parser.rs:132:25: 132:41
        discriminant(_61) = 12;          // scope 4 at src/parser.rs:132:25: 132:41
        _60 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _61) -> [return: bb36, unwind: bb84]; // scope 4 at src/parser.rs:132:21: 132:42
                                         // mir::Constant
                                         // + span: src/parser.rs:132:21: 132:24
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb36: {
        StorageDead(_61);                // scope 4 at src/parser.rs:132:41: 132:42
        _53 = <MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr> as peruse::parsers::ParserCombinator>::then_l::<LiteralParser<grammar_lexer::Token>>(move _54, move _60) -> [return: bb37, unwind: bb84]; // scope 4 at src/parser.rs:130:21: 132:43
                                         // mir::Constant
                                         // + span: src/parser.rs:132:14: 132:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>) -> peruse::parsers::MapParser<<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, <peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr> as peruse::parsers::Parser>::O> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr> as peruse::parsers::ParserCombinator>::then_l::<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>}, val: Value(Scalar(<ZST>)) }
    }

    bb37: {
        _52 = &_53;                      // scope 4 at src/parser.rs:130:21: 132:43
        StorageDead(_60);                // scope 4 at src/parser.rs:132:42: 132:43
        StorageDead(_54);                // scope 4 at src/parser.rs:132:42: 132:43
        StorageLive(_62);                // scope 4 at src/parser.rs:133:19: 133:37
        _62 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>(program) -> [return: bb38, unwind: bb83]; // scope 4 at src/parser.rs:133:19: 133:37
                                         // mir::Constant
                                         // + span: src/parser.rs:133:19: 133:28
                                         // + literal: Const { ty: fn(fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: src/parser.rs:133:29: 133:36
                                         // + literal: Const { ty: fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}, val: Value(Scalar(<ZST>)) }
    }

    bb38: {
        _51 = <MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr> as peruse::parsers::ParserCombinator>::then::<RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>>(move _52, move _62) -> [return: bb39, unwind: bb83]; // scope 4 at src/parser.rs:130:21: 133:38
                                         // mir::Constant
                                         // + span: src/parser.rs:133:14: 133:18
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>) -> peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr> as peruse::parsers::ParserCombinator>::then::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>}, val: Value(Scalar(<ZST>)) }
    }

    bb39: {
        _50 = &_51;                      // scope 4 at src/parser.rs:130:21: 133:38
        StorageDead(_62);                // scope 4 at src/parser.rs:133:37: 133:38
        StorageDead(_52);                // scope 4 at src/parser.rs:133:37: 133:38
        StorageLive(_63);                // scope 4 at src/parser.rs:134:21: 134:43
        StorageLive(_64);                // scope 4 at src/parser.rs:134:25: 134:42
        discriminant(_64) = 13;          // scope 4 at src/parser.rs:134:25: 134:42
        _63 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _64) -> [return: bb40, unwind: bb82]; // scope 4 at src/parser.rs:134:21: 134:43
                                         // mir::Constant
                                         // + span: src/parser.rs:134:21: 134:24
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb40: {
        StorageDead(_64);                // scope 4 at src/parser.rs:134:42: 134:43
        _49 = <ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>> as peruse::parsers::ParserCombinator>::then_l::<LiteralParser<grammar_lexer::Token>>(move _50, move _63) -> [return: bb41, unwind: bb82]; // scope 4 at src/parser.rs:130:21: 134:44
                                         // mir::Constant
                                         // + span: src/parser.rs:134:14: 134:20
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>) -> peruse::parsers::MapParser<<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, <peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> as peruse::parsers::Parser>::O> {<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>> as peruse::parsers::ParserCombinator>::then_l::<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>}, val: Value(Scalar(<ZST>)) }
    }

    bb41: {
        _48 = &_49;                      // scope 4 at src/parser.rs:130:21: 134:44
        StorageDead(_63);                // scope 4 at src/parser.rs:134:43: 134:44
        StorageDead(_50);                // scope 4 at src/parser.rs:134:43: 134:44
        StorageLive(_65);                // scope 4 at src/parser.rs:135:18: 135:56
        _47 = <MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>>, LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)> as peruse::parsers::ParserCombinator>::map::<grammar::Statement, [closure@src/parser.rs:135:18: 135:56]>(move _48, move _65) -> [return: bb42, unwind: bb81]; // scope 4 at src/parser.rs:130:21: 135:57
                                         // mir::Constant
                                         // + span: src/parser.rs:135:14: 135:17
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)>, [closure@src/parser.rs:135:18: 135:56]) -> peruse::parsers::MapParser<<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)> as peruse::parsers::Parser>::I, peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)>, grammar::Statement> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)> as peruse::parsers::ParserCombinator>::map::<grammar::Statement, [closure@src/parser.rs:135:18: 135:56]>}, val: Value(Scalar(<ZST>)) }
    }

    bb42: {
        _101 = const true;               // scope 4 at src/parser.rs:135:56: 135:57
        StorageDead(_65);                // scope 4 at src/parser.rs:135:56: 135:57
        StorageDead(_48);                // scope 4 at src/parser.rs:135:56: 135:57
        drop(_49) -> [return: bb43, unwind: bb77]; // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb43: {
        drop(_51) -> [return: bb44, unwind: bb78]; // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb44: {
        drop(_53) -> [return: bb45, unwind: bb79]; // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb45: {
        drop(_55) -> [return: bb46, unwind: bb80]; // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb46: {
        drop(_57) -> [return: bb47, unwind: bb112]; // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb47: {
        StorageDead(_57);                // scope 4 at src/parser.rs:135:57: 135:58
        StorageDead(_55);                // scope 4 at src/parser.rs:135:57: 135:58
        StorageDead(_53);                // scope 4 at src/parser.rs:135:57: 135:58
        StorageDead(_51);                // scope 4 at src/parser.rs:135:57: 135:58
        StorageDead(_49);                // scope 4 at src/parser.rs:135:57: 135:58
        StorageLive(_66);                // scope 7 at src/parser.rs:136:19: 136:20
        _101 = const false;              // scope 7 at src/parser.rs:136:19: 136:20
        _66 = move _47;                  // scope 7 at src/parser.rs:136:19: 136:20
        _46 = peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Statement, MapParser<[grammar_lexer::Token], MapParser<[grammar_lexer::Token], ChainedParser<ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {expression}>>, grammar::Expr>, LiteralParser<grammar_lexer::Token>>, grammar::Expr>, RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {program}>>, LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)>, grammar::Statement>>(move _66) -> [return: bb48, unwind: bb112]; // scope 7 at src/parser.rs:136:13: 136:21
                                         // mir::Constant
                                         // + span: src/parser.rs:136:13: 136:18
                                         // + literal: Const { ty: fn(peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)>, grammar::Statement>) -> peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement> {peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Statement, peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Expr, I = [grammar_lexer::Token]> + 'static)> {parser::program::expression}>>, grammar::Expr>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Expr>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Block, fn() -> std::boxed::Box<(dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]> + 'static)> {parser::program}>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, (grammar::Expr, grammar::Block)>, grammar::Statement>>}, val: Value(Scalar(<ZST>)) }
    }

    bb48: {
        _100 = const true;               // scope 7 at src/parser.rs:136:20: 136:21
        StorageDead(_66);                // scope 7 at src/parser.rs:136:20: 136:21
        _101 = const false;              // scope 4 at src/parser.rs:137:9: 137:10
        StorageDead(_47);                // scope 4 at src/parser.rs:137:9: 137:10
        StorageLive(_67);                // scope 6 at src/parser.rs:138:13: 138:19
        StorageLive(_68);                // scope 6 at src/parser.rs:138:28: 138:114
        StorageLive(_69);                // scope 6 at src/parser.rs:138:28: 138:84
        StorageLive(_70);                // scope 6 at src/parser.rs:138:28: 138:84
        StorageLive(_71);                // scope 6 at src/parser.rs:138:28: 138:49
        StorageLive(_72);                // scope 6 at src/parser.rs:138:28: 138:49
        StorageLive(_73);                // scope 6 at src/parser.rs:138:32: 138:48
        discriminant(_73) = 8;           // scope 6 at src/parser.rs:138:32: 138:48
        _72 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _73) -> [return: bb49, unwind: bb110]; // scope 6 at src/parser.rs:138:28: 138:49
                                         // mir::Constant
                                         // + span: src/parser.rs:138:28: 138:31
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb49: {
        _71 = &_72;                      // scope 6 at src/parser.rs:138:28: 138:49
        StorageDead(_73);                // scope 6 at src/parser.rs:138:48: 138:49
        StorageLive(_74);                // scope 6 at src/parser.rs:138:57: 138:83
        StorageLive(_75);                // scope 6 at src/parser.rs:138:67: 138:82
        _74 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>(move _75) -> [return: bb50, unwind: bb76]; // scope 6 at src/parser.rs:138:57: 138:83
                                         // mir::Constant
                                         // + span: src/parser.rs:138:57: 138:66
                                         // + literal: Const { ty: fn([closure@src/parser.rs:138:67: 138:82]) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>}, val: Value(Scalar(<ZST>)) }
    }

    bb50: {
        StorageDead(_75);                // scope 6 at src/parser.rs:138:82: 138:83
        _70 = <LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>(move _71, move _74) -> [return: bb51, unwind: bb76]; // scope 6 at src/parser.rs:138:28: 138:84
                                         // mir::Constant
                                         // + span: src/parser.rs:138:50: 138:56
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>) -> peruse::parsers::MapParser<<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, <peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]> as peruse::parsers::Parser>::O> {<peruse::slice_parsers::LiteralParser<grammar_lexer::Token> as peruse::parsers::ParserCombinator>::then_r::<peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb51: {
        _69 = &_70;                      // scope 6 at src/parser.rs:138:28: 138:84
        StorageDead(_74);                // scope 6 at src/parser.rs:138:83: 138:84
        StorageDead(_71);                // scope 6 at src/parser.rs:138:83: 138:84
        StorageLive(_76);                // scope 6 at src/parser.rs:138:89: 138:113
        _68 = <MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, grammar::Expr> as peruse::parsers::ParserCombinator>::map::<grammar::Statement, [closure@src/parser.rs:138:89: 138:113]>(move _69, move _76) -> [return: bb52, unwind: bb75]; // scope 6 at src/parser.rs:138:28: 138:114
                                         // mir::Constant
                                         // + span: src/parser.rs:138:85: 138:88
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, grammar::Expr>, [closure@src/parser.rs:138:89: 138:113]) -> peruse::parsers::MapParser<<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, grammar::Expr> as peruse::parsers::Parser>::I, peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, grammar::Expr>, grammar::Statement> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, grammar::Expr> as peruse::parsers::ParserCombinator>::map::<grammar::Statement, [closure@src/parser.rs:138:89: 138:113]>}, val: Value(Scalar(<ZST>)) }
    }

    bb52: {
        StorageDead(_76);                // scope 6 at src/parser.rs:138:113: 138:114
        StorageDead(_69);                // scope 6 at src/parser.rs:138:113: 138:114
        _67 = peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Statement, MapParser<[grammar_lexer::Token], MapParser<[grammar_lexer::Token], ChainedParser<LiteralParser<grammar_lexer::Token>, RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, grammar::Expr>, grammar::Statement>>(move _68) -> [return: bb53, unwind: bb75]; // scope 6 at src/parser.rs:138:22: 138:115
                                         // mir::Constant
                                         // + span: src/parser.rs:138:22: 138:27
                                         // + literal: Const { ty: fn(peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, grammar::Expr>, grammar::Statement>) -> peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement> {peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Statement, peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Expr, [closure@src/parser.rs:138:67: 138:82]>>, grammar::Expr>, grammar::Statement>>}, val: Value(Scalar(<ZST>)) }
    }

    bb53: {
        _99 = const true;                // scope 6 at src/parser.rs:138:114: 138:115
        StorageDead(_68);                // scope 6 at src/parser.rs:138:114: 138:115
        drop(_70) -> [return: bb54, unwind: bb74]; // scope 6 at src/parser.rs:138:115: 138:116
    }

    bb54: {
        drop(_72) -> [return: bb55, unwind: bb108]; // scope 6 at src/parser.rs:138:115: 138:116
    }

    bb55: {
        StorageDead(_72);                // scope 6 at src/parser.rs:138:115: 138:116
        StorageDead(_70);                // scope 6 at src/parser.rs:138:115: 138:116
        StorageLive(_77);                // scope 8 at src/parser.rs:140:13: 140:23
        StorageLive(_78);                // scope 8 at src/parser.rs:140:26: 140:141
        StorageLive(_79);                // scope 8 at src/parser.rs:140:26: 140:141
        StorageLive(_80);                // scope 8 at src/parser.rs:140:26: 140:113
        StorageLive(_81);                // scope 8 at src/parser.rs:140:26: 140:113
        StorageLive(_82);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:66
        StorageLive(_83);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageLive(_84);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageLive(_85);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        _85 = Box([peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; 5]); // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageLive(_86);                // scope 8 at src/parser.rs:140:38: 140:48
        _104 = const false;              // scope 8 at src/parser.rs:140:38: 140:48
        _86 = move _2;                   // scope 8 at src/parser.rs:140:38: 140:48
        StorageLive(_87);                // scope 8 at src/parser.rs:140:50: 140:56
        _99 = const false;               // scope 8 at src/parser.rs:140:50: 140:56
        _87 = move _67;                  // scope 8 at src/parser.rs:140:50: 140:56
        StorageLive(_88);                // scope 8 at src/parser.rs:140:58: 140:88
        StorageLive(_89);                // scope 8 at src/parser.rs:140:64: 140:87
        StorageLive(_90);                // scope 8 at src/parser.rs:140:74: 140:86
        _89 = peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Statement, [closure@src/parser.rs:140:74: 140:86]>(move _90) -> [return: bb56, unwind: bb72]; // scope 8 at src/parser.rs:140:64: 140:87
                                         // mir::Constant
                                         // + span: src/parser.rs:140:64: 140:73
                                         // + literal: Const { ty: fn([closure@src/parser.rs:140:74: 140:86]) -> peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, [closure@src/parser.rs:140:74: 140:86]> {peruse::parsers::recursive::<[grammar_lexer::Token], grammar::Statement, [closure@src/parser.rs:140:74: 140:86]>}, val: Value(Scalar(<ZST>)) }
    }

    bb56: {
        StorageDead(_90);                // scope 8 at src/parser.rs:140:86: 140:87
        _88 = peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Statement, RecursiveParser<[grammar_lexer::Token], grammar::Statement, [closure@src/parser.rs:140:74: 140:86]>>(move _89) -> [return: bb57, unwind: bb72]; // scope 8 at src/parser.rs:140:58: 140:88
                                         // mir::Constant
                                         // + span: src/parser.rs:140:58: 140:63
                                         // + literal: Const { ty: fn(peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, [closure@src/parser.rs:140:74: 140:86]>) -> peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement> {peruse::parsers::boxed::<[grammar_lexer::Token], grammar::Statement, peruse::parsers::RecursiveParser<[grammar_lexer::Token], grammar::Statement, [closure@src/parser.rs:140:74: 140:86]>>}, val: Value(Scalar(<ZST>)) }
    }

    bb57: {
        StorageDead(_89);                // scope 8 at src/parser.rs:140:87: 140:88
        StorageLive(_91);                // scope 8 at src/parser.rs:140:90: 140:100
        _102 = const false;              // scope 8 at src/parser.rs:140:90: 140:100
        _91 = move _17;                  // scope 8 at src/parser.rs:140:90: 140:100
        StorageLive(_92);                // scope 8 at src/parser.rs:140:102: 140:111
        _100 = const false;              // scope 8 at src/parser.rs:140:102: 140:111
        _92 = move _46;                  // scope 8 at src/parser.rs:140:102: 140:111
        (*_85) = [move _86, move _87, move _88, move _91, move _92]; // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:56: 49:65
        StorageDead(_92);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_91);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_88);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_87);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_86);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        _84 = move _85;                  // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        _83 = move _84 as std::boxed::Box<[peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>]> (Pointer(Unsize)); // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:52: 49:65
        StorageDead(_85);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        StorageDead(_84);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
        _82 = slice::<impl [BoxedParser<[grammar_lexer::Token], grammar::Statement>]>::into_vec::<std::alloc::Global>(move _83) -> [return: bb58, unwind: bb108]; // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:66
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:36: 49:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::boxed::Box<[peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>]>) -> std::vec::Vec<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>> {std::slice::<impl [peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>]>::into_vec::<std::alloc::Global>}, val: Value(Scalar(<ZST>)) }
    }

    bb58: {
        StorageDead(_83);                // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:65: 49:66
        _81 = peruse::parsers::one_of::<BoxedParser<[grammar_lexer::Token], grammar::Statement>>(move _82) -> [return: bb59, unwind: bb108]; // scope 8 at src/parser.rs:140:26: 140:113
                                         // mir::Constant
                                         // + span: src/parser.rs:140:26: 140:32
                                         // + literal: Const { ty: fn(std::vec::Vec<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>) -> peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>> {peruse::parsers::one_of::<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>}, val: Value(Scalar(<ZST>)) }
    }

    bb59: {
        _80 = &_81;                      // scope 8 at src/parser.rs:140:26: 140:113
        StorageDead(_82);                // scope 8 at src/parser.rs:140:112: 140:113
        StorageLive(_93);                // scope 8 at src/parser.rs:140:121: 140:140
        StorageLive(_94);                // scope 8 at src/parser.rs:140:125: 140:139
        discriminant(_94) = 9;           // scope 8 at src/parser.rs:140:125: 140:139
        _93 = peruse::slice_parsers::lit::<grammar_lexer::Token>(move _94) -> [return: bb60, unwind: bb71]; // scope 8 at src/parser.rs:140:121: 140:140
                                         // mir::Constant
                                         // + span: src/parser.rs:140:121: 140:124
                                         // + literal: Const { ty: fn(grammar_lexer::Token) -> peruse::slice_parsers::LiteralParser<grammar_lexer::Token> {peruse::slice_parsers::lit::<grammar_lexer::Token>}, val: Value(Scalar(<ZST>)) }
    }

    bb60: {
        StorageDead(_94);                // scope 8 at src/parser.rs:140:139: 140:140
        _79 = <OneOfParser<BoxedParser<[grammar_lexer::Token], grammar::Statement>> as peruse::parsers::ParserCombinator>::then_l::<LiteralParser<grammar_lexer::Token>>(move _80, move _93) -> [return: bb61, unwind: bb71]; // scope 8 at src/parser.rs:140:26: 140:141
                                         // mir::Constant
                                         // + span: src/parser.rs:140:114: 140:120
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>) -> peruse::parsers::MapParser<<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>> as peruse::parsers::Parser>::I, peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, <peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>> as peruse::parsers::Parser>::O> {<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>> as peruse::parsers::ParserCombinator>::then_l::<peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>}, val: Value(Scalar(<ZST>)) }
    }

    bb61: {
        _78 = &_79;                      // scope 8 at src/parser.rs:140:26: 140:141
        StorageDead(_93);                // scope 8 at src/parser.rs:140:140: 140:141
        StorageDead(_80);                // scope 8 at src/parser.rs:140:140: 140:141
        _77 = <MapParser<[grammar_lexer::Token], ChainedParser<OneOfParser<BoxedParser<[grammar_lexer::Token], grammar::Statement>>, LiteralParser<grammar_lexer::Token>>, grammar::Statement> as peruse::parsers::ParserCombinator>::repeat(move _78) -> [return: bb62, unwind: bb70]; // scope 8 at src/parser.rs:140:26: 140:150
                                         // mir::Constant
                                         // + span: src/parser.rs:140:142: 140:148
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>) -> peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>> {<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement> as peruse::parsers::ParserCombinator>::repeat}, val: Value(Scalar(<ZST>)) }
    }

    bb62: {
        StorageDead(_78);                // scope 8 at src/parser.rs:140:149: 140:150
        drop(_79) -> [return: bb63, unwind: bb68]; // scope 8 at src/parser.rs:140:150: 140:151
    }

    bb63: {
        drop(_81) -> [return: bb64, unwind: bb69]; // scope 8 at src/parser.rs:140:150: 140:151
    }

    bb64: {
        StorageDead(_81);                // scope 8 at src/parser.rs:140:150: 140:151
        StorageDead(_79);                // scope 8 at src/parser.rs:140:150: 140:151
        StorageLive(_95);                // scope 9 at src/parser.rs:142:9: 142:47
        StorageLive(_96);                // scope 9 at src/parser.rs:142:18: 142:46
        StorageLive(_97);                // scope 9 at src/parser.rs:142:18: 142:28
        _97 = &_77;                      // scope 9 at src/parser.rs:142:18: 142:28
        StorageLive(_98);                // scope 9 at src/parser.rs:142:33: 142:45
        _96 = <RepeatParser<MapParser<[grammar_lexer::Token], ChainedParser<OneOfParser<BoxedParser<[grammar_lexer::Token], grammar::Statement>>, LiteralParser<grammar_lexer::Token>>, grammar::Statement>> as peruse::parsers::ParserCombinator>::map::<grammar::Block, [closure@src/parser.rs:142:33: 142:45]>(move _97, move _98) -> [return: bb65, unwind: bb69]; // scope 9 at src/parser.rs:142:18: 142:46
                                         // mir::Constant
                                         // + span: src/parser.rs:142:29: 142:32
                                         // + literal: Const { ty: for<'r> fn(&'r peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>>, [closure@src/parser.rs:142:33: 142:45]) -> peruse::parsers::MapParser<<peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>> as peruse::parsers::Parser>::I, peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>>, grammar::Block> {<peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>> as peruse::parsers::ParserCombinator>::map::<grammar::Block, [closure@src/parser.rs:142:33: 142:45]>}, val: Value(Scalar(<ZST>)) }
    }

    bb65: {
        StorageDead(_98);                // scope 9 at src/parser.rs:142:45: 142:46
        StorageDead(_97);                // scope 9 at src/parser.rs:142:45: 142:46
        _95 = Box::<MapParser<[grammar_lexer::Token], RepeatParser<MapParser<[grammar_lexer::Token], ChainedParser<OneOfParser<BoxedParser<[grammar_lexer::Token], grammar::Statement>>, LiteralParser<grammar_lexer::Token>>, grammar::Statement>>, grammar::Block>>::new(move _96) -> [return: bb66, unwind: bb69]; // scope 9 at src/parser.rs:142:9: 142:47
                                         // mir::Constant
                                         // + span: src/parser.rs:142:9: 142:17
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>>, grammar::Block>) -> std::boxed::Box<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>>, grammar::Block>> {std::boxed::Box::<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::RepeatParser<peruse::parsers::MapParser<[grammar_lexer::Token], peruse::parsers::ChainedParser<peruse::parsers::OneOfParser<peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>>, peruse::slice_parsers::LiteralParser<grammar_lexer::Token>>, grammar::Statement>>, grammar::Block>>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb66: {
        _1 = move _95 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 9 at src/parser.rs:142:9: 142:47
        StorageDead(_96);                // scope 9 at src/parser.rs:142:46: 142:47
        StorageDead(_95);                // scope 9 at src/parser.rs:142:46: 142:47
        drop(_77) -> [return: bb67, unwind: bb108]; // scope 8 at src/parser.rs:143:5: 143:6
    }

    bb67: {
        StorageDead(_77);                // scope 8 at src/parser.rs:143:5: 143:6
        _99 = const false;               // scope 6 at src/parser.rs:143:5: 143:6
        StorageDead(_67);                // scope 6 at src/parser.rs:143:5: 143:6
        _100 = const false;              // scope 4 at src/parser.rs:143:5: 143:6
        StorageDead(_46);                // scope 4 at src/parser.rs:143:5: 143:6
        _102 = const false;              // scope 3 at src/parser.rs:143:5: 143:6
        StorageDead(_17);                // scope 3 at src/parser.rs:143:5: 143:6
        StorageDead(_16);                // scope 1 at src/parser.rs:143:5: 143:6
        _104 = const false;              // scope 0 at src/parser.rs:143:5: 143:6
        StorageDead(_2);                 // scope 0 at src/parser.rs:143:5: 143:6
        _0 = move _1 as std::boxed::Box<dyn peruse::parsers::Parser<O = grammar::Block, I = [grammar_lexer::Token]>> (Pointer(Unsize)); // scope 0 at src/parser.rs:142:9: 142:47
        StorageDead(_1);                 // scope 0 at src/parser.rs:143:5: 143:6
        return;                          // scope 0 at src/parser.rs:143:6: 143:6
    }

    bb68 (cleanup): {
        drop(_81) -> bb69;               // scope 8 at src/parser.rs:140:150: 140:151
    }

    bb69 (cleanup): {
        drop(_77) -> bb108;              // scope 8 at src/parser.rs:143:5: 143:6
    }

    bb70 (cleanup): {
        drop(_79) -> bb71;               // scope 8 at src/parser.rs:140:150: 140:151
    }

    bb71 (cleanup): {
        drop(_81) -> bb108;              // scope 8 at src/parser.rs:140:150: 140:151
    }

    bb72 (cleanup): {
        drop(_87) -> bb73;               // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb73 (cleanup): {
        drop(_86) -> bb106;              // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
    }

    bb74 (cleanup): {
        drop(_72) -> bb108;              // scope 6 at src/parser.rs:138:115: 138:116
    }

    bb75 (cleanup): {
        drop(_70) -> bb76;               // scope 6 at src/parser.rs:138:115: 138:116
    }

    bb76 (cleanup): {
        drop(_72) -> bb110;              // scope 6 at src/parser.rs:138:115: 138:116
    }

    bb77 (cleanup): {
        drop(_51) -> bb78;               // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb78 (cleanup): {
        drop(_53) -> bb79;               // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb79 (cleanup): {
        drop(_55) -> bb80;               // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb80 (cleanup): {
        drop(_57) -> bb112;              // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb81 (cleanup): {
        drop(_49) -> bb82;               // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb82 (cleanup): {
        drop(_51) -> bb83;               // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb83 (cleanup): {
        drop(_53) -> bb84;               // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb84 (cleanup): {
        drop(_55) -> bb85;               // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb85 (cleanup): {
        drop(_57) -> bb114;              // scope 4 at src/parser.rs:135:57: 135:58
    }

    bb86 (cleanup): {
        drop(_22) -> bb87;               // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb87 (cleanup): {
        drop(_24) -> bb88;               // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb88 (cleanup): {
        drop(_26) -> bb89;               // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb89 (cleanup): {
        drop(_28) -> bb90;               // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb90 (cleanup): {
        drop(_30) -> bb91;               // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb91 (cleanup): {
        drop(_32) -> bb116;              // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb92 (cleanup): {
        drop(_20) -> bb93;               // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb93 (cleanup): {
        drop(_22) -> bb94;               // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb94 (cleanup): {
        drop(_24) -> bb95;               // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb95 (cleanup): {
        drop(_26) -> bb96;               // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb96 (cleanup): {
        drop(_28) -> bb97;               // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb97 (cleanup): {
        drop(_30) -> bb98;               // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb98 (cleanup): {
        drop(_32) -> bb118;              // scope 3 at src/parser.rs:125:78: 125:79
    }

    bb99 (cleanup): {
        drop(_9) -> bb118;               // scope 0 at src/parser.rs:77:10: 77:11
    }

    bb100 (cleanup): {
        drop(_3) -> bb101;               // scope 0 at src/parser.rs:77:9: 77:10
    }

    bb101 (cleanup): {
        drop(_7) -> bb103;               // scope 0 at src/parser.rs:77:10: 77:11
    }

    bb102 (cleanup): {
        drop(_3) -> bb103;               // scope 0 at src/parser.rs:77:9: 77:10
    }

    bb103 (cleanup): {
        drop(_9) -> bb105;               // scope 0 at src/parser.rs:77:10: 77:11
    }

    bb104 (cleanup): {
        drop(_3) -> bb105;               // scope 0 at src/parser.rs:77:9: 77:10
    }

    bb105 (cleanup): {
        resume;                          // scope 0 at src/parser.rs:7:1: 143:6
    }

    bb106 (cleanup): {
        _105 = alloc::alloc::box_free::<[BoxedParser<[grammar_lexer::Token], grammar::Statement>; 5], std::alloc::Global>(move (_85.0: std::ptr::Unique<[peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; 5]>), move (_85.1: std::alloc::Global)) -> bb108; // scope 8 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:49:64: 49:65
                                         // + literal: Const { ty: unsafe fn(std::ptr::Unique<[peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; 5]>, std::alloc::Global) {alloc::alloc::box_free::<[peruse::parsers::BoxedParser<[grammar_lexer::Token], grammar::Statement>; 5], std::alloc::Global>}, val: Value(Scalar(<ZST>)) }
    }

    bb107 (cleanup): {
        drop(_67) -> bb110;              // scope 6 at src/parser.rs:143:5: 143:6
    }

    bb108 (cleanup): {
        switchInt(_99) -> [false: bb110, otherwise: bb107]; // scope 6 at src/parser.rs:143:5: 143:6
    }

    bb109 (cleanup): {
        drop(_46) -> bb114;              // scope 4 at src/parser.rs:143:5: 143:6
    }

    bb110 (cleanup): {
        switchInt(_100) -> [false: bb114, otherwise: bb109]; // scope 4 at src/parser.rs:143:5: 143:6
    }

    bb111 (cleanup): {
        drop(_47) -> bb114;              // scope 4 at src/parser.rs:137:9: 137:10
    }

    bb112 (cleanup): {
        switchInt(_101) -> [false: bb114, otherwise: bb111]; // scope 4 at src/parser.rs:137:9: 137:10
    }

    bb113 (cleanup): {
        drop(_17) -> bb118;              // scope 3 at src/parser.rs:143:5: 143:6
    }

    bb114 (cleanup): {
        switchInt(_102) -> [false: bb118, otherwise: bb113]; // scope 3 at src/parser.rs:143:5: 143:6
    }

    bb115 (cleanup): {
        drop(_18) -> bb118;              // scope 3 at src/parser.rs:127:9: 127:10
    }

    bb116 (cleanup): {
        switchInt(_103) -> [false: bb118, otherwise: bb115]; // scope 3 at src/parser.rs:127:9: 127:10
    }

    bb117 (cleanup): {
        drop(_2) -> bb105;               // scope 0 at src/parser.rs:143:5: 143:6
    }

    bb118 (cleanup): {
        switchInt(_104) -> [false: bb105, otherwise: bb117]; // scope 0 at src/parser.rs:143:5: 143:6
    }
}

fn grammar::<impl at src/grammar.rs:22:10: 22:15>::fmt(_1: &grammar::AddTerm, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/grammar.rs:22:10: 22:15
    debug f => _2;                       // in scope 0 at src/grammar.rs:22:10: 22:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/grammar.rs:22:10: 22:15
    let _3: &grammar::AddOp;             // in scope 0 at src/grammar.rs:24:20: 24:29
    let _4: &grammar::Expr;              // in scope 0 at src/grammar.rs:24:31: 24:39
    let mut _6: std::fmt::DebugTuple;    // in scope 0 at src/grammar.rs:22:10: 22:15
    let mut _7: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:22:10: 22:15
    let mut _8: &str;                    // in scope 0 at src/grammar.rs:22:10: 22:15
    let _9: &str;                        // in scope 0 at src/grammar.rs:22:10: 22:15
    let mut _10: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:22:10: 22:15
    let mut _11: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:22:10: 22:15
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:24:20: 24:29
    let mut _13: &&grammar::AddOp;       // in scope 0 at src/grammar.rs:24:20: 24:29
    let _14: &&grammar::AddOp;           // in scope 0 at src/grammar.rs:24:20: 24:29
    let _15: &grammar::AddOp;            // in scope 0 at src/grammar.rs:24:20: 24:29
    let mut _16: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:22:10: 22:15
    let mut _17: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:22:10: 22:15
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at src/grammar.rs:24:31: 24:39
    let mut _19: &&grammar::Expr;        // in scope 0 at src/grammar.rs:24:31: 24:39
    let _20: &&grammar::Expr;            // in scope 0 at src/grammar.rs:24:31: 24:39
    let _21: &grammar::Expr;             // in scope 0 at src/grammar.rs:24:31: 24:39
    let mut _22: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:22:10: 22:15
    scope 1 {
        debug __self_0_0 => _3;          // in scope 1 at src/grammar.rs:24:20: 24:29
        debug __self_0_1 => _4;          // in scope 1 at src/grammar.rs:24:31: 24:39
        let _5: &mut std::fmt::DebugTuple; // in scope 1 at src/grammar.rs:22:10: 22:15
        scope 2 {
            debug debug_trait_builder => _5; // in scope 2 at src/grammar.rs:22:10: 22:15
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:24:20: 24:29
        _3 = &((*_1).0: grammar::AddOp); // scope 0 at src/grammar.rs:24:20: 24:29
        StorageLive(_4);                 // scope 0 at src/grammar.rs:24:31: 24:39
        _4 = &((*_1).1: grammar::Expr);  // scope 0 at src/grammar.rs:24:31: 24:39
        StorageLive(_5);                 // scope 1 at src/grammar.rs:22:10: 22:15
        StorageLive(_6);                 // scope 1 at src/grammar.rs:22:10: 22:15
        StorageLive(_7);                 // scope 1 at src/grammar.rs:22:10: 22:15
        _7 = &mut (*_2);                 // scope 1 at src/grammar.rs:22:10: 22:15
        StorageLive(_8);                 // scope 1 at src/grammar.rs:22:10: 22:15
        StorageLive(_9);                 // scope 1 at src/grammar.rs:22:10: 22:15
        _9 = const "AddTerm";            // scope 1 at src/grammar.rs:22:10: 22:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [65, 100, 100, 84, 101, 114, 109], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 100, 100, 84, 101, 114, 109], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
        _8 = _9;                         // scope 1 at src/grammar.rs:22:10: 22:15
        _6 = Formatter::debug_tuple(move _7, move _8) -> bb1; // scope 1 at src/grammar.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:22:10: 22:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_8);                 // scope 1 at src/grammar.rs:22:14: 22:15
        StorageDead(_7);                 // scope 1 at src/grammar.rs:22:14: 22:15
        _5 = &mut _6;                    // scope 1 at src/grammar.rs:22:10: 22:15
        StorageDead(_9);                 // scope 1 at src/grammar.rs:22:14: 22:15
        StorageLive(_10);                // scope 2 at src/grammar.rs:22:10: 22:15
        StorageLive(_11);                // scope 2 at src/grammar.rs:22:10: 22:15
        _11 = &mut (*_5);                // scope 2 at src/grammar.rs:22:10: 22:15
        StorageLive(_12);                // scope 2 at src/grammar.rs:24:20: 24:29
        StorageLive(_13);                // scope 2 at src/grammar.rs:24:20: 24:29
        StorageLive(_14);                // scope 2 at src/grammar.rs:24:20: 24:29
        StorageLive(_15);                // scope 2 at src/grammar.rs:24:20: 24:29
        _15 = _3;                        // scope 2 at src/grammar.rs:24:20: 24:29
        _14 = &_15;                      // scope 2 at src/grammar.rs:24:20: 24:29
        _13 = _14;                       // scope 2 at src/grammar.rs:24:20: 24:29
        _12 = move _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at src/grammar.rs:24:20: 24:29
        StorageDead(_13);                // scope 2 at src/grammar.rs:24:28: 24:29
        _10 = DebugTuple::field(move _11, move _12) -> bb2; // scope 2 at src/grammar.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:22:10: 22:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_12);                // scope 2 at src/grammar.rs:22:14: 22:15
        StorageDead(_11);                // scope 2 at src/grammar.rs:22:14: 22:15
        StorageDead(_15);                // scope 2 at src/grammar.rs:22:14: 22:15
        StorageDead(_14);                // scope 2 at src/grammar.rs:22:14: 22:15
        StorageDead(_10);                // scope 2 at src/grammar.rs:22:14: 22:15
        StorageLive(_16);                // scope 3 at src/grammar.rs:22:10: 22:15
        StorageLive(_17);                // scope 3 at src/grammar.rs:22:10: 22:15
        _17 = &mut (*_5);                // scope 3 at src/grammar.rs:22:10: 22:15
        StorageLive(_18);                // scope 3 at src/grammar.rs:24:31: 24:39
        StorageLive(_19);                // scope 3 at src/grammar.rs:24:31: 24:39
        StorageLive(_20);                // scope 3 at src/grammar.rs:24:31: 24:39
        StorageLive(_21);                // scope 3 at src/grammar.rs:24:31: 24:39
        _21 = _4;                        // scope 3 at src/grammar.rs:24:31: 24:39
        _20 = &_21;                      // scope 3 at src/grammar.rs:24:31: 24:39
        _19 = _20;                       // scope 3 at src/grammar.rs:24:31: 24:39
        _18 = move _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at src/grammar.rs:24:31: 24:39
        StorageDead(_19);                // scope 3 at src/grammar.rs:24:38: 24:39
        _16 = DebugTuple::field(move _17, move _18) -> bb3; // scope 3 at src/grammar.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:22:10: 22:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::DebugTuple, &'s (dyn std::fmt::Debug + 's)) -> &'r mut std::fmt::DebugTuple {std::fmt::DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_18);                // scope 3 at src/grammar.rs:22:14: 22:15
        StorageDead(_17);                // scope 3 at src/grammar.rs:22:14: 22:15
        StorageDead(_21);                // scope 3 at src/grammar.rs:22:14: 22:15
        StorageDead(_20);                // scope 3 at src/grammar.rs:22:14: 22:15
        StorageDead(_16);                // scope 3 at src/grammar.rs:22:14: 22:15
        StorageLive(_22);                // scope 4 at src/grammar.rs:22:10: 22:15
        _22 = &mut (*_5);                // scope 4 at src/grammar.rs:22:10: 22:15
        _0 = DebugTuple::finish(move _22) -> bb4; // scope 4 at src/grammar.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:22:10: 22:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_22);                // scope 4 at src/grammar.rs:22:14: 22:15
        StorageDead(_6);                 // scope 1 at src/grammar.rs:22:14: 22:15
        StorageDead(_5);                 // scope 1 at src/grammar.rs:22:14: 22:15
        StorageDead(_4);                 // scope 0 at src/grammar.rs:22:14: 22:15
        StorageDead(_3);                 // scope 0 at src/grammar.rs:22:14: 22:15
        return;                          // scope 0 at src/grammar.rs:22:15: 22:15
    }
}

fn token::{closure#1}(_1: &[closure@src/lexer.rs:19:47: 19:116], _2: regex::re_unicode::Captures) -> grammar_lexer::Token {
    debug caps => _2;                    // in scope 0 at src/lexer.rs:19:48: 19:52
    let mut _0: grammar_lexer::Token;    // return place in scope 0 at src/lexer.rs:19:54: 19:54
    let mut _3: i32;                     // in scope 0 at src/lexer.rs:19:68: 19:115
    let mut _4: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at src/lexer.rs:19:68: 19:106
    let mut _5: &str;                    // in scope 0 at src/lexer.rs:19:86: 19:105
    let _6: &str;                        // in scope 0 at src/lexer.rs:19:86: 19:105
    let mut _7: std::option::Option<&str>; // in scope 0 at src/lexer.rs:19:86: 19:96
    let mut _8: &regex::re_unicode::Captures; // in scope 0 at src/lexer.rs:19:86: 19:90

    bb0: {
        StorageLive(_3);                 // scope 0 at src/lexer.rs:19:68: 19:115
        StorageLive(_4);                 // scope 0 at src/lexer.rs:19:68: 19:106
        StorageLive(_5);                 // scope 0 at src/lexer.rs:19:86: 19:105
        StorageLive(_6);                 // scope 0 at src/lexer.rs:19:86: 19:105
        StorageLive(_7);                 // scope 0 at src/lexer.rs:19:86: 19:96
        StorageLive(_8);                 // scope 0 at src/lexer.rs:19:86: 19:90
        _8 = &_2;                        // scope 0 at src/lexer.rs:19:86: 19:90
        _7 = regex::re_unicode::Captures::at(move _8, const 1_usize) -> [return: bb1, unwind: bb6]; // scope 0 at src/lexer.rs:19:86: 19:96
                                         // mir::Constant
                                         // + span: src/lexer.rs:19:91: 19:93
                                         // + literal: Const { ty: for<'r> fn(&'r regex::re_unicode::Captures, usize) -> std::option::Option<&str> {regex::re_unicode::Captures::at}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_8);                 // scope 0 at src/lexer.rs:19:95: 19:96
        _6 = Option::<&str>::unwrap(move _7) -> [return: bb2, unwind: bb6]; // scope 0 at src/lexer.rs:19:86: 19:105
                                         // mir::Constant
                                         // + span: src/lexer.rs:19:97: 19:103
                                         // + literal: Const { ty: fn(std::option::Option<&str>) -> &str {std::option::Option::<&str>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = _6;                         // scope 0 at src/lexer.rs:19:86: 19:105
        StorageDead(_7);                 // scope 0 at src/lexer.rs:19:104: 19:105
        _4 = <i32 as FromStr>::from_str(move _5) -> [return: bb3, unwind: bb6]; // scope 0 at src/lexer.rs:19:68: 19:106
                                         // mir::Constant
                                         // + span: src/lexer.rs:19:68: 19:85
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::result::Result<i32, <i32 as std::str::FromStr>::Err> {<i32 as std::str::FromStr>::from_str}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_5);                 // scope 0 at src/lexer.rs:19:105: 19:106
        _3 = Result::<i32, ParseIntError>::unwrap(move _4) -> [return: bb4, unwind: bb6]; // scope 0 at src/lexer.rs:19:68: 19:115
                                         // mir::Constant
                                         // + span: src/lexer.rs:19:107: 19:113
                                         // + literal: Const { ty: fn(std::result::Result<i32, std::num::ParseIntError>) -> i32 {std::result::Result::<i32, std::num::ParseIntError>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_4);                 // scope 0 at src/lexer.rs:19:114: 19:115
        ((_0 as Number).0: i32) = move _3; // scope 0 at src/lexer.rs:19:54: 19:116
        discriminant(_0) = 2;            // scope 0 at src/lexer.rs:19:54: 19:116
        StorageDead(_6);                 // scope 0 at src/lexer.rs:19:115: 19:116
        StorageDead(_3);                 // scope 0 at src/lexer.rs:19:115: 19:116
        drop(_2) -> bb5;                 // scope 0 at src/lexer.rs:19:115: 19:116
    }

    bb5: {
        return;                          // scope 0 at src/lexer.rs:19:116: 19:116
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at src/lexer.rs:19:115: 19:116
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at src/lexer.rs:19:47: 19:116
    }
}

fn grammar::Statement::Loop(_1: grammar::Expr, _2: grammar::Block) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/grammar.rs:56:3: 56:20

    bb0: {
        ((_0 as Loop).0: grammar::Expr) = move _1; // scope 0 at src/grammar.rs:56:3: 56:20
        ((_0 as Loop).1: grammar::Block) = move _2; // scope 0 at src/grammar.rs:56:3: 56:20
        discriminant(_0) = 4;            // scope 0 at src/grammar.rs:56:3: 56:20
        return;                          // scope 0 at src/grammar.rs:56:3: 56:20
    }
}

// MIR FOR CTFE
fn grammar::Statement::Loop(_1: grammar::Expr, _2: grammar::Block) -> grammar::Statement {
    let mut _0: grammar::Statement;      // return place in scope 0 at src/grammar.rs:56:3: 56:20

    bb0: {
        ((_0 as Loop).0: grammar::Expr) = move _1; // scope 0 at src/grammar.rs:56:3: 56:20
        ((_0 as Loop).1: grammar::Block) = move _2; // scope 0 at src/grammar.rs:56:3: 56:20
        discriminant(_0) = 4;            // scope 0 at src/grammar.rs:56:3: 56:20
        return;                          // scope 0 at src/grammar.rs:56:3: 56:20
    }
}

fn grammar_lexer::Token::Ident(_1: String) -> grammar_lexer::Token {
    let mut _0: grammar_lexer::Token;    // return place in scope 0 at src/grammar_lexer.rs:9:3: 9:16

    bb0: {
        ((_0 as Ident).0: std::string::String) = move _1; // scope 0 at src/grammar_lexer.rs:9:3: 9:16
        discriminant(_0) = 1;            // scope 0 at src/grammar_lexer.rs:9:3: 9:16
        return;                          // scope 0 at src/grammar_lexer.rs:9:3: 9:16
    }
}

// MIR FOR CTFE
fn grammar_lexer::Token::Ident(_1: String) -> grammar_lexer::Token {
    let mut _0: grammar_lexer::Token;    // return place in scope 0 at src/grammar_lexer.rs:9:3: 9:16

    bb0: {
        ((_0 as Ident).0: std::string::String) = move _1; // scope 0 at src/grammar_lexer.rs:9:3: 9:16
        discriminant(_0) = 1;            // scope 0 at src/grammar_lexer.rs:9:3: 9:16
        return;                          // scope 0 at src/grammar_lexer.rs:9:3: 9:16
    }
}

fn grammar_lexer::<impl at src/grammar_lexer.rs:5:10: 5:19>::eq(_1: &grammar_lexer::Token, _2: &grammar_lexer::Token) -> bool {
    debug self => _1;                    // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    debug other => _2;                   // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _0: bool;                    // return place in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let _3: isize;                       // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _4: &grammar_lexer::Token;   // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let _5: &grammar_lexer::Token;       // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _7: &grammar_lexer::Token;   // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let _8: &grammar_lexer::Token;       // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _9: bool;                    // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _10: bool;                   // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _11: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _12: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _13: (&grammar_lexer::Token, &grammar_lexer::Token); // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _14: &grammar_lexer::Token;  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _15: &grammar_lexer::Token;  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _16: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _17: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _18: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _19: isize;                  // in scope 0 at src/grammar_lexer.rs:5:10: 5:19
    let mut _22: &std::string::String;   // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let mut _23: &std::string::String;   // in scope 0 at src/grammar_lexer.rs:9:9: 9:15
    let mut _26: i32;                    // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let mut _27: i32;                    // in scope 0 at src/grammar_lexer.rs:10:10: 10:13
    let mut _30: &grammar::Comparator;   // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    let mut _31: &grammar::Comparator;   // in scope 0 at src/grammar_lexer.rs:26:7: 26:17
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at src/grammar_lexer.rs:5:10: 5:19
        let _6: isize;                   // in scope 1 at src/grammar_lexer.rs:5:10: 5:19
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at src/grammar_lexer.rs:5:10: 5:19
            let _20: &std::string::String; // in scope 2 at src/grammar_lexer.rs:9:9: 9:15
            let _21: &std::string::String; // in scope 2 at src/grammar_lexer.rs:9:9: 9:15
            let _24: &i32;               // in scope 2 at src/grammar_lexer.rs:10:10: 10:13
            let _25: &i32;               // in scope 2 at src/grammar_lexer.rs:10:10: 10:13
            let _28: &grammar::Comparator; // in scope 2 at src/grammar_lexer.rs:26:7: 26:17
            let _29: &grammar::Comparator; // in scope 2 at src/grammar_lexer.rs:26:7: 26:17
            scope 3 {
                debug __self_0 => _20;   // in scope 3 at src/grammar_lexer.rs:9:9: 9:15
                debug __arg_1_0 => _21;  // in scope 3 at src/grammar_lexer.rs:9:9: 9:15
            }
            scope 4 {
                debug __self_0 => _24;   // in scope 4 at src/grammar_lexer.rs:10:10: 10:13
                debug __arg_1_0 => _25;  // in scope 4 at src/grammar_lexer.rs:10:10: 10:13
            }
            scope 5 {
                debug __self_0 => _28;   // in scope 5 at src/grammar_lexer.rs:26:7: 26:17
                debug __arg_1_0 => _29;  // in scope 5 at src/grammar_lexer.rs:26:7: 26:17
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_4);                 // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_5);                 // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        _5 = _1;                         // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        _4 = _5;                         // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        _3 = discriminant((*_4));        // scope 0 at src/grammar_lexer.rs:5:10: 5:19
        StorageDead(_4);                 // scope 0 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_5);                 // scope 0 at src/grammar_lexer.rs:5:18: 5:19
        StorageLive(_6);                 // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_7);                 // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_8);                 // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        _8 = _2;                         // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        _7 = _8;                         // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        _6 = discriminant((*_7));        // scope 1 at src/grammar_lexer.rs:5:10: 5:19
        StorageDead(_7);                 // scope 1 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_8);                 // scope 1 at src/grammar_lexer.rs:5:18: 5:19
        StorageLive(_9);                 // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_10);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_11);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        _11 = _3;                        // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_12);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        _12 = _6;                        // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        _10 = Eq(move _11, move _12);    // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageDead(_12);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_11);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        _9 = move _10;                   // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageDead(_10);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        switchInt(move _9) -> [false: bb12, otherwise: bb1]; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb1: {
        StorageLive(_13);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_14);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        _14 = _1;                        // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageLive(_15);                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        _15 = _2;                        // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        (_13.0: &grammar_lexer::Token) = move _14; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        (_13.1: &grammar_lexer::Token) = move _15; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        StorageDead(_15);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_14);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        _19 = discriminant((*(_13.0: &grammar_lexer::Token))); // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        switchInt(move _19) -> [1_isize: bb3, 2_isize: bb4, 18_isize: bb5, otherwise: bb2]; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb2: {
        _0 = const true;                 // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        goto -> bb11;                    // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb3: {
        _16 = discriminant((*(_13.1: &grammar_lexer::Token))); // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        switchInt(move _16) -> [1_isize: bb6, otherwise: bb2]; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb4: {
        _17 = discriminant((*(_13.1: &grammar_lexer::Token))); // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        switchInt(move _17) -> [2_isize: bb8, otherwise: bb2]; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb5: {
        _18 = discriminant((*(_13.1: &grammar_lexer::Token))); // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        switchInt(move _18) -> [18_isize: bb9, otherwise: bb2]; // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb6: {
        StorageLive(_20);                // scope 2 at src/grammar_lexer.rs:9:9: 9:15
        _20 = &(((*(_13.0: &grammar_lexer::Token)) as Ident).0: std::string::String); // scope 2 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_21);                // scope 2 at src/grammar_lexer.rs:9:9: 9:15
        _21 = &(((*(_13.1: &grammar_lexer::Token)) as Ident).0: std::string::String); // scope 2 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_22);                // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        _22 = _20;                       // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        StorageLive(_23);                // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        _23 = _21;                       // scope 3 at src/grammar_lexer.rs:9:9: 9:15
        _0 = <String as PartialEq>::eq(move _22, move _23) -> bb7; // scope 3 at src/grammar_lexer.rs:9:9: 9:15
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:9:9: 9:15
                                         // + literal: Const { ty: for<'r, 's> fn(&'r std::string::String, &'s std::string::String) -> bool {<std::string::String as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_23);                // scope 3 at src/grammar_lexer.rs:9:14: 9:15
        StorageDead(_22);                // scope 3 at src/grammar_lexer.rs:9:14: 9:15
        StorageDead(_21);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_20);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        goto -> bb11;                    // scope 2 at src/grammar_lexer.rs:5:18: 5:19
    }

    bb8: {
        StorageLive(_24);                // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        _24 = &(((*(_13.0: &grammar_lexer::Token)) as Number).0: i32); // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_25);                // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        _25 = &(((*(_13.1: &grammar_lexer::Token)) as Number).0: i32); // scope 2 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_26);                // scope 4 at src/grammar_lexer.rs:10:10: 10:13
        _26 = (*_24);                    // scope 4 at src/grammar_lexer.rs:10:10: 10:13
        StorageLive(_27);                // scope 4 at src/grammar_lexer.rs:10:10: 10:13
        _27 = (*_25);                    // scope 4 at src/grammar_lexer.rs:10:10: 10:13
        _0 = Eq(move _26, move _27);     // scope 4 at src/grammar_lexer.rs:10:10: 10:13
        StorageDead(_27);                // scope 4 at src/grammar_lexer.rs:10:12: 10:13
        StorageDead(_26);                // scope 4 at src/grammar_lexer.rs:10:12: 10:13
        StorageDead(_25);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_24);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        goto -> bb11;                    // scope 2 at src/grammar_lexer.rs:5:18: 5:19
    }

    bb9: {
        StorageLive(_28);                // scope 2 at src/grammar_lexer.rs:26:7: 26:17
        _28 = &(((*(_13.0: &grammar_lexer::Token)) as Cmp).0: grammar::Comparator); // scope 2 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_29);                // scope 2 at src/grammar_lexer.rs:26:7: 26:17
        _29 = &(((*(_13.1: &grammar_lexer::Token)) as Cmp).0: grammar::Comparator); // scope 2 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_30);                // scope 5 at src/grammar_lexer.rs:26:7: 26:17
        _30 = _28;                       // scope 5 at src/grammar_lexer.rs:26:7: 26:17
        StorageLive(_31);                // scope 5 at src/grammar_lexer.rs:26:7: 26:17
        _31 = _29;                       // scope 5 at src/grammar_lexer.rs:26:7: 26:17
        _0 = <grammar::Comparator as PartialEq>::eq(move _30, move _31) -> bb10; // scope 5 at src/grammar_lexer.rs:26:7: 26:17
                                         // mir::Constant
                                         // + span: src/grammar_lexer.rs:26:7: 26:17
                                         // + literal: Const { ty: for<'r, 's> fn(&'r grammar::Comparator, &'s grammar::Comparator) -> bool {<grammar::Comparator as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_31);                // scope 5 at src/grammar_lexer.rs:26:16: 26:17
        StorageDead(_30);                // scope 5 at src/grammar_lexer.rs:26:16: 26:17
        StorageDead(_29);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_28);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        goto -> bb11;                    // scope 2 at src/grammar_lexer.rs:5:18: 5:19
    }

    bb11: {
        StorageDead(_13);                // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        goto -> bb13;                    // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb12: {
        _0 = const false;                // scope 2 at src/grammar_lexer.rs:5:10: 5:19
        goto -> bb13;                    // scope 2 at src/grammar_lexer.rs:5:10: 5:19
    }

    bb13: {
        StorageDead(_9);                 // scope 2 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_6);                 // scope 1 at src/grammar_lexer.rs:5:18: 5:19
        StorageDead(_3);                 // scope 0 at src/grammar_lexer.rs:5:18: 5:19
        return;                          // scope 0 at src/grammar_lexer.rs:5:19: 5:19
    }
}

fn grammar_lexer::Token::Cmp(_1: grammar::Comparator) -> grammar_lexer::Token {
    let mut _0: grammar_lexer::Token;    // return place in scope 0 at src/grammar_lexer.rs:26:3: 26:18

    bb0: {
        ((_0 as Cmp).0: grammar::Comparator) = move _1; // scope 0 at src/grammar_lexer.rs:26:3: 26:18
        discriminant(_0) = 18;           // scope 0 at src/grammar_lexer.rs:26:3: 26:18
        return;                          // scope 0 at src/grammar_lexer.rs:26:3: 26:18
    }
}

// MIR FOR CTFE
fn grammar_lexer::Token::Cmp(_1: grammar::Comparator) -> grammar_lexer::Token {
    let mut _0: grammar_lexer::Token;    // return place in scope 0 at src/grammar_lexer.rs:26:3: 26:18

    bb0: {
        ((_0 as Cmp).0: grammar::Comparator) = move _1; // scope 0 at src/grammar_lexer.rs:26:3: 26:18
        discriminant(_0) = 18;           // scope 0 at src/grammar_lexer.rs:26:3: 26:18
        return;                          // scope 0 at src/grammar_lexer.rs:26:3: 26:18
    }
}

fn grammar::<impl at src/grammar.rs:11:10: 11:15>::fmt(_1: &grammar::MultOp, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/grammar.rs:11:10: 11:15
    debug f => _2;                       // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _3: (&grammar::MultOp,);     // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _4: &grammar::MultOp;        // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _5: isize;                   // in scope 0 at src/grammar.rs:11:10: 11:15
    let _6: &mut std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _7: std::fmt::DebugTuple;    // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _8: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _9: &str;                    // in scope 0 at src/grammar.rs:11:10: 11:15
    let _10: &str;                       // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _11: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:11:10: 11:15
    let _12: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _13: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _14: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _15: &str;                   // in scope 0 at src/grammar.rs:11:10: 11:15
    let _16: &str;                       // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _17: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:11:10: 11:15
    let _18: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _19: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _20: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _21: &str;                   // in scope 0 at src/grammar.rs:11:10: 11:15
    let _22: &str;                       // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _23: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:11:10: 11:15
    let _24: &mut std::fmt::DebugTuple;  // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _25: std::fmt::DebugTuple;   // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _26: &mut std::fmt::Formatter; // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _27: &str;                   // in scope 0 at src/grammar.rs:11:10: 11:15
    let _28: &str;                       // in scope 0 at src/grammar.rs:11:10: 11:15
    let mut _29: &mut std::fmt::DebugTuple; // in scope 0 at src/grammar.rs:11:10: 11:15
    scope 1 {
        debug debug_trait_builder => _6; // in scope 1 at src/grammar.rs:11:10: 11:15
    }
    scope 2 {
        debug debug_trait_builder => _12; // in scope 2 at src/grammar.rs:11:10: 11:15
    }
    scope 3 {
        debug debug_trait_builder => _18; // in scope 3 at src/grammar.rs:11:10: 11:15
    }
    scope 4 {
        debug debug_trait_builder => _24; // in scope 4 at src/grammar.rs:11:10: 11:15
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_4);                 // scope 0 at src/grammar.rs:11:10: 11:15
        _4 = _1;                         // scope 0 at src/grammar.rs:11:10: 11:15
        (_3.0: &grammar::MultOp) = move _4; // scope 0 at src/grammar.rs:11:10: 11:15
        StorageDead(_4);                 // scope 0 at src/grammar.rs:11:14: 11:15
        _5 = discriminant((*(_3.0: &grammar::MultOp))); // scope 0 at src/grammar.rs:11:10: 11:15
        switchInt(move _5) -> [0_isize: bb3, 1_isize: bb6, 2_isize: bb9, 3_isize: bb1, otherwise: bb2]; // scope 0 at src/grammar.rs:11:10: 11:15
    }

    bb1: {
        StorageLive(_24);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_25);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_26);                // scope 0 at src/grammar.rs:11:10: 11:15
        _26 = &mut (*_2);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_27);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_28);                // scope 0 at src/grammar.rs:11:10: 11:15
        _28 = const "Start";             // scope 0 at src/grammar.rs:11:10: 11:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [83, 116, 97, 114, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [83, 116, 97, 114, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _27 = _28;                       // scope 0 at src/grammar.rs:11:10: 11:15
        _25 = Formatter::debug_tuple(move _26, move _27) -> bb12; // scope 0 at src/grammar.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at src/grammar.rs:11:10: 11:15
    }

    bb3: {
        StorageLive(_6);                 // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_7);                 // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_8);                 // scope 0 at src/grammar.rs:11:10: 11:15
        _8 = &mut (*_2);                 // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_9);                 // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_10);                // scope 0 at src/grammar.rs:11:10: 11:15
        _10 = const "Multiply";          // scope 0 at src/grammar.rs:11:10: 11:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 117, 108, 116, 105, 112, 108, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 117, 108, 116, 105, 112, 108, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
        _9 = _10;                        // scope 0 at src/grammar.rs:11:10: 11:15
        _7 = Formatter::debug_tuple(move _8, move _9) -> bb4; // scope 0 at src/grammar.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_9);                 // scope 0 at src/grammar.rs:11:14: 11:15
        StorageDead(_8);                 // scope 0 at src/grammar.rs:11:14: 11:15
        _6 = &mut _7;                    // scope 0 at src/grammar.rs:11:10: 11:15
        StorageDead(_10);                // scope 0 at src/grammar.rs:11:14: 11:15
        StorageLive(_11);                // scope 1 at src/grammar.rs:11:10: 11:15
        _11 = &mut (*_6);                // scope 1 at src/grammar.rs:11:10: 11:15
        _0 = DebugTuple::finish(move _11) -> bb5; // scope 1 at src/grammar.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_11);                // scope 1 at src/grammar.rs:11:14: 11:15
        StorageDead(_7);                 // scope 0 at src/grammar.rs:11:14: 11:15
        StorageDead(_6);                 // scope 0 at src/grammar.rs:11:14: 11:15
        goto -> bb14;                    // scope 0 at src/grammar.rs:11:14: 11:15
    }

    bb6: {
        StorageLive(_12);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_13);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_14);                // scope 0 at src/grammar.rs:11:10: 11:15
        _14 = &mut (*_2);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_15);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_16);                // scope 0 at src/grammar.rs:11:10: 11:15
        _16 = const "Divide";            // scope 0 at src/grammar.rs:11:10: 11:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [68, 105, 118, 105, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68, 105, 118, 105, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _15 = _16;                       // scope 0 at src/grammar.rs:11:10: 11:15
        _13 = Formatter::debug_tuple(move _14, move _15) -> bb7; // scope 0 at src/grammar.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_15);                // scope 0 at src/grammar.rs:11:14: 11:15
        StorageDead(_14);                // scope 0 at src/grammar.rs:11:14: 11:15
        _12 = &mut _13;                  // scope 0 at src/grammar.rs:11:10: 11:15
        StorageDead(_16);                // scope 0 at src/grammar.rs:11:14: 11:15
        StorageLive(_17);                // scope 2 at src/grammar.rs:11:10: 11:15
        _17 = &mut (*_12);               // scope 2 at src/grammar.rs:11:10: 11:15
        _0 = DebugTuple::finish(move _17) -> bb8; // scope 2 at src/grammar.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_17);                // scope 2 at src/grammar.rs:11:14: 11:15
        StorageDead(_13);                // scope 0 at src/grammar.rs:11:14: 11:15
        StorageDead(_12);                // scope 0 at src/grammar.rs:11:14: 11:15
        goto -> bb14;                    // scope 0 at src/grammar.rs:11:14: 11:15
    }

    bb9: {
        StorageLive(_18);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_19);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_20);                // scope 0 at src/grammar.rs:11:10: 11:15
        _20 = &mut (*_2);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_21);                // scope 0 at src/grammar.rs:11:10: 11:15
        StorageLive(_22);                // scope 0 at src/grammar.rs:11:10: 11:15
        _22 = const "Modulo";            // scope 0 at src/grammar.rs:11:10: 11:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [77, 111, 100, 117, 108, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [77, 111, 100, 117, 108, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _21 = _22;                       // scope 0 at src/grammar.rs:11:10: 11:15
        _19 = Formatter::debug_tuple(move _20, move _21) -> bb10; // scope 0 at src/grammar.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugTuple<'b, '_> {std::fmt::Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_21);                // scope 0 at src/grammar.rs:11:14: 11:15
        StorageDead(_20);                // scope 0 at src/grammar.rs:11:14: 11:15
        _18 = &mut _19;                  // scope 0 at src/grammar.rs:11:10: 11:15
        StorageDead(_22);                // scope 0 at src/grammar.rs:11:14: 11:15
        StorageLive(_23);                // scope 3 at src/grammar.rs:11:10: 11:15
        _23 = &mut (*_18);               // scope 3 at src/grammar.rs:11:10: 11:15
        _0 = DebugTuple::finish(move _23) -> bb11; // scope 3 at src/grammar.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_23);                // scope 3 at src/grammar.rs:11:14: 11:15
        StorageDead(_19);                // scope 0 at src/grammar.rs:11:14: 11:15
        StorageDead(_18);                // scope 0 at src/grammar.rs:11:14: 11:15
        goto -> bb14;                    // scope 0 at src/grammar.rs:11:14: 11:15
    }

    bb12: {
        StorageDead(_27);                // scope 0 at src/grammar.rs:11:14: 11:15
        StorageDead(_26);                // scope 0 at src/grammar.rs:11:14: 11:15
        _24 = &mut _25;                  // scope 0 at src/grammar.rs:11:10: 11:15
        StorageDead(_28);                // scope 0 at src/grammar.rs:11:14: 11:15
        StorageLive(_29);                // scope 4 at src/grammar.rs:11:10: 11:15
        _29 = &mut (*_24);               // scope 4 at src/grammar.rs:11:10: 11:15
        _0 = DebugTuple::finish(move _29) -> bb13; // scope 4 at src/grammar.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: src/grammar.rs:11:10: 11:15
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugTuple) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_29);                // scope 4 at src/grammar.rs:11:14: 11:15
        StorageDead(_25);                // scope 0 at src/grammar.rs:11:14: 11:15
        StorageDead(_24);                // scope 0 at src/grammar.rs:11:14: 11:15
        goto -> bb14;                    // scope 0 at src/grammar.rs:11:14: 11:15
    }

    bb14: {
        StorageDead(_3);                 // scope 0 at src/grammar.rs:11:14: 11:15
        return;                          // scope 0 at src/grammar.rs:11:15: 11:15
    }
}
