// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn to_hex_string(_1: &[u8]) -> String {
    debug data => _1;                    // in scope 0 at tools/create-key-addr/src/main.rs:23:18: 23:22
    let mut _0: std::string::String;     // return place in scope 0 at tools/create-key-addr/src/main.rs:23:34: 23:40
    let _2: std::vec::Vec<std::string::String>; // in scope 0 at tools/create-key-addr/src/main.rs:24:9: 24:13
    let mut _3: std::iter::Map<std::slice::Iter<'_, u8>, [closure@tools/create-key-addr/src/main.rs:24:45: 24:48]>; // in scope 0 at tools/create-key-addr/src/main.rs:24:29: 24:70
    let mut _4: std::slice::Iter<'_, u8>; // in scope 0 at tools/create-key-addr/src/main.rs:24:29: 24:40
    let mut _5: &[std::string::String];  // in scope 0 at tools/create-key-addr/src/main.rs:25:5: 25:18
    let _6: &[std::string::String];      // in scope 0 at tools/create-key-addr/src/main.rs:25:5: 25:18
    let mut _7: &std::vec::Vec<std::string::String>; // in scope 0 at tools/create-key-addr/src/main.rs:25:5: 25:18
    let _8: &str;                        // in scope 0 at tools/create-key-addr/src/main.rs:25:15: 25:17
    scope 1 {
        debug strs => _2;                // in scope 1 at tools/create-key-addr/src/main.rs:24:9: 24:13
    }

    bb0: {
        _4 = core::slice::<impl [u8]>::iter(_1) -> bb1; // scope 0 at tools/create-key-addr/src/main.rs:24:29: 24:40
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:24:34: 24:38
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> std::slice::Iter<'a, u8> {core::slice::<impl [u8]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <std::slice::Iter<'_, u8> as Iterator>::map::<String, [closure@tools/create-key-addr/src/main.rs:24:45: 24:48]>(move _4, const ZeroSized: [closure@tools/create-key-addr/src/main.rs:24:45: 24:48]) -> bb2; // scope 0 at tools/create-key-addr/src/main.rs:24:29: 24:70
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:24:41: 24:44
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, u8>, [closure@tools/create-key-addr/src/main.rs:24:45: 24:48]) -> Map<std::slice::Iter<'_, u8>, [closure@tools/create-key-addr/src/main.rs:24:45: 24:48]> {<std::slice::Iter<'_, u8> as Iterator>::map::<String, [closure@tools/create-key-addr/src/main.rs:24:45: 24:48]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@tools/create-key-addr/src/main.rs:24:45: 24:48], val: Value(<ZST>) }
    }

    bb2: {
        _2 = <Map<std::slice::Iter<'_, u8>, [closure@tools/create-key-addr/src/main.rs:24:45: 24:48]> as Iterator>::collect::<Vec<String>>(move _3) -> bb3; // scope 0 at tools/create-key-addr/src/main.rs:24:29: 24:80
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:24:71: 24:78
                                         // + literal: Const { ty: fn(Map<std::slice::Iter<'_, u8>, [closure@tools/create-key-addr/src/main.rs:24:45: 24:48]>) -> Vec<String> {<Map<std::slice::Iter<'_, u8>, [closure@tools/create-key-addr/src/main.rs:24:45: 24:48]> as Iterator>::collect::<Vec<String>>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &_2;                        // scope 1 at tools/create-key-addr/src/main.rs:25:5: 25:18
        _6 = <Vec<String> as Deref>::deref(move _7) -> [return: bb4, unwind: bb7]; // scope 1 at tools/create-key-addr/src/main.rs:25:5: 25:18
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:25:5: 25:18
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> &'a <Vec<String> as Deref>::Target {<Vec<String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = _6;                         // scope 1 at tools/create-key-addr/src/main.rs:25:5: 25:18
        _8 = const "";                   // scope 1 at tools/create-key-addr/src/main.rs:25:15: 25:17
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:25:15: 25:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = slice::<impl [String]>::join::<&str>(move _5, _8) -> [return: bb5, unwind: bb7]; // scope 1 at tools/create-key-addr/src/main.rs:25:5: 25:18
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:25:10: 25:14
                                         // + literal: Const { ty: for<'a> fn(&'a [String], &str) -> <[String] as Join<&str>>::Output {slice::<impl [String]>::join::<&str>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_2) -> bb6;                 // scope 0 at tools/create-key-addr/src/main.rs:26:1: 26:2
    }

    bb6: {
        return;                          // scope 0 at tools/create-key-addr/src/main.rs:26:2: 26:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at tools/create-key-addr/src/main.rs:26:1: 26:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at tools/create-key-addr/src/main.rs:23:1: 26:2
    }
}

fn to_hex_string::{closure#0}(_1: &mut [closure@tools/create-key-addr/src/main.rs:24:45: 24:48], _2: &u8) -> String {
    debug a => _2;                       // in scope 0 at tools/create-key-addr/src/main.rs:24:46: 24:47
    let mut _0: std::string::String;     // return place in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _4: &[&str];                 // in scope 0 at tools/create-key-addr/src/main.rs:24:57: 24:65
    let mut _5: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _6: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _7: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _8: core::fmt::ArgumentV1<'_>; // in scope 0 at tools/create-key-addr/src/main.rs:24:67: 24:68
    let _9: &&u8;                        // in scope 0 at tools/create-key-addr/src/main.rs:24:67: 24:68
    let mut _10: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _11: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _12: [std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _13: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _14: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _15: std::fmt::rt::v1::Count; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _16: std::fmt::rt::v1::Count; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _17: core::fmt::UnsafeArg;   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _18: &[&str; 1];             // in scope 0 at tools/create-key-addr/src/main.rs:24:57: 24:65
    scope 1 {
        debug res => _0;                 // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }
    scope 2 {
    }

    bb0: {
        _18 = const _;                   // scope 0 at tools/create-key-addr/src/main.rs:24:57: 24:65
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:24:57: 24:65
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(to_hex_string::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _4 = _18 as &[&str] (Pointer(Unsize)); // scope 0 at tools/create-key-addr/src/main.rs:24:57: 24:65
        _9 = &_2;                        // scope 0 at tools/create-key-addr/src/main.rs:24:67: 24:68
        _8 = core::fmt::ArgumentV1::<'_>::new_lower_hex::<&u8>(_9) -> bb1; // scope 0 at tools/create-key-addr/src/main.rs:24:67: 24:68
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:24:67: 24:68
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &u8) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_lower_hex::<&u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = [move _8];                  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _6 = &_7;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _5 = _6 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _14 = const std::fmt::rt::v1::Alignment::Unknown; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x03)) }
        _15 = Implied;                   // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _16 = Is(const 2_usize) -> bb2;  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + literal: Const { ty: fn(usize) -> Count {Is}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = Argument::new(const 0_usize, const ' ', move _14, const 8_u32, move _15, move _16) -> bb3; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _11 = &_12;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _10 = _11 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _17 = core::fmt::UnsafeArg::new() -> bb4; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = Arguments::<'_>::new_v1_formatted(move _4, move _5, move _10, const core::fmt::UnsafeArg {{ _private: () }}) -> bb5; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: core::fmt::UnsafeArg, val: Value(<ZST>) }
    }

    bb5: {
        _0 = format(move _3) -> bb6;     // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at tools/create-key-addr/src/main.rs:24:69: 24:69
    }
}

promoted[0] in to_hex_string::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tools/create-key-addr/src/main.rs:24:57: 24:65
    let mut _1: [&str; 1];               // in scope 0 at tools/create-key-addr/src/main.rs:24:57: 24:65

    bb0: {
        _1 = [const ""];                 // scope 0 at tools/create-key-addr/src/main.rs:24:57: 24:65
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:24:57: 24:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tools/create-key-addr/src/main.rs:24:57: 24:65
        return;                          // scope 0 at tools/create-key-addr/src/main.rs:24:57: 24:65
    }
}

fn write_to_file(_1: String, _2: &str, _3: bool) -> () {
    debug path => _1;                    // in scope 0 at tools/create-key-addr/src/main.rs:28:18: 28:22
    debug data => _2;                    // in scope 0 at tools/create-key-addr/src/main.rs:28:32: 28:36
    debug append => _3;                  // in scope 0 at tools/create-key-addr/src/main.rs:28:44: 28:50
    let mut _0: ();                      // return place in scope 0 at tools/create-key-addr/src/main.rs:28:58: 28:58
    let mut _4: std::fs::File;           // in scope 0 at tools/create-key-addr/src/main.rs:29:9: 29:17
    let mut _5: std::result::Result<std::fs::File, std::io::Error>; // in scope 0 at tools/create-key-addr/src/main.rs:30:9: 33:24
    let mut _6: &std::fs::OpenOptions;   // in scope 0 at tools/create-key-addr/src/main.rs:30:9: 33:24
    let _7: &mut std::fs::OpenOptions;   // in scope 0 at tools/create-key-addr/src/main.rs:30:9: 32:26
    let mut _8: &mut std::fs::OpenOptions; // in scope 0 at tools/create-key-addr/src/main.rs:30:9: 32:26
    let mut _9: &mut std::fs::OpenOptions; // in scope 0 at tools/create-key-addr/src/main.rs:30:9: 31:26
    let mut _10: &mut std::fs::OpenOptions; // in scope 0 at tools/create-key-addr/src/main.rs:30:9: 31:26
    let mut _11: std::fs::OpenOptions;   // in scope 0 at tools/create-key-addr/src/main.rs:30:9: 30:27
    let mut _12: std::string::String;    // in scope 0 at tools/create-key-addr/src/main.rs:33:19: 33:23
    let mut _13: std::result::Result<std::fs::File, std::io::Error>; // in scope 0 at tools/create-key-addr/src/main.rs:36:9: 36:27
    let mut _14: std::string::String;    // in scope 0 at tools/create-key-addr/src/main.rs:36:22: 36:26
    let _15: ();                         // in scope 0 at tools/create-key-addr/src/main.rs:38:5: 38:43
    let mut _16: std::result::Result<(), std::io::Error>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _17: &mut std::fs::File;     // in scope 0 at tools/create-key-addr/src/main.rs:38:12: 38:21
    let mut _18: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _19: &[&str];                // in scope 0 at tools/create-key-addr/src/main.rs:38:23: 38:27
    let mut _20: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _22: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at tools/create-key-addr/src/main.rs:38:29: 38:33
    let _24: &&str;                      // in scope 0 at tools/create-key-addr/src/main.rs:38:29: 38:33
    let mut _26: bool;                   // in scope 0 at tools/create-key-addr/src/main.rs:39:1: 39:2
    scope 1 {
        debug file => _4;                // in scope 1 at tools/create-key-addr/src/main.rs:29:9: 29:17
        let mut _25: &[&str; 1];         // in scope 1 at tools/create-key-addr/src/main.rs:38:23: 38:27
    }

    bb0: {
        _26 = const false;               // scope 0 at tools/create-key-addr/src/main.rs:29:9: 29:17
        _26 = const true;                // scope 0 at tools/create-key-addr/src/main.rs:29:9: 29:17
        switchInt(_3) -> [0: bb6, otherwise: bb1]; // scope 0 at tools/create-key-addr/src/main.rs:29:23: 29:29
    }

    bb1: {
        _11 = OpenOptions::new() -> [return: bb2, unwind: bb17]; // scope 0 at tools/create-key-addr/src/main.rs:30:9: 30:27
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:30:9: 30:25
                                         // + literal: Const { ty: fn() -> OpenOptions {OpenOptions::new}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &mut _11;                  // scope 0 at tools/create-key-addr/src/main.rs:30:9: 31:26
        _9 = OpenOptions::create(move _10, const true) -> [return: bb3, unwind: bb17]; // scope 0 at tools/create-key-addr/src/main.rs:30:9: 31:26
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:31:14: 31:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut OpenOptions, bool) -> &'a mut OpenOptions {OpenOptions::create}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = _9;                         // scope 0 at tools/create-key-addr/src/main.rs:30:9: 32:26
        _7 = OpenOptions::append(move _8, const true) -> [return: bb4, unwind: bb17]; // scope 0 at tools/create-key-addr/src/main.rs:30:9: 32:26
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:32:14: 32:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut OpenOptions, bool) -> &'a mut OpenOptions {OpenOptions::append}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = &(*_7);                     // scope 0 at tools/create-key-addr/src/main.rs:30:9: 33:24
        _26 = const false;               // scope 0 at tools/create-key-addr/src/main.rs:33:19: 33:23
        _12 = move _1;                   // scope 0 at tools/create-key-addr/src/main.rs:33:19: 33:23
        _5 = OpenOptions::open::<String>(move _6, move _12) -> [return: bb5, unwind: bb17]; // scope 0 at tools/create-key-addr/src/main.rs:30:9: 33:24
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:33:14: 33:18
                                         // + literal: Const { ty: for<'a> fn(&'a OpenOptions, String) -> Result<File, std::io::Error> {OpenOptions::open::<String>}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = Result::<File, std::io::Error>::unwrap(move _5) -> [return: bb18, unwind: bb17]; // scope 0 at tools/create-key-addr/src/main.rs:30:9: 34:22
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:34:14: 34:20
                                         // + literal: Const { ty: fn(Result<File, std::io::Error>) -> File {Result::<File, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _26 = const false;               // scope 0 at tools/create-key-addr/src/main.rs:36:22: 36:26
        _14 = move _1;                   // scope 0 at tools/create-key-addr/src/main.rs:36:22: 36:26
        _13 = File::create::<String>(move _14) -> [return: bb7, unwind: bb17]; // scope 0 at tools/create-key-addr/src/main.rs:36:9: 36:27
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:36:9: 36:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(String) -> Result<File, std::io::Error> {File::create::<String>}, val: Value(<ZST>) }
    }

    bb7: {
        _4 = Result::<File, std::io::Error>::unwrap(move _13) -> [return: bb19, unwind: bb17]; // scope 0 at tools/create-key-addr/src/main.rs:36:9: 36:36
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:36:28: 36:34
                                         // + literal: Const { ty: fn(Result<File, std::io::Error>) -> File {Result::<File, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = &mut _4;                   // scope 1 at tools/create-key-addr/src/main.rs:38:12: 38:21
        _25 = const _;                   // scope 1 at tools/create-key-addr/src/main.rs:38:23: 38:27
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:38:23: 38:27
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(write_to_file, [], Some(promoted[0])) }
        _19 = _25 as &[&str] (Pointer(Unsize)); // scope 1 at tools/create-key-addr/src/main.rs:38:23: 38:27
        _24 = &_2;                       // scope 1 at tools/create-key-addr/src/main.rs:38:29: 38:33
        _23 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_24) -> [return: bb9, unwind: bb14]; // scope 1 at tools/create-key-addr/src/main.rs:38:29: 38:33
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:38:29: 38:33
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = [move _23];                // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _21 = &_22;                      // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _20 = _21 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _18 = Arguments::<'_>::new_v1(move _19, move _20) -> [return: bb10, unwind: bb14]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = <File as std::io::Write>::write_fmt(_17, move _18) -> [return: bb11, unwind: bb14]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut File, Arguments<'b>) -> Result<(), std::io::Error> {<File as std::io::Write>::write_fmt}, val: Value(<ZST>) }
    }

    bb11: {
        _15 = Result::<(), std::io::Error>::unwrap(move _16) -> [return: bb12, unwind: bb14]; // scope 1 at tools/create-key-addr/src/main.rs:38:5: 38:43
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:38:35: 38:41
                                         // + literal: Const { ty: fn(Result<(), std::io::Error>) {Result::<(), std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_4) -> [return: bb13, unwind: bb17]; // scope 0 at tools/create-key-addr/src/main.rs:39:1: 39:2
    }

    bb13: {
        return;                          // scope 0 at tools/create-key-addr/src/main.rs:39:2: 39:2
    }

    bb14 (cleanup): {
        drop(_4) -> bb17;                // scope 0 at tools/create-key-addr/src/main.rs:39:1: 39:2
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at tools/create-key-addr/src/main.rs:28:1: 39:2
    }

    bb16 (cleanup): {
        drop(_1) -> bb15;                // scope 0 at tools/create-key-addr/src/main.rs:39:1: 39:2
    }

    bb17 (cleanup): {
        switchInt(_26) -> [0: bb15, otherwise: bb16]; // scope 0 at tools/create-key-addr/src/main.rs:39:1: 39:2
    }

    bb18: {
        goto -> bb8;                     // scope 0 at tools/create-key-addr/src/main.rs:30:9: 34:22
    }

    bb19: {
        goto -> bb8;                     // scope 0 at tools/create-key-addr/src/main.rs:36:9: 36:36
    }
}

promoted[0] in write_to_file: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at tools/create-key-addr/src/main.rs:38:23: 38:27
    let mut _1: [&str; 1];               // in scope 0 at tools/create-key-addr/src/main.rs:38:23: 38:27

    bb0: {
        _1 = [const ""];                 // scope 0 at tools/create-key-addr/src/main.rs:38:23: 38:27
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:38:23: 38:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at tools/create-key-addr/src/main.rs:38:23: 38:27
        return;                          // scope 0 at tools/create-key-addr/src/main.rs:38:23: 38:27
    }
}

fn create_key(_1: String) -> ethereum_types::hash::H512 {
    debug path => _1;                    // in scope 0 at tools/create-key-addr/src/main.rs:41:15: 41:19
    let mut _0: ethereum_types::hash::H512; // return place in scope 0 at tools/create-key-addr/src/main.rs:41:32: 41:38
    let _2: crypto::KeyPair;             // in scope 0 at tools/create-key-addr/src/main.rs:42:9: 42:16
    let mut _4: &ethereum_types::hash::H256; // in scope 0 at tools/create-key-addr/src/main.rs:43:20: 43:37
    let mut _5: &crypto::KeyPair;        // in scope 0 at tools/create-key-addr/src/main.rs:43:20: 43:37
    let mut _7: &[u8];                   // in scope 0 at tools/create-key-addr/src/main.rs:44:33: 44:41
    let _8: &[u8];                       // in scope 0 at tools/create-key-addr/src/main.rs:44:33: 44:41
    let _9: &ethereum_types::hash::H256; // in scope 0 at tools/create-key-addr/src/main.rs:44:33: 44:41
    let mut _11: std::string::String;    // in scope 0 at tools/create-key-addr/src/main.rs:45:27: 45:56
    let mut _12: std::string::String;    // in scope 0 at tools/create-key-addr/src/main.rs:45:27: 45:45
    let mut _13: &str;                   // in scope 0 at tools/create-key-addr/src/main.rs:45:48: 45:56
    let _14: &str;                       // in scope 0 at tools/create-key-addr/src/main.rs:45:48: 45:56
    let _15: &std::string::String;       // in scope 0 at tools/create-key-addr/src/main.rs:45:48: 45:56
    let _16: &str;                       // in scope 0 at tools/create-key-addr/src/main.rs:45:59: 45:63
    let _17: ();                         // in scope 0 at tools/create-key-addr/src/main.rs:46:5: 46:49
    let mut _18: std::string::String;    // in scope 0 at tools/create-key-addr/src/main.rs:46:19: 46:23
    let mut _19: &str;                   // in scope 0 at tools/create-key-addr/src/main.rs:46:25: 46:41
    let _20: &str;                       // in scope 0 at tools/create-key-addr/src/main.rs:46:25: 46:41
    let _21: &std::string::String;       // in scope 0 at tools/create-key-addr/src/main.rs:46:25: 46:41
    let mut _22: &ethereum_types::hash::H512; // in scope 0 at tools/create-key-addr/src/main.rs:47:6: 47:22
    let mut _23: &crypto::KeyPair;       // in scope 0 at tools/create-key-addr/src/main.rs:47:6: 47:22
    let mut _24: bool;                   // in scope 0 at tools/create-key-addr/src/main.rs:46:48: 46:49
    let mut _25: bool;                   // in scope 0 at tools/create-key-addr/src/main.rs:45:55: 45:56
    let mut _26: bool;                   // in scope 0 at tools/create-key-addr/src/main.rs:48:1: 48:2
    scope 1 {
        debug keypair => _2;             // in scope 1 at tools/create-key-addr/src/main.rs:42:9: 42:16
        let _3: ethereum_types::hash::H256; // in scope 1 at tools/create-key-addr/src/main.rs:43:9: 43:16
        scope 2 {
            debug privkey => _3;         // in scope 2 at tools/create-key-addr/src/main.rs:43:9: 43:16
            let _6: std::string::String; // in scope 2 at tools/create-key-addr/src/main.rs:44:9: 44:16
            scope 3 {
                debug hex_str => _6;     // in scope 3 at tools/create-key-addr/src/main.rs:44:9: 44:16
                let _10: std::string::String; // in scope 3 at tools/create-key-addr/src/main.rs:45:9: 45:24
                scope 4 {
                    debug hex_str_with_0x => _10; // in scope 4 at tools/create-key-addr/src/main.rs:45:9: 45:24
                }
            }
        }
    }

    bb0: {
        _24 = const false;               // scope 0 at tools/create-key-addr/src/main.rs:42:9: 42:16
        _25 = const false;               // scope 0 at tools/create-key-addr/src/main.rs:42:9: 42:16
        _26 = const false;               // scope 0 at tools/create-key-addr/src/main.rs:42:9: 42:16
        _26 = const true;                // scope 0 at tools/create-key-addr/src/main.rs:42:9: 42:16
        _2 = <KeyPair as CreateKey>::gen_keypair() -> [return: bb1, unwind: bb22]; // scope 0 at tools/create-key-addr/src/main.rs:42:19: 42:41
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:42:19: 42:39
                                         // + literal: Const { ty: fn() -> KeyPair {<KeyPair as CreateKey>::gen_keypair}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_2;                        // scope 1 at tools/create-key-addr/src/main.rs:43:20: 43:37
        _4 = <KeyPair as CreateKey>::privkey(move _5) -> [return: bb2, unwind: bb22]; // scope 1 at tools/create-key-addr/src/main.rs:43:20: 43:37
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:43:28: 43:35
                                         // + literal: Const { ty: for<'a> fn(&'a KeyPair) -> &'a <KeyPair as CreateKey>::PrivKey {<KeyPair as CreateKey>::privkey}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = (*_4);                      // scope 1 at tools/create-key-addr/src/main.rs:43:19: 43:37
        _9 = &_3;                        // scope 2 at tools/create-key-addr/src/main.rs:44:33: 44:41
        _8 = <ethereum_types::hash::H256 as Deref>::deref(_9) -> [return: bb3, unwind: bb22]; // scope 2 at tools/create-key-addr/src/main.rs:44:33: 44:41
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:44:33: 44:41
                                         // + literal: Const { ty: for<'a> fn(&'a ethereum_types::hash::H256) -> &'a <ethereum_types::hash::H256 as Deref>::Target {<ethereum_types::hash::H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _8;                         // scope 2 at tools/create-key-addr/src/main.rs:44:33: 44:41
        _6 = to_hex_string(move _7) -> [return: bb4, unwind: bb22]; // scope 2 at tools/create-key-addr/src/main.rs:44:19: 44:42
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:44:19: 44:32
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> String {to_hex_string}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = <String as From<&str>>::from(const "0x") -> [return: bb5, unwind: bb15]; // scope 3 at tools/create-key-addr/src/main.rs:45:27: 45:45
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:45:27: 45:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:45:40: 45:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _25 = const true;                // scope 3 at tools/create-key-addr/src/main.rs:45:48: 45:56
        _15 = &_6;                       // scope 3 at tools/create-key-addr/src/main.rs:45:48: 45:56
        _14 = <String as Deref>::deref(_15) -> [return: bb6, unwind: bb20]; // scope 3 at tools/create-key-addr/src/main.rs:45:48: 45:56
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:45:48: 45:56
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = _14;                       // scope 3 at tools/create-key-addr/src/main.rs:45:48: 45:56
        _25 = const false;               // scope 3 at tools/create-key-addr/src/main.rs:45:27: 45:56
        _11 = <String as Add<&str>>::add(move _12, move _13) -> [return: bb7, unwind: bb20]; // scope 3 at tools/create-key-addr/src/main.rs:45:27: 45:56
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:45:27: 45:56
                                         // + literal: Const { ty: fn(String, &str) -> <String as Add<&str>>::Output {<String as Add<&str>>::add}, val: Value(<ZST>) }
    }

    bb7: {
        _25 = const false;               // scope 3 at tools/create-key-addr/src/main.rs:45:55: 45:56
        _16 = const "\n";                // scope 3 at tools/create-key-addr/src/main.rs:45:59: 45:63
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:45:59: 45:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = <String as Add<&str>>::add(move _11, _16) -> [return: bb8, unwind: bb15]; // scope 3 at tools/create-key-addr/src/main.rs:45:27: 45:63
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:45:27: 45:63
                                         // + literal: Const { ty: fn(String, &str) -> <String as Add<&str>>::Output {<String as Add<&str>>::add}, val: Value(<ZST>) }
    }

    bb8: {
        _26 = const false;               // scope 4 at tools/create-key-addr/src/main.rs:46:19: 46:23
        _24 = const true;                // scope 4 at tools/create-key-addr/src/main.rs:46:19: 46:23
        _18 = move _1;                   // scope 4 at tools/create-key-addr/src/main.rs:46:19: 46:23
        _21 = &_10;                      // scope 4 at tools/create-key-addr/src/main.rs:46:25: 46:41
        _20 = <String as Deref>::deref(_21) -> [return: bb9, unwind: bb18]; // scope 4 at tools/create-key-addr/src/main.rs:46:25: 46:41
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:46:25: 46:41
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = _20;                       // scope 4 at tools/create-key-addr/src/main.rs:46:25: 46:41
        _24 = const false;               // scope 4 at tools/create-key-addr/src/main.rs:46:5: 46:49
        _17 = write_to_file(move _18, move _19, const false) -> [return: bb10, unwind: bb18]; // scope 4 at tools/create-key-addr/src/main.rs:46:5: 46:49
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:46:5: 46:18
                                         // + literal: Const { ty: for<'a> fn(String, &'a str, bool) {write_to_file}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = const false;               // scope 4 at tools/create-key-addr/src/main.rs:46:48: 46:49
        _23 = &_2;                       // scope 4 at tools/create-key-addr/src/main.rs:47:6: 47:22
        _22 = <KeyPair as CreateKey>::pubkey(move _23) -> [return: bb11, unwind: bb14]; // scope 4 at tools/create-key-addr/src/main.rs:47:6: 47:22
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:47:14: 47:20
                                         // + literal: Const { ty: for<'a> fn(&'a KeyPair) -> &'a <KeyPair as CreateKey>::PubKey {<KeyPair as CreateKey>::pubkey}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = (*_22);                     // scope 4 at tools/create-key-addr/src/main.rs:47:5: 47:22
        drop(_10) -> [return: bb12, unwind: bb15]; // scope 3 at tools/create-key-addr/src/main.rs:48:1: 48:2
    }

    bb12: {
        drop(_6) -> [return: bb13, unwind: bb22]; // scope 2 at tools/create-key-addr/src/main.rs:48:1: 48:2
    }

    bb13: {
        return;                          // scope 0 at tools/create-key-addr/src/main.rs:48:2: 48:2
    }

    bb14 (cleanup): {
        drop(_10) -> bb15;               // scope 3 at tools/create-key-addr/src/main.rs:48:1: 48:2
    }

    bb15 (cleanup): {
        drop(_6) -> bb22;                // scope 2 at tools/create-key-addr/src/main.rs:48:1: 48:2
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at tools/create-key-addr/src/main.rs:41:1: 48:2
    }

    bb17 (cleanup): {
        drop(_18) -> bb14;               // scope 4 at tools/create-key-addr/src/main.rs:46:48: 46:49
    }

    bb18 (cleanup): {
        switchInt(_24) -> [0: bb14, otherwise: bb17]; // scope 4 at tools/create-key-addr/src/main.rs:46:48: 46:49
    }

    bb19 (cleanup): {
        drop(_12) -> bb15;               // scope 3 at tools/create-key-addr/src/main.rs:45:55: 45:56
    }

    bb20 (cleanup): {
        switchInt(_25) -> [0: bb15, otherwise: bb19]; // scope 3 at tools/create-key-addr/src/main.rs:45:55: 45:56
    }

    bb21 (cleanup): {
        drop(_1) -> bb16;                // scope 0 at tools/create-key-addr/src/main.rs:48:1: 48:2
    }

    bb22 (cleanup): {
        switchInt(_26) -> [0: bb16, otherwise: bb21]; // scope 0 at tools/create-key-addr/src/main.rs:48:1: 48:2
    }
}

fn create_addr(_1: String, _2: ethereum_types::hash::H512) -> () {
    debug path => _1;                    // in scope 0 at tools/create-key-addr/src/main.rs:50:16: 50:20
    debug pubkey => _2;                  // in scope 0 at tools/create-key-addr/src/main.rs:50:30: 50:36
    let mut _0: ();                      // return place in scope 0 at tools/create-key-addr/src/main.rs:50:46: 50:46
    let _3: ethereum_types::hash::H256;  // in scope 0 at tools/create-key-addr/src/main.rs:51:9: 51:13
    let mut _4: &ethereum_types::hash::H512; // in scope 0 at tools/create-key-addr/src/main.rs:51:16: 51:35
    let _6: &[u8];                       // in scope 0 at tools/create-key-addr/src/main.rs:52:17: 52:29
    let mut _7: &[u8; 32];               // in scope 0 at tools/create-key-addr/src/main.rs:52:17: 52:23
    let mut _8: std::ops::RangeFrom<usize>; // in scope 0 at tools/create-key-addr/src/main.rs:52:24: 52:28
    let mut _11: std::string::String;    // in scope 0 at tools/create-key-addr/src/main.rs:54:27: 54:56
    let mut _12: std::string::String;    // in scope 0 at tools/create-key-addr/src/main.rs:54:27: 54:45
    let mut _13: &str;                   // in scope 0 at tools/create-key-addr/src/main.rs:54:48: 54:56
    let _14: &str;                       // in scope 0 at tools/create-key-addr/src/main.rs:54:48: 54:56
    let _15: &std::string::String;       // in scope 0 at tools/create-key-addr/src/main.rs:54:48: 54:56
    let _16: &str;                       // in scope 0 at tools/create-key-addr/src/main.rs:54:59: 54:63
    let _17: ();                         // in scope 0 at tools/create-key-addr/src/main.rs:55:5: 55:48
    let mut _18: std::string::String;    // in scope 0 at tools/create-key-addr/src/main.rs:55:19: 55:23
    let mut _19: &str;                   // in scope 0 at tools/create-key-addr/src/main.rs:55:25: 55:41
    let _20: &str;                       // in scope 0 at tools/create-key-addr/src/main.rs:55:25: 55:41
    let _21: &std::string::String;       // in scope 0 at tools/create-key-addr/src/main.rs:55:25: 55:41
    let mut _22: bool;                   // in scope 0 at tools/create-key-addr/src/main.rs:55:47: 55:48
    let mut _23: bool;                   // in scope 0 at tools/create-key-addr/src/main.rs:54:55: 54:56
    let mut _24: bool;                   // in scope 0 at tools/create-key-addr/src/main.rs:56:1: 56:2
    scope 1 {
        debug hash => _3;                // in scope 1 at tools/create-key-addr/src/main.rs:51:9: 51:13
        let _5: &[u8];                   // in scope 1 at tools/create-key-addr/src/main.rs:52:9: 52:13
        scope 2 {
            debug addr => _5;            // in scope 2 at tools/create-key-addr/src/main.rs:52:9: 52:13
            let _9: std::string::String; // in scope 2 at tools/create-key-addr/src/main.rs:53:9: 53:16
            scope 3 {
                debug hex_str => _9;     // in scope 3 at tools/create-key-addr/src/main.rs:53:9: 53:16
                let _10: std::string::String; // in scope 3 at tools/create-key-addr/src/main.rs:54:9: 54:24
                scope 4 {
                    debug hex_str_with_0x => _10; // in scope 4 at tools/create-key-addr/src/main.rs:54:9: 54:24
                }
            }
        }
    }

    bb0: {
        _22 = const false;               // scope 0 at tools/create-key-addr/src/main.rs:51:9: 51:13
        _23 = const false;               // scope 0 at tools/create-key-addr/src/main.rs:51:9: 51:13
        _24 = const false;               // scope 0 at tools/create-key-addr/src/main.rs:51:9: 51:13
        _24 = const true;                // scope 0 at tools/create-key-addr/src/main.rs:51:9: 51:13
        _4 = &_2;                        // scope 0 at tools/create-key-addr/src/main.rs:51:16: 51:35
        _3 = <ethereum_types::hash::H512 as Hashable>::crypt_hash(move _4) -> [return: bb1, unwind: bb20]; // scope 0 at tools/create-key-addr/src/main.rs:51:16: 51:35
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:51:23: 51:33
                                         // + literal: Const { ty: for<'a> fn(&'a ethereum_types::hash::H512) -> ethereum_types::hash::H256 {<ethereum_types::hash::H512 as Hashable>::crypt_hash}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &(_3.0: [u8; 32]);          // scope 1 at tools/create-key-addr/src/main.rs:52:17: 52:23
        _8 = const RangeFrom::<usize> {{ start: 12_usize }}; // scope 1 at tools/create-key-addr/src/main.rs:52:24: 52:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x000000000000000c)) }
        _6 = <[u8; 32] as Index<RangeFrom<usize>>>::index(move _7, move _8) -> [return: bb2, unwind: bb20]; // scope 1 at tools/create-key-addr/src/main.rs:52:17: 52:29
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:52:17: 52:29
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 32], RangeFrom<usize>) -> &'a <[u8; 32] as Index<RangeFrom<usize>>>::Output {<[u8; 32] as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _6;                         // scope 1 at tools/create-key-addr/src/main.rs:52:16: 52:29
        _9 = to_hex_string(_5) -> [return: bb3, unwind: bb20]; // scope 2 at tools/create-key-addr/src/main.rs:53:19: 53:38
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:53:19: 53:32
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> String {to_hex_string}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = <String as From<&str>>::from(const "0x") -> [return: bb4, unwind: bb13]; // scope 3 at tools/create-key-addr/src/main.rs:54:27: 54:45
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:54:27: 54:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:54:40: 54:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _23 = const true;                // scope 3 at tools/create-key-addr/src/main.rs:54:48: 54:56
        _15 = &_9;                       // scope 3 at tools/create-key-addr/src/main.rs:54:48: 54:56
        _14 = <String as Deref>::deref(_15) -> [return: bb5, unwind: bb18]; // scope 3 at tools/create-key-addr/src/main.rs:54:48: 54:56
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:54:48: 54:56
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _14;                       // scope 3 at tools/create-key-addr/src/main.rs:54:48: 54:56
        _23 = const false;               // scope 3 at tools/create-key-addr/src/main.rs:54:27: 54:56
        _11 = <String as Add<&str>>::add(move _12, move _13) -> [return: bb6, unwind: bb18]; // scope 3 at tools/create-key-addr/src/main.rs:54:27: 54:56
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:54:27: 54:56
                                         // + literal: Const { ty: fn(String, &str) -> <String as Add<&str>>::Output {<String as Add<&str>>::add}, val: Value(<ZST>) }
    }

    bb6: {
        _23 = const false;               // scope 3 at tools/create-key-addr/src/main.rs:54:55: 54:56
        _16 = const "\n";                // scope 3 at tools/create-key-addr/src/main.rs:54:59: 54:63
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:54:59: 54:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = <String as Add<&str>>::add(move _11, _16) -> [return: bb7, unwind: bb13]; // scope 3 at tools/create-key-addr/src/main.rs:54:27: 54:63
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:54:27: 54:63
                                         // + literal: Const { ty: fn(String, &str) -> <String as Add<&str>>::Output {<String as Add<&str>>::add}, val: Value(<ZST>) }
    }

    bb7: {
        _24 = const false;               // scope 4 at tools/create-key-addr/src/main.rs:55:19: 55:23
        _22 = const true;                // scope 4 at tools/create-key-addr/src/main.rs:55:19: 55:23
        _18 = move _1;                   // scope 4 at tools/create-key-addr/src/main.rs:55:19: 55:23
        _21 = &_10;                      // scope 4 at tools/create-key-addr/src/main.rs:55:25: 55:41
        _20 = <String as Deref>::deref(_21) -> [return: bb8, unwind: bb16]; // scope 4 at tools/create-key-addr/src/main.rs:55:25: 55:41
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:55:25: 55:41
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = _20;                       // scope 4 at tools/create-key-addr/src/main.rs:55:25: 55:41
        _22 = const false;               // scope 4 at tools/create-key-addr/src/main.rs:55:5: 55:48
        _17 = write_to_file(move _18, move _19, const true) -> [return: bb9, unwind: bb16]; // scope 4 at tools/create-key-addr/src/main.rs:55:5: 55:48
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:55:5: 55:18
                                         // + literal: Const { ty: for<'a> fn(String, &'a str, bool) {write_to_file}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = const false;               // scope 4 at tools/create-key-addr/src/main.rs:55:47: 55:48
        drop(_10) -> [return: bb10, unwind: bb13]; // scope 3 at tools/create-key-addr/src/main.rs:56:1: 56:2
    }

    bb10: {
        drop(_9) -> [return: bb11, unwind: bb20]; // scope 2 at tools/create-key-addr/src/main.rs:56:1: 56:2
    }

    bb11: {
        return;                          // scope 0 at tools/create-key-addr/src/main.rs:56:2: 56:2
    }

    bb12 (cleanup): {
        drop(_10) -> bb13;               // scope 3 at tools/create-key-addr/src/main.rs:56:1: 56:2
    }

    bb13 (cleanup): {
        drop(_9) -> bb20;                // scope 2 at tools/create-key-addr/src/main.rs:56:1: 56:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at tools/create-key-addr/src/main.rs:50:1: 56:2
    }

    bb15 (cleanup): {
        drop(_18) -> bb12;               // scope 4 at tools/create-key-addr/src/main.rs:55:47: 55:48
    }

    bb16 (cleanup): {
        switchInt(_22) -> [0: bb12, otherwise: bb15]; // scope 4 at tools/create-key-addr/src/main.rs:55:47: 55:48
    }

    bb17 (cleanup): {
        drop(_12) -> bb13;               // scope 3 at tools/create-key-addr/src/main.rs:54:55: 54:56
    }

    bb18 (cleanup): {
        switchInt(_23) -> [0: bb13, otherwise: bb17]; // scope 3 at tools/create-key-addr/src/main.rs:54:55: 54:56
    }

    bb19 (cleanup): {
        drop(_1) -> bb14;                // scope 0 at tools/create-key-addr/src/main.rs:56:1: 56:2
    }

    bb20 (cleanup): {
        switchInt(_24) -> [0: bb14, otherwise: bb19]; // scope 0 at tools/create-key-addr/src/main.rs:56:1: 56:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at tools/create-key-addr/src/main.rs:58:11: 58:11
    let mut _1: std::env::Args;          // in scope 0 at tools/create-key-addr/src/main.rs:59:9: 59:17
    let mut _2: std::string::String;     // in scope 0 at tools/create-key-addr/src/main.rs:60:13: 60:33
    let mut _3: std::option::Option<std::string::String>; // in scope 0 at tools/create-key-addr/src/main.rs:60:13: 60:24
    let mut _4: &mut std::env::Args;     // in scope 0 at tools/create-key-addr/src/main.rs:60:13: 60:24
    let mut _6: std::string::String;     // in scope 0 at tools/create-key-addr/src/main.rs:61:29: 61:49
    let mut _7: std::option::Option<std::string::String>; // in scope 0 at tools/create-key-addr/src/main.rs:61:29: 61:40
    let mut _8: &mut std::env::Args;     // in scope 0 at tools/create-key-addr/src/main.rs:61:29: 61:40
    let _9: ();                          // in scope 0 at tools/create-key-addr/src/main.rs:62:5: 62:46
    let mut _10: std::string::String;    // in scope 0 at tools/create-key-addr/src/main.rs:62:17: 62:37
    let mut _11: std::option::Option<std::string::String>; // in scope 0 at tools/create-key-addr/src/main.rs:62:17: 62:28
    let mut _12: &mut std::env::Args;    // in scope 0 at tools/create-key-addr/src/main.rs:62:17: 62:28
    let mut _13: ethereum_types::hash::H512; // in scope 0 at tools/create-key-addr/src/main.rs:62:39: 62:45
    scope 1 {
        debug args => _1;                // in scope 1 at tools/create-key-addr/src/main.rs:59:9: 59:17
        scope 2 {
            let _5: ethereum_types::hash::H512; // in scope 2 at tools/create-key-addr/src/main.rs:61:9: 61:15
            scope 3 {
                debug pubkey => _5;      // in scope 3 at tools/create-key-addr/src/main.rs:61:9: 61:15
            }
        }
    }

    bb0: {
        _1 = args() -> bb1;              // scope 0 at tools/create-key-addr/src/main.rs:59:20: 59:31
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:59:20: 59:29
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _1;                    // scope 1 at tools/create-key-addr/src/main.rs:60:13: 60:24
        _3 = <Args as Iterator>::next(move _4) -> [return: bb2, unwind: bb12]; // scope 1 at tools/create-key-addr/src/main.rs:60:13: 60:24
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:60:18: 60:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut Args) -> Option<<Args as Iterator>::Item> {<Args as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Option::<String>::unwrap(move _3) -> [return: bb3, unwind: bb12]; // scope 1 at tools/create-key-addr/src/main.rs:60:13: 60:33
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:60:25: 60:31
                                         // + literal: Const { ty: fn(Option<String>) -> String {Option::<String>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb12]; // scope 1 at tools/create-key-addr/src/main.rs:60:33: 60:34
    }

    bb4: {
        _8 = &mut _1;                    // scope 2 at tools/create-key-addr/src/main.rs:61:29: 61:40
        _7 = <Args as Iterator>::next(move _8) -> [return: bb5, unwind: bb12]; // scope 2 at tools/create-key-addr/src/main.rs:61:29: 61:40
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:61:34: 61:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut Args) -> Option<<Args as Iterator>::Item> {<Args as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = Option::<String>::unwrap(move _7) -> [return: bb6, unwind: bb12]; // scope 2 at tools/create-key-addr/src/main.rs:61:29: 61:49
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:61:41: 61:47
                                         // + literal: Const { ty: fn(Option<String>) -> String {Option::<String>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = create_key(move _6) -> [return: bb7, unwind: bb12]; // scope 2 at tools/create-key-addr/src/main.rs:61:18: 61:50
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:61:18: 61:28
                                         // + literal: Const { ty: fn(String) -> ethereum_types::hash::H512 {create_key}, val: Value(<ZST>) }
    }

    bb7: {
        _12 = &mut _1;                   // scope 3 at tools/create-key-addr/src/main.rs:62:17: 62:28
        _11 = <Args as Iterator>::next(move _12) -> [return: bb8, unwind: bb12]; // scope 3 at tools/create-key-addr/src/main.rs:62:17: 62:28
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:62:22: 62:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut Args) -> Option<<Args as Iterator>::Item> {<Args as Iterator>::next}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = Option::<String>::unwrap(move _11) -> [return: bb9, unwind: bb12]; // scope 3 at tools/create-key-addr/src/main.rs:62:17: 62:37
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:62:29: 62:35
                                         // + literal: Const { ty: fn(Option<String>) -> String {Option::<String>::unwrap}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = _5;                        // scope 3 at tools/create-key-addr/src/main.rs:62:39: 62:45
        _9 = create_addr(move _10, move _13) -> [return: bb10, unwind: bb12]; // scope 3 at tools/create-key-addr/src/main.rs:62:5: 62:46
                                         // mir::Constant
                                         // + span: tools/create-key-addr/src/main.rs:62:5: 62:16
                                         // + literal: Const { ty: fn(String, ethereum_types::hash::H512) {create_addr}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_1) -> bb11;                // scope 0 at tools/create-key-addr/src/main.rs:63:1: 63:2
    }

    bb11: {
        return;                          // scope 0 at tools/create-key-addr/src/main.rs:63:2: 63:2
    }

    bb12 (cleanup): {
        drop(_1) -> bb13;                // scope 0 at tools/create-key-addr/src/main.rs:63:1: 63:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at tools/create-key-addr/src/main.rs:58:1: 63:2
    }
}
